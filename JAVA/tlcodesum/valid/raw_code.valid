{"ids": "31356", "raw_code": "public int hashCode(){\n  return value.hashCode();\n}"}
{"ids": "82853", "raw_code": "@Override protected void propertyChange(PropertyChangeEvent evt){\n  if (SeaGlassLookAndFeel.shouldUpdateStyle(evt)) {\n    updateStyle((JTextComponent)evt.getSource());\n  }\n  super.propertyChange(evt);\n}"}
{"ids": "60164", "raw_code": "@NotNull public PsiQuery filter(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String name){\n  final Set<PsiElement> result=new HashSet<PsiElement>(Arrays.asList(myPsiElements));\n  for (  final PsiElement element : myPsiElements) {\n    final PsiNamedElement namedElement=PyUtil.as(element,clazz);\n    if ((namedElement == null) || (!name.equals(namedElement.getName()))) {\n      result.remove(element);\n    }\n  }\n  return new PsiQuery(result.toArray(new PsiElement[result.size()]));\n}"}
{"ids": "67737", "raw_code": "protected void writeQualifiedName(String nsAlias,String name) throws IOException {\n  if (nsAlias != null && nsAlias.length() > 0) {\n    writer.write(nsAlias);\n    writer.write(':');\n  }\n  writer.write(name);\n}"}
{"ids": "5793", "raw_code": "public TextEditor deleteAll(String pattern){\n  return replaceAll(pattern,\"\");\n}"}
{"ids": "86959", "raw_code": "public synchronized GcmHelper addRegistrationCallback(@NonNull Context context,@NonNull GcmRegistrationListener registrationListener,boolean sticky){\n  if (null == registrationCallbacks) {\n    registrationCallbacks=new ConcurrentLinkedQueue<>();\n  }\n  registrationCallbacks.add(registrationListener);\n  if (sticky && !TextUtils.isEmpty(this.pushToken)) {\n    registrationListener.onTokenAvailable(context,pushToken,false);\n  }\n  return this;\n}"}
{"ids": "38767", "raw_code": "@Override public void acceptTrainingSet(TrainingSetEvent e){\n  Instances trainingSet=e.getTrainingSet();\n  DataSetEvent dse=new DataSetEvent(this,trainingSet);\n  acceptDataSet(dse);\n}"}
{"ids": "59655", "raw_code": "<T>List<T> onFind(Class<T> modelClass,String[] columns,String[] conditions,String orderBy,String limit,boolean isEager){\n  BaseUtility.checkConditionsCorrect(conditions);\n  List<T> dataList=query(modelClass,columns,getWhereClause(conditions),getWhereArgs(conditions),null,null,orderBy,limit,getForeignKeyAssociations(modelClass.getName(),isEager));\n  return dataList;\n}"}
{"ids": "10353", "raw_code": "private boolean isAgentEmpty(Agent agent){\n  if (agent != null) {\n    String first=agent.getFirstName();\n    String last=agent.getLastName();\n    String email=agent.getEmail();\n    String home=agent.getHomepage();\n    String org=agent.getOrganisation();\n    String phone=agent.getPhone();\n    String position=agent.getPosition();\n    String city=null;\n    String street=null;\n    String country=null;\n    String code=null;\n    String province=null;\n    Address address=agent.getAddress();\n    if (address != null) {\n      city=address.getCity();\n      street=address.getAddress();\n      country=address.getCountry();\n      code=address.getPostalCode();\n      province=address.getProvince();\n    }\n    String directory=null;\n    String identifier=null;\n    List<UserId> userIds=agent.getUserIds();\n    if (!userIds.isEmpty()) {\n      UserId userId=userIds.get(0);\n      directory=userId.getDirectory();\n      identifier=userId.getIdentifier();\n    }\n    return (Strings.isNullOrEmpty(city) && Strings.isNullOrEmpty(street) && Strings.isNullOrEmpty(country)&& Strings.isNullOrEmpty(code)&& Strings.isNullOrEmpty(province)&& Strings.isNullOrEmpty(first)&& Strings.isNullOrEmpty(last)&& Strings.isNullOrEmpty(email)&& Strings.isNullOrEmpty(home)&& Strings.isNullOrEmpty(org)&& Strings.isNullOrEmpty(phone)&& Strings.isNullOrEmpty(position)&& Strings.isNullOrEmpty(directory)&& Strings.isNullOrEmpty(identifier));\n  }\n  return true;\n}"}
{"ids": "55172", "raw_code": "public static byte[] calendarToRawBytes(Calendar timestamp,boolean honorDeviceTimeOffset){\n  if (honorDeviceTimeOffset) {\n    int offsetInHours=MiBandCoordinator.getDeviceTimeOffsetHours();\n    if (offsetInHours != 0) {\n      timestamp.add(Calendar.HOUR_OF_DAY,offsetInHours);\n    }\n  }\n  byte[] year=fromUint16(timestamp.get(Calendar.YEAR));\n  return new byte[]{year[0],year[1],fromUint8(timestamp.get(Calendar.MONTH) + 1),fromUint8(timestamp.get(Calendar.DATE)),fromUint8(timestamp.get(Calendar.HOUR_OF_DAY)),fromUint8(timestamp.get(Calendar.MINUTE)),fromUint8(timestamp.get(Calendar.SECOND)),dayOfWeekToRawBytes(timestamp),0};\n}"}
{"ids": "65650", "raw_code": "protected void initBPOrderDetails(int C_BPartner_ID,boolean forInvoice){\n  log.config(\"C_BPartner_ID=\" + C_BPartner_ID);\n  KeyNamePair pp=new KeyNamePair(0,\"\");\n  orderField.removeActionListener(this);\n  orderField.removeAllItems();\n  orderField.addItem(pp);\n  ArrayList<KeyNamePair> list=loadOrderData(C_BPartner_ID,forInvoice,sameWarehouseCb.isSelected());\n  for (  KeyNamePair knp : list)   orderField.addItem(knp);\n  orderField.setSelectedIndex(0);\n  orderField.addActionListener(this);\n  initBPDetails(C_BPartner_ID);\n}"}
{"ids": "64383", "raw_code": "public ModpackInitializationPanel(WizardController controller,Map wizardData,Vector<String> versions,String selVersion){\n  initComponents();\n  this.controller=controller;\n  this.wizardData=wizardData;\n  wizardData.put(KEY_GAME_VERSION,versions);\n  wizardData.put(\"selVersion\",selVersion);\n  wizardData.put(KEY_INCLUDING_LAUNCHER,false);\n  configureComboContents();\n  checkProblem();\n}"}
{"ids": "70479", "raw_code": "public synchronized void remove(int index){\n  super.remove(index);\n  double removedValue=mValue.remove(index);\n  if (removedValue == mMinValue || removedValue == mMaxValue) {\n    initRange();\n  }\n}"}
{"ids": "45640", "raw_code": "private boolean coordIsCalendarCell(float y){\n  return y > cellHeight;\n}"}
{"ids": "87094", "raw_code": "protected void sprint(double doubleField){\n  sprint(String.valueOf(doubleField));\n}"}
{"ids": "48318", "raw_code": "private int attributeMap(String name){\n  Integer num=map.get(name);\n  if (num == null) {\n    return 0;\n  }\n  return num.intValue();\n}"}
{"ids": "40829", "raw_code": "private void groupPlayerStandingCSV(){\n  for (  PlayerQB p : teamQBs) {\n    if (p.year == 0)     teamRSs.add(p);\n else     if (p.year == 1)     teamFRs.add(p);\n else     if (p.year == 2)     teamSOs.add(p);\n else     if (p.year == 3)     teamJRs.add(p);\n else     if (p.year == 4)     teamSRs.add(p);\n  }\n  for (  PlayerRB p : teamRBs) {\n    if (p.year == 0)     teamRSs.add(p);\n else     if (p.year == 1)     teamFRs.add(p);\n else     if (p.year == 2)     teamSOs.add(p);\n else     if (p.year == 3)     teamJRs.add(p);\n else     if (p.year == 4)     teamSRs.add(p);\n  }\n  for (  PlayerWR p : teamWRs) {\n    if (p.year == 0)     teamRSs.add(p);\n else     if (p.year == 1)     teamFRs.add(p);\n else     if (p.year == 2)     teamSOs.add(p);\n else     if (p.year == 3)     teamJRs.add(p);\n else     if (p.year == 4)     teamSRs.add(p);\n  }\n  for (  PlayerK p : teamKs) {\n    if (p.year == 0)     teamRSs.add(p);\n else     if (p.year == 1)     teamFRs.add(p);\n else     if (p.year == 2)     teamSOs.add(p);\n else     if (p.year == 3)     teamJRs.add(p);\n else     if (p.year == 4)     teamSRs.add(p);\n  }\n  for (  PlayerOL p : teamOLs) {\n    if (p.year == 0)     teamRSs.add(p);\n else     if (p.year == 1)     teamFRs.add(p);\n else     if (p.year == 2)     teamSOs.add(p);\n else     if (p.year == 3)     teamJRs.add(p);\n else     if (p.year == 4)     teamSRs.add(p);\n  }\n  for (  PlayerS p : teamSs) {\n    if (p.year == 0)     teamRSs.add(p);\n else     if (p.year == 1)     teamFRs.add(p);\n else     if (p.year == 2)     teamSOs.add(p);\n else     if (p.year == 3)     teamJRs.add(p);\n else     if (p.year == 4)     teamSRs.add(p);\n  }\n  for (  PlayerCB p : teamCBs) {\n    if (p.year == 0)     teamRSs.add(p);\n else     if (p.year == 1)     teamFRs.add(p);\n else     if (p.year == 2)     teamSOs.add(p);\n else     if (p.year == 3)     teamJRs.add(p);\n else     if (p.year == 4)     teamSRs.add(p);\n  }\n  for (  PlayerF7 p : teamF7s) {\n    if (p.year == 0)     teamRSs.add(p);\n else     if (p.year == 1)     teamFRs.add(p);\n else     if (p.year == 2)     teamSOs.add(p);\n else     if (p.year == 3)     teamJRs.add(p);\n else     if (p.year == 4)     teamSRs.add(p);\n  }\n}"}
{"ids": "5369", "raw_code": "public String list() throws IOException, TomcatManagerException {\n  return invoke(\"/list\",null,null);\n}"}
{"ids": "66436", "raw_code": "public AttributeFiller(AttributesImpl attributes,PO poToAutoFill){\n  attributes.clear();\n  atts=attributes;\n  po=poToAutoFill;\n}"}
{"ids": "30462", "raw_code": "public static final void toByteArray(ByteArrayOutputStream output,String str){\n  if (str == null) {\n    return;\n  }\n  output.write(34);\n  int max=str.length();\n  for (int i=0; i < max; i++) {\n    int b=str.charAt(i);\n    if ((b >= 32) && (b <= 126)) {\nswitch (b) {\ncase 34:\ncase 92:\n        output.write(92);\n      break;\n  }\n  output.write(b);\n}\n else {\n  output.write(92);\nswitch (b) {\ncase 8:\n    output.write(98);\n  break;\ncase 9:\noutput.write(116);\nbreak;\ncase 10:\noutput.write(110);\nbreak;\ncase 12:\noutput.write(102);\nbreak;\ncase 13:\noutput.write(114);\nbreak;\ndefault :\noutput.write(117);\nint b3=b >> 4;\nint b4=b & 0xf;\nif (b4 < 10) b4+=48;\n else b4+=87;\nint b2=b3 >> 4;\nb3&=0xf;\nif (b3 < 10) b3+=48;\n else b3+=87;\nint b1=b2 >> 4;\nb2&=0xf;\nif (b2 < 10) b2+=48;\n else b2+=87;\nif (b1 < 10) b1+=48;\n else b1+=87;\noutput.write(b1);\noutput.write(b2);\noutput.write(b3);\noutput.write(b4);\nbreak;\n}\n}\n}\noutput.write(34);\n}"}
{"ids": "45692", "raw_code": "@RequestMapping(value={\"/\",\"\"},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute(\"file\") @Valid File file,BindingResult bindingResult,Principal principal){\n  RestWrapper restWrapper=null;\n  if (bindingResult.hasErrors()) {\n    BindingResultError bindingResultError=new BindingResultError();\n    return bindingResultError.errorMessage(bindingResult);\n  }\n  try {\n    file.setCreationTS(DateConverter.stringToDate(file.getTableCreationTS()));\n    fileDAO.insert(file);\n    restWrapper=new RestWrapper(file,RestWrapper.OK);\n    LOGGER.info(\"Record with ID:\" + file.getBatchId() + \" inserted in File by User:\"+ principal.getName()+ file);\n  }\n catch (  MetadataException e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\n  return restWrapper;\n}"}
{"ids": "54725", "raw_code": "private void enableUpdates(){\n  if (lmgr != null) {\n    try {\n      lmgr.addGpsStatusListener(this);\n      lmgr.requestLocationUpdates(LocationManager.GPS_PROVIDER,gpsLoggingInterval,0,this);\n    }\n catch (    SecurityException e) {\n      Log.e(TAG,\"You denied GPS permission, so this app won't work\");\n    }\n  }\n}"}
{"ids": "6866", "raw_code": "private void addInteger(){\n  int oldPos=pos - 1;\n  String literal=scanInteger();\n  final String substring;\n  final int radix;\n  if (literal.startsWith(\"0x\") || literal.startsWith(\"0X\")) {\n    radix=16;\n    substring=literal.substring(2);\n  }\n else   if (literal.startsWith(\"0\") && literal.length() > 1) {\n    radix=8;\n    substring=literal.substring(1);\n  }\n else {\n    radix=10;\n    substring=literal;\n  }\n  int value=0;\n  try {\n    value=Integer.parseInt(substring,radix);\n  }\n catch (  NumberFormatException e) {\n    error(\"invalid base-\" + radix + \" integer constant: \"+ literal);\n  }\n  addToken(TokenKind.INT,oldPos,pos,value);\n}"}
{"ids": "73598", "raw_code": "public void removeMouseListener(GlobalMouseListener listener){\n  listeners.remove(listener);\n}"}
{"ids": "66478", "raw_code": "public XMLDocument(double version,boolean standalone){\n  prolog=new Vector<Object>(2);\n  StringBuffer versionStr=new StringBuffer();\n  versionStr.append(\"<?xml version=\\\"\");\n  versionStr.append(version);\n  versionStr.append(\"\\\" standalone=\\\"\");\n  if (standalone)   versionStr.append(\"yes\\\"?>\");\n else   versionStr.append(\"no\\\"?>\\n\");\n  this.versionDecl=versionStr.toString();\n}"}
{"ids": "24221", "raw_code": "public ObjectName createDistributionLocator(String host,int port,String workingDirectory,String productDirectory,String remoteCommand) throws MalformedObjectNameException {\n  try {\n    DistributionLocatorJmxImpl locator=(DistributionLocatorJmxImpl)addDistributionLocator();\n    DistributionLocatorConfig config=locator.getConfig();\n    config.setHost(host);\n    config.setPort(port);\n    config.setWorkingDirectory(workingDirectory);\n    config.setProductDirectory(productDirectory);\n    config.setRemoteCommand(remoteCommand);\n    return new ObjectName(locator.getMBeanName());\n  }\n catch (  RuntimeException e) {\n    logger.warn(e.getMessage(),e);\n    throw e;\n  }\ncatch (  VirtualMachineError err) {\n    SystemFailure.initiateFailure(err);\n    throw err;\n  }\ncatch (  Error e) {\n    SystemFailure.checkFailure();\n    logger.error(e.getMessage(),e);\n    throw e;\n  }\n}"}
{"ids": "63946", "raw_code": "void applyCenterPanel(GrassMarlin ui){\n  if (treeViewComponent != null) {\n    centerPanelComponent.add(treeViewComponent,SplitPane.Position.CENTER);\n  }\n  centerPanelComponent.add(graphComponent,SplitPane.Position.RIGHT);\n  centerPanelComponent.add(logComponent,SplitPane.Position.LEFT_BOTTOM);\n  Border b=BorderFactory.createMatteBorder(1,0,1,1,Color.GRAY);\n  Border b2=BorderFactory.createMatteBorder(1,1,1,1,Color.GRAY);\n  treeViewComponent.setBorder(b2);\n  graphComponent.setBorder(b);\n  logComponent.setBorder(b2);\n  centerPanelComponent.setInitialSize(x,y);\n  Dimension d=new Dimension(5,5);\n  ui.add(new Filler(d,d,d),BorderLayout.WEST);\n  ui.add(new Filler(d,d,d),BorderLayout.EAST);\n  ui.add(centerPanelComponent,BorderLayout.CENTER);\n}"}
{"ids": "16664", "raw_code": "private boolean isAbstract(String source){\n  int nonterminalCount=0;\n  for (  String t : source.split(\"\\\\s+\")) {\n    if (!t.matches(NT_REGEX))     return false;\n    nonterminalCount++;\n  }\n  return nonterminalCount != 0;\n}"}
{"ids": "74031", "raw_code": "public static String URIforPortablePath(String path){\n  if (path.startsWith(FileUtil.PREFERENCES)) {\n    return path.replaceFirst(FileUtil.PREFERENCES,\"/prefs/\");\n  }\n else   if (path.startsWith(FileUtil.PROGRAM)) {\n    return path.replaceFirst(FileUtil.PROGRAM,\"/dist/\");\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "61617", "raw_code": "public int hashCode(){\n  return Float.floatToIntBits(value);\n}"}
{"ids": "28687", "raw_code": "public static void log(Throwable error,String message,Object... args){\n  if (loggingEnabled) {\n    Log.d(TAG,args.length == 0 ? message : String.format(message,args),error);\n  }\n}"}
{"ids": "61144", "raw_code": "public void addExtensionNamespace(String uri,ExtensionHandler extNS){\n  m_extensionFunctionNamespaces.put(uri,extNS);\n}"}
{"ids": "81287", "raw_code": "private void generateTypeParameterInfos(BinaryMember parent,char[] signature,HashMap newElements,ArrayList typeParameterHandles){\n  if (signature == null)   return;\n  char[][] typeParameterSignatures=Signature.getTypeParameters(signature);\n  for (int i=0, typeParameterCount=typeParameterSignatures.length; i < typeParameterCount; i++) {\n    char[] typeParameterSignature=typeParameterSignatures[i];\n    char[] typeParameterName=Signature.getTypeVariable(typeParameterSignature);\n    CharOperation.replace(typeParameterSignature,'/','.');\n    char[][] typeParameterBoundSignatures=Signature.getTypeParameterBounds(typeParameterSignature);\n    int boundLength=typeParameterBoundSignatures.length;\n    char[][] typeParameterBounds=new char[boundLength][];\n    for (int j=0; j < boundLength; j++) {\n      typeParameterBounds[j]=Signature.toCharArray(typeParameterBoundSignatures[j]);\n    }\n    TypeParameter typeParameter=new TypeParameter(parent,parent.manager,new String(typeParameterName));\n    TypeParameterElementInfo info=new TypeParameterElementInfo();\n    info.bounds=typeParameterBounds;\n    info.boundsSignatures=typeParameterBoundSignatures;\n    typeParameterHandles.add(typeParameter);\n    while (newElements.containsKey(typeParameter))     typeParameter.occurrenceCount++;\n    newElements.put(typeParameter,info);\n  }\n}"}
{"ids": "57606", "raw_code": "private void signalNotEmpty(){\n  final ReentrantLock takeLock=this.takeLock;\n  takeLock.lock();\n  try {\n    notEmpty.signal();\n  }\n  finally {\n    takeLock.unlock();\n  }\n}"}
{"ids": "55581", "raw_code": "public RoutingInfo(Object o){\n  this.text=o.toString();\n}"}
{"ids": "13416", "raw_code": "private List<View> addView(View view,List<View> cache){\n  if (cache == null) {\n    cache=new LinkedList<View>();\n  }\n  cache.add(view);\n  return cache;\n}"}
{"ids": "43191", "raw_code": "public static CertChainKeyPair generateSigned(String fqdn,X509Certificate issuerCertificate,PrivateKey issuerPrivateKey){\n  try {\n    return generateCertificateAndSign(fqdn,issuerCertificate,issuerPrivateKey,getServerExtensions(issuerCertificate));\n  }\n catch (  CertificateException|OperatorCreationException|NoSuchAlgorithmException|IOException e) {\n    throw new RuntimeException(String.format(\"Failed to generate server certificate, reason: %s\",e.getMessage()),e);\n  }\n}"}
{"ids": "20337", "raw_code": "private void startAnimation(){\n  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);\n  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();\n  mPendingAnimations.clear();\n  int propertyMask=0;\n  int propertyCount=nameValueList.size();\n  for (int i=0; i < propertyCount; ++i) {\n    NameValuesHolder nameValuesHolder=nameValueList.get(i);\n    propertyMask|=nameValuesHolder.mNameConstant;\n  }\n  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));\n  animator.addUpdateListener(mAnimatorEventListener);\n  animator.addListener(mAnimatorEventListener);\n  if (mStartDelaySet) {\n    animator.setStartDelay(mStartDelay);\n  }\n  if (mDurationSet) {\n    animator.setDuration(mDuration);\n  }\n  if (mInterpolatorSet) {\n    animator.setInterpolator(mInterpolator);\n  }\n  animator.start();\n}"}
{"ids": "14893", "raw_code": "public void addRequest(Request request){\n  requestSet.add(request);\n}"}
{"ids": "53201", "raw_code": "public static double logpmf(double x,int n,double p){\n  if (x < 0 || x > n) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  if (p <= 0.) {\n    return x == 0 ? 0. : Double.NEGATIVE_INFINITY;\n  }\n  if (p >= 1.) {\n    return x == n ? 0. : Double.NEGATIVE_INFINITY;\n  }\n  final double q=1 - p;\n  if (x == 0) {\n    if (p < .1) {\n      return -devianceTerm(n,n * q) - n * p;\n    }\n else {\n      return n * Math.log(q);\n    }\n  }\n  if (x == n) {\n    if (p > .9) {\n      return -devianceTerm(n,n * p) - n * q;\n    }\n else {\n      return n * Math.log(p);\n    }\n  }\n  final double lc=stirlingError(n) - stirlingError(x) - stirlingError(n - x)- devianceTerm(x,n * p)- devianceTerm(n - x,n * q);\n  final double f=(MathUtil.TWOPI * x * (n - x)) / n;\n  return lc - .5 * Math.log(f);\n}"}
{"ids": "48364", "raw_code": "private void byte2hex(byte b,StringBuffer buf){\n  char[] hexChars={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};\n  int high=((b & 0xf0) >> 4);\n  int low=(b & 0x0f);\n  buf.append(hexChars[high]);\n  buf.append(hexChars[low]);\n}"}
{"ids": "5738", "raw_code": "public static List<GeoTimeSerie> timesplit(GeoTimeSerie gts,long quietperiod,int minvalues,String labelname){\n  List<GeoTimeSerie> series=new ArrayList<GeoTimeSerie>();\n  if (0 == gts.values || gts.hasLabel(labelname)) {\n    series.add(gts.clone());\n    return series;\n  }\n  sort(gts,false);\n  long lasttick=gts.ticks[0];\n  int idx=0;\n  int gtsid=1;\n  GeoTimeSerie serie=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,4);\n  serie.setName(gts.getName());\n  Map<String,String> labels=new HashMap<String,String>();\n  labels.putAll(gts.getLabels());\n  labels.put(labelname,Integer.toString(gtsid));\n  serie.setLabels(labels);\n  while (idx < gts.values) {\n    if (gts.ticks[idx] - lasttick >= quietperiod) {\n      if (serie.values > 0 && serie.values >= minvalues) {\n        series.add(serie);\n      }\n      serie=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,4);\n      serie.setName(gts.getName());\n      labels=new HashMap<String,String>();\n      labels.putAll(gts.getLabels());\n      gtsid++;\n      labels.put(labelname,Integer.toString(gtsid));\n      serie.setLabels(labels);\n    }\n    Object value=GTSHelper.valueAtIndex(gts,idx);\n    GTSHelper.setValue(serie,gts.ticks[idx],null != gts.locations ? gts.locations[idx] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[idx] : GeoTimeSerie.NO_ELEVATION,value,false);\n    lasttick=gts.ticks[idx];\n    idx++;\n  }\n  if (serie.values > 0 && serie.values >= minvalues) {\n    series.add(serie);\n  }\n  return series;\n}"}
{"ids": "20430", "raw_code": "protected void checkSignature(byte[] buf){\n  if (!Arrays.equals(buf,PngHelperInternal.getPngIdSignature()))   throw new PngjInputException(\"Bad PNG signature\");\n}"}
{"ids": "78128", "raw_code": "private void twoWayMergeInternal(final ReservoirLongsSketch sketchIn,final boolean isModifiable){\n  if (sketchIn.getN() <= sketchIn.getK()) {\n    twoWayMergeInternalStandard(sketchIn);\n  }\n else   if (gadget_.getN() < gadget_.getK()) {\n    final ReservoirLongsSketch tmpSketch=gadget_;\n    gadget_=(isModifiable ? sketchIn : sketchIn.copy());\n    twoWayMergeInternalStandard(tmpSketch);\n  }\n else   if (sketchIn.getImplicitSampleWeight() < gadget_.getN() / ((double)(gadget_.getK() - 1))) {\n    twoWayMergeInternalWeighted(sketchIn);\n  }\n else {\n    final ReservoirLongsSketch tmpSketch=gadget_;\n    gadget_=(isModifiable ? sketchIn : sketchIn.copy());\n    twoWayMergeInternalWeighted(tmpSketch);\n  }\n}"}
{"ids": "3655", "raw_code": "final public void print(Object v){\n  Writer out=this.out;\n  if (out == null)   return;\n  try {\n    if (v == null)     out.write(_nullChars,0,_nullChars.length);\n else {\n      String s=v.toString();\n      out.write(s,0,s.length());\n    }\n  }\n catch (  IOException e) {\n    log.log(Level.FINE,e.toString(),e);\n  }\n}"}
{"ids": "56633", "raw_code": "public void subscribeTo(final K key,final Subscriber<V> subscriber,final Executor subscribeOn){\n  CompletableFuture.runAsync(null,subscribeOn);\n}"}
{"ids": "62153", "raw_code": "public static boolean copyStream(InputStream is,OutputStream os,CopyListener listener,int bufferSize) throws IOException {\n  int current=0;\n  int total=is.available();\n  if (total <= 0) {\n    total=DEFAULT_IMAGE_TOTAL_SIZE;\n  }\n  final byte[] bytes=new byte[bufferSize];\n  int count;\n  if (shouldStopLoading(listener,current,total))   return false;\n  while ((count=is.read(bytes,0,bufferSize)) != -1) {\n    os.write(bytes,0,count);\n    current+=count;\n    if (shouldStopLoading(listener,current,total))     return false;\n  }\n  os.flush();\n  return true;\n}"}
{"ids": "33740", "raw_code": "private void refreshBuffer() throws IOException {\n  if (output == null) {\n    throw new OutOfSpaceException();\n  }\n  output.write(buffer,0,position);\n  position=0;\n}"}
{"ids": "70174", "raw_code": "public String damageBayDoor(){\n  String bayType=\"none\";\n  Vector<Bay> potential;\n  potential=new Vector<Bay>();\n  Enumeration<Transporter> iter=transports.elements();\n  while (iter.hasMoreElements()) {\n    Transporter next=iter.nextElement();\n    if (next instanceof Bay) {\n      Bay nextBay=(Bay)next;\n      if (nextBay.getDoors() > 0) {\n        potential.add(nextBay);\n      }\n    }\n  }\n  if (potential.size() > 0) {\n    Bay chosenBay=potential.elementAt(Compute.randomInt(potential.size()));\n    chosenBay.destroyDoor();\n    chosenBay.resetDoors();\n    chosenBay.setDoors(chosenBay.getDoors() - 1);\n    bayType=chosenBay.getType();\n  }\n  return bayType;\n}"}
{"ids": "53661", "raw_code": "public void updateEnabledState(){\n  boolean b=(getSimulationThread() == null);\n  boolean prep=b && controller != null && controller.isPrepared();\n  clearButton.setEnabled(b);\n  prepareButton.setEnabled(b);\n  runButton.setEnabled(prep);\n  if (b)   pauseButton.setSelected(false);\n  pauseButton.setEnabled(!b);\n  stepButton.setEnabled(prep);\n  cancelButton.setEnabled(!b);\n  for (  JComboBox<Object> combo : selectors.combos)   combo.setEnabled(b);\n}"}
{"ids": "22113", "raw_code": "private void prepareVolumeData() throws Exception {\n  prepareVPlexVolumeData();\n  prepareRPVolumeData();\n}"}
{"ids": "49433", "raw_code": "private static int determineIconIdByMimeTypeList(List<String> mimetypes){\n  if (mimetypes == null || mimetypes.size() < 1) {\n    return R.drawable.file;\n  }\n else {\n    for (    String mimetype : mimetypes) {\n      Integer iconId=MIMETYPE_TO_ICON_MAPPING.get(mimetype);\n      if (iconId != null) {\n        return iconId;\n      }\n    }\n    for (    String mimetype : mimetypes) {\n      String mainMimetypePart=mimetype.split(\"/\")[0];\n      Integer iconId=MAINMIMETYPE_TO_ICON_MAPPING.get(mainMimetypePart);\n      if (iconId != null) {\n        return iconId;\n      }\n    }\n  }\n  return R.drawable.file;\n}"}
{"ids": "33464", "raw_code": "public SmsMmsMessage(Context _context,long _messageId,long _threadId,long _timestamp,String _messageBody,int _unreadCount,int _messageType){\n  context=_context;\n  messageId=_messageId;\n  threadId=_threadId;\n  timestamp=_timestamp;\n  messageBody=_messageBody;\n  unreadCount=_unreadCount;\n  messageType=_messageType;\n  fromAddress=SmsPopupUtils.getMmsAddress(context,messageId);\n  fromEmailGateway=false;\n  contactName=PhoneNumberUtils.formatNumber(fromAddress);\n  ContactIdentification contactIdentify=SmsPopupUtils.getPersonIdFromPhoneNumber(context,fromAddress);\n  if (contactIdentify == null) {\n    contactIdentify=SmsPopupUtils.getPersonIdFromEmail(context,fromAddress);\n    if (contactIdentify != null) {\n      fromEmailGateway=true;\n    }\n  }\n  if (contactIdentify != null) {\n    contactId=contactIdentify.contactId;\n    contactLookupKey=contactIdentify.contactLookup;\n    contactName=contactIdentify.contactName;\n  }\n}"}
{"ids": "75674", "raw_code": "public void attributeAsClass(){\n  DataSortedTableModel model;\n  if (m_CurrentCol == -1) {\n    return;\n  }\n  model=(DataSortedTableModel)m_TableData.getModel();\n  if (model.getAttributeAt(m_CurrentCol) == null) {\n    return;\n  }\n  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n  model.attributeAsClassAt(m_CurrentCol);\n  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n}"}
{"ids": "77202", "raw_code": "public void addListener(RefreshListener listener){\n  if (listener == null) {\n    throw new NullPointerException(\"Listener must not be null\");\n  }\n  refreshListeners.add(listener);\n}"}
{"ids": "54731", "raw_code": "public final void doExport(final String trackName,final File target,int verbosity) throws IOException {\n  Log.i(TAG,\"Exporting gpx file\" + target.getAbsolutePath());\n  mDbHelper=new DatabaseHelper(mContext.getApplicationContext());\n  final BufferedWriter bw=new BufferedWriter(new FileWriter(target));\n  bw.write(XML_HEADER);\n  bw.write(TAG_GPX);\n  if (verbosity == VERBOSITY_TRACK_AND_WAYPOINTS || verbosity == VERBOSITY_WAYPOINTS_ONLY || verbosity == VERBOSITY_ALL) {\n    writeWaypoints(bw);\n  }\n  if (verbosity == VERBOSITY_TRACK_AND_WAYPOINTS || verbosity == VERBOSITY_ALL) {\n    writeTrackpoints(trackName,bw);\n  }\n  bw.flush();\n  if (verbosity == VERBOSITY_ALL) {\n    writeWifis(bw);\n    bw.flush();\n    writeCells(bw);\n    bw.flush();\n  }\n  bw.write(TAG_GPX_CLOSE);\n  bw.close();\n  mDbHelper.close();\n  Log.i(TAG,\"Finished building gpx file\");\n}"}
{"ids": "4780", "raw_code": "public List<V> valuesInSelection(RichEditText editor,int spanType){\n  List<V> result=new ArrayList<V>();\n  Selection expandedSelection=getExpandedSelection(editor,spanType);\n  if (expandedSelection != null) {\n    for (    Span<V> span : getSpans(editor.getText(),expandedSelection)) {\n      result.add(span.getValue());\n    }\n  }\n  return result;\n}"}
{"ids": "64819", "raw_code": "private boolean isGTEDelta(double value){\n  return Math.abs(value) - Math.abs(mDelta) > -1.0e-5;\n}"}
{"ids": "28631", "raw_code": "public static String rowToString(JSONArray ja){\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < ja.length(); i+=1) {\n    if (i > 0) {\n      sb.append(',');\n    }\n    Object object=ja.opt(i);\n    if (object != null) {\n      String string=object.toString();\n      if (string.length() > 0 && (string.indexOf(',') >= 0 || string.indexOf('\\n') >= 0 || string.indexOf('\\r') >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == '\"')) {\n        sb.append('\"');\n        int length=string.length();\n        for (int j=0; j < length; j+=1) {\n          char c=string.charAt(j);\n          if (c >= ' ' && c != '\"') {\n            sb.append(c);\n          }\n        }\n        sb.append('\"');\n      }\n else {\n        sb.append(string);\n      }\n    }\n  }\n  sb.append('\\n');\n  return sb.toString();\n}"}
{"ids": "29865", "raw_code": "private void maybeSampleSyncParams(){\n  long playbackPositionUs=audioTrackUtil.getPlaybackHeadPositionUs();\n  if (playbackPositionUs == 0) {\n    return;\n  }\n  if (log.allowVerbose()) {\n    log.v(\"playbackPositionUs = \" + playbackPositionUs);\n  }\n  long systemClockUs=System.nanoTime() / 1000;\n  if (systemClockUs - lastPlayheadSampleTimeUs >= MIN_PLAYHEAD_OFFSET_SAMPLE_INTERVAL_US) {\n    playheadOffsets[nextPlayheadOffsetIndex]=playbackPositionUs - systemClockUs;\n    nextPlayheadOffsetIndex=(nextPlayheadOffsetIndex + 1) % MAX_PLAYHEAD_OFFSET_COUNT;\n    if (playheadOffsetCount < MAX_PLAYHEAD_OFFSET_COUNT) {\n      playheadOffsetCount++;\n    }\n    lastPlayheadSampleTimeUs=systemClockUs;\n    smoothedPlayheadOffsetUs=0;\n    for (int i=0; i < playheadOffsetCount; i++) {\n      smoothedPlayheadOffsetUs+=playheadOffsets[i] / playheadOffsetCount;\n    }\n  }\n  if (needsPassthroughWorkarounds()) {\n    return;\n  }\n  if (systemClockUs - lastTimestampSampleTimeUs >= MIN_TIMESTAMP_SAMPLE_INTERVAL_US) {\n    audioTimestampSet=audioTrackUtil.updateTimestamp();\n    if (audioTimestampSet) {\n      long audioTimestampUs=audioTrackUtil.getTimestampNanoTime() / 1000;\n      if (log.allowVerbose()) {\n        log.v(\"audioTimestampUs = \" + audioTimestampUs);\n      }\n      long audioTimestampFramePosition=audioTrackUtil.getTimestampFramePosition();\n      if (audioTimestampUs < resumeSystemTimeUs) {\n        audioTimestampSet=false;\n        log.w(\"The timestamp corresponds to a time before the track was most recently resumed: \" + audioTimestampUs + \", \"+ resumeSystemTimeUs);\n      }\n else       if (Math.abs(audioTimestampUs - systemClockUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {\n        String message=\"Spurious audio timestamp (system clock mismatch): \" + audioTimestampFramePosition + \", \"+ audioTimestampUs+ \", \"+ systemClockUs+ \", \"+ playbackPositionUs;\n        if (failOnSpuriousAudioTimestamp) {\n          throw new InvalidAudioTrackTimestampException(message);\n        }\n        log.w(message);\n        audioTimestampSet=false;\n      }\n else       if (Math.abs(framesToDurationUs(audioTimestampFramePosition) - playbackPositionUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {\n        String message=\"Spurious audio timestamp (frame position mismatch): \" + audioTimestampFramePosition + \", \"+ audioTimestampUs+ \", \"+ systemClockUs+ \", \"+ playbackPositionUs;\n        if (failOnSpuriousAudioTimestamp) {\n          throw new InvalidAudioTrackTimestampException(message);\n        }\n        log.w(message);\n        audioTimestampSet=false;\n      }\n    }\n    if (isLatencyQuirkEnabled) {\n      latencyUs=AmazonQuirks.getAudioHWLatency();\n    }\n else     if (getLatencyMethod != null && !passthrough) {\n      try {\n        latencyUs=(Integer)getLatencyMethod.invoke(audioTrack,(Object[])null) * 1000L - bufferSizeUs;\n        latencyUs=Math.max(latencyUs,0);\n        if (latencyUs > MAX_LATENCY_US) {\n          log.w(\"Ignoring impossibly large audio latency: \" + latencyUs);\n          latencyUs=0;\n        }\n      }\n catch (      Exception e) {\n        getLatencyMethod=null;\n      }\n    }\n    lastTimestampSampleTimeUs=systemClockUs;\n  }\n}"}
{"ids": "81640", "raw_code": "@Override public boolean contains(Object object){\n  if (object == null) {\n    return false;\n  }\n  for (int i=0; i < size; i++) {\n    if (object.equals(elements[i])) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "67728", "raw_code": "public void close() throws IOException {\n  writer.close();\n}"}
{"ids": "77424", "raw_code": "public static void substituteProperties(Node node,Properties properties){\n  Node child;\n  Node next=node.getFirstChild();\n  while ((child=next) != null) {\n    next=child.getNextSibling();\n    if (child.getNodeType() == Node.TEXT_NODE) {\n      child.setNodeValue(PropertiesUtil.substituteProperty(child.getNodeValue(),properties));\n    }\n else     if (child.getNodeType() == Node.ELEMENT_NODE) {\n      NamedNodeMap attributes=child.getAttributes();\n      for (int i=0; i < attributes.getLength(); i++) {\n        Node attribute=attributes.item(i);\n        attribute.setNodeValue(PropertiesUtil.substituteProperty(attribute.getNodeValue(),properties));\n      }\n      substituteProperties(child,properties);\n    }\n  }\n}"}
{"ids": "10286", "raw_code": "@SuppressWarnings(\"unchecked\") public PseudoFunctionSelector(String functionName,String expression){\n  super(Type.PSEUDO_FUNCTION);\n  this.pseudoFunction=(PseudoFunction<E>)lookupPseudoFunction(functionName.trim());\n  this.expression=expression;\n  this.parsedExpression=pseudoFunction.parseExpression(expression);\n}"}
{"ids": "6849", "raw_code": "public static String fixQueryMistakes(String q){\n  q=q.replaceAll(\"hashtag:\",\"#\");\n  q=q.replaceAll(\" AND \",\" \");\n  return q;\n}"}
{"ids": "84139", "raw_code": "public byte[] readBytes() throws IOException {\n  if (!parseTag())   throw new BurlapProtocolException(\"expected <base64>\");\n  String tag=sbuf.toString();\n  if (tag.equals(\"null\")) {\n    expectEndTag(\"null\");\n    return null;\n  }\n else   if (tag.equals(\"base64\")) {\n    sbuf.setLength(0);\n    byte[] value=parseBytes();\n    expectEndTag(\"base64\");\n    return value;\n  }\n else   throw expectBeginTag(\"base64\",tag);\n}"}
{"ids": "12567", "raw_code": "public synchronized Utterance pend(){\n  Utterance utterance=null;\n  while (list.size() == 0) {\n    try {\n      wait();\n    }\n catch (    InterruptedException ie) {\n      return null;\n    }\n  }\n  utterance=(Utterance)list.removeFirst();\n  notify();\n  return utterance;\n}"}
{"ids": "52722", "raw_code": "public static EvaluationResult findOrCreate(ResultHierarchy hierarchy,Result parent,String name,String shortname){\n  ArrayList<EvaluationResult> ers=ResultUtil.filterResults(hierarchy,parent,EvaluationResult.class);\n  EvaluationResult ev=null;\n  for (  EvaluationResult e : ers) {\n    if (shortname.equals(e.getShortName())) {\n      ev=e;\n      break;\n    }\n  }\n  if (ev == null) {\n    ev=new EvaluationResult(name,shortname);\n    hierarchy.add(parent,ev);\n  }\n  return ev;\n}"}
{"ids": "51591", "raw_code": "public boolean isConnected(){\n  return connected.get();\n}"}
{"ids": "40100", "raw_code": "private void tryScheduleAction(Runnable action){\n  try {\n    scheduler.submit(action);\n  }\n catch (  RejectedExecutionException e) {\n  }\n}"}
{"ids": "85055", "raw_code": "public void addWebAppDebugModelListener(IWebAppDebugModelListener listener){\nsynchronized (privateInstanceLock) {\n    webAppDebugModelListeners.add(listener);\n  }\n}"}
{"ids": "64541", "raw_code": "public void resetPolicy(){\n  mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY));\n  setRetryUntil(DEFAULT_RETRY_UNTIL);\n  setMaxRetries(DEFAULT_MAX_RETRIES);\n  setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT));\n  setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);\n  mPreferences.commit();\n}"}
{"ids": "61641", "raw_code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n  if (subSignature.equals(\"java.lang.Class[] getClassContext()\")) {\n    java_lang_SecurityManager_getClassContext(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"java.lang.ClassLoader currentClassLoader0()\")) {\n    java_lang_SecurityManager_currentClassLoader0(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"java.lang.Class currentLoadedClass0()\")) {\n    java_lang_SecurityManager_currentLoadedClass0(method,thisVar,returnVar,params);\n    return;\n  }\n else {\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}"}
{"ids": "78790", "raw_code": "public static boolean isFileExists(final String path){\n  if (TextUtils.isEmpty(path)) {\n    Log.e(FileUtils.class,\"isFileExists(): Null or Empty parameter given\");\n    return false;\n  }\n  final File fileToCheck=new File(path);\n  return fileToCheck.exists() && !fileToCheck.isDirectory();\n}"}
{"ids": "9838", "raw_code": "private List<Reference> createSignatureReferences(XMLSignatureFactory xmlSigFactory,List<String> referenceIdList) throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {\n  List<Reference> result=new ArrayList<Reference>();\n  for (  String refId : referenceIdList) {\n    if (refId == null) {\n      continue;\n    }\n    Reference ref=xmlSigFactory.newReference(\"#\" + refId,xmlSigFactory.newDigestMethod(DigestMethod.SHA512,null),Collections.singletonList(xmlSigFactory.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE,(C14NMethodParameterSpec)null)),null,null);\n    result.add(ref);\n  }\n  return Collections.unmodifiableList(result);\n}"}
{"ids": "59908", "raw_code": "public boolean removeNetworkConnection(NetworkConnection networkConnection){\n  return networkConnections.remove(networkConnection);\n}"}
{"ids": "38240", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tSets the attribute index\\n\" + \"\\t(default last).\",\"C\",1,\"-C <col>\"));\n  result.addElement(new Option(\"\\tComma-separated list of labels to add.\\n\" + \"\\t(default: none)\",\"L\",1,\"-L <label1,label2,...>\"));\n  result.addElement(new Option(\"\\tTurns on the sorting of the labels.\",\"S\",0,\"-S\"));\n  return result.elements();\n}"}
{"ids": "76153", "raw_code": "protected Object convertArray(Object value){\n  return value;\n}"}
{"ids": "488", "raw_code": "public static String encodeString(String s){\n  return new String(encode(s.getBytes()));\n}"}
{"ids": "31819", "raw_code": "GridLuceneFile(GridLuceneDirectory dir){\n  this.dir=dir;\n  filesCnt.incrementAndGet();\n}"}
{"ids": "18209", "raw_code": "public void addAttributes(Attributes atts) throws SAXException {\n  int nAtts=atts.getLength();\n  for (int i=0; i < nAtts; i++) {\n    String uri=atts.getURI(i);\n    if (null == uri)     uri=\"\";\n    addAttributeAlways(uri,atts.getLocalName(i),atts.getQName(i),atts.getType(i),atts.getValue(i),false);\n  }\n}"}
{"ids": "52626", "raw_code": "public synchronized void addPanListener(PanListener listener){\n  mPanListeners.add(listener);\n}"}
{"ids": "5033", "raw_code": "public double distance_weighted(PlaPointFloat p_other,double p_horizontal_weight,double p_vertical_weight){\n  double delta_x=v_x - p_other.v_x;\n  double delta_y=v_y - p_other.v_y;\n  delta_x*=p_horizontal_weight;\n  delta_y*=p_vertical_weight;\n  double result=Math.sqrt(delta_x * delta_x + delta_y * delta_y);\n  return result;\n}"}
{"ids": "872", "raw_code": "public NameSpace swap(NameSpace newTop){\n  NameSpace oldTop=(NameSpace)(stack.elementAt(0));\n  stack.setElementAt(newTop,0);\n  return oldTop;\n}"}
{"ids": "75521", "raw_code": "public static List<String> classesPath() throws FileNotFoundException, LoadingFileException {\n  List<File> files=getJavaFiles();\n  List<String> paths=new ArrayList<String>();\n  for (  File file : files)   paths.add(file.getPath());\n  return paths;\n}"}
{"ids": "42935", "raw_code": "public static Number sub(Number a,Number b){\n  if (isFloatingPoint(a) || isFloatingPoint(b)) {\n    return a.doubleValue() - b.doubleValue();\n  }\n else {\n    return a.longValue() - b.longValue();\n  }\n}"}
{"ids": "56697", "raw_code": "public static Stream<String> wordsOf(String text){\n  requireNonNull(text);\n  return WORDS.splitAsStream(text);\n}"}
{"ids": "33153", "raw_code": "public static DeleteParticipant[] loadDeleteParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,DeleteArguments arguments,IParticipantDescriptorFilter filter,String[] affectedNatures,SharableParticipants shared){\n  RefactoringParticipant[] participants=fgDeleteInstance.getParticipants(status,processor,element,arguments,filter,affectedNatures,shared);\n  DeleteParticipant[] result=new DeleteParticipant[participants.length];\n  System.arraycopy(participants,0,result,0,participants.length);\n  return result;\n}"}
{"ids": "82924", "raw_code": "public PutResult(String successCount,String failCount,List<String> errorMessages){\n  _successCount=successCount;\n  _failCount=failCount;\n  _errorMessages=new ArrayList<>();\n  if (errorMessages != null) {\n    _errorMessages.addAll(errorMessages);\n  }\n}"}
{"ids": "51437", "raw_code": "@Override public int hashCode(){\n  int myPosition=position;\n  int hash=0;\n  while (myPosition < limit) {\n    hash=hash + get(myPosition++);\n  }\n  return hash;\n}"}
{"ids": "5978", "raw_code": "public void print(CharSequence text) throws IOException {\n  int size=text.length();\n  int pos=0;\n  for (int i=0; i < size; i++) {\n    if (text.charAt(i) == '\\n') {\n      write(text.subSequence(pos,size),i - pos + 1);\n      pos=i + 1;\n      atStartOfLine=true;\n    }\n  }\n  write(text.subSequence(pos,size),size - pos);\n}"}
{"ids": "29165", "raw_code": "public void closeRunningApp(String deviceID,String app_package) throws InterruptedException, IOException {\n  cmd.runCommand(\"adb -s \" + deviceID + \" shell am force-stop \"+ app_package);\n}"}
{"ids": "68505", "raw_code": "public boolean filteroutInvalidation(T tag,TagQualityStatus statusToAdd,String statusDescription,Timestamp timestamp){\n  return filterout(tag,tag.getValue(),tag.getValueDescription(),statusToAdd,statusDescription,timestamp);\n}"}
{"ids": "79916", "raw_code": "public void bindY(DoubleProperty yProperty){\n  minYWorld.bind(yProperty.add(getMinY()));\n  maxYWorld.bind(minYWorld.add(getHeight()));\n}"}
{"ids": "17810", "raw_code": "private void copyFieldAttributes(){\n  if ((loadFields == null) || fields == null) {\n    return;\n  }\n  for (int i=0; i < loadFields.length; i++) {\n    ObjectStreamField loadField=loadFields[i];\n    String name=loadField.getName();\n    for (int j=0; j < fields.length; j++) {\n      ObjectStreamField field=fields[j];\n      if (name.equals(field.getName())) {\n        loadField.setUnshared(field.isUnshared());\n        loadField.setOffset(field.getOffset());\n        break;\n      }\n    }\n  }\n}"}
{"ids": "132", "raw_code": "public static Uri.Builder appendId(Uri.Builder builder,long id){\n  return builder.appendEncodedPath(String.valueOf(id));\n}"}
{"ids": "83630", "raw_code": "private static void beginStartingService(Context context,Intent intent){\nsynchronized (sStartingServiceSync) {\n    if (sStartingService == null) {\n      PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);\n      sStartingService=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,\"StartingDockService\");\n    }\n    sStartingService.acquire();\n    if (context.startService(intent) == null) {\n      Log.e(TAG,\"Can't start DockService\");\n    }\n  }\n}"}
{"ids": "49848", "raw_code": "private Rect calcBounds(int index,Paint paint){\n  Rect bounds=new Rect();\n  CharSequence title=getTitle(index);\n  bounds.right=(int)paint.measureText(title,0,title.length());\n  bounds.bottom=(int)(paint.descent() - paint.ascent());\n  return bounds;\n}"}
{"ids": "32878", "raw_code": "public static double stddev(double[] a){\n  return Math.sqrt(var(a));\n}"}
{"ids": "27070", "raw_code": "public SimpleArgumentsBundle(@NonNull Map<String,String> arguments,@NonNull DisplayMetrics metrics){\n  mArguments=arguments;\n  mMetrics=metrics;\n}"}
{"ids": "67707", "raw_code": "public static String collapseWhitespace(String str){\n  return collapse(str,WHITE_SPACES,\" \");\n}"}
{"ids": "35344", "raw_code": "private void adjustASIAndCollectFollowElements(CustomInternalN4JSParser previousParser,boolean strict,Set<FollowElement> result){\n  ObservableXtextTokenStream tokens=(ObservableXtextTokenStream)previousParser.getTokenStream();\n  int lastTokenIndex=tokens.size() - 1;\n  if (lastTokenIndex >= 0) {\n    CommonToken lastToken=(CommonToken)tokens.LT(-1);\n    @SuppressWarnings(\"unchecked\") List<Token> tokenList=tokens.getTokens();\n    if (lastToken == null) {\n      return;\n    }\n    if (shouldSkipASI(lastToken)) {\n      if (maySkipASI(lastToken,tokens)) {\n        tokenList.remove(lastTokenIndex);\n        result.addAll(resetAndGetFollowElements(tokens,strict));\n        removePostfixOperator(result);\n      }\n    }\n else     if (shouldAddSyntheticSemicolon(previousParser,lastTokenIndex,lastToken)) {\n      CommonToken token=new CommonToken(semi);\n      tokenList.add(token);\n      result.addAll(resetAndGetFollowElements(tokens,strict));\n      removePostfixOperator(result);\n    }\n  }\n}"}
{"ids": "67559", "raw_code": "public LinkedList<Patch> patch_make(String text1,String text2){\n  if (text1 == null || text2 == null) {\n    throw new IllegalArgumentException(\"Null inputs. (patch_make)\");\n  }\n  LinkedList<Diff> diffs=diff_main(text1,text2,true);\n  if (diffs.size() > 2) {\n    diff_cleanupSemantic(diffs);\n    diff_cleanupEfficiency(diffs);\n  }\n  return patch_make(text1,diffs);\n}"}
{"ids": "22132", "raw_code": "private boolean isMinorVersionUpgrade(String currentVersion,String targetVersion){\n  String currentDbSchemaVersion=VdcUtil.getDbSchemaVersion(currentVersion);\n  if (currentDbSchemaVersion == null) {\n    return false;\n  }\n  return currentDbSchemaVersion.equals(VdcUtil.getDbSchemaVersion(targetVersion));\n}"}
{"ids": "53120", "raw_code": "public static final void exception(Throwable e){\n  logExpensive(Level.SEVERE,e.getMessage(),e);\n}"}
{"ids": "16576", "raw_code": "private static DefaultAlignment valueOf(String str,boolean isHorizontal){\n  if (str.equals(\"f\") || str.equals(\"fill\")) {\n    return FILL_ALIGN;\n  }\n else   if (str.equals(\"c\") || str.equals(\"center\")) {\n    return CENTER_ALIGN;\n  }\n else   if (isHorizontal) {\n    if (str.equals(\"r\") || str.equals(\"right\")) {\n      return RIGHT_ALIGN;\n    }\n else     if (str.equals(\"l\") || str.equals(\"left\")) {\n      return LEFT_ALIGN;\n    }\n else {\n      return null;\n    }\n  }\n else   if (str.equals(\"t\") || str.equals(\"top\")) {\n    return TOP_ALIGN;\n  }\n else   if (str.equals(\"b\") || str.equals(\"bottom\")) {\n    return BOTTOM_ALIGN;\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "82601", "raw_code": "public void combineSets(HashMap<String,Set<String>> containerAffinities,OperatorPair pair){\n  Set<String> set1=containerAffinities.get(pair.first);\n  Set<String> set2=containerAffinities.get(pair.second);\n  set1.addAll(set2);\n  containerAffinities.put(pair.first,set1);\n  containerAffinities.put(pair.second,set1);\n}"}
{"ids": "46365", "raw_code": "protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){\n  propertyChangeSupport.firePropertyChange(propertyName,oldValue,newValue);\n}"}
{"ids": "38763", "raw_code": "@Override public boolean isBusy(){\n  return (m_splitThread != null);\n}"}
{"ids": "26409", "raw_code": "public static <E>boolean isNotEmpty(CharSequence c){\n  return ((c != null) && (c.length() > 0));\n}"}
{"ids": "55605", "raw_code": "private void addInfoButton(JPanel panel,Object o,String clientProp){\n  JButton hButton;\n  hButton=new JButton(o.toString());\n  hButton.putClientProperty(clientProp,o);\n  hButton.addActionListener(this);\n  hButton.setFont(font);\n  hButton.setMargin(new Insets(0,0,0,0));\n  hButton.setBackground(LOG_BUTTON_BG);\n  panel.add(hButton);\n}"}
{"ids": "73424", "raw_code": "public void removeNetworkListener(NetworkListener networkListener){\n  networkListeners.remove(networkListener);\n}"}
{"ids": "65271", "raw_code": "public static String chomp(String s){\n  if (s.endsWith(\"\\r\\n\"))   return s.substring(0,s.length() - 2);\n  if (s.endsWith(\"\\r\") || s.endsWith(\"\\n\"))   return s.substring(0,s.length() - 1);\n  return s;\n}"}
{"ids": "15808", "raw_code": "private void validateSurrogateSettings(){\n  faultySurrogatesRadioButton.setEnabled(false);\n  discardSurrogatesArticleRadioButton.setEnabled(false);\n  replaceSurrogatesRadioButton.setEnabled(false);\n  discardSurrogatesRevisionRadioButton.setSelected(true);\n}"}
{"ids": "23852", "raw_code": "static DiskId createDiskId(long maxOplogSize,boolean isPersistenceType,boolean needsLinkedList){\n  long bytes=maxOplogSize * 1024 * 1024;\n  if (bytes > Integer.MAX_VALUE) {\n    if (isPersistenceType) {\n      if (needsLinkedList) {\n        return new PersistenceWithLongOffset();\n      }\n else {\n        return new PersistenceWithLongOffsetNoLL();\n      }\n    }\n else {\n      if (needsLinkedList) {\n        return new OverflowOnlyWithLongOffset();\n      }\n else {\n        return new OverflowOnlyWithLongOffsetNoLL();\n      }\n    }\n  }\n else {\n    if (isPersistenceType) {\n      if (needsLinkedList) {\n        return new PersistenceWithIntOffset();\n      }\n else {\n        return new PersistenceWithIntOffsetNoLL();\n      }\n    }\n else {\n      if (needsLinkedList) {\n        return new OverflowOnlyWithIntOffset();\n      }\n else {\n        return new OverflowOnlyWithIntOffsetNoLL();\n      }\n    }\n  }\n}"}
{"ids": "61379", "raw_code": "public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {\n  ElemContext elemContext=m_elemContext;\n  if (elemContext.m_startTagOpen) {\n    closeStartTag();\n    elemContext.m_startTagOpen=false;\n  }\n else   if (m_cdataTagOpen) {\n    closeCDATA();\n    m_cdataTagOpen=false;\n  }\n else   if (m_needToCallStartDocument) {\n    startDocumentInternal();\n    m_needToCallStartDocument=false;\n  }\n  if (m_needToOutputDocTypeDecl) {\n    String n=name;\n    if (n == null || n.length() == 0) {\n      n=localName;\n    }\n    outputDocTypeDecl(n);\n  }\n  if (null != namespaceURI && namespaceURI.length() > 0) {\n    super.startElement(namespaceURI,localName,name,atts);\n    return;\n  }\n  try {\n    ElemDesc elemDesc=getElemDesc2(name);\n    int elemFlags=elemDesc.getFlags();\n    if (m_doIndent) {\n      boolean isBlockElement=(elemFlags & ElemDesc.BLOCK) != 0;\n      if (m_ispreserve)       m_ispreserve=false;\n else       if ((null != elemContext.m_elementName) && (!m_inBlockElem || isBlockElement)) {\n        m_startNewLine=true;\n        indent();\n      }\n      m_inBlockElem=!isBlockElement;\n    }\n    if (atts != null)     addAttributes(atts);\n    m_isprevtext=false;\n    final java.io.Writer writer=m_writer;\n    writer.write('<');\n    writer.write(name);\n    if (m_tracer != null)     firePseudoAttributes();\n    if ((elemFlags & ElemDesc.EMPTY) != 0) {\n      m_elemContext=elemContext.push();\n      m_elemContext.m_elementName=name;\n      m_elemContext.m_elementDesc=elemDesc;\n      return;\n    }\n else {\n      elemContext=elemContext.push(namespaceURI,localName,name);\n      m_elemContext=elemContext;\n      elemContext.m_elementDesc=elemDesc;\n      elemContext.m_isRaw=(elemFlags & ElemDesc.RAW) != 0;\n    }\n    if ((elemFlags & ElemDesc.HEADELEM) != 0) {\n      closeStartTag();\n      elemContext.m_startTagOpen=false;\n      if (!m_omitMetaTag) {\n        if (m_doIndent)         indent();\n        writer.write(\"<META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=\");\n        String encoding=getEncoding();\n        String encode=Encodings.getMimeEncoding(encoding);\n        writer.write(encode);\n        writer.write(\"\\\">\");\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new SAXException(e);\n  }\n}"}
{"ids": "54392", "raw_code": "public static long sizeOf(Class clazz){\n  long maxSize=headerSize(clazz);\n  while (clazz != Object.class) {\n    for (    Field f : clazz.getDeclaredFields()) {\n      if ((f.getModifiers() & Modifier.STATIC) == 0) {\n        long offset=unsafe.objectFieldOffset(f);\n        if (offset > maxSize) {\n          maxSize=offset + 1;\n        }\n      }\n    }\n    clazz=clazz.getSuperclass();\n  }\n  return roundUpTo8(maxSize);\n}"}
{"ids": "592", "raw_code": "public void addHandler(String columnName,SQLDataHandler handler){\n  if (m_overrides == null)   m_overrides=new HashMap(3);\n  m_overrides.put(columnName,handler);\n}"}
{"ids": "32233", "raw_code": "public void addNearEvicted(KeyCacheObject key){\n  if (nearEvicted == null)   nearEvicted=new ArrayList<>();\n  nearEvicted.add(key);\n}"}
{"ids": "7105", "raw_code": "public Word(String word,String displayAs,String... soundsLike){\n  this();\n  this.word=word;\n  this.displayAs=displayAs;\n  this.soundsLike=Arrays.asList(soundsLike);\n}"}
{"ids": "72453", "raw_code": "public EnumeratedDistribution(final List<Pair<T,Double>> pmf) throws MathIllegalArgumentException {\n  singletons=new ArrayList<>(pmf.size());\n  final double[] probs=new double[pmf.size()];\n  for (int i=0; i < pmf.size(); i++) {\n    final Pair<T,Double> sample=pmf.get(i);\n    singletons.add(sample.getKey());\n    final double p=sample.getValue();\n    probs[i]=p;\n  }\n  probabilities=checkAndNormalize(probs);\n  cumulativeProbabilities=new double[probabilities.length];\n  double sum=0;\n  for (int i=0; i < probabilities.length; i++) {\n    sum+=probabilities[i];\n    cumulativeProbabilities[i]=sum;\n  }\n}"}
{"ids": "84525", "raw_code": "@Override public Calendar next(){\n  if (spot.equals(endFinal)) {\n    throw new NoSuchElementException();\n  }\n  spot.add(Calendar.DATE,1);\n  return (Calendar)spot.clone();\n}"}
{"ids": "64036", "raw_code": "public void pauseWork(){\n  mExitTasksEarly=false;\n  setPause(true);\n  if (DEBUG) {\n    Log.d(Log_TAG,String.format(\"work_status: pauseWork %s\",this));\n  }\n}"}
{"ids": "85330", "raw_code": "public static List<ErrorLogger.ErrorObject> isVirtualTrackInCPLConformed(PayloadRecord cplPayloadRecord,VirtualTrack virtualTrack,List<PayloadRecord> essencesHeaderPartitionPayloads) throws IOException {\n  List<VirtualTrack> virtualTracks=new ArrayList<>();\n  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();\n  virtualTracks.add(virtualTrack);\n  imfErrorLogger.addAllErrors(checkVirtualTrackAndEssencesHeaderPartitionPayloadRecords(virtualTracks,essencesHeaderPartitionPayloads));\n  if (imfErrorLogger.hasFatalErrors()) {\n    return imfErrorLogger.getErrors();\n  }\n  imfErrorLogger.addAllErrors(conformVirtualTracksInCPL(cplPayloadRecord,essencesHeaderPartitionPayloads,false));\n  return imfErrorLogger.getErrors();\n}"}
{"ids": "885", "raw_code": "public byte receiveOneByte(){\n  Log.d(TAG,\"receiveOneByte() entrance\");\n  try {\n    acquireLock();\n    mServerSocket.receive(mReceivePacket);\n    Log.d(TAG,\"receive: \" + (0 + mReceivePacket.getData()[0]));\n    return mReceivePacket.getData()[0];\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  return Byte.MIN_VALUE;\n}"}
{"ids": "31245", "raw_code": "public static String encode(byte[] input){\n  if (input.length == 0) {\n    return \"\";\n  }\n  int zeros=0;\n  while (zeros < input.length && input[zeros] == 0) {\n    ++zeros;\n  }\n  input=Arrays.copyOf(input,input.length);\n  char[] encoded=new char[input.length * 2];\n  int outputStart=encoded.length;\n  for (int inputStart=zeros; inputStart < input.length; ) {\n    encoded[--outputStart]=ALPHABET[divmod(input,inputStart,256,58)];\n    if (input[inputStart] == 0) {\n      ++inputStart;\n    }\n  }\n  while (outputStart < encoded.length && encoded[outputStart] == ENCODED_ZERO) {\n    ++outputStart;\n  }\n  while (--zeros >= 0) {\n    encoded[--outputStart]=ENCODED_ZERO;\n  }\n  return new String(encoded,outputStart,encoded.length - outputStart);\n}"}
{"ids": "51050", "raw_code": "public static int[] cells(int[] start,int[] end){\n  Arrays.sort(start);\n  Arrays.sort(end);\n  int overlap=0;\n  int gaps=0;\n  for (int i=0, j=0; j < end.length; ) {\n    if (i < start.length && start[i] < end[j]) {\n      overlap++;\n      i++;\n    }\n else {\n      j++;\n      overlap--;\n    }\n    if (overlap == 0) {\n      gaps++;\n    }\n  }\n  int[] cells=new int[gaps * 2];\n  overlap=0;\n  gaps=0;\n  int previousOverlap=0;\n  for (int i=0, j=0; j < end.length; ) {\n    if (i < start.length && start[i] < end[j]) {\n      overlap++;\n      if (previousOverlap == 0) {\n        cells[gaps++]=start[i];\n      }\n      i++;\n    }\n else {\n      overlap--;\n      if (overlap == 0) {\n        cells[gaps++]=end[j];\n      }\n      j++;\n    }\n    previousOverlap=overlap;\n  }\n  return cells;\n}"}
{"ids": "3506", "raw_code": "@Override public InStore openRead(long address,int size){\n  if (fileSize() < address + size) {\n    throw new IllegalStateException(L.l(\"{0} read open for length {1}:{2} but file length {3}\",this,address,size,fileSize()));\n  }\n  if (_isClosed.get()) {\n    throw new IllegalStateException(L.l(\"{0} is closed.\",this));\n  }\n  if (_fileSize < address + size) {\n    throw new IllegalStateException(L.l(\"Open read of large file {0}:{1}\",Long.toHexString(address),size));\n  }\n  try {\n    streamOpen(address,size);\n    return openReadImpl(address,size);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "70703", "raw_code": "List<Address> geoDecode(String searchedLocation){\n  try {\n    Geocoder geo=new Geocoder(sContext,Locale.getDefault());\n    List<Address> addresses=geo.getFromLocationName(searchedLocation,10);\n    if (addresses != null && addresses.size() > 0) {\n      return addresses;\n    }\n  }\n catch (  Exception ex) {\n  }\n  return null;\n}"}
{"ids": "10095", "raw_code": "private boolean isIdentifierStartChar(int position){\n  if (_len >= 0 && position >= _len) {\n    return false;\n  }\n  char ch=_working[position];\n  return Character.isUnicodeIdentifierStart(ch);\n}"}
{"ids": "68080", "raw_code": "public void destroy(){\n  fallbackStorage.clear();\n  FileUtils.deleteQuietly(fallbackStorageFile);\n}"}
{"ids": "7261", "raw_code": "public static SelectClause create(String... propertyNames){\n  List<SelectClauseElement> selectList=new ArrayList<SelectClauseElement>();\n  for (  String name : propertyNames) {\n    selectList.add(new SelectClauseExpression(new PropertyValueExpression(name)));\n  }\n  return new SelectClause(StreamSelector.ISTREAM_ONLY,selectList);\n}"}
{"ids": "12996", "raw_code": "ConfigurationError(String msg,Exception x){\n  super(msg);\n  this.exception=x;\n}"}
{"ids": "53031", "raw_code": "public static String makeMarginTransform(double owidth,double oheight,double iwidth,double iheight,double lmargin,double tmargin,double rmargin,double bmargin){\n  double swidth=iwidth + lmargin + rmargin;\n  double sheight=iheight + tmargin + bmargin;\n  double scale=Math.max(swidth / owidth,sheight / oheight);\n  double offx=(scale * owidth - swidth) * .5 + lmargin;\n  double offy=(scale * oheight - sheight) * .5 + tmargin;\n  return \"scale(\" + fmt(1 / scale) + \") translate(\"+ fmt(offx)+ \" \"+ fmt(offy)+ \")\";\n}"}
{"ids": "34758", "raw_code": "public static boolean isAttachment(String contentDisposition){\n  return contentDisposition != null && contentDisposition.regionMatches(true,0,\"attachment\",0,10);\n}"}
{"ids": "73558", "raw_code": "private JMenu createInsertMenu(){\n  JMenu insertMenu=new JMenu(\"Insert\");\n  insertMenu.add(actionManager.getNewNetworkAction());\n  JMenu newGaugeSubMenu=new JMenu(\"New Plot\");\n  for (  Action action : actionManager.getPlotActions()) {\n    newGaugeSubMenu.add(action);\n  }\n  insertMenu.add(newGaugeSubMenu);\n  JMenu newWorldSubMenu=new JMenu(\"New World\");\n  for (  Action action : actionManager.getNewWorldActions()) {\n    newWorldSubMenu.add(action);\n  }\n  insertMenu.add(newWorldSubMenu);\n  insertMenu.addSeparator();\n  insertMenu.add(actionManager.getNewDocViewerAction());\n  insertMenu.add(actionManager.getNewConsoleAction());\n  return insertMenu;\n}"}
{"ids": "39212", "raw_code": "public static Vector<String> findPackages(){\n  Vector<String> result;\n  Enumeration<String> packages;\n  initCache();\n  result=new Vector<String>();\n  packages=m_ClassCache.packages();\n  while (packages.hasMoreElements()) {\n    result.add(packages.nextElement());\n  }\n  Collections.sort(result,new StringCompare());\n  return result;\n}"}
{"ids": "73661", "raw_code": "public static String convertSystemNameToAlternate(String systemName){\n  if (!validSystemNameFormat(systemName,systemName.charAt(1),\"A\")) {\n    return \"\";\n  }\n  String altName=\"\";\n  altName=systemName;\n  return altName;\n}"}
{"ids": "16580", "raw_code": "private void initializeUserDirectives(){\n  userDirectives=new ArrayList<>();\n  IEclipsePreferences preferences=VelocityCorePlugin.getPreferences();\n  String directives=preferences.get(IPreferencesConstants.VELOCITY_USER_DIRECTIVES,\"\");\n  StringTokenizer st=new StringTokenizer(directives,\",\\n\\r\");\n  while (st.hasMoreElements()) {\n    String directive=(String)st.nextElement();\n    String name=directive.substring(0,directive.indexOf(' '));\n    int type=(directive.endsWith(\"[Block]\") ? Directive.BLOCK : Directive.LINE);\n    userDirectives.add('#' + name);\n    addDirective(new VelocityDirective(name,type));\n  }\n}"}
{"ids": "29587", "raw_code": "private synchronized void storeTimestampAndSetStatus(Timestamper.TimestampSucceeded message,TimestampRecord timestampRecord) throws Exception {\n  try {\n    persistTimestampRecord(message,timestampRecord);\n    setTimestampSucceeded();\n  }\n catch (  Exception e) {\n    log.error(\"Failed to save time-stamp record to database\",e);\n    setTimestampFailedRegardlessOfQueue(new DateTime());\n    throw e;\n  }\n}"}
{"ids": "10144", "raw_code": "public static Character[] valuesOf(char[] array){\n  Character[] dest=new Character[array.length];\n  for (int i=0; i < array.length; i++) {\n    dest[i]=Character.valueOf(array[i]);\n  }\n  return dest;\n}"}
{"ids": "46804", "raw_code": "public void mark(int readlimit){\n  stream.mark(readlimit);\n  if (markSupported()) {\n    markpos=framePos;\n    markPushBackLen=pushBackLen;\n    if (markPushBackLen > 0) {\n      if (markPushBackBuffer == null) {\n        markPushBackBuffer=new byte[frameSize];\n      }\n      System.arraycopy(pushBackBuffer,0,markPushBackBuffer,0,markPushBackLen);\n    }\n  }\n}"}
{"ids": "932", "raw_code": "public static boolean needsDefaultFormatter(ValueFormatter formatter){\n  if (formatter == null)   return true;\n  if (formatter instanceof DefaultValueFormatter)   return true;\n  return false;\n}"}
{"ids": "13097", "raw_code": "public boolean putGrammar(SchemaGrammar grammar,boolean deep,boolean ignoreConflict){\n  if (!ignoreConflict) {\n    return putGrammar(grammar,deep);\n  }\n  SchemaGrammar sg=getGrammar(grammar.fTargetNamespace);\n  if (sg == null) {\n    putGrammar(grammar);\n  }\n  if (!deep) {\n    return true;\n  }\n  Vector currGrammars=grammar.getImportedGrammars();\n  if (currGrammars == null) {\n    return true;\n  }\n  Vector grammars=((Vector)currGrammars.clone());\n  SchemaGrammar sg1, sg2;\n  Vector gs;\n  for (int i=0; i < grammars.size(); i++) {\n    sg1=(SchemaGrammar)grammars.elementAt(i);\n    sg2=getGrammar(sg1.fTargetNamespace);\n    if (sg2 == null) {\n      gs=sg1.getImportedGrammars();\n      if (gs == null)       continue;\n      for (int j=gs.size() - 1; j >= 0; j--) {\n        sg2=(SchemaGrammar)gs.elementAt(j);\n        if (!grammars.contains(sg2))         grammars.addElement(sg2);\n      }\n    }\n else {\n      grammars.remove(sg1);\n    }\n  }\n  for (int i=grammars.size() - 1; i >= 0; i--) {\n    putGrammar((SchemaGrammar)grammars.elementAt(i));\n  }\n  return true;\n}"}
{"ids": "32001", "raw_code": "public List<N> nodes(@Nullable Object key,int cnt){\n  return nodes(key,cnt,null,null);\n}"}
{"ids": "7148", "raw_code": "public boolean isExistsKey(Connection connection,Object[] keys){\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"select 1 from \");\n  builder.append(tableName);\n  builder.append(\" where \");\n  String delimiter=\"\";\n  for (  String keyField : keyFieldNames) {\n    builder.append(delimiter);\n    builder.append(keyField);\n    builder.append(\"=?\");\n    delimiter=\" and \";\n  }\n  String query=builder.toString();\n  PreparedStatement statement=null;\n  try {\n    if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {\n      log.debug(\"Executing query '\" + query + \"' for keys '\"+ print(keys)+ \"'\");\n    }\n    statement=connection.prepareStatement(query);\n    for (int i=0; i < keys.length; i++) {\n      statement.setObject(i + 1,keys[i]);\n    }\n    ResultSet rs=statement.executeQuery();\n    if (!rs.next()) {\n      return false;\n    }\n    return true;\n  }\n catch (  SQLException ex) {\n    String message=\"Failed to invoke : \" + query + \" :\"+ ex.getMessage();\n    log.error(message,ex);\n    storeExceptionHandler.handle(message,ex);\n    throw new StoreExceptionDBRel(message,ex);\n  }\n finally {\n    try {\n      if (statement != null)       statement.close();\n    }\n catch (    SQLException e) {\n    }\n  }\n}"}
{"ids": "86313", "raw_code": "public static <T>T implement(Class<T> type,Object object){\n  if (type.isInstance(object)) {\n    return type.cast(object);\n  }\n  return type.cast(Proxy.newProxyInstance(type.getClassLoader(),new Class[]{type},new DuckType(object)));\n}"}
{"ids": "21422", "raw_code": "public boolean isIvrVsan(int vsanId){\n  boolean inRange=vsans.contains(vsanId);\n  if (!inRange) {\n    for (    IntRange range : getVsansRanges()) {\n      inRange=range.containsInteger(vsanId);\n      if (inRange) {\n        break;\n      }\n    }\n  }\n  return inRange;\n}"}
{"ids": "65835", "raw_code": "private void addBOMLines(MProduct product,BigDecimal qty){\n  MPPProductBOM bom=MPPProductBOM.getDefault(product,null);\n  MPPProductBOMLine[] bomLines=bom.getLines(true);\n  for (int i=0; i < bomLines.length; i++)   addBOMLine(bomLines[i],qty);\n  log.fine(\"#\" + bomLines.length);\n}"}
{"ids": "23952", "raw_code": "private QueryExp buildOptionalQueryExp(final String[] attributes,final Object[] values){\n  QueryExp queryExp=null;\n  for (int i=0; i < attributes.length; i++) {\n    if (values[i] instanceof Boolean) {\n      if (queryExp == null) {\n        queryExp=Query.eq(Query.attr(attributes[i]),Query.value(((Boolean)values[i])));\n      }\n else {\n        queryExp=Query.and(queryExp,Query.eq(Query.attr(attributes[i]),Query.value(((Boolean)values[i]))));\n      }\n    }\n else     if (values[i] instanceof Number) {\n      if (queryExp == null) {\n        queryExp=Query.eq(Query.attr(attributes[i]),Query.value((Number)values[i]));\n      }\n else {\n        queryExp=Query.and(queryExp,Query.eq(Query.attr(attributes[i]),Query.value((Number)values[i])));\n      }\n    }\n else     if (values[i] instanceof String) {\n      if (queryExp == null) {\n        queryExp=Query.eq(Query.attr(attributes[i]),Query.value((String)values[i]));\n      }\n else {\n        queryExp=Query.and(queryExp,Query.eq(Query.attr(attributes[i]),Query.value((String)values[i])));\n      }\n    }\n  }\n  return queryExp;\n}"}
{"ids": "29395", "raw_code": "public final boolean at(String str,CharSequence csq){\n  int i=index;\n  int length=csq.length();\n  for (int j=0; j < str.length(); ) {\n    if ((i >= length) || (str.charAt(j++) != csq.charAt(i++)))     return false;\n  }\n  return true;\n}"}
{"ids": "41400", "raw_code": "public static int findLastOf(String container,String charSeq,int begin){\n  for (int i=begin; i < container.length() && i >= 0; --i) {\n    if (charSeq.contains(\"\" + container.charAt(i)))     return i;\n  }\n  return -1;\n}"}
{"ids": "58301", "raw_code": "private static CookieOrigin adjustEffectiveHost(final CookieOrigin origin){\n  String host=origin.getHost();\n  boolean isLocalHost=true;\n  for (int i=0; i < host.length(); i++) {\n    char ch=host.charAt(i);\n    if (ch == '.' || ch == ':') {\n      isLocalHost=false;\n      break;\n    }\n  }\n  if (isLocalHost) {\n    host+=\".local\";\n    return new CookieOrigin(host,origin.getPort(),origin.getPath(),origin.isSecure());\n  }\n else {\n    return origin;\n  }\n}"}
{"ids": "35325", "raw_code": "public boolean addBound(TypeBound bound){\n  if (bound.isTrivial()) {\n    return false;\n  }\n  final boolean wasAdded=internal_addBound(bound);\n  if (DEBUG) {\n    final String suffix=wasAdded ? \"  (ADDED)\" : \"  (not added; already present)\";\n    log(\">>> ADD bound: \" + bound + suffix);\n  }\n  return wasAdded;\n}"}
{"ids": "22828", "raw_code": "public boolean remove(SimEvent event){\n  return sortedSet.remove(event);\n}"}
{"ids": "83074", "raw_code": "public static final void printThreadCpuTime(final Thread thread){\n  if (tbe.isThreadCpuTimeEnabled()) {\n    log.info(\"Thread performance: Thread=\" + thread.getName() + \"  cpu-time=\"+ getThreadCpuTime(thread)+ \"sec\");\n  }\n}"}
{"ids": "77051", "raw_code": "public static Version fromBits(int major,int minor,int bugfix){\n  return new Version(major,minor,bugfix);\n}"}
{"ids": "5552", "raw_code": "private static IMultiPoint[] randomPoints(int n,int d,int scale){\n  IMultiPoint points[]=new IMultiPoint[n];\n  for (int i=0; i < n; i++) {\n    StringBuilder sb=new StringBuilder();\n    for (int j=0; j < d; j++) {\n      sb.append(rGen.nextDouble() * scale);\n      if (j < d - 1) {\n        sb.append(\",\");\n      }\n    }\n    points[i]=new Hyperpoint(sb.toString());\n  }\n  return points;\n}"}
{"ids": "63938", "raw_code": "public static String bytesToString(int[] b){\n  if (b.length < 4) {\n    return \"0.0.0.0\";\n  }\n  return String.format(\"%d.%d.%d.%d\",b[0],b[1],b[2],b[3]);\n}"}
{"ids": "72874", "raw_code": "private String convertToIsoDateTime(String humanReadableDateTime) throws ParseException {\n  DateFormat dfInitial=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n  Date initialDateTime=dfInitial.parse(humanReadableDateTime);\n  DateFormat df=new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.S'Z'\");\n  return df.format(initialDateTime);\n}"}
{"ids": "47622", "raw_code": "private static boolean classNamesEqual(String name1,String name2){\n  name1=name1.substring(name1.lastIndexOf('.') + 1);\n  name2=name2.substring(name2.lastIndexOf('.') + 1);\n  return name1.equals(name2);\n}"}
{"ids": "15617", "raw_code": "public boolean optBoolean(int index){\n  return optBoolean(index,false);\n}"}
{"ids": "43207", "raw_code": "public CommandBuilder withLongSwitchIfPresent(Map<String,Object> properties,String... keys){\n  withLongSwitchIfPresent(properties,UnaryOperator.identity(),keys);\n  return this;\n}"}
{"ids": "26939", "raw_code": "private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){\n  try {\n    PackageManager pm=context.getPackageManager();\n    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);\n    if (handlers == null || handlers.size() == 0) {\n      return false;\n    }\n    for (    ResolveInfo resolveInfo : handlers) {\n      IntentFilter filter=resolveInfo.filter;\n      if (filter == null)       continue;\n      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;\n      if (resolveInfo.activityInfo == null)       continue;\n      return true;\n    }\n  }\n catch (  RuntimeException e) {\n    Log.e(TAG,\"Runtime exception while getting specialized handlers\");\n  }\n  return false;\n}"}
{"ids": "42016", "raw_code": "private void onCollectionClicked(Long collectionId){\n  Intent intent=new Intent(this,ProductListActivity.class);\n  if (collectionId != null) {\n    intent.putExtra(ProductListActivity.EXTRA_COLLECTION_ID,collectionId);\n  }\n  startActivity(intent);\n}"}
{"ids": "83179", "raw_code": "public void addFrequency(Frequency frequency){\n  frequencies.add(frequency);\n}"}
{"ids": "29138", "raw_code": "private static @Nonnull URL[] createClassloaderUrls(@Nonnull URL url) throws PluginException {\n  List<URL> urls=new ArrayList<URL>();\n  urls.add(url);\n  Manifest mf=null;\n  File f=new File(url.getPath());\n  if (!f.isDirectory()) {\n    JarInputStream jis=null;\n    try {\n      jis=new JarInputStream(url.openStream());\n      mf=jis.getManifest();\n    }\n catch (    IOException ioe) {\n      throw new PluginException(\"Failed loading manifest for plugin jar: \" + url,ioe);\n    }\n finally {\n      IO.close(jis);\n    }\n  }\n else {\n    File manifest=guessManifest(f);\n    if (manifest != null) {\n      FileInputStream is=null;\n      try {\n        is=new FileInputStream(manifest);\n        mf=new Manifest(is);\n      }\n catch (      IOException e) {\n        throw new PluginException(\"Failed loading manifest for plugin jar: \" + url,e);\n      }\n finally {\n        IO.close(is);\n      }\n    }\n  }\n  if (mf != null) {\n    try {\n      addClassPathFromManifest(url,urls,mf);\n    }\n catch (    MalformedURLException e) {\n      throw new PluginException(\"Failed loading manifest for plugin jar: \" + url,e);\n    }\n  }\n  return urls.toArray(new URL[urls.size()]);\n}"}
{"ids": "45506", "raw_code": "@Override public void write(String str,int st,int end) throws IOException {\n  out.write(str,st,end);\n}"}
{"ids": "86498", "raw_code": "public boolean isAwake(){\n  return isAwake;\n}"}
{"ids": "365", "raw_code": "private static void transferStreams(InputStream source,OutputStream destination){\n  byte[] buffer=new byte[8096];\n  try {\n    while (true) {\n      int bytesRead=-1;\n      try {\n        bytesRead=source.read(buffer);\n      }\n catch (      IOException e) {\n        return;\n      }\n      if (bytesRead == -1)       break;\n      try {\n        destination.write(buffer,0,bytesRead);\n      }\n catch (      IOException e) {\n        return;\n      }\n    }\n  }\n  finally {\n    try {\n      source.close();\n    }\n catch (    IOException e) {\n    }\n finally {\n      try {\n        destination.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n}"}
{"ids": "82566", "raw_code": "public static void gc(){\n  if (startedGc) {\n    forceGc=true;\n    gcShouldLoop=true;\n  }\n  startGCThread();\nsynchronized (LOCK) {\n    LOCK.notify();\n  }\n  try {\n    Thread.sleep(2);\n  }\n catch (  InterruptedException er) {\n  }\n}"}
{"ids": "31829", "raw_code": "private ArrayList<E> toArrayList(){\n  ArrayList<E> list=new ArrayList<E>();\n  for (Node<E> p=first(); p != null; p=succ(p)) {\n    E item=p.item;\n    if (item != null)     list.add(item);\n  }\n  return list;\n}"}
{"ids": "36536", "raw_code": "public static BlobEntry isBlobEntryForStoring(String repositoryLocation,String mimeType){\n  RepositoryLocation location;\n  try {\n    location=new RepositoryLocation(repositoryLocation);\n    Entry entry=location.locateEntry();\n    if (entry instanceof BlobEntry) {\n      BlobEntry blobEntry=(BlobEntry)entry;\n      if (mimeType.equals(blobEntry.getMimeType())) {\n        return blobEntry;\n      }\n else {\n        SwingTools.showSimpleErrorMessage(\"entry_must_be_blob\",blobEntry.getName());\n        return null;\n      }\n    }\n else     if (entry == null) {\n      return createBlobEntry(repositoryLocation);\n    }\n else {\n      SwingTools.showSimpleErrorMessage(\"entry_must_be_blob\",entry.getName());\n    }\n  }\n catch (  RepositoryException e) {\n    SwingTools.showSimpleErrorMessage(\"cannot_access_repository\",e);\n  }\ncatch (  MalformedRepositoryLocationException e) {\n    SwingTools.showSimpleErrorMessage(\"cannot_access_repository\",e);\n  }\n  return null;\n}"}
{"ids": "45674", "raw_code": "@RequestMapping(value={\"/\",\"\"},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute(\"batch\") @Valid Batch batch,BindingResult bindingResult,Principal principal){\n  RestWrapper restWrapper=null;\n  if (bindingResult.hasErrors()) {\n    BindingResultError bindingResultError=new BindingResultError();\n    return bindingResultError.errorMessage(bindingResult);\n  }\n  try {\n    com.wipro.ats.bdre.md.dao.jpa.Batch jpaBatch=new com.wipro.ats.bdre.md.dao.jpa.Batch();\n    jpaBatch.setBatchType(batch.getBatchType());\n    InstanceExec instanceExec=new InstanceExec();\n    if (batch.getSourceInstanceExecId() != null) {\n      instanceExec.setInstanceExecId(batch.getSourceInstanceExecId());\n      jpaBatch.setInstanceExec(instanceExec);\n    }\n    Long autoGenBatchId=batchDAO.insert(jpaBatch);\n    batch.setBatchId(autoGenBatchId);\n    restWrapper=new RestWrapper(batch,RestWrapper.OK);\n    LOGGER.info(RECORDWITHID + batch.getBatchId() + \" inserted in Batch by User:\"+ principal.getName()+ batch);\n  }\n catch (  MetadataException e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\n  return restWrapper;\n}"}
{"ids": "7028", "raw_code": "private void onClickGalleryImage(final RecentMedia aMediaItem){\n  if (null != mCamera) {\n    mCamera.stopPreview();\n  }\n  mSelectedGalleryItemsList.add(aMediaItem);\n  if ((null != aMediaItem.mThumbnail) && !mIsAvatarMode) {\n    updateUiConfiguration(UI_SHOW_TAKEN_IMAGE,IMAGE_ORIGIN_GALLERY);\n    mImagePreviewImageView.setImageBitmap(aMediaItem.mThumbnail);\n    VectorApp.setSavedCameraImagePreview(aMediaItem.mThumbnail);\n  }\n else   if (null != aMediaItem.mFileUri) {\n    displayImagePreview(null,null,aMediaItem.mFileUri,IMAGE_ORIGIN_GALLERY);\n  }\n else {\n    Log.e(LOG_TAG,\"## onClickGalleryImage(): no image to display\");\n  }\n  mImagePreviewImageView.setTag(aMediaItem.mFileUri);\n}"}
{"ids": "41222", "raw_code": "public void disconnectFromBroker(final MqttAsyncConnection connection){\n  try {\n    connection.disconnect(new MqttDisconnectionResultHandler());\n  }\n catch (  SpyException e) {\n    Platform.runLater(new MqttEventHandler(new MqttDisconnectionAttemptFailureEvent(connection,e)));\n    logger.error(e.getMessage(),e);\n  }\n}"}
{"ids": "53817", "raw_code": "public Object[] copyAll(){\n  return Arrays.copyOf(args,args.length);\n}"}
{"ids": "69192", "raw_code": "public void start(){\n  LOG.info(\"Starting NutchServer on port: {} with logging level: {} ...\",port,logLevel);\n  try {\n    component.start();\n  }\n catch (  Exception e) {\n    throw new IllegalStateException(\"Cannot start server!\",e);\n  }\n  LOG.info(\"Started NutchServer on port {}\",port);\n  running=true;\n  started=System.currentTimeMillis();\n}"}
{"ids": "14054", "raw_code": "public FSAccountFedInfo readAccountFedInfo(String userID,String providerID) throws FSAccountMgmtException {\n  return readAccountFedInfo(userID,providerID,null);\n}"}
{"ids": "5607", "raw_code": "public Response(String status,String mimeType,String txt){\n  this.status=status;\n  this.mimeType=mimeType;\n  try {\n    this.data=new ByteArrayInputStream(txt.getBytes(\"UTF-8\"));\n  }\n catch (  java.io.UnsupportedEncodingException uee) {\n    uee.printStackTrace();\n  }\n}"}
{"ids": "29389", "raw_code": "@Parallel @Realtime(limit=LINEAR) public E reduce(BinaryOperator<E> operator){\n  Iterator<E> itr=iterator();\n  if (!itr.hasNext())   return null;\n  E accumulator=itr.next();\n  while (itr.hasNext())   accumulator=operator.apply(accumulator,itr.next());\n  return accumulator;\n}"}
{"ids": "22746", "raw_code": "public void saveHistory(String filename) throws Exception {\n  FileOutputStream fos=new FileOutputStream(filename);\n  ObjectOutputStream oos=new ObjectOutputStream(fos);\n  oos.writeObject(getHistory());\n  oos.close();\n}"}
{"ids": "74815", "raw_code": "private void checkSize(final int i){\n  if (i >= max_size) {\n    final int old_size=max_size;\n    max_size+=increment_size;\n    if (max_size <= i) {\n      max_size=i + increment_size + 2;\n    }\n    final double[] temp=items;\n    items=new double[max_size];\n    System.arraycopy(temp,0,items,0,old_size);\n    increment_size=incrementSize(increment_size);\n  }\n}"}
{"ids": "63555", "raw_code": "public double nextGaussian(){\n  return random.nextGaussian();\n}"}
{"ids": "80301", "raw_code": "private void readFromProperties(final Properties props,final boolean defaultMinimized,final int defaultX,final int defaultY,final boolean defaultVisible){\n  minimized=Boolean.parseBoolean(props.getProperty(\"window.\" + name + \".minimized\",Boolean.toString(defaultMinimized)));\n  visible=Boolean.parseBoolean(props.getProperty(\"window.\" + name + \".visible\",Boolean.toString(defaultVisible)));\n  x=Integer.parseInt(props.getProperty(\"window.\" + name + \".x\",Integer.toString(defaultX)));\n  y=Integer.parseInt(props.getProperty(\"window.\" + name + \".y\",Integer.toString(defaultY)));\n}"}
{"ids": "66063", "raw_code": "public boolean sendEMailAttachments(int AD_User_ID,String subject,String message,Collection<File> attachments,boolean html){\n  MUser to=MUser.get(getCtx(),AD_User_ID);\n  String toEMail=to.getEMail();\n  if (toEMail == null || toEMail.length() == 0) {\n    log.warning(\"No EMail for recipient: \" + to);\n    return false;\n  }\n  EMail email=createEMail(null,to,subject,message,html);\n  if (email == null)   return false;\n  email.addAttachments(attachments);\n  try {\n    return sendEmailNow(null,to,email);\n  }\n catch (  Exception ex) {\n    log.severe(getName() + \" - \" + ex.getLocalizedMessage());\n    return false;\n  }\n}"}
{"ids": "30389", "raw_code": "private void addUnitTaxCalculationInfoClone(final TaxCalculationInfo taxCalInfo,final TaxCalculationInfo clone){\n  final List<UnitTaxCalculationInfo> units=new ArrayList<UnitTaxCalculationInfo>();\n  final List<UnitTaxCalculationInfo> unitsByDate=new ArrayList<UnitTaxCalculationInfo>();\n  for (  final UnitTaxCalculationInfo unitInfo : taxCalInfo.getUnitTaxCalculationInfos()) {\n    final UnitTaxCalculationInfo newUnitInfo=getUnitTaxCalculationInfoClone(unitInfo);\n    unitsByDate.add(newUnitInfo);\n  }\n  clone.setUnitTaxCalculationInfo(units);\n}"}
{"ids": "19956", "raw_code": "public SocketWrapper accept() throws IOException {\n  for (; ; ) {\n    try {\n      Socket sock=serverSocket.accept();\n      return new SocketWrapper(sock);\n    }\n catch (    SocketTimeoutException e) {\n    }\ncatch (    IOException e) {\n      if (done) {\n        throw new SocketTerminationException(\"Server socket has been terminated\",e);\n      }\n else {\n        throw e;\n      }\n    }\n  }\n}"}
{"ids": "38848", "raw_code": "protected synchronized Instance processBuffers(){\n  if (m_firstBuffer != null && m_secondBuffer != null && m_firstBuffer.size() > 0 && m_secondBuffer.size() > 0) {\n    if (m_stopRequested.get()) {\n      return null;\n    }\n    InstanceHolder firstH=m_firstBuffer.peek();\n    InstanceHolder secondH=m_secondBuffer.peek();\n    Instance first=firstH.m_instance;\n    Instance second=secondH.m_instance;\n    int cmp=compare(first,second,firstH,secondH);\n    if (cmp == 0) {\n      Instance newInst=generateMergedInstance(m_firstBuffer.remove(),m_secondBuffer.remove());\n      return newInst;\n    }\n else     if (cmp < 0) {\n      do {\n        m_firstBuffer.remove();\n        if (m_firstBuffer.size() > 0) {\n          firstH=m_firstBuffer.peek();\n          first=firstH.m_instance;\n          cmp=compare(first,second,firstH,secondH);\n        }\n      }\n while (cmp < 0 && m_firstBuffer.size() > 0);\n    }\n else {\n      do {\n        m_secondBuffer.remove();\n        if (m_secondBuffer.size() > 0) {\n          secondH=m_secondBuffer.peek();\n          second=secondH.m_instance;\n          cmp=compare(first,second,firstH,secondH);\n        }\n      }\n while (cmp > 0 && m_secondBuffer.size() > 0);\n    }\n  }\n  return null;\n}"}
{"ids": "82047", "raw_code": "public boolean isThemeConstant(String constantName,boolean def){\n  String c=getThemeConstant(constantName,null);\n  if (c == null) {\n    return def;\n  }\n  return c.equalsIgnoreCase(\"true\") || c.equals(\"1\");\n}"}
{"ids": "62989", "raw_code": "public void unmap(int addr,int len){\n  for (int i=0; i < len; i+=PAGE_SIZE) {\n    int pte=getPTE(addr + i);\n    if (getPage(pte) != null) {\n      readableMemory[pte]=null;\n      writableMemory[pte]=null;\n      executableMemory[pte]=null;\n    }\n else {\n      throw new Error(\"Unmapping memory that's not mapped addr=0x\" + Integer.toHexString(addr) + \" len=\"+ len);\n    }\n  }\n}"}
{"ids": "55217", "raw_code": "private synchronized void saveToSettings(){\n  List<List> entriesToSave=new ArrayList<>();\n  for (  StatusHistoryEntry entry : entries.values()) {\n    entriesToSave.add(entryToList(entry));\n  }\n  settings.putList(\"statusPresets\",entriesToSave);\n}"}
{"ids": "57142", "raw_code": "protected void addToMaintenanceQueue(NodePortTuple npt){\n  if (maintenanceQueue.contains(npt) == false)   maintenanceQueue.add(npt);\n}"}
{"ids": "16806", "raw_code": "public MovieScraperMetadataPanel(MovieScraperMetadataConfig config){\n  this.config=config;\n  initComponents();\n}"}
{"ids": "15840", "raw_code": "public int size(){\n  return seq.size();\n}"}
{"ids": "7205", "raw_code": "public static void assertPropsPerRow(Iterator<EventBean> iterator,SafeIterator<EventBean> safeIterator,String[] propertyNames,Object[][] expected){\n  assertPropsPerRow(EPAssertionUtil.iteratorToArray(iterator),propertyNames,expected);\n  assertPropsPerRow(EPAssertionUtil.iteratorToArray(safeIterator),propertyNames,expected);\n  safeIterator.close();\n}"}
{"ids": "52887", "raw_code": "public boolean isLeaf(){\n  return children == null || children.isEmpty();\n}"}
{"ids": "8299", "raw_code": "public int read() throws IOException {\n  if (hasNextChar) {\n    hasNextChar=false;\n    write(nextChar);\n    return nextChar;\n  }\n  if (previousLine != lexer.getLine()) {\n    numUnicodeEscapesFoundOnCurrentLine=0;\n    previousLine=lexer.getLine();\n  }\n  int c=reader.read();\n  if (c != '\\\\') {\n    write(c);\n    return c;\n  }\n  c=reader.read();\n  if (c != 'u') {\n    hasNextChar=true;\n    nextChar=c;\n    write('\\\\');\n    return '\\\\';\n  }\n  int numberOfUChars=0;\n  do {\n    numberOfUChars++;\n    c=reader.read();\n  }\n while (c == 'u');\n  checkHexDigit(c);\n  StringBuilder charNum=new StringBuilder();\n  charNum.append((char)c);\n  for (int i=0; i < 3; i++) {\n    c=reader.read();\n    checkHexDigit(c);\n    charNum.append((char)c);\n  }\n  int rv=Integer.parseInt(charNum.toString(),16);\n  write(rv);\n  numUnicodeEscapesFound+=4 + numberOfUChars;\n  numUnicodeEscapesFoundOnCurrentLine+=4 + numberOfUChars;\n  return rv;\n}"}
{"ids": "71103", "raw_code": "public boolean isEmpty(){\n  if (!built)   return itemBoundables.isEmpty();\n  return root.isEmpty();\n}"}
{"ids": "46491", "raw_code": "protected AbstractWriter(Writer w,Document doc,int pos,int len){\n  this.doc=doc;\n  it=new ElementIterator(doc.getDefaultRootElement());\n  out=w;\n  startOffset=pos;\n  endOffset=pos + len;\n  Object docNewline=doc.getProperty(DefaultEditorKit.EndOfLineStringProperty);\n  if (docNewline instanceof String) {\n    setLineSeparator((String)docNewline);\n  }\n else {\n    String newline=null;\n    try {\n      newline=System.getProperty(\"line.separator\");\n    }\n catch (    SecurityException se) {\n    }\n    if (newline == null) {\n      newline=\"\\n\";\n    }\n    setLineSeparator(newline);\n  }\n  canWrapLines=true;\n}"}
{"ids": "83686", "raw_code": "protected void adjustPositionY(int velocityY){\n  if (reverseLayout)   velocityY*=-1;\n  int childCount=getChildCount();\n  if (childCount > 0) {\n    int curPosition=ViewUtils.getCenterYChildPosition(this);\n    int childHeight=getHeight() - getPaddingTop() - getPaddingBottom();\n    int flingCount=getFlingCount(velocityY,childHeight);\n    int targetPosition=curPosition + flingCount;\n    if (mSinglePageFling) {\n      flingCount=Math.max(-1,Math.min(1,flingCount));\n      targetPosition=flingCount == 0 ? curPosition : mPositionOnTouchDown + flingCount;\n    }\n    targetPosition=Math.max(targetPosition,0);\n    targetPosition=Math.min(targetPosition,getItemCount() - 1);\n    if (targetPosition == curPosition && (!mSinglePageFling || mPositionOnTouchDown == curPosition)) {\n      View centerYChild=ViewUtils.getCenterYChild(this);\n      if (centerYChild != null) {\n        if (mTouchSpan > centerYChild.getHeight() * mTriggerOffset && targetPosition != 0) {\n          if (!reverseLayout)           targetPosition--;\n else           targetPosition++;\n        }\n else         if (mTouchSpan < centerYChild.getHeight() * -mTriggerOffset && targetPosition != getItemCount() - 1) {\n          if (!reverseLayout)           targetPosition++;\n else           targetPosition--;\n        }\n      }\n    }\n    if (DEBUG) {\n      Log.d(\"@\",\"mTouchSpan:\" + mTouchSpan);\n      Log.d(\"@\",\"adjustPositionY:\" + targetPosition);\n    }\n    smoothScrollToPosition(safeTargetPosition(targetPosition,getItemCount()));\n  }\n}"}
{"ids": "50782", "raw_code": "private void updateProgress(String progressLabel,int progress){\n  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {\n    myHost.updateProgress(progressLabel,progress);\n  }\n  previousProgress=progress;\n  previousProgressLabel=progressLabel;\n}"}
{"ids": "9941", "raw_code": "@Override public Node importTo(Document hostDocument){\n  ValidateUtil.validateNotNull(hostDocument,\"Host document\");\n  Element clonedTokenElement=(Element)hostDocument.importNode(_parsedToken.getDocumentElement(),true);\n  markAssertionIdAttribute(clonedTokenElement);\n  return clonedTokenElement;\n}"}
{"ids": "39897", "raw_code": "public static Matrix random(int m,int n){\n  Matrix A=new Matrix(m,n);\n  double[][] X=A.getArray();\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < n; j++) {\n      X[i][j]=Math.random();\n    }\n  }\n  return A;\n}"}
{"ids": "70282", "raw_code": "public void addPriorityUnit(String id){\n  if (!StringUtil.isPositiveInteger(id)) {\n    return;\n  }\n  addPriorityUnit(Integer.parseInt(id));\n}"}
{"ids": "78877", "raw_code": "private void calcIntervalDis(){\n  if (mMarkTextPaint == null) {\n    return;\n  }\n  String defaultText=\"888888\";\n  Rect temp=new Rect();\n  int max=0;\n  if (mItems != null && mItems.size() > 0) {\n    for (    String i : mItems) {\n      mMarkTextPaint.getTextBounds(i,0,i.length(),temp);\n      if (temp.width() > max) {\n        max=temp.width();\n      }\n    }\n  }\n else {\n    mMarkTextPaint.getTextBounds(defaultText,0,defaultText.length(),temp);\n    max=temp.width();\n  }\n  if (!TextUtils.isEmpty(mAdditionCenterMark)) {\n    mMarkTextPaint.setTextSize(mNormalTextSize);\n    mMarkTextPaint.getTextBounds(mAdditionCenterMark,0,mAdditionCenterMark.length(),temp);\n    mAdditionCenterMarkWidth=temp.width();\n    max+=temp.width();\n  }\n  mIntervalDis=max * mIntervalFactor;\n}"}
{"ids": "82030", "raw_code": "public boolean isUseSoftkeys(){\n  return useSoftkeys;\n}"}
{"ids": "23575", "raw_code": "public void connectionClosed(ConnectionEvent event){\n  if (isActive) {\n    ManagedConnection conn=(ManagedConnection)event.getSource();\n    TransactionManagerImpl transManager=TransactionManagerImpl.getTransactionManager();\n    try {\n      Transaction txn=transManager.getTransaction();\n      if (txn == null) {\n        mannPoolCache.returnPooledConnectionToPool(conn);\n      }\n    }\n catch (    Exception se) {\n      String exception=\"FacetsJCAConnectionManagerImpl::connectionClosed: Exception occured due to \" + se.getMessage();\n      if (logger.isDebugEnabled()) {\n        logger.debug(exception,se);\n      }\n    }\n  }\n}"}
{"ids": "62432", "raw_code": "public MetadataBlockHeader(boolean isLastBlock,BlockType blockType,int dataLength){\n  ByteBuffer rawdata=ByteBuffer.allocate(HEADER_LENGTH);\n  this.blockType=blockType;\n  this.isLastBlock=isLastBlock;\n  this.dataLength=dataLength;\n  byte type;\n  if (isLastBlock) {\n    type=(byte)(0x80 | blockType.getId());\n  }\n else {\n    type=(byte)blockType.getId();\n  }\n  rawdata.put(type);\n  rawdata.put((byte)((dataLength & 0xFF0000) >>> 16));\n  rawdata.put((byte)((dataLength & 0xFF00) >>> 8));\n  rawdata.put((byte)(dataLength & 0xFF));\n  bytes=new byte[HEADER_LENGTH];\n  for (int i=0; i < HEADER_LENGTH; i++) {\n    bytes[i]=rawdata.get(i);\n  }\n}"}
{"ids": "35426", "raw_code": "private void checkFileToRun() throws ExitCodeException {\n  if (runThisFile == null || !runThisFile.exists()) {\n    throw new ExitCodeException(EXITCODE_MODULE_TO_RUN_NOT_FOUND);\n  }\n}"}
{"ids": "68745", "raw_code": "public void addLastItem(M model){\n  addItem(mDatas.size(),model);\n}"}
{"ids": "68496", "raw_code": "@ManagedOperation(description=\"Notifies all Tag cache listeners (status confirmation). Refresh supervision status after this call!\") public void notifyAllTagCacheListeners(){\n  LOGGER.info(\"Recovery task: notifying all tag listeners.\");\n  for (  Long key : controlTagCache.getKeys()) {\n    controlTagCache.acquireWriteLockOnKey(key);\n    try {\n      ControlTag controlTag=controlTagCache.getCopy(key);\n      long eventTime=System.currentTimeMillis();\n      controlTagCache.notifyListenerStatusConfirmation(controlTag,eventTime);\n    }\n  finally {\n      controlTagCache.releaseWriteLockOnKey(key);\n    }\n  }\n  for (  Long key : dataTagCache.getKeys()) {\n    dataTagCache.acquireWriteLockOnKey(key);\n    try {\n      DataTag dataTag=dataTagCache.getCopy(key);\n      long eventTime=System.currentTimeMillis();\n      dataTagCache.notifyListenerStatusConfirmation(dataTag,eventTime);\n    }\n  finally {\n      dataTagCache.releaseWriteLockOnKey(key);\n    }\n  }\n  LOGGER.info(\"Recovery task: finished notifying all tag listeners.\");\n}"}
{"ids": "78915", "raw_code": "public static long[] breakdown(long t,@NonNull TimeUnit unit,boolean roundMillis){\n  long days=unit.toDays(t);\n  long hours=unit.toHours(t) % 24;\n  long minutes=unit.toMinutes(t) % 60;\n  long seconds=unit.toSeconds(t) % 60;\n  long msecs=unit.toMillis(t) % 1000;\n  if (roundMillis) {\n    if (msecs >= 500) {\n      seconds++;\n      msecs=0;\n      if (seconds == 60) {\n        minutes++;\n        seconds=0;\n        if (minutes == 60) {\n          hours++;\n          minutes=0;\n          if (hours == 24) {\n            days++;\n            hours=0;\n          }\n        }\n      }\n    }\n  }\n  return new long[]{days,hours,minutes,seconds,msecs};\n}"}
{"ids": "60942", "raw_code": "private int socksGetServerPort(){\n  InetSocketAddress addr=(InetSocketAddress)proxy.address();\n  return addr.getPort();\n}"}
{"ids": "56662", "raw_code": "public static <T>ReactiveSeq<T> fromList(final List<T> list){\n  Objects.requireNonNull(list);\n  final ReversingListSpliterator array=new ReversingListSpliterator<T>(list,false);\n  return StreamUtils.reactiveSeq(StreamSupport.stream(array,false),Optional.ofNullable(array));\n}"}
{"ids": "5153", "raw_code": "private boolean processKeyUp(int keyCode){\n  if (keyCode == KeyEvent.KEYCODE_DEL) {\n    if (mInKbMode) {\n      if (!mTypedTimes.isEmpty()) {\n        int deleted=deleteLastTypedKey();\n        String deletedKeyStr;\n        if (deleted == getAmOrPmKeyCode(AM)) {\n          deletedKeyStr=mAmText;\n        }\n else         if (deleted == getAmOrPmKeyCode(PM)) {\n          deletedKeyStr=mPmText;\n        }\n else {\n          deletedKeyStr=String.format(\"%d\",getValFromKeyCode(deleted));\n        }\n        ViewCompatUtils.announceForAccessibility(mDelegator,String.format(mDeletedKeyFormat,deletedKeyStr));\n        updateDisplay(true);\n      }\n    }\n  }\n else   if (keyCode == KeyEvent.KEYCODE_0 || keyCode == KeyEvent.KEYCODE_1 || keyCode == KeyEvent.KEYCODE_2 || keyCode == KeyEvent.KEYCODE_3 || keyCode == KeyEvent.KEYCODE_4 || keyCode == KeyEvent.KEYCODE_5 || keyCode == KeyEvent.KEYCODE_6 || keyCode == KeyEvent.KEYCODE_7 || keyCode == KeyEvent.KEYCODE_8 || keyCode == KeyEvent.KEYCODE_9 || (!mIs24HourView && (keyCode == getAmOrPmKeyCode(AM) || keyCode == getAmOrPmKeyCode(PM)))) {\n    if (!mInKbMode) {\n      if (mRadialTimePickerView == null) {\n        Log.e(TAG,\"Unable to initiate keyboard mode, TimePicker was null.\");\n        return true;\n      }\n      mTypedTimes.clear();\n      tryStartingKbMode(keyCode);\n      return true;\n    }\n    if (addKeyIfLegal(keyCode)) {\n      updateDisplay(false);\n    }\n    return true;\n  }\n  return false;\n}"}
{"ids": "11716", "raw_code": "public synchronized OMGraphicList prepare(){\n  OMGraphicList list=new OMGraphicList();\n  Projection proj=getProjection();\n  if (proj == null) {\n    return list;\n  }\n  Point2D upperLeft=proj.getUpperLeft();\n  Point2D lowerRight=proj.getLowerRight();\n  if (upperLeft.getX() > lowerRight.getX()) {\n    getPoints(new DataBounds(upperLeft,new Point2D.Double(180,lowerRight.getY())),list,proj);\n    getPoints(new DataBounds(new Point2D.Double(-180,upperLeft.getY()),lowerRight),list,proj);\n  }\n else {\n    getPoints(new DataBounds(upperLeft,lowerRight),list,proj);\n  }\n  OMText statement=new OMText(10,proj.getHeight() - 10,getName() + \" displaying \" + list.size()+ \"/\"+ dataSource.size()+ \" points\",OMText.JUSTIFY_LEFT);\n  statement.setFillPaint(Color.gray);\n  statement.generate(proj);\n  list.add(0,statement);\n  return list;\n}"}
{"ids": "23060", "raw_code": "public X509Name(Vector oids,Vector values){\n  this(oids,values,new X509DefaultEntryConverter());\n}"}
{"ids": "35105", "raw_code": "void nextLine(){\n  try {\n    nextLine=currentEpisode.readLine();\n    while (nextLine.equals(\"#\"))     nextLine=currentEpisode.readLine();\n  }\n catch (  IOException|NullPointerException e) {\n    nextLine=null;\n  }\n}"}
{"ids": "4286", "raw_code": "public Jobs subset(String[] jobIds){\n  final List<Job> subsetResult=new ArrayList<Job>();\n  for (  String jobId : jobIds) {\n    Job job=jobMap.get(jobId);\n    if (job.isAnalysis()) {\n      subsetResult.add(job);\n    }\n  }\n  return new Jobs(subsetResult);\n}"}
{"ids": "74174", "raw_code": "public void addPropertyChangeListener(PropertyChangeListener listener){\n  List<PropertyChangeListener> l=Arrays.asList(listenerList.getListeners(PropertyChangeListener.class));\n  if (!l.contains(listener)) {\n    listenerList.add(PropertyChangeListener.class,listener);\n  }\n}"}
{"ids": "45288", "raw_code": "public static byte[] fromHexString(String text){\n  text=text.trim();\n  if (text.length() % 2 != 0)   text=\"0\" + text;\n  int resLen=text.length() / 2;\n  int loNibble, hiNibble;\n  byte[] res=new byte[resLen];\n  for (int i=0; i < resLen; i++) {\n    int j=i << 1;\n    hiNibble=charToNibble(text.charAt(j));\n    loNibble=charToNibble(text.charAt(j + 1));\n    if (loNibble == -1 || hiNibble == -1)     return null;\n    res[i]=(byte)(hiNibble << 4 | loNibble);\n  }\n  return res;\n}"}
{"ids": "37789", "raw_code": "protected static double variance(double[] s,double[] sS,double[] sumOfWeights){\n  double var=0;\n  for (int i=0; i < s.length; i++) {\n    if (sumOfWeights[i] > 0) {\n      var+=singleVariance(s[i],sS[i],sumOfWeights[i]);\n    }\n  }\n  return var;\n}"}
{"ids": "56282", "raw_code": "public void write(CharSequence csq) throws IOException {\n  final int length=csq.length();\n  for (int i=0; i < length; ) {\n    char c=csq.charAt(i++);\n    if (c < 0x80) {\n      _bytes[_index]=(byte)c;\n      if (++_index >= _bytes.length) {\n        flushBuffer();\n      }\n    }\n else {\n      write(c);\n    }\n  }\n}"}
{"ids": "11540", "raw_code": "public static boolean canResize(List constraints){\n  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {\n    DockConstraint dc=(DockConstraint)iter.next();\n    if (!dc.canResize())     return false;\n  }\n  return true;\n}"}
{"ids": "38836", "raw_code": "@Override public boolean connectionAllowed(EventSetDescriptor esd){\n  return connectionAllowed(esd.getName());\n}"}
{"ids": "81752", "raw_code": "String readNumber(String source,int ofs,String token,boolean adjacent){\n  if (adjacent) {\n    return source.substring(ofs,ofs + token.length());\n  }\n  int len=source.length();\n  for (int i=ofs; i < len; i++) {\n    char ch=source.charAt(i);\n    if (isNumeric(ch) == false) {\n      if (i == 0) {\n        return null;\n      }\n      return source.substring(ofs,i);\n    }\n  }\n  return source.substring(ofs);\n}"}
{"ids": "9360", "raw_code": "private Vec feedForward(Vec input){\n  Vec x=input;\n  for (int i=0; i < Ws.size(); i++) {\n    Matrix W_i=Ws.get(i);\n    Vec b_i=bs.get(i);\n    Vec a_i=W_i.multiply(x);\n    a_i.mutableAdd(b_i);\n    a_i.applyFunction(f);\n    x=a_i;\n  }\n  return x;\n}"}
{"ids": "4958", "raw_code": "private boolean split_wtrace_other(BrdTracep found_trace,Collection<BrdTracep> split_pieces,ArrayList<PlaLineInt> intersecting_lines,AwtreeFindEntry found_entry){\n  if (found_trace == this)   return false;\n  boolean have_trace_split=false;\n  for (  PlaLineInt inter_line : intersecting_lines) {\n    if (have_trace_split)     break;\n    int line_no=found_entry.shape_index_in_object + 1;\n    ArrayList<BrdTracep> curr_split_pieces=found_trace.split_with_end_line(line_no,inter_line);\n    if (curr_split_pieces.size() < 1)     continue;\n    have_trace_split=true;\n    split_pieces.addAll(curr_split_pieces);\n  }\n  if (!have_trace_split)   split_pieces.add(found_trace);\n  return have_trace_split;\n}"}
{"ids": "26754", "raw_code": "private void printSolution(Solution solution){\n  if (includeVariables) {\n    for (int i=0; i < solution.getNumberOfVariables(); i++) {\n      if (i > 0) {\n        writer.print(' ');\n      }\n      writer.print(encode(solution.getVariable(i)));\n    }\n  }\n  for (int i=0; i < solution.getNumberOfObjectives(); i++) {\n    if ((i > 0) || (includeVariables && (solution.getNumberOfVariables() > 0))) {\n      writer.print(' ');\n    }\n    writer.print(solution.getObjective(i));\n  }\n  writer.println();\n}"}
{"ids": "78374", "raw_code": "public void readNBT(NBTTagCompound nbt){\n  if (nbt.hasKey(\"decayLevel\",99)) {\n    this.decayLevel=nbt.getInteger(\"decayLevel\");\n    this.decaySaturationLevel=nbt.getFloat(\"decaySaturationLevel\");\n    this.decayAccelerationLevel=nbt.getFloat(\"decayExhaustionLevel\");\n  }\n}"}
{"ids": "63614", "raw_code": "public void copyTo(PositionTextureVertex[] verts,TexturedQuad[] quad){\n  TexturedPolygon[] poly=new TexturedPolygon[quad.length];\n  for (int idx=0; idx < quad.length; idx++) {\n    poly[idx]=new TexturedPolygon((PositionTextureVertex[])quad[idx].vertexPositions);\n  }\n  copyTo(verts,poly);\n}"}
{"ids": "82315", "raw_code": "public synchronized void deleteObserver(Observer observer){\n  observers.remove(observer);\n}"}
{"ids": "67257", "raw_code": "public AccountAttribute asAccountAttribute(Account account){\n  if (account == null) {\n    return null;\n  }\n  AccountAttribute who=new AccountAttribute();\n  who.name=account.getFullName();\n  who.email=account.getPreferredEmail();\n  who.username=account.getUserName();\n  return who;\n}"}
{"ids": "32997", "raw_code": "public void delete(TemplatePersistenceData data){\n  if (data.isUserAdded())   fTemplates.remove(data);\n else   data.setDeleted(true);\n}"}
{"ids": "37649", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(4);\n  newVector.addElement(new Option(\"\\tSpecify the number of instances to\\n\" + \"\\tsample when estimating attributes.\\n\" + \"\\tIf not specified, then all instances\\n\"+ \"\\twill be used.\",\"M\",1,\"-M <num instances>\"));\n  newVector.addElement(new Option(\"\\tSeed for randomly sampling instances.\\n\" + \"\\t(Default = 1)\",\"D\",1,\"-D <seed>\"));\n  newVector.addElement(new Option(\"\\tNumber of nearest neighbours (k) used\\n\" + \"\\tto estimate attribute relevances\\n\" + \"\\t(Default = 10).\",\"K\",1,\"-K <number of neighbours>\"));\n  newVector.addElement(new Option(\"\\tWeight nearest neighbours by distance\",\"W\",0,\"-W\"));\n  newVector.addElement(new Option(\"\\tSpecify sigma value (used in an exp\\n\" + \"\\tfunction to control how quickly\\n\" + \"\\tweights for more distant instances\\n\"+ \"\\tdecrease. Use in conjunction with -W.\\n\"+ \"\\tSensible value=1/5 to 1/10 of the\\n\"+ \"\\tnumber of nearest neighbours.\\n\"+ \"\\t(Default = 2)\",\"A\",1,\"-A <num>\"));\n  return newVector.elements();\n}"}
{"ids": "60048", "raw_code": "public String consumeWord(){\n  int start=pos;\n  while (matchesWord())   pos++;\n  return queue.substring(start,pos);\n}"}
{"ids": "24519", "raw_code": "public static void printInlining(final ResolvedJavaMethod method,final int bci,final int inliningDepth,final boolean success,final String msg,final Object... args){\n  if (HotSpotPrintInlining.getValue()) {\n    StringBuilder sb=new StringBuilder();\n    sb.append(\"        \");\n    sb.append(\"     \");\n    sb.append(String.format(\"%c%c%c%c%c \",' ',method.isSynchronized() ? 's' : ' ',' ',' ',method.isNative() ? 'n' : ' '));\n    sb.append(\"     \");\n    sb.append(\"    \");\n    for (int i=0; i < inliningDepth; i++) {\n      sb.append(\"  \");\n    }\n    sb.append(String.format(\"@ %d  %s   %s%s\",bci,methodName(method),success ? \"\" : \"not inlining \",String.format(msg,args)));\n    TTY.println(sb.toString());\n  }\n}"}
{"ids": "53222", "raw_code": "public static double calculatePValue(double t,int v){\n  return 2 * (1 - StudentsTDistribution.cdf(Math.abs(t),v));\n}"}
{"ids": "45875", "raw_code": "public static void appendChild(Node parent,Node child){\n  Document ownerDoc=getOwnerDocument(parent);\n  if (child.getOwnerDocument() != ownerDoc) {\n    parent.appendChild(ownerDoc.importNode(child,true));\n  }\n else {\n    parent.appendChild(child);\n  }\n}"}
{"ids": "70682", "raw_code": "protected void deleteSessionVariables(String sessionId,String... varNames){\n  if (sessionId.equals(\"\")) {\n    return;\n  }\n  Key key=keyFactory.newKey(sessionId);\n  Transaction transaction=datastore.newTransaction();\n  try {\n    Entity stateEntity=transaction.get(key);\n    Entity.Builder builder=Entity.builder(stateEntity);\n    StringBuilder delNames=new StringBuilder();\n    for (    String varName : varNames) {\n      delNames.append(varName + \" \");\n      builder=builder.remove(varName);\n    }\n    datastore.update(builder.build());\n  }\n catch (  NullPointerException e) {\n  }\n finally {\n    if (transaction.active()) {\n      transaction.rollback();\n    }\n  }\n}"}
{"ids": "72910", "raw_code": "@SuppressLint(\"NewApi\") private void pruneScrapViews(){\n  final int maxViews=mActiveViews.length;\n  final int viewTypeCount=mViewTypeCount;\n  final ArrayList<View>[] scrapViews=mScrapViews;\n  for (int i=0; i < viewTypeCount; ++i) {\n    final ArrayList<View> scrapPile=scrapViews[i];\n    int size=scrapPile.size();\n    final int extras=size - maxViews;\n    size--;\n    for (int j=0; j < extras; j++) {\n      removeDetachedView(scrapPile.remove(size--),false);\n    }\n  }\n  if (mTransientStateViews != null) {\n    for (int i=0; i < mTransientStateViews.size(); i++) {\n      final View v=mTransientStateViews.valueAt(i);\n      if (!v.hasTransientState()) {\n        mTransientStateViews.removeAt(i);\n        i--;\n      }\n    }\n  }\n}"}
{"ids": "12163", "raw_code": "private void updateWorkAmount(double workTime){\n  if (workTime <= 0) {\n    currentWorkAmount*=2;\n  }\n else {\n    totalTimeTaken+=workTime;\n    completedWorkAmount+=currentWorkAmount;\n    currentWorkAmount=(int)Math.ceil(targetExecutionMs * completedWorkAmount / totalTimeTaken);\n  }\n}"}
{"ids": "16537", "raw_code": "public static boolean isLafAqua(){\n  ensureValidCache();\n  if (cachedIsLafAqua == null) {\n    cachedIsLafAqua=Boolean.valueOf(computeIsLafAqua());\n  }\n  return cachedIsLafAqua.booleanValue();\n}"}
{"ids": "80477", "raw_code": "public void moveRandomly(){\n  setRandomPathFrom(getX(),getY(),getMovementRange() / 2);\n}"}
{"ids": "48941", "raw_code": "public void plnI(Object o) throws IOException {\n  p(o.toString());\n  pln();\n  pI();\n}"}
{"ids": "63604", "raw_code": "@Override public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound){\n  par1NBTTagCompound.setShort(\"xTile\",(short)this.xTile);\n  par1NBTTagCompound.setShort(\"yTile\",(short)this.yTile);\n  par1NBTTagCompound.setShort(\"zTile\",(short)this.zTile);\n  par1NBTTagCompound.setInteger(\"inTile\",Block.getIdFromBlock(this.inTile));\n  par1NBTTagCompound.setByte(\"inData\",(byte)this.inData);\n  par1NBTTagCompound.setByte(\"shake\",(byte)this.arrowShake);\n  par1NBTTagCompound.setByte(\"inGround\",(byte)(this.inGround ? 1 : 0));\n  par1NBTTagCompound.setBoolean(\"isExplosive\",this.isExplosive);\n}"}
{"ids": "30977", "raw_code": "@Override public StringBuffer format(final double value,final StringBuffer buffer,final FieldPosition position){\n  return format(Double.valueOf(value),buffer,position);\n}"}
{"ids": "48858", "raw_code": "private Object translateStreamToInputStream(InputStream str,DataFlavor flavor,long format,Transferable localeTransferable) throws IOException {\n  if (isFlavorCharsetTextType(flavor) && isTextFormat(format)) {\n    str=new ReencodingInputStream(str,format,DataTransferer.getTextCharset(flavor),localeTransferable);\n  }\n  return constructFlavoredObject(str,flavor,InputStream.class);\n}"}
{"ids": "62734", "raw_code": "public void dispose() throws IabAsyncInProgressException {\nsynchronized (mAsyncInProgressLock) {\n    if (mAsyncInProgress) {\n      throw new IabAsyncInProgressException(\"Can't dispose because an async operation \" + \"(\" + mAsyncOperation + \") is in progress.\");\n    }\n  }\n  logDebug(\"Disposing.\");\n  mSetupDone=false;\n  if (mServiceConn != null) {\n    logDebug(\"Unbinding from service.\");\n    if (mContext != null)     mContext.unbindService(mServiceConn);\n  }\n  mDisposed=true;\n  mContext=null;\n  mServiceConn=null;\n  mService=null;\n  mPurchaseListener=null;\n}"}
{"ids": "10359", "raw_code": "private boolean isIPTResourceFolder(File dir){\n  if (dir.exists() && dir.isDirectory()) {\n    File persistenceFile=new File(dir,PERSISTENCE_FILE);\n    File emlFile=new File(dir,DataDir.EML_XML_FILENAME);\n    return persistenceFile.isFile() && emlFile.isFile();\n  }\n  return false;\n}"}
{"ids": "6917", "raw_code": "public Set<String> addSpriteFrames(String plist,CCTexture2D texture){\n  HashMap<String,Object> dict=PlistParser.parse(plist);\n  return addSpriteFrames(dict,texture);\n}"}
{"ids": "54207", "raw_code": "public void addAnnotation(final Annotation annotation){\n  annotationList.add(annotation);\n  annotation.setxyGraph(xyGraph);\n  add(annotation);\n  revalidate();\n  changeSupport.firePropertyChange(\"annotationList\",null,annotation);\n}"}
{"ids": "55136", "raw_code": "public static void createOverviews(ASDocConfiguration config) throws CompilerException {\n  String templatesPath=config.getTemplatesPath();\n  String ditaPath=config.getOutput() + \"tempdita\" + File.separator;\n  BufferedWriter writer=null;\n  Reader reader=null;\n  try {\n    writer=new BufferedWriter(new FileWriter(ditaPath + \"overviews.xml\"));\n    if (config.getPackageDescriptionFile() != null) {\n      reader=new BufferedReader(new FileReader(config.getPackageDescriptionFile()));\n    }\n else {\n      reader=new BufferedReader(new FileReader(templatesPath + \"Overviews_Base.xml\"));\n    }\n    OverviewsHandler h=new OverviewsHandler(writer,config);\n    InputSource source=new InputSource(reader);\n    SAXParserFactory factory=SAXParserFactory.newInstance();\n    SAXParser parser=factory.newSAXParser();\n    parser.parse(source,h);\n  }\n catch (  Exception e) {\n    if (Trace.error)     e.printStackTrace();\n    CompilerMessage c=new CouldNotCreate(\"overviews.xml\",e.getMessage());\n    ThreadLocalToolkit.log(c);\n    throw c;\n  }\n finally {\n    if (writer != null) {\n      try {\n        writer.close();\n      }\n catch (      IOException ioe) {\n      }\n    }\n    if (reader != null) {\n      try {\n        reader.close();\n      }\n catch (      IOException ioe) {\n      }\n    }\n  }\n}"}
{"ids": "78253", "raw_code": "public CreateNewNoteIntentBuilder addTags(@Nullable ArrayList<String> tags){\n  ArrayList<String> list=mArgs.getStringArrayList(EvernoteIntent.EXTRA_TAG_NAME_LIST);\n  if (list == null) {\n    list=tags;\n  }\n else   if (tags != null) {\n    list.addAll(tags);\n  }\n  return setTags(list);\n}"}
{"ids": "59526", "raw_code": "private RemoteOperationResult refreshSharesForFolder(OwnCloudClient client){\n  RemoteOperationResult result=null;\n  GetRemoteSharesForFileOperation operation=new GetRemoteSharesForFileOperation(mLocalFolder.getRemotePath(),true,true);\n  result=operation.execute(client);\n  if (result.isSuccess()) {\n    ArrayList<OCShare> shares=new ArrayList<OCShare>();\n    for (    Object obj : result.getData()) {\n      shares.add((OCShare)obj);\n    }\n    mStorageManager.saveSharesInFolder(shares,mLocalFolder);\n  }\n  return result;\n}"}
{"ids": "175", "raw_code": "public double dist(Math_Vector other){\n  double distX=this.x - other.x;\n  double distY=this.y - other.y;\n  return Math.sqrt(distX * distX + distY * distY);\n}"}
{"ids": "7324", "raw_code": "public static String parseString(String value){\n  if ((value.startsWith(\"\\\"\")) && (value.endsWith(\"\\\"\")) || (value.startsWith(\"'\")) && (value.endsWith(\"'\"))) {\n    if (value.length() > 1) {\n      if (value.indexOf('\\\\') != -1) {\n        return unescape(value.substring(1,value.length() - 1));\n      }\n      return value.substring(1,value.length() - 1);\n    }\n  }\n  throw new IllegalArgumentException(\"String value of '\" + value + \"' cannot be parsed\");\n}"}
{"ids": "82807", "raw_code": "private void defineDesktopPanes(UIDefaults d){\n  d.put(\"seaGlassDesktopPane\",new ColorUIResource(0x556ba6));\n  String c=PAINTER_PREFIX + \"DesktopPanePainter\";\n  String p=\"DesktopPane\";\n  d.put(p + \"[Enabled].backgroundPainter\",new LazyPainter(c,DesktopPanePainter.Which.BACKGROUND_ENABLED));\n  p=\"DesktopIcon\";\n  c=PAINTER_PREFIX + \"DesktopIconPainter\";\n  d.put(p + \".contentMargins\",new InsetsUIResource(0,6,5,4));\n  d.put(p + \"[Enabled].backgroundPainter\",new LazyPainter(c,DesktopIconPainter.Which.BACKGROUND_ENABLED));\n}"}
{"ids": "42072", "raw_code": "private void fitImageToView(){\n  Drawable drawable=getDrawable();\n  if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {\n    return;\n  }\n  if (matrix == null || prevMatrix == null) {\n    return;\n  }\n  int drawableWidth=drawable.getIntrinsicWidth();\n  int drawableHeight=drawable.getIntrinsicHeight();\n  float scaleX=(float)viewWidth / drawableWidth;\n  float scaleY=(float)viewHeight / drawableHeight;\nswitch (mScaleType) {\ncase CENTER:\n    scaleX=scaleY=1;\n  break;\ncase CENTER_CROP:\nscaleX=scaleY=Math.max(scaleX,scaleY);\nbreak;\ncase CENTER_INSIDE:\nscaleX=scaleY=Math.min(1,Math.min(scaleX,scaleY));\ncase FIT_CENTER:\nscaleX=scaleY=Math.min(scaleX,scaleY);\nbreak;\ncase FIT_XY:\nbreak;\ndefault :\nthrow new UnsupportedOperationException(\"TouchImageView does not support FIT_START or FIT_END\");\n}\nfloat redundantXSpace=viewWidth - (scaleX * drawableWidth);\nfloat redundantYSpace=viewHeight - (scaleY * drawableHeight);\nmatchViewWidth=viewWidth - redundantXSpace;\nmatchViewHeight=viewHeight - redundantYSpace;\nif (!isZoomed() && !imageRenderedAtLeastOnce) {\nmatrix.setScale(scaleX,scaleY);\nmatrix.postTranslate(redundantXSpace / 2,redundantYSpace / 2);\nnormalizedScale=1;\n}\n else {\nif (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {\nsavePreviousImageValues();\n}\nprevMatrix.getValues(m);\nm[Matrix.MSCALE_X]=matchViewWidth / drawableWidth * normalizedScale;\nm[Matrix.MSCALE_Y]=matchViewHeight / drawableHeight * normalizedScale;\nfloat transX=m[Matrix.MTRANS_X];\nfloat transY=m[Matrix.MTRANS_Y];\nfloat prevActualWidth=prevMatchViewWidth * normalizedScale;\nfloat actualWidth=getImageWidth();\ntranslateMatrixAfterRotate(Matrix.MTRANS_X,transX,prevActualWidth,actualWidth,prevViewWidth,viewWidth,drawableWidth);\nfloat prevActualHeight=prevMatchViewHeight * normalizedScale;\nfloat actualHeight=getImageHeight();\ntranslateMatrixAfterRotate(Matrix.MTRANS_Y,transY,prevActualHeight,actualHeight,prevViewHeight,viewHeight,drawableHeight);\nmatrix.setValues(m);\n}\nfixTrans();\nsetImageMatrix(matrix);\n}"}
{"ids": "17156", "raw_code": "ObjectAnimator animateBoundScroll(){\n  float curScroll=getStackScroll();\n  float newScroll=getBoundedStackScroll(curScroll);\n  if (Float.compare(newScroll,curScroll) != 0) {\n    animateScroll(curScroll,newScroll,null);\n  }\n  return mScrollAnimator;\n}"}
{"ids": "56217", "raw_code": "public IntArray resize(IntArray array,long size){\n  if (array instanceof BigIntArray) {\n    return resizeInPlace((BigIntArray)array,size);\n  }\n else {\n    AbstractArray arr=(AbstractArray)array;\n    final IntArray newArray=newIntArray(size,arr.clearOnResize);\n    for (long i=0, end=Math.min(size,array.size()); i < end; ++i) {\n      newArray.set(i,array.get(i));\n    }\n    array.close();\n    return newArray;\n  }\n}"}
{"ids": "23058", "raw_code": "public DERUTCTime(Date time){\n  SimpleDateFormat dateF=new SimpleDateFormat(\"yyMMddHHmmss'Z'\");\n  dateF.setTimeZone(new SimpleTimeZone(0,\"Z\"));\n  this.time=Strings.toByteArray(dateF.format(time));\n}"}
{"ids": "53183", "raw_code": "public static double pdf(double x,double mu,double beta){\n  final double z=(x - mu) / beta;\n  if (x == Double.NEGATIVE_INFINITY) {\n    return 0.;\n  }\n  return Math.exp(-z - Math.exp(-z)) / beta;\n}"}
{"ids": "41528", "raw_code": "private static byte[] copy_buffer(byte[] buffer,int sOffset,int len){\n  byte[] newData=new byte[len];\n  System.arraycopy(buffer,sOffset,newData,0,len);\n  return newData;\n}"}
{"ids": "32400", "raw_code": "public SharedFsCheckpointSpi(){\n  dirPaths.offer(DFLT_DIR_PATH);\n}"}
{"ids": "14439", "raw_code": "private void configure() throws NullLocationException, FormatterInitException {\n  String Interval=lmanager.getProperty(LogConstants.LOGSIGN_PERIODINSECONDS);\n  if ((Interval == null) || (Interval.length() == 0)) {\n    signInterval=LogConstants.LOGSIGN_PERIODINSECONDS_DEFAULT * 1000;\n  }\n else {\n    signInterval=Long.parseLong(Interval) * 1000;\n  }\n  String strMaxFileSize=lmanager.getProperty(LogConstants.MAX_FILE_SIZE);\n  if ((strMaxFileSize == null) || (strMaxFileSize.length() == 0)) {\n    maxFileSize=0;\n  }\n else {\n    maxFileSize=Integer.parseInt(strMaxFileSize);\n  }\n  location=lmanager.getProperty(LogConstants.LOG_PROP_PREFIX + \".\" + logName+ \".location\");\n  if (location == null) {\n    location=lmanager.getProperty(LogConstants.LOG_LOCATION);\n  }\n  if ((location == null) || (location.length() == 0)) {\n    throw new NullLocationException(\"Location Not Specified\");\n  }\n  if (!location.endsWith(File.separator)) {\n    location+=File.separator;\n  }\n  String filesPerKeyStoreString=lmanager.getProperty(LogConstants.FILES_PER_KEYSTORE);\n  if ((filesPerKeyStoreString == null) || (filesPerKeyStoreString.length() == 0)) {\n    if (Debug.warningEnabled()) {\n      Debug.warning(logName + \":Archiver: could not get the files \" + \"per keystore str setting it to 1\");\n    }\n    filesPerKeyStoreString=\"5\";\n  }\n  filesPerKeyStore=Integer.parseInt(filesPerKeyStoreString);\n  if (Debug.messageEnabled()) {\n    Debug.message(logName + \":Files per Key Store = \" + filesPerKeyStoreString);\n  }\n  String archiverClassString=lmanager.getProperty(LogConstants.ARCHIVER);\n  if ((archiverClassString == null) || (archiverClassString.length() == 0)) {\n    throw new NullLocationException(\"Archvier class not specified\");\n  }\n  archiverClass=archiverClassString;\n}"}
{"ids": "32974", "raw_code": "public void pull(final PullParams params,final ProgressMonitor progressMonitor) throws IOException {\n  pull(params,progressMonitor,dockerDaemonUri);\n}"}
{"ids": "63860", "raw_code": "public static InputStream streamFromString(String location) throws IOException {\n  InputStream is=null;\n  URL url=urlFromString(location,null,false);\n  if (url != null) {\n    is=url.openStream();\n  }\n else {\n    File f=new File(location);\n    if (f.exists())     is=new FileInputStream(f);\n  }\n  if (is == null) {\n    return null;\n  }\n else   if (isGZipFile(location)) {\n    return new GZIPInputStream(is);\n  }\n else {\n    return is;\n  }\n}"}
{"ids": "20325", "raw_code": "public void addUpdateListener(AnimatorUpdateListener listener){\n  if (mUpdateListeners == null) {\n    mUpdateListeners=new ArrayList<AnimatorUpdateListener>();\n  }\n  mUpdateListeners.add(listener);\n}"}
{"ids": "15455", "raw_code": "public void handleRequest(RequestContext rc) throws CLIException {\n  super.handleRequest(rc);\n  SSOToken adminSSOToken=getAdminSSOToken();\n  IOutput outputWriter=getOutputWriter();\n  String realm=getStringOptionValue(IArgument.REALM_NAME);\n  String idName=getStringOptionValue(ARGUMENT_ID_NAME);\n  String type=getStringOptionValue(ARGUMENT_ID_TYPE);\n  IdType idType=convert2IdType(type);\n  String[] params={realm,type,idName};\n  try {\n    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);\n    Set set=amir.getAllowedIdOperations(idType);\n    if (!set.contains(IdOperation.SERVICE)) {\n      throw new CLIException(MessageFormat.format(getResourceString(\"realm-does-not-support-service\"),(Object[])params),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n    }\n    writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_GET_ASSIGNABLE_SERVICES\",params);\n    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);\n    Set services=amid.getAssignableServices();\n    if (idType.equals(IdType.USER)) {\n      services.remove(Constants.SVC_NAME_USER);\n      services.remove(Constants.SVC_NAME_AUTH_CONFIG);\n      services.remove(Constants.SVC_NAME_SAML);\n    }\n    if ((services != null) && !services.isEmpty()) {\n      String msg=getResourceString(\"assignable-service-result\");\n      String[] arg={\"\"};\n      for (Iterator i=services.iterator(); i.hasNext(); ) {\n        arg[0]=(String)i.next();\n        outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));\n      }\n    }\n else {\n      outputWriter.printlnMessage(getResourceString(\"no-service-assignable\"));\n    }\n    writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_GET_ASSIGNABLE_SERVICES\",params);\n  }\n catch (  IdRepoException e) {\n    String[] args={realm,type,idName,e.getMessage()};\n    debugError(\"GetAssignableServices.handleRequest\",e);\n    writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_GET_ASSIGNABLE_SERVICES\",args);\n    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n  }\ncatch (  SSOException e) {\n    String[] args={realm,type,idName,e.getMessage()};\n    debugError(\"GetAssignableServices.handleRequest\",e);\n    writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_GET_ASSIGNABLE_SERVICES\",args);\n    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n  }\n}"}
{"ids": "28869", "raw_code": "public boolean isAlive(){\n  if (hasSentData) {\n    if (System.currentTimeMillis() - lastSendTime < TIMEOUT)     return true;\n    return hasReceivedData && lastReceiveTime > lastSendTime;\n  }\n  return true;\n}"}
{"ids": "80947", "raw_code": "private void removeSelectedItems(List items){\n  for (Iterator iter=items.iterator(); iter.hasNext(); ) {\n    Object item=iter.next();\n    removeHistoryItem(item);\n  }\n  refreshWithLastSelection=false;\n  contentProvider.refresh();\n}"}
{"ids": "6776", "raw_code": "public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){\n  Map map=of();\n  map.put(k1,v1);\n  map.put(k2,v2);\n  map.put(k3,v3);\n  map.put(k4,v4);\n  return map;\n}"}
{"ids": "1284", "raw_code": "public static long sizeOf(Struct sct){\n  Iterator<Entry<Key,Object>> it=sct.entryIterator();\n  Entry<Key,Object> e;\n  long size=0;\n  while (it.hasNext()) {\n    e=it.next();\n    size+=SizeOf.size(e.getKey());\n    size+=SizeOf.size(e.getValue());\n  }\n  return size;\n}"}
{"ids": "20228", "raw_code": "@Override public boolean isEnabled(){\n  if ((attributeSelectionPanel != null) && !isValueOnly()) {\n    return attributeSelectionPanel.isEnabled();\n  }\n else {\n    if (table != null) {\n      return table.isEnabled();\n    }\n  }\n  return false;\n}"}
{"ids": "18380", "raw_code": "public static Header[] parseHeaders(final SessionInputBuffer inbuffer,int maxHeaderCount,int maxLineLen,LineParser parser) throws HttpException, IOException {\n  if (inbuffer == null) {\n    throw new IllegalArgumentException(\"Session input buffer may not be null\");\n  }\n  if (parser == null)   parser=BasicLineParser.DEFAULT;\n  ArrayList headerLines=new ArrayList();\n  CharArrayBuffer current=null;\n  CharArrayBuffer previous=null;\n  for (; ; ) {\n    if (current == null) {\n      current=new CharArrayBuffer(64);\n    }\n else {\n      current.clear();\n    }\n    int l=inbuffer.readLine(current);\n    if (l == -1 || current.length() < 1) {\n      break;\n    }\n    if ((current.charAt(0) == ' ' || current.charAt(0) == '\\t') && previous != null) {\n      int i=0;\n      while (i < current.length()) {\n        char ch=current.charAt(i);\n        if (ch != ' ' && ch != '\\t') {\n          break;\n        }\n        i++;\n      }\n      if (maxLineLen > 0 && previous.length() + 1 + current.length() - i > maxLineLen) {\n        throw new IOException(\"Maximum line length limit exceeded\");\n      }\n      previous.append(' ');\n      previous.append(current,i,current.length() - i);\n    }\n else {\n      headerLines.add(current);\n      previous=current;\n      current=null;\n    }\n    if (maxHeaderCount > 0 && headerLines.size() >= maxHeaderCount) {\n      throw new IOException(\"Maximum header count exceeded\");\n    }\n  }\n  Header[] headers=new Header[headerLines.size()];\n  for (int i=0; i < headerLines.size(); i++) {\n    CharArrayBuffer buffer=(CharArrayBuffer)headerLines.get(i);\n    try {\n      headers[i]=parser.parseHeader(buffer);\n    }\n catch (    ParseException ex) {\n      throw new ProtocolException(ex.getMessage());\n    }\n  }\n  return headers;\n}"}
{"ids": "29724", "raw_code": "public void readContent(byte[] dst,int offset,int length){\n  System.arraycopy(content,0,dst,offset,length);\n}"}
{"ids": "32016", "raw_code": "public static void putObjectField(Object obj,long fieldOff,Object val){\n  UNSAFE.putObject(obj,fieldOff,val);\n}"}
{"ids": "59632", "raw_code": "public List<FunctionDesc> listAllFunctions(){\n  List<FunctionDesc> functions=new ArrayList<FunctionDesc>();\n  for (  MeasureDesc m : measures) {\n    functions.add(m.getFunction());\n  }\n  return functions;\n}"}
{"ids": "40549", "raw_code": "private static boolean instanceOfAny(Object o,Collection<Class> classes){\n  for (  Class c : classes) {\n    if (c.isInstance(o))     return true;\n  }\n  return false;\n}"}
{"ids": "84977", "raw_code": "public static IProposalComputer newSetterAttributeProposalComputer(ContentAssistRequest contentAssistRequest,IJavaProject javaProject){\n  IDOMNode node=(IDOMNode)contentAssistRequest.getNode();\n  if (node.getNodeType() != IDOMNode.ELEMENT_NODE) {\n    return null;\n  }\n  String widgetTypeName=UiBinderXmlModelUtilities.computeQualifiedWidgetTypeName(node);\n  if (widgetTypeName == null) {\n    return null;\n  }\n  String matchString=contentAssistRequest.getMatchString();\n  return new SetterAttributeProposalComputer(node,widgetTypeName,javaProject,matchString,contentAssistRequest.getReplacementBeginPosition(),matchString.length());\n}"}
{"ids": "12046", "raw_code": "public void omitAll(){\n  if (writeChunk != null)   bytesWritten+=writeChunk.position();\n  bytesRead=bytesWritten;\n  list.clear();\n  writeChunk=null;\n  readChunk=null;\n}"}
{"ids": "52444", "raw_code": "private void refresh(ILaunchConfiguration configuration){\n  setLaunchConfiguration(configuration);\n  try {\n    fModel=createClasspathModel(configuration);\n  }\n catch (  Exception e) {\n    message=e.getMessage();\n    setErrorMessage(e.getMessage());\n  }\n  fClasspathViewer.setLaunchConfiguration(configuration);\n  fClasspathViewer.setInput(fModel);\n  setDirty(false);\n}"}
{"ids": "33083", "raw_code": "public void computePackageFragmentRoots(IClasspathEntry[] resolvedClasspath,ObjectVector accumulatedRoots,HashSet rootIDs,IClasspathEntry referringEntry,boolean retrieveExportedRoots,Map rootToResolvedEntries) throws JavaModelException {\n  if (referringEntry == null) {\n    rootIDs.add(rootID());\n  }\n  for (int i=0, length=resolvedClasspath.length; i < length; i++) {\n    computePackageFragmentRoots(resolvedClasspath[i],accumulatedRoots,rootIDs,referringEntry,retrieveExportedRoots,rootToResolvedEntries);\n  }\n}"}
{"ids": "73345", "raw_code": "private void init(){\n  setTitle(\"New SOM Group\");\n  somPanel=new SOMPropertiesPanel(networkPanel,SOMPropsPanelType.CREATE_GROUP);\n  tabLogic.add(somPanel);\n  layoutPanel=new MainLayoutPanel(false,this);\n  layoutPanel.setCurrentLayout(SOMGroup.DEFAULT_LAYOUT);\n  tabLayout.add(layoutPanel);\n  tabbedPane.addTab(\"Logic\",tabLogic);\n  tabbedPane.addTab(\"Layout\",layoutPanel);\n  setContentPane(tabbedPane);\n  Action helpAction=new ShowHelpAction(somPanel.getHelpPath());\n  addButton(new JButton(helpAction));\n}"}
{"ids": "68866", "raw_code": "private String diff_linesToCharsMunge(String text,List<String> lineArray,Map<String,Integer> lineHash){\n  int lineStart=0;\n  int lineEnd=-1;\n  String line;\n  StringBuilder chars=new StringBuilder();\n  while (lineEnd < text.length() - 1) {\n    lineEnd=text.indexOf('\\n',lineStart);\n    if (lineEnd == -1) {\n      lineEnd=text.length() - 1;\n    }\n    line=text.substring(lineStart,lineEnd + 1);\n    lineStart=lineEnd + 1;\n    if (lineHash.containsKey(line)) {\n      chars.append(String.valueOf((char)(int)lineHash.get(line)));\n    }\n else {\n      lineArray.add(line);\n      lineHash.put(line,lineArray.size() - 1);\n      chars.append(String.valueOf((char)(lineArray.size() - 1)));\n    }\n  }\n  return chars.toString();\n}"}
{"ids": "62812", "raw_code": "public void remove(Video video){\n  videoList.remove(video);\n  notifyDataSetChanged();\n}"}
{"ids": "73845", "raw_code": "public boolean canInvert(){\n  return true;\n}"}
{"ids": "1587", "raw_code": "public void addAllSearchables(ArrayList<? extends SearchResult> searchable){\n  searchables.addAll(searchable);\n}"}
{"ids": "12404", "raw_code": "public static int parseInt(String text){\n  return parseInt(text,0);\n}"}
{"ids": "13283", "raw_code": "@Override public void endDocument(Augmentations augs) throws XNIException {\n  try {\n    if (fDocumentHandler != null) {\n      fDocumentHandler.endDocument();\n    }\n    if (fContentHandler != null) {\n      fContentHandler.endDocument();\n    }\n  }\n catch (  SAXException e) {\n    throw new XNIException(e);\n  }\n}"}
{"ids": "21857", "raw_code": "public String execCommand(String command){\n  StringBuilder buf=new StringBuilder();\n  sendWaitFor(command,defaultTimeout,prompts,buf);\n  log.debug(buf.toString());\n  return cleanOutput(buf);\n}"}
{"ids": "67940", "raw_code": "private void ClientThreadRun() throws IOException {\n  SocketChannel channel=null;\n  try {\n    log.debug(\"Attempting connection to {}:{} with {} pending messages\",hostname,port,pending.size());\n    channel=SocketChannel.open(new InetSocketAddress(hostname,port));\n    channel.configureBlocking(false);\n    ClientThreadMainLoop(channel);\n  }\n  finally {\n    if (channel != null) {\n      channel.close();\n    }\n    if (current != null) {\n      pending.offerFirst(current);\n      current=null;\n    }\n  }\n}"}
{"ids": "3700", "raw_code": "@Override public PathImpl schemeWalk(String userPath,Map<String,Object> newAttributes,String uri,int offset){\n  int length=uri.length();\n  if (length < 2 + offset || uri.charAt(offset) != '/' || uri.charAt(1 + offset) != '/')   throw new RuntimeException(\"bad scheme\");\n  CharBuffer buf=new CharBuffer();\n  int i=2 + offset;\n  int ch=0;\n  boolean isIpv6=false;\n  for (; (i < length && (ch=uri.charAt(i)) != '/' && ch != '?' && !(ch == ':' && !isIpv6)); i++) {\n    if (ch == '[')     isIpv6=true;\n else     if (ch == ']')     isIpv6=false;\n    buf.append((char)ch);\n  }\n  String host=buf.toString();\n  if (host.length() == 0)   throw new RuntimeException(\"bad host\");\n  int port=0;\n  if (ch == ':') {\n    for (i++; i < length && (ch=uri.charAt(i)) >= '0' && ch <= '9'; i++) {\n      port=10 * port + uri.charAt(i) - '0';\n    }\n  }\n  return create(this,userPath,newAttributes,host,port);\n}"}
{"ids": "9853", "raw_code": "@RequestMapping(value=\"/SAML2/SSO\") public void ssoDefaultTenantBindingError(Locale locale,HttpServletResponse response) throws IOException {\n  logger.info(\"SSO binding error! The client locale is \" + locale.toString() + \", DEFAULT tenant\");\n  sendError(locale,response,\"Binding\");\n}"}
{"ids": "15593", "raw_code": "@After public void tearDown(){\n  webClient.closeAllWindows();\n}"}
{"ids": "69120", "raw_code": "@Override public void onCanStartVideoServiceChanged(boolean canStartVideoService){\n  Log.i(\"SkypeCallFragment\",\"onCanStartVideoServiceChanged \" + String.valueOf(canStartVideoService));\n  if (canStartVideoService == true) {\n    mConversationHelper.startOutgoingVideo();\n    mConversationHelper.startIncomingVideo();\n  }\n}"}
{"ids": "11349", "raw_code": "public Manifest(InputStream is) throws IOException {\n  while (is.available() != 0) {\n    MessageHeader m=new MessageHeader(is);\n    entries.addElement(m);\n  }\n}"}
{"ids": "84196", "raw_code": "@Override public Object readReply(Class expectedClass) throws Throwable {\n  int tag=read();\n  if (tag == 'R')   return readObject(expectedClass);\n else   if (tag == 'F') {\n    HashMap map=(HashMap)readObject(HashMap.class);\n    throw prepareFault(map);\n  }\n else {\n    StringBuilder sb=new StringBuilder();\n    sb.append((char)tag);\n    try {\n      int ch;\n      while ((ch=read()) >= 0) {\n        sb.append((char)ch);\n      }\n    }\n catch (    IOException e) {\n      log.log(Level.FINE,e.toString(),e);\n    }\n    throw error(\"expected hessian reply at \" + codeName(tag) + \"\\n\"+ sb);\n  }\n}"}
{"ids": "56528", "raw_code": "public void removeClickingListener(OnWheelClickedListener listener){\n  clickingListeners.remove(listener);\n}"}
{"ids": "8157", "raw_code": "public static String unexpandLine(CharSequence self,int tabStop){\n  StringBuilder builder=new StringBuilder(self.toString());\n  int index=0;\n  while (index + tabStop < builder.length()) {\n    String piece=builder.substring(index,index + tabStop);\n    int count=0;\n    while ((count < tabStop) && (Character.isWhitespace(piece.charAt(tabStop - (count + 1)))))     count++;\n    if (count > 0) {\n      piece=piece.substring(0,tabStop - count) + '\\t';\n      builder.replace(index,index + tabStop,piece);\n      index=index + tabStop - (count - 1);\n    }\n else     index=index + tabStop;\n  }\n  return builder.toString();\n}"}
{"ids": "10366", "raw_code": "private void uninstall(String rowType){\n  if (extensionsByRowtype.containsKey(rowType)) {\n    extensionsByRowtype.remove(rowType);\n    File f=getExtensionFile(rowType);\n    if (f.exists()) {\n      FileUtils.deleteQuietly(f);\n    }\n else {\n      log.warn(\"Extension doesnt exist locally, cant delete \" + rowType);\n    }\n  }\n else {\n    log.warn(\"Extension not installed locally, cant delete \" + rowType);\n  }\n}"}
{"ids": "11329", "raw_code": "public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){\n  pcSupport.addPropertyChangeListener(propertyName,in_pcl);\n}"}
{"ids": "47051", "raw_code": "static final int tableSizeFor(int cap){\n  int n=cap - 1;\n  n|=n >>> 1;\n  n|=n >>> 2;\n  n|=n >>> 4;\n  n|=n >>> 8;\n  n|=n >>> 16;\n  return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n}"}
{"ids": "38682", "raw_code": "@Override public boolean connectionAllowed(String eventName){\n  if (!eventName.equals(\"instance\") && !eventName.equals(\"dataSet\") && !eventName.equals(\"trainingSet\")&& !eventName.equals(\"testSet\")) {\n    return false;\n  }\n  if (m_listenee != null) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "11314", "raw_code": "protected void generateOMGraphic(OMGraphic g){\n  if (g != null && g.getNeedToRegenerate()) {\n    Projection proj=getProjection();\n    if (proj != null) {\n      g.generate(proj);\n    }\n else     if (DEBUG) {\n      Debug.output(\"OMDrawingTool: graphic needs generation: \" + g.getNeedToRegenerate());\n    }\n  }\n}"}
{"ids": "45213", "raw_code": "public void insertVariable(){\n  ScriptStep variableStep=ScriptStepFactory.createVariable(getVariableKey(),getVariableValue());\n  steps.add(getInsertIndex(),variableStep);\n  variableKey=\"\";\n  variableValue=\"\";\n  reindexScriptSteps();\n}"}
{"ids": "37914", "raw_code": "protected boolean[] canHandleZeroTraining(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){\n  print(\"handle zero training instances\");\n  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);\n  print(\"...\");\n  ArrayList<String> accepts=new ArrayList<String>();\n  accepts.add(\"train\");\n  accepts.add(\"value\");\n  int numTrain=0, numTest=getNumInstances(), numClasses=2, missingLevel=0;\n  boolean predictorMissing=false, classMissing=false;\n  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numTest,numClasses,accepts);\n}"}
{"ids": "86147", "raw_code": "public static byte[] long2buff(long n){\n  byte[] bs;\n  bs=new byte[8];\n  bs[0]=(byte)((n >> 56) & 0xFF);\n  bs[1]=(byte)((n >> 48) & 0xFF);\n  bs[2]=(byte)((n >> 40) & 0xFF);\n  bs[3]=(byte)((n >> 32) & 0xFF);\n  bs[4]=(byte)((n >> 24) & 0xFF);\n  bs[5]=(byte)((n >> 16) & 0xFF);\n  bs[6]=(byte)((n >> 8) & 0xFF);\n  bs[7]=(byte)(n & 0xFF);\n  return bs;\n}"}
{"ids": "57556", "raw_code": "final boolean tryWriteLock(){\n  Thread current=Thread.currentThread();\n  int c=getState();\n  if (c != 0) {\n    int w=exclusiveCount(c);\n    if (w == 0 || current != getExclusiveOwnerThread())     return false;\n    if (w == MAX_COUNT)     throw new Error(\"Maximum lock count exceeded\");\n  }\n  if (!compareAndSetState(c,c + 1))   return false;\n  setExclusiveOwnerThread(current);\n  return true;\n}"}
{"ids": "2850", "raw_code": "public IoServiceListenerSupport(IoService service){\n  if (service == null) {\n    throw new IllegalArgumentException(\"service\");\n  }\n  this.service=service;\n}"}
{"ids": "30856", "raw_code": "private void cancelEventLeaseDo(long eventID,Uuid leaseID) throws UnknownLeaseException {\n  long now=System.currentTimeMillis();\n  EventReg reg=(EventReg)eventByID.get(new Long(eventID));\n  if (reg == null || reg.leaseExpiration <= now)   throw new UnknownLeaseException();\n  deleteEvent(reg);\n  if (reg.leaseExpiration == minEventExpiration)   concurrentObj.waiterNotify(eventNotifier);\n}"}
{"ids": "43843", "raw_code": "public static boolean isValidGDay(String value){\n  String regex=\"---\\\\d\\\\d(Z|(\\\\+|-)\\\\d\\\\d:\\\\d\\\\d)?\";\n  if (value.matches(regex)) {\n    return isValidCalendarValue(value);\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "761", "raw_code": "protected void paint3DRectLighting(Graphics2D g2,int x,int y,int width,int height){\n  g2.setColor(Color.white);\n  g2.drawLine(x + 1,y + 1,x + 1,y + height - 1);\n  g2.drawLine(x + 1,y + 1,x + width - 1,y + 1);\n  g2.setColor(Color.gray);\n  g2.drawLine(x + 1,y + height - 1,x + width - 1,y + height - 1);\n  g2.drawLine(x + width - 1,y + 1,x + width - 1,y + height - 1);\n  g2.setColor(Color.darkGray);\n  g2.drawLine(x,y + height,x + width,y + height);\n  g2.drawLine(x + width,y,x + width,y + height);\n}"}
{"ids": "13407", "raw_code": "private void parseAttributes(TypedArray a){\n  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_pwBarWidth,barWidth);\n  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_pwRimWidth,rimWidth);\n  spinSpeed=(int)a.getDimension(R.styleable.ProgressWheel_pwSpinSpeed,spinSpeed);\n  barLength=(int)a.getDimension(R.styleable.ProgressWheel_pwBarLength,barLength);\n  delayMillis=a.getInteger(R.styleable.ProgressWheel_pwDelayMillis,delayMillis);\n  if (delayMillis < 0) {\n    delayMillis=10;\n  }\n  if (a.hasValue(R.styleable.ProgressWheel_pwText)) {\n    setText(a.getString(R.styleable.ProgressWheel_pwText));\n  }\n  barColor=a.getColor(R.styleable.ProgressWheel_pwBarColor,barColor);\n  textColor=a.getColor(R.styleable.ProgressWheel_pwTextColor,textColor);\n  rimColor=a.getColor(R.styleable.ProgressWheel_pwRimColor,rimColor);\n  circleColor=a.getColor(R.styleable.ProgressWheel_pwCircleColor,circleColor);\n  contourColor=a.getColor(R.styleable.ProgressWheel_pwContourColor,contourColor);\n  textSize=(int)a.getDimension(R.styleable.ProgressWheel_pwTextSize,textSize);\n  contourSize=a.getDimension(R.styleable.ProgressWheel_pwContourSize,contourSize);\n  a.recycle();\n}"}
{"ids": "16902", "raw_code": "@Deprecated public MediaFile(File f,MediaFileType type){\n  this(f.toPath(),type);\n}"}
{"ids": "33319", "raw_code": "public CommandLine clear(){\n  line.clear();\n  return this;\n}"}
{"ids": "86685", "raw_code": "public static String grepMinusV(String val,String pattern){\n  return grepInner(val,pattern,true);\n}"}
{"ids": "36562", "raw_code": "public DropDownPopupButtonBuilder add(Action action){\n  popupMenu.add(action);\n  return this;\n}"}
{"ids": "7034", "raw_code": "@SuppressLint(\"NewApi\") private void attachImageFrommGallery(){\n  Bundle conData=new Bundle();\n  Intent intent=new Intent();\n  if ((mSelectedGalleryItemsList.size() == 1) || (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2)) {\n    intent.setData(mSelectedGalleryItemsList.get(0).mFileUri);\n  }\n else   if (mSelectedGalleryItemsList.size() > 0) {\n    ClipData.Item firstUri=new ClipData.Item(null,null,null,mSelectedGalleryItemsList.get(0).mFileUri);\n    String[] mimeType={\"*/*\"};\n    ClipData clipData=new ClipData(\"\",mimeType,firstUri);\n    for (int index=1; index < mSelectedGalleryItemsList.size(); index++) {\n      ClipData.Item item=new ClipData.Item(null,null,null,mSelectedGalleryItemsList.get(index).mFileUri);\n      clipData.addItem(item);\n    }\n    intent.setClipData(clipData);\n  }\n else {\n    Uri uriSavedFromLifeCycle=(Uri)mImagePreviewImageView.getTag();\n    if (null != uriSavedFromLifeCycle) {\n      intent.setData(uriSavedFromLifeCycle);\n    }\n  }\n  intent.putExtras(conData);\n  setResult(RESULT_OK,intent);\n  VectorApp.setSavedCameraImagePreview(null);\n  finish();\n}"}
{"ids": "79879", "raw_code": "public static void mkdirs(File directory) throws CreateDirectoryException {\n  if (directory.exists()) {\n    if (directory.isDirectory()) {\n      return;\n    }\n    if (!directory.delete()) {\n      throw new CreateDirectoryException(directory.getAbsolutePath(),new FileDeleteException(directory.getAbsolutePath()));\n    }\n  }\n  if (!directory.mkdirs() && !directory.isDirectory()) {\n    throw new CreateDirectoryException(directory.getAbsolutePath());\n  }\n}"}
{"ids": "39088", "raw_code": "public boolean hasDependency(Capability c){\n  if (doNotCheckCapabilities()) {\n    return false;\n  }\n  return m_Dependencies.contains(c);\n}"}
{"ids": "53457", "raw_code": "private static int prefixLen(String o1,String o2){\n  final int l1=o1.length(), l2=o2.length(), l=l1 < l2 ? l1 : l2;\n  int prefix=0;\n  while (prefix < l && (o1.charAt(prefix) == o2.charAt(prefix))) {\n    prefix++;\n  }\n  return prefix;\n}"}
{"ids": "52922", "raw_code": "@Override public void writeExternal(ObjectOutput out) throws IOException {\n  super.writeExternal(out);\n  out.writeDouble(parentDistance);\n}"}
{"ids": "47830", "raw_code": "static int shouldNativelyFocusHeavyweight(Component heavyweight,Component descendant,boolean temporary,boolean focusedWindowChangeAllowed,long time,CausedFocusEvent.Cause cause){\n  if (log.isLoggable(PlatformLogger.Level.FINE)) {\n    if (heavyweight == null) {\n      log.fine(\"Assertion (heavyweight != null) failed\");\n    }\n    if (time == 0) {\n      log.fine(\"Assertion (time != 0) failed\");\n    }\n  }\n  if (descendant == null) {\n    descendant=heavyweight;\n  }\n  KeyboardFocusManager manager=getCurrentKeyboardFocusManager(SunToolkit.targetToAppContext(descendant));\n  KeyboardFocusManager thisManager=getCurrentKeyboardFocusManager();\n  Component currentFocusOwner=thisManager.getGlobalFocusOwner();\n  Component nativeFocusOwner=thisManager.getNativeFocusOwner();\n  Window nativeFocusedWindow=thisManager.getNativeFocusedWindow();\n  if (focusLog.isLoggable(PlatformLogger.Level.FINER)) {\n    focusLog.finer(\"SNFH for {0} in {1}\",String.valueOf(descendant),String.valueOf(heavyweight));\n  }\n  if (focusLog.isLoggable(PlatformLogger.Level.FINEST)) {\n    focusLog.finest(\"0. Current focus owner {0}\",String.valueOf(currentFocusOwner));\n    focusLog.finest(\"0. Native focus owner {0}\",String.valueOf(nativeFocusOwner));\n    focusLog.finest(\"0. Native focused window {0}\",String.valueOf(nativeFocusedWindow));\n  }\nsynchronized (heavyweightRequests) {\n    HeavyweightFocusRequest hwFocusRequest=getLastHWRequest();\n    if (focusLog.isLoggable(PlatformLogger.Level.FINEST)) {\n      focusLog.finest(\"Request {0}\",String.valueOf(hwFocusRequest));\n    }\n    if (hwFocusRequest == null && heavyweight == nativeFocusOwner && heavyweight.getContainingWindow() == nativeFocusedWindow) {\n      if (descendant == currentFocusOwner) {\n        if (focusLog.isLoggable(PlatformLogger.Level.FINEST))         focusLog.finest(\"1. SNFH_FAILURE for {0}\",String.valueOf(descendant));\n        return SNFH_FAILURE;\n      }\n      manager.enqueueKeyEvents(time,descendant);\n      hwFocusRequest=new HeavyweightFocusRequest(heavyweight,descendant,temporary,cause);\n      heavyweightRequests.add(hwFocusRequest);\n      if (currentFocusOwner != null) {\n        FocusEvent currentFocusOwnerEvent=new CausedFocusEvent(currentFocusOwner,FocusEvent.FOCUS_LOST,temporary,descendant,cause);\n        SunToolkit.postEvent(currentFocusOwner.appContext,currentFocusOwnerEvent);\n      }\n      FocusEvent newFocusOwnerEvent=new CausedFocusEvent(descendant,FocusEvent.FOCUS_GAINED,temporary,currentFocusOwner,cause);\n      SunToolkit.postEvent(descendant.appContext,newFocusOwnerEvent);\n      if (focusLog.isLoggable(PlatformLogger.Level.FINEST))       focusLog.finest(\"2. SNFH_HANDLED for {0}\",String.valueOf(descendant));\n      return SNFH_SUCCESS_HANDLED;\n    }\n else     if (hwFocusRequest != null && hwFocusRequest.heavyweight == heavyweight) {\n      if (hwFocusRequest.addLightweightRequest(descendant,temporary,cause)) {\n        manager.enqueueKeyEvents(time,descendant);\n      }\n      if (focusLog.isLoggable(PlatformLogger.Level.FINEST)) {\n        focusLog.finest(\"3. SNFH_HANDLED for lightweight\" + descendant + \" in \"+ heavyweight);\n      }\n      return SNFH_SUCCESS_HANDLED;\n    }\n else {\n      if (!focusedWindowChangeAllowed) {\n        if (hwFocusRequest == HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER) {\n          int size=heavyweightRequests.size();\n          hwFocusRequest=(HeavyweightFocusRequest)((size >= 2) ? heavyweightRequests.get(size - 2) : null);\n        }\n        if (focusedWindowChanged(heavyweight,(hwFocusRequest != null) ? hwFocusRequest.heavyweight : nativeFocusedWindow)) {\n          if (focusLog.isLoggable(PlatformLogger.Level.FINEST)) {\n            focusLog.finest(\"4. SNFH_FAILURE for \" + descendant);\n          }\n          return SNFH_FAILURE;\n        }\n      }\n      manager.enqueueKeyEvents(time,descendant);\n      heavyweightRequests.add(new HeavyweightFocusRequest(heavyweight,descendant,temporary,cause));\n      if (focusLog.isLoggable(PlatformLogger.Level.FINEST)) {\n        focusLog.finest(\"5. SNFH_PROCEED for \" + descendant);\n      }\n      return SNFH_SUCCESS_PROCEED;\n    }\n  }\n}"}
{"ids": "23499", "raw_code": "public NamedThreadFactory(final String poolID){\n  id=poolID;\n}"}
{"ids": "74353", "raw_code": "public void moveLocationUp(RouteLocation rl){\n  int sequenceId=rl.getSequenceId();\n  if (sequenceId - 1 <= 0) {\n    rl.setSequenceId(_sequenceNum + 1);\n    resequenceIds();\n  }\n else {\n    RouteLocation replaceRl=getItemBySequenceId(sequenceId - 1);\n    if (replaceRl != null) {\n      replaceRl.setSequenceId(sequenceId);\n      rl.setSequenceId(sequenceId - 1);\n    }\n else {\n      resequenceIds();\n    }\n  }\n  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,null,Integer.toString(sequenceId));\n}"}
{"ids": "39111", "raw_code": "protected Attribute generateAttribute(int index,int attType,String namePrefix) throws Exception {\n  Attribute result;\n  String name;\n  int valIndex;\n  int nomCount;\n  String prefix;\n  result=null;\n  if (index == CLASS_IS_LAST) {\n    valIndex=0;\n    name=\"Class\";\n    prefix=\"class\";\n    nomCount=getNumClasses();\n  }\n else {\n    valIndex=index;\n    nomCount=getNumNominalValues();\n    prefix=\"att\" + (valIndex + 1) + \"val\";\nswitch (attType) {\ncase Attribute.NOMINAL:\n      name=\"Nominal\" + (valIndex + 1);\n    break;\ncase Attribute.NUMERIC:\n  name=\"Numeric\" + (valIndex + 1);\nbreak;\ncase Attribute.STRING:\nname=\"String\" + (valIndex + 1);\nbreak;\ncase Attribute.DATE:\nname=\"Date\" + (valIndex + 1);\nbreak;\ncase Attribute.RELATIONAL:\nname=\"Relational\" + (valIndex + 1);\nbreak;\ndefault :\nthrow new IllegalArgumentException(\"Attribute type '\" + attType + \"' unknown!\");\n}\n}\nswitch (attType) {\ncase Attribute.NOMINAL:\nArrayList<String> nomStrings=new ArrayList<String>(valIndex + 1);\nfor (int j=0; j < nomCount; j++) {\nnomStrings.add(prefix + (j + 1));\n}\nresult=new Attribute(namePrefix + name,nomStrings);\nbreak;\ncase Attribute.NUMERIC:\nresult=new Attribute(namePrefix + name);\nbreak;\ncase Attribute.STRING:\nresult=new Attribute(namePrefix + name,(ArrayList<String>)null);\nbreak;\ncase Attribute.DATE:\nresult=new Attribute(namePrefix + name,\"yyyy-mm-dd\");\nbreak;\ncase Attribute.RELATIONAL:\nInstances rel;\nif (index == CLASS_IS_LAST) {\nrel=getRelationalClassFormat();\n}\n else {\nrel=getRelationalFormat(index);\n}\nif (rel == null) {\nTestInstances dataset=new TestInstances();\ndataset.setNumNominal(getNumRelationalNominal());\ndataset.setNumNominalValues(getNumRelationalNominalValues());\ndataset.setNumNumeric(getNumRelationalNumeric());\ndataset.setNumString(getNumRelationalString());\ndataset.setNumDate(getNumRelationalDate());\ndataset.setNumInstances(0);\ndataset.setClassType(Attribute.NOMINAL);\nrel=new Instances(dataset.generate());\nif (!getNoClass()) {\nint clsIndex=rel.classIndex();\nrel.setClassIndex(-1);\nrel.deleteAttributeAt(clsIndex);\n}\n}\nresult=new Attribute(namePrefix + name,rel);\nbreak;\ndefault :\nthrow new IllegalArgumentException(\"Attribute type '\" + attType + \"' unknown!\");\n}\nreturn result;\n}"}
{"ids": "38081", "raw_code": "public static String printCanopyAssignments(Instances dataPoints,List<long[]> canopyAssignments){\n  StringBuilder temp=new StringBuilder();\n  for (int i=0; i < dataPoints.size(); i++) {\n    temp.append(\"Cluster \" + i + \": \");\n    temp.append(dataPoints.instance(i));\n    if (canopyAssignments != null && canopyAssignments.size() == dataPoints.size()) {\n      long[] assignments=canopyAssignments.get(i);\n      temp.append(printSingleAssignment(assignments));\n    }\n    temp.append(\"\\n\");\n  }\n  return temp.toString();\n}"}
{"ids": "45899", "raw_code": "public static void registerDefaultPrefixes() throws XMLSecurityException {\n  setDefaultPrefix(\"http://www.w3.org/2000/09/xmldsig#\",\"ds\");\n  setDefaultPrefix(\"http://www.w3.org/2001/04/xmlenc#\",\"xenc\");\n  setDefaultPrefix(\"http://www.w3.org/2009/xmlenc11#\",\"xenc11\");\n  setDefaultPrefix(\"http://www.xmlsecurity.org/experimental#\",\"experimental\");\n  setDefaultPrefix(\"http://www.w3.org/2002/04/xmldsig-filter2\",\"dsig-xpath-old\");\n  setDefaultPrefix(\"http://www.w3.org/2002/06/xmldsig-filter2\",\"dsig-xpath\");\n  setDefaultPrefix(\"http://www.w3.org/2001/10/xml-exc-c14n#\",\"ec\");\n  setDefaultPrefix(\"http://www.nue.et-inf.uni-siegen.de/~geuer-pollmann/#xpathFilter\",\"xx\");\n}"}
{"ids": "65750", "raw_code": "protected void initBPOrderDetails(int C_BPartner_ID,boolean forInvoice){\n  log.config(\"C_BPartner_ID=\" + C_BPartner_ID);\n  KeyNamePair pp=new KeyNamePair(0,\"\");\n  orderField.removeActionListener(this);\n  orderField.removeAllItems();\n  orderField.addItem(pp);\n  ArrayList<KeyNamePair> list=loadOrderData(C_BPartner_ID,forInvoice,false);\n  for (  KeyNamePair knp : list)   orderField.addItem(knp);\n  orderField.setSelectedIndex(0);\n  orderField.addActionListener(this);\n  dialog.pack();\n  initBPDetails(C_BPartner_ID);\n}"}
{"ids": "56929", "raw_code": "private void writeToc(ByteBuffer dataFileBuffer,TocType tocType,int entryCount,int firstEntryOffset){\n  dataFileBuffer.putInt(tocType.identifier);\n  dataFileBuffer.putInt(entryCount);\n  dataFileBuffer.putLong(firstEntryOffset);\n}"}
{"ids": "29670", "raw_code": "public void startPart(String contentType,String[] headers) throws IOException {\n  writeCurrentBoundary();\n  if (contentType != null) {\n    writeString(MimeUtils.HEADER_CONTENT_TYPE + \": \" + contentType);\n    out.write(CRLF);\n  }\n  for (int i=0; headers != null && i < headers.length; i++) {\n    writeString(headers[i]);\n    out.write(CRLF);\n  }\n  out.write(CRLF);\n}"}
{"ids": "59903", "raw_code": "public EmbeddedMetaService() throws IOException, ExecutionException {\n  this(System.getenv(JOLIE_HOME_ENV));\n}"}
{"ids": "38543", "raw_code": "public int showDialog(){\n  m_Result=CANCEL_OPTION;\n  int[] origSelected=m_List.getSelectedIndices();\n  setVisible(true);\n  if (m_Result == CANCEL_OPTION) {\n    m_List.setSelectedIndices(origSelected);\n  }\n  return m_Result;\n}"}
{"ids": "68552", "raw_code": "public final void addAlarmValues(final List<AlarmValueImpl> alarmValues){\n  if (alarmValues != null) {\n    for (    AlarmValueImpl alarmValue : alarmValues) {\n      if (alarmValue != null) {\n        addAlarmValue(alarmValue);\n      }\n    }\n  }\n}"}
{"ids": "66167", "raw_code": "public String product(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){\n  Integer M_Product_ID=(Integer)value;\n  if (M_Product_ID == null || M_Product_ID.intValue() == 0)   return \"\";\n  if (Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,\"M_Product_ID\") == M_Product_ID.intValue() && Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,\"M_AttributeSetInstance_ID\") != 0)   mTab.setValue(\"M_AttributeSetInstance_ID\",Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,\"M_AttributeSetInstance_ID\"));\n else   mTab.setValue(\"M_AttributeSetInstance_ID\",null);\n  checkQtyAvailable(ctx,mTab,WindowNo,M_Product_ID,null);\n  return \"\";\n}"}
{"ids": "22759", "raw_code": "protected void processpacket(SimEvent ev){\n  CloudSim.cancelAll(getId(),new PredicateType(CloudSimTags.Network_Event_UP));\n  schedule(getId(),switching_delay,CloudSimTags.Network_Event_UP);\n  pktlist.add((NetworkPacket)ev.getData());\n}"}
{"ids": "70865", "raw_code": "public void addChild(Controller controller){\n  if (children == null)   children=new ArrayList<Controller>();\n  children.add(controller);\n  controller.parent=this;\n}"}
{"ids": "74491", "raw_code": "protected boolean checkTurnoutsInSection(Section s,int seqNum,Section nextSection,ActiveTrain at,LayoutEditor le,Section prevSection){\n  return turnoutUtil(s,seqNum,nextSection,at,le,false,false,prevSection);\n}"}
{"ids": "7668", "raw_code": "private Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor,Rectangle2D bar,PlotOrientation orientation){\n  Point2D result=null;\n  double offset=getItemLabelAnchorOffset();\n  double x0=bar.getX() - offset;\n  double x1=bar.getX();\n  double x2=bar.getX() + offset;\n  double x3=bar.getCenterX();\n  double x4=bar.getMaxX() - offset;\n  double x5=bar.getMaxX();\n  double x6=bar.getMaxX() + offset;\n  double y0=bar.getMaxY() + offset;\n  double y1=bar.getMaxY();\n  double y2=bar.getMaxY() - offset;\n  double y3=bar.getCenterY();\n  double y4=bar.getMinY() + offset;\n  double y5=bar.getMinY();\n  double y6=bar.getMinY() - offset;\n  if (anchor == ItemLabelAnchor.CENTER) {\n    result=new Point2D.Double(x3,y3);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE1) {\n    result=new Point2D.Double(x4,y4);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE2) {\n    result=new Point2D.Double(x4,y4);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE3) {\n    result=new Point2D.Double(x4,y3);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE4) {\n    result=new Point2D.Double(x4,y2);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE5) {\n    result=new Point2D.Double(x4,y2);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE6) {\n    result=new Point2D.Double(x3,y2);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE7) {\n    result=new Point2D.Double(x2,y2);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE8) {\n    result=new Point2D.Double(x2,y2);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE9) {\n    result=new Point2D.Double(x2,y3);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE10) {\n    result=new Point2D.Double(x2,y4);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE11) {\n    result=new Point2D.Double(x2,y4);\n  }\n else   if (anchor == ItemLabelAnchor.INSIDE12) {\n    result=new Point2D.Double(x3,y4);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE1) {\n    result=new Point2D.Double(x5,y6);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE2) {\n    result=new Point2D.Double(x6,y5);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE3) {\n    result=new Point2D.Double(x6,y3);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE4) {\n    result=new Point2D.Double(x6,y1);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE5) {\n    result=new Point2D.Double(x5,y0);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE6) {\n    result=new Point2D.Double(x3,y0);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE7) {\n    result=new Point2D.Double(x1,y0);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE8) {\n    result=new Point2D.Double(x0,y1);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE9) {\n    result=new Point2D.Double(x0,y3);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE10) {\n    result=new Point2D.Double(x0,y5);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE11) {\n    result=new Point2D.Double(x1,y6);\n  }\n else   if (anchor == ItemLabelAnchor.OUTSIDE12) {\n    result=new Point2D.Double(x3,y6);\n  }\n  return result;\n}"}
{"ids": "60680", "raw_code": "public static String readFully(Reader reader) throws IOException {\n  try {\n    StringWriter writer=new StringWriter();\n    char[] buffer=new char[1024];\n    int count;\n    while ((count=reader.read(buffer)) != -1) {\n      writer.write(buffer,0,count);\n    }\n    return writer.toString();\n  }\n  finally {\n    reader.close();\n  }\n}"}
{"ids": "39358", "raw_code": "protected String instanceToMatlab(Instance inst){\n  StringBuffer result;\n  int i;\n  result=new StringBuffer();\n  for (i=0; i < inst.numAttributes(); i++) {\n    if (i > 0) {\n      result.append((m_UseTabs ? \"\\t\" : \" \"));\n    }\n    result.append(m_Format.format(inst.value(i)));\n  }\n  return result.toString();\n}"}
{"ids": "43085", "raw_code": "private static double distance(Problem problem,Solution a,Solution b,double power){\n  double distance=0.0;\n  for (int i=0; i < problem.getNumberOfObjectives(); i++) {\n    distance+=Math.pow(Math.abs(a.getObjective(i) - b.getObjective(i)),power);\n  }\n  return Math.pow(distance,1.0 / power);\n}"}
{"ids": "9044", "raw_code": "private List<TokenType> extractStringLiteralDelimitingTokens(String[] tokens){\n  List<TokenType> delimitingTokens=new ArrayList<TokenType>();\n  for (  String token : tokens) {\n    String cleanToken=cleanToken(token);\n    boolean handled=false;\n    if (alternateQuote == null) {\n      String alternateQuoteFromToken=extractAlternateOpenQuote(cleanToken);\n      if (alternateQuoteFromToken != null) {\n        String closeQuote=computeAlternateCloseQuote(alternateQuoteFromToken);\n        if (cleanToken.length() >= (alternateQuoteFromToken.length() + closeQuote.length()) && cleanToken.startsWith(alternateQuoteFromToken) && cleanToken.endsWith(closeQuote)) {\n          continue;\n        }\n        alternateQuote=closeQuote;\n        delimitingTokens.add(TokenType.ALTERNATE_QUOTE);\n        continue;\n      }\n    }\n    if ((alternateQuote != null) && cleanToken.endsWith(alternateQuote)) {\n      alternateQuote=null;\n      delimitingTokens.add(TokenType.ALTERNATE_QUOTE);\n      continue;\n    }\n    if ((cleanToken.length() >= 2) && cleanToken.startsWith(\"'\") && cleanToken.endsWith(\"'\")) {\n      continue;\n    }\n    if ((cleanToken.length() >= 4) && cleanToken.startsWith(\"/*\") && cleanToken.endsWith(\"*/\")) {\n      continue;\n    }\n    if (isSingleLineComment(cleanToken)) {\n      delimitingTokens.add(TokenType.SINGLE_LINE_COMMENT);\n      handled=true;\n    }\n    if (cleanToken.startsWith(\"/*\")) {\n      delimitingTokens.add(TokenType.MULTI_LINE_COMMENT);\n      handled=true;\n    }\n else     if (cleanToken.startsWith(\"'\")) {\n      delimitingTokens.add(TokenType.QUOTE);\n      handled=true;\n    }\n    if (!cleanToken.startsWith(\"/*\") && cleanToken.endsWith(\"*/\")) {\n      delimitingTokens.add(TokenType.MULTI_LINE_COMMENT);\n      handled=true;\n    }\n else     if (!cleanToken.startsWith(\"'\") && cleanToken.endsWith(\"'\")) {\n      delimitingTokens.add(TokenType.QUOTE);\n      handled=true;\n    }\n    if (!handled) {\n      delimitingTokens.add(TokenType.OTHER);\n    }\n  }\n  return delimitingTokens;\n}"}
{"ids": "55474", "raw_code": "private void printRainbowUser(User user,String userName,boolean action,SpecialColor type,String id){\n  SimpleAttributeSet userStyle=new SimpleAttributeSet(styles.nick());\n  userStyle.addAttribute(Attribute.IS_USER_MESSAGE,true);\n  userStyle.addAttribute(Attribute.USER,user);\n  if (id != null) {\n    userStyle.addAttribute(Attribute.ID,id);\n  }\n  int length=userName.length();\n  if (action) {\n    print(\"* \",styles.nick());\n  }\n  for (int i=0; i < length; i++) {\n    Color c;\n    if (type == SpecialColor.RAINBOW) {\n      c=makeRainbowColor(i,length);\n    }\n else {\n      c=makeGoldColor(i,length);\n    }\n    StyleConstants.setForeground(userStyle,c);\n    print(userName.substring(i,i + 1),userStyle);\n  }\n}"}
{"ids": "74445", "raw_code": "public void notifyAddressThrottleFound(DccThrottle t){\n  if (log.isDebugEnabled()) {\n    log.debug(\"Throttle found\");\n  }\n  mThrottle=t;\n  setEnabled(true);\n  mThrottle.addPropertyChangeListener(this);\n  setFnButtons();\n}"}
{"ids": "45931", "raw_code": "public boolean verify() throws MissingResourceFailureException, XMLSecurityException {\n  return super.verifyReferences(false);\n}"}
{"ids": "13941", "raw_code": "public OpenIdPrompt(String prompt){\n  originalValue=prompt;\n  if (isEmpty(prompt)) {\n    prompts=Collections.emptySet();\n  }\n else {\n    prompts=stringToSet(prompt.toLowerCase());\n  }\n}"}
{"ids": "16607", "raw_code": "private static boolean calculateIsFailure(){\n  int randomValue=random.nextInt(100) + 1;\n  return randomValue <= ERROR_PCT;\n}"}
{"ids": "70751", "raw_code": "private int checkUserLink(SpannableStringBuilder out,String in,int start){\n  int pos=start + 3;\n  StringBuilder temp=new StringBuilder();\n  String targetString=in.substring(pos,Math.min(in.length(),pos + 20));\n  for (int i=0; i < targetString.length(); i++) {\n    char c=targetString.charAt(i);\n    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| c == '_') {\n      temp.append(c);\n    }\n else {\n      break;\n    }\n  }\n  String username=temp.toString();\n  if (username.length() < 3 || username.equalsIgnoreCase(\"null\")) {\n    return -1;\n  }\n  out.append(username);\n  return pos + username.length() - 1;\n}"}
{"ids": "59635", "raw_code": "public void clear(){\n  mArrayList.clear();\n}"}
{"ids": "29119", "raw_code": "public static ClassDescriptor createClassDescriptorFromResourceName(String resourceName){\n  if (!isClassResource(resourceName)) {\n    throw new IllegalArgumentException(\"Resource \" + resourceName + \" is not a class\");\n  }\n  return createClassDescriptor(resourceName.substring(0,resourceName.length() - 6));\n}"}
{"ids": "37061", "raw_code": "public static void show(final Window parent,final String content){\n  final CLogFileDialog dialog=new CLogFileDialog(parent,content);\n  GuiHelper.centerChildToParent(parent,dialog,true);\n  dialog.setVisible(true);\n}"}
{"ids": "18232", "raw_code": "protected void endNode(Node node) throws org.xml.sax.SAXException {\nswitch (node.getNodeType()) {\ncase Node.DOCUMENT_NODE:\n    break;\ncase Node.DOCUMENT_TYPE_NODE:\n  serializeDocType((DocumentType)node,false);\nbreak;\ncase Node.ELEMENT_NODE:\nserializeElement((Element)node,false);\nbreak;\ncase Node.CDATA_SECTION_NODE:\nbreak;\ncase Node.ENTITY_REFERENCE_NODE:\nserializeEntityReference((EntityReference)node,false);\nbreak;\ndefault :\n}\n}"}
{"ids": "7241", "raw_code": "public CreateWindowClause addView(String namespace,String name){\n  views.add(View.create(namespace,name));\n  return this;\n}"}
{"ids": "32797", "raw_code": "public int size(){\n  return set.size();\n}"}
{"ids": "51749", "raw_code": "public void associateConnection(Object connection) throws ResourceException {\n  if (!connectionSharing)   disassociateConnections();\n  try {\n    final FBConnection abstractConnection=(FBConnection)connection;\n    abstractConnection.setManagedConnection(this);\n    connectionHandles.add(abstractConnection);\n  }\n catch (  ClassCastException cce) {\n    throw new FBResourceException(\"invalid connection supplied to associateConnection.\",cce);\n  }\n}"}
{"ids": "45372", "raw_code": "private void save(){\n  try {\n    FileUtils.write(new File(jarName + \"-Scan.html\"),text);\n  }\n catch (  IOException e) {\n    JOptionPane.showMessageDialog(null,e.getMessage(),\"Error saving file!\",JOptionPane.ERROR_MESSAGE);\n  }\n}"}
{"ids": "8930", "raw_code": "private static void assertNotEmpty(String message,String string){\n  assertNotNull(message,string);\n  assertFalse(message,string.equals(\"\"));\n}"}
{"ids": "24217", "raw_code": "private void generateEntityConfig(ManagedEntityConfig config) throws SAXException {\n  String host=config.getHost();\n  if (host != null) {\n    handler.startElement(\"\",HOST,HOST,EMPTY);\n    handler.characters(host.toCharArray(),0,host.length());\n    handler.endElement(\"\",HOST,HOST);\n  }\n  String remoteCommand=config.getRemoteCommand();\n  if (remoteCommand != null) {\n    handler.startElement(\"\",REMOTE_COMMAND,REMOTE_COMMAND,EMPTY);\n    handler.characters(remoteCommand.toCharArray(),0,remoteCommand.length());\n    handler.endElement(\"\",REMOTE_COMMAND,REMOTE_COMMAND);\n  }\n  String workingDirectory=config.getWorkingDirectory();\n  if (workingDirectory != null) {\n    handler.startElement(\"\",WORKING_DIRECTORY,WORKING_DIRECTORY,EMPTY);\n    handler.characters(workingDirectory.toCharArray(),0,workingDirectory.length());\n    handler.endElement(\"\",WORKING_DIRECTORY,WORKING_DIRECTORY);\n  }\n  String productDirectory=config.getProductDirectory();\n  if (productDirectory != null) {\n    handler.startElement(\"\",PRODUCT_DIRECTORY,PRODUCT_DIRECTORY,EMPTY);\n    handler.characters(productDirectory.toCharArray(),0,productDirectory.length());\n    handler.endElement(\"\",PRODUCT_DIRECTORY,PRODUCT_DIRECTORY);\n  }\n}"}
{"ids": "20732", "raw_code": "public void hiliteLabel(Node v,NodeData data){\n  NodeView nv=viewer.getNV(v);\n  if (nv.getLocation() == null)   return;\n  Point apt=nv.getLabelPosition(viewer.trans);\n  if (apt == null)   return;\n  gc.setColor(ProgramProperties.SELECTION_COLOR_ADDITIONAL_TEXT);\n  if (!nv.getLabelVisible() && nv.getLabel() != null) {\n    gc.setFont(nv.getFont());\n    gc.drawString(nv.getLabel(),apt.x,apt.y);\n  }\n  if (data.getSummarized().length > 1 || (data.getSummarized().length == 1 && data.getSummarized()[0] > 0)) {\n    gc.setFont(selectionFont);\n    StringBuilder buf=new StringBuilder();\n    if (data.getCountAssigned() > 0) {\n      buf.append(\"Ass=\");\n      for (      int value : data.getAssigned()) {\n        buf.append(String.format(\"%,d  \",value));\n      }\n      gc.drawString(buf.toString(),apt.x,apt.y+=14);\n    }\n    buf=new StringBuilder();\n    buf.append(\"Sum=\");\n    for (    int value : data.getSummarized()) {\n      buf.append(String.format(\"%,d  \",value));\n    }\n    gc.drawString(buf.toString(),apt.x,apt.y+=12);\n  }\n  if (data.getUpPValue() != -1) {\n    gc.drawString(\"UPv=\" + (float)data.getUpPValue(),apt.x,apt.y+=12);\n  }\n  if (data.getDownPValue() != -1) {\n    gc.drawString(\"DPv=\" + (float)data.getDownPValue(),apt.x,apt.y+=12);\n  }\n}"}
{"ids": "44447", "raw_code": "public void appendLine(CharSequence line){\n  lines.add(line);\n}"}
{"ids": "20596", "raw_code": "public void flagActionItems(){\n  if (!mIsActionItemsStale) {\n    return;\n  }\n  boolean flagged=false;\n  for (  WeakReference<MenuPresenter> ref : mPresenters) {\n    final MenuPresenter presenter=ref.get();\n    if (presenter == null) {\n      mPresenters.remove(ref);\n    }\n else {\n      flagged|=presenter.flagActionItems();\n    }\n  }\n  if (flagged) {\n    mActionItems.clear();\n    mNonActionItems.clear();\n    ArrayList<MenuItemImpl> visibleItems=getVisibleItems();\n    final int itemsSize=visibleItems.size();\n    for (int i=0; i < itemsSize; i++) {\n      MenuItemImpl item=visibleItems.get(i);\n      if (item.isActionButton()) {\n        mActionItems.add(item);\n      }\n else {\n        mNonActionItems.add(item);\n      }\n    }\n  }\n else {\n    mActionItems.clear();\n    mNonActionItems.clear();\n    mNonActionItems.addAll(getVisibleItems());\n  }\n  mIsActionItemsStale=false;\n}"}
{"ids": "36068", "raw_code": "public static void registerNewAggregationFunction(String name,Class<? extends AggregationFunction> clazz,AggregationFunctionMetaDataProvider metaDataProvider){\n  AGGREATION_FUNCTIONS.put(name,clazz);\n  AGGREGATION_FUNCTIONS_META_DATA_PROVIDER.put(name,metaDataProvider);\n}"}
{"ids": "11952", "raw_code": "private byte[] buildFileAuthTag() throws FileEncryptionException {\n  SecretKey key=backEncRandomAccessFile.shareKey;\n  if (key == null || key.getEncoded().length == 0) {\n    throw new FileEncryptionException(\"Invalid file encryption key in encrypting random access file!\");\n  }\n else {\n    authTagHMac.reset();\n    KeyParameter keyParameter=new KeyParameter(key.getEncoded());\n    authTagHMac.init(keyParameter);\n  }\n  if (atagList.size() == 0) {\n    throw new FileEncryptionException(\"No chunk authentication tags have been set yet!\");\n  }\n else {\n    for (int i=0; i < atagList.size(); i++) {\n      byte[] curChunkTag=atagList.get(i);\n      if ((curChunkTag == null) || (curChunkTag.length != CHUNK_AUTH_TAG_LENGTH)) {\n        throw new FileEncryptionException(\"Invalid chunk authentication tag in auth tag table at offset: \" + i);\n      }\n else {\n        authTagHMac.update(curChunkTag,0,CHUNK_AUTH_TAG_LENGTH);\n      }\n    }\n    byte[] tmp=new byte[AUTH_TAG_SIZE];\n    authTagHMac.doFinal(tmp,0);\n    return tmp;\n  }\n}"}
{"ids": "47295", "raw_code": "public int hashCode(){\n  return name.hashCode();\n}"}
{"ids": "69086", "raw_code": "public void updateData(MapElement mapElement){\n  nameLabel.setText(mapElement.getName());\n  pinnedCheckBox.setSelected(mapElement.isPinned());\n}"}
{"ids": "15996", "raw_code": "public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {\n  try {\n    int resultLen=0;\n    if (outOff + bufOff > out.length) {\n      throw new OutputLengthException(\"output buffer too short for doFinal()\");\n    }\n    if (bufOff != 0) {\n      if (!partialBlockOkay) {\n        throw new DataLengthException(\"data not block size aligned\");\n      }\n      cipher.processBlock(buf,0,buf,0);\n      resultLen=bufOff;\n      bufOff=0;\n      System.arraycopy(buf,0,out,outOff,resultLen);\n    }\n    return resultLen;\n  }\n  finally {\n    reset();\n  }\n}"}
{"ids": "82300", "raw_code": "public PriorityQueue(int initialCapacity,Comparator<? super E> comparator){\n  if (initialCapacity < 1) {\n    throw new IllegalArgumentException();\n  }\n  elements=newElementArray(initialCapacity);\n  this.comparator=comparator;\n}"}
{"ids": "83736", "raw_code": "public void readData(DataInput input) throws IOException {\n  readReference=input.readUnsignedShort();\n  readCount=input.readUnsignedShort();\n  writeReference=input.readUnsignedShort();\n  writeCount=input.readUnsignedShort();\n  int byteCount=input.readUnsignedByte();\n  if (nonWordDataHandler == null) {\n    byte buffer[]=new byte[byteCount];\n    input.readFully(buffer,0,byteCount);\n    int offset=0;\n    registers=new Register[writeCount];\n    for (int register=0; register < writeCount; register++) {\n      registers[register]=new SimpleRegister(buffer[offset],buffer[offset + 1]);\n      offset+=2;\n    }\n  }\n else {\n    nonWordDataHandler.readData(input,writeReference,writeCount);\n  }\n}"}
{"ids": "2093", "raw_code": "private boolean isTouchInsideList(MotionEvent ev){\n  float x=ev.getX() - mListView.getX();\n  float y=ev.getY() - mListView.getY();\n  if (x < 0 || x > mListView.getWidth() || y < 0 || y > mListView.getHeight()) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "37475", "raw_code": "public static final void centerChildToParent(final Component parent,final Component child,final boolean bStayOnScreen){\n  int x=(parent.getX() + (parent.getWidth() / 2)) - (child.getWidth() / 2);\n  int y=(parent.getY() + (parent.getHeight() / 2)) - (child.getHeight() / 2);\n  if (bStayOnScreen) {\n    final Toolkit tk=Toolkit.getDefaultToolkit();\n    final Dimension ss=new Dimension(tk.getScreenSize());\n    if ((x + child.getWidth()) > ss.getWidth()) {\n      x=(int)(ss.getWidth() - child.getWidth());\n    }\n    if ((y + child.getHeight()) > ss.getHeight()) {\n      y=(int)(ss.getHeight() - child.getHeight());\n    }\n    if (x < 0) {\n      x=0;\n    }\n    if (y < 0) {\n      y=0;\n    }\n  }\n  child.setLocation(x,y);\n}"}
{"ids": "36652", "raw_code": "public boolean isConnecting(){\n  return start != null && preview != null && preview.isVisible();\n}"}
{"ids": "39304", "raw_code": "public ProtectedProperties(Properties props){\n  Enumeration<?> propEnum=props.propertyNames();\n  while (propEnum.hasMoreElements()) {\n    String propName=(String)propEnum.nextElement();\n    String propValue=props.getProperty(propName);\n    super.setProperty(propName,propValue);\n  }\n  closed=true;\n}"}
{"ids": "29082", "raw_code": "public boolean isEmpty(){\n  return itemList.isEmpty();\n}"}
{"ids": "62312", "raw_code": "private static void fixNumericByteOrder(byte[] bytes){\n  for (int i=0; i < bytes.length; i+=4) {\n    ByteUtil.swap4Bytes(bytes,i);\n  }\n}"}
{"ids": "59883", "raw_code": "public synchronized boolean hasScope(){\n  return !scopeStack.isEmpty();\n}"}
{"ids": "21400", "raw_code": "private boolean checkAttributeChanged(String existing,String current){\n  if (existing == null && current == null) {\n    return false;\n  }\n  if ((existing == null) ^ (current == null)) {\n    return true;\n  }\n  return (!existing.equalsIgnoreCase(current));\n}"}
{"ids": "32263", "raw_code": "public boolean isEmpty(){\n  return count() == 0;\n}"}
{"ids": "75683", "raw_code": "@Override public void addTableModelListener(TableModelListener l){\n  m_Listeners.add(l);\n}"}
{"ids": "49026", "raw_code": "private static URL[] pathToURLs(String path) throws MalformedURLException {\nsynchronized (pathToURLsCache) {\n    Object[] v=pathToURLsCache.get(path);\n    if (v != null) {\n      return ((URL[])v[0]);\n    }\n  }\n  StringTokenizer st=new StringTokenizer(path);\n  URL[] urls=new URL[st.countTokens()];\n  for (int i=0; st.hasMoreTokens(); i++) {\n    urls[i]=new URL(st.nextToken());\n  }\nsynchronized (pathToURLsCache) {\n    pathToURLsCache.put(path,new Object[]{urls,new SoftReference<String>(path)});\n  }\n  return urls;\n}"}
{"ids": "30874", "raw_code": "boolean performWork(TaskManager.Task who,Object param) throws JobException {\n  Integer tmp=null;\nsynchronized (tasks) {\n    tmp=(Integer)tasks.get(who);\n  }\n  if (tmp == null)   throw new UnknownTaskException();\n  int rank=tmp.intValue();\nsynchronized (attempts) {\n    attempts[rank]++;\n  }\n  Object result=doWork(who,param);\n  if (result == null)   return false;\n  try {\n    reportDone(who,result);\n  }\n catch (  UnknownTaskException e) {\n  }\ncatch (  PartialResultException e) {\n  }\ncatch (  JobException e) {\n  }\n  return true;\n}"}
{"ids": "24695", "raw_code": "public List<Order> loadAllDeepFromCursor(Cursor cursor){\n  int count=cursor.getCount();\n  List<Order> list=new ArrayList<Order>(count);\n  if (cursor.moveToFirst()) {\n    if (identityScope != null) {\n      identityScope.lock();\n      identityScope.reserveRoom(count);\n    }\n    try {\n      do {\n        list.add(loadCurrentDeep(cursor,false));\n      }\n while (cursor.moveToNext());\n    }\n  finally {\n      if (identityScope != null) {\n        identityScope.unlock();\n      }\n    }\n  }\n  return list;\n}"}
{"ids": "42586", "raw_code": "public static boolean isValidAuthType(String authType){\n  log.debug(\"isValidAuthType\");\n  if (authType != null) {\n    if (!authType.isEmpty()) {\n      if (authType.equalsIgnoreCase(LdapAuthBase.LDAP_AUTH_TYPE_SIMPLE))       return true;\n      if (authType.equalsIgnoreCase(LdapAuthBase.LDAP_AUTH_TYPE_NONE))       return true;\n    }\n  }\n  return false;\n}"}
{"ids": "78596", "raw_code": "public int size(){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    return count;\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "17528", "raw_code": "public AnnotationMember(String name,Object val,Class type,Method m){\n  this(name,val);\n  definingMethod=m;\n  if (type == int.class) {\n    elementType=Integer.class;\n  }\n else   if (type == boolean.class) {\n    elementType=Boolean.class;\n  }\n else   if (type == char.class) {\n    elementType=Character.class;\n  }\n else   if (type == float.class) {\n    elementType=Float.class;\n  }\n else   if (type == double.class) {\n    elementType=Double.class;\n  }\n else   if (type == long.class) {\n    elementType=Long.class;\n  }\n else   if (type == short.class) {\n    elementType=Short.class;\n  }\n else   if (type == byte.class) {\n    elementType=Byte.class;\n  }\n else {\n    elementType=type;\n  }\n}"}
{"ids": "30135", "raw_code": "public void unregisterPreferenceChangeListener(PreferenceChangeListener preferenceChangeListener){\n  mListeners.remove(preferenceChangeListener);\n}"}
{"ids": "44076", "raw_code": "public static String join(String separator,List<?> elements){\n  if (elements == null || elements.size() == 0) {\n    return \"\";\n  }\n  StringBuffer sb=new StringBuffer(elements.size() * 3);\n  int i=0;\n  for (  Object elem : elements) {\n    if (i++ > 0) {\n      sb.append(separator);\n    }\n    sb.append(format(elem));\n  }\n  return sb.toString();\n}"}
{"ids": "54204", "raw_code": "public boolean removeTrace(final Trace trace){\n  boolean result=traceList.remove(trace);\n  if (result) {\n    remove(trace);\n    revalidate();\n  }\n  return result;\n}"}
{"ids": "68733", "raw_code": "private void updateRandomValues(){\n  for (int i=0; i < mBlockNumber; i++) {\n    for (int j=0; j < DEFAULT_NUMBER_RANDOM_VALUES; j++) {\n      mBlockValues[i][j]=mRandom.nextFloat();\n      if (mBlockValues[i][j] < 0.1) {\n        mBlockValues[i][j]=0.1f;\n      }\n    }\n  }\n}"}
{"ids": "61064", "raw_code": "protected ASN1Set(ASN1Encodable obj){\n  set.addElement(obj);\n}"}
{"ids": "44922", "raw_code": "static private String BYTE_Min_Minus(){\n  long tempValue=Byte.MIN_VALUE - 1;\n  return String.valueOf(tempValue);\n}"}
{"ids": "47207", "raw_code": "public DoubleAccumulator(DoubleBinaryOperator accumulatorFunction,double identity){\n  this.function=accumulatorFunction;\n  base=this.identity=Double.doubleToRawLongBits(identity);\n}"}
{"ids": "31393", "raw_code": "public static void bitmapToMat(Bitmap bmp,Mat mat,boolean unPremultiplyAlpha){\n  if (bmp == null)   throw new java.lang.IllegalArgumentException(\"bmp == null\");\n  if (mat == null)   throw new java.lang.IllegalArgumentException(\"mat == null\");\n  nBitmapToMat2(bmp,mat.nativeObj,unPremultiplyAlpha);\n}"}
{"ids": "33711", "raw_code": "public static void sendMail(Context mContext,String mailID){\n  Uri uri=Uri.parse(\"mailto:\" + mailID);\n  Intent intent=new Intent(Intent.ACTION_SENDTO,uri);\n  mContext.startActivity(intent);\n}"}
{"ids": "33271", "raw_code": "public void push(@NotNull StatusNotification notification){\n  stack.push(notification);\n}"}
{"ids": "51082", "raw_code": "public void onPaintActions(ViewTransform transform,Graphics2D g){\n  if (!mIsSelected) {\n    return;\n  }\n  if (mColorSet == null) {\n    return;\n  }\n  if (mWidget.getVisibility() == ConstraintWidget.GONE) {\n    return;\n  }\n  if (!mShowResizeHandles) {\n    return;\n  }\n  if (!mShowActions) {\n    return;\n  }\n  if (mWidgetActions.size() == 0) {\n    return;\n  }\n  int l=transform.getSwingFX(mWidget.getDrawX());\n  int t=transform.getSwingFY(mWidget.getDrawY());\n  int h=transform.getSwingDimension(mWidget.getHeight());\n  int x=l;\n  int y=t + h + ConnectionDraw.CONNECTION_ANCHOR_SIZE+ 4;\n  g.setColor(mColorSet.getSelectedFrames());\n  for (  WidgetAction action : mWidgetActions) {\n    action.update();\n    if (!action.isVisible()) {\n      continue;\n    }\n    action.onPaint(transform,g,x,y);\n    x+=ACTION_SIZE + ConnectionDraw.CONNECTION_ANCHOR_SIZE;\n  }\n}"}
{"ids": "8552", "raw_code": "@Override public Lookup createGlobalContext(){\n  if (proxyLookup == null) {\n    logger.config(\"Creating a proxy for Utilities.actionsGlobalContext()\");\n    projectLookup=new AbstractLookup(content);\n    proxyLookup=new ProxyLookup(globalContextLookup,projectLookup);\n  }\n  return proxyLookup;\n}"}
{"ids": "41621", "raw_code": "public void write(byte[] bytes) throws IOException {\n  flushBits();\n  if (bytes != null && bytes.length > 0) {\n    out.write(bytes);\n    bytesWritten+=bytes.length;\n  }\n}"}
{"ids": "6162", "raw_code": "public static MutableList<String> chunk(String string,int size){\n  if (size <= 0) {\n    throw new IllegalArgumentException(\"Size for groups must be positive but was: \" + size);\n  }\n  int length=string.length();\n  if (length == 0) {\n    return FastList.newList();\n  }\n  MutableList<String> result=FastList.newList((length + size - 1) / size);\n  int startOffset=0;\n  while (startOffset < length) {\n    result.add(string.substring(startOffset,Math.min(startOffset + size,length)));\n    startOffset+=size;\n  }\n  return result;\n}"}
{"ids": "40909", "raw_code": "public void removeIm(ImEntity im){\n  ims.remove(im);\n}"}
{"ids": "39741", "raw_code": "public LanguageSetting(Option opt){\n  elem=null;\n  name=opt.getLanguage();\n  String[] suffixArray=opt.getSuffixes();\n  StringBuffer strbuf=new StringBuffer();\n  for (int i=0; i < suffixArray.length; i++) {\n    strbuf.append(suffixArray[i]);\n    if (i != suffixArray.length - 1)     strbuf.append(',');\n  }\n  this.suffixes=strbuf.toString();\n  minMatchLen=opt.getMinimumMatchLength();\n  clusterType=opt.getClustertype();\n  readSubdirs=opt.isReadSubdirs();\n  storeMatches=opt.getStoreMatches();\n}"}
{"ids": "83239", "raw_code": "private double calcUtil4Performing(final double typDuration,final double actualDuration){\n  return 10 * marginalUtilPerformingSec + marginalUtilPerformingSec * typDuration * Math.log(actualDuration / typDuration);\n}"}
{"ids": "81972", "raw_code": "public void clearAllCache(){\n  clearMemoryCache();\n  clearStorageCache();\n}"}
{"ids": "38261", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(3);\n  newVector.addElement(new Option(\"\\tSets the attribute index\\n\" + \"\\t(default: last)\",\"C\",1,\"-C <col>\"));\n  newVector.addElement(new Option(\"\\tSets the label of the newly merged classes\\n\" + \"\\t(default: 'merged')\",\"L\",1,\"-L <label>\"));\n  newVector.addElement(new Option(\"\\tSets the merge range. 'first and 'last' are accepted as well.'\\n\" + \"\\tE.g.: first-5,7,9,20-last\\n\" + \"\\t(default: 1,2)\",\"R\",1,\"-R <range>\"));\n  return newVector.elements();\n}"}
{"ids": "45200", "raw_code": "public void addNotify(){\n  super.addNotify();\n  if (textArea != null) {\n    l.install(textArea);\n  }\n  updateCellWidths();\n  updateCellHeights();\n}"}
{"ids": "63014", "raw_code": "@Description(summary=\"Build a snapshot H2 jar and upload to local Maven 2 repo.\") public void mavenInstallLocal(){\n  jarMVStore();\n  String pom=new String(readFile(new File(\"src/installer/pom-mvstore-template.xml\")));\n  pom=replaceAll(pom,\"@version@\",\"1.0-SNAPSHOT\");\n  writeFile(new File(\"bin/pom.xml\"),pom.getBytes());\n  execScript(\"mvn\",args(\"install:install-file\",\"-Dversion=1.0-SNAPSHOT\",\"-Dfile=bin/h2-mvstore\" + getJarSuffix(),\"-Dpackaging=jar\",\"-DpomFile=bin/pom.xml\",\"-DartifactId=h2-mvstore\",\"-DgroupId=com.h2database\"));\n  jar();\n  pom=new String(readFile(new File(\"src/installer/pom-template.xml\")));\n  pom=replaceAll(pom,\"@version@\",\"1.0-SNAPSHOT\");\n  writeFile(new File(\"bin/pom.xml\"),pom.getBytes());\n  execScript(\"mvn\",args(\"install:install-file\",\"-Dversion=1.0-SNAPSHOT\",\"-Dfile=bin/h2\" + getJarSuffix(),\"-Dpackaging=jar\",\"-DpomFile=bin/pom.xml\",\"-DartifactId=h2\",\"-DgroupId=com.h2database\"));\n}"}
{"ids": "33326", "raw_code": "public static boolean isDtoGetter(Method method){\n  if (method.isAnnotationPresent(DelegateTo.class)) {\n    return false;\n  }\n  if (method.getParameterTypes().length > 0) {\n    return false;\n  }\n  String methodName=method.getName();\n  return methodName.startsWith(\"get\") || (methodName.startsWith(\"is\") && ((method.getReturnType() == Boolean.class || method.getReturnType() == boolean.class)));\n}"}
{"ids": "41746", "raw_code": "protected List<VideoDTO> extractVideosFromCursor(Cursor cursor,int offset,int limit){\n  List<VideoDTO> videos=new ArrayList<>();\n  int count=0;\n  int begin=offset > 0 ? offset : 0;\n  if (cursor.moveToPosition(begin)) {\n    do {\n      VideoDTO video=extractOneVideoFromCursor(cursor);\n      videos.add(video);\n      count++;\n      if (limit > 0 && count > limit) {\n        break;\n      }\n    }\n while (cursor.moveToNext());\n  }\n  cursor.close();\n  return videos;\n}"}
{"ids": "71181", "raw_code": "private static void computeNextCCWEdges(Node node,long label){\n  DirectedEdgeStar deStar=node.getOutEdges();\n  PolygonizeDirectedEdge firstOutDE=null;\n  PolygonizeDirectedEdge prevInDE=null;\n  List edges=deStar.getEdges();\n  for (int i=edges.size() - 1; i >= 0; i--) {\n    PolygonizeDirectedEdge de=(PolygonizeDirectedEdge)edges.get(i);\n    PolygonizeDirectedEdge sym=(PolygonizeDirectedEdge)de.getSym();\n    PolygonizeDirectedEdge outDE=null;\n    if (de.getLabel() == label)     outDE=de;\n    PolygonizeDirectedEdge inDE=null;\n    if (sym.getLabel() == label)     inDE=sym;\n    if (outDE == null && inDE == null)     continue;\n    if (inDE != null) {\n      prevInDE=inDE;\n    }\n    if (outDE != null) {\n      if (prevInDE != null) {\n        prevInDE.setNext(outDE);\n        prevInDE=null;\n      }\n      if (firstOutDE == null)       firstOutDE=outDE;\n    }\n  }\n  if (prevInDE != null) {\n    Assert.isTrue(firstOutDE != null);\n    prevInDE.setNext(firstOutDE);\n  }\n}"}
{"ids": "25804", "raw_code": "@Override public boolean equals(Object other){\n  if (other instanceof IntArrayWrapper) {\n    return Arrays.equals(data,((IntArrayWrapper)other).data);\n  }\n  return false;\n}"}
{"ids": "1429", "raw_code": "public static DateTime toDateSimple(String str,TimeZone timeZone) throws PageException {\n  DateTime dt=toDateSimple(str,CONVERTING_TYPE_OFFSET,true,timeZone,null);\n  if (dt == null)   throw new ExpressionException(\"can't cast [\" + str + \"] to date value\");\n  return dt;\n}"}
{"ids": "25301", "raw_code": "public boolean contains(Song s){\n  return mSongs.contains(s);\n}"}
{"ids": "5390", "raw_code": "private float clampMag(float value,float absMin,float absMax){\n  final float absValue=Math.abs(value);\n  if (absValue < absMin)   return 0;\n  if (absValue > absMax)   return value > 0 ? absMax : -absMax;\n  return value;\n}"}
{"ids": "5022", "raw_code": "private boolean zzRefill() throws java.io.IOException {\n  if (zzStartRead > 0) {\n    zzEndRead+=zzFinalHighSurrogate;\n    zzFinalHighSurrogate=0;\n    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);\n    zzEndRead-=zzStartRead;\n    zzCurrentPos-=zzStartRead;\n    zzMarkedPos-=zzStartRead;\n    zzStartRead=0;\n  }\n  if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {\n    char newBuffer[]=new char[zzBuffer.length * 2];\n    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);\n    zzBuffer=newBuffer;\n    zzEndRead+=zzFinalHighSurrogate;\n    zzFinalHighSurrogate=0;\n  }\n  int requested=zzBuffer.length - zzEndRead;\n  int numRead=zzReader.read(zzBuffer,zzEndRead,requested);\n  if (numRead == 0) {\n    throw new java.io.IOException(\"Reader returned 0 characters. See JFlex examples for workaround.\");\n  }\n  if (numRead > 0) {\n    zzEndRead+=numRead;\n    if (numRead == requested) {\n      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {\n        --zzEndRead;\n        zzFinalHighSurrogate=1;\n      }\n    }\n    return false;\n  }\n  return true;\n}"}
{"ids": "17955", "raw_code": "public int addPadding(byte[] in,int inOff){\n  byte code=(byte)(in.length - inOff);\n  while (inOff < in.length - 1) {\n    if (random == null) {\n      in[inOff]=0;\n    }\n else {\n      in[inOff]=(byte)random.nextInt();\n    }\n    inOff++;\n  }\n  in[inOff]=code;\n  return code;\n}"}
{"ids": "26973", "raw_code": "public static Long makeLong(String s){\n  if (WWUtil.isEmpty(s)) {\n    return null;\n  }\n  try {\n    return Long.valueOf(s);\n  }\n catch (  NumberFormatException e) {\n    return null;\n  }\n}"}
{"ids": "22111", "raw_code": "private void verifyBlockSnapshotMigration() throws Exception {\n  log.info(\"Verifying BlockSnapshot migration.\");\n  Iterator<BlockSnapshot> blockSnapshotItr=_dbClient.queryIterativeObjects(BlockSnapshot.class,blockSnapshotURIs);\n  List<BlockObject> blockObjects=new ArrayList<BlockObject>();\n  while (blockSnapshotItr.hasNext()) {\n    blockObjects.add(blockSnapshotItr.next());\n  }\n  verifyBlockObjects(blockObjects);\n}"}
{"ids": "29019", "raw_code": "public static String edgeTypeToString(@Type int edgeType){\nswitch (edgeType) {\ncase FALL_THROUGH_EDGE:\n    return \"FALL_THROUGH\";\ncase IFCMP_EDGE:\n  return \"IFCMP\";\ncase SWITCH_EDGE:\nreturn \"SWITCH\";\ncase SWITCH_DEFAULT_EDGE:\nreturn \"SWITCH_DEFAULT\";\ncase JSR_EDGE:\nreturn \"JSR\";\ncase RET_EDGE:\nreturn \"RET\";\ncase GOTO_EDGE:\nreturn \"GOTO\";\ncase RETURN_EDGE:\nreturn \"RETURN\";\ncase UNHANDLED_EXCEPTION_EDGE:\nreturn \"UNHANDLED_EXCEPTION\";\ncase HANDLED_EXCEPTION_EDGE:\nreturn \"HANDLED_EXCEPTION\";\ncase START_EDGE:\nreturn \"START\";\ncase BACKEDGE_TARGET_EDGE:\nreturn \"BACKEDGE_TARGET_EDGE\";\ncase BACKEDGE_SOURCE_EDGE:\nreturn \"BACKEDGE_SOURCE_EDGE\";\ncase EXIT_EDGE:\nreturn \"EXIT_EDGE\";\n}\nthrow new IllegalStateException(\"unknown edge type: \" + edgeType);\n}"}
{"ids": "9086", "raw_code": "private int insertUnassignedGroup() throws SQLException {\n  PreparedStatement groupStatement;\n  final int ruleid=insertUnassignedRule();\n  final int evaluationOrder=getNumOfGroups() + 1;\n  String unassignedGroupSqlStatement=\"INSERT INTO \" + GROUPS_TABLE + \" (GROUP_NAME, \"+ \"GROUP_TYPE, DATA_TYPE, RULE_INTERNAL_ID, EVALUATION_ORDER) \"+ \"VALUES ('%s', %d, %d, %d, %d)\";\n  unassignedGroupSqlStatement=String.format(unassignedGroupSqlStatement,UNASSIGNED_GROUP,UNASSIGNED_GROUP_TYPE,UNASSIGNED_DATA_TYPE,ruleid,evaluationOrder);\n  groupStatement=prepareStatement(unassignedGroupSqlStatement,new String[]{\"GROUP_INTERNAL_ID\"});\n  groupStatement.execute();\n  return getInternalId(groupStatement);\n}"}
{"ids": "40894", "raw_code": "public Builder deleteExtensionField(String urn,String fieldName){\n  deleteFields.add(urn + \".\" + fieldName);\n  return this;\n}"}
{"ids": "51148", "raw_code": "public void sendDirect(byte[] sqlBytes,int offset,int sqlLength,byte commandType) throws IOException, QueryException {\n  if (isClosed())   throw new IOException(\"Stream has already closed\");\n  int seqNo=0;\n  setCompressSeqNo(0);\n  if (sqlLength + (useCompression ? 5 : 1) > getMaxAllowedPacket()) {\n    throw new QueryException(\"Could not send query: query size \" + (sqlLength + (useCompression ? 5 : 1)) + \" is >= to max_allowed_packet (\"+ maxAllowedPacket+ \")\",-1,INTERRUPTED_EXCEPTION);\n  }\n  if (!isUseCompression()) {\n    if (sqlLength + 1 <= maxPacketSize) {\n      byte[] packetBuffer=new byte[sqlLength + 5];\n      packetBuffer[0]=(byte)((sqlLength + 1) & 0xff);\n      packetBuffer[1]=(byte)((sqlLength + 1) >>> 8);\n      packetBuffer[2]=(byte)((sqlLength + 1) >>> 16);\n      packetBuffer[3]=(byte)seqNo++;\n      packetBuffer[4]=commandType;\n      System.arraycopy(sqlBytes,offset,packetBuffer,5,sqlLength);\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"send packet seq:\" + seqNo + \" length:\"+ (sqlLength + 1)+ \" data:\"+ Utils.hexdump(packetBuffer,maxQuerySizeToLog,4,sqlLength + 1));\n      }\n      outputStream.write(packetBuffer);\n    }\n else {\n      byte[] packetBuffer=new byte[maxPacketSize + 4];\n      packetBuffer[0]=(byte)(maxPacketSize & 0xff);\n      packetBuffer[1]=(byte)(maxPacketSize >>> 8);\n      packetBuffer[2]=(byte)(maxPacketSize >>> 16);\n      packetBuffer[3]=(byte)seqNo++;\n      packetBuffer[4]=commandType;\n      System.arraycopy(sqlBytes,offset,packetBuffer,5,maxPacketSize - 1);\n      int lengthAlreadySend=maxPacketSize - 1;\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"send packet seq:\" + seqNo + \" length:\"+ maxPacketSize+ \" data:\"+ Utils.hexdump(packetBuffer,maxQuerySizeToLog,4,maxPacketSize));\n      }\n      outputStream.write(packetBuffer);\n      int length;\n      while ((length=sqlLength - lengthAlreadySend) > 0) {\n        if (length > maxPacketSize) {\n          packetBuffer[0]=(byte)(maxPacketSize & 0xff);\n          packetBuffer[1]=(byte)(maxPacketSize >>> 8);\n          packetBuffer[2]=(byte)(maxPacketSize >>> 16);\n          packetBuffer[3]=(byte)seqNo++;\n          System.arraycopy(sqlBytes,offset + lengthAlreadySend,packetBuffer,4,maxPacketSize);\n          if (logger.isTraceEnabled()) {\n            logger.trace(\"send packet seq:\" + seqNo + \" length:\"+ maxPacketSize+ \" data:\"+ Utils.hexdump(packetBuffer,maxQuerySizeToLog,4,maxPacketSize));\n          }\n          outputStream.write(packetBuffer);\n          lengthAlreadySend+=maxPacketSize;\n        }\n else {\n          packetBuffer[0]=(byte)(length & 0xff);\n          packetBuffer[1]=(byte)(length >>> 8);\n          packetBuffer[2]=(byte)(length >>> 16);\n          packetBuffer[3]=(byte)seqNo++;\n          System.arraycopy(sqlBytes,offset + lengthAlreadySend,packetBuffer,4,length);\n          if (logger.isTraceEnabled()) {\n            logger.trace(\"send packet seq:\" + seqNo + \" length:\"+ length+ \" data:\"+ Utils.hexdump(packetBuffer,maxQuerySizeToLog,4,length));\n          }\n          outputStream.write(packetBuffer,0,length + 4);\n          break;\n        }\n      }\n    }\n  }\n else {\n    if (sqlLength < maxPacketSize) {\n      byte[] packetBuffer=new byte[sqlLength + 5];\n      packetBuffer[0]=(byte)((sqlLength + 1) & 0xff);\n      packetBuffer[1]=(byte)((sqlLength + 1) >>> 8);\n      packetBuffer[2]=(byte)((sqlLength + 1) >>> 16);\n      packetBuffer[3]=(byte)0;\n      packetBuffer[4]=commandType;\n      System.arraycopy(sqlBytes,offset,packetBuffer,5,sqlLength);\n      compressedAndSend(sqlLength + 5,packetBuffer,true);\n    }\n else {\n      final int expectedPacketSize=sqlLength + 1 + 4 * (((sqlLength + 1) / maxPacketSize) + 1);\n      byte[] packetBuffer=new byte[expectedPacketSize];\n      packetBuffer[0]=(byte)(maxPacketSize & 0xff);\n      packetBuffer[1]=(byte)(maxPacketSize >>> 8);\n      packetBuffer[2]=(byte)(maxPacketSize >>> 16);\n      packetBuffer[3]=(byte)seqNo++;\n      packetBuffer[4]=commandType;\n      System.arraycopy(sqlBytes,offset,packetBuffer,5,maxPacketSize - 1);\n      int sqlBytesPosition=maxPacketSize - 1;\n      int positionDest=maxPacketSize + 4;\n      int length;\n      while ((length=sqlLength - sqlBytesPosition) > 0) {\n        if (length > maxPacketSize) {\n          packetBuffer[positionDest++]=(byte)(maxPacketSize & 0xff);\n          packetBuffer[positionDest++]=(byte)(maxPacketSize >>> 8);\n          packetBuffer[positionDest++]=(byte)(maxPacketSize >>> 16);\n          packetBuffer[positionDest++]=(byte)seqNo++;\n          System.arraycopy(sqlBytes,offset + sqlBytesPosition,packetBuffer,positionDest,maxPacketSize);\n          sqlBytesPosition+=maxPacketSize;\n          positionDest+=maxPacketSize;\n        }\n else {\n          packetBuffer[positionDest++]=(byte)(length & 0xff);\n          packetBuffer[positionDest++]=(byte)(length >>> 8);\n          packetBuffer[positionDest++]=(byte)(length >>> 16);\n          packetBuffer[positionDest++]=(byte)seqNo++;\n          System.arraycopy(sqlBytes,offset + sqlBytesPosition,packetBuffer,positionDest,length);\n          break;\n        }\n      }\n      compressedAndSend(expectedPacketSize,packetBuffer,true);\n    }\n  }\n}"}
{"ids": "21200", "raw_code": "@SuppressWarnings(\"unchecked\") private List<List<GroupAttribute>> searchAuthProvider(Filter queryBuilder,String[] returnAttributes,final long countLimit,AttributesMapper mapper,ValidationFailureReason[] failureReason) throws SizeLimitExceededException {\n  SearchControls groupSearchControls=new SearchControls(SearchControls.SUBTREE_SCOPE,countLimit,_searchControls.getTimeLimit(),returnAttributes,_searchControls.getReturningObjFlag(),_searchControls.getDerefLinkFlag());\n  List<List<GroupAttribute>> queryGroupResults=null;\n  queryGroupResults=safeLdapSearch(_baseDN,queryBuilder.encode(),groupSearchControls,mapper,failureReason);\n  return queryGroupResults;\n}"}
{"ids": "10959", "raw_code": "protected void export(OMGraphicList list,List<Object> masterRecord,boolean writeFiles){\n  badGraphics=0;\n  if (list == null) {\n    return;\n  }\n else   if (list instanceof EsriGraphicList) {\n    export((EsriGraphicList)list);\n    return;\n  }\n  int dbfIndex=0;\n  for (  OMGraphic dtlGraphic : list) {\n    List<Object> record=masterRecord;\n    Integer recIndex=(Integer)dtlGraphic.getAttribute(SHAPE_INDEX_ATTRIBUTE);\n    if (recIndex == null) {\n      recIndex=dbfIndex;\n    }\n    if (record == null) {\n      record=getMasterDBFRecord(recIndex);\n    }\n    dbfIndex++;\n    if (dtlGraphic instanceof OMGraphicList) {\n      if (DEBUG)       logger.fine(\"ESE: handling OMGraphicList\");\n      export((OMGraphicList)dtlGraphic,record,false);\n      continue;\n    }\n    if (dtlGraphic.getRenderType() != RENDERTYPE_LATLON) {\n      badGraphics++;\n      continue;\n    }\n    if (dtlGraphic instanceof OMAreaList) {\n      if (DEBUG) {\n        logger.fine(\"ESE: handling OMAreaList\");\n      }\n      addAreaList((OMAreaList)dtlGraphic,record);\n    }\n    if (dtlGraphic instanceof OMPoly) {\n      OMPoly omPoly=(OMPoly)dtlGraphic;\n      if (isPolygon(omPoly)) {\n        if (DEBUG)         logger.fine(\"ESE: handling OMPoly polygon\");\n        addPolygon(dtlGraphic,record);\n      }\n else {\n        if (DEBUG)         logger.fine(\"ESE: handling OMPoly line\");\n        addLine(dtlGraphic,record);\n      }\n    }\n else     if (dtlGraphic instanceof OMRect) {\n      if (DEBUG)       logger.fine(\"ESE: handling OMRect\");\n      addPolygon((OMGraphic)EsriPolygonList.convert((OMRect)dtlGraphic),record);\n    }\n else     if (dtlGraphic instanceof OMCircle) {\n      if (DEBUG)       logger.fine(\"ESE: handling OMCircle\");\n      addPolygon((OMGraphic)EsriPolygonList.convert((OMCircle)dtlGraphic,projection),record);\n    }\n else     if (dtlGraphic instanceof OMRangeRings) {\n      if (DEBUG)       logger.fine(\"ESE: handling OMRangeRings\");\n      export(EsriPolygonList.convert((OMRangeRings)dtlGraphic,projection),record,false);\n    }\n else     if (dtlGraphic instanceof OMLine) {\n      if (DEBUG)       logger.fine(\"ESE: handling OMLine\");\n      addLine((OMGraphic)EsriPolylineList.convert((OMLine)dtlGraphic),record);\n    }\n else     if (dtlGraphic instanceof OMPoint) {\n      if (DEBUG)       logger.fine(\"ESE: handling OMPoint\");\n      addPoint(dtlGraphic,record);\n    }\n  }\n  if (badGraphics > 0) {\n    DrawingToolRenderException.notifyUserOfNonLatLonGraphics(badGraphics);\n  }\n  if (!writeFiles) {\n    return;\n  }\n  boolean needConfirmation=false;\n  if (filePath == null) {\n    filePath=getFilePathFromUser();\n    if (filePath == null) {\n      return;\n    }\n    needConfirmation=true;\n  }\n  if (DEBUG)   logger.fine(\"ESE: writing files...\");\n  boolean needTypeSuffix=false;\n  if (polyList != null) {\n    eseInterfaces.add(new ESEInterface(polyList,filePath,null));\n    needTypeSuffix=true;\n  }\n  if (lineList != null) {\n    eseInterfaces.add(new ESEInterface(lineList,filePath,(needTypeSuffix ? LineSuffix : null)));\n    needTypeSuffix=true;\n  }\n  if (pointList != null) {\n    eseInterfaces.add(new ESEInterface(pointList,filePath,(needTypeSuffix ? PointSuffix : null)));\n  }\n  if (needConfirmation) {\n    showGUI();\n  }\n else {\n    writeFiles();\n  }\n}"}
{"ids": "3761", "raw_code": "public Depend(PathImpl source,long lastModified,long length){\n  _source=source;\n  _lastModified=lastModified;\n  _length=length;\n}"}
{"ids": "60313", "raw_code": "public boolean hasTaskOfTypeInProgress(@NotNull ExternalSystemTaskType type,@NotNull Project project){\n  String projectId=ExternalSystemTaskId.getProjectId(project);\n  for (  ExternalSystemTaskId id : myTasksInProgress.keySet()) {\n    if (type.equals(id.getType()) && projectId.equals(id.getIdeProjectId())) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "17055", "raw_code": "public final void removeChangeListener(ChangeListener listener){\n  listeners.remove(listener);\n}"}
{"ids": "78871", "raw_code": "public static boolean containsIgnoreCase(String str,String query){\n  if (str != null && query != null) {\n    int limit=str.length() - query.length() + 1;\n    for (int i=0; i < limit; i++) {\n      if (matchesIgnoreCase(str,query,i)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "37740", "raw_code": "public String toMatrixString() throws Exception {\n  return toMatrixString(\"=== Confusion Matrix ===\\n\");\n}"}
{"ids": "71237", "raw_code": "public QuadEdge connect(QuadEdge a,QuadEdge b){\n  QuadEdge q=QuadEdge.connect(a,b);\n  quadEdges.add(q);\n  return q;\n}"}
{"ids": "32735", "raw_code": "public Job configure(boolean isSecured,String metaStoreUris,String principal,String redisHost,int redisPort,String password,int redisDb,String inputDatabase,String inputTable,String inputFilter,String keyName,String valueName,String keyPrefix,int numReducer,boolean replace,boolean pipeline,boolean flush,int commitSize,String[] anonFields,String exportSalt) throws Exception {\n  this.isSecured=isSecured;\n  this.metaStoreUris=metaStoreUris;\n  this.principal=principal;\n  this.redisHost=redisHost;\n  this.redisPort=redisPort;\n  this.password=password;\n  this.redisDb=redisDb;\n  this.inputDatabase=inputDatabase;\n  this.inputTable=inputTable;\n  this.inputFilter=inputFilter;\n  this.keyName=keyName;\n  this.keyPrefix=keyPrefix;\n  this.valueName=valueName;\n  this.numReducer=numReducer;\n  this.replace=replace;\n  this.pipeline=pipeline;\n  this.flush=flush;\n  this.commitSize=commitSize;\n  this.anonFields=anonFields.clone();\n  this.exportSalt=exportSalt;\n  return configure();\n}"}
{"ids": "39197", "raw_code": "public static double log2(double a){\n  return Math.log(a) / log2;\n}"}
{"ids": "33564", "raw_code": "public void addSuggestions(final @NonNull SuggestionsResult result,final @NonNull String bucket,final @NonNull TokenSource source){\n  QueryToken query=result.getQueryToken();\nsynchronized (mLock) {\n    mResultMap.put(bucket,result);\n    Set<String> waitingForBuckets=mWaitingForResults.get(query);\n    if (waitingForBuckets != null) {\n      waitingForBuckets.remove(bucket);\n      if (waitingForBuckets.size() == 0) {\n        mWaitingForResults.remove(query);\n      }\n    }\n  }\n  String currentTokenString=source.getCurrentTokenString();\nsynchronized (mLock) {\n    mSuggestions.clear();\n    List<Suggestible> suggestions=mSuggestionsListBuilder.buildSuggestions(mResultMap,currentTokenString);\n    if (suggestions.size() > 0) {\n      mSuggestions.addAll(suggestions);\n      mSuggestionsVisibilityManager.displaySuggestions(true);\n    }\n else {\n      hideSuggestionsIfNecessary(result.getQueryToken(),source);\n    }\n  }\n  notifyDataSetChanged();\n}"}
{"ids": "10511", "raw_code": "public static <ET extends Enum<ET>>EnumResolver<ET> constructFor(Class<ET> enumCls,AnnotationIntrospector ai){\n  ET[] enumValues=enumCls.getEnumConstants();\n  if (enumValues == null) {\n    throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\n  }\n  HashMap<String,ET> map=new HashMap<String,ET>();\n  for (  ET e : enumValues) {\n    map.put(ai.findEnumValue(e),e);\n  }\n  return new EnumResolver<ET>(enumCls,enumValues,map);\n}"}
{"ids": "992", "raw_code": "protected void encodeLineSuffix(OutputStream aStream) throws IOException {\n  pStream.println();\n}"}
{"ids": "45182", "raw_code": "public static boolean replace(RTextArea textArea,String toFind,String replaceWith,boolean forward,boolean matchCase,boolean wholeWord,boolean regex) throws PatternSyntaxException {\n  textArea.beginAtomicEdit();\n  try {\n    if (regex) {\n      return regexReplace(textArea,toFind,replaceWith,forward,matchCase,wholeWord);\n    }\n    makeMarkAndDotEqual(textArea,forward);\n    if (find(textArea,toFind,forward,matchCase,wholeWord,false)) {\n      textArea.replaceSelection(replaceWith);\n      return true;\n    }\n  }\n  finally {\n    textArea.endAtomicEdit();\n  }\n  return false;\n}"}
{"ids": "14216", "raw_code": "public void preSingleSignOnRequest(String hostedEntityID,String idpEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest) throws SAML2Exception {\n  return;\n}"}
{"ids": "35461", "raw_code": "void submit(ProcessAndDisplayImageTask task){\n  initExecutorsIfNeed();\n  taskExecutorForCachedImages.execute(task);\n}"}
{"ids": "11226", "raw_code": "public static ImageIcon createIcon(BasicStroke stroke,int width,int height,boolean horizontalOrientation){\n  BufferedImage bigImage=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);\n  Graphics2D g=(Graphics2D)bigImage.getGraphics();\n  g.setBackground(OMColor.clear);\n  g.setPaint(OMColor.clear);\n  g.fillRect(0,0,width,height);\n  g.setPaint(Color.black);\n  g.setStroke(stroke);\n  if (horizontalOrientation) {\n    g.drawLine(0,height / 2,width,height / 2);\n  }\n else {\n    g.drawLine(width / 2,0,width / 2,height);\n  }\n  return new ImageIcon(bigImage);\n}"}
{"ids": "35332", "raw_code": "public static final <T extends EObject>List<T> collectNodesWithinSameThisEnvironment(EObject root,Class<T> cls){\n  final List<T> result=new ArrayList<>();\n  final TreeIterator<EObject> iter=root.eAllContents();\n  while (iter.hasNext()) {\n    final EObject obj=iter.next();\n    if (cls.isAssignableFrom(obj.getClass())) {\n      @SuppressWarnings(\"unchecked\") final T objCasted=(T)obj;\n      result.add(objCasted);\n    }\n    if (obj instanceof ThisArgProvider) {\n      iter.prune();\n    }\n  }\n  return result;\n}"}
{"ids": "16679", "raw_code": "public String fullSource(){\n  if (fullSource == null) {\n    fullSource=addSentenceMarkers(source());\n  }\n  return fullSource;\n}"}
{"ids": "56081", "raw_code": "private void updateDetailData(){\n  final long start=mLeftPosition;\n  final long end=mRightPosition;\n  final long now=mCurrentTime;\n  final Context context=getContext();\n  NetworkStatsHistory.Entry originalEntry=mOriginalNetworkStatsHistory.getValues(start,end,now,null);\n  final long originalTotalBytes=originalEntry.rxBytes;\n  mOriginalTotalPhrase=Formatter.formatFileSize(context,originalTotalBytes);\n  NetworkStatsHistory.Entry compressedEntry=mReceivedNetworkStatsHistory.getValues(start,end,now,null);\n  final long compressedTotalBytes=compressedEntry.rxBytes;\n  mReceivedTotalPhrase=Formatter.formatFileSize(context,compressedTotalBytes);\n  float percentage=0.0f;\n  if (originalTotalBytes > 0L && originalTotalBytes > compressedTotalBytes) {\n    percentage=(originalTotalBytes - compressedTotalBytes) / (float)originalTotalBytes;\n  }\n  mPercentReductionPhrase=String.format(\"%.0f%%\",100.0 * percentage);\n  mStartDatePhrase=formatDate(context,start);\n  mEndDatePhrase=formatDate(context,end);\n}"}
{"ids": "27174", "raw_code": "public PunctuationTrie<T> lookup(CharSequence s){\n  PunctuationTrie<T> t=this;\n  for (int i=0, n=s.length(); i < n; ++i) {\n    t=t.lookup(s.charAt(i));\n    if (null == t) {\n      break;\n    }\n  }\n  return t;\n}"}
{"ids": "31416", "raw_code": "private static File constructFilePaths(String file1,String file2){\n  File newPath;\n  if (file2.startsWith(file1)) {\n    newPath=new File(file2);\n  }\n else {\n    newPath=new File(file1 + \"/\" + file2);\n  }\n  return newPath;\n}"}
{"ids": "24877", "raw_code": "public String resolveTemplate(ITemplateType templateType,Map<String,String> replacements) throws IOException {\n  Path path=getTemplatePath(templateType);\n  String template=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n  return insertProperties(template,replacements);\n}"}
{"ids": "63521", "raw_code": "public void execute(){\n  try {\n    prep.execute();\n  }\n catch (  SQLException e) {\n    throw convert(e);\n  }\n}"}
{"ids": "62279", "raw_code": "private static byte[] unwrapCalculatedValue(byte[] data){\n  if (data.length < CALC_DATA_OFFSET) {\n    return data;\n  }\n  ByteBuffer buffer=PageChannel.wrap(data);\n  buffer.position(CALC_DATA_LEN_OFFSET);\n  int dataLen=buffer.getInt();\n  byte[] newData=new byte[Math.min(buffer.remaining(),dataLen)];\n  buffer.get(newData);\n  return newData;\n}"}
{"ids": "36931", "raw_code": "public synchronized TypeInstance createInstance(final String name,final String comment,final BaseType baseType,final Section section,final long sectionOffset) throws CouldntSaveDataException, CouldntLoadDataException {\n  Preconditions.checkNotNull(name,\"Error: name argument can not be null\");\n  Preconditions.checkArgument(comment == null || !comment.isEmpty(),\"Error: comment can either be null or a non empty string\");\n  Preconditions.checkNotNull(baseType,\"Error: baseType argument can not be null\");\n  Preconditions.checkNotNull(section,\"Error: section argument can not be null\");\n  Preconditions.checkArgument(sectionOffset >= 0,\"Error: section offset must be greater or equal to zero\");\n  Preconditions.checkArgument(!instancesByAddress.containsKey(new TypeInstanceAddress(section.getStartAddress(),sectionOffset)));\n  final TypeInstance instance=backend.createTypeInstance(name,comment,baseType,section,sectionOffset);\n  instancesByAddress.put(instance.getAddress(),instance);\n  instances.add(instance);\n  notifyInstanceAdded(instance);\n  return instance;\n}"}
{"ids": "79942", "raw_code": "void showInputBox(String message,Consumer<String> resultCallback){\n  showInputBox(message,null,resultCallback);\n}"}
{"ids": "69683", "raw_code": "public void add(Field field){\n  mFields.add(field);\n}"}
{"ids": "32500", "raw_code": "public static long measureTime(Callable<Object> c,int threadCnt) throws Exception {\n  A.ensure(threadCnt >= 1,\"threadCnt should be >= 1\");\n  long start=System.currentTimeMillis();\n  if (threadCnt == 1)   c.call();\n else   GridTestUtils.runMultiThreaded(c,threadCnt,\"test-worker\");\n  return System.currentTimeMillis() - start;\n}"}
{"ids": "3564", "raw_code": "@Override public boolean isClosed(){\n  return _isClosed.get();\n}"}
{"ids": "55068", "raw_code": "protected StatementListNode generateDestructorBody(Context context,StatementListNode statementList){\n  Model model=(Model)value;\n  Set<String> ids=new LinkedHashSet<String>();\n  if (model.isDeclared())   ids.add(model.getId());\n  collectDeclarations(model.getSubInitializerIterator(),ids);\n  NodeFactory nodeFactory=context.getNodeFactory();\n  StatementListNode result=statementList;\n  StatementListNode functionStatementList=null;\n  for (  String id : ids) {\n    LiteralNullNode literalNull=nodeFactory.literalNull();\n    IdentifierNode identifier=nodeFactory.identifier(id);\n    Node expressionStatement=nodeFactory.assignmentExpression(identifier,ASSIGN_TOKEN,literalNull);\n    functionStatementList=nodeFactory.statementList(functionStatementList,expressionStatement);\n  }\n  FunctionSignatureNode functionSignature=nodeFactory.functionSignature(null,null);\n  functionSignature.void_anno=true;\n  IdentifierNode functionIdentifier=nodeFactory.identifier(model.getDefinitionName() + \"_r\");\n  FunctionCommonNode functionCommon=nodeFactory.functionCommon(context,functionIdentifier,functionSignature,functionStatementList);\n  functionCommon.setUserDefinedBody(true);\n  AttributeListNode attributeList=AbstractSyntaxTreeUtil.generatePrivateAttribute(nodeFactory);\n  FunctionNameNode functionName=nodeFactory.functionName(Tokens.EMPTY_TOKEN,functionIdentifier);\n  FunctionDefinitionNode functionDefinition=nodeFactory.functionDefinition(context,attributeList,functionName,functionCommon);\n  result=nodeFactory.statementList(result,functionDefinition);\n  return result;\n}"}
{"ids": "15291", "raw_code": "protected synchronized void expire() throws IllegalMonitorStateException {\n  if (owner == Thread.currentThread()) {\n    expired=true;\n  }\n else {\n    throw new IllegalMonitorStateException(\"The calling thread is not the owner of the lock!\");\n  }\n}"}
{"ids": "19755", "raw_code": "private StringBuffer prepareOptimizedInsertStatement(OneRowChange oneRowChange){\n  StringBuffer stmt;\n  stmt=new StringBuffer();\n  stmt.append(\"INSERT INTO \");\n  stmt.append(conn.getDatabaseObjectName(oneRowChange.getSchemaName()) + \".\" + conn.getDatabaseObjectName(oneRowChange.getTableName()));\n  stmt.append(\" ( \");\n  printColumnSpec(stmt,oneRowChange.getColumnSpec(),null,null,PrintMode.NAMES_ONLY,\", \");\n  stmt.append(\") VALUES (\");\n  boolean firstRow=true;\n  for (  ArrayList<ColumnVal> oneRowValues : oneRowChange.getColumnValues()) {\n    if (firstRow) {\n      firstRow=false;\n    }\n else     stmt.append(\", (\");\n    printColumnSpec(stmt,oneRowChange.getColumnSpec(),null,oneRowValues,PrintMode.PLACE_HOLDER,\" , \");\n    stmt.append(\")\");\n  }\n  return stmt;\n}"}
{"ids": "19660", "raw_code": "private boolean extractorQueueEmpty() throws InterruptedException {\n  if (extractor.hasMoreEvents())   return false;\n else   if (blockCommitIntervalMillis <= 0)   return true;\n else {\n    long nextCommitMillis=lastCommitMillis + blockCommitIntervalMillis;\n    long sleepMillis=nextCommitMillis - System.currentTimeMillis();\n    while (sleepMillis > 0) {\n      Thread.sleep(1);\n      if (extractor.hasMoreEvents())       return false;\n      sleepMillis=nextCommitMillis - System.currentTimeMillis();\n    }\n    return true;\n  }\n}"}
{"ids": "35941", "raw_code": "public static void verify(final ClassReader cr,final boolean dump,final PrintWriter pw){\n  verify(cr,null,dump,pw);\n}"}
{"ids": "77770", "raw_code": "public FileAsyncHttpResponseHandler(Context context){\n  super();\n  this.file=getTemporaryFile(context);\n  this.append=false;\n  this.renameIfExists=false;\n}"}
{"ids": "46287", "raw_code": "public static boolean isWindowOpaque(Window window){\n  if (window == null) {\n    throw new NullPointerException(\"The window argument should not be null.\");\n  }\n  return window.isOpaque();\n}"}
{"ids": "17924", "raw_code": "public static byte[] encode(byte[] data,int off,int length){\n  int len=(length + 2) / 3 * 4;\n  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);\n  try {\n    encoder.encode(data,off,length,bOut);\n  }\n catch (  Exception e) {\n    throw new EncoderException(\"exception encoding base64 string: \" + e.getMessage(),e);\n  }\n  return bOut.toByteArray();\n}"}
{"ids": "52743", "raw_code": "public double entropyNMIMin(){\n  return (entropyMutualInformation() / Math.min(entropyFirst(),entropySecond()));\n}"}
{"ids": "63137", "raw_code": "public static void unregister(CloseWatcher w){\n  w.closeable=null;\n  refs.remove(w);\n}"}
{"ids": "10634", "raw_code": "protected final void refreshLoadingViewsSize(){\n  final int maximumPullScroll=(int)(getMaximumPullScroll() * 1.2f);\n  int pLeft=getPaddingLeft();\n  int pTop=getPaddingTop();\n  int pRight=getPaddingRight();\n  int pBottom=getPaddingBottom();\nswitch (getPullToRefreshScrollDirection()) {\ncase HORIZONTAL:\n    if (mMode.showHeaderLoadingLayout()) {\n      mHeaderLayout.setWidth(maximumPullScroll);\n      pLeft=-maximumPullScroll;\n    }\n else {\n      pLeft=0;\n    }\n  if (mMode.showFooterLoadingLayout()) {\n    mFooterLayout.setWidth(maximumPullScroll);\n    pRight=-maximumPullScroll;\n  }\n else {\n    pRight=0;\n  }\nbreak;\ncase VERTICAL:\nif (mMode.showHeaderLoadingLayout()) {\nmHeaderLayout.setHeight(maximumPullScroll);\npTop=-maximumPullScroll;\n}\n else {\npTop=0;\n}\nif (mMode.showFooterLoadingLayout()) {\nmFooterLayout.setHeight(maximumPullScroll);\npBottom=-maximumPullScroll;\n}\n else {\npBottom=0;\n}\nbreak;\n}\nif (DEBUG) {\nLog.d(LOG_TAG,String.format(\"Setting Padding. L: %d, T: %d, R: %d, B: %d\",pLeft,pTop,pRight,pBottom));\n}\nsetPadding(pLeft,pTop,pRight,pBottom);\n}"}
{"ids": "51209", "raw_code": "static LabelNode[] clone(final List<LabelNode> labels,final Map<LabelNode,LabelNode> map){\n  LabelNode[] clones=new LabelNode[labels.size()];\n  for (int i=0; i < clones.length; ++i) {\n    clones[i]=map.get(labels.get(i));\n  }\n  return clones;\n}"}
{"ids": "77605", "raw_code": "@Override public JettySolrRunner createJetty(File solrHome,String dataDir,String shardList,String solrConfigOverride,String schemaOverride) throws Exception {\n  return createProxiedJetty(solrHome,dataDir,shardList,solrConfigOverride,schemaOverride);\n}"}
{"ids": "38733", "raw_code": "public synchronized void addBatchClassifierListener(BatchClassifierListener cl){\n  m_batchClassifierListeners.addElement(cl);\n}"}
{"ids": "21978", "raw_code": "private boolean matchAndwriteOneAuditLog(BufferedWriter writer,AuditLog auditlog,String keyword) throws MarshallingExcetion {\n  try {\n    AuditLogUtils.resetDesc(auditlog,resb);\n    if (AuditLogUtils.isKeywordContained(auditlog,keyword)) {\n      if (_count.getAndIncrement() > 0) {\n        while (!_firstWritten.get()) {\n          try {\n            Thread.sleep(1);\n          }\n catch (          InterruptedException e) {\n            _logger.warn(\"Sleep interrupted\");\n          }\n        }\n        writer.write(\",\" + _mapper.writeValueAsString(auditlog));\n      }\n else {\n        writer.write(_mapper.writeValueAsString(auditlog));\n        _firstWritten.set(true);\n      }\n      return true;\n    }\n    _logger.debug(\"{} filter out by description keyword {}\",auditlog.getDescription(),keyword);\n    return false;\n  }\n catch (  JsonGenerationException e) {\n    throw new MarshallingExcetion(\"JSON Generation Error\",e);\n  }\ncatch (  JsonMappingException e) {\n    throw new MarshallingExcetion(\"JSON Mapping Error\",e);\n  }\ncatch (  IOException e) {\n    throw new MarshallingExcetion(\"JSON streaming failed: \",e);\n  }\n}"}
{"ids": "25523", "raw_code": "private void decodeTonesPhase(int chNum,boolean bandHasTones[]){\n  WavesData dst[]=ctx.channels[chNum].tonesInfo;\n  for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {\n    if (!bandHasTones[sb]) {\n      continue;\n    }\n    int wparam=dst[sb].startIndex;\n    for (int i=0; i < dst[sb].numWavs; i++) {\n      ctx.wavesInfo.waves[wparam + i].phaseIndex=br.read(5);\n    }\n  }\n}"}
{"ids": "23073", "raw_code": "public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {\n  for (int i=off; i < (off + length); i++) {\n    int v=data[i] & 0xff;\n    out.write(encodingTable[(v >>> 4)]);\n    out.write(encodingTable[v & 0xf]);\n  }\n  return length * 2;\n}"}
{"ids": "71513", "raw_code": "public void clear(){\nsynchronized (mLock) {\n    mGraphics.clear();\n  }\n  postInvalidate();\n}"}
{"ids": "40087", "raw_code": "public static String removeAll(String str,String[] patterns){\n  for (  String pattern : patterns)   str=str.replace(pattern,\"\");\n  return str;\n}"}
{"ids": "83823", "raw_code": "public void addSeriesRenderer(SimpleSeriesRenderer renderer){\n  mRenderers.add(renderer);\n}"}
{"ids": "6954", "raw_code": "public static void ccDrawCircle(GL10 gl,CGPoint center,float r,float a,int segments,boolean drawLineToCenter){\n  FloatBuffer vertices=getVertices(2 * (segments + 2));\n  int additionalSegment=1;\n  if (drawLineToCenter)   additionalSegment++;\n  final float coef=2.0f * (float)Math.PI / segments;\n  for (int i=0; i <= segments; i++) {\n    float rads=i * coef;\n    float j=(float)(r * Math.cos(rads + a) + center.x);\n    float k=(float)(r * Math.sin(rads + a) + center.y);\n    vertices.put(j);\n    vertices.put(k);\n  }\n  vertices.put(center.x);\n  vertices.put(center.y);\n  vertices.position(0);\n  gl.glDisable(GL_TEXTURE_2D);\n  gl.glDisableClientState(GL_TEXTURE_COORD_ARRAY);\n  gl.glDisableClientState(GL_COLOR_ARRAY);\n  gl.glVertexPointer(2,GL_FLOAT,0,vertices);\n  gl.glDrawArrays(GL_LINE_STRIP,0,segments + additionalSegment);\n  gl.glEnableClientState(GL_COLOR_ARRAY);\n  gl.glEnableClientState(GL_TEXTURE_COORD_ARRAY);\n  gl.glEnable(GL_TEXTURE_2D);\n}"}
{"ids": "37983", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>();\n  newVector.addElement(new Option(\"\\tOutput additional statistics.\",\"additional-stats\",0,\"-additional-stats\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "36366", "raw_code": "@Override public boolean isParent(File folder,File file){\n  return folder.equals(file.getParentFile());\n}"}
{"ids": "1373", "raw_code": "@Override public void print(char c) throws IOException {\n  boolean isWS=Character.isWhitespace(c);\n  if (isWS) {\n    if (isFirstChar)     return;\n    if (c == CHAR_RETURN)     return;\n    if (sb.length() > 0) {\n      printBuffer();\n      lastChar=(c == CHAR_NL) ? CHAR_NL : c;\n      super.print(lastChar);\n      return;\n    }\n  }\n  isFirstChar=false;\n  if (c == CHAR_GT && sb.length() > 0)   printBuffer();\n  if (isWS || !addToBuffer(c)) {\n    if (depthSum == 0) {\n      if (isWS) {\n        if (lastChar == CHAR_NL)         return;\n        if (c != CHAR_NL) {\n          if (Character.isWhitespace(lastChar))           return;\n        }\n      }\n    }\n    lastChar=c;\n    super.print(c);\n  }\n}"}
{"ids": "13937", "raw_code": "public static TokenEndpointAuthMethod fromString(String type){\n  if (type != null) {\n    for (    TokenEndpointAuthMethod authMethod : TokenEndpointAuthMethod.values()) {\n      if (type.equalsIgnoreCase(authMethod.type)) {\n        return authMethod;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "23735", "raw_code": "public void put(E e) throws InterruptedException {\n  if (e == null)   throw new NullPointerException();\n  int c=-1;\n  final ReentrantLock putLock=this.putLock;\n  final AtomicInteger count=this.count;\n  putLock.lockInterruptibly();\n  try {\n    while (count.get() >= capacity) {\n      notFull.await();\n    }\n    enqueue(e);\n    c=count.getAndIncrement();\n    if (c + 1 < capacity)     notFull.signal();\n  }\n  finally {\n    putLock.unlock();\n  }\n  if (c == 0)   signalNotEmpty();\n}"}
{"ids": "55838", "raw_code": "private boolean compare(List<String> remoteModules,List<String> expectedModules){\n  Collections.sort(remoteModules);\n  Collections.sort(expectedModules);\n  return remoteModules.equals(expectedModules);\n}"}
{"ids": "62523", "raw_code": "private void encodeSize(ByteBuffer headerBuffer,int size){\n  headerBuffer.put((byte)((size & 0x00FF0000) >> 16));\n  headerBuffer.put((byte)((size & 0x0000FF00) >> 8));\n  headerBuffer.put((byte)(size & 0x000000FF));\n  logger.fine(\"Frame Size Is Actual:\" + size + \":Encoded bin:\"+ Integer.toBinaryString(size)+ \":Encoded Hex\"+ Integer.toHexString(size));\n}"}
{"ids": "68863", "raw_code": "protected LinkedList<Diff> diff_bisect(String text1,String text2,long deadline){\n  int text1_length=text1.length();\n  int text2_length=text2.length();\n  int max_d=(text1_length + text2_length + 1) / 2;\n  int v_offset=max_d;\n  int v_length=2 * max_d;\n  int[] v1=new int[v_length];\n  int[] v2=new int[v_length];\n  for (int x=0; x < v_length; x++) {\n    v1[x]=-1;\n    v2[x]=-1;\n  }\n  v1[v_offset + 1]=0;\n  v2[v_offset + 1]=0;\n  int delta=text1_length - text2_length;\n  boolean front=(delta % 2 != 0);\n  int k1start=0;\n  int k1end=0;\n  int k2start=0;\n  int k2end=0;\n  for (int d=0; d < max_d; d++) {\n    if (System.currentTimeMillis() > deadline) {\n      break;\n    }\n    for (int k1=-d + k1start; k1 <= d - k1end; k1+=2) {\n      int k1_offset=v_offset + k1;\n      int x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1=v1[k1_offset + 1];\n      }\n else {\n        x1=v1[k1_offset - 1] + 1;\n      }\n      int y1=x1 - k1;\n      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset]=x1;\n      if (x1 > text1_length) {\n        k1end+=2;\n      }\n else       if (y1 > text2_length) {\n        k1start+=2;\n      }\n else       if (front) {\n        int k2_offset=v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          int x2=text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            return diff_bisectSplit(text1,text2,x1,y1,deadline);\n          }\n        }\n      }\n    }\n    for (int k2=-d + k2start; k2 <= d - k2end; k2+=2) {\n      int k2_offset=v_offset + k2;\n      int x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2=v2[k2_offset + 1];\n      }\n else {\n        x2=v2[k2_offset - 1] + 1;\n      }\n      int y2=x2 - k2;\n      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset]=x2;\n      if (x2 > text1_length) {\n        k2end+=2;\n      }\n else       if (y2 > text2_length) {\n        k2start+=2;\n      }\n else       if (!front) {\n        int k1_offset=v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          int x1=v1[k1_offset];\n          int y1=v_offset + x1 - k1_offset;\n          x2=text1_length - x2;\n          if (x1 >= x2) {\n            return diff_bisectSplit(text1,text2,x1,y1,deadline);\n          }\n        }\n      }\n    }\n  }\n  LinkedList<Diff> diffs=new LinkedList<Diff>();\n  diffs.add(new Diff(Operation.DELETE,text1));\n  diffs.add(new Diff(Operation.INSERT,text2));\n  return diffs;\n}"}
{"ids": "11189", "raw_code": "public boolean thisIsYou(Object n){\n  return id.equals(n);\n}"}
{"ids": "33468", "raw_code": "private int syncContactNames(Context context){\n  final ContentResolver contentResolver=context.getContentResolver();\n  final Cursor cursor=contentResolver.query(ContactNotifications.CONTENT_URI,null,null,null,null);\n  if (cursor == null) {\n    return 0;\n  }\n  if (cursor.getCount() == 0) {\n    return 0;\n  }\n  int count=0;\n  int updatedCount=0;\n  String id;\n  String contactName;\n  String contactLookup;\n  String contactId;\n  while (cursor.moveToNext()) {\n    count++;\n    id=cursor.getString(cursor.getColumnIndexOrThrow(ContactNotifications._ID));\n    contactName=cursor.getString(cursor.getColumnIndexOrThrow(ContactNotifications.CONTACT_NAME));\n    contactId=cursor.getString(cursor.getColumnIndexOrThrow(ContactNotifications.CONTACT_ID));\n    contactLookup=cursor.getString(cursor.getColumnIndexOrThrow(ContactNotifications.CONTACT_LOOKUPKEY));\n    ContactIdentification contactInfo=SmsPopupUtils.getPersonNameByLookup(context,contactLookup,contactId);\n    if (contactInfo != null) {\n      boolean runUpdate=false;\n      ContentValues vals=new ContentValues();\n      if (contactName == null || !contactName.equals(contactInfo.contactName)) {\n        vals.put(ContactNotifications.CONTACT_NAME,contactInfo.contactName);\n        runUpdate=true;\n      }\n      if (contactId == null || !contactId.equals(contactInfo.contactId)) {\n        vals.put(ContactNotifications.CONTACT_ID,contactInfo.contactId);\n        runUpdate=true;\n      }\n      if (contactLookup == null || !contactLookup.equals(contactInfo.contactLookup)) {\n        vals.put(ContactNotifications.CONTACT_LOOKUPKEY,contactInfo.contactLookup);\n        runUpdate=true;\n      }\n      if (runUpdate && 1 == contentResolver.update(ContactNotifications.buildContactUri(id),vals,null,null)) {\n        updatedCount++;\n      }\n    }\n  }\n  if (cursor != null) {\n    cursor.close();\n  }\n  if (BuildConfig.DEBUG)   Log.v(\"Sync Contacts: \" + updatedCount + \" / \"+ count);\n  return updatedCount;\n}"}
{"ids": "28837", "raw_code": "@Override public synchronized void clear(){\n  File[] files=mRootDirectory.listFiles();\n  if (files != null) {\n    for (    File file : files) {\n      file.delete();\n    }\n  }\n  mEntries.clear();\n  mTotalSize=0;\n  VolleyLog.d(\"Cache cleared.\");\n}"}
{"ids": "49318", "raw_code": "@Override protected void deviceFrameRect(int x,int y,int width,int height,Color color){\n  AffineTransform deviceTransform=getTransform();\n  int transformType=deviceTransform.getType();\n  boolean usePath=((transformType & (AffineTransform.TYPE_GENERAL_ROTATION | AffineTransform.TYPE_GENERAL_TRANSFORM)) != 0);\n  if (usePath) {\n    draw(new Rectangle2D.Float(x,y,width,height));\n    return;\n  }\n  Stroke stroke=getStroke();\n  if (stroke instanceof BasicStroke) {\n    BasicStroke lineStroke=(BasicStroke)stroke;\n    int endCap=lineStroke.getEndCap();\n    int lineJoin=lineStroke.getLineJoin();\n    if ((endCap == BasicStroke.CAP_SQUARE) && (lineJoin == BasicStroke.JOIN_MITER) && (lineStroke.getMiterLimit() == 10.0f)) {\n      float lineWidth=lineStroke.getLineWidth();\n      Point2D.Float penSize=new Point2D.Float(lineWidth,lineWidth);\n      deviceTransform.deltaTransform(penSize,penSize);\n      float deviceLineWidth=Math.min(Math.abs(penSize.x),Math.abs(penSize.y));\n      Point2D.Float ul_pos=new Point2D.Float(x,y);\n      deviceTransform.transform(ul_pos,ul_pos);\n      Point2D.Float lr_pos=new Point2D.Float(x + width,y + height);\n      deviceTransform.transform(lr_pos,lr_pos);\n      float w=(float)(lr_pos.getX() - ul_pos.getX());\n      float h=(float)(lr_pos.getY() - ul_pos.getY());\n      WPrinterJob wPrinterJob=(WPrinterJob)getPrinterJob();\n      if (wPrinterJob.selectStylePen(endCap,lineJoin,deviceLineWidth,color) == true) {\n        wPrinterJob.frameRect((float)ul_pos.getX(),(float)ul_pos.getY(),w,h);\n      }\n else {\n        double lowerRes=Math.min(wPrinterJob.getXRes(),wPrinterJob.getYRes());\n        if ((deviceLineWidth / lowerRes) < MAX_THINLINE_INCHES) {\n          wPrinterJob.selectPen(deviceLineWidth,color);\n          wPrinterJob.frameRect((float)ul_pos.getX(),(float)ul_pos.getY(),w,h);\n        }\n else {\n          draw(new Rectangle2D.Float(x,y,width,height));\n        }\n      }\n    }\n else {\n      draw(new Rectangle2D.Float(x,y,width,height));\n    }\n  }\n}"}
{"ids": "69691", "raw_code": "public void resetWorkspace(){\n  mBlockFactory.clearPriorBlockReferences();\n  mRootBlocks.clear();\n  mStats.clear();\n  mDeletedBlocks.clear();\n}"}
{"ids": "14110", "raw_code": "private void parseElement(Element element) throws SAML2Exception {\n  AssertionFactory assertionFactory=AssertionFactory.getInstance();\n  ProtocolFactory protoFactory=ProtocolFactory.getInstance();\n  requestId=element.getAttribute(SAML2Constants.ID);\n  validateID(requestId);\n  version=element.getAttribute(SAML2Constants.VERSION);\n  validateVersion(version);\n  String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT);\n  validateIssueInstant(issueInstantStr);\n  destinationURI=element.getAttribute(SAML2Constants.DESTINATION);\n  consent=element.getAttribute(SAML2Constants.CONSENT);\n  String notOnOrAfterStr=element.getAttribute(SAML2Constants.NOTONORAFTER);\n  validateNotOnOrAfterStr(notOnOrAfterStr);\n  reason=element.getAttribute(SAML2Constants.REASON);\n  String sessionIndexStr=null;\n  NodeList nList=element.getChildNodes();\n  if ((nList != null) && (nList.getLength() > 0)) {\n    for (int i=0; i < nList.getLength(); i++) {\n      Node childNode=nList.item(i);\n      String cName=childNode.getLocalName();\n      if (cName != null) {\n        if (cName.equals(SAML2Constants.ISSUER)) {\n          nameID=assertionFactory.createIssuer((Element)childNode);\n        }\n else         if (cName.equals(SAML2Constants.SIGNATURE)) {\n          signatureString=XMLUtils.print((Element)childNode);\n          isSigned=true;\n        }\n else         if (cName.equals(SAML2Constants.EXTENSIONS)) {\n          extensions=protoFactory.createExtensions((Element)childNode);\n        }\n else         if (cName.equals(SAML2Constants.BASEID)) {\n          baseId=assertionFactory.createBaseID((Element)childNode);\n        }\n else         if (cName.equals(SAML2Constants.NAMEID)) {\n          nameId=assertionFactory.createNameID((Element)childNode);\n        }\n else         if (cName.equals(SAML2Constants.ENCRYPTEDID)) {\n          encryptedId=assertionFactory.createEncryptedID((Element)childNode);\n        }\n else         if (cName.equals(SAML2Constants.SESSION_INDEX)) {\n          if ((sessionIndexList == null) || (sessionIndexList.isEmpty())) {\n            sessionIndexList=new ArrayList();\n          }\n          sessionIndexStr=XMLUtils.getElementString((Element)childNode);\n          sessionIndexList.add(sessionIndexStr);\n        }\n      }\n    }\n    validateBaseIDorNameIDorEncryptedID();\n    if ((sessionIndexList != null) && (!sessionIndexList.isEmpty())) {\n      sessionIndexList=Collections.unmodifiableList(sessionIndexList);\n    }\n  }\n}"}
{"ids": "65580", "raw_code": "public static BigDecimal paidToDate(int p_C_Invoice_ID,int p_C_Currency_ID,int p_MultiplierAP,Timestamp DateAcct) throws SQLException {\n  if (p_C_Invoice_ID == 0 || p_C_Currency_ID == 0)   return null;\n  BigDecimal MultiplierAP=new BigDecimal((double)p_MultiplierAP);\n  if (p_MultiplierAP == 0)   MultiplierAP=Adempiere.ONE;\n  int C_ConversionType_ID=0;\n  BigDecimal paymentAmt=allocatedAmtToDate(p_C_Invoice_ID,p_C_Currency_ID,C_ConversionType_ID,MultiplierAP,DateAcct);\n  return Currency.round(paymentAmt,p_C_Currency_ID,null);\n}"}
{"ids": "48033", "raw_code": "private int[] toIntArray(){\n  int length=encoding.length;\n  int[] result=new int[20];\n  int which=0;\n  int fromPos=0;\n  for (int i=0; i < length; i++) {\n    if ((encoding[i] & 0x80) == 0) {\n      if (i - fromPos + 1 > 4) {\n        BigInteger big=new BigInteger(pack(encoding,fromPos,i - fromPos + 1,7,8));\n        if (fromPos == 0) {\n          result[which++]=2;\n          BigInteger second=big.subtract(BigInteger.valueOf(80));\n          if (second.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) == 1) {\n            return null;\n          }\n else {\n            result[which++]=second.intValue();\n          }\n        }\n else {\n          if (big.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) == 1) {\n            return null;\n          }\n else {\n            result[which++]=big.intValue();\n          }\n        }\n      }\n else {\n        int retval=0;\n        for (int j=fromPos; j <= i; j++) {\n          retval<<=7;\n          byte tmp=encoding[j];\n          retval|=(tmp & 0x07f);\n        }\n        if (fromPos == 0) {\n          if (retval < 80) {\n            result[which++]=retval / 40;\n            result[which++]=retval % 40;\n          }\n else {\n            result[which++]=2;\n            result[which++]=retval - 80;\n          }\n        }\n else {\n          result[which++]=retval;\n        }\n      }\n      fromPos=i + 1;\n    }\n    if (which >= result.length) {\n      result=Arrays.copyOf(result,which + 10);\n    }\n  }\n  return Arrays.copyOf(result,which);\n}"}
{"ids": "62577", "raw_code": "public static List<Window> windows(InputStream words,TokenizerFactory tokenizerFactory,int windowSize){\n  Tokenizer tokenizer=tokenizerFactory.create(words);\n  List<String> list=new ArrayList<>();\n  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());\n  if (list.isEmpty())   throw new IllegalStateException(\"No tokens found for windows\");\n  return windows(list,windowSize);\n}"}
{"ids": "53845", "raw_code": "public static double[] pageRank(MatrixInterface preparedMatrix,int maxIteration){\n  double[] init=new double[preparedMatrix.getRowsCount()];\n  for (int i=0; i != init.length; i++)   init[i]=1.0;\n  return pageRank(preparedMatrix,maxIteration,DEFAULT_D,init);\n}"}
{"ids": "43902", "raw_code": "public boolean hasMIMEType(String mimeType){\n  if (mimeType == null)   return false;\n  String type=mimeType;\n  if (mimeType.indexOf(';') > 0) {\n    type=mimeType.substring(0,mimeType.indexOf(';'));\n  }\n  for (  String mt : this.mimeTypes) {\n    if (mt.equalsIgnoreCase(mimeType)) {\n      return true;\n    }\n    if (mimeType != type && mt.equalsIgnoreCase(type)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "16329", "raw_code": "private int measureShort(int measureSpec){\n  int result;\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  if (specMode == MeasureSpec.EXACTLY) {\n    result=specSize;\n  }\n else {\n    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);\n    if (specMode == MeasureSpec.AT_MOST) {\n      result=Math.min(result,specSize);\n    }\n  }\n  return result;\n}"}
{"ids": "46132", "raw_code": "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  key=key.clone();\n}"}
{"ids": "57983", "raw_code": "void unexecuteNSDecls(TransformerImpl transformer) throws TransformerException {\n  unexecuteNSDecls(transformer,null);\n}"}
{"ids": "34031", "raw_code": "public boolean add(ProtocolMessage pm){\n  return protocolMessages.add(pm);\n}"}
{"ids": "37710", "raw_code": "public void randomInit(){\n  do {\n    m_bits=new boolean[m_nNodes * m_nNodes];\n    for (int i=0; i < m_nNodes; i++) {\n      int iPos;\n      do {\n        iPos=m_random.nextInt(m_nNodes * m_nNodes);\n      }\n while (isSquare(iPos));\n      m_bits[iPos]=true;\n    }\n  }\n while (hasCycles());\n  calcGlobalScore();\n}"}
{"ids": "44093", "raw_code": "public static int safeParseInt(String s){\n  return safeParseInt(s,-1);\n}"}
{"ids": "23649", "raw_code": "protected boolean hasReceiversFor(DistributedMember endPoint){\nsynchronized (this.receivers) {\n    for (Iterator it=receivers.iterator(); it.hasNext(); ) {\n      Connection con=(Connection)it.next();\n      if (endPoint.equals(con.getRemoteAddress())) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "68286", "raw_code": "protected void decodeBitmapData(final GifFrame frame,byte[] dstPixels){\n  if (frame != null) {\n    rawData.position(frame.bufferFrameStart);\n  }\n  final int nullCode=-1;\n  final int npix=(frame == null) ? width * height : frame.iw * frame.ih;\n  int available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi;\n  if (dstPixels == null || dstPixels.length < npix) {\n    dstPixels=new byte[npix];\n  }\n  if (prefix == null) {\n    prefix=new short[MAX_STACK_SIZE];\n  }\n  if (suffix == null) {\n    suffix=new byte[MAX_STACK_SIZE];\n  }\n  if (pixelStack == null) {\n    pixelStack=new byte[MAX_STACK_SIZE + 1];\n  }\n  data_size=read();\n  clear=1 << data_size;\n  end_of_information=clear + 1;\n  available=clear + 2;\n  old_code=nullCode;\n  code_size=data_size + 1;\n  code_mask=(1 << code_size) - 1;\n  for (code=0; code < clear; code++) {\n    prefix[code]=0;\n    suffix[code]=(byte)code;\n  }\n  datum=bits=count=first=top=pi=bi=0;\n  for (i=0; i < npix; ) {\n    if (top == 0) {\n      if (bits < code_size) {\n        if (count == 0) {\n          count=readBlock();\n          if (count <= 0) {\n            break;\n          }\n          bi=0;\n        }\n        datum+=((block[bi]) & 0xff) << bits;\n        bits+=8;\n        bi++;\n        count--;\n        continue;\n      }\n      code=datum & code_mask;\n      datum>>=code_size;\n      bits-=code_size;\n      if ((code > available) || (code == end_of_information)) {\n        break;\n      }\n      if (code == clear) {\n        code_size=data_size + 1;\n        code_mask=(1 << code_size) - 1;\n        available=clear + 2;\n        old_code=nullCode;\n        continue;\n      }\n      if (old_code == nullCode) {\n        pixelStack[top++]=suffix[code];\n        old_code=code;\n        first=code;\n        continue;\n      }\n      in_code=code;\n      if (code == available) {\n        pixelStack[top++]=(byte)first;\n        code=old_code;\n      }\n      while (code > clear) {\n        pixelStack[top++]=suffix[code];\n        code=prefix[code];\n      }\n      first=(suffix[code]) & 0xff;\n      if (available >= MAX_STACK_SIZE) {\n        break;\n      }\n      pixelStack[top++]=(byte)first;\n      prefix[available]=(short)old_code;\n      suffix[available]=(byte)first;\n      available++;\n      if (((available & code_mask) == 0) && (available < MAX_STACK_SIZE)) {\n        code_size++;\n        code_mask+=available;\n      }\n      old_code=in_code;\n    }\n    top--;\n    dstPixels[pi++]=pixelStack[top];\n    i++;\n  }\n  for (i=pi; i < npix; i++) {\n    dstPixels[i]=0;\n  }\n}"}
{"ids": "66125", "raw_code": "public void addRangeRestriction(String ColumnName,Object Code,Object Code_to,String InfoName,String InfoDisplay,String InfoDisplay_to){\n  Restriction r=new Restriction(ColumnName,Code,Code_to,InfoName,InfoDisplay,InfoDisplay_to,true,0);\n  m_list.add(r);\n}"}
{"ids": "60820", "raw_code": "@SuppressWarnings(\"unchecked\") E transfer(E e,boolean timed,long nanos){\n  QNode s=null;\n  boolean isData=(e != null);\n  for (; ; ) {\n    QNode t=tail;\n    QNode h=head;\n    if (t == null || h == null)     continue;\n    if (h == t || t.isData == isData) {\n      QNode tn=t.next;\n      if (t != tail)       continue;\n      if (tn != null) {\n        advanceTail(t,tn);\n        continue;\n      }\n      if (timed && nanos <= 0)       return null;\n      if (s == null)       s=new QNode(e,isData);\n      if (!t.casNext(null,s))       continue;\n      advanceTail(t,s);\n      Object x=awaitFulfill(s,e,timed,nanos);\n      if (x == s) {\n        clean(t,s);\n        return null;\n      }\n      if (!s.isOffList()) {\n        advanceHead(t,s);\n        if (x != null)         s.item=s;\n        s.waiter=null;\n      }\n      return (x != null) ? (E)x : e;\n    }\n else {\n      QNode m=h.next;\n      if (t != tail || m == null || h != head)       continue;\n      Object x=m.item;\n      if (isData == (x != null) || x == m || !m.casItem(x,e)) {\n        advanceHead(h,m);\n        continue;\n      }\n      advanceHead(h,m);\n      LockSupport.unpark(m.waiter);\n      return (x != null) ? (E)x : e;\n    }\n  }\n}"}
{"ids": "11846", "raw_code": "protected void indexPoints(InputStream is,long ptr,OutputStream os){\n  boolean moreRecords=true;\n  byte rHdr[]=new byte[SHAPE_RECORD_HEADER_LENGTH];\n  byte outBuf[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];\n  int result;\n  int nRecords=0;\n  int recLengthWords, recLengthBytes;\n  long recOffset;\n  int shapeType;\n  int recBufSize=20;\n  byte recBuf[]=new byte[recBufSize];\n  double x=0;\n  double y=0;\n  try {\n    while (moreRecords) {\n      result=is.read(rHdr,0,SHAPE_RECORD_HEADER_LENGTH);\n      if (result < 0) {\n        moreRecords=false;\n        if (logger.isLoggable(Level.FINE)) {\n          logger.fine(\"Found \" + nRecords + \" records\");\n          logger.fine(\"recBufSize = \" + recBufSize);\n        }\n      }\n else {\n        nRecords++;\n        recOffset=ptr;\n        readBEInt(rHdr,0);\n        recLengthWords=readBEInt(rHdr,4);\n        recLengthBytes=recLengthWords * 2;\n        if (recLengthBytes > recBufSize) {\n          if (logger.isLoggable(Level.FINE)) {\n            logger.fine(\"Shapefile SpatialIndex increasing recBufSize to \" + recLengthBytes);\n          }\n          recBufSize=recLengthBytes;\n          recBuf=new byte[recBufSize];\n        }\n        result=is.read(recBuf,0,recLengthBytes);\n        shapeType=readLEInt(recBuf,0);\n        if (shapeType != SHAPE_TYPE_NULL) {\n          x=readLEDouble(recBuf,4);\n          y=readLEDouble(recBuf,12);\n        }\n        ptr+=recLengthBytes + 8;\n        writeBEInt(outBuf,0,(int)(recOffset / 2));\n        writeBEInt(outBuf,4,recLengthWords);\n        writeLEDouble(outBuf,8,x);\n        writeLEDouble(outBuf,16,y);\n        writeLEDouble(outBuf,24,x);\n        writeLEDouble(outBuf,32,y);\n        os.write(outBuf,0,SPATIAL_INDEX_RECORD_LENGTH);\n      }\n    }\n  }\n catch (  java.io.IOException e) {\n    e.printStackTrace();\n  }\n finally {\n    try {\n      is.close();\n    }\n catch (    java.io.IOException e) {\n    }\n  }\n}"}
{"ids": "33765", "raw_code": "public static String unsignedToString(final int value){\n  if (value >= 0) {\n    return Integer.toString(value);\n  }\n else {\n    return Long.toString(value & 0x00000000FFFFFFFFL);\n  }\n}"}
{"ids": "23668", "raw_code": "public static List<File> findAll(File baseFile,String regex){\n  ArrayList<File> found=new ArrayList<File>();\n  findAll(baseFile,regex,found);\n  return found;\n}"}
{"ids": "53015", "raw_code": "public void appendCSSDefinition(StringBuilder buf){\n  buf.append(\"\\n.\");\n  buf.append(name);\n  buf.append('{');\n  for (  Pair<String,String> pair : statements) {\n    buf.append(pair.getFirst());\n    buf.append(':');\n    buf.append(pair.getSecond());\n    buf.append(\";\\n\");\n  }\n  buf.append(\"}\\n\");\n}"}
{"ids": "30428", "raw_code": "protected Object cloneObject(Object obj){\n  if (obj == null) {\n    return null;\n  }\n  if (obj instanceof String || obj instanceof Boolean || obj instanceof Byte|| obj instanceof Short|| obj instanceof Character|| obj instanceof Integer|| obj instanceof Long|| obj instanceof Float|| obj instanceof Double) {\n    return obj;\n  }\n  if (obj instanceof byte[]) {\n    byte[] body=(byte[])obj;\n    byte[] data=new byte[body.length];\n    System.arraycopy(body,0,data,0,body.length);\n    return data;\n  }\n  return SerializationHelper.deepClone(obj);\n}"}
{"ids": "33787", "raw_code": "private void assertWriteVarint(byte[] data,long value) throws Exception {\n  if ((value >>> 32) == 0) {\n    ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();\n    CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);\n    output.writeRawVarint32((int)value);\n    output.flush();\n    assertEqualBytes(data,rawOutput.toByteArray());\n    assertEquals(data.length,CodedOutputStream.computeRawVarint32Size((int)value));\n  }\n{\n    ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();\n    CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);\n    output.writeRawVarint64(value);\n    output.flush();\n    assertEqualBytes(data,rawOutput.toByteArray());\n    assertEquals(data.length,CodedOutputStream.computeRawVarint64Size(value));\n  }\n  for (int blockSize=1; blockSize <= 16; blockSize*=2) {\n    if ((value >>> 32) == 0) {\n      ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();\n      CodedOutputStream output=CodedOutputStream.newInstance(rawOutput,blockSize);\n      output.writeRawVarint32((int)value);\n      output.flush();\n      assertEqualBytes(data,rawOutput.toByteArray());\n    }\n{\n      ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();\n      CodedOutputStream output=CodedOutputStream.newInstance(rawOutput,blockSize);\n      output.writeRawVarint64(value);\n      output.flush();\n      assertEqualBytes(data,rawOutput.toByteArray());\n    }\n  }\n}"}
{"ids": "64280", "raw_code": "public void attach(ActionObserver observer){\n  observer.makeOneTimeUse();\n  lock.lock();\n  try {\n    onceUsedObservers.add(observer);\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "85238", "raw_code": "private void signCertificateChain(){\n  List<Certificate> cc=new ArrayList<>();\n  cc.add(signCert);\n  List<Certificate> oc=new ArrayList<>(certs);\n  for (int k=0; k < oc.size(); ++k) {\n    if (signCert.equals(oc.get(k))) {\n      oc.remove(k);\n      --k;\n    }\n  }\n  boolean found=true;\n  while (found) {\n    X509Certificate v=(X509Certificate)cc.get(cc.size() - 1);\n    found=false;\n    for (int k=0; k < oc.size(); ++k) {\n      X509Certificate issuer=(X509Certificate)oc.get(k);\n      try {\n        v.verify(issuer.getPublicKey(),provider);\n        found=true;\n        cc.add(oc.get(k));\n        oc.remove(k);\n        break;\n      }\n catch (      Exception ignored) {\n      }\n    }\n  }\n  signCerts=cc;\n}"}
{"ids": "57239", "raw_code": "public static String meterToString(OFInstructionMeter inst,Logger log){\n  return Long.toString(inst.getMeterId());\n}"}
{"ids": "22736", "raw_code": "public String charset(){\n  return parameter(HEADER_CONTENT_TYPE,PARAM_CHARSET);\n}"}
{"ids": "46674", "raw_code": "public Dimension minimumLayoutSize(Container parent){\n  Dimension rd, mbd;\n  Insets i=getInsets();\n  if (contentPane != null) {\n    rd=contentPane.getMinimumSize();\n  }\n else {\n    rd=parent.getSize();\n  }\n  if (menuBar != null && menuBar.isVisible()) {\n    mbd=menuBar.getMinimumSize();\n  }\n else {\n    mbd=new Dimension(0,0);\n  }\n  return new Dimension(Math.max(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);\n}"}
{"ids": "82335", "raw_code": "@Override public void add(int location,E object){\n  insertElementAt(object,location);\n}"}
{"ids": "76279", "raw_code": "public static boolean checkIfCanUse(String className){\n  if (MockList.shouldBeMocked(className)) {\n    return false;\n  }\n  for (  String s : classExceptions) {\n    if (className.startsWith(s)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "17503", "raw_code": "private static void applyOverrides(){\n  InputStream stream=getContentTypesPropertiesStream();\n  if (stream == null) {\n    return;\n  }\n  try {\n    try {\n      Properties overrides=new Properties();\n      overrides.load(stream);\n      for (      Map.Entry<Object,Object> entry : overrides.entrySet()) {\n        String extension=(String)entry.getKey();\n        String mimeType=(String)entry.getValue();\n        add(mimeType,extension);\n      }\n    }\n  finally {\n      stream.close();\n    }\n  }\n catch (  IOException ignored) {\n  }\n}"}
{"ids": "50514", "raw_code": "@Override public void run(){\n  amIActive=true;\n  String inputHeader=null;\n  String outputHeader=null;\n  int row, col;\n  float progress=0;\n  double maxPatchValue=0;\n  int x, y;\n  boolean blnFoundNeighbour;\n  boolean blnIncludeDiagNeighbour=false;\n  boolean blnTreatZerosAsBackground=false;\n  int i;\n  if (args.length <= 0) {\n    showFeedback(\"Plugin parameters have not been set.\");\n    return;\n  }\n  for (i=0; i < args.length; i++) {\n    if (i == 0) {\n      inputHeader=args[i];\n    }\n else     if (i == 1) {\n      outputHeader=args[i];\n    }\n else     if (i == 2) {\n      blnIncludeDiagNeighbour=Boolean.parseBoolean(args[i]);\n      if (!blnIncludeDiagNeighbour) {\n        dX=new int[]{0,1,0,-1};\n        dY=new int[]{-1,0,1,0};\n      }\n    }\n else     if (i == 3) {\n      blnTreatZerosAsBackground=Boolean.parseBoolean(args[i]);\n    }\n  }\n  if ((inputHeader == null) || (outputHeader == null)) {\n    showFeedback(\"One or more of the input parameters have not been set properly.\");\n    return;\n  }\n  try {\n    numScanCells=dY.length;\n    image=new WhiteboxRaster(inputHeader,\"r\");\n    int rows=image.getNumberRows();\n    int cols=image.getNumberColumns();\n    noData=image.getNoDataValue();\n    double initialValue=-1;\n    output=new WhiteboxRaster(outputHeader,\"rw\",inputHeader,WhiteboxRaster.DataType.FLOAT,initialValue);\n    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);\n    output.setPreferredPalette(\"qual.pal\");\n    if (blnTreatZerosAsBackground) {\n      for (row=0; row < rows; row++) {\n        for (col=0; col < cols; col++) {\n          if (image.getValue(row,col) == 0) {\n            output.setValue(row,col,0);\n          }\n        }\n        if (cancelOp) {\n          cancelOperation();\n          return;\n        }\n        progress=(float)(100f * row / (rows - 1));\n        updateProgress((int)progress);\n      }\n      if (output.getValue(0,0) == -1) {\n        output.setValue(0,0,1);\n      }\n    }\n else {\n      output.setValue(0,0,0);\n    }\n    double patchValue=0;\n    double neighbourPatchValue=0;\n    double newPatchValue=0;\n    double imageValue=0;\n    int loopNum=1;\n    updateProgress(\"Loop \" + loopNum + \":\",0);\n    for (row=0; row < rows; row++) {\n      for (col=0; col < cols; col++) {\n        imageValue=image.getValue(row,col);\n        if (imageValue != noData) {\n          patchValue=output.getValue(row,col);\n          if (patchValue == initialValue) {\n            blnFoundNeighbour=false;\n            for (i=0; i < numScanCells; i++) {\n              x=col + dX[i];\n              y=row + dY[i];\n              neighbourPatchValue=output.getValue(y,x);\n              if (neighbourPatchValue != initialValue && image.getValue(y,x) == imageValue) {\n                output.setValue(row,col,neighbourPatchValue);\n                newPatchValue=neighbourPatchValue;\n                blnFoundNeighbour=true;\n                break;\n              }\n            }\n            if (!blnFoundNeighbour) {\n              maxPatchValue++;\n              newPatchValue=maxPatchValue;\n              output.setValue(row,col,newPatchValue);\n            }\n            depth=0;\n            ScanConnectedCells(row,col,imageValue,initialValue,newPatchValue);\n          }\n        }\n else {\n          output.setValue(row,col,noData);\n        }\n      }\n      if (cancelOp) {\n        cancelOperation();\n        return;\n      }\n      progress=(float)(100f * row / (rows - 1));\n      updateProgress((int)progress);\n    }\n    boolean somethingDone;\n    double[] reclass=new double[(int)maxPatchValue + 1];\n    do {\n      loopNum++;\n      updateProgress(\"Loop \" + loopNum + \":\",0);\n      somethingDone=false;\n      for (row=0; row < rows; row++) {\n        for (col=0; col < cols; col++) {\n          imageValue=image.getValue(row,col);\n          if (imageValue != noData) {\n            patchValue=output.getValue(row,col);\n            for (i=0; i < numScanCells; i++) {\n              x=col + dX[i];\n              y=row + dY[i];\n              neighbourPatchValue=output.getValue(y,x);\n              if (neighbourPatchValue != patchValue && image.getValue(y,x) == imageValue) {\n                somethingDone=true;\n                if (patchValue < neighbourPatchValue) {\n                  reclass[(int)neighbourPatchValue]=-1;\n                  output.setValue(y,x,patchValue);\n                  ScanConnectedCells(y,x,imageValue,neighbourPatchValue,patchValue);\n                }\n else {\n                  reclass[(int)patchValue]=-1;\n                  output.setValue(row,col,neighbourPatchValue);\n                  ScanConnectedCells(row,col,imageValue,patchValue,neighbourPatchValue);\n                  patchValue=neighbourPatchValue;\n                }\n              }\n            }\n          }\n        }\n        if (cancelOp) {\n          cancelOperation();\n          return;\n        }\n        progress=(float)(100f * row / (rows - 1));\n        updateProgress((int)progress);\n      }\n    }\n while (somethingDone);\n    i=0;\n    for (int a=0; a < maxPatchValue + 1; a++) {\n      if (reclass[a] != -1) {\n        reclass[a]=i;\n        i++;\n      }\n    }\n    loopNum++;\n    updateProgress(\"Loop \" + loopNum + \":\",0);\n    for (row=0; row < rows; row++) {\n      for (col=0; col < cols; col++) {\n        patchValue=output.getValue(row,col);\n        if (patchValue != noData) {\n          output.setValue(row,col,reclass[(int)patchValue]);\n        }\n      }\n      if (cancelOp) {\n        cancelOperation();\n        return;\n      }\n      progress=(float)(100f * row / (rows - 1));\n      updateProgress((int)progress);\n    }\n    output.addMetadataEntry(\"Created by the \" + getDescriptiveName() + \" tool.\");\n    output.addMetadataEntry(\"Created on \" + new Date());\n    image.close();\n    output.close();\n    returnData(outputHeader);\n  }\n catch (  OutOfMemoryError oe) {\n    myHost.showFeedback(\"An out-of-memory error has occurred during operation.\");\n  }\ncatch (  Exception e) {\n    myHost.showFeedback(\"An error has occurred during operation. See log file for details.\");\n    myHost.logException(\"Error in \" + getDescriptiveName(),e);\n  }\n finally {\n    updateProgress(\"Progress: \",0);\n    amIActive=false;\n    myHost.pluginComplete();\n  }\n}"}
{"ids": "81983", "raw_code": "public static int readAll(InputStream i,byte b[]) throws IOException {\n  int len=b.length;\n  int n=0;\n  while (n < len) {\n    int count=i.read(b,n,len - n);\n    if (count < 0) {\n      return n;\n    }\n    n+=count;\n  }\n  return n;\n}"}
{"ids": "38317", "raw_code": "public void switchToSimple(Experiment exp){\n  if (exp == null) {\n    exp=m_advancedPanel.getExperiment();\n  }\n  if (exp != null && !m_simplePanel.setExperiment(exp)) {\n    m_AdvancedSetupRBut.setSelected(true);\n    switchToAdvanced(exp);\n  }\n else {\n    remove(m_advancedPanel);\n    m_advancedPanel.removeNotesFrame();\n    add(m_simplePanel,BorderLayout.CENTER);\n    validate();\n    repaint();\n  }\n}"}
{"ids": "29924", "raw_code": "public static CacheSpan createCacheEntry(File file){\n  Matcher matcher=CACHE_FILE_PATTERN_V2.matcher(file.getName());\n  if (!matcher.matches()) {\n    return null;\n  }\n  String key=Util.unescapeFileName(matcher.group(1));\n  return key == null ? null : createCacheEntry(key,Long.parseLong(matcher.group(2)),Long.parseLong(matcher.group(4)),file);\n}"}
{"ids": "46713", "raw_code": "public boolean isComponentPartOfCurrentMenu(Component c){\n  if (selection.size() > 0) {\n    MenuElement me=selection.elementAt(0);\n    return isComponentPartOfCurrentMenu(me,c);\n  }\n else   return false;\n}"}
{"ids": "63789", "raw_code": "public static int hsba(float h,float s,float b,float a){\n  return setAlpha(Color.HSBtoRGB(h,s,b),(int)(a * 255 + 0.5) & 0xFF);\n}"}
{"ids": "47919", "raw_code": "LambdaFormBuffer replaceFunctions(NamedFunction[] oldFns,NamedFunction[] newFns,Object... forArguments){\n  assert (inTrans());\n  if (oldFns.length == 0)   return this;\n  for (int i=arity; i < length; i++) {\n    Name n=names[i];\n    int nfi=indexOf(n.function,oldFns);\n    if (nfi >= 0 && Arrays.equals(n.arguments,forArguments)) {\n      changeName(i,new Name(newFns[nfi],n.arguments));\n    }\n  }\n  return this;\n}"}
{"ids": "3798", "raw_code": "@Override public ClientSocket openIfLive(){\n  if (_state.isClosed()) {\n    return null;\n  }\n  ClientSocket stream=openRecycle();\n  if (stream != null)   return stream;\n  long now=CurrentTime.currentTime();\n  if (isFailed(now))   return null;\n else   if (_state == State.FAIL && _startingCount.get() > 0) {\n    return null;\n  }\n  return connect();\n}"}
{"ids": "40583", "raw_code": "public void commit(){\n  info(\"COMMITting Solr index changes to \" + solrUrl + \"..\");\n  doGet(appendParam(solrUrl.toString(),\"commit=true\"));\n}"}
{"ids": "2279", "raw_code": "protected void waitForThreadToEnterWaitState(Thread thread,long timeoutMillis){\n  long startTime=0L;\n  for (; ; ) {\n    Thread.State s=thread.getState();\n    if (s == Thread.State.BLOCKED || s == Thread.State.WAITING || s == Thread.State.TIMED_WAITING)     return;\n else     if (s == Thread.State.TERMINATED)     fail(\"Unexpected thread termination\");\n else     if (startTime == 0L)     startTime=System.nanoTime();\n else     if (millisElapsedSince(startTime) > timeoutMillis) {\n      threadAssertTrue(thread.isAlive());\n      return;\n    }\n    Thread.yield();\n  }\n}"}
{"ids": "77856", "raw_code": "public void forceRewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {\n  if (!rewriteExif(filename,tags)) {\n    ExifData tempData=mData;\n    mData=new ExifData(DEFAULT_BYTE_ORDER);\n    FileInputStream is=null;\n    ByteArrayOutputStream bytes=null;\n    try {\n      is=new FileInputStream(filename);\n      bytes=new ByteArrayOutputStream();\n      doExifStreamIO(is,bytes);\n      byte[] imageBytes=bytes.toByteArray();\n      readExif(imageBytes);\n      setTags(tags);\n      writeExif(imageBytes,filename);\n    }\n catch (    IOException e) {\n      closeSilently(is);\n      throw e;\n    }\n finally {\n      is.close();\n      mData=tempData;\n    }\n  }\n}"}
{"ids": "69941", "raw_code": "public static LatLng translatePoint(LatLng point,double distance,double bearing){\n  distance=distance / 1000d;\n  double lat=Math.toRadians(point.latitude);\n  double lng=Math.toRadians(point.longitude);\n  bearing=Math.toRadians(bearing);\n  double Lat2=Math.asin((Math.sin(lat) * Math.cos(distance / EARTH)) + (Math.cos(lat) * Math.sin(distance / EARTH) * Math.cos(bearing)));\n  double Long2=lng + Math.atan2(Math.sin(bearing) * Math.sin(distance / EARTH) * Math.cos(lat),Math.cos(distance / EARTH) - (Math.sin(lat) * Math.sin(Lat2)));\n  Lat2=Math.toDegrees(Lat2);\n  Long2=Math.toDegrees(Long2);\n  return new LatLng(Lat2,Long2);\n}"}
{"ids": "65649", "raw_code": "public boolean init(){\n  log.config(\"\");\n  MClient client=MClient.get(Env.getCtx());\n  String ASPFilter=\"\";\n  if (client.isUseASP())   ASPFilter=\"   AND (   p.AD_Process_Para_ID IN ( \" + \"              SELECT pp.AD_Process_Para_ID \" + \"                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl \"+ \"               WHERE p.ASP_Level_ID = l.ASP_Level_ID \"+ \"                 AND cl.AD_Client_ID = \" + client.getAD_Client_ID() + \"                 AND cl.ASP_Level_ID = l.ASP_Level_ID \"+ \"                 AND pp.ASP_Process_ID = p.ASP_Process_ID \"+ \"                 AND pp.IsActive = 'Y' \"+ \"                 AND p.IsActive = 'Y' \"+ \"                 AND l.IsActive = 'Y' \"+ \"                 AND cl.IsActive = 'Y' \"+ \"                 AND pp.ASP_Status = 'S') \"+ \"        OR p.AD_Process_Para_ID IN ( \"+ \"              SELECT AD_Process_Para_ID \"+ \"                FROM ASP_ClientException ce \"+ \"               WHERE ce.AD_Client_ID = \"+ client.getAD_Client_ID()+ \"                 AND ce.IsActive = 'Y' \"+ \"                 AND ce.AD_Process_Para_ID IS NOT NULL \"+ \"                 AND ce.AD_Tab_ID IS NULL \"+ \"                 AND ce.AD_Field_ID IS NULL \"+ \"                 AND ce.ASP_Status = 'S') \"+ \"       ) \"+ \"   AND p.AD_Process_Para_ID NOT IN ( \"+ \"          SELECT AD_Process_Para_ID \"+ \"            FROM ASP_ClientException ce \"+ \"           WHERE ce.AD_Client_ID = \"+ client.getAD_Client_ID()+ \"             AND ce.IsActive = 'Y' \"+ \"             AND ce.AD_Process_Para_ID IS NOT NULL \"+ \"             AND ce.AD_Tab_ID IS NULL \"+ \"             AND ce.AD_Field_ID IS NULL \"+ \"             AND ce.ASP_Status = 'H')\";\n  String sql=null;\n  if (Env.isBaseLanguage(Env.getCtx(),\"AD_Process_Para\"))   sql=\"SELECT p.Name, p.Description, p.Help, \" + \"p.AD_Reference_ID, p.AD_Process_Para_ID, \" + \"p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, \"+ \"p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, \"+ \"p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, \"+ \"p.ReadOnlyLogic, p.DisplayLogic \"+ \"FROM AD_Process_Para p\"+ \" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) \"+ \"WHERE p.AD_Process_ID=?\"+ \" AND p.IsActive='Y' \" + ASPFilter + \" ORDER BY SeqNo\";\n else   sql=\"SELECT t.Name, t.Description, t.Help, \" + \"p.AD_Reference_ID, p.AD_Process_Para_ID, \" + \"p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, \"+ \"p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, \"+ \"p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, \"+ \"p.ReadOnlyLogic, p.DisplayLogic \"+ \"FROM AD_Process_Para p\"+ \" INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)\"+ \" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) \"+ \"WHERE p.AD_Process_ID=?\"+ \" AND t.AD_Language='\" + Env.getAD_Language(Env.getCtx()) + \"'\"+ \" AND p.IsActive='Y' \"+ ASPFilter+ \" ORDER BY SeqNo\";\n  boolean hasFields=false;\n  Rows rows=new Rows();\n  try {\n    PreparedStatement pstmt=DB.prepareStatement(sql,null);\n    pstmt.setInt(1,m_processInfo.getAD_Process_ID());\n    ResultSet rs=pstmt.executeQuery();\n    int field=0;\n    Row row=null;\n    while (rs.next()) {\n      hasFields=true;\n      field++;\n      if (field % 2 == 0 && mode == BROWSER_MODE) {\n        row=createField(rs,rows,row);\n      }\n else {\n        row=createField(rs,rows,null);\n      }\n    }\n    rs.close();\n    pstmt.close();\n  }\n catch (  SQLException e) {\n    log.log(Level.SEVERE,sql,e);\n  }\n  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_wEditors.size() || m_mFields2.size() != m_wEditors2.size())   log.log(Level.SEVERE,\"View & Model vector size is different\");\n  if (hasFields) {\n    centerPanel.appendChild(rows);\n    dynamicDisplay();\n  }\n else   dispose();\n  return hasFields;\n}"}
{"ids": "3074", "raw_code": "public static String detectPropertiesPath(){\n  String override=System.getProperty(\"sslPropertiesFile\");\n  if (override != null) {\n    return override;\n  }\n  String jarPath=detectJarPath();\n  String propFile=Constants.PROPS_FILE + \".properties\";\n  return fixWhitespaces(getParentDirectory(jarPath) + File.separator + propFile);\n}"}
{"ids": "41188", "raw_code": "static int formatFloat(final char[] out,float val,int digits){\n  boolean negative=false;\n  if (val == 0) {\n    out[0]='0';\n    return 1;\n  }\n  if (val < 0) {\n    negative=true;\n    val=-val;\n  }\n  if (digits >= POW10.length) {\n    digits=POW10.length - 1;\n  }\n  val*=POW10[digits];\n  long lval=Math.round(val);\n  int index=out.length - 1;\n  int charCount=0;\n  while (lval != 0 || charCount < (digits + 1)) {\n    int digit=(int)(lval % 10);\n    lval=lval / 10;\n    out[index--]=(char)(digit + '0');\n    charCount++;\n    if (charCount == digits) {\n      out[index--]='.';\n      charCount++;\n    }\n  }\n  if (negative) {\n    out[index]='-';\n    charCount++;\n  }\n  return charCount;\n}"}
{"ids": "71803", "raw_code": "public void resume(){\n  mPaused=false;\n  mLastFrameTime=System.currentTimeMillis();\n  invalidate();\n}"}
{"ids": "61933", "raw_code": "public GaussianDensityFunction(Double mean,Double variance){\n  this.mean=new double[]{mean};\n  this.variance=new double[]{variance};\n  stdDev=new double[]{Math.sqrt(variance)};\n  if (variance < 0) {\n    log.warning(\"variance should not be negative, but is : \" + variance);\n  }\n}"}
{"ids": "46136", "raw_code": "int encryptFinal(byte[] in,int inOfs,int len,byte[] out,int outOfs) throws IllegalBlockSizeException, ShortBufferException {\n  if (out.length - outOfs < (len + tagLenBytes)) {\n    throw new ShortBufferException(\"Output buffer too small\");\n  }\n  processAAD();\n  if (len > 0) {\n    doLastBlock(in,inOfs,len,out,outOfs,true);\n  }\n  byte[] lengthBlock=getLengthBlock(sizeOfAAD * 8,processed * 8);\n  ghashAllToS.update(lengthBlock);\n  byte[] s=ghashAllToS.digest();\n  byte[] sOut=new byte[s.length];\n  GCTR gctrForSToTag=new GCTR(embeddedCipher,this.preCounterBlock);\n  gctrForSToTag.doFinal(s,0,s.length,sOut,0);\n  System.arraycopy(sOut,0,out,(outOfs + len),tagLenBytes);\n  return (len + tagLenBytes);\n}"}
{"ids": "31232", "raw_code": "private float interpolate(){\n  long currTime=System.currentTimeMillis();\n  float elapsed=(currTime - startTime) / ZOOM_TIME;\n  elapsed=Math.min(1f,elapsed);\n  return interpolator.getInterpolation(elapsed);\n}"}
{"ids": "72292", "raw_code": "public static String componentToImageColName(String component){\n  if (component.equals(MixnMatchColumns.KEY_HOMESCREEN)) {\n    return ThemesColumns.HOMESCREEN_URI;\n  }\n else   if (component.equals(MixnMatchColumns.KEY_LOCKSCREEN)) {\n    return ThemesColumns.LOCKSCREEN_URI;\n  }\n else   if (component.equals(MixnMatchColumns.KEY_BOOT_ANIM)) {\n    return ThemesColumns.BOOT_ANIM_URI;\n  }\n else   if (component.equals(MixnMatchColumns.KEY_FONT)) {\n    return ThemesColumns.FONT_URI;\n  }\n else   if (component.equals(MixnMatchColumns.KEY_ICONS)) {\n    return ThemesColumns.ICON_URI;\n  }\n else   if (component.equals(MixnMatchColumns.KEY_STATUS_BAR)) {\n    return ThemesColumns.STATUSBAR_URI;\n  }\n else   if (component.equals(MixnMatchColumns.KEY_NOTIFICATIONS)) {\n    throw new IllegalArgumentException(\"Notifications mixnmatch component does not have a related column\");\n  }\n else   if (component.equals(MixnMatchColumns.KEY_RINGTONE)) {\n    throw new IllegalArgumentException(\"Ringtone mixnmatch component does not have a related column\");\n  }\n else   if (component.equals(MixnMatchColumns.KEY_OVERLAYS)) {\n    return ThemesColumns.OVERLAYS_URI;\n  }\n else   if (component.equals(MixnMatchColumns.KEY_ALARM)) {\n    throw new IllegalArgumentException(\"Alarm mixnmatch component does not have a related column\");\n  }\n else   if (component.equals(MixnMatchColumns.KEY_NAVIGATION_BAR)) {\n    throw new IllegalArgumentException(\"Navigation bar mixnmatch component does not have a related column\");\n  }\n else   if (component.equals(MixnMatchColumns.KEY_LIVE_LOCK_SCREEN)) {\n    throw new IllegalArgumentException(\"Live lock screen mixnmatch component does not have a related column\");\n  }\n  return null;\n}"}
{"ids": "4110", "raw_code": "public boolean isAbstract(){\n  return Modifier.isAbstract(_method.getModifiers());\n}"}
{"ids": "13772", "raw_code": "public void nodeClicked(RequestInvocationEvent event,int nodeID){\n  boolean forwardTo=false;\n  String strNodeId=Integer.toString(nodeID);\n  if (strNodeId.length() > 2) {\n    String prefix=strNodeId.substring(0,2);\n    if (prefix.equals(AMAdminConstants.TAB_AGENT_PREFIX)) {\n      setPageSessionAttribute(getTrackingTabIDName(),Integer.toString(nodeID));\n      AMViewConfig amconfig=AMViewConfig.getInstance();\n      List list=amconfig.getSupportedAgentTypes(getModel());\n      strNodeId=strNodeId.substring(2);\n      int idx=Integer.parseInt(strNodeId);\n      if (idx < list.size()) {\n        setPageSessionAttribute(PG_SESSION_AGENT_TYPE,(String)list.get(idx));\n        AMPostViewBean vb=(AMPostViewBean)getViewBean(AMPostViewBean.class);\n        passPgSessionMap(vb);\n        vb.setTargetViewBeanURL(\"../agentconfig/Agents\");\n        vb.forwardTo(getRequestContext());\n        forwardTo=true;\n      }\n    }\n  }\n  if (!forwardTo) {\n    try {\n      AMViewBeanBase vb=getTabNodeAssociatedViewBean(\"realms\",nodeID);\n      String tmp=(String)getPageSessionAttribute(AMAdminConstants.PREVIOUS_REALM);\n      vb.setPageSessionAttribute(AMAdminConstants.PREVIOUS_REALM,tmp);\n      tmp=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);\n      vb.setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,tmp);\n      tmp=(String)getPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID);\n      vb.setPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID,tmp);\n      unlockPageTrailForSwapping();\n      passPgSessionMap(vb);\n      vb.forwardTo(getRequestContext());\n    }\n catch (    AMConsoleException e) {\n      debug.error(\"AgentViewBean.nodeClicked\",e);\n      forwardTo();\n    }\n  }\n}"}
{"ids": "56365", "raw_code": "private static void parseCopyFields(ParseContext context,FieldMapper fieldMapper,List<String> copyToFields) throws IOException {\n  if (!context.isWithinCopyTo() && copyToFields.isEmpty() == false) {\n    context=context.createCopyToContext();\n    for (    String field : copyToFields) {\n      ParseContext.Document targetDoc=null;\n      for (ParseContext.Document doc=context.doc(); doc != null; doc=doc.getParent()) {\n        if (field.startsWith(doc.getPrefix())) {\n          targetDoc=doc;\n          break;\n        }\n      }\n      assert targetDoc != null;\n      final ParseContext copyToContext;\n      if (targetDoc == context.doc()) {\n        copyToContext=context;\n      }\n else {\n        copyToContext=context.switchDoc(targetDoc);\n      }\n      parseCopy(field,copyToContext);\n    }\n  }\n}"}
{"ids": "8923", "raw_code": "protected File createObbFile(String name,int rawResId){\n  File outFile=null;\n  try {\n    final File filesDir=mContext.getFilesDir();\n    outFile=new File(filesDir,name);\n    copyRawToFile(rawResId,outFile);\n  }\n catch (  NotFoundException e) {\n    if (outFile != null) {\n      outFile.delete();\n    }\n  }\n  return outFile;\n}"}
{"ids": "80394", "raw_code": "public PlaySoundEntity(String sound,int radius,int volume){\n  this.sounds=sound.split(\", *\");\n  this.radius=radius;\n  this.volume=volume;\n}"}
{"ids": "45934", "raw_code": "public Repository(String domain){\n  this(domain,true);\n}"}
{"ids": "42687", "raw_code": "private void updateView(int viewPosition){\n  notifyItemChanged(viewPosition);\n}"}
{"ids": "40495", "raw_code": "public static String optimize(String... args){\n  return simpleTag(\"optimize\",args);\n}"}
{"ids": "43930", "raw_code": "protected boolean isValidServer(final String server){\n  boolean isValid=checkServerPrefixes(server);\n  if (isValid) {\n    if (server.startsWith(\"http\")) {\n      isValid=canConnect(server);\n    }\n else     if (server.startsWith(\"file:\")) {\n      isValid=isDirectory(server);\n    }\n  }\n  return isValid;\n}"}
{"ids": "17688", "raw_code": "public ConcurrentHashMap(Map<? extends K,? extends V> m){\n  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);\n  putAll(m);\n}"}
{"ids": "34870", "raw_code": "public MapMaker expiration(long duration,TimeUnit unit){\n  if (expirationNanos != 0) {\n    throw new IllegalStateException(\"expiration time of \" + expirationNanos + \" ns was already set\");\n  }\n  if (duration <= 0) {\n    throw new IllegalArgumentException(\"invalid duration: \" + duration);\n  }\n  this.expirationNanos=unit.toNanos(duration);\n  useCustomMap=true;\n  return this;\n}"}
{"ids": "83158", "raw_code": "void initFromNode(final Node fromNode,final double startTime,final PseudoRemovePriorityQueue<Node> pendingNodes){\n  DijkstraNodeData data=getData(fromNode);\n  visitNode(fromNode,data,pendingNodes,startTime,0,null);\n}"}
{"ids": "55763", "raw_code": "public Collection<HTMLToken> tokenizeHTML(){\n  List<HTMLToken> tokens=new ArrayList<HTMLToken>();\n  String nestedTags=nestedTagsRegex(6);\n  Pattern p=Pattern.compile(\"\" + \"(?s:<!(--.*?--\\\\s*)+>)\" + \"|\"+ \"(?s:<\\\\?.*?\\\\?>)\"+ \"|\" + nestedTags + \"\",Pattern.CASE_INSENSITIVE);\n  Matcher m=p.matcher(text);\n  int lastPos=0;\n  while (m.find()) {\n    if (lastPos < m.start()) {\n      tokens.add(HTMLToken.text(text.substring(lastPos,m.start())));\n    }\n    tokens.add(HTMLToken.tag(text.substring(m.start(),m.end())));\n    lastPos=m.end();\n  }\n  if (lastPos < text.length()) {\n    tokens.add(HTMLToken.text(text.substring(lastPos,text.length())));\n  }\n  return tokens;\n}"}
{"ids": "17965", "raw_code": "public int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {\n  if ((inOff + blockSize) > in.length) {\n    throw new DataLengthException(\"input buffer too short\");\n  }\n  if ((outOff + blockSize) > out.length) {\n    throw new DataLengthException(\"output buffer too short\");\n  }\n  cipher.processBlock(cfbV,0,cfbOutV,0);\n  System.arraycopy(cfbV,blockSize,cfbV,0,cfbV.length - blockSize);\n  System.arraycopy(in,inOff,cfbV,cfbV.length - blockSize,blockSize);\n  for (int i=0; i < blockSize; i++) {\n    out[outOff + i]=(byte)(cfbOutV[i] ^ in[inOff + i]);\n  }\n  return blockSize;\n}"}
{"ids": "61800", "raw_code": "private String computeMd5Hash(String buffer){\n  MessageDigest md;\n  try {\n    md=MessageDigest.getInstance(\"MD5\");\n    return bytesToHex(md.digest(buffer.getBytes(\"UTF-8\")));\n  }\n catch (  NoSuchAlgorithmException ignore) {\n  }\ncatch (  UnsupportedEncodingException e) {\n  }\n  return \"\";\n}"}
{"ids": "68628", "raw_code": "public static void checkArgument(boolean expression,@Nullable Object errorMessage){\n  if (!expression) {\n    throw new IllegalArgumentException(String.valueOf(errorMessage));\n  }\n}"}
{"ids": "32533", "raw_code": "public void run() throws IOException, InterruptedException {\n  for (int i=0; i < connCnt; i++)   exec.submit(new ClientThread());\n  Thread.sleep(5 * 60 * 1000);\n  exec.shutdownNow();\n}"}
{"ids": "30223", "raw_code": "public static String pluralize(String word){\n  if (word == null) {\n    throw new IllegalArgumentException();\n  }\n  final String lowerCaseWord=word.toLowerCase();\n  if (endsWithAny(lowerCaseWord,\"s\",\"sh\",\"o\")) {\n    return word + \"es\";\n  }\n  if (lowerCaseWord.endsWith(\"y\") && !lowerCaseWord.endsWith(\"ay\") || endsWithAny(lowerCaseWord,\"ey\",\"oy\",\"uy\")) {\n    return word.substring(0,word.length() - 1) + \"ies\";\n  }\n else {\n    return word + \"s\";\n  }\n}"}
{"ids": "5604", "raw_code": "protected void onNetworkTypeChange(NetworkInfo oldNetwork,NetworkInfo newNetwork) throws RouterException {\n  log.info(String.format(\"Network type changed %s => %s\",oldNetwork == null ? \"\" : oldNetwork.getTypeName(),newNetwork == null ? \"NONE\" : newNetwork.getTypeName()));\n  if (disable()) {\n    log.info(String.format(\"Disabled router on network type change (old network: %s)\",oldNetwork == null ? \"NONE\" : oldNetwork.getTypeName()));\n  }\n  networkInfo=newNetwork;\n  if (enable()) {\n    log.info(String.format(\"Enabled router on network type change (new network: %s)\",newNetwork == null ? \"NONE\" : newNetwork.getTypeName()));\n  }\n}"}
{"ids": "77188", "raw_code": "private LinkedHashMap<Term,Integer> repeatingTerms(){\n  LinkedHashMap<Term,Integer> tord=new LinkedHashMap<>();\n  HashMap<Term,Integer> tcnt=new HashMap<>();\n  for (  PhrasePositions pp : phrasePositions) {\n    for (    Term t : pp.terms) {\n      Integer cnt0=tcnt.get(t);\n      Integer cnt=cnt0 == null ? new Integer(1) : new Integer(1 + cnt0.intValue());\n      tcnt.put(t,cnt);\n      if (cnt == 2) {\n        tord.put(t,tord.size());\n      }\n    }\n  }\n  return tord;\n}"}
{"ids": "25004", "raw_code": "public List<InetAddress> discoverHosts(int udpPort,int timeoutMillis){\n  List<InetAddress> hosts=new ArrayList<InetAddress>();\n  DatagramSocket socket=null;\n  try {\n    socket=new DatagramSocket();\n    broadcast(udpPort,socket);\n    socket.setSoTimeout(timeoutMillis);\n    while (true) {\n      DatagramPacket packet=new DatagramPacket(new byte[0],0);\n      try {\n        socket.receive(packet);\n      }\n catch (      SocketTimeoutException ex) {\n        if (INFO)         info(\"kryonet\",\"Host discovery timed out.\");\n        return hosts;\n      }\n      if (INFO)       info(\"kryonet\",\"Discovered server: \" + packet.getAddress());\n      hosts.add(packet.getAddress());\n    }\n  }\n catch (  IOException ex) {\n    if (ERROR)     error(\"kryonet\",\"Host discovery failed.\",ex);\n    return hosts;\n  }\n finally {\n    if (socket != null)     socket.close();\n  }\n}"}
{"ids": "39836", "raw_code": "protected void reloadClusterConfiguration(){\nsynchronized (this.cluster) {\n    loadClusterConfiguration();\n  }\n}"}
{"ids": "43083", "raw_code": "public double expectedUtility(NondominatedPopulation population){\n  double sum=0.0;\n  for (int i=0; i < weights.length; i++) {\n    double max=Double.NEGATIVE_INFINITY;\n    for (    Solution solution : population) {\n      max=Math.max(max,utilityFunction.computeUtility(solution,weights[i]));\n    }\n    sum+=max;\n  }\n  return sum / weights.length;\n}"}
{"ids": "4805", "raw_code": "public void count(HashMap<String,TreeMap<String,Integer>> table,String suffix,String tag){\n  TreeMap<String,Integer> counts=table.get(suffix);\n  if (counts == null) {\n    counts=new TreeMap<String,Integer>();\n    table.put(suffix,counts);\n  }\n  Integer count=counts.get(tag);\n  if (count == null)   count=0;\n  counts.put(tag,count + 1);\n}"}
{"ids": "82100", "raw_code": "public void addInputMode(String mode,String[][] inputChars){\n  modesMap.put(mode,inputChars);\n}"}
{"ids": "26440", "raw_code": "public static java.util.Date toDate(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){\n  int month, day, year, hour, minute, second;\n  try {\n    month=Integer.parseInt(monthStr);\n    day=Integer.parseInt(dayStr);\n    year=Integer.parseInt(yearStr);\n    hour=Integer.parseInt(hourStr);\n    minute=Integer.parseInt(minuteStr);\n    second=Integer.parseInt(secondStr);\n  }\n catch (  Exception e) {\n    return null;\n  }\n  return toDate(month,day,year,hour,minute,second);\n}"}
{"ids": "11318", "raw_code": "public void propertyChange(PropertyChangeEvent pce){\n  if (pce.getPropertyName() == OMDrawingTool.LoadersProperty) {\n    Object obj=pce.getNewValue();\n    if (obj instanceof Vector) {\n      Vector<EditToolLoader> loaders=(Vector<EditToolLoader>)obj;\n      setLoaders(loaders.iterator());\n      resetGUI();\n    }\n  }\n}"}
{"ids": "41494", "raw_code": "public void removeAppOffer(Offer offer){\n  int indexToRemove=getIndex(offer);\n  if (indexToRemove != -1) {\n    appOffers.remove(indexToRemove);\n    notifyDataSetChanged();\n  }\n}"}
{"ids": "45867", "raw_code": "public Data transform(Data data,XMLCryptoContext xc) throws TransformException {\n  return spi.transform(data,xc);\n}"}
{"ids": "25232", "raw_code": "public static int compare(Comparable c1,Comparable c2,boolean nullGreater){\n  if (c1 == c2) {\n    return 0;\n  }\n else   if (c1 == null) {\n    return (nullGreater ? 1 : -1);\n  }\n else   if (c2 == null) {\n    return (nullGreater ? -1 : 1);\n  }\n  return c1.compareTo(c2);\n}"}
{"ids": "53174", "raw_code": "public static double quantile(double val,double mu,double sigma,double xi){\n  if (val < 0.0 || val > 1.0) {\n    return Double.NaN;\n  }\n  if (xi == 0.) {\n    return mu - sigma * Math.log(1 - val);\n  }\n  return mu - sigma / xi * (1 - Math.pow(1 - val,-xi));\n}"}
{"ids": "15127", "raw_code": "OathDeviceSettings createDeviceProfile(int minSharedSecretLength){\n  Reject.ifFalse(minSharedSecretLength >= 0,\"minSharedSecretLength must not be negative\");\n  int sharedSecretByteLength=Math.max(MIN_SHARED_SECRET_BYTE_LENGTH,(int)Math.ceil(minSharedSecretLength / 2d));\n  byte[] secretBytes=new byte[sharedSecretByteLength];\n  secureRandom.nextBytes(secretBytes);\n  String sharedSecret=DatatypeConverter.printHexBinary(secretBytes);\n  return new OathDeviceSettings(sharedSecret,DEVICE_NAME,INITIAL_LAST_LOGIN_TIME,INITIAL_COUNTER_VALUE);\n}"}
{"ids": "52260", "raw_code": "public final void deleteSelectedObjects(){\n  Component[] components=getComponents();\n  List<DisplayNode> graphNodes=new ArrayList<>();\n  List<IDisplayEdge> graphEdges=new ArrayList<>();\n  for (  Component comp : components) {\n    if (comp instanceof DisplayNode) {\n      if (!isDeleteVariablesAllowed()) {\n        continue;\n      }\n      DisplayNode node=(DisplayNode)comp;\n      if (node.isSelected()) {\n        graphNodes.add(node);\n      }\n    }\n else     if (comp instanceof IDisplayEdge) {\n      IDisplayEdge edge=(IDisplayEdge)comp;\n      if (edge.isSelected()) {\n        graphEdges.add(edge);\n      }\n    }\n  }\n  for (  DisplayNode graphNode : graphNodes) {\n    removeNode(graphNode);\n  }\n  for (  IDisplayEdge displayEdge : graphEdges) {\n    try {\n      removeEdge(displayEdge);\n      resetEdgeOffsets(displayEdge);\n    }\n catch (    Exception e) {\n      if (isNodeEdgeErrorsReported()) {\n        JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),e.getMessage());\n      }\n    }\n  }\n}"}
{"ids": "9071", "raw_code": "protected final void initStatistics(String who,String[] headerLines) throws AdeException {\n  setStatsFilePath();\n  if (statsFilePath == null) {\n    throw new AdeInternalException(\"No Statistics File path was specified\");\n  }\n  appendStatString(SPACER);\n  appendStatString(String.format(\"[%s] %s start (approximate)\",currentTimeStamp(),who));\n  appendStatString(SPACER);\n  for (int i=0; i < headerLines.length; i++) {\n    appendStatString(headerLines[i]);\n  }\n  appendStatString(SPACER);\n}"}
{"ids": "79283", "raw_code": "public static Map<String,Object> dayEndCapacityAvailable(GenericValue techDataCalendarWeek,int dayEnd){\n  Map<String,Object> result=FastMap.newInstance();\n  int moveDay=0;\n  Double capacity=null;\n  Time startTime=null;\n  while (capacity == null || capacity.doubleValue() == 0) {\nswitch (dayEnd) {\ncase Calendar.MONDAY:\n      capacity=techDataCalendarWeek.getDouble(\"mondayCapacity\");\n    startTime=techDataCalendarWeek.getTime(\"mondayStartTime\");\n  break;\ncase Calendar.TUESDAY:\ncapacity=techDataCalendarWeek.getDouble(\"tuesdayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"tuesdayStartTime\");\nbreak;\ncase Calendar.WEDNESDAY:\ncapacity=techDataCalendarWeek.getDouble(\"wednesdayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"wednesdayStartTime\");\nbreak;\ncase Calendar.THURSDAY:\ncapacity=techDataCalendarWeek.getDouble(\"thursdayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"thursdayStartTime\");\nbreak;\ncase Calendar.FRIDAY:\ncapacity=techDataCalendarWeek.getDouble(\"fridayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"fridayStartTime\");\nbreak;\ncase Calendar.SATURDAY:\ncapacity=techDataCalendarWeek.getDouble(\"saturdayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"saturdayStartTime\");\nbreak;\ncase Calendar.SUNDAY:\ncapacity=techDataCalendarWeek.getDouble(\"sundayCapacity\");\nstartTime=techDataCalendarWeek.getTime(\"sundayStartTime\");\nbreak;\n}\nif (capacity == null || capacity.doubleValue() == 0) {\nmoveDay-=1;\ndayEnd=(dayEnd == 1) ? 7 : dayEnd - 1;\n}\n}\nresult.put(\"capacity\",capacity);\nresult.put(\"startTime\",startTime);\nresult.put(\"moveDay\",Integer.valueOf(moveDay));\nreturn result;\n}"}
{"ids": "31002", "raw_code": "protected void addClassPath(String classpath){\n  if (classpath == null)   return;\n  String sep=classpath.indexOf(\";\") == -1 ? \":\" : \";\";\n  String[] parseCp=classpath.split(sep);\n  for (  String cpEntry : parseCp) {\n    addEntry(cpEntry);\n  }\n}"}
{"ids": "19485", "raw_code": "@Inject EntryUploaderImpl(EntryInserter entryInserter,EntryProvider entryProvider,EntryUpdater entryUpdater){\n  this.entryInserter=checkNotNull(entryInserter);\n  this.entryProvider=checkNotNull(entryProvider);\n  this.entryUpdater=checkNotNull(entryUpdater);\n}"}
{"ids": "50213", "raw_code": "protected void add(long bytesIn,long bytesOut){\n  totalBytesIn.addAndGet(bytesIn);\n  totalBytesOut.addAndGet(bytesOut);\n}"}
{"ids": "40626", "raw_code": "public static double vectorDistance(double[] vec1,double[] vec2,double power,double oneOverPower){\n  double result=0;\n  if (power == 0) {\n    for (int i=0; i < vec1.length; i++) {\n      result+=vec1[i] - vec2[i] == 0 ? 0 : 1;\n    }\n  }\n else   if (power == 1.0) {\n    for (int i=0; i < vec1.length; i++) {\n      result+=Math.abs(vec1[i] - vec2[i]);\n    }\n  }\n else   if (power == 2.0) {\n    result=Math.sqrt(distSquaredCartesian(vec1,vec2));\n  }\n else   if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {\n    for (int i=0; i < vec1.length; i++) {\n      result=Math.max(result,Math.max(vec1[i],vec2[i]));\n    }\n  }\n else {\n    for (int i=0; i < vec1.length; i++) {\n      result+=Math.pow(vec1[i] - vec2[i],power);\n    }\n    result=Math.pow(result,oneOverPower);\n  }\n  return result;\n}"}
{"ids": "43291", "raw_code": "public static float[] randomVector(int aSize,long seed){\n  Random rand=new Random(seed);\n  float[] unk=new float[aSize];\n  for (int i=0; i < unk.length; i++) {\n    unk[i]=(rand.nextFloat() - 0.5f) / aSize;\n  }\n  return unk;\n}"}
{"ids": "35006", "raw_code": "public boolean wasRaw(){\n  return wasRaw;\n}"}
{"ids": "71584", "raw_code": "public Table findTable(String catalogName,String schemaName,String tableName,boolean caseSensitive){\n  String cacheKey=catalogName + \".\" + schemaName+ \".\"+ tableName+ \".\"+ caseSensitive;\n  Integer tableIndex=tableIndexCache.get(cacheKey);\n  if (tableIndex != null) {\n    if (tableIndex < getTableCount()) {\n      Table table=getTable(tableIndex);\n      if (doesMatch(table,catalogName,schemaName,tableName,caseSensitive)) {\n        return table;\n      }\n    }\n  }\n  Table[] tables=getTables();\n  for (int i=0; i < tables.length; i++) {\n    Table table=tables[i];\n    if (doesMatch(table,catalogName,schemaName,tableName,caseSensitive)) {\n      tableIndexCache.put(cacheKey,i);\n      return table;\n    }\n  }\n  return null;\n}"}
{"ids": "50762", "raw_code": "public void flush(){\n  writeDataBlock();\n}"}
{"ids": "10845", "raw_code": "protected CRFPCoverageBox[] vectorToCRFPCoverageBoxes(Vector vector){\n  int size=vector.size();\n  CRFPCoverageBox[] rets=new CRFPCoverageBox[size];\n  for (int i=0; i < size; i++) {\n    RpfCoverageBox box=(RpfCoverageBox)vector.elementAt(i);\n    if (box != null) {\n      rets[i]=new CRFPCoverageBox((float)box.nw_lat,(float)box.nw_lon,(float)box.se_lat,(float)box.se_lon,box.subframeLatInterval,box.subframeLonInterval,box.chartCode,(short)box.zone,new XYPoint((short)box.startIndexes.x,(short)box.startIndexes.y),new XYPoint((short)box.endIndexes.x,(short)box.endIndexes.y),(short)box.tocNumber,(short)box.entryNumber,box.scale,box.percentCoverage);\n    }\n  }\n  return rets;\n}"}
{"ids": "70401", "raw_code": "public void notifyListenersOfInitialization(){\n  if (initialized) {\n    for (    ActionListener l : listeners) {\n      l.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,\"rugInitialized\"));\n    }\n  }\n}"}
{"ids": "33310", "raw_code": "public void checkPassword(String password) throws BadRequestException {\n  if (password == null) {\n    throw new BadRequestException(\"Password required\");\n  }\n  if (password.length() < 8) {\n    throw new BadRequestException(\"Password should contain at least 8 characters\");\n  }\n  int numOfLetters=0;\n  int numOfDigits=0;\n  for (  char passwordChar : password.toCharArray()) {\n    if (Character.isDigit(passwordChar)) {\n      numOfDigits++;\n    }\n else     if (Character.isLetter(passwordChar)) {\n      numOfLetters++;\n    }\n  }\n  if (numOfDigits == 0 || numOfLetters == 0) {\n    throw new BadRequestException(\"Password should contain letters and digits\");\n  }\n}"}
{"ids": "47250", "raw_code": "final Node<K,V> find(int h,Object k){\n  if (k != null) {\n    for (Node<K,V> e=first; e != null; ) {\n      int s;\n      K ek;\n      if (((s=lockState) & (WAITER | WRITER)) != 0) {\n        if (e.hash == h && ((ek=e.key) == k || (ek != null && k.equals(ek))))         return e;\n        e=e.next;\n      }\n else       if (U.compareAndSwapInt(this,LOCKSTATE,s,s + READER)) {\n        TreeNode<K,V> r, p;\n        try {\n          p=((r=root) == null ? null : r.findTreeNode(h,k,null));\n        }\n  finally {\n          Thread w;\n          if (U.getAndAddInt(this,LOCKSTATE,-READER) == (READER | WAITER) && (w=waiter) != null)           LockSupport.unpark(w);\n        }\n        return p;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "24239", "raw_code": "@SuppressWarnings(\"rawtypes\") private void collectAllRegionsDetails(SystemMemberCacheJmxImpl cache,RegionSubRegionSnapshot regionSnapshot,Map<String,Map<String,?>> regionsInfo,Map<String,ObjectName> existingRegionMbeans) throws AdminException, OperationsException, MBeanException, ReflectionException {\n  String fullPath=regionSnapshot.getFullPath();\n  if (!fullPath.equals(PLACE_HOLDER_ROOT_REGION)) {\n    fullPath=fullPath.substring(PLACE_HOLDER_ROOT_REGION.length() - 1);\n    String name=regionSnapshot.getName();\n    Integer entryCount=Integer.valueOf(regionSnapshot.getEntryCount());\n    Map<String,Object> details=new TreeMap<String,Object>();\n    details.put(REGION_NAME,name);\n    details.put(REGION_PATH,fullPath);\n    details.put(REGION_ENTRYCOUNT,entryCount);\n    ObjectName regionObjectName=existingRegionMbeans.get(fullPath);\n    if (regionObjectName == null) {\n      regionObjectName=cache.manageRegion(fullPath);\n    }\n    Object attribute=getAttribute(regionObjectName,\"scope\",NOT_AVAILABLE);\n    attribute=attribute != null ? attribute.toString() : attribute;\n    details.put(REGION_SCOPE,attribute);\n    attribute=getAttribute(regionObjectName,\"dataPolicy\",NOT_AVAILABLE);\n    attribute=attribute != null ? attribute.toString() : attribute;\n    details.put(REGION_DATAPOLICY,attribute);\n    SubscriptionAttributes interestPolicyAttr=(SubscriptionAttributes)getAttribute(regionObjectName,\"subscriptionAttributes\",null);\n    String interestPolicyStr=NOT_AVAILABLE;\n    if (interestPolicyAttr != null) {\n      InterestPolicy interestPolicy=interestPolicyAttr.getInterestPolicy();\n      if (interestPolicy != null) {\n        interestPolicyStr=interestPolicy.toString();\n      }\n    }\n    details.put(REGION_INTERESTPOLICY,interestPolicyStr);\n    attribute=getAttribute(regionObjectName,\"diskWriteAttributes\",NOT_AVAILABLE);\n    attribute=attribute != null ? attribute.toString() : attribute;\n    details.put(REGION_DISKATTRS,attribute);\n    regionsInfo.put(fullPath,details);\n  }\n  Set subRegionSnapshots=regionSnapshot.getSubRegionSnapshots();\n  for (Iterator iterator=subRegionSnapshots.iterator(); iterator.hasNext(); ) {\n    RegionSubRegionSnapshot subRegion=(RegionSubRegionSnapshot)iterator.next();\n    collectAllRegionsDetails(cache,subRegion,regionsInfo,existingRegionMbeans);\n  }\n}"}
{"ids": "69747", "raw_code": "public synchronized boolean removeSuspendedResponse(WorkerCategory category,Response response){\n  Deque<Response> deque=workersByCategory.get(category);\n  if (deque == null) {\n    return false;\n  }\n  if (deque.remove(response)) {\n    nWaitingConsumers-=1;\n    LOG.debug(\"Removed closed connection from queue.\");\n    return true;\n  }\n  return false;\n}"}
{"ids": "42941", "raw_code": "public static Number sin(Number a){\n  return Math.sin(a.doubleValue());\n}"}
{"ids": "33919", "raw_code": "private TypedClassOperation instantiateOperationTypes(TypedClassOperation operation){\n  List<TypeVariable> typeParameters=operation.getTypeParameters();\n  if (typeParameters.isEmpty()) {\n    return operation;\n  }\n  Substitution<ReferenceType> substitution=selectSubstitution(typeParameters);\n  if (substitution == null) {\n    return null;\n  }\n  return operation.apply(substitution);\n}"}
{"ids": "56582", "raw_code": "default T fold(final T identity,final BinaryOperator<T> accumulator){\n  final Optional<T> opt=toOptional();\n  if (opt.isPresent())   return accumulator.apply(identity,get());\n  return identity;\n}"}
{"ids": "43647", "raw_code": "protected void load(String filename,Properties p) throws FileNotFoundException {\n  File file=new File(filename);\n  if (!file.exists())   throw new FileNotFoundException(filename);\n  classifier=new CRFClassifier<CoreLabel>(p);\n  try {\n    classifier.loadClassifier(file,p);\n  }\n catch (  ClassCastException e) {\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n  }\ncatch (  ClassNotFoundException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "10854", "raw_code": "public String resolveFont(java.awt.Font font){\n  String ret=\"-*\";\n  ret=ret.concat(\"-\" + font.getName());\n  if (font.isBold())   ret=ret.concat(\"-bold\");\n else   ret=ret.concat(\"-normal\");\n  if (font.isItalic())   ret=ret.concat(\"-i\");\n else   ret=ret.concat(\"-o\");\n  ret=ret.concat(\"-normal\");\n  ret=ret.concat(\"--\" + font.getSize());\n  ret=ret.concat(\"-*\");\n  ret=ret.concat(\"-*\");\n  ret=ret.concat(\"-*\");\n  ret=ret.concat(\"-*\");\n  ret=ret.concat(\"-*\");\n  ret=ret.concat(\"-*\");\n  return ret;\n}"}
{"ids": "37490", "raw_code": "public void addLineContent(final ZyLineContent line){\n  Preconditions.checkNotNull(line,\"Internal Error: Line content can't be null\");\n  m_content.add(line);\n}"}
{"ids": "26076", "raw_code": "public static boolean excludeByPackage(String pkg,List<String> excludePkg){\n  for (  String ep : excludePkg) {\n    if (pkg.matches(ep)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "23899", "raw_code": "public RegionVersionHolder(long ver){\n  this.version=ver;\n}"}
{"ids": "63232", "raw_code": "public static void writeFully(FileChannel file,long pos,ByteBuffer src){\n  try {\n    int off=0;\n    do {\n      int len=file.write(src,pos + off);\n      off+=len;\n    }\n while (src.remaining() > 0);\n  }\n catch (  IOException e) {\n    throw newIllegalStateException(ERROR_WRITING_FAILED,\"Writing to {0} failed; length {1} at {2}\",file,src.remaining(),pos,e);\n  }\n}"}
{"ids": "1299", "raw_code": "public void updateRequestTimeout(TimeSpan span) throws SecurityException, ApplicationException {\n  checkWriteAccess();\n  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);\n  if (!hasAccess)   throw new SecurityException(\"no access to update scope setting\");\n  Element scope=_getRootElement(\"scope\");\n  Element application=_getRootElement(\"application\");\n  if (span != null) {\n    if (span.getMillis() <= 0)     throw new ApplicationException(\"value must be a positive number\");\n    application.setAttribute(\"requesttimeout\",span.getDay() + \",\" + span.getHour()+ \",\"+ span.getMinute()+ \",\"+ span.getSecond());\n  }\n else   application.removeAttribute(\"requesttimeout\");\n  if (scope.hasAttribute(\"requesttimeout\"))   scope.removeAttribute(\"requesttimeout\");\n}"}
{"ids": "22937", "raw_code": "@Override protected boolean calcProblem(){\n  String type=getTagWithKey(Tags.KEY_TYPE);\n  if (type == null || type.equals(\"\")) {\n    return true;\n  }\n  return super.calcProblem();\n}"}
{"ids": "85146", "raw_code": "public int readByte() throws IOException {\n  ++length;\n  return in.read() & 0xff;\n}"}
{"ids": "67833", "raw_code": "public void updateShapeShadowsToCurrentTime(boolean updateMinutes,boolean updateHours,int currentMinute,int currentHour){\n  if (updateMinutes) {\n    int tens=(int)Math.floor(currentMinute / 10.0f);\n    int units=(int)Math.floor(currentMinute % 10.0f);\n    if (minutesTens.getCurrentValue() != tens) {\n      String mt=String.format(\"%d\",tens);\n      mt=mt.concat(\".json\");\n      Log.d(TAG,\"MINUTE TENS STRING: \" + mt);\n      minutesTens.parseJSON(mt);\n    }\n    if (minutesUnits.getCurrentValue() != units) {\n      String mu=String.format(\"%d\",units);\n      mu=mu.concat(\".json\");\n      Log.d(TAG,\"MINUTE UNITS STRING: \" + mu);\n      minutesUnits.parseJSON(mu);\n    }\n  }\n  if (updateHours) {\n    int tens=(int)Math.floor(currentHour / 10.0f);\n    int units=(int)Math.floor(currentHour % 10.0f);\n    if (hoursTens.getCurrentValue() != tens) {\n      String ht=String.format(\"%d\",tens);\n      ht=ht.concat(\".json\");\n      Log.d(TAG,\"HOURS TENS STRING: \" + ht);\n      hoursTens.parseJSON(ht);\n    }\n    if (hoursUnits.getCurrentValue() != units) {\n      String hu=String.format(\"%d\",units);\n      hu=hu.concat(\".json\");\n      Log.d(TAG,\"HOURS UNITS STRING: \" + hu);\n      hoursUnits.parseJSON(hu);\n    }\n  }\n}"}
{"ids": "4267", "raw_code": "public Set<RawProtein<SuperFamilyHmmer3RawMatch>> parse(InputStream is) throws IOException {\n  Map<String,RawProtein<SuperFamilyHmmer3RawMatch>> data=new HashMap<String,RawProtein<SuperFamilyHmmer3RawMatch>>();\n  BufferedReader reader=null;\n  try {\n    reader=new BufferedReader(new InputStreamReader(is));\n    String line;\n    while ((line=reader.readLine()) != null) {\n      Set<SuperFamilyHmmer3RawMatch> rawMatches=parseLine(line);\n      SuperFamilyHmmer3RawMatch rawMatch;\n      for (      SuperFamilyHmmer3RawMatch rawMatche : rawMatches) {\n        rawMatch=rawMatche;\n        String sequenceId=rawMatch.getSequenceIdentifier();\n        if (data.containsKey(sequenceId)) {\n          RawProtein<SuperFamilyHmmer3RawMatch> rawProtein=data.get(sequenceId);\n          rawProtein.addMatch(rawMatch);\n        }\n else {\n          RawProtein<SuperFamilyHmmer3RawMatch> rawProtein=new RawProtein<SuperFamilyHmmer3RawMatch>(sequenceId);\n          rawProtein.addMatch(rawMatch);\n          data.put(sequenceId,rawProtein);\n        }\n      }\n    }\n  }\n  finally {\n    if (reader != null) {\n      reader.close();\n    }\n  }\n  return new HashSet<RawProtein<SuperFamilyHmmer3RawMatch>>(data.values());\n}"}
{"ids": "61332", "raw_code": "public UnionPathIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {\n  super();\n  opPos=OpMap.getFirstChildPos(opPos);\n  loadLocationPaths(compiler,opPos,0);\n}"}
{"ids": "39133", "raw_code": "public String relationName(){\n  return m_RelationName;\n}"}
{"ids": "22330", "raw_code": "private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {\n  if (namespace.equals(\"\")) {\n    xmlWriter.writeAttribute(attName,attValue);\n  }\n else {\n    registerPrefix(xmlWriter,namespace);\n    xmlWriter.writeAttribute(namespace,attName,attValue);\n  }\n}"}
{"ids": "72248", "raw_code": "@RequestMapping(value=\"/account/change_password\",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> changePassword(@RequestBody String password){\n  if (!checkPasswordLength(password)) {\n    return new ResponseEntity<>(\"Incorrect password\",HttpStatus.BAD_REQUEST);\n  }\n  userService.changePassword(password);\n  return new ResponseEntity<>(HttpStatus.OK);\n}"}
{"ids": "66276", "raw_code": "public static int size(String str){\n  if (str == null)   return 0;\n  int length=str.length();\n  int size=length;\n  try {\n    size=str.getBytes(\"UTF-8\").length;\n  }\n catch (  UnsupportedEncodingException e) {\n    log.log(Level.SEVERE,str,e);\n  }\n  return size;\n}"}
{"ids": "48609", "raw_code": "protected void synchWithTarget() throws MonitorException {\n  long timeLimit=System.currentTimeMillis() + syncWaitMs;\n  log(\"synchWithTarget: \" + lvmid + \" \");\n  while (!prologue.isAccessible()) {\n    log(\".\");\n    try {\n      Thread.sleep(20);\n    }\n catch (    InterruptedException e) {\n    }\n    if (System.currentTimeMillis() > timeLimit) {\n      logln(\"failed: \" + lvmid);\n      throw new MonitorException(\"Could not synchronize with target\");\n    }\n  }\n  logln(\"success: \" + lvmid);\n}"}
{"ids": "85296", "raw_code": "public static CharSequence time(Context context,EasyCursor c){\n  long now=System.currentTimeMillis();\n  long when=c.getLong(Reviews.WRITTEN_ON);\n  return now - when > MINUTE_IN_MILLIS ? DateUtils.getRelativeTimeSpanString(when,now,0,FORMAT_ABBREV_ALL) : context.getString(R.string.recent_time);\n}"}
{"ids": "59852", "raw_code": "private double screenToNormalized(float screenCoord){\n  int width=getWidth();\n  if (width <= 2 * padding) {\n    return 0d;\n  }\n else {\n    double result=(screenCoord - padding) / (width - 2 * padding);\n    return Math.min(1d,Math.max(0d,result));\n  }\n}"}
{"ids": "26023", "raw_code": "public long roundTripTime() throws InterruptedException {\n  latch.await();\n  return received - sent;\n}"}
{"ids": "44961", "raw_code": "static private String userIdFromRange(String[] values,boolean include){\n  int minId=Integer.parseInt(values[3]);\n  int maxId=Integer.parseInt(values[4]);\n  String exclusions=values.length > 5 ? values[5] : null;\n  Stack<Integer> stack=getStack(minId,maxId,exclusions,include);\n  if (stack.size() > 0) {\n    return Integer.toString(stack.pop());\n  }\n  throw new IllegalArgumentException(\"Exhausted random User Ids. Range not large enough for the number of calls.\");\n}"}
{"ids": "10722", "raw_code": "public void actualizaCampo(int tipoFicha,ValorCampoGenericoVO campo){\n  ValorCampoGenericoVO campoAnterior=retrieve(tipoFicha,campo.getTipo(),campo.getIdObjeto(),campo.getIdCampo(),campo.getOrden(),campo.getTipoElemento());\n  if (campoAnterior == null)   insert(tipoFicha,campo);\n else   update(tipoFicha,campo,campoAnterior.getValorInfo());\n}"}
{"ids": "60528", "raw_code": "public static int length(RegExp re){\n  RegExp2 r;\nswitch (re.type) {\ncase sym.BAR:\n{\n      r=(RegExp2)re;\n      int l1=length(r.r1);\n      if (l1 < 0)       return -1;\n      int l2=length(r.r2);\n      if (l1 == l2)       return l1;\n else       return -1;\n    }\ncase sym.CONCAT:\n{\n    r=(RegExp2)re;\n    int l1=length(r.r1);\n    if (l1 < 0)     return -1;\n    int l2=length(r.r2);\n    if (l2 < 0)     return -1;\n    return l1 + l2;\n  }\ncase sym.STAR:\ncase sym.PLUS:\ncase sym.QUESTION:\nreturn -1;\ncase sym.CCLASS:\ncase sym.CCLASSNOT:\ncase sym.CHAR:\ncase sym.CHAR_I:\nreturn 1;\ncase sym.STRING:\ncase sym.STRING_I:\n{\nString content=(String)((RegExp1)re).content;\nreturn content.length();\n}\ncase sym.TILDE:\ncase sym.BANG:\nreturn -1;\ncase sym.MACROUSE:\nreturn length(macros.getDefinition((String)((RegExp1)re).content));\n}\nthrow new Error(\"Unkown expression type \" + re.type + \" in \"+ re);\n}"}
{"ids": "76947", "raw_code": "public static TimeZone randomTimeZone(Random random){\n  String tzIds[]=TimeZone.getAvailableIDs();\n  return TimeZone.getTimeZone(tzIds[random.nextInt(tzIds.length)]);\n}"}
{"ids": "1262", "raw_code": "public static String arrayToList(String[] array,String delimiter){\n  if (ArrayUtil.isEmpty(array))   return \"\";\n  StringBuilder sb=new StringBuilder(array[0]);\n  if (delimiter.length() == 1) {\n    char c=delimiter.charAt(0);\n    for (int i=1; i < array.length; i++) {\n      sb.append(c);\n      sb.append(array[i]);\n    }\n  }\n else {\n    for (int i=1; i < array.length; i++) {\n      sb.append(delimiter);\n      sb.append(array[i]);\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "10182", "raw_code": "@Override public boolean addAll(Collection<? extends E> c){\n  Iterator<? extends E> i=c.iterator();\n  boolean changed=false;\n  while (i.hasNext()) {\n    boolean ret=add(i.next());\n    if (!changed) {\n      changed=ret;\n    }\n  }\n  return changed;\n}"}
{"ids": "35169", "raw_code": "public void reset(){\n  mCodes.clear();\n  mIsFirstCharCapitalized=false;\n  mPreferredWord=null;\n  mTypedWord.setLength(0);\n  mCapsCount=0;\n}"}
{"ids": "68083", "raw_code": "private String extractPath(final String uri){\n  return DefaultWildcardStreamLocator.stripQueryPath(uri.replace(PREFIX,StringUtils.EMPTY));\n}"}
{"ids": "1573", "raw_code": "public void addClassesToCheck(File basedir,String... relativeNames) throws IOException {\n  addClassesToCheck(basedir,Arrays.asList(relativeNames));\n}"}
{"ids": "1403", "raw_code": "public static Short toShort(String str) throws PageException {\n  return Short.valueOf(toShortValue(str));\n}"}
{"ids": "79221", "raw_code": "public boolean hasPermission(Security security,GenericValue userLogin){\n  return OrderReadHelper.hasPermission(security,userLogin,orderHeader);\n}"}
{"ids": "85441", "raw_code": "protected boolean filterFiles(List<File> files){\n  if (task.getNoMtimeCheck() || isOutputRepositoryURL()) {\n    return false;\n  }\n  Iterator<File> iter=files.iterator();\n  while (iter.hasNext()) {\n    File file=iter.next();\n    Module module=inferModule(file);\n    if (module == null) {\n      task.log(\"Unable to determine module of \" + file,Project.MSG_VERBOSE);\n      continue;\n    }\n    if (module.getVersion() == null) {\n      task.log(\"Unable to determine version (and hence timestamp) of \" + module.getName(),Project.MSG_VERBOSE);\n      continue;\n    }\n    long oldest=getArtifactFileTime(module,file);\n    if (oldest == Long.MAX_VALUE) {\n      File outModuleDir=getArtifactDir(module);\n      oldest=oldestOutputArtifact(Long.MAX_VALUE,outModuleDir);\n      task.log(\"Oldest file for \" + module + \" \"+ new Date(oldest),Project.MSG_DEBUG);\n    }\n else {\n      task.log(\"Artifact file associated with \" + file + \" for \"+ module+ \" \"+ new Date(oldest),Project.MSG_DEBUG);\n    }\n    long newestFile=file.lastModified();\n    task.log(\"File \" + file + \" last modified \"+ new Date(newestFile),Project.MSG_DEBUG);\n    if (newestFile != Long.MIN_VALUE && oldest != Long.MAX_VALUE && newestFile < oldest) {\n      task.log(\"No need to compile \" + file + \", it's up to date\");\n      iter.remove();\n    }\n  }\n  return files.size() == 0;\n}"}
{"ids": "71554", "raw_code": "public void flush(){\n  outputStream.flush();\n}"}
{"ids": "66367", "raw_code": "public int createMeasures(MSLAGoal goal){\n  String sql=\"SELECT M_InOut_ID, io.MovementDate-o.DatePromised,\" + \" io.MovementDate, o.DatePromised, o.DocumentNo \" + \"FROM M_InOut io\"+ \" INNER JOIN C_Order o ON (io.C_Order_ID=o.C_Order_ID) \"+ \"WHERE io.C_BPartner_ID=?\"+ \" AND NOT EXISTS \"+ \"(SELECT * FROM PA_SLA_Measure m \"+ \"WHERE m.PA_SLA_Goal_ID=?\"+ \" AND m.AD_Table_ID=\" + MInOut.Table_ID + \" AND m.Record_ID=io.M_InOut_ID)\";\n  int counter=0;\n  PreparedStatement pstmt=null;\n  ResultSet rs=null;\n  try {\n    pstmt=DB.prepareStatement(sql,null);\n    pstmt.setInt(1,goal.getC_BPartner_ID());\n    pstmt.setInt(2,goal.getPA_SLA_Goal_ID());\n    rs=pstmt.executeQuery();\n    while (rs.next()) {\n      int M_InOut_ID=rs.getInt(1);\n      BigDecimal MeasureActual=rs.getBigDecimal(2);\n      Timestamp MovementDate=rs.getTimestamp(3);\n      String Description=rs.getString(5) + \": \" + rs.getTimestamp(4);\n      if (goal.isDateValid(MovementDate)) {\n        MSLAMeasure measure=new MSLAMeasure(goal,MovementDate,MeasureActual,Description);\n        measure.setLink(MInOut.Table_ID,M_InOut_ID);\n        if (measure.save())         counter++;\n      }\n    }\n  }\n catch (  Exception e) {\n    log.log(Level.SEVERE,\"createMeasures\",e);\n  }\n finally {\n    DB.close(rs,pstmt);\n    rs=null;\n    pstmt=null;\n  }\n  return counter;\n}"}
{"ids": "69565", "raw_code": "public E removeAt(int index){\n  final Object old=mArray[index];\n  if (mSize <= 1) {\n    if (DEBUG)     Log.d(TAG,\"remove: shrink from \" + mHashes.length + \" to 0\");\n    freeArrays(mHashes,mArray,mSize);\n    mHashes=SupportContainerInternals.EMPTY_INTS;\n    mArray=SupportContainerInternals.EMPTY_OBJECTS;\n    mSize=0;\n  }\n else {\n    if (mHashes.length > (BASE_SIZE * 2) && mSize < mHashes.length / 3) {\n      final int n=mSize > (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (BASE_SIZE * 2);\n      if (DEBUG)       Log.d(TAG,\"remove: shrink from \" + mHashes.length + \" to \"+ n);\n      final int[] ohashes=mHashes;\n      final Object[] oarray=mArray;\n      allocArrays(n);\n      mSize--;\n      if (index > 0) {\n        if (DEBUG)         Log.d(TAG,\"remove: copy from 0-\" + index + \" to 0\");\n        System.arraycopy(ohashes,0,mHashes,0,index);\n        System.arraycopy(oarray,0,mArray,0,index);\n      }\n      if (index < mSize) {\n        if (DEBUG)         Log.d(TAG,\"remove: copy from \" + (index + 1) + \"-\"+ mSize+ \" to \"+ index);\n        System.arraycopy(ohashes,index + 1,mHashes,index,mSize - index);\n        System.arraycopy(oarray,index + 1,mArray,index,mSize - index);\n      }\n    }\n else {\n      mSize--;\n      if (index < mSize) {\n        if (DEBUG)         Log.d(TAG,\"remove: move \" + (index + 1) + \"-\"+ mSize+ \" to \"+ index);\n        System.arraycopy(mHashes,index + 1,mHashes,index,mSize - index);\n        System.arraycopy(mArray,index + 1,mArray,index,mSize - index);\n      }\n      mArray[mSize]=null;\n    }\n  }\n  return (E)old;\n}"}
{"ids": "69857", "raw_code": "@Override public String resolveVideoUrl(@Nullable final Video video,Step step){\n  if (video == null)   return null;\n  String localPath=databaseFacade.getPathToVideoIfExist(video);\n  if (localPath != null && checkExistingOnDisk(localPath,step)) {\n    return localPath;\n  }\n else {\n    List<VideoUrl> urlList=video.getUrls();\n    if (urlList == null || urlList.size() == 0)     return null;\n    return resolveFromWeb(urlList);\n  }\n}"}
{"ids": "30988", "raw_code": "protected Object lookupService() throws Exception {\n  Object service=null;\n  ServiceTemplate templ;\n  if (template == null) {\n    Class<?>[] types=(serviceClass == null ? null : new Class[]{serviceClass});\n    Entry[] entry=(serviceName == null ? null : new Entry[]{new Name(serviceName)});\n    templ=new ServiceTemplate(null,types,entry);\n  }\n else {\n    templ=template;\n  }\n  LookupLocator[] lookupLocators=null;\n  if (locators != null) {\n    lookupLocators=new LookupLocator[locators.length];\n    for (int i=0; i < locators.length; i++) {\n      String locator=locators[i];\n      if (!locator.startsWith(\"jini://\")) {\n        locator=\"jini://\" + locator;\n      }\n      lookupLocators[i]=new LookupLocator(locator);\n    }\n  }\n  ServiceDiscoveryManager serviceDiscovery=null;\n  try {\n    serviceDiscovery=SharedDiscoveryManagement.getBackwardsServiceDiscoveryManager(groups,lookupLocators,null);\n    ServiceItem returnObject=serviceDiscovery.lookup(templ,null,timeout);\n    if (returnObject != null) {\n      service=returnObject.service;\n    }\n  }\n  finally {\n    if (serviceDiscovery != null) {\n      try {\n        serviceDiscovery.terminate();\n      }\n catch (      Exception e) {\n        logger.warn(\"Failed to terminate service discovery, ignoring\",e);\n      }\n    }\n  }\n  return service;\n}"}
{"ids": "23961", "raw_code": "public static boolean equals(final Object obj1,final Object obj2){\n  return (obj1 != null && obj1.equals(obj2));\n}"}
{"ids": "65287", "raw_code": "public WebappTemplateLoader(ServletContext servletContext,String subdirPath){\n  if (servletContext == null) {\n    throw new IllegalArgumentException(\"servletContext == null\");\n  }\n  if (subdirPath == null) {\n    throw new IllegalArgumentException(\"path == null\");\n  }\n  subdirPath=subdirPath.replace('\\\\','/');\n  if (!subdirPath.endsWith(\"/\")) {\n    subdirPath+=\"/\";\n  }\n  if (!subdirPath.startsWith(\"/\")) {\n    subdirPath=\"/\" + subdirPath;\n  }\n  this.subdirPath=subdirPath;\n  this.servletContext=servletContext;\n}"}
{"ids": "10130", "raw_code": "@SuppressWarnings({\"unchecked\"}) public static <T>T[] insert(T[] dest,T src,int offset,Class componentType){\n  T[] temp=(T[])Array.newInstance(componentType,dest.length + 1);\n  System.arraycopy(dest,0,temp,0,offset);\n  temp[offset]=src;\n  System.arraycopy(dest,offset,temp,offset + 1,dest.length - offset);\n  return temp;\n}"}
{"ids": "19460", "raw_code": "@Override public void flush() throws IOException {\n  writer.write(buffer,0,fill);\n  fill=0;\n}"}
{"ids": "52468", "raw_code": "public MetricInstance withDependencyMetricNames(List<String> dependencyMetricNames){\n  return new MetricInstance(metricName,maker,dependencyMetricNames.toArray(new String[dependencyMetricNames.size()]));\n}"}
{"ids": "33092", "raw_code": "public static IStatus validateMethodName(String name){\n  return validateMethodName(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);\n}"}
{"ids": "51917", "raw_code": "public ProfilerEntity start(){\n  start_time=System.nanoTime();\n  return this;\n}"}
{"ids": "51320", "raw_code": "public static <E extends Enum<E>>EnumSet<E> of(E e1,E e2,E e3){\n  EnumSet<E> set=of(e1,e2);\n  set.add(e3);\n  return set;\n}"}
{"ids": "53723", "raw_code": "public PickRequest withCameraPicsDirectory(@Nullable final File pDirFile){\n  this.mCustomCameraPicsDirPath=pDirFile == null ? null : pDirFile.getAbsolutePath();\n  return this;\n}"}
{"ids": "8559", "raw_code": "public void prepareForNextRun(){\n  for (int i=0; i < 5; i++) {\n    System.gc();\n    try {\n      Thread.sleep(20);\n    }\n catch (    InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"ids": "39813", "raw_code": "public boolean writeHeader(OutputStream os){\n  try {\n    writeInt(os,CACHE_MAGIC);\n    writeString(os,key);\n    writeString(os,etag == null ? \"\" : etag);\n    writeLong(os,serverDate);\n    writeLong(os,lastModified);\n    writeLong(os,ttl);\n    writeLong(os,softTtl);\n    writeStringStringMap(responseHeaders,os);\n    os.flush();\n    return true;\n  }\n catch (  IOException e) {\n    VolleyLog.d(\"%s\",e.toString());\n    return false;\n  }\n}"}
{"ids": "54384", "raw_code": "public void add(Chip chip){\n  if (!mChipList.contains(chip) || mToleratingDuplicate) {\n    mChipList.add(chip);\n    notifyUpdate();\n  }\n}"}
{"ids": "83275", "raw_code": "private boolean checkTripZoneConsistency(){\n  log.info(\"Checking that zones and trips are consistent.\");\n  HashSet<String> missingZones=new HashSet<String>();\n  for (  Trip T : trips.values()) {\n    BasicLocation zo=zones.getLocation(Id.create(T.zone_o,Zone.class));\n    BasicLocation zd=zones.getLocation(Id.create(T.zone_d,Zone.class));\n    if (zo == null) {\n      missingZones.add(T.zone_o);\n    }\n    if (zd == null) {\n      missingZones.add(T.zone_d);\n    }\n  }\n  if (missingZones.size() > 0) {\n    String msg=missingZones.size() + \" zones are missing! Full list below: \";\n    for (    String s : missingZones)     msg+=\"\\n\\tZone \\\"\" + s.toString() + \"\\\"\";\n    log.error(msg);\n    return false;\n  }\n else   log.info(\"All zones OK!\");\n  return true;\n}"}
{"ids": "46448", "raw_code": "private int insertIndexForLayer(Component comp,int layer,int position){\n  int i, count, curLayer;\n  int layerStart=-1;\n  int layerEnd=-1;\n  int componentCount=getComponentCount();\n  ArrayList<Component> compList=new ArrayList<Component>(componentCount);\n  for (int index=0; index < componentCount; index++) {\n    if (getComponent(index) != comp) {\n      compList.add(getComponent(index));\n    }\n  }\n  count=compList.size();\n  for (i=0; i < count; i++) {\n    curLayer=getLayer(compList.get(i));\n    if (layerStart == -1 && curLayer == layer) {\n      layerStart=i;\n    }\n    if (curLayer < layer) {\n      if (i == 0) {\n        layerStart=0;\n        layerEnd=0;\n      }\n else {\n        layerEnd=i;\n      }\n      break;\n    }\n  }\n  if (layerStart == -1 && layerEnd == -1)   return count;\n  if (layerStart != -1 && layerEnd == -1)   layerEnd=count;\n  if (layerEnd != -1 && layerStart == -1)   layerStart=layerEnd;\n  if (position == -1)   return layerEnd;\n  if (position > -1 && layerStart + position <= layerEnd)   return layerStart + position;\n  return layerEnd;\n}"}
{"ids": "63636", "raw_code": "public static WaitDialog showDialog(WaitDialog.Runnable runnable,String message,Container container,int width,int height){\n  WaitDialog newDialog=null;\n  if (container instanceof JDialog) {\n    newDialog=new WaitDialog((JDialog)container);\n  }\n else   if (container instanceof JFrame) {\n    newDialog=new WaitDialog((JFrame)container);\n  }\n else {\n    newDialog=new WaitDialog((JDialog)null);\n    newDialog.setLocationRelativeTo(container);\n  }\n  newDialog.buildDialog(width,height);\n  runnable.setDialog(newDialog);\n  newDialog.container=container;\n  newDialog.runnable=runnable;\n  newDialog.setMessage(message);\n  Thread processThread=new ProcessThread(newDialog);\n  processThread.start();\n  while (!newDialog.isVisible()) {\n    try {\n      Thread.sleep(100);\n    }\n catch (    InterruptedException ie) {\n    }\n  }\n  return newDialog;\n}"}
{"ids": "48985", "raw_code": "public synchronized void write(byte b[],int off,int len) throws IOException {\n  if (len <= 0)   return;\n  int freeSpace=buffer.length - pos;\n  if (len <= freeSpace) {\n    System.arraycopy(b,off,buffer,pos,len);\n    pos+=len;\n    return;\n  }\n  flush();\n  int local_requested;\n  while (true) {\nsynchronized (lock) {\n      while ((local_requested=requested) < 1 && !disconnected) {\n        try {\n          lock.wait();\n        }\n catch (        InterruptedException e) {\n        }\n      }\n      if (disconnected)       throw new IOException(\"Connection closed\");\n    }\n    if (local_requested < len) {\n      manager.sendTransmit(info,b,off,local_requested);\n      off+=local_requested;\n      len-=local_requested;\nsynchronized (lock) {\n        requested-=local_requested;\n      }\n    }\n else {\n      manager.sendTransmit(info,b,off,len);\nsynchronized (lock) {\n        requested-=len;\n      }\n      break;\n    }\n  }\n}"}
{"ids": "3960", "raw_code": "protected Alarm(){\n  this(\"alarm\");\n}"}
{"ids": "11646", "raw_code": "public void removeMouseMode(MapMouseMode med){\n  boolean needToAdjustActiveMode=false;\n  if (med == null) {\n    return;\n  }\n  if (med.equals(activeMouseMode)) {\n    needToAdjustActiveMode=true;\n    setInactive(med);\n  }\n  for (  MapMouseMode checkMM : mouseModes) {\n    if (med.equals(checkMM)) {\n      med.removeAllMapMouseListeners();\n    }\n else     if (needToAdjustActiveMode) {\n      setActive(checkMM);\n      needToAdjustActiveMode=false;\n    }\n  }\n  mouseModes.remove(med);\n  firePropertyChange(MouseModesProperty,null,mouseModes);\n}"}
{"ids": "73704", "raw_code": "@Override public boolean hasDispatchFunction(){\n  return false;\n}"}
{"ids": "63084", "raw_code": "public void addMap(Map<K,V> map,K min,K max){\n  if (min != null && max != null && keyType.compare(min,max) > 0) {\n    DataUtils.newIllegalArgumentException(\"Invalid range: {0} .. {1}\",min,max);\n  }\n  int len=shards.length + 1;\n  Shard<K,V>[] newShards=Arrays.copyOf(shards,len);\n  Shard<K,V> newShard=new Shard<K,V>();\n  newShard.map=map;\n  newShard.minIncluding=min;\n  newShard.maxExcluding=max;\n  newShards[len - 1]=newShard;\n  shards=newShards;\n}"}
{"ids": "30827", "raw_code": "private void retryFailedInterfaces(){\n  for (Iterator i=failedInterfaces.iterator(); i.hasNext(); ) {\n    NetworkInterface nic=(NetworkInterface)i.next();\n    try {\n      if (nic != null) {\n        socket.setNetworkInterface(nic);\n      }\n      socket.joinGroup(requestAddr);\n      i.remove();\n      Level l=multicastInterfacesSpecified ? Level.INFO : Level.FINE;\n      if (logger.isLoggable(l)) {\n        if (nic != null) {\n          logger.log(l,\"enabled {0}\",new Object[]{nic});\n        }\n else {\n          logger.log(l,\"enabled default interface\");\n        }\n      }\n    }\n catch (    IOException e) {\n    }\n  }\n}"}
{"ids": "85644", "raw_code": "public void writeHeader() throws IOException {\n  FLVHeader flvHeader=new FLVHeader();\n  flvHeader.setFlagAudio(true);\n  flvHeader.setFlagVideo(true);\n  ByteBuffer header=ByteBuffer.allocate(HEADER_LENGTH + 4);\n  flvHeader.write(header);\n  file.setLength(HEADER_LENGTH + 4);\n  if (header.hasArray()) {\n    log.debug(\"Header bytebuffer has a backing array\");\n    file.write(header.array());\n  }\n else {\n    log.debug(\"Header bytebuffer does not have a backing array\");\n    byte[] tmp=new byte[HEADER_LENGTH + 4];\n    header.get(tmp);\n    file.write(tmp);\n  }\n  bytesWritten=file.length();\n  header.clear();\n}"}
{"ids": "43243", "raw_code": "public static Future<?> submit(Runnable task){\n  return THREAD_POOL.submit(task);\n}"}
{"ids": "71745", "raw_code": "public boolean addOverlay(Overlay overlay,KmlDocument kmlDoc){\n  if (overlay == null)   return false;\n  KmlFeature kmlItem;\n  if (overlay instanceof GroundOverlay) {\n    kmlItem=new KmlGroundOverlay((GroundOverlay)overlay);\n  }\n else   if (overlay instanceof FolderOverlay) {\n    kmlItem=new KmlFolder((FolderOverlay)overlay,kmlDoc);\n  }\n else   if (overlay instanceof MarkerClusterer) {\n    kmlItem=new KmlFolder((MarkerClusterer)overlay,kmlDoc);\n  }\n else   if (overlay instanceof Marker) {\n    Marker marker=(Marker)overlay;\n    kmlItem=new KmlPlacemark(marker);\n  }\n else   if (overlay instanceof Polygon) {\n    Polygon polygon=(Polygon)overlay;\n    kmlItem=new KmlPlacemark(polygon,kmlDoc);\n  }\n else   if (overlay instanceof Polyline) {\n    Polyline polyline=(Polyline)overlay;\n    kmlItem=new KmlPlacemark(polyline,kmlDoc);\n  }\n else {\n    return false;\n  }\n  mItems.add(kmlItem);\n  return true;\n}"}
{"ids": "56502", "raw_code": "private <T extends SBResource>T lookForResource(SBResourceType type,Class<T> clazz){\n  List<T> resources=lookForResources(type,clazz);\n  return resources != null && resources.size() > 0 ? resources.get(0) : null;\n}"}
{"ids": "44822", "raw_code": "private Object produceEvent() throws InvocationTargetException {\n  if (!valid) {\n    throw new IllegalStateException(toString() + \" has been invalidated and can no longer produce events.\");\n  }\n  try {\n    return method.invoke(target);\n  }\n catch (  IllegalAccessException e) {\n    throw new AssertionError(e);\n  }\ncatch (  InvocationTargetException e) {\n    if (e.getCause() instanceof Error) {\n      throw (Error)e.getCause();\n    }\n    throw e;\n  }\n}"}
{"ids": "20259", "raw_code": "private List<Float> createDashArray(String dashString){\n  String[] dashes=dashString.split(\" \");\n  List<Float> floatDashArray=new ArrayList<Float>();\n  for (  String dashValue : dashes) {\n    try {\n      floatDashArray.add(Float.parseFloat(dashValue));\n    }\n catch (    NumberFormatException e) {\n      return null;\n    }\n  }\n  return floatDashArray;\n}"}
{"ids": "78060", "raw_code": "public void cleanPatchByVersion(String versionName){\n  if (patchDirectory == null || versionName == null) {\n    return;\n  }\n  String path=patchDirectory.getAbsolutePath() + \"/\" + versionName;\n  SharePatchFileUtil.deleteDir(path);\n}"}
{"ids": "1603", "raw_code": "public static boolean isValidJavaClassName(String input){\n  if (!StringUtils.hasText(input)) {\n    return false;\n  }\n  if (!Character.isJavaIdentifierStart(input.charAt(0))) {\n    return false;\n  }\n  if (input.length() > 1) {\n    for (int i=1; i < input.length(); i++) {\n      if (!Character.isJavaIdentifierPart(input.charAt(i))) {\n        return false;\n      }\n    }\n  }\n  return true;\n}"}
{"ids": "17247", "raw_code": "public static String rename(String desc,String oldname,String newname){\n  if (desc.indexOf(oldname) < 0)   return desc;\n  StringBuffer newdesc=new StringBuffer();\n  int head=0;\n  int i=0;\n  for (; ; ) {\n    int j=desc.indexOf('L',i);\n    if (j < 0)     break;\n else     if (desc.startsWith(oldname,j + 1) && desc.charAt(j + oldname.length() + 1) == ';') {\n      newdesc.append(desc.substring(head,j));\n      newdesc.append('L');\n      newdesc.append(newname);\n      newdesc.append(';');\n      head=i=j + oldname.length() + 2;\n    }\n else {\n      i=desc.indexOf(';',j) + 1;\n      if (i < 1)       break;\n    }\n  }\n  if (head == 0)   return desc;\n else {\n    int len=desc.length();\n    if (head < len)     newdesc.append(desc.substring(head,len));\n    return newdesc.toString();\n  }\n}"}
{"ids": "39138", "raw_code": "public void sort(int attIndex){\n  double[] vals=new double[numInstances()];\n  Instance[] backup=new Instance[vals.length];\n  for (int i=0; i < vals.length; i++) {\n    Instance inst=instance(i);\n    backup[i]=inst;\n    double val=inst.value(attIndex);\n    if (Utils.isMissingValue(val)) {\n      vals[i]=Double.MAX_VALUE;\n    }\n else {\n      vals[i]=val;\n    }\n  }\n  int[] sortOrder=Utils.sortWithNoMissingValues(vals);\n  for (int i=0; i < vals.length; i++) {\n    m_Instances.set(i,backup[sortOrder[i]]);\n  }\n}"}
{"ids": "53100", "raw_code": "public boolean adjustEntry(E entry){\n  final SpatialDirectoryEntry se=(SpatialDirectoryEntry)entry;\n  final ModifiableHyperBoundingBox mbr=computeMBR();\n  boolean changed=false;\n  if (se.hasMBR()) {\n    final int dim=se.getDimensionality();\n    for (int i=0; i < dim; i++) {\n      if (Math.abs(se.getMin(i) - mbr.getMin(i)) > Float.MIN_NORMAL) {\n        changed=true;\n        break;\n      }\n      if (Math.abs(se.getMax(i) - mbr.getMax(i)) > Float.MIN_NORMAL) {\n        changed=true;\n        break;\n      }\n    }\n  }\n else {\n    changed=true;\n  }\n  if (changed) {\n    se.setMBR(mbr);\n  }\n  return changed;\n}"}
{"ids": "42150", "raw_code": "private void traceObject(ObjectReference object,boolean root){\n  if (VERBOSE) {\n    Trace.trace(Item.SANITY,\"tracing object %s\",ObjectModel.getString(object));\n  }\n  if (object.isNull())   return;\n  boolean marked=blackSet.contains(object);\n  if (!marked) {\n    blackSet.add(object);\n    markStack.add(object);\n  }\n  visitor.visitObject(object,root,marked);\n}"}
{"ids": "29387", "raw_code": "private static int compare(int fromIndex,CharSequence left,CharSequence right){\n  if (left == null)   return -1;\n  if (right == null)   return 1;\n  for (int i=fromIndex, n=MathLib.min(left.length(),right.length()); i < n; i++) {\n    char c1=Character.toUpperCase(left.charAt(i));\n    char c2=Character.toUpperCase(right.charAt(i));\n    if (c1 != c2)     return c1 - c2;\n  }\n  return left.length() - right.length();\n}"}
{"ids": "13383", "raw_code": "public boolean restoreAccessibilityFocus(CalendarDay day){\n  if ((day.year != mYear) || (day.month != mMonth) || (day.day > mNumCells)) {\n    return false;\n  }\n  mTouchHelper.setFocusedVirtualView(day.day);\n  return true;\n}"}
{"ids": "22531", "raw_code": "public DriverTask createVolumeClone(List<VolumeClone> clones){\n  LOG.info(\"Creating volume clone\");\n  DellSCDriverTask task=new DellSCDriverTask(\"createVolumeClone\");\n  StringBuilder errBuffer=new StringBuilder();\n  int createCount=0;\n  for (  VolumeClone clone : clones) {\n    try {\n      StorageCenterAPI api=connectionManager.getConnection(clone.getStorageSystemId());\n      ScReplay replay=null;\n      api.checkAndInitVolume(clone.getParentId());\n      if (clone.getSourceType() == SourceType.SNAPSHOT) {\n        replay=api.getReplay(clone.getParentId());\n      }\n else {\n        replay=api.createReplay(clone.getParentId(),5);\n      }\n      ScVolume scVol=api.createViewVolume(clone.getDisplayName(),replay.instanceId);\n      clone.setProvisionedCapacity(SizeUtil.sizeStrToBytes(scVol.configuredSize));\n      clone.setAllocatedCapacity(0L);\n      clone.setWwn(scVol.deviceId);\n      clone.setNativeId(scVol.instanceId);\n      clone.setDeviceLabel(scVol.name);\n      clone.setAccessStatus(AccessStatus.READ_WRITE);\n      clone.setReplicationState(ReplicationState.SYNCHRONIZED);\n      createCount++;\n    }\n catch (    DellSCDriverException|StorageCenterAPIException dex) {\n      String error=String.format(\"Error creating clone of volume %s: %s\",clone.getParentId(),dex);\n      errBuffer.append(String.format(\"%s%n\",error));\n    }\n  }\n  task.setMessage(errBuffer.toString());\n  if (createCount == clones.size()) {\n    task.setStatus(TaskStatus.READY);\n  }\n else   if (createCount == 0) {\n    task.setStatus(TaskStatus.FAILED);\n  }\n else {\n    task.setStatus(TaskStatus.PARTIALLY_FAILED);\n  }\n  return task;\n}"}
{"ids": "34911", "raw_code": "@Override public int hashCode(){\n  if (hash == 0) {\n    int result=17;\n    result=37 * result + range.hashCode();\n    long bitsWeight=Double.doubleToLongBits(weight);\n    result=37 * result + (int)(bitsWeight ^ (bitsWeight >>> 32));\n    hash=result;\n  }\n  return hash;\n}"}
{"ids": "41871", "raw_code": "@Override public void onClick(View v){\n  int position=Math.min((Integer)v.getTag(),mItemList.size() - 1);\n  mSelectedTracker=mItemList.get(position);\n  mToggleConfigHandler.showForSelectedToggle();\n  mToggleConfigHandler.showAtLocation(v);\n  mToggleConfigHandler.setArrowPosition(v);\n}"}
{"ids": "29894", "raw_code": "private int readFromDataSource(byte[] target,int offset,int length,int bytesAlreadyRead,boolean allowEndOfInput) throws InterruptedException, IOException {\n  if (Thread.interrupted()) {\n    throw new InterruptedException();\n  }\n  int bytesRead=dataSource.read(target,offset + bytesAlreadyRead,length - bytesAlreadyRead);\n  if (bytesRead == C.RESULT_END_OF_INPUT) {\n    if (bytesAlreadyRead == 0 && allowEndOfInput) {\n      return C.RESULT_END_OF_INPUT;\n    }\n    throw new EOFException();\n  }\n  return bytesAlreadyRead + bytesRead;\n}"}
{"ids": "77183", "raw_code": "public Explanation explain(int doc,Explanation freq) throws IOException {\n  return Explanation.match(score(doc,freq.getValue()),\"score(doc=\" + doc + \",freq=\"+ freq.getValue()+ \"), with freq of:\",Collections.singleton(freq));\n}"}
{"ids": "85218", "raw_code": "public static Stack<String> splitParts(String name){\n  while (name.startsWith(\".\"))   name=name.substring(1);\n  Stack<String> parts=new Stack<>();\n  int last=0;\n  int pos=0;\n  String part;\n  while (true) {\n    pos=last;\n    while (true) {\n      pos=name.indexOf('.',pos);\n      if (pos < 0)       break;\n      if (name.charAt(pos - 1) == '\\\\')       ++pos;\n else       break;\n    }\n    if (pos < 0)     break;\n    part=name.substring(last,pos);\n    if (!part.endsWith(\"]\"))     part+=\"[0]\";\n    parts.add(part);\n    last=pos + 1;\n  }\n  part=name.substring(last);\n  if (!part.endsWith(\"]\"))   part+=\"[0]\";\n  parts.add(part);\n  return parts;\n}"}
{"ids": "66827", "raw_code": "public Set<SootMethod> collectSourceMethods(){\n  Set<SootMethod> result=new HashSet<SootMethod>();\n  for (  SourceCallChainInfo cci : entry_points) {\n    collectSourceMethods(cci,result);\n  }\n  return result;\n}"}
{"ids": "73944", "raw_code": "public void register(NamedBean s){\n  String systemName=s.getSystemName();\n  _tsys.put(systemName,s);\n  String userName=s.getUserName();\n  if (userName != null) {\n    _tuser.put(userName,s);\n  }\n  firePropertyChange(\"length\",null,Integer.valueOf(_tsys.size()));\n  s.addPropertyChangeListener(this,\"\",\"Manager\");\n}"}
{"ids": "4862", "raw_code": "protected void expandFor(int i1,int i2,double d){\n  if (i1 >= sizes.size()) {\n    int oldSize=sizes.size(), capacity=vector.length;\n    sizes.set(i1,0);\n    if (capacity < sizes.size()) {\n      while (capacity < sizes.size())       capacity*=2;\n      double[][] t=new double[capacity][];\n      System.arraycopy(vector,0,t,0,oldSize);\n      vector=t;\n    }\n    for (int i=oldSize; i < sizes.size(); ++i)     vector[i]=new double[defaultCapacity2];\n  }\n  if (i2 < sizes.get(i1))   return;\n  int oldSize=sizes.get(i1), capacity=vector[i1].length;\n  sizes.set(i1,i2 + 1);\n  if (capacity >= sizes.get(i1))   return;\n  while (capacity < sizes.get(i1))   capacity*=2;\n  double[] t=new double[capacity];\n  System.arraycopy(vector[i1],0,t,0,oldSize);\n  if (d != 0)   Arrays.fill(t,oldSize,sizes.get(i1),d);\n  vector[i1]=t;\n}"}
{"ids": "28212", "raw_code": "public V put(final K k,final V v){\n  final WeakReference<V> ref=newWeakRef(k,v,referenceQueue);\n  final WeakReference<V> oldRef=map.put(k,ref);\n  final V oldVal=oldRef == null ? null : oldRef.get();\n  if (queue.add(v) && DEBUG) {\n    log.debug(\"put: key=\" + k + \", val=\"+ v);\n  }\n  didUpdate(k,ref,oldRef);\n  return oldVal;\n}"}
{"ids": "2272", "raw_code": "static void delay(long millis) throws InterruptedException {\n  long nanos=millis * (1000 * 1000);\n  final long wakeupTime=System.nanoTime() + nanos;\n  do {\n    if (millis > 0L)     Thread.sleep(millis);\n else     Thread.yield();\n    nanos=wakeupTime - System.nanoTime();\n    millis=nanos / (1000 * 1000);\n  }\n while (nanos >= 0L);\n}"}
{"ids": "53832", "raw_code": "public static <V>boolean addListNotNullValue(List<V> sourceList,V value){\n  return (sourceList != null && value != null) ? sourceList.add(value) : false;\n}"}
{"ids": "34138", "raw_code": "public void delete(int key){\n  int i=ContainerHelpers.binarySearch(mKeys,mSize,key);\n  if (i >= 0) {\n    System.arraycopy(mKeys,i + 1,mKeys,i,mSize - (i + 1));\n    System.arraycopy(mValues,i + 1,mValues,i,mSize - (i + 1));\n    mSize--;\n  }\n}"}
{"ids": "6101", "raw_code": "public static void keepAlive(final boolean keepAlive){\n  setProperty(\"http.keepAlive\",Boolean.toString(keepAlive));\n}"}
{"ids": "54148", "raw_code": "public PageObjectContext peek(){\n  return deque.peek();\n}"}
{"ids": "71674", "raw_code": "protected void writeNamespace(String prefix,String uri) throws IOException {\n  if ((prefix != null) && (prefix.length() > 0)) {\n    writer.write(\" xmlns:\");\n    writer.write(prefix);\n    writer.write(\"=\\\"\");\n  }\n else {\n    writer.write(\" xmlns=\\\"\");\n  }\n  writer.write(uri);\n  writer.write(\"\\\"\");\n}"}
{"ids": "68907", "raw_code": "public static void waitSomeTime(int seconds){\n  try {\n    Thread.sleep(seconds * 1000);\n  }\n catch (  InterruptedException e) {\n  }\n}"}
{"ids": "35904", "raw_code": "public void encode(String value,ByteBuffer buffer) throws BufferOverflowException {\n  if (value == null) {\n    buffer.put((byte)(0x80));\n    return;\n  }\n  int charCount=value.length();\n  if (charCount == 0) {\n    buffer.put((byte)(1 | 0x80));\n    return;\n  }\n  int position=buffer.position();\n  boolean ascii=true;\n  if (charCount > 1) {\n    for (int i=0; i < charCount; i++) {\n      int c=value.charAt(i);\n      if (c > 127) {\n        ascii=false;\n        break;\n      }\n      buffer.put((byte)c);\n    }\n  }\n else {\n    ascii=false;\n  }\n  if (ascii) {\n    position=buffer.position();\n    buffer.put(position - 1,(byte)(buffer.get(position - 1) | 0x80));\n  }\n else {\n    buffer.position(position);\n    writeLength(charCount + 1,buffer);\n    int charIndex=0;\n    for (; charIndex < charCount; charIndex++) {\n      int c=value.charAt(charIndex);\n      if (c > 127)       break;\n      buffer.put((byte)c);\n    }\n    writeUTF8String(value,charCount,charIndex,buffer);\n  }\n}"}
{"ids": "3765", "raw_code": "public static PathImpl lookup(String url){\n  PathImpl pwd=getPwd();\n  if (!url.startsWith(\"/\")) {\n    return pwd.lookup(url,null);\n  }\n else {\n    return PWD.lookup(url,null);\n  }\n}"}
{"ids": "56745", "raw_code": "public static XMLGregorianCalendar now(){\n  return getXMLGregorianCalendarValue(null);\n}"}
{"ids": "73146", "raw_code": "protected void addScalarDimension(int i){\n  for (  Dimension dimension : dimensionList) {\n    if (dimension.getDimension() == i) {\n      return;\n    }\n  }\n  dimensionList.add(new Dimension(i));\n}"}
{"ids": "69078", "raw_code": "public void initialize(){\n  TextureState ts=new TextureState();\n  ts.setEnabled(false);\n  setRenderState(ts);\n  for (int i=0; i < lineSetList.size(); ++i) {\n    LineSetState state=lineSetList.get(i);\n    addLineSet(state,false);\n  }\n  zBufferState=new ZBufferState();\n  zBufferState.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);\n  zBufferState.setEnabled(true);\n  setRenderState(zBufferState);\n}"}
{"ids": "17019", "raw_code": "protected boolean regExpRegionMatches(String text,int tStart,String p,int pStart,int plen){\n  while (plen-- > 0) {\n    char tchar=text.charAt(tStart++);\n    char pchar=p.charAt(pStart++);\n    if (!this.fIgnoreWildCards) {\n      if (pchar == fSingleWildCard) {\n        continue;\n      }\n    }\n    if (pchar == tchar) {\n      continue;\n    }\n    if (this.fIgnoreCase) {\n      if (Character.toUpperCase(tchar) == Character.toUpperCase(pchar)) {\n        continue;\n      }\n      if (Character.toLowerCase(tchar) == Character.toLowerCase(pchar)) {\n        continue;\n      }\n    }\n    return false;\n  }\n  return true;\n}"}
{"ids": "5762", "raw_code": "public static void initKeys(KeyStore keystore,Properties props){\n  if (props.containsKey(Configuration.WEBCALL_KAFKA_AES)) {\n    byte[] key=keystore.decodeKey(props.getProperty(Configuration.WEBCALL_KAFKA_AES));\n    Preconditions.checkArgument((16 == key.length || 24 == key.length || 32 == key.length),Configuration.WEBCALL_KAFKA_AES + \" MUST be 128, 192 or 256 bits long.\");\n    keystore.setKey(KeyStore.AES_KAFKA_WEBCALL,key);\n    aesKey=key;\n  }\n  if (props.containsKey(Configuration.WEBCALL_KAFKA_MAC)) {\n    byte[] key=keystore.decodeKey(props.getProperty(Configuration.WEBCALL_KAFKA_MAC));\n    Preconditions.checkArgument((16 == key.length),Configuration.WEBCALL_KAFKA_MAC + \" MUST be 128 bits long.\");\n    keystore.setKey(KeyStore.SIPHASH_KAFKA_WEBCALL,key);\n    siphashKey=key;\n  }\n}"}
{"ids": "75511", "raw_code": "public static boolean isEmpty(StringBuilder str){\n  return isNull(str) || str.length() <= 0;\n}"}
{"ids": "33797", "raw_code": "public static Gas register(Gas gas){\n  if (gas == null) {\n    return null;\n  }\n  registeredGasses.add(gas);\n  return getGas(gas.getName());\n}"}
{"ids": "25928", "raw_code": "@Override public boolean lock(){\n  try {\n    lockPath=zk.create(this.lockTypeFolder + CarbonCommonConstants.FILE_SEPARATOR + lockName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);\n    List<String> nodes=zk.getChildren(this.lockTypeFolder,null);\n    Collections.sort(nodes);\n    if (lockPath.endsWith(nodes.get(0))) {\n      return true;\n    }\n else {\n      zk.delete(lockPath,-1);\n      return false;\n    }\n  }\n catch (  KeeperException|InterruptedException e) {\n    LOGGER.error(e,e.getMessage());\n    return false;\n  }\n}"}
{"ids": "77984", "raw_code": "@Override protected void keyTyped(char par1,int par2){\n  tokenBox.textboxKeyTyped(par1,par2);\n  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));\n}"}
{"ids": "21901", "raw_code": "private static Boolean isAlphanumeric(final String label){\n  boolean status=false;\n  if (StringUtils.isNotEmpty(label)) {\n    Matcher matcher=patternAlphanumeric.matcher(label);\n    status=matcher.matches();\n  }\n  return status;\n}"}
{"ids": "27244", "raw_code": "final static String trimURISubstring(URL src,String sub){\n  final String s=src.toExternalForm();\n  final int endIndex=s.lastIndexOf(sub);\n  final String t=s.substring(0,endIndex);\n  return t;\n}"}
{"ids": "37586", "raw_code": "@Override public String globalInfo(){\n  return \"Outputs the received results in arff format to \" + \"a Writer. All results must be received before the instances can be \" + \"written out.\";\n}"}
{"ids": "5865", "raw_code": "public static void silentCloseInputStream(InputStream is){\n  try {\n    if (is != null) {\n      is.close();\n    }\n  }\n catch (  IOException e) {\n    Log.w(LOG_TAG,\"Cannot close input stream\",e);\n  }\n}"}
{"ids": "63696", "raw_code": "public boolean removeRow(int row){\n  if (m_rows.isValidRow(row)) {\n    fireTableEvent(row,row,TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE);\n    m_tuples.invalidate(row);\n    m_rows.releaseRow(row);\n    for (Iterator cols=getColumns(); cols.hasNext(); ) {\n      Column c=(Column)cols.next();\n      c.revertToDefault(row);\n    }\n    return true;\n  }\n  return false;\n}"}
{"ids": "70425", "raw_code": "void addFillComponents(Container panel,int[] cols,int[] rows){\n  Dimension filler=new Dimension(10,10);\n  boolean filled_cell_11=false;\n  CellConstraints cc=new CellConstraints();\n  if (cols.length > 0 && rows.length > 0) {\n    if (cols[0] == 1 && rows[0] == 1) {\n      panel.add(Box.createRigidArea(filler),cc.xy(1,1));\n      filled_cell_11=true;\n    }\n  }\n  for (int index=0; index < cols.length; index++) {\n    if (cols[index] == 1 && filled_cell_11) {\n      continue;\n    }\n    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));\n  }\n  for (int index=0; index < rows.length; index++) {\n    if (rows[index] == 1 && filled_cell_11) {\n      continue;\n    }\n    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));\n  }\n}"}
{"ids": "22001", "raw_code": "private boolean isParsableToDouble(String i){\n  return i.matches(\"\\\\d+\\\\.\\\\d+\");\n}"}
{"ids": "10855", "raw_code": "protected String[] initPathsFromProperties(String rawPaths){\n  String[] retPaths=null;\n  if (rawPaths != null) {\n    try {\n      StringTokenizer token=new StringTokenizer(rawPaths,File.pathSeparator);\n      int numPaths=token.countTokens();\n      retPaths=new String[numPaths];\n      for (int i=0; i < numPaths; i++) {\n        retPaths[i]=token.nextToken();\n      }\n      return retPaths;\n    }\n catch (    java.util.NoSuchElementException e) {\n      e.printStackTrace();\n    }\n  }\n  return retPaths;\n}"}
{"ids": "6222", "raw_code": "private float colorToAngle(int color){\n  float[] colors=new float[3];\n  Color.colorToHSV(color,colors);\n  return (float)Math.toRadians(-colors[0]);\n}"}
{"ids": "15508", "raw_code": "private void registerDefaultValidatorIds(Application application,LinkedHashSet<String> defaultValidatorIds){\n  if (defaultValidatorIds == null) {\n    defaultValidatorIds=new LinkedHashSet<>();\n    if (isBeanValidatorAvailable()) {\n      WebConfiguration webConfig=WebConfiguration.getInstance();\n      if (!webConfig.isOptionEnabled(WebConfiguration.BooleanWebContextInitParameter.DisableDefaultBeanValidator)) {\n        defaultValidatorIds.add(BeanValidator.VALIDATOR_ID);\n      }\n    }\n  }\n  for (  String validatorId : defaultValidatorIds) {\n    if (LOGGER.isLoggable(Level.FINE)) {\n      LOGGER.log(Level.FINE,MessageFormat.format(\"Calling Application.addDefaultValidatorId({0})\",validatorId));\n    }\n    application.addDefaultValidatorId(validatorId);\n  }\n}"}
{"ids": "65098", "raw_code": "protected void initializeLocation(V v,Point2D coord){\n  Point point=locations.get(v);\n  coord.setLocation(point.x,point.y);\n}"}
{"ids": "26529", "raw_code": "public static Date parseDate(String dateStr){\n  String formatString=\"\";\n  if (dateStr.length() == 16)   dateStr=dateStr.substring(0,14);\n  if (dateStr.length() == 15)   formatString=\"yyyyMMdd'T'hhmmss\";\n  if (dateStr.length() == 8)   formatString=\"yyyyMMdd\";\n  SimpleDateFormat formatter=new SimpleDateFormat(formatString);\n  ParsePosition pos=new ParsePosition(0);\n  return formatter.parse(dateStr,pos);\n}"}
{"ids": "35372", "raw_code": "@SuppressWarnings(\"unused\") private void doUnload(MarkedProject markedProject,N4ProgressStateRecorder rec) throws N4JSCompileErrorException {\n  if (createDebugOutput) {\n    println(\"# unloading \" + markedProject.project);\n  }\n  rec.markStartUnloading(markedProject);\n  for (  Resource res : markedProject.resources) {\n    rec.markUnloadingOf(res);\n    res.unload();\n  }\n  rec.markFinishedUnloading(markedProject);\n}"}
{"ids": "26342", "raw_code": "public void parseLib(Map<String,Object> dataModel,String fullText) throws ParseException {\n  Matcher m;\n  fullText=tmplHelper.normalizeText(fullText);\n  m=commentPat.matcher(fullText);\n  if (!m.find()) {\n    throw new ParseException(\"Missing file top comment\");\n  }\n  String introText=tmplHelper.stripCommentLeadingAsterix(tmplHelper.cleanTextValue(m.group(1)));\n  dataModel.put(\"introText\",introText);\n  Matcher introm=tmplHelper.getFirstLineMatcher(introText);\n  if (introm.matches()) {\n    dataModel.put(\"pageTitle\",tmplHelper.cleanTextValue(introm.group(1)));\n    dataModel.put(\"pageDesc\",tmplHelper.cleanTextValue(introm.group(2)));\n  }\n  String currentSectionName=\"default\";\n  Map<String,Object> sectionInfo=makeObjectMap();\n  sectionInfo.put(\"name\",currentSectionName);\n  sectionInfo.put(\"title\",null);\n  sectionInfo.put(\"type\",\"default\");\n  sectionInfo.put(\"comment\",\"\");\n  Map<String,Map<String,Object>> sectionEntryMap=makeDataMap();\n  sectionInfo.put(\"entryMap\",sectionEntryMap);\n  Map<String,Map<String,Object>> entryMap=makeDataMap();\n  Map<String,Map<String,Object>> sectionMap=makeDataMap();\n  sectionMap.put(\"default\",sectionInfo);\n  while (m.find()) {\n    String comment=tmplHelper.cleanTextValue(m.group(1));\n    Matcher subm;\n    subm=sectionPat.matcher(comment);\n    if (subm.matches()) {\n      currentSectionName=tmplHelper.cleanTextValue(subm.group(1));\n      sectionInfo=makeObjectMap();\n      sectionInfo.put(\"name\",currentSectionName);\n      sectionInfo.put(\"title\",currentSectionName);\n      sectionInfo.put(\"type\",\"sub\");\n      sectionInfo.put(\"comment\",tmplHelper.cleanTextValue(tmplHelper.stripCommentLeadingAsterix(subm.group(2))));\n      sectionEntryMap=makeDataMap();\n      sectionInfo.put(\"entryMap\",sectionEntryMap);\n      sectionMap.put(currentSectionName,sectionInfo);\n    }\n else {\n      subm=entryPat.matcher(comment);\n      if (subm.matches()) {\n        String entryTitle=tmplHelper.cleanTextValue(subm.group(1));\n        String entryBody=tmplHelper.cleanTextValue(subm.group(2));\n        String postEntryText=fullText.substring(m.end());\n        try {\n          Map<String,Object> entryInfo=parseEntry(entryTitle,entryBody,postEntryText);\n          entryInfo.put(\"sectionName\",currentSectionName);\n          String entryName=(String)entryInfo.get(\"name\");\n          if (entryName == null || entryName.isEmpty()) {\n            throw new ParseException(\"Could not determine a formal name for the entry (function, macro or variable name)\");\n          }\n          if (entryMap.containsKey(entryName)) {\n            throw new ParseException(\"Duplicate entry: \" + entryName);\n          }\n          entryMap.put(entryName,entryInfo);\n          sectionEntryMap.put(entryName,entryInfo);\n        }\n catch (        ParseException e) {\n          throw new ParseException(\"Error parsing entry '\" + entryTitle + \"': \"+ e.getMessage(),e);\n        }\n      }\n else {\n        ;\n      }\n    }\n  }\n  msgHandler.logInfo(\" - entries: \" + entryMap.size() + \", sections: \"+ sectionMap.size());\n  dataModel.put(\"sectionMap\",sectionMap);\n  dataModel.put(\"entryMap\",entryMap);\n}"}
{"ids": "74480", "raw_code": "public void writeFile(ArrayList<DccLocoAddress> consistList,String fileName) throws IOException {\n  Element root=new Element(\"consist-roster-config\");\n  Document doc=newDocument(root,dtdLocation + \"consist-roster-config.dtd\");\n  Map<String,String> m=new HashMap<String,String>();\n  m.put(\"type\",\"text/xsl\");\n  m.put(\"href\",xsltLocation + \"consistRoster.xsl\");\n  ProcessingInstruction p=new ProcessingInstruction(\"xml-stylesheet\",m);\n  doc.addContent(0,p);\n  Element roster=new Element(\"roster\");\n  for (int i=0; i < consistList.size(); i++) {\n    Consist newConsist=consistMan.getConsist(consistList.get(i));\n    roster.addContent(consistToXml(newConsist));\n  }\n  root.addContent(roster);\n  try {\n    if (!checkFile(fileName)) {\n      File file=new File(fileName);\n      File parentDir=file.getParentFile();\n      if (!parentDir.exists()) {\n        if (!parentDir.mkdir()) {\n          throw (new IOException());\n        }\n      }\n      if (!file.createNewFile()) {\n        throw (new IOException());\n      }\n    }\n    writeXML(findFile(fileName),doc);\n  }\n catch (  IOException ioe) {\n    log.error(\"IO Exception \" + ioe);\n    throw (ioe);\n  }\n}"}
{"ids": "43316", "raw_code": "public void train(Reader aReader) throws IOException {\n  BufferedReader in=new BufferedReader(aReader);\n  String line=in.readLine();\n  while (line != null) {\n    Matcher m=WORD_PATTERN.matcher(line.toLowerCase());\n    while (m.find()) {\n      String word=m.group();\n      AtomicInteger count=nWords.get(word);\n      if (count == null) {\n        count=new AtomicInteger(0);\n        nWords.put(word,count);\n      }\n      count.incrementAndGet();\n    }\n    line=in.readLine();\n  }\n}"}
{"ids": "78609", "raw_code": "private void startClient(){\n  if (flumeClient != null && !flumeClient.isActive()) {\n    flumeClient.close();\n    flumeClient=null;\n  }\n  if (flumeClient == null) {\n    try {\n      flumeClient=RpcClientFactory.getDefaultInstance(flumeHostName,flumePort,maxSpanBatchSize);\n    }\n catch (    FlumeException e) {\n      LOG.warn(\"Failed to create Flume RPC Client. \" + e.getMessage());\n    }\n  }\n}"}
{"ids": "67854", "raw_code": "public void vspan(long start,long end,Paint color,String legend){\n  LegendText legendText=new LegendText(color,legend);\n  comments.add(legendText);\n  plotElements.add(new VSpan(start,end,color,legendText));\n}"}
{"ids": "59820", "raw_code": "public void onDraw(Canvas canvas,int centerX,int centerY){\n  if (!mVisible) {\n    return;\n  }\n  mArcBounds=new RectF(centerX - mProgressRadius,centerY - mProgressRadius,centerX + mProgressRadius,centerY + mProgressRadius);\n  canvas.drawCircle(centerX,centerY,mProgressRadius,mProgressBasePaint);\n  canvas.drawArc(mArcBounds,-90,mProgressAngleDegrees,false,mProgressPaint);\n  if (mProgressAngleDegrees == 360 && System.currentTimeMillis() > mTimeToHide) {\n    mVisible=false;\n    if (mVisibilityListener != null) {\n      mVisibilityListener.onHidden();\n    }\n  }\n}"}
{"ids": "20594", "raw_code": "private void removeItemAtInt(int index,boolean updateChildrenOnMenuViews){\n  if ((index < 0) || (index >= mItems.size()))   return;\n  mItems.remove(index);\n  if (updateChildrenOnMenuViews)   onItemsChanged(true);\n}"}
{"ids": "62218", "raw_code": "public static byte[] decode(String s){\n  return decode(s.toCharArray());\n}"}
{"ids": "75733", "raw_code": "public boolean check(){\n  return (m_File != null) && (m_Handler != null) && m_File.exists();\n}"}
{"ids": "6612", "raw_code": "private void append(PrintWriter pw,final String k,final String v){\n  if (v != null) {\n    pw.println(k + \": \" + v);\n  }\n}"}
{"ids": "54010", "raw_code": "default B withDefault(String key,Object value){\n  return withDefault(key,value != null ? value.toString() : null);\n}"}
{"ids": "33771", "raw_code": "private void skipWhitespace(){\n  matcher.usePattern(WHITESPACE);\n  if (matcher.lookingAt()) {\n    matcher.region(matcher.end(),matcher.regionEnd());\n  }\n}"}
{"ids": "67411", "raw_code": "protected void createDynamicStyleForComponents(final TextField tagName,final TextArea tagDesc,final String taregtTagColor){\n  tagName.removeStyleName(SPUIDefinitions.TAG_NAME);\n  tagDesc.removeStyleName(SPUIDefinitions.TAG_DESC);\n  getTargetDynamicStyles(taregtTagColor);\n  tagName.addStyleName(TAG_NAME_DYNAMIC_STYLE);\n  tagDesc.addStyleName(TAG_DESC_DYNAMIC_STYLE);\n}"}
{"ids": "66863", "raw_code": "public void calculate_scores(){\n  score=0;\n  if (contents.length == 0) {\n    API api=API.v();\n    Set<InfoKind> source=api.getSourceInfoKinds(method);\n    Set<InfoKind> sink=api.getSinkInfoKinds(method);\n    if (is_system(method)) {\n      if (api.isSafeMethod(method))       score=0;\n else       if (api.isSpecMethod(method))       score=5;\n else       if (api.isBannedMethod(method))       score=6;\n      if (!source.isEmpty())       score+=1;\n else       if (!sink.isEmpty())       score+=2;\n    }\n    return;\n  }\n  for (  CallChainInfo cci : contents) {\n    cci.calculate_scores();\n    calls+=cci.calls;\n    syscalls+=cci.syscalls;\n    if (cci.score > score)     score=cci.score;\n  }\n}"}
{"ids": "33331", "raw_code": "public <T>JsonArray<T> createListDtoFromJson(String json,Class<T> dtoInterface){\n  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);\n  final List<JsonElement> list=gson.fromJson(json,listTypeCache.getUnchecked(JsonElement.class));\n  final List<T> result=new ArrayList<>(list.size());\n  for (  JsonElement e : list) {\n    result.add(dtoProvider.fromJson(e));\n  }\n  return new JsonArrayImpl<>(result);\n}"}
{"ids": "78551", "raw_code": "public static long longForQuery(SQLiteDatabase db,String query,String[] selectionArgs){\n  SQLiteStatement prog=db.compileStatement(query);\n  try {\n    return longForQuery(prog,selectionArgs);\n  }\n  finally {\n    prog.close();\n  }\n}"}
{"ids": "67213", "raw_code": "@Override public void remove(String... identifiers){\n  whitelist.removeAll(Arrays.asList(identifiers));\n}"}
{"ids": "48040", "raw_code": "public static byte[] checkTlsPreMasterSecretKey(int clientVersion,int serverVersion,SecureRandom random,byte[] encoded,boolean isFailOver){\n  if (random == null) {\n    random=JCAUtil.getSecureRandom();\n  }\n  byte[] replacer=new byte[48];\n  random.nextBytes(replacer);\n  if (!isFailOver && (encoded != null)) {\n    if (encoded.length != 48) {\n      return replacer;\n    }\n    int encodedVersion=((encoded[0] & 0xFF) << 8) | (encoded[1] & 0xFF);\n    if (clientVersion != encodedVersion) {\n      if (clientVersion > 0x0301 || serverVersion != encodedVersion) {\n        encoded=replacer;\n      }\n    }\n    return encoded;\n  }\n  return replacer;\n}"}
{"ids": "37414", "raw_code": "public Commafier(final String initial){\n  m_separator=DEFAULT_SEPARATOR;\n  sb.append(initial);\n}"}
{"ids": "12786", "raw_code": "public void write(File file) throws IOException {\n  PrintWriter pw=new PrintWriter(new OutputStreamWriter(new FileOutputStream(file),\"UTF-8\"),true);\n  if (fromDir != null) {\n    pw.println(\"FROM: \" + fromDir + \"*\"+ fromExt);\n  }\n  String str=null;\n  for (int i=0; i < bList.size(); i++) {\n    str=(String)(bList.elementAt(i));\n    pw.println(str);\n  }\n}"}
{"ids": "33129", "raw_code": "private void log(IStatus status){\n  ResourcesPlugin.log(status);\n}"}
{"ids": "6330", "raw_code": "static private StringBuilder replace(StringBuilder input,java.util.regex.Pattern pattern,String replacement){\n  java.util.regex.Matcher m=pattern.matcher(input);\n  while (m.find()) {\n    if (isEscapedChar(input.toString(),m.start())) {\n      continue;\n    }\n    input.replace(m.start(),m.end(),replacement);\n    m.reset(input);\n  }\n  return input;\n}"}
{"ids": "10839", "raw_code": "public static MultisigAggregateModificationTransaction createMultisigModification(){\n  return new MultisigAggregateModificationTransaction(TimeInstant.ZERO,Utils.generateRandomAccount(),Collections.singletonList(new MultisigCosignatoryModification(MultisigModificationType.AddCosignatory,Utils.generateRandomAccount())));\n}"}
{"ids": "3988", "raw_code": "public static boolean isJarCacheEnabledDefault(){\n  return _isJarCacheEnabled;\n}"}
{"ids": "86910", "raw_code": "public static void copy(long[] src,int srcOffset,long[] dst,int dstOffset,int len){\n  int srcLimit=srcOffset + len;\n  while (srcOffset < srcLimit) {\n    int srcIdx=srcOffset & 63;\n    int dstIdx=dstOffset & 63;\n    int srcRemainder=64 - srcIdx;\n    int dstRemainder=64 - dstIdx;\n    int chunkLen=Math.min(srcRemainder,dstRemainder);\n    long mask=maskBelow(chunkLen) << srcIdx;\n    dst[dstOffset >> 6]|=((src[srcOffset >> 6] & mask) >>> srcIdx) << dstOffset;\n    srcOffset+=chunkLen;\n    dstOffset+=chunkLen;\n  }\n}"}
{"ids": "11550", "raw_code": "protected int inBorder(int x,int y){\n  Border b=getBorder();\n  if (b == null) {\n    return UNDEF;\n  }\n  Insets i=b.getBorderInsets(this);\n  if (x <= i.left) {\n    return DOCK_WEST;\n  }\n  if (x >= getWidth() - i.right) {\n    return DOCK_EAST;\n  }\n  if (y <= i.top) {\n    return DOCK_NORTH;\n  }\n  if (y >= getHeight() - i.bottom) {\n    return DOCK_SOUTH;\n  }\n  return UNDEF;\n}"}
{"ids": "63776", "raw_code": "public WallForce(float gravConst,float x1,float y1,float x2,float y2){\n  params=new float[]{gravConst};\n  minValues=new float[]{DEFAULT_MIN_GRAV_CONSTANT};\n  maxValues=new float[]{DEFAULT_MAX_GRAV_CONSTANT};\n  this.x1=x1;\n  this.y1=y1;\n  this.x2=x2;\n  this.y2=y2;\n  dx=x2 - x1;\n  dy=y2 - y1;\n  float r=(float)Math.sqrt(dx * dx + dy * dy);\n  if (dx != 0.0)   dx/=r;\n  if (dy != 0.0)   dy/=r;\n}"}
{"ids": "86764", "raw_code": "public static void writeLn(final OutputStream out) throws IOException {\n  out.write(LS_BYTES);\n}"}
{"ids": "13405", "raw_code": "public static boolean isSystemApplication(Context context){\n  if (context == null) {\n    return false;\n  }\n  return isSystemApplication(context,context.getPackageName());\n}"}
{"ids": "36321", "raw_code": "private static void initializeReleasePlatform(){\n  String platformProperty=readConfigProperty(PLATFORM_PROPERTIES,PLATFORM_PROPERTY_KEY);\n  if (platformProperty == null) {\n    logInfo(\"Release platform not defined.\");\n  }\n else {\n    currentPlatform=Platform.valueOf(platformProperty.toUpperCase(Locale.UK));\n    logInfo(\"Release platform: \" + currentPlatform);\n  }\n}"}
{"ids": "10035", "raw_code": "public static boolean isEmpty(CharSequence str){\n  if (str == null || str.length() == 0) {\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "12332", "raw_code": "@Override public FSDataInputStream open(Path path,int bufferSize) throws IOException {\n  String table=getTableName(_rootPath,path);\n  String split=getSplitName(_rootPath,path);\n  split=splitNameWithoutGzipExtension(split);\n  return new FSDataInputStream(new EmoSplitInputStream(table,split));\n}"}
{"ids": "61632", "raw_code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n  if (subSignature.equals(\"java.lang.Class defineClass0(java.lang.String,byte[],int,int,java.lang.security.ProtectionDomain)\")) {\n    java_lang_ClassLoader_defineClass0(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"java.lang.Class findBootstrapClass(java.lang.String)\")) {\n    java_lang_ClassLoader_findBootstrapClass(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"java.lang.Class findLoadedClass(java.lang.String)\")) {\n    java_lang_ClassLoader_findLoadedClass(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"java.lang.ClassLoader getCallerClassLoader()\")) {\n    java_lang_ClassLoader_getCallerClassLoader(method,thisVar,returnVar,params);\n    return;\n  }\n else {\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}"}
{"ids": "73820", "raw_code": "public static final String extractIplIdentityHostFrimwareRev(LocoNetMessage m){\n  StringBuilder s=new StringBuilder();\n  s.append(Integer.toString((m.getElement(8) & 0x78) >> 3));\n  s.append(\".\");\n  s.append(Integer.toString((m.getElement(8) & 0x07)));\n  return s.toString();\n}"}
{"ids": "11346", "raw_code": "private void grow(){\n  if (keys == null || nkeys >= keys.length) {\n    String[] nk=new String[nkeys + 4];\n    String[] nv=new String[nkeys + 4];\n    if (keys != null)     System.arraycopy(keys,0,nk,0,nkeys);\n    if (values != null)     System.arraycopy(values,0,nv,0,nkeys);\n    keys=nk;\n    values=nv;\n  }\n}"}
{"ids": "68085", "raw_code": "private List<T> filter(final Collection<T> collection){\n  final List<T> nullFreeList=new ArrayList<T>();\n  if (collection != null) {\n    for (    final T item : collection) {\n      if (item != null) {\n        nullFreeList.add(item);\n      }\n    }\n  }\n  return nullFreeList;\n}"}
{"ids": "66899", "raw_code": "public boolean isSystemClass(SootClass clz){\n  return allSystemClasses.contains(clz);\n}"}
{"ids": "43106", "raw_code": "private byte[] tryDecodeHostToIp(String host){\n  if (host.startsWith(\"[\") && host.endsWith(\"]\")) {\n    return tryDecodeHostToIPv6(host);\n  }\n  return tryDecodeHostToIPv4(host);\n}"}
{"ids": "11873", "raw_code": "private void updateBaseMatrix(Drawable d){\n  ImageView imageView=getImageView();\n  if (null == imageView || null == d) {\n    return;\n  }\n  final float viewWidth=getImageViewWidth(imageView);\n  final float viewHeight=getImageViewHeight(imageView);\n  final int drawableWidth=d.getIntrinsicWidth();\n  final int drawableHeight=d.getIntrinsicHeight();\n  mBaseMatrix.reset();\n  final float widthScale=viewWidth / drawableWidth;\n  final float heightScale=viewHeight / drawableHeight;\n  if (mScaleType == ScaleType.CENTER) {\n    mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F);\n  }\n else   if (mScaleType == ScaleType.CENTER_CROP) {\n    float scale=Math.max(widthScale,heightScale);\n    mBaseMatrix.postScale(scale,scale);\n    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);\n  }\n else   if (mScaleType == ScaleType.CENTER_INSIDE) {\n    float scale=Math.min(1.0f,Math.min(widthScale,heightScale));\n    mBaseMatrix.postScale(scale,scale);\n    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);\n  }\n else {\n    RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight);\n    RectF mTempDst=new RectF(0,0,viewWidth,viewHeight);\nswitch (mScaleType) {\ncase FIT_CENTER:\n      mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER);\n    break;\ncase FIT_START:\n  mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START);\nbreak;\ncase FIT_END:\nmBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END);\nbreak;\ncase FIT_XY:\nmBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL);\nbreak;\ndefault :\nbreak;\n}\n}\nresetMatrix();\n}"}
{"ids": "42959", "raw_code": "public List<Node> listAvailableNodes(Class<?> type){\n  List<Node> result=new ArrayList<Node>();\n  for (  Node node : availableNodes) {\n    if (type.isAssignableFrom(node.getReturnType())) {\n      result.add(node);\n    }\n  }\n  return result;\n}"}
{"ids": "56494", "raw_code": "private <T extends Draft3Resource>T lookForResource(Draft3ResourceType type,Class<T> clazz){\n  List<T> resources=lookForResources(type,clazz);\n  return resources != null && resources.size() > 0 ? resources.get(0) : null;\n}"}
{"ids": "64437", "raw_code": "public static String readFileToString(File file) throws IOException {\n  return readFileToString(file,Charset.defaultCharset());\n}"}
{"ids": "21234", "raw_code": "private boolean isLocked(Order order){\n  lock.lock();\n  try {\n    return activeOrders.contains(order.getId());\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "48067", "raw_code": "private static byte[] longToByteArray(long l){\n  byte[] retVal=new byte[8];\n  for (int i=0; i < 8; i++) {\n    retVal[i]=(byte)l;\n    l>>=8;\n  }\n  return retVal;\n}"}
{"ids": "46818", "raw_code": "public static boolean isFileTypeSupported(int fileType){\n  List providers=getMidiFileWriters();\n  for (int i=0; i < providers.size(); i++) {\n    MidiFileWriter writer=(MidiFileWriter)providers.get(i);\n    if (writer.isFileTypeSupported(fileType)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "32606", "raw_code": "public void addMutedUsername(final String username){\n  addMutedUsername(username,null);\n}"}
{"ids": "86526", "raw_code": "public void overrideCurrentTime(long time){\n  startTime=System.currentTimeMillis();\n  currentTime=0;\n  storedTime=time;\n}"}
{"ids": "117", "raw_code": "public static String sc(Double score){\n  String score_str=String.format(\"%-5.4f\",score);\n  return score_str;\n}"}
{"ids": "24218", "raw_code": "public static boolean validateBindAddress(String bindAddress){\n  if (bindAddress == null || bindAddress.length() == 0)   return true;\n  if (InetAddressUtil.validateHost(bindAddress) == null)   return false;\n  return true;\n}"}
{"ids": "63575", "raw_code": "protected void fail(String string){\n  lastPrint=0;\n  if (string.length() > 100) {\n    char[] data=string.toCharArray();\n    for (int i=0; i < data.length; i++) {\n      char c=data[i];\n      if (c >= 128 || c < 32) {\n        data[i]=(char)('a' + (c & 15));\n        string=null;\n      }\n    }\n    if (string == null) {\n      string=new String(data);\n    }\n  }\n  println(string);\n  throw new AssertionError(string);\n}"}
{"ids": "35046", "raw_code": "public TypecheckResult interpretResults(TestConfiguration config,CompilationResult compilationResult){\n  List<TestDiagnostic> expectedDiagnostics=readDiagnostics(config,compilationResult);\n  return TypecheckResult.fromCompilationResults(config,compilationResult,expectedDiagnostics);\n}"}
{"ids": "14191", "raw_code": "public boolean isTrustedXACMLProvider(String realm,String entityId,String trustedEntityId,String role) throws SAML2MetaException {\n  boolean result=false;\n  if (role != null) {\n    if (role.equals(SAML2Constants.PDP_ROLE)) {\n      XACMLPDPConfigElement pdpConfig=getPolicyDecisionPointConfig(realm,entityId);\n      if (pdpConfig != null) {\n        result=isSameCircleOfTrust(pdpConfig,realm,trustedEntityId);\n      }\n    }\n else     if (role.equals(SAML2Constants.PEP_ROLE)) {\n      XACMLAuthzDecisionQueryConfigElement pepConfig=getPolicyEnforcementPointConfig(realm,entityId);\n      result=isSameCircleOfTrust(pepConfig,realm,trustedEntityId);\n    }\n  }\n  return result;\n}"}
{"ids": "64358", "raw_code": "private PropertyEditor loadPropertyEditor(Class clz){\n  PropertyEditor editor=null;\n  try {\n    editor=(PropertyEditor)clz.newInstance();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  return editor;\n}"}
{"ids": "37821", "raw_code": "public Distribution(Instances source,ClassifierSplitModel modelToUse) throws Exception {\n  int index;\n  Instance instance;\n  double[] weights;\n  m_perClassPerBag=new double[modelToUse.numSubsets()][0];\n  m_perBag=new double[modelToUse.numSubsets()];\n  totaL=0;\n  m_perClass=new double[source.numClasses()];\n  for (int i=0; i < modelToUse.numSubsets(); i++) {\n    m_perClassPerBag[i]=new double[source.numClasses()];\n  }\n  Enumeration<Instance> enu=source.enumerateInstances();\n  while (enu.hasMoreElements()) {\n    instance=enu.nextElement();\n    index=modelToUse.whichSubset(instance);\n    if (index != -1) {\n      add(index,instance);\n    }\n else {\n      weights=modelToUse.weights(instance);\n      addWeights(instance,weights);\n    }\n  }\n}"}
{"ids": "45612", "raw_code": "public void writingRequestHeaders(){\n  if (sentRequestMillis != -1)   throw new IllegalStateException();\n  sentRequestMillis=System.currentTimeMillis();\n}"}
{"ids": "66994", "raw_code": "public List<DexlibAbstractInstruction> instructionsAfter(DexlibAbstractInstruction instruction){\n  int i=instructions.indexOf(instruction);\n  if (i == -1)   throw new IllegalArgumentException(\"Instruction\" + instruction + \"not part of this body.\");\n  return instructions.subList(i + 1,instructions.size());\n}"}
{"ids": "36506", "raw_code": "private Alignment fineTuneAlignment(final Alignment firstCompute,final int xframe,final int yframe,final Point frameLocation,final Point componentLocation,final int compWidth,final int compHeight){\nswitch (firstCompute) {\ncase TOPLEFT:\ncase TOPRIGHT:\n    if (componentLocation.x - frameLocation.x + compWidth / 2 > xframe / 2) {\n      return Alignment.TOPRIGHT;\n    }\n else {\n      return Alignment.TOPLEFT;\n    }\ncase LEFTBOTTOM:\ncase LEFTTOP:\n  if (componentLocation.y - frameLocation.y + compHeight / 2 > yframe / 2) {\n    return Alignment.LEFTBOTTOM;\n  }\n else {\n    return Alignment.LEFTTOP;\n  }\ncase RIGHTBOTTOM:\ncase RIGHTTOP:\nif (componentLocation.y - frameLocation.y + compHeight / 2 > yframe / 2) {\n  return Alignment.RIGHTBOTTOM;\n}\n else {\n  return Alignment.RIGHTTOP;\n}\ncase BOTTOMLEFT:\ncase BOTTOMRIGHT:\nif (componentLocation.x - frameLocation.x + compWidth / 2 > xframe / 2) {\nreturn Alignment.BOTTOMRIGHT;\n}\n else {\nreturn Alignment.BOTTOMLEFT;\n}\ndefault :\nif (realAlignment == Alignment.INNERLEFT || realAlignment == Alignment.INNERRIGHT) {\nreturn realAlignment;\n}\nif (componentLocation.x - frameLocation.x > xframe + frameLocation.x - (compWidth + componentLocation.x)) {\nreturn Alignment.INNERRIGHT;\n}\n else {\nreturn Alignment.INNERLEFT;\n}\n}\n}"}
{"ids": "53519", "raw_code": "public boolean isEmpty(){\n  return shapes == null ? true : shapes.isEmpty();\n}"}
{"ids": "33708", "raw_code": "public static boolean isNetworkAvailable(Context context){\n  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo netInfo=cm.getActiveNetworkInfo();\n  return netInfo != null && netInfo.isConnectedOrConnecting();\n}"}
{"ids": "73158", "raw_code": "public void resetData(){\n  data.clear();\n  dataNames.clear();\n  dataSet.resetData(dataNames,data,bins);\n}"}
{"ids": "26909", "raw_code": "@Override public URI uploadPackage(){\n  boolean fileExists=new File(topologyPackageLocation).isFile();\n  if (!fileExists) {\n    LOG.info(\"Topology file \" + topologyPackageLocation + \" does not exist.\");\n    return null;\n  }\n  Path filePath=Paths.get(destTopologyFile);\n  File parentDirectory=filePath.getParent().toFile();\n  assert parentDirectory != null;\n  if (!parentDirectory.exists()) {\n    LOG.fine(\"The working directory does not exist; creating it.\");\n    if (!parentDirectory.mkdirs()) {\n      LOG.severe(\"Failed to create directory: \" + parentDirectory.getPath());\n      return null;\n    }\n  }\n  fileExists=new File(filePath.toString()).isFile();\n  if (fileExists) {\n    LOG.fine(\"Target topology file \" + filePath.toString() + \" exists, overwriting...\");\n  }\n  LOG.fine(\"Copying topology \" + topologyPackageLocation + \" package to target working directory \"+ filePath.toString());\n  Path source=Paths.get(topologyPackageLocation);\n  try {\n    CopyOption[] options=new CopyOption[]{StandardCopyOption.REPLACE_EXISTING};\n    Files.copy(source,filePath,options);\n  }\n catch (  IOException ex) {\n    LOG.info(\"Unable to copy: \" + source.toString() + \" \"+ ex);\n    return null;\n  }\n  return getUri(destTopologyFile);\n}"}
{"ids": "51728", "raw_code": "public static String stripEscape(String pattern){\n  if (pattern == null)   return null;\n  StringBuilder stripped=new StringBuilder(pattern.length());\n  for (int pos=0; pos < pattern.length(); pos++) {\n    char ch=pattern.charAt(pos);\n    if (ch != '\\\\') {\n      stripped.append(ch);\n    }\n else     if (pos < pattern.length() - 1 && pattern.charAt(pos + 1) == '\\\\') {\n      stripped.append('\\\\');\n      pos+=1;\n    }\n  }\n  return stripped.toString();\n}"}
{"ids": "28675", "raw_code": "public long guest_time(){\n  return Long.parseLong(fields[42]);\n}"}
{"ids": "10401", "raw_code": "public void auditOperation(String operation,List<? extends TaggedLogAPIEntity> entities,List<String> encodedRowKeys,EntityDefinition entityDefinition){\n  if (isAuditingRequired(entityDefinition.getService())) {\n    List<GenericAuditEntity> auditEntities=buildAuditEntities(operation,entities,encodedRowKeys,entityDefinition);\n    if (null != auditEntities && 0 != auditEntities.size()) {\n      auditSupport.fireAudit(entityDefinition.getService(),auditEntities);\n    }\n  }\n}"}
{"ids": "75401", "raw_code": "public void register(String pattern,String result){\n  Assert.isTrue(matchers.size() == results.size());\n  pattern=pattern.trim();\n  if (pattern.length() == 0) {\n    return;\n  }\n  matchers.add(new StringMatcher(pattern,false,false));\n  results.add(result);\n}"}
{"ids": "63594", "raw_code": "@Override public boolean onItemUse(ItemStack par1ItemStack,EntityPlayer par2EntityPlayer,World par3World,int x,int y,int z,int par7,float par8,float par9,float par10){\n  if (!par3World.isRemote) {\n    TileEntity tileEntity=par3World.getTileEntity(x,y,z);\n    if (tileEntity != null) {\n      if (tileEntity instanceof TileLauncherPrefab) {\n        TileLauncherPrefab missileLauncher=(TileLauncherPrefab)tileEntity;\n        if (missileLauncher.getFrequency() > 0) {\n          setFrequency(missileLauncher.getFrequency(),par1ItemStack);\n          par2EntityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + \" \"+ LangUtils.localize(\"message.designator.setFreq\")+ \" \"+ EnumColor.DARK_GREY+ getFrequency(par1ItemStack)));\n        }\n else {\n          par2EntityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + \" \"+ LangUtils.localize(\"message.designator.failFreq\")));\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "23458", "raw_code": "public static PublicKey generatePublicKey(String encodedPublicKey){\n  try {\n    byte[] decodedKey=Base64.decode(encodedPublicKey);\n    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);\n    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  InvalidKeySpecException e) {\n    Log.e(TAG,\"Invalid key specification.\");\n    throw new IllegalArgumentException(e);\n  }\ncatch (  Base64DecoderException e) {\n    Log.e(TAG,\"Base64 decoding failed.\");\n    throw new IllegalArgumentException(e);\n  }\n}"}
{"ids": "57372", "raw_code": "SSLSession toSession(byte[] data,String host,int port){\n  ByteArrayInputStream bais=new ByteArrayInputStream(data);\n  DataInputStream dais=new DataInputStream(bais);\n  try {\n    int type=dais.readInt();\n    if (type != OPEN_SSL) {\n      log(new AssertionError(\"Unexpected type ID: \" + type));\n      return null;\n    }\n    int length=dais.readInt();\n    byte[] sessionData=new byte[length];\n    dais.readFully(sessionData);\n    int count=dais.readInt();\n    X509Certificate[] certs=new X509Certificate[count];\n    for (int i=0; i < count; i++) {\n      length=dais.readInt();\n      byte[] certData=new byte[length];\n      dais.readFully(certData);\n      certs[i]=OpenSSLX509Certificate.fromX509Der(certData);\n    }\n    return new OpenSSLSessionImpl(sessionData,host,port,certs,this);\n  }\n catch (  IOException e) {\n    log(e);\n    return null;\n  }\n}"}
{"ids": "9923", "raw_code": "private static String parseDERString(byte[] alterNameValue) throws Throwable {\n  try {\n    ASN1StreamParser p=new ASN1StreamParser(alterNameValue);\n    ASN1Encodable d=p.readObject();\n    ASN1Primitive der=d.toASN1Primitive();\n    return getStringFromObject(der);\n  }\n catch (  Throwable e) {\n    logger.error(\"Unable to extract User Principal Name: \" + e.getMessage());\n    throw e;\n  }\n}"}
{"ids": "69556", "raw_code": "public AtlasMessagesAdapter addCellFactories(AtlasCellFactory... cellFactories){\n  for (  AtlasCellFactory CellFactory : cellFactories) {\n    CellFactory.setStyle(mMessageStyle);\n    mCellFactories.add(CellFactory);\n    mViewTypeCount++;\n    CellType me=new CellType(true,CellFactory);\n    mCellTypesByViewType.put(mViewTypeCount,me);\n    mMyViewTypesByCell.put(CellFactory,mViewTypeCount);\n    mViewTypeCount++;\n    CellType notMe=new CellType(false,CellFactory);\n    mCellTypesByViewType.put(mViewTypeCount,notMe);\n    mTheirViewTypesByCell.put(CellFactory,mViewTypeCount);\n  }\n  return this;\n}"}
{"ids": "13235", "raw_code": "protected String consumeBOM(InputStream stream,String encoding) throws IOException {\n  byte[] b=new byte[3];\n  int count=0;\n  stream.mark(3);\n  if (encoding.equals(\"UTF-8\")) {\n    count=stream.read(b,0,3);\n    if (count == 3) {\n      final int b0=b[0] & 0xFF;\n      final int b1=b[1] & 0xFF;\n      final int b2=b[2] & 0xFF;\n      if (b0 != 0xEF || b1 != 0xBB || b2 != 0xBF) {\n        stream.reset();\n      }\n    }\n else {\n      stream.reset();\n    }\n  }\n else   if (encoding.startsWith(\"UTF-16\")) {\n    count=stream.read(b,0,2);\n    if (count == 2) {\n      final int b0=b[0] & 0xFF;\n      final int b1=b[1] & 0xFF;\n      if (b0 == 0xFE && b1 == 0xFF) {\n        return \"UTF-16BE\";\n      }\n else       if (b0 == 0xFF && b1 == 0xFE) {\n        return \"UTF-16LE\";\n      }\n    }\n    stream.reset();\n  }\n  return encoding;\n}"}
{"ids": "30065", "raw_code": "public static int createWithIdGeneration(Connection connection,String rawSqlQuery,Object... parameters) throws SQLException {\n  PreparedStatement stmt=null;\n  ResultSet rs=null;\n  try {\n    stmt=connection.prepareStatement(rawSqlQuery,Statement.RETURN_GENERATED_KEYS);\n    for (int index=0; index < parameters.length; index++) {\n      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);\n    }\n    stmt.executeUpdate();\n    rs=stmt.getGeneratedKeys();\n    rs.next();\n    return rs.getInt(1);\n  }\n  finally {\n    JdbcUtils.closeResultSet(rs);\n    JdbcUtils.closeStatement(stmt);\n  }\n}"}
{"ids": "77499", "raw_code": "public static int andNot(int a[],int lena,int b[],int lenb,int[] target){\n  if (lena == 0)   return 0;\n  if (lenb == 0) {\n    System.arraycopy(a,0,target,0,lena);\n    return lena;\n  }\n  if ((lenb >> 3) >= lena) {\n    return andNotBinarySearch(a,lena,b,lenb,target);\n  }\n  int count=0;\n  int i=0, j=0;\n  int doca=a[i], docb=b[j];\n  for (; ; ) {\n    if (doca > docb) {\n      if (++j >= lenb)       break;\n      docb=b[j];\n    }\n else     if (doca < docb) {\n      target[count++]=doca;\n      if (++i >= lena)       break;\n      doca=a[i];\n    }\n else {\n      if (++i >= lena)       break;\n      doca=a[i];\n      if (++j >= lenb)       break;\n      docb=b[j];\n    }\n  }\n  int leftover=lena - i;\n  if (leftover > 0) {\n    System.arraycopy(a,i,target,count,leftover);\n    count+=leftover;\n  }\n  return count;\n}"}
{"ids": "61546", "raw_code": "public boolean remove(HttpConnection connection){\n  TimeValues times=connectionToTimes.remove(connection);\n  if (times == null) {\n    log.warn(\"Removing a connection that never existed!\");\n    return true;\n  }\n else {\n    return System.currentTimeMillis() <= times.timeExpires;\n  }\n}"}
{"ids": "66418", "raw_code": "void createButtons(){\n  if (scrollForwardButton != null) {\n    tabPane.remove(scrollForwardButton);\n    scrollForwardButton.removeActionListener(this);\n    tabPane.remove(scrollBackwardButton);\n    scrollBackwardButton.removeActionListener(this);\n  }\n  int tabPlacement=tabPane.getTabPlacement();\n  int width=UIManager.getInt(\"ScrollBar.width\");\n  if (tabPlacement == TOP || tabPlacement == BOTTOM) {\n    scrollForwardButton=new ArrowButton(EAST,width);\n    scrollBackwardButton=new ArrowButton(WEST,width);\n  }\n else {\n    scrollForwardButton=new ArrowButton(SOUTH,width);\n    scrollBackwardButton=new ArrowButton(NORTH,width);\n  }\n  scrollForwardButton.addActionListener(this);\n  scrollBackwardButton.addActionListener(this);\n  tabPane.add(scrollForwardButton);\n  tabPane.add(scrollBackwardButton);\n}"}
{"ids": "59729", "raw_code": "private boolean checkTouchSlop(View child,float dx,float dy){\n  if (child == null) {\n    return false;\n  }\n  final boolean checkHorizontal=mCallback.getViewHorizontalDragRange(child) > 0;\n  final boolean checkVertical=mCallback.getViewVerticalDragRange(child) > 0;\n  if (checkHorizontal && checkVertical) {\n    return dx * dx + dy * dy > mTouchSlop * mTouchSlop;\n  }\n else   if (checkHorizontal) {\n    return Math.abs(dx) > mTouchSlop;\n  }\n else   if (checkVertical) {\n    return Math.abs(dy) > mTouchSlop;\n  }\n  return false;\n}"}
{"ids": "79898", "raw_code": "public static String rmSlashFromUrl(final String url){\n  return url.endsWith(\"/\") ? url.substring(0,url.length() - 1) : url;\n}"}
{"ids": "26739", "raw_code": "protected void updateChartLayout(){\n  chartContainer.removeAll();\n  List<String> selectedMetrics=getSelectedMetrics();\n  if (selectedMetrics.size() > 0) {\n    if (selectedMetrics.size() <= 1) {\n      chartContainer.setLayout(new GridLayout(1,1));\n    }\n else     if (selectedMetrics.size() <= 2) {\n      chartContainer.setLayout(new GridLayout(2,1));\n    }\n else     if (selectedMetrics.size() <= 4) {\n      chartContainer.setLayout(new GridLayout(2,2));\n    }\n else     if (selectedMetrics.size() <= 6) {\n      chartContainer.setLayout(new GridLayout(3,2));\n    }\n else {\n      chartContainer.setLayout(new GridLayout((int)Math.ceil(selectedMetrics.size() / 3.0),3));\n    }\n    GridLayout layout=(GridLayout)chartContainer.getLayout();\n    int spaces=layout.getRows() * layout.getColumns();\n    for (int i=0; i < Math.max(spaces,selectedMetrics.size()); i++) {\n      if (i < selectedMetrics.size()) {\n        chartContainer.add(createChart(selectedMetrics.get(i)));\n      }\n else {\n        chartContainer.add(new EmptyPlot(this));\n      }\n    }\n  }\n  chartContainer.revalidate();\n}"}
{"ids": "71412", "raw_code": "public String host(Properties props){\n  return props.getProperty(HOST_PROPERTY_KEY,\"localhost\");\n}"}
{"ids": "70360", "raw_code": "void cancel(){\n  setVisible(false);\n}"}
{"ids": "67830", "raw_code": "@Override public MemChunkHolder<VolatileMemAllocator> createChunk(long size,boolean autoreclaim){\n  MemChunkHolder<VolatileMemAllocator> ret=null;\n  Long addr=m_vmasvc.allocate(m_nid,size,true);\n  if (0 == addr && m_activegc) {\n    m_chunkcollector.waitReclaimCoolDown(m_gctimeout);\n    addr=m_vmasvc.allocate(m_nid,size,true);\n  }\n  if (0 != addr) {\n    ret=new MemChunkHolder<VolatileMemAllocator>(this,addr,size);\n    ret.setCollector(m_chunkcollector);\n    if (autoreclaim) {\n      m_chunkcollector.register(ret);\n    }\n  }\n  return ret;\n}"}
{"ids": "7210", "raw_code": "public void waitForInvocation(long msecWait,int numberOfNewEvents){\n  long startTime=System.currentTimeMillis();\n  while (true) {\n    if ((System.currentTimeMillis() - startTime) > msecWait) {\n      throw new RuntimeException(\"No events or less then the number of expected events received, expected \" + numberOfNewEvents + \" received \"+ getNewDataListFlattened().length);\n    }\n    EventBean[] events=getNewDataListFlattened();\n    if (events.length >= numberOfNewEvents) {\n      return;\n    }\n    try {\n      Thread.sleep(50);\n    }\n catch (    InterruptedException e) {\n      return;\n    }\n  }\n}"}
{"ids": "30889", "raw_code": "private String versionName(String prefix,int ver){\n  return fName(prefix) + String.valueOf(ver);\n}"}
{"ids": "33048", "raw_code": "public ExtractMethodRefactoring(ICompilationUnit unit,int selectionStart,int selectionLength){\n  fCUnit=unit;\n  fRoot=null;\n  fMethodName=\"extracted\";\n  fSelectionStart=selectionStart;\n  fSelectionLength=selectionLength;\n  fVisibility=-1;\n}"}
{"ids": "65080", "raw_code": "@Override public boolean done(){\n  if (stoppingIncrements && incrementsLeft == 0)   return true;\n else   return false;\n}"}
{"ids": "69508", "raw_code": "public void parse() throws java.lang.Exception {\n  int act;\n  symbol lhs_sym;\n  short handle_size, lhs_sym_num;\n  production_tab=production_table();\n  action_tab=action_table();\n  reduce_tab=reduce_table();\n  init_actions();\n  user_init();\n  cur_token=scan();\n  stack.push(new symbol(0,start_state()));\n  tos=0;\n  for (_done_parsing=false; !_done_parsing; ) {\n    act=get_action(((symbol)stack.peek()).parse_state,cur_token.sym);\n    if (act > 0) {\n      cur_token.parse_state=act - 1;\n      stack.push(cur_token);\n      tos++;\n      cur_token=scan();\n    }\n else     if (act < 0) {\n      lhs_sym=do_action((-act) - 1,this,stack,tos);\n      lhs_sym_num=production_tab[(-act) - 1][0];\n      handle_size=production_tab[(-act) - 1][1];\n      for (int i=0; i < handle_size; i++) {\n        stack.pop();\n        tos--;\n      }\n      act=get_reduce(((symbol)stack.peek()).parse_state,lhs_sym_num);\n      lhs_sym.parse_state=act;\n      stack.push(lhs_sym);\n      tos++;\n    }\n else     if (act == 0) {\n      syntax_error(cur_token);\n      if (!error_recovery(false)) {\n        unrecovered_syntax_error(cur_token);\n        done_parsing();\n      }\n    }\n  }\n}"}
{"ids": "70012", "raw_code": "private static void writeSet1(final BTree btree){\n  log.info(\"\");\n  for (int i=0; i < 1000; i++) {\n    btree.insert(i,i);\n  }\n}"}
{"ids": "62475", "raw_code": "private byte[] createSegmentTable(int setupHeaderLength,List<OggPageHeader.PacketStartAndLength> extraPackets){\n  ByteArrayOutputStream resultBaos=new ByteArrayOutputStream();\n  byte[] restShouldBe;\n  byte[] nextPacket;\n  restShouldBe=createSegments(setupHeaderLength,true);\n  try {\n    resultBaos.write(restShouldBe);\n    if (extraPackets.size() > 0) {\n      for (      OggPageHeader.PacketStartAndLength packet : extraPackets) {\n        nextPacket=createSegments(packet.getLength(),false);\n        resultBaos.write(nextPacket);\n      }\n    }\n  }\n catch (  IOException ioe) {\n    throw new RuntimeException(\"Unable to create segment table:\" + ioe.getMessage());\n  }\n  return resultBaos.toByteArray();\n}"}
{"ids": "10227", "raw_code": "public static int indexOfIgnoreCase(String src,String sub,int startIndex,int endIndex){\n  if (startIndex < 0) {\n    startIndex=0;\n  }\n  int srclen=src.length();\n  if (endIndex > srclen) {\n    endIndex=srclen;\n  }\n  int sublen=sub.length();\n  if (sublen == 0) {\n    return startIndex > srclen ? srclen : startIndex;\n  }\n  sub=sub.toLowerCase();\n  int total=endIndex - sublen + 1;\n  char c=sub.charAt(0);\n  mainloop:   for (int i=startIndex; i < total; i++) {\n    if (Character.toLowerCase(src.charAt(i)) != c) {\n      continue;\n    }\n    int j=1;\n    int k=i + 1;\n    while (j < sublen) {\n      char source=Character.toLowerCase(src.charAt(k));\n      if (sub.charAt(j) != source) {\n        continue mainloop;\n      }\n      j++;\n      k++;\n    }\n    return i;\n  }\n  return -1;\n}"}
{"ids": "71112", "raw_code": "private void addPolygonRing(LinearRing lr,int cwLeft,int cwRight){\n  if (lr.isEmpty())   return;\n  Coordinate[] coord=CoordinateArrays.removeRepeatedPoints(lr.getCoordinates());\n  if (coord.length < 4) {\n    hasTooFewPoints=true;\n    invalidPoint=coord[0];\n    return;\n  }\n  int left=cwLeft;\n  int right=cwRight;\n  if (CGAlgorithms.isCCW(coord)) {\n    left=cwRight;\n    right=cwLeft;\n  }\n  Edge e=new Edge(coord,new Label(argIndex,Location.BOUNDARY,left,right));\n  lineEdgeMap.put(lr,e);\n  insertEdge(e);\n  insertPoint(argIndex,coord[0],Location.BOUNDARY);\n}"}
{"ids": "74258", "raw_code": "public boolean acceptsLoadName(String load){\n  if (_loadOption.equals(ALL_LOADS)) {\n    return true;\n  }\n  if (_loadOption.equals(INCLUDE_LOADS)) {\n    return _loadList.contains(load);\n  }\n  return !_loadList.contains(load);\n}"}
{"ids": "12647", "raw_code": "public static void expandLetters(String letters,WordRelation wordRelation){\n  letters=letters.toLowerCase();\n  char c;\n  for (int i=0; i < letters.length(); i++) {\n    c=letters.charAt(i);\n    if (isDigit(c)) {\n      wordRelation.addWord(digit2num[c - '0']);\n    }\n else     if (letters.equals(\"a\")) {\n      wordRelation.addWord(\"_a\");\n    }\n else {\n      wordRelation.addWord(String.valueOf(c));\n    }\n  }\n}"}
{"ids": "45422", "raw_code": "public static void writeStringToFile(File file,String data,Charset encoding,boolean append) throws IOException {\n  OutputStream out=null;\n  try {\n    out=openOutputStream(file,append);\n    IOUtils.write(data,out,encoding);\n    out.close();\n  }\n  finally {\n    IOUtils.closeQuietly(out);\n  }\n}"}
{"ids": "11973", "raw_code": "@Deprecated public static void subtract(String name,double amount) throws UserDoesNotExistException, NoLoanPermittedException {\n  try {\n    substract(name,BigDecimal.valueOf(amount));\n  }\n catch (  ArithmeticException e) {\n    logger.log(Level.WARNING,\"Failed to substract \" + amount + \" of balance of \"+ name+ \": \"+ e.getMessage(),e);\n  }\n}"}
{"ids": "40167", "raw_code": "public MnemonicCode(InputStream wordstream,String wordListDigest) throws IOException, IllegalArgumentException {\n  BufferedReader br=new BufferedReader(new InputStreamReader(wordstream,\"UTF-8\"));\n  wordList=new ArrayList<String>(2048);\n  String word;\n  while ((word=br.readLine()) != null)   wordList.add(word);\n  br.close();\n  initializeFromWords(wordList,wordListDigest);\n}"}
{"ids": "76550", "raw_code": "public QKDialog addMenuItem(String title,long id){\n  mMenuItems.add(title);\n  mMenuItemIds.add(id);\n  return this;\n}"}
{"ids": "63617", "raw_code": "public AnchorPane createFingerPrintPanel(ArrayList<FpPanel> fingerprintPanelList){\n  return createFingerPrintPanel(fingerprintPanelList,null);\n}"}
{"ids": "37339", "raw_code": "private static boolean isMemoryAccess(final String value){\n  return value.equals(\"[\");\n}"}
{"ids": "54315", "raw_code": "public void addAttribute(AttributeInfo info){\n  AttributeInfo.remove(attributes,info.getName());\n  attributes.add(info);\n}"}
{"ids": "9168", "raw_code": "private static boolean verifyStringParam(String str,int maxLength,String acceptableCharacters){\n  return !(str == null || str.length() == 0 || str.length() > maxLength || !Pattern.matches(acceptableCharacters,str));\n}"}
{"ids": "16983", "raw_code": "private int calculateDragSensitivity(){\n  int range=MAX_DRAG_SENSITIVITY - MIN_DRAG_SENSITIVITY;\n  return Math.round((1 - getDragSensitivity()) * range + MIN_DRAG_SENSITIVITY);\n}"}
{"ids": "26491", "raw_code": "public static String lowerFirstChar(String string){\n  if (string == null)   return null;\n  if (string.length() <= 1)   return string.toLowerCase();\n  StringBuilder sb=new StringBuilder(string);\n  sb.setCharAt(0,Character.toLowerCase(sb.charAt(0)));\n  return sb.toString();\n}"}
{"ids": "30146", "raw_code": "public void forEachBlockPosMutableTopDown(Predicate<BlockPos> func){\n  BlockPos.MutableBlockPos blockPos=new BlockPos.MutableBlockPos();\n  int baseX=getMinBlockX();\n  int baseZ=getMinBlockZ();\n  int blockYMax=getMaxBlockY();\n  for (int x=0; x < 16; x++) {\n    for (int z=0; z < 16; z++) {\n      blockPos.setPos(baseX + x,blockYMax,baseZ + z);\n      for (int y=15; y >= 0; y--) {\n        boolean cont=func.test(blockPos);\n        blockPos.move(EnumFacing.DOWN);\n        if (!cont) {\n          break;\n        }\n      }\n    }\n  }\n}"}
{"ids": "85548", "raw_code": "public String visit(Type t,Locale locale){\n  return t.accept(this,locale);\n}"}
{"ids": "70669", "raw_code": "public static final void writeMapXml(Map val,XmlSerializer out,WriteMapCallback callback) throws XmlPullParserException, java.io.IOException {\n  if (val == null) {\n    return;\n  }\n  Set s=val.entrySet();\n  Iterator i=s.iterator();\n  while (i.hasNext()) {\n    Map.Entry e=(Map.Entry)i.next();\n    writeValueXml(e.getValue(),(String)e.getKey(),out,callback);\n  }\n}"}
{"ids": "32729", "raw_code": "public static void dropTable(String table,Connection connection){\n  table=table.replace(\";\",\"\");\n  StringBuilder dropTableQuery=new StringBuilder();\n  dropTableQuery.append(\"DROP TABLE \");\n  dropTableQuery.append(table);\n  LOG.info(\"Drop Table: \");\n  LOG.info(dropTableQuery);\n  executeStatementIfExists(dropTableQuery.toString(),connection);\n}"}
{"ids": "33678", "raw_code": "private int freeSpace(){\n  return buffer.capacity() - buffer.limit() + buffer.position();\n}"}
{"ids": "41604", "raw_code": "@Override public List<Node> generate(int popSize){\n  List<Node> population=new ArrayList<>();\n  for (int i=0; i < popSize; ) {\n    Node candidate=grow(1);\n    if (candidate.isValid()) {\n      population.add(candidate);\n      i++;\n    }\n  }\n  return population;\n}"}
{"ids": "69982", "raw_code": "public synchronized void notifyBeforeUse(CompositeTransaction ct) throws InvalidSessionHandleStateException {\n  if (closed)   throw new InvalidSessionHandleStateException(\"The underlying XA session is closed\");\n  try {\n    TransactionContext suspended=null;\n    if (ct != null) {\n      Iterator<TransactionContext> it=allContexts.iterator();\n      while (it.hasNext() && suspended == null) {\n        TransactionContext b=(TransactionContext)it.next();\n        if (b.isSuspendedInTransaction(ct)) {\n          suspended=b;\n        }\n      }\n    }\n    if (suspended != null) {\n      if (LOGGER.isDebugEnabled())       LOGGER.logDebug(this + \": resuming suspended XA context for transaction \" + ct.getTid());\n      currentContext=suspended;\n      currentContext.transactionResumed();\n    }\n else {\n      try {\n        if (LOGGER.isTraceEnabled())         LOGGER.logTrace(this + \": checking XA context for transaction \" + ct);\n        currentContext.checkEnlistBeforeUse(ct);\n      }\n catch (      UnexpectedTransactionContextException txBoundaryPassed) {\n        if (LOGGER.isDebugEnabled())         LOGGER.logDebug(this + \": suspending existing XA context and creating a new one for transaction \" + ct);\n        currentContext.transactionSuspended();\n        currentContext=new TransactionContext(resource,xaResource);\n        allContexts.add(currentContext);\n        try {\n          currentContext.checkEnlistBeforeUse(ct);\n        }\n catch (        UnexpectedTransactionContextException e) {\n          String msg=\"Unexpected error in session handle\";\n          LOGGER.logError(msg,e);\n          throw new InvalidSessionHandleStateException(msg);\n        }\n      }\n    }\n  }\n catch (  InvalidSessionHandleStateException e) {\n    notifySessionErrorOccurred();\n    throw e;\n  }\n}"}
{"ids": "34737", "raw_code": "public void onActivityResult(int requestCode,int resultCode,Intent data){\n  if (mInitializationComplete) {\n    mActivityDelegate.onActivityResultWithNative(requestCode,resultCode,data);\n  }\n else {\n    if (mPendingActivityResults == null) {\n      mPendingActivityResults=new ArrayList<ActivityResult>(1);\n    }\n    mPendingActivityResults.add(new ActivityResult(requestCode,resultCode,data));\n  }\n}"}
{"ids": "37661", "raw_code": "public void deleteSelection(ArrayList<Integer> nodes){\n  for (int i=0; i < nodes.size(); i++) {\n    for (int j=i + 1; j < nodes.size(); j++) {\n      if (nodes.get(i) > nodes.get(j)) {\n        int h=nodes.get(i);\n        nodes.set(i,nodes.get(j));\n        nodes.set(j,h);\n      }\n    }\n  }\n  if (m_bNeedsUndoAction) {\n    addUndoAction(new DeleteSelectionAction(nodes));\n  }\n  boolean bNeedsUndoAction=m_bNeedsUndoAction;\n  m_bNeedsUndoAction=false;\n  try {\n    for (int iNode=nodes.size() - 1; iNode >= 0; iNode--) {\n      deleteNode(nodes.get(iNode));\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  m_bNeedsUndoAction=bNeedsUndoAction;\n}"}
{"ids": "15656", "raw_code": "protected void onCached(){\n  if (LogConfiguration.loggingIsEnabled()) {\n    logger.log(Level.INFO,\"Resources cached.\");\n  }\n  uiHandler.hideMessage();\n  updating=false;\n  fireApplicationCacheEvent(CacheEvent.onCached);\n}"}
{"ids": "62914", "raw_code": "public static void showString(String title,String content,Dimension dimension){\n  JTextArea area=new JTextArea(content);\n  area.setEditable(false);\n  JScrollPane scroll=new JScrollPane(area);\n  scroll.setPreferredSize(dimension);\n  JOptionPane.showMessageDialog(null,scroll,title,JOptionPane.INFORMATION_MESSAGE);\n}"}
{"ids": "21928", "raw_code": "private void markCGForDeletion(BlockConsistencyGroup consistencyGroup){\n  if (!consistencyGroup.getInactive()) {\n    consistencyGroup.setStorageController(null);\n    consistencyGroup.setInactive(true);\n    _dbClient.updateObject(consistencyGroup);\n  }\n}"}
{"ids": "51426", "raw_code": "public LongBuffer put(long[] src,int srcOffset,int longCount){\n  JTranscArrays.checkOffsetAndCount(src.length,srcOffset,longCount);\n  if (longCount > remaining()) {\n    throw new BufferOverflowException();\n  }\n  for (int i=srcOffset; i < srcOffset + longCount; ++i) {\n    put(src[i]);\n  }\n  return this;\n}"}
{"ids": "40386", "raw_code": "public void playTogether(Collection<Animator> items){\n  if (items != null && items.size() > 0) {\n    mNeedsSort=true;\n    Builder builder=null;\n    for (    Animator anim : items) {\n      if (builder == null) {\n        builder=play(anim);\n      }\n else {\n        builder.with(anim);\n      }\n    }\n  }\n}"}
{"ids": "1370", "raw_code": "private MessageContext createMessageContext(AxisEngine engine,HttpServletRequest req,HttpServletResponse res,Component component){\n  MessageContext msgContext=new MessageContext(engine);\n  String requestPath=getRequestPath(req);\n  if (isDebug) {\n    log.debug(\"MessageContext:\" + msgContext);\n    log.debug(\"HEADER_CONTENT_TYPE:\" + req.getHeader(HTTPConstants.HEADER_CONTENT_TYPE));\n    log.debug(\"HEADER_CONTENT_LOCATION:\" + req.getHeader(HTTPConstants.HEADER_CONTENT_LOCATION));\n    log.debug(\"Constants.MC_HOME_DIR:\" + String.valueOf(homeDir));\n    log.debug(\"Constants.MC_RELATIVE_PATH:\" + requestPath);\n    log.debug(\"HTTPConstants.MC_HTTP_SERVLETLOCATION:\" + String.valueOf(webInfPath));\n    log.debug(\"HTTPConstants.MC_HTTP_SERVLETPATHINFO:\" + req.getPathInfo());\n    log.debug(\"HTTPConstants.HEADER_AUTHORIZATION:\" + req.getHeader(HTTPConstants.HEADER_AUTHORIZATION));\n    log.debug(\"Constants.MC_REMOTE_ADDR:\" + req.getRemoteAddr());\n    log.debug(\"configPath:\" + String.valueOf(webInfPath));\n  }\n  msgContext.setTransportName(\"http\");\n  msgContext.setProperty(Constants.MC_HOME_DIR,homeDir);\n  msgContext.setProperty(Constants.MC_RELATIVE_PATH,requestPath);\n  msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLET,this);\n  msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLETREQUEST,req);\n  msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLETRESPONSE,res);\n  msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLETLOCATION,webInfPath);\n  msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLETPATHINFO,req.getPathInfo());\n  msgContext.setProperty(HTTPConstants.HEADER_AUTHORIZATION,req.getHeader(HTTPConstants.HEADER_AUTHORIZATION));\n  msgContext.setProperty(lucee.runtime.net.rpc.server.Constants.COMPONENT,component);\n  msgContext.setProperty(Constants.MC_REMOTE_ADDR,req.getRemoteAddr());\n  ServletEndpointContextImpl sec=new ServletEndpointContextImpl();\n  msgContext.setProperty(Constants.MC_SERVLET_ENDPOINT_CONTEXT,sec);\n  String realpath=context.getRealPath(requestPath);\n  if (realpath != null) {\n    msgContext.setProperty(Constants.MC_REALPATH,realpath);\n  }\n  msgContext.setProperty(Constants.MC_CONFIGPATH,webInfPath);\n  return msgContext;\n}"}
{"ids": "51940", "raw_code": "@Override public void invokeCommand(int argLength,String[] args,String command){\n  Pattern regex=null;\n  if (args.length == 1) {\n    regex=Pattern.compile(args[0]);\n  }\n else   if (args.length != 0) {\n    throw new UsageException(\"help [command]\");\n  }\n  for (  AbstractCommand cmd : CommandBus.commands)   tryRegex(regex,cmd);\n  for (  FuzzyCommand cmd : CommandBus.parsers)   tryRegex(regex,cmd);\n}"}
{"ids": "24738", "raw_code": "public static Builder newBuilder(){\n  return new Builder();\n}"}
{"ids": "8696", "raw_code": "protected int parseAndAddNode(XmlResourceParser parser,HashMap<String,TagParser> tagParserMap,ArrayList<Long> screenIds) throws XmlPullParserException, IOException {\n  if (TAG_INCLUDE.equals(parser.getName())) {\n    final int resId=getAttributeResourceValue(parser,ATTR_WORKSPACE,0);\n    if (resId != 0) {\n      return parseLayout(resId,screenIds);\n    }\n else {\n      return 0;\n    }\n  }\n  mValues.clear();\n  parseContainerAndScreen(parser,mTemp);\n  final long container=mTemp[0];\n  final long screenId=mTemp[1];\n  mValues.put(LauncherSettings.Favorites.CONTAINER,container);\n  mValues.put(LauncherSettings.Favorites.SCREEN,screenId);\n  mValues.put(LauncherSettings.Favorites.CELLX,convertToDistanceFromEnd(getAttributeValue(parser,ATTR_X),mColumnCount));\n  mValues.put(LauncherSettings.Favorites.CELLY,convertToDistanceFromEnd(getAttributeValue(parser,ATTR_Y),mRowCount));\n  TagParser tagParser=tagParserMap.get(parser.getName());\n  if (tagParser == null) {\n    if (LOGD)     Log.d(TAG,\"Ignoring unknown element tag: \" + parser.getName());\n    return 0;\n  }\n  long newElementId=tagParser.parseAndAdd(parser);\n  if (newElementId >= 0) {\n    if (!screenIds.contains(screenId) && container == LauncherSettings.Favorites.CONTAINER_DESKTOP) {\n      screenIds.add(screenId);\n    }\n    return 1;\n  }\n  return 0;\n}"}
{"ids": "80011", "raw_code": "public WordEntry addNewWord(final String str){\n  final String key=trimWord(str);\n  WordEntry entry=words.get(key);\n  if (entry == null) {\n    entry=new WordEntry();\n    entry.setType(new ExpressionType(\"\"));\n    entry.setNormalized(key);\n    words.put(key,entry);\n  }\n else {\n    logger.warn(\"word already known: \" + str + \" -> \"+ entry.getNormalized());\n  }\n  return entry;\n}"}
{"ids": "5414", "raw_code": "@Override public int insert(String elem){\n  int firstIndex=(int)(elem.charAt(0) - 'a');\n  int middleIndex=(int)(elem.charAt(-1 + elem.length() / 2) - 'a');\n  int lastIndex=(int)(elem.charAt(elem.length() - 2) - 'a');\n  storage[firstIndex * 400 + middleIndex * 20 + lastIndex]=elem;\n  return 1;\n}"}
{"ids": "71710", "raw_code": "@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  mWidth=MeasureSpec.getSize(widthMeasureSpec);\n  mHeight=MeasureSpec.getSize(heightMeasureSpec);\n  int minSide=Math.min(mWidth,mHeight);\n  mWidth=minSide;\n  mHeight=minSide;\n  mCurrentProgressPosition=calculateCurrentPositionFromCurrentSeconds(mCurrentSeconds);\n  objectAnimatorProgress.setFloatValues(mCurrentProgressPosition / mWidth,1.0f);\n  objectAnimatorProgress.setDuration((mMaxSeconds - mCurrentSeconds) * 1000);\n  if (mBitmapCoverImage != null)   scaleCoverBitmap(mBitmapCoverImage);\n  rectFEmptyProgress.set(0,mHeight - mProgressHeight,mWidth,mHeight);\n  mDrawableBottomShadow.setBounds(0,(10 * mHeight) / 12,mWidth,mHeight);\n  if (startRequested) {\n    startRequested=false;\n    start();\n  }\n  super.onMeasure(widthMeasureSpec,heightMeasureSpec);\n}"}
{"ids": "72927", "raw_code": "protected List<Command> handleCommands(ServerConnector serverConnector,List<Command> commands){\n  List<Command> results=new ArrayList<Command>();\n  for (  Command command : commands) {\n    if (LOG.isLoggable(Level.FINEST)) {\n      LOG.finest(\"processing \" + command);\n    }\n    results.addAll(serverConnector.receive(command));\n  }\n  return results;\n}"}
{"ids": "26787", "raw_code": "public static void UF5(double[] x,double[] f,int nx){\n  int count1=0;\n  int count2=0;\n  double sum1=0.0;\n  double sum2=0.0;\n  double yj;\n  double hj;\n  double N=10.0;\n  double E=0.1;\n  for (int j=2; j <= nx; j++) {\n    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);\n    hj=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;\n    if (j % 2 == 0) {\n      sum2+=hj;\n      count2++;\n    }\n else {\n      sum1+=hj;\n      count1++;\n    }\n  }\n  hj=(0.5 / N + E) * Math.abs(Math.sin(2.0 * N * PI* x[0]));\n  f[0]=x[0] + hj + 2.0 * sum1 / (double)count1;\n  f[1]=1.0 - x[0] + hj + 2.0 * sum2 / (double)count2;\n}"}
{"ids": "41822", "raw_code": "private View fillUp(int pos,int nextBottom){\n  if (DEBUG)   Log.i(TAG,\"fillLeft() pos: \" + pos + \" nextBottom: \"+ nextBottom+ M_FIRST_POSITION+ mFirstPosition);\n  View selectedView=null;\n  final int end=mListPadding.top;\n  while (nextBottom > end && pos >= 0) {\n    View temp=makeRow(pos,nextBottom,false);\n    if (temp != null) {\n      selectedView=temp;\n    }\n    nextBottom=mReferenceView.getTop() - mVerticalSpacing;\n    mFirstPosition=pos;\n    pos-=mNumColumns;\n  }\n  if (mStackFromBottom) {\n    mFirstPosition=Math.max(0,pos + 1);\n  }\n  return selectedView;\n}"}
{"ids": "6880", "raw_code": "private List<ValidationError> validate(){\n  List<ValidationError> errors=Lists.newArrayList();\n  Module module=getModule();\n  errors.addAll(BlazeAndroidRunConfigurationValidationUtil.validateModule(module));\n  AndroidFacet facet=null;\n  if (module != null) {\n    facet=AndroidFacet.getInstance(module);\n    errors.addAll(BlazeAndroidRunConfigurationValidationUtil.validateFacet(facet,module));\n  }\n  errors.addAll(configState.validate(facet));\n  errors.addAll(BlazeAndroidRunConfigurationValidationUtil.validateLabel(getLabel(),configuration.getProject(),Kind.ANDROID_BINARY));\n  return errors;\n}"}
{"ids": "69397", "raw_code": "public void removeChildJob(Job childJob){\n  if (!childJobs.contains(childJob)) {\n    throw new RuntimeException(\"Tried to remove job \" + childJob + \" when it wasn't a child\");\n  }\n  boolean removed=childJobs.remove(childJob);\n  if (!removed) {\n    throw new RuntimeException(\"Shouldn't happen!\");\n  }\n}"}
{"ids": "85829", "raw_code": "private PointF isFlingingToDelete(DragSource source){\n  if (mFlingToDeleteDropTarget == null)   return null;\n  if (!source.supportsFlingToDelete())   return null;\n  ViewConfiguration config=ViewConfiguration.get(mLauncher);\n  mVelocityTracker.computeCurrentVelocity(1000,config.getScaledMaximumFlingVelocity());\n  if (mVelocityTracker.getYVelocity() < mFlingToDeleteThresholdVelocity) {\n    PointF vel=new PointF(mVelocityTracker.getXVelocity(),mVelocityTracker.getYVelocity());\n    PointF upVec=new PointF(0f,-1f);\n    float theta=(float)Math.acos(((vel.x * upVec.x) + (vel.y * upVec.y)) / (vel.length() * upVec.length()));\n    if (theta <= Math.toRadians(MAX_FLING_DEGREES)) {\n      return vel;\n    }\n  }\n  return null;\n}"}
{"ids": "25040", "raw_code": "private int clampMag(int value,int absMin,int absMax){\n  final int absValue=Math.abs(value);\n  if (absValue < absMin)   return 0;\n  if (absValue > absMax)   return value > 0 ? absMax : -absMax;\n  return value;\n}"}
{"ids": "37483", "raw_code": "public static void runScript(final File file,final List<Pair<String,Object>> bindings) throws ScriptException, IOException {\n  final ScriptEngine engine=manager.getEngineByExtension(FileUtils.getFileExtension(file));\n  Preconditions.checkNotNull(engine,\"Error: Script %s has an unknown extension.\",file.getAbsolutePath());\n  final String script=FileUtils.readTextfile(file);\n  runScript(engine,script,bindings);\n}"}
{"ids": "10850", "raw_code": "public void addUGraphic(UGraphic ug){\n  graphics.addElement(ug);\n}"}
{"ids": "76352", "raw_code": "public void apply() throws IllegalStateException {\n  try {\n    System.setSecurityManager(this);\n  }\n catch (  SecurityException e) {\n    logger.error(\"Cannot instantiate mock security manager\",e);\n    throw new IllegalStateException(e);\n  }\n}"}
{"ids": "14246", "raw_code": "public static Rule createAGetPostRule(String ruleName,String ruleUrl) throws PolicyException {\n  Map<String,Set<String>> actionValues=new HashMap<String,Set<String>>();\n  Set<String> set=new HashSet<String>();\n  set.add(ALLOW_DECISION);\n  actionValues.put(GET_ACTION,set);\n  set=new HashSet<String>();\n  set.add(ALLOW_DECISION);\n  actionValues.put(POST_ACTION,set);\n  return new Rule(ruleName,IPLANETAMWEBAGENTSERVICE,ruleUrl,actionValues);\n}"}
{"ids": "25575", "raw_code": "public FastArrayList(Collection<? extends E> c){\n  elementData=c.toArray();\n  size=elementData.length;\n  if (elementData.getClass() != Object[].class)   elementData=Arrays.copyOf(elementData,size,Object[].class);\n}"}
{"ids": "40005", "raw_code": "void createSceneVao(){\n  int vao=glGenVertexArrays();\n  int vbo=glGenBuffers();\n  glBindVertexArray(vao);\n  glBindBuffer(GL_ARRAY_BUFFER,vbo);\n  long bufferSize=4 * (3 + 3) * mesh.numVertices;\n  long normalsOffset=4L * 3 * mesh.numVertices;\n  glBufferData(GL_ARRAY_BUFFER,bufferSize,GL_STATIC_DRAW);\n  glBufferSubData(GL_ARRAY_BUFFER,0L,mesh.positions);\n  glBufferSubData(GL_ARRAY_BUFFER,normalsOffset,mesh.normals);\n  glEnableVertexAttribArray(0);\n  glVertexAttribPointer(0,3,GL_FLOAT,false,0,0L);\n  glEnableVertexAttribArray(1);\n  glVertexAttribPointer(1,3,GL_FLOAT,false,0,normalsOffset);\n  glBindBuffer(GL_ARRAY_BUFFER,0);\n  glBindVertexArray(0);\n  this.vaoScene=vao;\n}"}
{"ids": "30180", "raw_code": "public List<?> endBatch(){\n  List<?> result=null;\n  if (operationsBatch.size() > 0) {\n    result=doFlush();\n  }\n  useBatch=false;\n  operationsBatch=null;\n  return result;\n}"}
{"ids": "65161", "raw_code": "private int calculateLayoutWidth(int widthSize,int mode){\n  initResourcesIfNecessary();\n  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));\n  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));\n  int width=itemsLayout.getMeasuredWidth();\n  if (mode == MeasureSpec.EXACTLY) {\n    width=widthSize;\n  }\n else {\n    width+=2 * PADDING;\n    width=Math.max(width,getSuggestedMinimumWidth());\n    if (mode == MeasureSpec.AT_MOST && widthSize < width) {\n      width=widthSize;\n    }\n  }\n  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));\n  return width;\n}"}
{"ids": "836", "raw_code": "public static Collection removeInnerClassNames(Collection col){\n  List list=new ArrayList();\n  list.addAll(col);\n  Iterator it=list.iterator();\n  while (it.hasNext()) {\n    String name=(String)it.next();\n    if (name.indexOf(\"$\") != -1)     it.remove();\n  }\n  return list;\n}"}
{"ids": "63720", "raw_code": "public TrieNode find(String word){\n  return (word.length() < 1 ? null : find(word,root,0));\n}"}
{"ids": "24684", "raw_code": "public String encode(ByteBuffer aBuffer){\n  byte[] buf=getBytes(aBuffer);\n  return encode(buf);\n}"}
{"ids": "79225", "raw_code": "public static int clearListInfo(Delegator delegator,String shoppingListId) throws GenericEntityException {\n  delegator.removeByAnd(\"ShoppingListItemSurvey\",UtilMisc.toMap(\"shoppingListId\",shoppingListId));\n  return delegator.removeByAnd(\"ShoppingListItem\",UtilMisc.toMap(\"shoppingListId\",shoppingListId));\n}"}
{"ids": "86078", "raw_code": "private synchronized void handleWatchdog(){\n  final int exitCode;\n  if (watchdog == null)   return;\n  if (watchdogTimeout == 0)   return;\n  if (!isRunning()) {\n    exitCode=OnCommandResultListener.SHELL_DIED;\n    Debug.log(String.format(\"[%s%%] SHELL_DIED\",shell.toUpperCase(Locale.ENGLISH)));\n  }\n else   if (watchdogCount++ < watchdogTimeout) {\n    return;\n  }\n else {\n    exitCode=OnCommandResultListener.WATCHDOG_EXIT;\n    Debug.log(String.format(\"[%s%%] WATCHDOG_EXIT\",shell.toUpperCase(Locale.ENGLISH)));\n  }\n  if (handler != null) {\n    postCallback(command,exitCode,buffer);\n  }\n  command=null;\n  buffer=null;\n  idle=true;\n  watchdog.shutdown();\n  watchdog=null;\n  kill();\n}"}
{"ids": "47872", "raw_code": "public synchronized boolean hasService(Class serviceClass){\n  if (serviceClass == null)   throw new NullPointerException(\"serviceClass\");\nsynchronized (BeanContext.globalHierarchyLock) {\n    if (services.containsKey(serviceClass))     return true;\n    BeanContextServices bcs=null;\n    try {\n      bcs=(BeanContextServices)getBeanContext();\n    }\n catch (    ClassCastException cce) {\n      return false;\n    }\n    return bcs == null ? false : bcs.hasService(serviceClass);\n  }\n}"}
{"ids": "40643", "raw_code": "public boolean isPingDisabled(){\n  return (null != healthcheck && !healthcheck.exists());\n}"}
{"ids": "83434", "raw_code": "public static String format(Integer i){\n  if (i == null)   return null;\n  return i.toString();\n}"}
{"ids": "2735", "raw_code": "public FilenameUtils(){\n  super();\n}"}
{"ids": "45312", "raw_code": "public void dumpNodes(Path webGraphDb,DumpType type,long topN,Path output,boolean asEff,NameType nameType,AggrType aggrType,boolean asSequenceFile) throws Exception {\n  SimpleDateFormat sdf=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n  long start=System.currentTimeMillis();\n  LOG.info(\"NodeDumper: starting at \" + sdf.format(start));\n  Path nodeDb=new Path(webGraphDb,WebGraph.NODE_DIR);\n  Configuration conf=getConf();\n  JobConf dumper=new NutchJob(conf);\n  dumper.setJobName(\"NodeDumper: \" + webGraphDb);\n  FileInputFormat.addInputPath(dumper,nodeDb);\n  dumper.setInputFormat(SequenceFileInputFormat.class);\n  if (nameType == null) {\n    dumper.setMapperClass(Sorter.class);\n    dumper.setReducerClass(Sorter.class);\n    dumper.setMapOutputKeyClass(FloatWritable.class);\n    dumper.setMapOutputValueClass(Text.class);\n  }\n else {\n    dumper.setMapperClass(Dumper.class);\n    dumper.setReducerClass(Dumper.class);\n    dumper.setMapOutputKeyClass(Text.class);\n    dumper.setMapOutputValueClass(FloatWritable.class);\n  }\n  dumper.setOutputKeyClass(Text.class);\n  dumper.setOutputValueClass(FloatWritable.class);\n  FileOutputFormat.setOutputPath(dumper,output);\n  if (asSequenceFile) {\n    dumper.setOutputFormat(SequenceFileOutputFormat.class);\n  }\n else {\n    dumper.setOutputFormat(TextOutputFormat.class);\n  }\n  dumper.setNumReduceTasks(1);\n  dumper.setBoolean(\"inlinks\",type == DumpType.INLINKS);\n  dumper.setBoolean(\"outlinks\",type == DumpType.OUTLINKS);\n  dumper.setBoolean(\"scores\",type == DumpType.SCORES);\n  dumper.setBoolean(\"host\",nameType == NameType.HOST);\n  dumper.setBoolean(\"domain\",nameType == NameType.DOMAIN);\n  dumper.setBoolean(\"sum\",aggrType == AggrType.SUM);\n  dumper.setBoolean(\"max\",aggrType == AggrType.MAX);\n  dumper.setLong(\"topn\",topN);\n  if (asEff) {\n    dumper.set(\"mapred.textoutputformat.separator\",\"=\");\n  }\n  try {\n    LOG.info(\"NodeDumper: running\");\n    JobClient.runJob(dumper);\n  }\n catch (  IOException e) {\n    LOG.error(StringUtils.stringifyException(e));\n    throw e;\n  }\n  long end=System.currentTimeMillis();\n  LOG.info(\"NodeDumper: finished at \" + sdf.format(end) + \", elapsed: \"+ TimingUtil.elapsedTime(start,end));\n}"}
{"ids": "29065", "raw_code": "public static String convertMethodSignature(String className,String methodName,String methodSig,String pkgName){\n  StringBuilder args=new StringBuilder();\n  SignatureConverter converter=new SignatureConverter(methodSig);\n  converter.skip();\n  args.append('(');\n  while (converter.getFirst() != ')') {\n    if (args.length() > 1) {\n      args.append(\", \");\n    }\n    args.append(shorten(pkgName,converter.parseNext()));\n  }\n  converter.skip();\n  args.append(')');\n  StringBuilder result=new StringBuilder();\n  result.append(className);\n  result.append('.');\n  result.append(methodName);\n  result.append(args.toString());\n  return result.toString();\n}"}
{"ids": "31780", "raw_code": "private void newUnitReceived(GridUriDeploymentUnitDescriptor newDesc,Collection<Class<?>> clss){\n  assert newDesc != null;\n  assert newDesc.getType() == GridUriDeploymentUnitDescriptor.Type.FILE;\n  if (clss != null && !clss.isEmpty()) {\n    try {\n      addResources(newDesc.getClassLoader(),newDesc,clss.toArray(new Class<?>[clss.size()]));\n    }\n catch (    IgniteSpiException e) {\n      U.warn(log,\"Failed to register GAR class loader [newDesc=\" + newDesc + \", msg=\"+ e.getMessage()+ ']');\n    }\n  }\n  Collection<ClassLoader> rmvClsLdrs=new ArrayList<>();\nsynchronized (mux) {\n    if (checkMd5 && unitDeployed(newDesc.getMd5())) {\n      if (log.isInfoEnabled())       LT.info(log,\"Skipping new deployment unit because of md5 match \" + \"[uri='\" + U.hidePassword(newDesc.getUri()) + \"', file=\"+ (newDesc.getFile() == null ? \"N/A\" : newDesc.getFile())+ ']');\n      return;\n    }\n    boolean isAdded=false;\n    boolean ignoreNewUnit=false;\n    for (ListIterator<GridUriDeploymentUnitDescriptor> iter=unitLoaders.listIterator(); iter.hasNext(); ) {\n      GridUriDeploymentUnitDescriptor desc=iter.next();\n      assert !newDesc.getClassLoader().equals(desc.getClassLoader()) : \"URI scanners always create new class loader for every GAR file: \" + newDesc;\n      if (desc.getType() == GridUriDeploymentUnitDescriptor.Type.FILE && newDesc.getUri().equals(desc.getUri()) && !newDesc.getFile().equals(desc.getFile())) {\n        iter.remove();\n        rmvClsLdrs.add(desc.getClassLoader());\n        if (!iter.hasNext())         break;\n        continue;\n      }\n      if (!isAdded) {\n        if (unitComp.compare(newDesc,desc) <= 0) {\n          if (checkUnitCollision(desc,newDesc)) {\n            iter.remove();\n            iter.add(newDesc);\n            rmvClsLdrs.add(desc.getClassLoader());\n          }\n else {\n            iter.set(newDesc);\n            iter.add(desc);\n          }\n          isAdded=true;\n        }\n else         if (checkUnitCollision(newDesc,desc)) {\n          ignoreNewUnit=true;\n          break;\n        }\n      }\n else       if (checkUnitCollision(newDesc,desc)) {\n        iter.remove();\n        rmvClsLdrs.add(desc.getClassLoader());\n      }\n    }\n    if (!ignoreNewUnit) {\n      if (!isAdded)       unitLoaders.add(newDesc);\n      if (log.isDebugEnabled())       LT.info(log,\"Class loader (re)registered [clsLdr=\" + newDesc.getClassLoader() + \", tstamp=\"+ newDesc.getTimestamp()+ \", uri='\"+ U.hidePassword(newDesc.getUri())+ \"', file=\"+ (newDesc.getFile() == null ? \"N/A\" : newDesc.getFile())+ ']');\n    }\n  }\n  for (  ClassLoader cldLdr : rmvClsLdrs)   onUnitReleased(cldLdr);\n}"}
{"ids": "11347", "raw_code": "public static String canonicalID(String id){\n  if (id == null)   return \"\";\n  int st=0;\n  int len=id.length();\n  boolean substr=false;\n  int c;\n  while (st < len && ((c=id.charAt(st)) == '<' || c <= ' ')) {\n    st++;\n    substr=true;\n  }\n  while (st < len && ((c=id.charAt(len - 1)) == '>' || c <= ' ')) {\n    len--;\n    substr=true;\n  }\n  return substr ? id.substring(st,len) : id;\n}"}
{"ids": "24834", "raw_code": "private static void encodeBinary(byte[] bytes,int startpos,int count,int startmode,StringBuilder sb){\n  if (count == 1 && startmode == TEXT_COMPACTION) {\n    sb.append((char)SHIFT_TO_BYTE);\n  }\n else {\n    boolean sixpack=((count % 6) == 0);\n    if (sixpack) {\n      sb.append((char)LATCH_TO_BYTE);\n    }\n else {\n      sb.append((char)LATCH_TO_BYTE_PADDED);\n    }\n  }\n  int idx=startpos;\n  if (count >= 6) {\n    char[] chars=new char[5];\n    while ((startpos + count - idx) >= 6) {\n      long t=0;\n      for (int i=0; i < 6; i++) {\n        t<<=8;\n        t+=bytes[idx + i] & 0xff;\n      }\n      for (int i=0; i < 5; i++) {\n        chars[i]=(char)(t % 900);\n        t/=900;\n      }\n      for (int i=chars.length - 1; i >= 0; i--) {\n        sb.append(chars[i]);\n      }\n      idx+=6;\n    }\n  }\n  for (int i=idx; i < startpos + count; i++) {\n    int ch=bytes[i] & 0xff;\n    sb.append((char)ch);\n  }\n}"}
{"ids": "53650", "raw_code": "@Override public void step(MessageLogger logger){\n  try {\n    addAgent();\n    env.step();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "689", "raw_code": "private static boolean isNonLeft(int i0,int i1,int i2,int i3,double[] pts){\n  double l1, l2, l4, l5, l6, angle1, angle2, angle;\n  l1=Math.sqrt(Math.pow(pts[i2 + 1] - pts[i1 + 1],2) + Math.pow(pts[i2] - pts[i1],2));\n  l2=Math.sqrt(Math.pow(pts[i3 + 1] - pts[i2 + 1],2) + Math.pow(pts[i3] - pts[i2],2));\n  l4=Math.sqrt(Math.pow(pts[i3 + 1] - pts[i0 + 1],2) + Math.pow(pts[i3] - pts[i0],2));\n  l5=Math.sqrt(Math.pow(pts[i1 + 1] - pts[i0 + 1],2) + Math.pow(pts[i1] - pts[i0],2));\n  l6=Math.sqrt(Math.pow(pts[i2 + 1] - pts[i0 + 1],2) + Math.pow(pts[i2] - pts[i0],2));\n  angle1=Math.acos(((l2 * l2) + (l6 * l6) - (l4 * l4)) / (2 * l2 * l6));\n  angle2=Math.acos(((l6 * l6) + (l1 * l1) - (l5 * l5)) / (2 * l6 * l1));\n  angle=(Math.PI - angle1) - angle2;\n  if (angle <= 0.0) {\n    return (true);\n  }\n else {\n    return (false);\n  }\n}"}
{"ids": "38409", "raw_code": "protected void copy2DArray(int from[][],int to[][]){\n  for (int i=0; i < from.length; i++) {\n    to[i]=new int[from[i].length];\n    System.arraycopy(from[i],0,to[i],0,from[i].length);\n  }\n}"}
{"ids": "6775", "raw_code": "public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){\n  Map map=of();\n  map.put(k1,v1);\n  map.put(k2,v2);\n  map.put(k3,v3);\n  return map;\n}"}
{"ids": "33118", "raw_code": "public boolean fill(Reader reader,int pos) throws IOException {\n  int res=reader.read(fBuf);\n  if (res == -1) {\n    fOffset=pos;\n    fLength=0;\n    return true;\n  }\n  int charsRead=res;\n  while (charsRead < BUFFER_SIZE) {\n    res=reader.read(fBuf,charsRead,BUFFER_SIZE - charsRead);\n    if (res == -1) {\n      fOffset=pos;\n      fLength=charsRead;\n      return true;\n    }\n    charsRead+=res;\n  }\n  fOffset=pos;\n  fLength=BUFFER_SIZE;\n  return false;\n}"}
{"ids": "6957", "raw_code": "public void drawInRect(GL10 gl,CGRect rect){\n  gl.glEnable(GL_TEXTURE_2D);\n  loadTexture(gl);\n  float vertices[]={rect.origin.x,rect.origin.y,rect.origin.x + rect.size.width,rect.origin.y,rect.origin.x,rect.origin.y + rect.size.height,rect.origin.x + rect.size.width,rect.origin.y + rect.size.height};\n  mVertices.put(vertices);\n  mVertices.position(0);\n  float coordinates[]={0.0f,_maxT,_maxS,_maxT,0.0f,0.0f,_maxS,0.0f};\n  mCoordinates.put(coordinates);\n  mCoordinates.position(0);\n  gl.glEnableClientState(GL_VERTEX_ARRAY);\n  gl.glEnableClientState(GL_TEXTURE_COORD_ARRAY);\n  gl.glBindTexture(GL_TEXTURE_2D,_name);\n  gl.glTexParameterx(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_REPEAT);\n  gl.glTexParameterx(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_REPEAT);\n  gl.glVertexPointer(2,GL_FLOAT,0,mVertices);\n  gl.glTexCoordPointer(2,GL_FLOAT,0,mCoordinates);\n  gl.glDrawArrays(GL_TRIANGLE_STRIP,0,4);\n  gl.glDisableClientState(GL_VERTEX_ARRAY);\n  gl.glDisableClientState(GL_TEXTURE_COORD_ARRAY);\n  gl.glDisable(GL_TEXTURE_2D);\n}"}
{"ids": "2764", "raw_code": "synchronized void executed(RTEditText editor,Operation op){\n  Stack<Operation> undoStack=getUndoStack(editor);\n  Stack<Operation> redoStack=getRedoStack(editor);\n  while (!undoStack.empty() && op.canMerge(undoStack.peek())) {\n    Operation previousOp=undoStack.pop();\n    op.merge(previousOp);\n  }\n  push(op,undoStack);\n  redoStack.clear();\n}"}
{"ids": "39932", "raw_code": "public void removeSwipeListener(SwipeListener listener){\n  if (mListeners == null) {\n    return;\n  }\n  mListeners.remove(listener);\n}"}
{"ids": "22176", "raw_code": "public static boolean isOssBuild(){\n  boolean isOssBuild=false;\n  String buildType=System.getProperty(\"buildType\");\n  if (StringUtils.isNotBlank(buildType) && buildType.equalsIgnoreCase(\"oss\")) {\n    isOssBuild=true;\n  }\n  return isOssBuild;\n}"}
{"ids": "26898", "raw_code": "public void invokeHookBoltExecute(Tuple tuple,long executeLatencyNs){\n  if (taskHooks.size() != 0) {\n    BoltExecuteInfo executeInfo=new BoltExecuteInfo(tuple,getThisTaskId(),executeLatencyNs / Constants.MILLISECONDS_TO_NANOSECONDS);\n    for (    ITaskHook taskHook : taskHooks) {\n      taskHook.boltExecute(executeInfo);\n    }\n  }\n}"}
{"ids": "56784", "raw_code": "private void validateIamRoles(List<IamRole> iamRoles){\n  Assert.notNull(iamRoles,\"At least 1 IAM roles must be specified\");\n  Assert.isTrue(iamRoles.size() > 0,\"At least 1 IAM roles must be specified\");\n  for (  IamRole iamRole : iamRoles) {\n    Assert.notNull(iamRole,\"IAM role must be specified\");\n    Assert.hasText(iamRole.getIamRoleName(),\"IAM role name must be specified\");\n  }\n}"}
{"ids": "75901", "raw_code": "public static Intent buildStartInBackgroundIntent(File script){\n  final ComponentName componentName=Constants.SL4A_SERVICE_LAUNCHER_COMPONENT_NAME;\n  Intent intent=new Intent();\n  intent.setComponent(componentName);\n  intent.setAction(Constants.ACTION_LAUNCH_BACKGROUND_SCRIPT);\n  intent.putExtra(Constants.EXTRA_SCRIPT_PATH,script.getAbsolutePath());\n  return intent;\n}"}
{"ids": "82564", "raw_code": "public static java.lang.String valueOf(java.lang.Object obj){\n  return obj == null ? \"null\" : obj.toString();\n}"}
{"ids": "77198", "raw_code": "@SuppressWarnings({\"rawtypes\",\"unchecked\"}) public SpanMultiTermQueryWrapper(Q query){\n  this.query=Objects.requireNonNull(query);\n  this.rewriteMethod=selectRewriteMethod(query);\n}"}
{"ids": "84173", "raw_code": "public void writeMapEnd() throws IOException {\n  os.write('z');\n}"}
{"ids": "82740", "raw_code": "public Shape createArrowUp(final double x,final double y,final double w,final double h){\n  path.reset();\n  path.moveTo(x,y + h);\n  path.lineTo(x + w / 2,y);\n  path.lineTo(x + w,y + h);\n  path.closePath();\n  return path;\n}"}
{"ids": "53420", "raw_code": "protected void fireValueChanged(){\n  ChangeEvent evt=new ChangeEvent(this);\n  for (  ChangeListener listener : listenerList.getListeners(ChangeListener.class)) {\n    listener.stateChanged(evt);\n  }\n}"}
{"ids": "79452", "raw_code": "public static void streamContentToBrowser(HttpServletResponse response,InputStream in,int length,String contentType,String fileName) throws IOException {\n  setResponseBrowserProxyNoCache(response);\n  response.setContentLength(length);\n  if (contentType != null) {\n    response.setContentType(contentType);\n  }\n  if (fileName != null) {\n    response.setHeader(\"Content-Disposition\",\"attachment;filename=\" + fileName);\n  }\n  OutputStream out=response.getOutputStream();\n  try {\n    streamContent(out,in,length);\n  }\n catch (  IOException e) {\n    out.close();\n    throw e;\n  }\n  out.flush();\n  out.close();\n}"}
{"ids": "62703", "raw_code": "public static ByteBuffer encode(String string) throws CharacterCodingException {\n  return encode(string,true);\n}"}
{"ids": "81197", "raw_code": "public void disableRealtimeStepsNotify(){\n  checkConnection();\n  final List<BLEAction> list=new ArrayList<>();\n  list.add(new WriteAction(Profile.UUID_CHAR_CONTROL_POINT,Protocol.DISABLE_REALTIME_STEPS_NOTIFY));\n  queue(list);\n}"}
{"ids": "81738", "raw_code": "private static void stableStringSort(String[] arr,String[] src,String[] dst,int start,int end,int chId){\n  int length=end - start;\n  if (length < SIMPLE_LENGTH) {\n    if (src == arr) {\n      for (int i=start + 1; i < end; i++) {\n        String current=arr[i];\n        String prev=arr[i - 1];\n        if (current.compareTo(prev) < 0) {\n          int j=i;\n          do {\n            arr[j--]=prev;\n          }\n while (j > start && current.compareTo(prev=arr[j - 1]) < 0);\n          arr[j]=current;\n        }\n      }\n    }\n else {\n      int actualEnd=end - 1;\n      dst[start]=src[actualEnd--];\n      for (int i=start + 1; i < end; i++, actualEnd--) {\n        String current=src[actualEnd];\n        String prev;\n        int j=i;\n        while (j > start && current.compareTo(prev=dst[j - 1]) < 0) {\n          dst[j--]=prev;\n        }\n        dst[j]=current;\n      }\n    }\n    return;\n  }\n  int s;\n  int mid=start + length / 2;\n  int lo=start;\n  int hi=end - 1;\n  if (length > 40) {\n    s=length / 8;\n    lo=medChar(lo,lo + s,lo + s * 2,src,chId);\n    mid=medChar(mid - s,mid,mid + s,src,chId);\n    hi=medChar(hi,hi - s,hi - s * 2,src,chId);\n  }\n  mid=medChar(lo,mid,hi,src,chId);\n  int midVal=charAt(src[mid],chId);\n  int a, b, c;\n  a=b=start;\n  c=end - 1;\n  int cmp;\n  for (int i=start; i < end; i++) {\n    String el=src[i];\n    cmp=charAt(el,chId) - midVal;\n    if (cmp < 0) {\n      src[a]=el;\n      a++;\n    }\n else     if (cmp > 0) {\n      dst[c]=el;\n      c--;\n    }\n else {\n      dst[b]=el;\n      b++;\n    }\n  }\n  s=b - start;\n  if (s > 0) {\n    if (arr == src) {\n      System.arraycopy(dst,start,arr,a,s);\n    }\n else {\n      copySwap(dst,start,arr,a,s);\n    }\n    if (b >= end && midVal == -1) {\n      return;\n    }\n    stableStringSort(arr,arr,arr == dst ? src : dst,a,a + s,chId + 1);\n  }\n  s=a - start;\n  if (s > 0) {\n    stableStringSort(arr,src,dst,start,a,chId);\n  }\n  c++;\n  s=end - c;\n  if (s > 0) {\n    stableStringSort(arr,dst,src,c,end,chId);\n  }\n}"}
{"ids": "3070", "raw_code": "private static Class<?>[] types(Object... values){\n  if (values == null) {\n    return new Class[0];\n  }\n  Class<?>[] result=new Class[values.length];\n  for (int i=0; i < values.length; i++) {\n    Object value=values[i];\n    result[i]=value == null ? NULL.class : value.getClass();\n  }\n  return result;\n}"}
{"ids": "10874", "raw_code": "public static void unRegisterTileCodec(int comp){\n  XTIFFTileCodec cod=getTileCodec(comp);\n  tileCodecs.remove(cod);\n}"}
{"ids": "21282", "raw_code": "public static void escape(StrBuilder toAppend,String text,boolean escapeQuote,boolean escapeApos){\n  if (text == null) {\n    return;\n  }\n  for (int i=0; i < text.length(); i++) {\n    char ch=text.charAt(i);\nswitch (ch) {\ncase '<':\n      toAppend.append(\"&lt;\");\n    break;\ncase '>':\n  toAppend.append(\"&gt;\");\nbreak;\ncase '&':\ntoAppend.append(\"&amp;\");\nbreak;\ncase '\"':\ntoAppend.append(escapeQuote ? \"&quot;\" : ch);\nbreak;\ncase '\\'':\ntoAppend.append(escapeApos ? \"&apos;\" : ch);\nbreak;\ndefault :\ntoAppend.append(ch);\nbreak;\n}\n}\n}"}
{"ids": "44780", "raw_code": "public void destroy(){\n  mListeners.clear();\n  mSpringSystem.deregisterSpring(this);\n}"}
{"ids": "38711", "raw_code": "@Override public synchronized void removeInstanceListener(InstanceListener tsl){\n  m_instanceListeners.removeElement(tsl);\n}"}
{"ids": "61033", "raw_code": "private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {\n  int start=position;\n  StringBuilder result=null;\n  if (returnText && text != null) {\n    result=new StringBuilder();\n    result.append(text);\n  }\n  search:   while (true) {\n    if (position + delimiter.length > limit) {\n      if (start < position && returnText) {\n        if (result == null) {\n          result=new StringBuilder();\n        }\n        result.append(buffer,start,position - start);\n      }\n      if (!fillBuffer(delimiter.length)) {\n        checkRelaxed(UNEXPECTED_EOF);\n        type=COMMENT;\n        return null;\n      }\n      start=position;\n    }\n    for (int i=0; i < delimiter.length; i++) {\n      if (buffer[position + i] != delimiter[i]) {\n        position++;\n        continue search;\n      }\n    }\n    break;\n  }\n  int end=position;\n  position+=delimiter.length;\n  if (!returnText) {\n    return null;\n  }\n else   if (result == null) {\n    return stringPool.get(buffer,start,end - start);\n  }\n else {\n    result.append(buffer,start,end - start);\n    return result.toString();\n  }\n}"}
{"ids": "55424", "raw_code": "private void toggleFavorite(){\n  for (  String game : list.getSelectedValuesList()) {\n    if (favorites.contains(game)) {\n      favorites.remove(game);\n    }\n else {\n      favorites.add(game);\n    }\n  }\n  saveFavorites();\n  update();\n}"}
{"ids": "24331", "raw_code": "private void createPartitionRegion(List vmList,int startIndexForRegion,int endIndexForRegion,int localMaxMemory,int redundancy,boolean firstCreationFlag,boolean multipleVMFlag){\n  Iterator nodeIterator=vmList.iterator();\n  while (nodeIterator.hasNext()) {\n    VM vm=(VM)nodeIterator.next();\n    vm.invoke(createMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory,firstCreationFlag,multipleVMFlag));\n  }\n}"}
{"ids": "57436", "raw_code": "public int write(byte[] destMac,byte[] packet,int offset,int byteCount){\n  if (destMac == null) {\n    throw new NullPointerException(\"destMac == null\");\n  }\n  if (packet == null) {\n    throw new NullPointerException(\"packet == null\");\n  }\n  Arrays.checkOffsetAndCount(packet.length,offset,byteCount);\n  if (destMac.length != 6) {\n    throw new IllegalArgumentException(\"MAC length must be 6: \" + destMac.length);\n  }\n  return sendPacket(fd,mInterfaceName,mProtocolType,destMac,packet,offset,byteCount);\n}"}
{"ids": "79701", "raw_code": "public boolean hasExtensionsWithDeps(){\n  return !extensionsWithDeps.isEmpty();\n}"}
{"ids": "52583", "raw_code": "public synchronized void addSeries(XYSeries series){\n  mSeries.add(series);\n}"}
{"ids": "77963", "raw_code": "private int[] calculateTaskCountPerContainer(int taskCount,int prevContainerCount,int currentContainerCount){\n  int[] newTaskCountPerContainer=new int[Math.max(currentContainerCount,prevContainerCount)];\n  Arrays.fill(newTaskCountPerContainer,0);\n  for (int i=0; i < currentContainerCount; i++) {\n    newTaskCountPerContainer[i]=taskCount / currentContainerCount;\n    if (taskCount % currentContainerCount > i) {\n      newTaskCountPerContainer[i]++;\n    }\n  }\n  return newTaskCountPerContainer;\n}"}
{"ids": "83012", "raw_code": "@Override public void actionPerform(Component component){\n  if (!isEnabled()) {\n    return;\n  }\n  if (beforeActionPerformedHandler != null) {\n    if (!beforeActionPerformedHandler.beforeActionPerformed())     return;\n  }\n  Set selected=target.getSelected();\n  if (!selected.isEmpty()) {\n    if (confirm) {\n      confirmAndRemove(selected);\n    }\n else {\n      remove(selected);\n    }\n  }\n}"}
{"ids": "48066", "raw_code": "static public void generateSeed(byte[] result){\n  instance.getSeedBytes(result);\n}"}
{"ids": "53467", "raw_code": "private double hammingDistanceNumberVector(NumberVector o1,NumberVector o2){\n  final int d1=o1.getDimensionality(), d2=o2.getDimensionality();\n  int differences=0;\n  int d=0;\n  for (; d < d1 && d < d2; d++) {\n    double v1=o1.doubleValue(d), v2=o2.doubleValue(d);\n    if (v1 != v1 || v2 != v2) {\n      continue;\n    }\n    if (v1 != v2) {\n      ++differences;\n    }\n  }\n  for (; d < d1; d++) {\n    double v1=o1.doubleValue(d);\n    if (v1 != 0. && v1 == v1) {\n      ++differences;\n    }\n  }\n  for (; d < d2; d++) {\n    double v2=o2.doubleValue(d);\n    if (v2 != 0. && v2 == v2) {\n      ++differences;\n    }\n  }\n  return differences;\n}"}
{"ids": "36075", "raw_code": "public static Kernel createKernel(int kernelType){\nswitch (kernelType) {\ncase KERNEL_RADIAL:\n    return new KernelRadial();\ncase KERNEL_POLYNOMIAL:\n  return new KernelPolynomial();\ncase KERNEL_NEURAL:\nreturn new KernelNeural();\ndefault :\nreturn new KernelDot();\n}\n}"}
{"ids": "22038", "raw_code": "protected void checkForPendingTasks(Collection<URI> tenants,Collection<? extends DataObject> dataObjects){\n  for (  URI tenant : tenants) {\n    checkForPendingTasks(tenant,dataObjects);\n  }\n}"}
{"ids": "26652", "raw_code": "@org.junit.Test public void verifyGetFloatResponse() throws Exception {\n  Map<String,String> queryParams=new HashMap<String,String>();\n  String str=client.invokeAPI(\"/mockResponses/primitiveFloatResponse\",\"GET\",queryParams,null,new HashMap<String,String>(),null,\"application/json\",null,new String[0]);\n  assertEquals(str,String.valueOf(ExampleBuilder.SAMPLE_FLOAT_PROPERTY_VALUE));\n}"}
{"ids": "74238", "raw_code": "public void writeOperationsCarFile(){\n  makeBackupFile(defaultOperationsFilename());\n  try {\n    if (!checkFile(defaultOperationsFilename())) {\n      java.io.File file=new java.io.File(defaultOperationsFilename());\n      java.io.File parentDir=file.getParentFile();\n      if (!parentDir.exists()) {\n        if (!parentDir.mkdir()) {\n          log.error(\"Directory wasn't created\");\n        }\n      }\n      if (file.createNewFile()) {\n        log.debug(\"File created\");\n      }\n    }\n    writeFile(defaultOperationsFilename());\n  }\n catch (  Exception e) {\n    log.error(\"Exception while writing the new CSV operations file, may not be complete: \" + e);\n  }\n}"}
{"ids": "2375", "raw_code": "private synchronized void rebuildJournal() throws IOException {\n  if (journalWriter != null) {\n    journalWriter.close();\n  }\n  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);\n  writer.write(MAGIC);\n  writer.write(\"\\n\");\n  writer.write(VERSION_1);\n  writer.write(\"\\n\");\n  writer.write(Integer.toString(appVersion));\n  writer.write(\"\\n\");\n  writer.write(Integer.toString(valueCount));\n  writer.write(\"\\n\");\n  writer.write(\"\\n\");\n  for (  Entry entry : lruEntries.values()) {\n    if (entry.currentEditor != null) {\n      writer.write(DIRTY + ' ' + entry.key+ '\\n');\n    }\n else {\n      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\\n');\n    }\n  }\n  writer.close();\n  journalFileTmp.renameTo(journalFile);\n  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);\n}"}
{"ids": "72470", "raw_code": "public static double median(final double[] values){\n  final int len=values.length;\n  final double[] sortedValues=Arrays.copyOf(values,len);\n  Arrays.sort(sortedValues);\n  if (len % 2 == 0) {\n    return ((double)sortedValues[len / 2] + (double)sortedValues[len / 2 - 1]) / 2;\n  }\n else {\n    return (double)sortedValues[len / 2];\n  }\n}"}
{"ids": "79075", "raw_code": "private List<BlockInfo> fillSegmentIdToTableInfoMap(List<TableBlockInfo> tableBlockInfos,AbsoluteTableIdentifier absoluteTableIdentifier){\n  Map<String,List<BlockInfo>> map=segmentIdToBlockListMap.get(absoluteTableIdentifier);\n  if (null == map) {\n    map=new ConcurrentHashMap<String,List<BlockInfo>>();\n    segmentIdToBlockListMap.put(absoluteTableIdentifier,map);\n  }\n  BlockInfo temp=null;\n  List<BlockInfo> blockInfosNeedToLoad=new ArrayList<>();\n  for (  TableBlockInfo info : tableBlockInfos) {\n    List<BlockInfo> tempTableBlockInfos=map.get(info.getSegmentId());\n    if (null == tempTableBlockInfos) {\n      tempTableBlockInfos=new ArrayList<>();\n      map.put(info.getSegmentId(),tempTableBlockInfos);\n    }\n    temp=new BlockInfo(info);\n    if (!tempTableBlockInfos.contains(temp)) {\n      tempTableBlockInfos.add(temp);\n    }\n    blockInfosNeedToLoad.add(temp);\n  }\n  return blockInfosNeedToLoad;\n}"}
{"ids": "60913", "raw_code": "public CharBuffer put(String str,int start,int end){\n  if (isReadOnly()) {\n    throw new ReadOnlyBufferException();\n  }\n  if (start < 0 || end < start || end > str.length()) {\n    throw new IndexOutOfBoundsException(\"str.length()=\" + str.length() + \", start=\"+ start+ \", end=\"+ end);\n  }\n  if (end - start > remaining()) {\n    throw new BufferOverflowException();\n  }\n  for (int i=start; i < end; i++) {\n    put(str.charAt(i));\n  }\n  return this;\n}"}
{"ids": "78895", "raw_code": "public List<OfferRecommendation> evaluate(List<Offer> offers){\n  List<OfferRecommendation> recommendations=new ArrayList<OfferRecommendation>();\n  int offerResourceCount=0;\n  for (  Offer offer : offers) {\n    offerResourceCount+=offer.getResourcesCount();\n    for (    Resource toDestroy : selectUnexpectedResources(expectedPersistentVolumeIds,getPersistentVolumesById(offer))) {\n      recommendations.add(new DestroyOfferRecommendation(offer,toDestroy));\n    }\n  }\n  int destroyRecommendationCount=recommendations.size();\n  for (  Offer offer : offers) {\n    for (    Resource toUnreserve : selectUnexpectedResources(expectedReservedResourceIds,getReservedResourcesById(offer))) {\n      recommendations.add(new UnreserveOfferRecommendation(offer,toUnreserve));\n    }\n  }\n  logger.info(\"{} offers with {} resources => {} destroy and {} unreserve operations\",offers.size(),offerResourceCount,destroyRecommendationCount,recommendations.size() - destroyRecommendationCount);\n  return recommendations;\n}"}
{"ids": "53869", "raw_code": "@Override public int update(ByteBuffer inBuffer,ByteBuffer outBuffer) throws ShortBufferException {\n  return cipher.update(inBuffer,outBuffer);\n}"}
{"ids": "80779", "raw_code": "boolean displayContextAssump(NodeRepresentation rep,int i){\n  return rep.isCreated || ((!state.splitChosen()) && showContextValue);\n}"}
{"ids": "44484", "raw_code": "private void unregisterMBeans(){\n  List<ObjectName> unregistered=new ArrayList<ObjectName>();\n  for (  ObjectName name : mbeans) {\n    try {\n      mbeanserver.unregisterMBean(name);\n      unregistered.add(name);\n    }\n catch (    JMException e) {\n    }\n  }\n  mbeans.removeAll(unregistered);\n}"}
{"ids": "9115", "raw_code": "private static synchronized void endTransaction(Connection C,boolean successful) throws AdeException {\n  logger.trace(\"endTransaction() -->entry\");\n  try {\n    if (successful) {\n      C.commit();\n    }\n else {\n      C.rollback();\n    }\n    C.setAutoCommit(true);\n  }\n catch (  Throwable t) {\n    surfaceThrowable(\"endTransaction() invoked Connection method\",t);\n    throw adeExceptionOf(t);\n  }\n  logger.trace(\"endTransaction() <-- exit\");\n}"}
{"ids": "84878", "raw_code": "public double[] estimateL2DistanceSquared(Datum queryDatum){\n  RealVector vector=queryDatum.metrics();\n  double[] estimates=new double[2];\n  for (int i=0; i < k; i++) {\n    double deltaLo=vector.getEntry(i) - this.boundaries[i][0];\n    double deltaHi=this.boundaries[i][1] - vector.getEntry(i);\n    double sqDeltaLo=deltaLo * deltaLo;\n    double sqDeltaHi=deltaHi * deltaHi;\n    if (deltaLo < 0 || deltaHi < 0) {\n      if (sqDeltaHi < sqDeltaLo) {\n        estimates[0]+=sqDeltaHi;\n        estimates[1]+=sqDeltaLo;\n      }\n else {\n        estimates[0]+=sqDeltaLo;\n        estimates[1]+=sqDeltaHi;\n      }\n    }\n else {\n      estimates[1]+=Math.max(sqDeltaHi,sqDeltaLo);\n    }\n  }\n  return estimates;\n}"}
{"ids": "52070", "raw_code": "private void deserializeClass(File file) throws RuntimeException {\n  try {\n    FileInputStream in=new FileInputStream(file);\n    ObjectInputStream objIn=new ObjectInputStream(in);\n    Object o=objIn.readObject();\n    in.close();\n  }\n catch (  ClassNotFoundException e) {\n    throw new RuntimeException(\"There is no class in the model API \" + \"to deserialize the object in \" + file + \". Perhaps the \"+ \"class was renamed, moved to another package, or removed. \"+ \"In any case, please put it back where it was.\",e);\n  }\ncatch (  IOException e) {\n    throw new RuntimeException(\"There was an I/O error associated with \" + \"the process of deserializing the file \" + file + \".\",e);\n  }\n}"}
{"ids": "66172", "raw_code": "public boolean calculateTaxTotal(){\n  log.fine(\"\");\n  DB.executeUpdateEx(\"DELETE C_InvoiceTax WHERE C_Invoice_ID=\" + getC_Invoice_ID(),get_TrxName());\n  m_taxes=null;\n  BigDecimal totalLines=Env.ZERO;\n  ArrayList<Integer> taxList=new ArrayList<Integer>();\n  MInvoiceLine[] lines=getLines(false);\n  for (int i=0; i < lines.length; i++) {\n    MInvoiceLine line=lines[i];\n    if (!taxList.contains(line.getC_Tax_ID())) {\n      MInvoiceTax iTax=MInvoiceTax.get(line,getPrecision(),false,get_TrxName());\n      if (iTax != null) {\n        iTax.setIsTaxIncluded(isTaxIncluded());\n        if (!iTax.calculateTaxFromLines())         return false;\n        iTax.saveEx();\n        taxList.add(line.getC_Tax_ID());\n      }\n    }\n    totalLines=totalLines.add(line.getLineNetAmt());\n  }\n  BigDecimal grandTotal=totalLines;\n  MInvoiceTax[] taxes=getTaxes(true);\n  for (int i=0; i < taxes.length; i++) {\n    MInvoiceTax iTax=taxes[i];\n    MTax tax=iTax.getTax();\n    if (tax.isSummary()) {\n      MTax[] cTaxes=tax.getChildTaxes(false);\n      for (int j=0; j < cTaxes.length; j++) {\n        MTax cTax=cTaxes[j];\n        BigDecimal taxAmt=cTax.calculateTax(iTax.getTaxBaseAmt(),isTaxIncluded(),getPrecision());\n        MInvoiceTax newITax=new MInvoiceTax(getCtx(),0,get_TrxName());\n        newITax.setClientOrg(this);\n        newITax.setC_Invoice_ID(getC_Invoice_ID());\n        newITax.setC_Tax_ID(cTax.getC_Tax_ID());\n        newITax.setPrecision(getPrecision());\n        newITax.setIsTaxIncluded(isTaxIncluded());\n        newITax.setTaxBaseAmt(iTax.getTaxBaseAmt());\n        newITax.setTaxAmt(taxAmt);\n        newITax.saveEx(get_TrxName());\n        if (!isTaxIncluded())         grandTotal=grandTotal.add(taxAmt);\n      }\n      iTax.deleteEx(true,get_TrxName());\n    }\n else {\n      if (!isTaxIncluded())       grandTotal=grandTotal.add(iTax.getTaxAmt());\n    }\n  }\n  setTotalLines(totalLines);\n  setGrandTotal(grandTotal);\n  return true;\n}"}
{"ids": "37180", "raw_code": "private boolean canOpen(){\n  for (  final INaviProject project : m_projects) {\n    if (project.isLoaded()) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "1249", "raw_code": "public static Array listWithQuotesToArray(String list,String delimiter,String quotes){\n  if (list.length() == 0)   return new ArrayImpl();\n  int len=list.length();\n  int last=0;\n  char[] del=delimiter.toCharArray();\n  char[] quo=quotes.toCharArray();\n  char c;\n  char inside=0;\n  ArrayImpl array=new ArrayImpl();\n  try {\n    for (int i=0; i < len; i++) {\n      c=list.charAt(i);\n      for (int y=0; y < quo.length; y++) {\n        if (c == quo[y]) {\n          if (c == inside)           inside=0;\n else           if (inside == 0)           inside=c;\n          continue;\n        }\n      }\n      for (int y=0; y < del.length; y++) {\n        if (inside == 0 && c == del[y]) {\n          array._append(list.substring(last,i));\n          last=i + 1;\n          break;\n        }\n      }\n    }\n    if (last <= len)     array.append(list.substring(last));\n  }\n catch (  ExpressionException e) {\n  }\n  return array;\n}"}
{"ids": "49906", "raw_code": "public MLOutput execute(String dmlScriptFilePath,ArrayList<String> argsName,ArrayList<String> argsValues,String configFilePath) throws IOException, DMLException, ParseException {\n  HashMap<String,String> newNamedArgs=new HashMap<String,String>();\n  if (argsName.size() != argsValues.size()) {\n    throw new DMLException(\"size of argsName \" + argsName.size() + \" is diff than \"+ \" size of argsValues\");\n  }\n  for (int i=0; i < argsName.size(); i++) {\n    String k=argsName.get(i);\n    String v=argsValues.get(i);\n    newNamedArgs.put(k,v);\n  }\n  return execute(dmlScriptFilePath,newNamedArgs,configFilePath);\n}"}
{"ids": "65033", "raw_code": "public boolean isInMemoryDb(){\n  return path.equalsIgnoreCase(MEMORY_DB_PATH);\n}"}
{"ids": "26368", "raw_code": "public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {\n  hasDTD=false;\n  String dtd=UtilProperties.getSplitPropertyValue(UtilURL.fromResource(\"localdtds.properties\"),publicId);\n  if (UtilValidate.isNotEmpty(dtd)) {\n    if (Debug.verboseOn())     Debug.logVerbose(\"[UtilXml.LocalResolver.resolveEntity] resolving DTD with publicId [\" + publicId + \"], systemId [\"+ systemId+ \"] and the dtd file is [\"+ dtd+ \"]\",module);\n    try {\n      URL dtdURL=UtilURL.fromResource(dtd);\n      if (dtdURL == null) {\n        throw new GeneralException(\"Local DTD not found - \" + dtd);\n      }\n      InputStream dtdStream=dtdURL.openStream();\n      InputSource inputSource=new InputSource(dtdStream);\n      inputSource.setPublicId(publicId);\n      hasDTD=true;\n      if (Debug.verboseOn())       Debug.logVerbose(\"[UtilXml.LocalResolver.resolveEntity] got LOCAL DTD input source with publicId [\" + publicId + \"] and the dtd file is [\"+ dtd+ \"]\",module);\n      return inputSource;\n    }\n catch (    Exception e) {\n      Debug.logWarning(e,module);\n    }\n  }\n else {\n    int lastSlash=systemId.lastIndexOf(\"/\");\n    String filename=null;\n    if (lastSlash == -1) {\n      filename=systemId;\n    }\n else {\n      filename=systemId.substring(lastSlash + 1);\n    }\n    URL resourceUrl=UtilURL.fromResource(filename);\n    if (resourceUrl != null) {\n      InputStream resStream=resourceUrl.openStream();\n      InputSource inputSource=new InputSource(resStream);\n      if (UtilValidate.isNotEmpty(publicId)) {\n        inputSource.setPublicId(publicId);\n      }\n      hasDTD=true;\n      if (Debug.verboseOn())       Debug.logVerbose(\"[UtilXml.LocalResolver.resolveEntity] got LOCAL DTD/Schema input source with publicId [\" + publicId + \"] and the file/resource is [\"+ filename+ \"]\",module);\n      return inputSource;\n    }\n else {\n      Debug.logWarning(\"[UtilXml.LocalResolver.resolveEntity] could not find LOCAL DTD/Schema with publicId [\" + publicId + \"] and the file/resource is [\"+ filename+ \"]\",module);\n      return null;\n    }\n  }\n  return defaultResolver.resolveEntity(publicId,systemId);\n}"}
{"ids": "44075", "raw_code": "private static ClassNode loadClass(String name,Config config) throws Exception {\n  String filePath=config.getClassDumpPath() + name.replace('.','/') + \".class\";\n  ClassReader reader=new ClassReader(new FileInputStream(filePath));\n  ClassNode node=new ClassNode();\n  reader.accept(node,ClassReader.EXPAND_FRAMES);\n  return node;\n}"}
{"ids": "45093", "raw_code": "public void write(char[] cbuf,int off,int len) throws IOException {\n  internalOut.write(cbuf,off,len);\n}"}
{"ids": "80395", "raw_code": "public void add(final String clazz,final String subclazz,final boolean blocked){\n  entries.add(new Entry(clazz,subclazz,blocked));\n}"}
{"ids": "25009", "raw_code": "private synchronized void bufferChange() throws ReadFailedException {\n  ByteBuffer current=super.getByteBuffer();\n  if (null != current) {\n    current.clear();\n    emptyBuffers.add(current);\n  }\n  int tries=0;\n  while (true) {\n    try {\n      ByteBuffer buffer=fullBuffers.poll(100,TimeUnit.MILLISECONDS);\n      if (null != buffer) {\n        super.setByteBuffer(buffer);\n        break;\n      }\n else {\n        tries++;\n        if (readFailed || (tries > MAX_BUFFER_POOL_TRIES)) {\n          throw new ReadFailedException(\"Time-out trying to get the full byte buffer to read from.\");\n        }\n      }\n    }\n catch (    InterruptedException e) {\n      Thread.interrupted();\n    }\n  }\n}"}
{"ids": "17182", "raw_code": "protected synchronized Class loadClass(String name,boolean resolve) throws ClassNotFoundException {\n  Class c=findLoadedClass(name);\n  if (c == null)   c=findClass(name);\n  if (c == null)   throw new ClassNotFoundException(name);\n  if (resolve)   resolveClass(c);\n  return c;\n}"}
{"ids": "5538", "raw_code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static Comparable<?> max(Comparable<?>[] ar){\n  Comparable ret=ar[0];\n  for (int i=1; i < ar.length; i++) {\n    if (ret.compareTo(ar[i]) < 0) {\n      ret=ar[i];\n    }\n  }\n  return ret;\n}"}
{"ids": "65791", "raw_code": "private void initBPRMADetails(int C_BPartner_ID){\n  rmaField.removeActionListener(this);\n  rmaField.removeAllItems();\n  KeyNamePair pp=new KeyNamePair(0,\"\");\n  rmaField.addItem(pp);\n  ArrayList<KeyNamePair> list=loadRMAData(C_BPartner_ID);\n  for (  KeyNamePair knp : list)   rmaField.addItem(knp);\n  rmaField.setSelectedIndex(0);\n  rmaField.addActionListener(this);\n}"}
{"ids": "37612", "raw_code": "protected void resetOptions(){\n  m_maxStale=5;\n  m_searchDirection=SELECTION_FORWARD;\n  m_starting=null;\n  m_startRange=new Range();\n  m_classIndex=-1;\n  m_totalEvals=0;\n  m_cacheSize=1;\n  m_debug=false;\n}"}
{"ids": "28688", "raw_code": "@Override protected void tearDown() throws Exception {\n  try {\n    takeScreenShot();\n  }\n catch (  Throwable throwable) {\n    throwable.printStackTrace();\n  }\n  super.tearDown();\n}"}
{"ids": "16272", "raw_code": "public synchronized void clear(){\n  mCategories.clear();\n  mValues.clear();\n}"}
{"ids": "5132", "raw_code": "private boolean itera_connect(PlaPointInt p_from_point,PlaPointInt p_to_point){\n  ArrayList<PlaPointInt> corners=angled_connection(p_from_point,p_to_point);\n  boolean connection_succeeded=true;\n  for (int index=1; index < corners.size(); ++index) {\n    PlaPointInt from_corner=corners.get(index - 1);\n    PlaPointInt to_corner=corners.get(index);\n    TimeLimit time_limit=new TimeLimit(s_CHECK_FORCED_TRACE_TIME_MAX);\n    while (!from_corner.equals(to_corner)) {\n      PlaPointInt curr_ok_point=r_board.insert_trace(from_corner,to_corner,pen_half_width_arr[layer_active_no],layer_active_no,net_nos,clearance_class,max_shove_trace_recursion_depth,max_shove_via_recursion_depth,max_spring_over_recursion_depth,itera_settings.trace_pullt_min_move,!is_stitch_mode,time_limit);\n      if (curr_ok_point == null) {\n        r_board.undo(null);\n        return true;\n      }\n      if (curr_ok_point.equals(from_corner) && itera_settings.is_automatic_neckdown()) {\n        curr_ok_point=try_neckdown_at_end(from_corner,to_corner);\n      }\n      if (curr_ok_point.equals(from_corner)) {\n        prev_corner=from_corner;\n        connection_succeeded=false;\n        break;\n      }\n      from_corner=curr_ok_point;\n    }\n  }\n  return connection_succeeded;\n}"}
{"ids": "30704", "raw_code": "private Node<K,V> findPredecessorOfLast(){\n  for (; ; ) {\n    Index<K,V> q=head;\n    for (; ; ) {\n      Index<K,V> d, r;\n      if ((r=q.right) != null) {\n        if (r.indexesDeletedNode()) {\n          q.unlink(r);\n          break;\n        }\n        if (r.node.next != null) {\n          q=r;\n          continue;\n        }\n      }\n      if ((d=q.down) != null)       q=d;\n else       return q.node;\n    }\n  }\n}"}
{"ids": "16710", "raw_code": "public boolean query(int objectToQuery,long[][] hashFunctions){\n  for (  long[] h : hashFunctions) {\n    int i=hash(h,(long)objectToQuery);\n    if (!bitSet.get(i))     return false;\n  }\n  return true;\n}"}
{"ids": "53501", "raw_code": "@SafeVarargs public static <V>Set<V> createSet(V... values){\n  Set<V> set=new LinkedHashSet<V>();\n  for (  V v : values) {\n    set.add(v);\n  }\n  return set;\n}"}
{"ids": "2614", "raw_code": "@Override void doConstrainedOutsideScores(Grammar grammar,boolean viterbi,boolean logScores){\n  short[] numSubStatesArray=grammar.numSubStates;\n  double initVal=(logScores) ? Double.NEGATIVE_INFINITY : 0.0;\n  for (int diff=length; diff >= 1; diff--) {\n    for (int start=0; start + diff <= length; start++) {\n      int end=start + diff;\n      double[][] scoresAfterUnaries=new double[numStates][];\n      boolean somethingChanged=false;\n      for (int cState=0; cState < numStates; cState++) {\n        if (diff > 1 && !grammar.isGrammarTag[cState])         continue;\n        if (!allowedStates[start][end][cState]) {\n          continue;\n        }\n        UnaryRule[] rules=null;\n        if (viterbi)         rules=grammar.getClosedViterbiUnaryRulesByChild(cState);\n else         rules=grammar.getClosedSumUnaryRulesByChild(cState);\n        final int nChildStates=numSubStatesArray[cState];\n        final int numRules=rules.length;\n        for (int r=0; r < numRules; r++) {\n          UnaryRule ur=rules[r];\n          int pState=ur.parentState;\n          if ((pState == cState))           continue;\n          if (!allowedStates[start][end][pState]) {\n            continue;\n          }\n          double[][] scores=ur.getScores2();\n          final int nParentStates=numSubStatesArray[pState];\n          for (int cp=0; cp < nChildStates; cp++) {\n            if (scores[cp] == null)             continue;\n            if (!allowedSubStates[start][end][cState][cp])             continue;\n            for (int np=0; np < nParentStates; np++) {\n              double pS=scores[cp][np];\n              if (pS == initVal)               continue;\n              double oS=oScore[start][end][pState][np];\n              if (oS == initVal)               continue;\n              double thisRound=(logScores) ? oS + pS : oS * pS;\n              if (scoresAfterUnaries[cState] == null) {\n                scoresAfterUnaries[cState]=new double[numSubStatesArray[cState]];\n                if (viterbi)                 Arrays.fill(scoresAfterUnaries[cState],initVal);\n              }\n              if (viterbi)               scoresAfterUnaries[cState][cp]=Math.max(thisRound,scoresAfterUnaries[cState][cp]);\n else               scoresAfterUnaries[cState][cp]+=thisRound;\n              somethingChanged=true;\n            }\n          }\n        }\n      }\n      if (somethingChanged) {\n        for (int cState=0; cState < numStates; cState++) {\n          double[] thisCell=scoresAfterUnaries[cState];\n          if (thisCell == null)           continue;\n          for (int cp=0; cp < numSubStatesArray[cState]; cp++) {\n            if (thisCell[cp] > initVal) {\n              if (viterbi)               oScore[start][end][cState][cp]=Math.max(oScore[start][end][cState][cp],thisCell[cp]);\n else               oScore[start][end][cState][cp]+=thisCell[cp];\n            }\n          }\n        }\n      }\n      for (int pState=0; pState < numSubStatesArray.length; pState++) {\n        if (!allowedStates[start][end][pState]) {\n          continue;\n        }\n        final int nParentChildStates=numSubStatesArray[pState];\n        BinaryRule[] rules=grammar.splitRulesWithP(pState);\n        final int numRules=rules.length;\n        for (int r=0; r < numRules; r++) {\n          BinaryRule br=rules[r];\n          int lState=br.leftChildState;\n          int min1=narrowRExtent[start][lState];\n          if (end < min1) {\n            continue;\n          }\n          int rState=br.rightChildState;\n          int max1=narrowLExtent[end][rState];\n          if (max1 < min1) {\n            continue;\n          }\n          int min=min1;\n          int max=max1;\n          if (max - min > 2) {\n            int min2=wideLExtent[end][rState];\n            min=(min1 > min2 ? min1 : min2);\n            if (max1 < min) {\n              continue;\n            }\n            int max2=wideRExtent[start][lState];\n            max=(max1 < max2 ? max1 : max2);\n            if (max < min) {\n              continue;\n            }\n          }\n          double[][][] scores=br.getScores2();\n          final int nLeftChildStates=numSubStatesArray[lState];\n          final int nRightChildStates=numSubStatesArray[rState];\n          for (int split=min; split <= max; split++) {\n            if (!allowedStates[start][split][lState])             continue;\n            if (!allowedStates[split][end][rState])             continue;\n            double[] rightScores=new double[nRightChildStates];\n            if (viterbi)             Arrays.fill(rightScores,initVal);\n            Arrays.fill(scoresToAdd,initVal);\n            somethingChanged=false;\n            for (int lp=0; lp < nLeftChildStates; lp++) {\n              double lS=iScore[start][split][lState][lp];\n              if (lS == initVal) {\n                continue;\n              }\n              for (int rp=0; rp < nRightChildStates; rp++) {\n                if (scores[lp][rp] == null)                 continue;\n                double rS=iScore[split][end][rState][rp];\n                if (rS == initVal) {\n                  continue;\n                }\n                for (int np=0; np < nParentChildStates; np++) {\n                  double pS=scores[lp][rp][np];\n                  if (pS == initVal)                   continue;\n                  double oS=oScore[start][end][pState][np];\n                  if (oS == initVal)                   continue;\n                  double thisRoundL=(logScores) ? pS + rS + oS : pS * rS * oS;\n                  double thisRoundR=(logScores) ? pS + lS + oS : pS * lS * oS;\n                  if (viterbi) {\n                    scoresToAdd[lp]=Math.max(thisRoundL,scoresToAdd[lp]);\n                    rightScores[rp]=Math.max(thisRoundR,rightScores[rp]);\n                  }\n else {\n                    scoresToAdd[lp]+=thisRoundL;\n                    rightScores[rp]+=thisRoundR;\n                  }\n                  somethingChanged=true;\n                }\n              }\n            }\n            if (!somethingChanged)             continue;\n            for (int cp=0; cp < nLeftChildStates; cp++) {\n              if (scoresToAdd[cp] > initVal) {\n                if (viterbi)                 oScore[start][split][lState][cp]=Math.max(oScore[start][split][lState][cp],scoresToAdd[cp]);\n else                 oScore[start][split][lState][cp]+=scoresToAdd[cp];\n              }\n            }\n            for (int cp=0; cp < nRightChildStates; cp++) {\n              if (rightScores[cp] > initVal) {\n                if (viterbi)                 oScore[split][end][rState][cp]=Math.max(oScore[split][end][rState][cp],rightScores[cp]);\n else                 oScore[split][end][rState][cp]+=rightScores[cp];\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"}
{"ids": "81130", "raw_code": "public void stop(){\n  timeMonIndex=0;\n  setException();\n  Iterator iter=iter();\n  while (iter.hasNext()) {\n    HttpMonItem monItem=(HttpMonItem)iter.next();\n    monItem.stop(this);\n  }\n  if (stackTrace != null)   changeDetails();\n}"}
{"ids": "84697", "raw_code": "public void calcMinTick(){\n  if (minData == 0.0)   minTick=0;\n else   minTick=Math.floor(minData / majorTick) * majorTick;\n}"}
{"ids": "52557", "raw_code": "public static void switchTiming(String nextPhase){\n  stopMostRecentTimer();\n  startTiming(nextPhase);\n}"}
{"ids": "41567", "raw_code": "public byte[] encode(){\n  char type=getAttributeType();\n  if (!isTypeValid(type))   throw new IllegalStateException(((int)type) + \"is not a valid address attribute!\");\n  byte binValue[]=new byte[HEADER_LENGTH + getDataLength()];\n  binValue[0]=(byte)(type >> 8);\n  binValue[1]=(byte)(type & 0x00FF);\n  binValue[2]=(byte)(getDataLength() >> 8);\n  binValue[3]=(byte)(getDataLength() & 0x00FF);\n  binValue[4]=0x00;\n  binValue[5]=getFamily();\n  binValue[6]=(byte)(getPort() >> 8);\n  binValue[7]=(byte)(getPort() & 0x00FF);\n  if (getFamily() == ADDRESS_FAMILY_IPV6) {\n    System.arraycopy(getAddressBytes(),0,binValue,8,16);\n  }\n else {\n    System.arraycopy(getAddressBytes(),0,binValue,8,4);\n  }\n  return binValue;\n}"}
{"ids": "48357", "raw_code": "private void doDeleteEntry(String alias) throws Exception {\n  if (keyStore.containsAlias(alias) == false) {\n    MessageFormat form=new MessageFormat(rb.getString(\"Alias.alias.does.not.exist\"));\n    Object[] source={alias};\n    throw new Exception(form.format(source));\n  }\n  keyStore.deleteEntry(alias);\n}"}
{"ids": "43703", "raw_code": "protected Integer mapThrowableFlat(Throwable throwable){\n  Class<? extends Throwable> throwableClass=throwable.getClass();\n  Integer resId=throwableToMsgIdMap.get(throwableClass);\n  if (resId == null) {\n    Class<? extends Throwable> closestClass=null;\n    Set<Entry<Class<? extends Throwable>,Integer>> mappings=throwableToMsgIdMap.entrySet();\n    for (    Entry<Class<? extends Throwable>,Integer> mapping : mappings) {\n      Class<? extends Throwable> candidate=mapping.getKey();\n      if (candidate.isAssignableFrom(throwableClass)) {\n        if (closestClass == null || closestClass.isAssignableFrom(candidate)) {\n          closestClass=candidate;\n          resId=mapping.getValue();\n        }\n      }\n    }\n  }\n  return resId;\n}"}
{"ids": "38991", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>();\n  newVector.add(new Option(\"\\tDistance function to use.\\n\" + \"\\t(default: weka.core.EuclideanDistance)\",\"A\",1,\"-A <classname and options>\"));\n  newVector.add(new Option(\"\\tCalculate performance statistics.\",\"P\",0,\"-P\"));\n  return newVector.elements();\n}"}
{"ids": "51795", "raw_code": "public void assertColumnType(ResultSet rs) throws SQLException {\n  ResultSetMetaData md=rs.getMetaData();\n  int sqlType=md.getColumnType(mdi.getPosition());\n  assertTrue(String.format(\"Unexpected SQL Type %d for column %s\",sqlType,mdi),isAllowedSqlType(sqlType));\n}"}
{"ids": "14309", "raw_code": "private void validateDnsNames(Set dnsNameSet) throws PolicyException {\n  Iterator dnsNames=dnsNameSet.iterator();\n  while (dnsNames.hasNext()) {\n    String dnsName=(String)dnsNames.next();\n    validateDnsName(dnsName);\n    dnsList.add(dnsName.toLowerCase());\n  }\n}"}
{"ids": "8319", "raw_code": "public static boolean isMopMethod(String methodName){\n  return (methodName.startsWith(\"this$\") || methodName.startsWith(\"super$\")) && !methodName.contains(\"$dist$\");\n}"}
{"ids": "10885", "raw_code": "protected void init(){\n  GraphicsConfigTemplate3D template=new GraphicsConfigTemplate3D();\n  GraphicsEnvironment env=GraphicsEnvironment.getLocalGraphicsEnvironment();\n  GraphicsDevice device=env.getDefaultScreenDevice();\n  GraphicsConfiguration config=device.getBestConfiguration(template);\n  canvas=new Canvas3D(config);\n  canvas.setSize(new Dimension(DEFAULT_DIMENSION,DEFAULT_DIMENSION));\n  objRootBG=new BranchGroup();\n  objRootBG.setCapability(Group.ALLOW_CHILDREN_EXTEND);\n  constructWorld(objRootBG);\n}"}
{"ids": "35081", "raw_code": "private <Delegated>PresenterBinder<? super Delegated> findPresenterBinderForClass(Class<Delegated> clazz) throws IllegalAccessException, InstantiationException {\n  PresenterBinder<? super Delegated> presenterBinder;\n  String clsName=clazz.getName();\n  String className=clsName + PRESENTER_BINDER_SUFFIX;\n  try {\n    Class<?> presenterBinderClass=Class.forName(className);\n    presenterBinder=(PresenterBinder<? super Delegated>)presenterBinderClass.newInstance();\n  }\n catch (  ClassNotFoundException e) {\n    return null;\n  }\n  return presenterBinder;\n}"}
{"ids": "60353", "raw_code": "@Override final Node<K,V> find(int h,Object k){\n  if (k != null) {\n    for (Node<K,V> e=first; e != null; ) {\n      int s;\n      if (((s=lockState) & (WAITER | WRITER)) != 0) {\n        if (e.hash == h && isEqual((K)k,e.key,myHashingStrategy)) {\n          return e;\n        }\n        e=e.next;\n      }\n else       if (U.compareAndSwapInt(this,LOCKSTATE,s,s + READER)) {\n        TreeNode<K,V> r, p;\n        try {\n          p=((r=root) == null ? null : r.findTreeNode(h,k,null));\n        }\n  finally {\n          int ls;\n          do {\n          }\n while (!U.compareAndSwapInt(this,LOCKSTATE,ls=lockState,ls - READER));\n          Thread w;\n          if (ls == (READER | WAITER) && (w=waiter) != null) {\n            LockSupport.unpark(w);\n          }\n        }\n        return p;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "32924", "raw_code": "public void square(double x,double y,double r){\n  if (r < 0)   throw new IllegalArgumentException(\"square side length can't be negative\");\n  double xs=scaleX(x);\n  double ys=scaleY(y);\n  double ws=factorX(2 * r);\n  double hs=factorY(2 * r);\n  if (ws <= 1 && hs <= 1)   pixel(x,y);\n else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));\n  draw();\n}"}
{"ids": "79200", "raw_code": "private int lowerHeightMap(int x,int y,int z){\n  for (--y; y >= 0; --y) {\n    if (getType(x,z,y) != 0) {\n      break;\n    }\n  }\n  return y + 1;\n}"}
{"ids": "33272", "raw_code": "public void remove(@NotNull StatusNotification notification){\n  stack.remove(notification);\n  onClose(notification);\n}"}
{"ids": "56801", "raw_code": "private JobDefinitionEntity createOrUpdateJobDefinitionEntity(JobDefinitionEntity jobDefinitionEntity,NamespaceEntity namespaceEntity,String jobName,String description,String activitiId,List<Parameter> parameters,S3PropertiesLocation s3PropertiesLocation){\n  JobDefinitionEntity jobDefinitionEntityLocal=jobDefinitionEntity;\n  if (jobDefinitionEntityLocal == null) {\n    jobDefinitionEntityLocal=new JobDefinitionEntity();\n  }\n  jobDefinitionEntityLocal.setName(jobName);\n  jobDefinitionEntityLocal.setNamespace(namespaceEntity);\n  jobDefinitionEntityLocal.setDescription(description);\n  jobDefinitionEntityLocal.setActivitiId(activitiId);\n  String bucketName=null;\n  String key=null;\n  if (s3PropertiesLocation != null) {\n    bucketName=s3PropertiesLocation.getBucketName();\n    key=s3PropertiesLocation.getKey();\n  }\n  jobDefinitionEntityLocal.setS3BucketName(bucketName);\n  jobDefinitionEntityLocal.setS3ObjectKey(key);\n  List<JobDefinitionParameterEntity> parameterEntities=new ArrayList<>();\n  if (!CollectionUtils.isEmpty(parameters)) {\n    for (    Parameter parameter : parameters) {\n      JobDefinitionParameterEntity parameterEntity=new JobDefinitionParameterEntity();\n      parameterEntities.add(parameterEntity);\n      parameterEntity.setName(parameter.getName());\n      parameterEntity.setValue(parameter.getValue());\n    }\n  }\n  jobDefinitionEntityLocal.setParameters(parameterEntities);\n  return jobDefinitionEntityLocal;\n}"}
{"ids": "85792", "raw_code": "public void find(int index,float weightLoss,float moveCost,ArrayList<DbEntry> itemsPlaced){\n  if ((weightLoss >= lowestWeightLoss) || ((weightLoss == lowestWeightLoss) && (moveCost >= lowestMoveCost))) {\n    return;\n  }\n else   if (index >= itemsToPlace.size()) {\n    lowestWeightLoss=weightLoss;\n    lowestMoveCost=moveCost;\n    finalPlacedItems=deepCopy(itemsPlaced);\n    return;\n  }\n  DbEntry me=itemsToPlace.get(index);\n  int myX=me.cellX;\n  int myY=me.cellY;\n  ArrayList<DbEntry> itemsIncludingMe=new ArrayList<>(itemsPlaced.size() + 1);\n  itemsIncludingMe.addAll(itemsPlaced);\n  itemsIncludingMe.add(me);\n  if (me.spanX > 1 || me.spanY > 1) {\n    int myW=me.spanX;\n    int myH=me.spanY;\n    for (int y=0; y < mTrgY; y++) {\n      for (int x=0; x < mTrgX; x++) {\n        float newMoveCost=moveCost;\n        if (x != myX) {\n          me.cellX=x;\n          newMoveCost++;\n        }\n        if (y != myY) {\n          me.cellY=y;\n          newMoveCost++;\n        }\n        if (ignoreMove) {\n          newMoveCost=moveCost;\n        }\n        if (isVacant(occupied,x,y,myW,myH)) {\n          markCells(occupied,me,true);\n          find(index + 1,weightLoss,newMoveCost,itemsIncludingMe);\n          markCells(occupied,me,false);\n        }\n        if (myW > me.minSpanX && isVacant(occupied,x,y,myW - 1,myH)) {\n          me.spanX--;\n          markCells(occupied,me,true);\n          find(index + 1,weightLoss,newMoveCost + 1,itemsIncludingMe);\n          markCells(occupied,me,false);\n          me.spanX++;\n        }\n        if (myH > me.minSpanY && isVacant(occupied,x,y,myW,myH - 1)) {\n          me.spanY--;\n          markCells(occupied,me,true);\n          find(index + 1,weightLoss,newMoveCost + 1,itemsIncludingMe);\n          markCells(occupied,me,false);\n          me.spanY++;\n        }\n        if (myH > me.minSpanY && myW > me.minSpanX && isVacant(occupied,x,y,myW - 1,myH - 1)) {\n          me.spanX--;\n          me.spanY--;\n          markCells(occupied,me,true);\n          find(index + 1,weightLoss,newMoveCost + 2,itemsIncludingMe);\n          markCells(occupied,me,false);\n          me.spanX++;\n          me.spanY++;\n        }\n        me.cellX=myX;\n        me.cellY=myY;\n      }\n    }\n    find(index + 1,weightLoss + me.weight,moveCost,itemsPlaced);\n  }\n else {\n    int newDistance=Integer.MAX_VALUE;\n    int newX=Integer.MAX_VALUE, newY=Integer.MAX_VALUE;\n    for (int y=0; y < mTrgY; y++) {\n      for (int x=0; x < mTrgX; x++) {\n        if (!occupied[x][y]) {\n          int dist=ignoreMove ? 0 : ((me.cellX - x) * (me.cellX - x) + (me.cellY - y) * (me.cellY - y));\n          if (dist < newDistance) {\n            newX=x;\n            newY=y;\n            newDistance=dist;\n          }\n        }\n      }\n    }\n    if (newX < mTrgX && newY < mTrgY) {\n      float newMoveCost=moveCost;\n      if (newX != myX) {\n        me.cellX=newX;\n        newMoveCost++;\n      }\n      if (newY != myY) {\n        me.cellY=newY;\n        newMoveCost++;\n      }\n      if (ignoreMove) {\n        newMoveCost=moveCost;\n      }\n      markCells(occupied,me,true);\n      find(index + 1,weightLoss,newMoveCost,itemsIncludingMe);\n      markCells(occupied,me,false);\n      me.cellX=myX;\n      me.cellY=myY;\n      if (index + 1 < itemsToPlace.size() && itemsToPlace.get(index + 1).weight >= me.weight && !ignoreMove) {\n        find(index + 1,weightLoss + me.weight,moveCost,itemsPlaced);\n      }\n    }\n else {\n      for (int i=index + 1; i < itemsToPlace.size(); i++) {\n        weightLoss+=itemsToPlace.get(i).weight;\n      }\n      find(itemsToPlace.size(),weightLoss + me.weight,moveCost,itemsPlaced);\n    }\n  }\n}"}
{"ids": "45671", "raw_code": "@RequestMapping(value={\"/\",\"\"},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute(\"users\") @Valid Users users,BindingResult bindingResult,Principal principal){\n  RestWrapper restWrapper=null;\n  if (bindingResult.hasErrors()) {\n    BindingResultError bindingResultError=new BindingResultError();\n    return bindingResultError.errorMessage(bindingResult);\n  }\n  try {\n    String hashedPassword=DigestUtils.sha1Hex(users.getPassword());\n    com.wipro.ats.bdre.md.dao.jpa.Users jpaUsers=new com.wipro.ats.bdre.md.dao.jpa.Users();\n    jpaUsers.setPassword(hashedPassword);\n    jpaUsers.setUsername(users.getUsername());\n    jpaUsers.setEnabled((users.getEnabled() == 1) ? true : false);\n    usersDAO.insert(jpaUsers);\n    restWrapper=new RestWrapper(users,RestWrapper.OK);\n    LOGGER.info(\"Record with ID:\" + users.getUsername() + \" inserted in Users by User:\"+ principal.getName()+ users);\n  }\n catch (  Exception e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\n  return restWrapper;\n}"}
{"ids": "86645", "raw_code": "public static String cappedInt(final long val){\n  if (val >= Integer.MAX_VALUE) {\n    return OVER;\n  }\n else   if (val <= Integer.MIN_VALUE) {\n    return UNDER;\n  }\n  return Long.toString(val);\n}"}
{"ids": "62789", "raw_code": "private void createFromAssets(String myDBName,File dbfile,InputStream assetFileInputStream){\n  OutputStream out=null;\n  try {\n    String dbPath=dbfile.getAbsolutePath();\n    dbPath=dbPath.substring(0,dbPath.lastIndexOf(\"/\") + 1);\n    File dbPathFile=new File(dbPath);\n    if (!dbPathFile.exists())     dbPathFile.mkdirs();\n    File newDbFile=new File(dbPath + myDBName);\n    out=new FileOutputStream(newDbFile);\n    byte[] buf=new byte[1024];\n    int len;\n    while ((len=assetFileInputStream.read(buf)) > 0)     out.write(buf,0,len);\n    Log.v(\"info\",\"Copied pre-populated DB content to: \" + newDbFile.getAbsolutePath());\n  }\n catch (  IOException ex) {\n    Log.v(\"createFromAssets\",\"No pre-populated DB found, error=\" + ex.getMessage());\n  }\n finally {\n    if (out != null) {\n      try {\n        out.close();\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n}"}
{"ids": "29185", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return PERSON_PROPERTY;\ncase 2:\n  return PAGE_PROPERTY;\ncase 3:\nreturn EQUIV;\ncase 4:\nreturn PAGE_VIEW;\ndefault :\nreturn null;\n}\n}"}
{"ids": "33121", "raw_code": "protected String internalPut(String key,String newValue){\nsynchronized (childAndPropertyLock) {\n    String oldValue=properties.get(key);\n    if (oldValue != null && oldValue.equals(newValue))     return oldValue;\n    properties=properties.put(key,newValue);\n    return oldValue;\n  }\n}"}
{"ids": "5085", "raw_code": "public Polyline(PlaPointInt p_from_corner,PlaPointInt p_to_corner){\n  if (p_from_corner.equals(p_to_corner))   throw new IllegalArgumentException(classname + \"C must contain at least 2 different points\");\n  lines_list=new ArrayList<PlaLineInt>(3);\n  PlaDirection dir=new PlaDirection(p_from_corner,p_to_corner);\n  lines_list.add(new PlaLineInt(p_from_corner,dir.rotate_45_deg(2)));\n  lines_list.add(new PlaLineInt(p_from_corner,p_to_corner));\n  lines_list.add(new PlaLineInt(p_to_corner,dir.rotate_45_deg(2)));\n  corners_allocate(corner_count());\n  precalculated_corners[0]=p_from_corner;\n  precalculated_corners[1]=p_to_corner;\n}"}
{"ids": "5832", "raw_code": "protected boolean isOnSameScreenAsChildren(){\n  return true;\n}"}
{"ids": "79374", "raw_code": "public static String formatPrice(Double price){\n  if (price == null)   return \"\";\n  return formatPrice(price.doubleValue());\n}"}
{"ids": "77406", "raw_code": "static void checkLogDir(){\n  if (System.getProperty(\"solr.log.dir\") == null) {\n    log.error(\"Missing Java Option solr.log.dir. Logging may be missing or incomplete.\");\n  }\n}"}
{"ids": "47942", "raw_code": "private static boolean isMoreAbove(String src,int index){\n  int ch;\n  int cc;\n  int len=src.length();\n  for (int i=index + Character.charCount(src.codePointAt(index)); i < len; i+=Character.charCount(ch)) {\n    ch=src.codePointAt(i);\n    cc=Normalizer.getCombiningClass(ch);\n    if (cc == COMBINING_CLASS_ABOVE) {\n      return true;\n    }\n else     if (cc == 0) {\n      return false;\n    }\n  }\n  return false;\n}"}
{"ids": "78690", "raw_code": "public void restoreKey(String key){\n  if (!key.equalsIgnoreCase(\"test_mode_opened\")) {\n    String originalKey=key.substring(keyTestMode.length());\n    Object value=get(key);\n    put(originalKey,value);\n    clear(key);\n  }\n}"}
{"ids": "57841", "raw_code": "public boolean hasUnsupportedCriticalExtension(){\n  Set extns=getCriticalExtensionOIDs();\n  if (extns == null) {\n    return false;\n  }\n  extns.remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT);\n  extns.remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR);\n  return !extns.isEmpty();\n}"}
{"ids": "69935", "raw_code": "public static void writeInt(DataOutput out,int v) throws IOException {\n  out.writeByte(0xff & v);\n  out.writeByte(0xff & (v >>> 8));\n  out.writeByte(0xff & (v >>> 16));\n  out.writeByte(0xff & (v >>> 24));\n}"}
{"ids": "81266", "raw_code": "public static Comparable[] sortCopy(Comparable[] objects){\n  int len=objects.length;\n  Comparable[] copy=new Comparable[len];\n  System.arraycopy(objects,0,copy,0,len);\n  sort(copy);\n  return copy;\n}"}
{"ids": "4114", "raw_code": "private Utf8Constant parseUtf8Constant(int index) throws IOException {\n  int length=readShort();\n  StringBuilder cb=new StringBuilder();\n  for (int i=0; i < length; i++) {\n    int ch=read();\n    if (ch < 0x80) {\n      cb.append((char)ch);\n    }\n else     if ((ch & 0xe0) == 0xc0) {\n      int ch2=read();\n      i++;\n      cb.append((char)(((ch & 0x1f) << 6) + (ch2 & 0x3f)));\n    }\n else {\n      int ch2=read();\n      int ch3=read();\n      i+=2;\n      cb.append((char)(((ch & 0xf) << 12) + ((ch2 & 0x3f) << 6) + ((ch3 & 0x3f))));\n    }\n  }\n  return new Utf8Constant(_class.getConstantPool(),index,cb.toString());\n}"}
{"ids": "86820", "raw_code": "@Override public boolean markNextSequence() throws IOException {\n  if (mSeqSize < mLimit && mPointerSize + mPointerEntrySize <= mLimit) {\n    mPointers.writeByte((int)mChecksumSeq.getValue());\n    mChecksumSeq.reset();\n    if (mChecksumQual != null) {\n      mPointers.writeByte((int)mChecksumQual.getValue());\n      mChecksumQual.reset();\n    }\n    mPointers.writeInt((int)mSeqSize);\n    mPointerSize+=mPointerEntrySize;\n    return true;\n  }\n  return false;\n}"}
{"ids": "3406", "raw_code": "public final double sampleActiveCount(){\n  return _activeCount.get();\n}"}
{"ids": "83294", "raw_code": "private void preprocessData(Map<Integer,Map<Integer,List<Integer>>> knotenVonSpurNachSpurMapping,Map<Integer,Map<Integer,String>> knotenSpurLinkMapping){\n  preprocessKnotenSpurLinkMapping(knotenSpurLinkMapping);\n  cleanKnotenVonSpurNachSpurMapping(knotenVonSpurNachSpurMapping,knotenSpurLinkMapping);\n  mergeLanesOnSameLink(knotenVonSpurNachSpurMapping,knotenSpurLinkMapping);\n}"}
{"ids": "76249", "raw_code": "@Override public boolean mutate(TestCase test,TestFactory factory){\n  if (Randomness.nextDouble() >= Properties.P_CHANGE_PARAMETER)   return false;\n  if (!isStatic()) {\n    VariableReference source=getSource();\n    List<VariableReference> objects=test.getObjects(source.getType(),getPosition());\n    objects.remove(source);\n    if (!objects.isEmpty()) {\n      setSource(Randomness.choice(objects));\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "52622", "raw_code": "@Override protected void drawXLabels(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint paint,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){\n  int length=xLabels.size();\n  if (length > 0) {\n    boolean showLabels=mRenderer.isShowLabels();\n    boolean showGridY=mRenderer.isShowGridY();\n    boolean showTickMarks=mRenderer.isShowTickMarks();\n    DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1));\n    for (int i=0; i < length; i++) {\n      long label=Math.round(xLabels.get(i));\n      float xLabel=(float)(left + xPixelsPerUnit * (label - minX));\n      if (showLabels) {\n        paint.setColor(mRenderer.getXLabelsColor());\n        if (showTickMarks) {\n          canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,paint);\n        }\n        drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3 + mRenderer.getXLabelsPadding(),paint,mRenderer.getXLabelsAngle());\n      }\n      if (showGridY) {\n        paint.setColor(mRenderer.getGridColor(0));\n        canvas.drawLine(xLabel,bottom,xLabel,top,paint);\n      }\n    }\n  }\n  drawXTextLabels(xTextLabelLocations,canvas,paint,true,left,top,bottom,xPixelsPerUnit,minX,maxX);\n}"}
{"ids": "61270", "raw_code": "public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type) throws javax.xml.transform.TransformerException {\n  this(exprString,locator,prefixResolver,type,null);\n}"}
{"ids": "65802", "raw_code": "private void addMenuItem(JPopupMenu menu,String title,MWFNode node,int AD_WF_NodeTo_ID){\n  WFPopupItem item=new WFPopupItem(title,node,AD_WF_NodeTo_ID);\n  menu.add(item);\n  item.addActionListener(this);\n}"}
{"ids": "63527", "raw_code": "public synchronized long allocate(int length){\n  int blocks=getBlockCount(length);\n  BlockRange x=null;\n  for (  BlockRange b : freeSpace) {\n    if (b.blocks >= blocks) {\n      x=b;\n      break;\n    }\n  }\n  long pos=getPos(x.start);\n  if (x.blocks == blocks) {\n    freeSpace.remove(x);\n  }\n else {\n    x.start+=blocks;\n    x.blocks-=blocks;\n  }\n  return pos;\n}"}
{"ids": "51840", "raw_code": "public JenkinsHttpClient(URI uri,String username,String password){\n  this(uri);\n  if (isNotBlank(username)) {\n    CredentialsProvider provider=client.getCredentialsProvider();\n    AuthScope scope=new AuthScope(uri.getHost(),uri.getPort(),AuthScope.ANY_REALM);\n    UsernamePasswordCredentials credentials=new UsernamePasswordCredentials(username,password);\n    provider.setCredentials(scope,credentials);\n    localContext=new BasicHttpContext();\n    localContext.setAttribute(\"preemptive-auth\",new BasicScheme());\n    client.addRequestInterceptor(new PreemptiveAuth(),0);\n  }\n}"}
{"ids": "14986", "raw_code": "public static Set combineOCs(Set one,Set two){\n  if (one == null || one.isEmpty()) {\n    return two;\n  }\n  if (two == null || two.isEmpty()) {\n    return one;\n  }\n  Set resultSet=new HashSet();\n  Iterator itr1=one.iterator();\n  while (itr1.hasNext()) {\n    String value1=(String)itr1.next();\n    resultSet.add(value1.toLowerCase());\n  }\n  Iterator itr2=two.iterator();\n  while (itr2.hasNext()) {\n    String value2=(String)itr2.next();\n    resultSet.add(value2.toLowerCase());\n  }\n  return resultSet;\n}"}
{"ids": "65097", "raw_code": "private String wrap(String str){\n  StringBuilder buf=new StringBuilder(str);\n  int len=lineLength;\n  while (len < buf.length()) {\n    int idx=buf.lastIndexOf(\" \",len);\n    if (idx != -1) {\n      buf.replace(idx,idx + 1,breaker);\n      len=idx + breaker.length() + lineLength;\n    }\n else {\n      buf.insert(len,breaker);\n      len+=breaker.length() + lineLength;\n    }\n  }\n  buf.insert(0,\"<html>\");\n  return buf.toString();\n}"}
{"ids": "73357", "raw_code": "public EchoStateNetwork commitChanges(){\n  Network net=networkPanel.getNetwork();\n  Integer numIns=Utils.parseInteger(tfInputLayerPop);\n  if (numIns == null) {\n    throw new IllegalArgumentException(\"Non-Number input population.\");\n  }\n  NeuronGroup inputLayer=new NeuronGroup(net,numIns);\n  if (inputLayer.size() > inputLayer.getGridThreshold()) {\n    inputLayer.setLayout(new org.simbrain.network.layouts.GridLayout());\n  }\n  inputLayer.applyLayout();\n  NeuronGroup reservoirLayer=reservoirPanel.createLayerFromData();\n  if (reservoirLayer.size() > reservoirLayer.getGridThreshold()) {\n    reservoirLayer.setLayout(new org.simbrain.network.layouts.GridLayout());\n  }\n  reservoirLayer.applyLayout();\n  SynapseGroup resSynapses=resToResPanel.createSynapseGroup(reservoirLayer,reservoirLayer);\n  resSynapses.setLabel(\"Res \\u2192 Res\");\n  NeuronGroup outputLayer=outputPanel.createLayerFromData();\n  outputLayer.applyLayout();\n  if (outputLayer.size() > outputLayer.getGridThreshold()) {\n    outputLayer.setLayout(new org.simbrain.network.layouts.GridLayout());\n  }\n  EchoStateNetwork esn=new EchoStateNetwork(net,networkPanel.getLastClickedPosition());\n  esn.setBackWeights(allowOutToRes.isSelected());\n  esn.setDirectInOutWeights(directInputToOutput.isSelected());\n  esn.setRecurrentOutWeights(allowRecurrentOutputs.isSelected());\n  esn.setTimeType((TimeType)cbTimeType.getSelectedItem());\n  double maxEig=Utils.doubleParsable(spectralRadius);\n  if (Double.isNaN(maxEig)) {\n    throw new IllegalArgumentException(\"Non-Number spectral radius.\");\n  }\n  esn.initializeInputLayer(inputLayer);\n  esn.initializeReservoir(reservoirLayer,resSynapses,maxEig);\n  esn.initializeOutput(outputLayer);\n  SynapseGroup itr=inToResPanel.createSynapseGroup(inputLayer,reservoirLayer);\n  itr.setLabel(\"In \\u2192 Res\");\n  esn.addSynapseGroup(itr);\n  SynapseGroup rto=SynapseGroup.createSynapseGroup(reservoirLayer,outputLayer,0.5);\n  rto.setLabel(\"Res \\u2192 Out\");\n  esn.addSynapseGroup(rto);\n  if (allowRecurrentOutputs.isSelected()) {\n    SynapseGroup oto=SynapseGroup.createSynapseGroup(outputLayer,outputLayer,0.5);\n    oto.setLabel(\"Out \\u2192 Out\");\n    esn.addSynapseGroup(oto);\n  }\n  if (allowOutToRes.isSelected()) {\n    SynapseGroup otr=outToResPanel.createSynapseGroup(outputLayer,reservoirLayer);\n    otr.setLabel(\"Out \\u2192 Res.\");\n    esn.addSynapseGroup(otr);\n  }\n  if (directInputToOutput.isSelected()) {\n    SynapseGroup ito=SynapseGroup.createSynapseGroup(inputLayer,outputLayer,0.5);\n    ito.setLabel(\"In \\u2192 Out\");\n    esn.addSynapseGroup(ito);\n  }\n  esn.positionLayers();\n  return esn;\n}"}
{"ids": "84787", "raw_code": "public static double pdf(double x,double shape,double scale){\n  if (x < 0)   return 0;\n  if (x == 0) {\n    if (shape == 1.0)     return 1.0 / scale;\n else     return 0.0;\n  }\n  if (shape == 0.0)   return 1.0 / x;\n  if (shape == -0.5) {\n    return Math.sqrt(x);\n  }\n  final double xs=x / scale;\n  if (shape == 1.0) {\n    return Math.exp(-xs) / scale;\n  }\n  final double a=Math.exp((shape - 1.0) * Math.log(xs) - xs - GammaFunction.lnGamma(shape));\n  return a / scale;\n}"}
{"ids": "27387", "raw_code": "public void flush(){\nsynchronized (list) {\n    int n=0;\n    long m=0L;\n    for (    T b : list) {\n      if (halt)       throw new RuntimeException(firstCause.get());\n      final int size=b.size();\n      final long counter=b.flush();\n      m+=counter;\n      if (DEBUG)       log.debug(\"Flushed buffer: size=\" + size + \", counter=\"+ counter);\n    }\n    if (INFO)     log.info(\"Flushed \" + n + \" unsynchronized buffers totalling \"+ m+ \" elements\");\n  }\n}"}
{"ids": "22319", "raw_code": "private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {\n  if (xmlWriter.getPrefix(namespace) == null) {\n    xmlWriter.writeNamespace(prefix,namespace);\n    xmlWriter.setPrefix(prefix,namespace);\n  }\n  xmlWriter.writeAttribute(namespace,attName,attValue);\n}"}
{"ids": "59896", "raw_code": "public void logInfo(String message){\n  logger.info(logPrefix + message);\n}"}
{"ids": "71873", "raw_code": "private boolean matchAddress(final byte[] remoteMask){\n  if (ruleType == RuleType.ALLWILDCARD) {\n    return true;\n  }\n  if (prefixMask == null) {\n    return false;\n  }\n  if (remoteMask.length != prefixMask.length) {\n    return false;\n  }\n  for (int i=0; i < prefixMask.length; i++) {\n    if (!wildCard.get(i) && (ruleMask[i] & prefixMask[i]) != (remoteMask[i] & prefixMask[i])) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "9880", "raw_code": "public static String sign(String signingString,PrivateKey privateKey) throws InvalidKeyException, SignatureException {\n  byte[] bytes=signingString.getBytes(StandardCharsets.UTF_8);\n  Signature sig;\n  try {\n    sig=Signature.getInstance(SHA256_WITH_RSA);\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new IllegalArgumentException(\"An error occurred while getting the signature algorithm\",e);\n  }\n  sig.initSign(privateKey);\n  sig.update(bytes);\n  return Hex.encodeHexString(sig.sign());\n}"}
{"ids": "35774", "raw_code": "public Object invoke(Method method,Object target,ExtensionContext extensionContext,ExtensionRegistry extensionRegistry){\n  @SuppressWarnings(\"unchecked\") Optional<Object> optionalTarget=(target instanceof Optional ? (Optional<Object>)target : Optional.ofNullable(target));\n  return ReflectionUtils.invokeMethod(method,target,resolveParameters(method,optionalTarget,extensionContext,extensionRegistry));\n}"}
{"ids": "32951", "raw_code": "RegisteredProject putProject(ProjectConfig config,FolderEntry folder,boolean updated,boolean detected) throws ServerException, ConflictException, NotFoundException {\n  final RegisteredProject project=new RegisteredProject(folder,config,updated,detected,this.projectTypeRegistry);\n  projects.put(project.getPath(),project);\n  return project;\n}"}
{"ids": "19151", "raw_code": "protected void tearDown(){\n  try {\n    ds.close();\n    sds.close();\n  }\n catch (  Exception e) {\n  }\n}"}
{"ids": "37421", "raw_code": "@Override public void removeListener(final IZyNodeRealizerListener<?> listener){\n  m_listeners.removeListener(listener);\n}"}
{"ids": "63584", "raw_code": "protected void assertResultRowCount(int expected,ResultSet rs) throws SQLException {\n  int i=0;\n  while (rs.next()) {\n    i++;\n  }\n  assertEquals(expected,i);\n}"}
{"ids": "36181", "raw_code": "private boolean isModelUseful(ContingencyMatrix cm){\n  for (int row=0; row < cm.getNumberOfPredictions(); row++) {\n    for (int col=0; col < cm.getNumberOfClasses(); col++) {\n      if (Math.abs(cm.getLift(row,col) - 1) > MIN_ADVANTAGE) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "45369", "raw_code": "public void scan(ClassNode cn){\n  List<ThreatResult> threats=new ArrayList<ThreatResult>();\n  for (  ClassHandler classHandler : classHandlers) {\n    ThreatResult result=classHandler.scanClass(cn);\n    if (result != null) {\n      threats.add(result);\n    }\n  }\n  for (  MethodNode mn : cn.methods) {\n    for (    MethodHandler methodHandler : methodHandlers) {\n      ThreatResult result=methodHandler.scanMethod(mn);\n      if (result != null) {\n        threats.add(result);\n      }\n    }\n  }\n  if (threats.size() > 0) {\n    threatsByClass.put(cn.name,threats);\n  }\n}"}
{"ids": "51859", "raw_code": "private void pullEvent(){\n  final int newScrollValue;\n  final int itemDimension;\n  final float initialMotionValue, lastMotionValue;\nswitch (getPullToRefreshScrollDirection()) {\ncase HORIZONTAL:\n    initialMotionValue=mInitialMotionX;\n  lastMotionValue=mLastMotionX;\nbreak;\ncase VERTICAL:\ndefault :\ninitialMotionValue=mInitialMotionY;\nlastMotionValue=mLastMotionY;\nbreak;\n}\nswitch (mCurrentMode) {\ncase PULL_FROM_END:\nnewScrollValue=Math.round(Math.max(initialMotionValue - lastMotionValue,0) / FRICTION);\nitemDimension=getFooterSize();\nbreak;\ncase PULL_FROM_START:\ndefault :\nnewScrollValue=Math.round(Math.min(initialMotionValue - lastMotionValue,0) / FRICTION);\nitemDimension=getHeaderSize();\nbreak;\n}\nsetHeaderScroll(newScrollValue);\nif (newScrollValue != 0 && !isRefreshing()) {\nfloat scale=Math.abs(newScrollValue) / (float)itemDimension;\nswitch (mCurrentMode) {\ncase PULL_FROM_END:\nmFooterLayout.onPull(scale);\nbreak;\ncase PULL_FROM_START:\ndefault :\nmHeaderLayout.onPull(scale);\nbreak;\n}\nif (mState != State.PULL_TO_REFRESH && itemDimension >= Math.abs(newScrollValue)) {\nsetState(State.PULL_TO_REFRESH);\n}\n else if (mState == State.PULL_TO_REFRESH && itemDimension < Math.abs(newScrollValue)) {\nsetState(State.RELEASE_TO_REFRESH);\n}\n}\n}"}
{"ids": "64795", "raw_code": "public void reset(){\n  mChannelNumber=0;\n  mActiveCalls.clear();\n  mESNs.clear();\n  mNeighborIDs.clear();\n  mReceiveFrequencies.clear();\n  mSiteIDs.clear();\n  mTalkgroups.clear();\n  mTransmitFrequencies.clear();\n  mUniqueIDs.clear();\n  resetState();\n}"}
{"ids": "84642", "raw_code": "public static String newickNoLengths(Tree tree){\n  StringBuffer buffer=new StringBuffer();\n  newick(tree,tree.getRoot(),true,BranchLengthType.NO_BRANCH_LENGTHS,null,null,null,null,buffer);\n  buffer.append(\";\");\n  return buffer.toString();\n}"}
{"ids": "21115", "raw_code": "@POST @Path(\"/key\") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) public String rotateIPsecKey(){\n  ipsecMgr.verifyIPsecOpAllowable();\n  String version=ipsecMgr.rotateKey();\n  auditMgr.recordAuditLog(null,null,IPSEC_SERVICE_TYPE,OperationTypeEnum.UPDATE_SYSTEM_PROPERTY,System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,null,\"config_version=\" + version);\n  return version;\n}"}
{"ids": "83477", "raw_code": "public int append(char chunk[]) throws GuacamoleException {\n  return append(chunk,0,chunk.length);\n}"}
{"ids": "48412", "raw_code": "public byte[] reset(byte[] data){\n  byte[] bytes=null;\n  if ((data[1] & 0xFF) < 128) {\n    bytes=new byte[data[1] + 2];\n    System.arraycopy(data,0,bytes,0,data[1] + 2);\n  }\n else {\n    if ((data[1] & 0xFF) > 128) {\n      int len=data[1] & (byte)0x7F;\n      int result=0;\n      for (int i=0; i < len; i++) {\n        result|=(data[i + 2] & 0xFF) << (8 * (len - i - 1));\n      }\n      bytes=new byte[result + len + 2];\n      System.arraycopy(data,0,bytes,0,result + len + 2);\n    }\n  }\n  return bytes;\n}"}
{"ids": "57014", "raw_code": "public VectorClock(){\n  this(new ArrayList<ClockEntry>(0),System.currentTimeMillis());\n}"}
{"ids": "42999", "raw_code": "public Analyzer add(String name,NondominatedPopulation result){\n  List<NondominatedPopulation> list=data.get(name);\n  if (list == null) {\n    list=new ArrayList<NondominatedPopulation>();\n    data.put(name,list);\n  }\n  list.add(result);\n  return this;\n}"}
{"ids": "72463", "raw_code": "public static void assertEquals(String msg,double[] expected,double[] observed,double tolerance){\n  StringBuilder out=new StringBuilder(msg);\n  if (expected.length != observed.length) {\n    out.append(\"\\n Arrays not same length. \\n\");\n    out.append(\"expected has length \");\n    out.append(expected.length);\n    out.append(\" observed length = \");\n    out.append(observed.length);\n    Assert.fail(out.toString());\n  }\n  boolean failure=false;\n  for (int i=0; i < expected.length; i++) {\n    if (!Precision.equalsIncludingNaN(expected[i],observed[i],tolerance)) {\n      failure=true;\n      out.append(\"\\n Elements at index \");\n      out.append(i);\n      out.append(\" differ. \");\n      out.append(\" expected = \");\n      out.append(expected[i]);\n      out.append(\" observed = \");\n      out.append(observed[i]);\n    }\n  }\n  if (failure) {\n    Assert.fail(out.toString());\n  }\n}"}
{"ids": "84870", "raw_code": "public void initializeAtomsForFinite(List<Datum> data,String filename,Random random){\n  beta=new double[K];\n  dof=new double[K];\n  omega=new ArrayList<>(K);\n  if (filename != null) {\n    try {\n      loc=BatchMixtureModel.initializeClustersFromFile(filename,K);\n      if (loc.size() < K) {\n        loc=BatchMixtureModel.gonzalezInitializeMixtureCenters(loc,data,K,random);\n      }\n    }\n catch (    FileNotFoundException e) {\n      e.printStackTrace();\n      loc=BatchMixtureModel.gonzalezInitializeMixtureCenters(data,K,random);\n    }\n  }\n else {\n    loc=BatchMixtureModel.gonzalezInitializeMixtureCenters(data,K,random);\n  }\n  log.debug(\"initialized cluster centers as: {}\",loc);\n  for (int k=0; k < this.K; k++) {\n    beta[k]=baseBeta;\n    dof[k]=baseNu;\n    omega.add(baseOmega);\n  }\n}"}
{"ids": "40647", "raw_code": "@Override public void onInit(List<? extends IndexCommit> commits) throws IOException {\n  if (commits.isEmpty()) {\n    return;\n  }\n  log.info(\"SolrDeletionPolicy.onInit: commits: {}\",new CommitsLoggingInfo(commits));\n  log.debug(\"SolrDeletionPolicy.onInit: commits: {}\",new CommitsLoggingDebug(commits));\n  updateCommits(commits);\n}"}
{"ids": "50246", "raw_code": "public boolean isLoading(){\n  return state.equals(LOADING);\n}"}
{"ids": "3418", "raw_code": "@Override public final void sample(){\nsynchronized (_lock) {\n    long count=_count.get();\n    long lastCount=_lastAvgCount;\n    _lastAvgCount=count;\n    long sum=_sum.get();\n    double lastSum=_lastAvgSum;\n    _lastAvgSum=sum;\n    if (count == lastCount)     _value=0;\n else     _value=_scale * (sum - lastSum) / (double)(count - lastCount);\n  }\n}"}
{"ids": "46021", "raw_code": "public boolean login() throws LoginException {\n  try {\n    loadPasswordFile();\n  }\n catch (  IOException ioe) {\n    LoginException le=new LoginException(\"Error: unable to load the password file: \" + passwordFileDisplayName);\n    throw EnvHelp.initCause(le,ioe);\n  }\n  if (userCredentials == null) {\n    throw new LoginException(\"Error: unable to locate the users' credentials.\");\n  }\n  if (logger.debugOn()) {\n    logger.debug(\"login\",\"Using password file: \" + passwordFileDisplayName);\n  }\n  if (tryFirstPass) {\n    try {\n      attemptAuthentication(true);\n      succeeded=true;\n      if (logger.debugOn()) {\n        logger.debug(\"login\",\"Authentication using cached password has succeeded\");\n      }\n      return true;\n    }\n catch (    LoginException le) {\n      cleanState();\n      logger.debug(\"login\",\"Authentication using cached password has failed\");\n    }\n  }\n else   if (useFirstPass) {\n    try {\n      attemptAuthentication(true);\n      succeeded=true;\n      if (logger.debugOn()) {\n        logger.debug(\"login\",\"Authentication using cached password has succeeded\");\n      }\n      return true;\n    }\n catch (    LoginException le) {\n      cleanState();\n      logger.debug(\"login\",\"Authentication using cached password has failed\");\n      throw le;\n    }\n  }\n  if (logger.debugOn()) {\n    logger.debug(\"login\",\"Acquiring password\");\n  }\n  try {\n    attemptAuthentication(false);\n    succeeded=true;\n    if (logger.debugOn()) {\n      logger.debug(\"login\",\"Authentication has succeeded\");\n    }\n    return true;\n  }\n catch (  LoginException le) {\n    cleanState();\n    logger.debug(\"login\",\"Authentication has failed\");\n    throw le;\n  }\n}"}
{"ids": "40895", "raw_code": "public Builder updateExtension(Extension extension){\n  extensions.add(extension);\n  return this;\n}"}
{"ids": "12667", "raw_code": "public void processUtterance(Utterance utterance) throws ProcessException {\n  if (utterance.getRelation(Relation.SEGMENT) == null) {\n    throw new IllegalStateException(\"DiphoneUnitSelector: Segment relation does not exist\");\n  }\n  utterance.setObject(SampleInfo.UTT_NAME,diphoneDatabase.getSampleInfo());\n  createUnitRelation(utterance);\n}"}
{"ids": "50360", "raw_code": "public static int copy(InputStream in,OutputStream out) throws IOException {\n  Assert.notNull(in,\"No InputStream specified\");\n  Assert.notNull(out,\"No OutputStream specified\");\n  try {\n    return StreamUtils.copy(in,out);\n  }\n  finally {\n    try {\n      in.close();\n    }\n catch (    IOException ex) {\n    }\n    try {\n      out.close();\n    }\n catch (    IOException ex) {\n    }\n  }\n}"}
{"ids": "67607", "raw_code": "private String convertToAttributeName(String localName){\n  return localName.replace('_',' ');\n}"}
{"ids": "35590", "raw_code": "public ExpandedStatementBuilder reference(String property,Object value){\n  checkCanChange();\n  extraInfo.add(new ReferenceInfo(property,value));\n  return this;\n}"}
{"ids": "70870", "raw_code": "@TargetApi(Build.VERSION_CODES.HONEYCOMB) protected void swipeView(View child,float deltaX,float deltaY){\n  if (isFixedView(child)) {\n    deltaX=deltaX / 4;\n  }\n  float deltaXAbs=Math.abs(deltaX);\n  float fractionCovered=deltaXAbs / (float)child.getWidth();\n  child.setTranslationX(deltaX);\n  child.setAlpha(1.f - fractionCovered);\n  if (deltaX > 0)   child.setRotationY(-15.f * fractionCovered);\n else   child.setRotationY(15.f * fractionCovered);\n}"}
{"ids": "57026", "raw_code": "private void verifyIsRoot(){\n  if (hierarchyElements.size() != 0) {\n    throw new IllegalStateException(\"This is not the root. Can \" + \"only call addCounter() on the root node. Current node: \" + hierarchy);\n  }\n}"}
{"ids": "77739", "raw_code": "@Override public int size(){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    return count;\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "48126", "raw_code": "private void verifyWithSeparateSigningKey(X509Certificate cert,PublicKey prevKey,boolean signFlag,Set<X509Certificate> stackedCerts) throws CertPathValidatorException {\n  String msg=\"revocation status\";\n  if (debug != null) {\n    debug.println(\"RevocationChecker.verifyWithSeparateSigningKey()\" + \" ---checking \" + msg + \"...\");\n  }\n  if ((stackedCerts != null) && stackedCerts.contains(cert)) {\n    if (debug != null) {\n      debug.println(\"RevocationChecker.verifyWithSeparateSigningKey()\" + \" circular dependency\");\n    }\n    throw new CertPathValidatorException(\"Could not determine revocation status\",null,null,-1,BasicReason.UNDETERMINED_REVOCATION_STATUS);\n  }\n  if (!signFlag) {\n    buildToNewKey(cert,null,stackedCerts);\n  }\n else {\n    buildToNewKey(cert,prevKey,stackedCerts);\n  }\n}"}
{"ids": "68140", "raw_code": "public boolean isRunning(){\n  return this.running;\n}"}
{"ids": "58076", "raw_code": "private boolean mapPatternElemPos(int nesting,boolean isStart,boolean isAttrName){\n  if (0 == nesting) {\n    if (m_patternMapSize >= m_patternMap.length) {\n      int patternMap[]=m_patternMap;\n      int len=m_patternMap.length;\n      m_patternMap=new int[m_patternMapSize + 100];\n      System.arraycopy(patternMap,0,m_patternMap,0,len);\n    }\n    if (!isStart) {\n      m_patternMap[m_patternMapSize - 1]-=TARGETEXTRA;\n    }\n    m_patternMap[m_patternMapSize]=(m_compiler.getTokenQueueSize() - (isAttrName ? 1 : 0)) + TARGETEXTRA;\n    m_patternMapSize++;\n    isStart=false;\n  }\n  return isStart;\n}"}
{"ids": "55185", "raw_code": "public boolean addOperationAtFirst(Operation operation){\n  if (isRunning) {\n    if (operationHandlerThreadHandler == null)     return false;\n    return operationHandlerThreadHandler.postAtFrontOfQueue(new AndroidOperation(this,operation));\n  }\n else {\n    return operationQueue.add(new AndroidOperation(this,operation,AndroidOperation.Type.ATFIRST,null,0));\n  }\n}"}
{"ids": "6578", "raw_code": "public static String toUnitbytes(long bytes){\n  if (bytes < 0) {\n    return \"? \" + GENERAL_UNIT_KILOBYTES;\n  }\n  long unitValue;\n  String unitName;\n  if (bytes < 0xA00000) {\n    unitValue=0x400;\n    unitName=GENERAL_UNIT_KILOBYTES;\n  }\n else   if (bytes < 0x280000000L) {\n    unitValue=0x100000;\n    unitName=GENERAL_UNIT_MEGABYTES;\n  }\n else   if (bytes < 0xA0000000000L) {\n    unitValue=0x40000000;\n    unitName=GENERAL_UNIT_GIGABYTES;\n  }\n else {\n    unitValue=0x10000000000L;\n    unitName=GENERAL_UNIT_TERABYTES;\n  }\n  NumberFormat numberFormat;\n  if ((double)bytes * 100 / unitValue < 99995)   numberFormat=NUMBER_FORMAT1;\n else   numberFormat=NUMBER_FORMAT0;\n  try {\n    return numberFormat.format((double)bytes / unitValue) + \" \" + unitName;\n  }\n catch (  ArithmeticException ae) {\n    return \"0 \" + unitName;\n  }\n}"}
{"ids": "38219", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tSpecifies list of columns to base outlier/extreme value detection\\n\" + \"\\ton. If an instance is considered in at least one of those\\n\" + \"\\tattributes an outlier/extreme value, it is tagged accordingly.\\n\"+ \" 'first' and 'last' are valid indexes.\\n\"+ \"\\t(default none)\",\"R\",1,\"-R <col1,col2-col4,...>\"));\n  result.addElement(new Option(\"\\tThe factor for outlier detection.\\n\" + \"\\t(default: 3)\",\"O\",1,\"-O <num>\"));\n  result.addElement(new Option(\"\\tThe factor for extreme values detection.\\n\" + \"\\t(default: 2*Outlier Factor)\",\"E\",1,\"-E <num>\"));\n  result.addElement(new Option(\"\\tTags extreme values also as outliers.\\n\" + \"\\t(default: off)\",\"E-as-O\",0,\"-E-as-O\"));\n  result.addElement(new Option(\"\\tGenerates Outlier/ExtremeValue pair for each numeric attribute in\\n\" + \"\\tthe range, not just a single indicator pair for all the attributes.\\n\" + \"\\t(default: off)\",\"P\",0,\"-P\"));\n  result.addElement(new Option(\"\\tGenerates an additional attribute 'Offset' per Outlier/ExtremeValue\\n\" + \"\\tpair that contains the multiplier that the value is off the median.\\n\" + \"\\t   value = median + 'multiplier' * IQR\\n\"+ \"Note: implicitely sets '-P'.\"+ \"\\t(default: off)\",\"M\",0,\"-M\"));\n  result.addAll(Collections.list(super.listOptions()));\n  return result.elements();\n}"}
{"ids": "63486", "raw_code": "public static String changePassword(Connection conn,String userName,String password) throws Exception {\n  PreparedStatement prep=conn.prepareStatement(\"UPDATE USERS SET PASSWORD=? WHERE NAME=?\");\n  prep.setString(1,password);\n  prep.setString(2,userName);\n  prep.executeUpdate();\n  return password;\n}"}
{"ids": "31107", "raw_code": "public Object remove(Object key){\n  processQueue();\n  return map.remove(Key.create(key,null));\n}"}
{"ids": "46403", "raw_code": "protected Rectangle computePopupBounds(int px,int py,int pw,int ph){\n  Toolkit toolkit=Toolkit.getDefaultToolkit();\n  Rectangle screenBounds;\n  GraphicsConfiguration gc=comboBox.getGraphicsConfiguration();\n  Point p=new Point();\n  SwingUtilities.convertPointFromScreen(p,comboBox);\n  if (gc != null) {\n    Insets screenInsets=toolkit.getScreenInsets(gc);\n    screenBounds=gc.getBounds();\n    screenBounds.width-=(screenInsets.left + screenInsets.right);\n    screenBounds.height-=(screenInsets.top + screenInsets.bottom);\n    screenBounds.x+=(p.x + screenInsets.left);\n    screenBounds.y+=(p.y + screenInsets.top);\n  }\n else {\n    screenBounds=new Rectangle(p,toolkit.getScreenSize());\n  }\n  Rectangle rect=new Rectangle(px,py,pw,ph);\n  if (py + ph > screenBounds.y + screenBounds.height && ph < screenBounds.height) {\n    rect.y=-rect.height;\n  }\n  return rect;\n}"}
{"ids": "75903", "raw_code": "public static Intent buildBackgroundShortcutIntent(File script,Parcelable iconResource){\n  Intent intent=new Intent();\n  intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,buildStartInBackgroundIntent(script));\n  intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,script.getName());\n  intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,iconResource);\n  return intent;\n}"}
{"ids": "35260", "raw_code": "public static boolean isShown(final Actor actor){\n  return actor != null && actor.getStage() != null;\n}"}
{"ids": "86722", "raw_code": "public static void addListener(final DiagnosticListener listener){\n  if (listener != null) {\n    LISTENERS.add(listener);\n  }\n}"}
{"ids": "72966", "raw_code": "public void shuffleTrainingSet(){\n  utils.shuffleList(TrainingFiles);\n}"}
{"ids": "49145", "raw_code": "public NTLMAuthentication(boolean isProxy,URL url,PasswordAuthentication pw){\n  super(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,AuthScheme.NTLM,url,\"\");\n  init(pw);\n}"}
{"ids": "87012", "raw_code": "public MessageChannel createMessageChannel(SIPRequest request,MessageProcessor mp,Hop nextHop) throws IOException {\n  Host targetHost=new Host();\n  targetHost.setHostname(nextHop.getHost());\n  HostPort targetHostPort=new HostPort();\n  targetHostPort.setHost(targetHost);\n  targetHostPort.setPort(nextHop.getPort());\n  MessageChannel returnChannel=mp.createMessageChannel(targetHostPort);\n  return returnChannel;\n}"}
{"ids": "86940", "raw_code": "public static byte[] generateMac(byte[] byteCipherText,SecretKey integrityKey) throws NoSuchAlgorithmException, InvalidKeyException {\n  Mac sha256_HMAC=Mac.getInstance(HMAC_ALGORITHM);\n  sha256_HMAC.init(integrityKey);\n  return sha256_HMAC.doFinal(byteCipherText);\n}"}
{"ids": "26615", "raw_code": "public void populateEditText(String query){\n  String text=query.trim();\n  setSearchString(text,true);\n  dispatchStateChange(SearchViewState.SEARCH);\n}"}
{"ids": "62335", "raw_code": "public static byte[] concat(byte[] b1,byte[] b2){\n  byte[] out=new byte[b1.length + b2.length];\n  System.arraycopy(b1,0,out,0,b1.length);\n  System.arraycopy(b2,0,out,b1.length,b2.length);\n  return out;\n}"}
{"ids": "20582", "raw_code": "private void clipViewOnTheRight(Rect curViewBound,float curViewWidth,int right){\n  curViewBound.right=(int)(right - mClipPadding);\n  curViewBound.left=(int)(curViewBound.right - curViewWidth);\n}"}
{"ids": "73498", "raw_code": "public static void putFloat(String property,float val){\n  SIMBRAIN_PREFERENCES.putFloat(property,val);\n}"}
{"ids": "85329", "raw_code": "public int hashCode(){\n  return Arrays.hashCode(this.uid);\n}"}
{"ids": "57508", "raw_code": "private void advanceRunState(int targetState){\n  for (; ; ) {\n    int c=ctl.get();\n    if (runStateAtLeast(c,targetState) || ctl.compareAndSet(c,ctlOf(targetState,workerCountOf(c))))     break;\n  }\n}"}
{"ids": "53228", "raw_code": "public static final double[] copy(final double[] v){\n  return Arrays.copyOf(v,v.length);\n}"}
{"ids": "49707", "raw_code": "public void addAction(String action){\n  Object[] args=new String[1];\n  SimpleDateFormat sdf=new SimpleDateFormat(context.getString(R.string.dateFormat));\n  args[0]=sdf.format(new Date());\n  String timestamp=context.getString(R.string.timestamp,args);\n  history.add(action + timestamp);\n  notifyListeners(new PropertyChangeEvent(this,ActivityConstants.historyProperty,null,null));\n}"}
{"ids": "42251", "raw_code": "public CharSequence subSequence(int start,int end){\n  return substring(start,end);\n}"}
{"ids": "14814", "raw_code": "private CreationTemplate toCreationTemplate(AttrSet t){\n  Attr nameAttr=t.getAttribute(TEMPLATE_NAME);\n  String name=null;\n  if (nameAttr != null) {\n    name=nameAttr.getValue();\n  }\n  Attr namingAttr=t.getAttribute(TEMPLATE_NAMINGATTRIBUTE);\n  String namingAttribute=null;\n  if (namingAttr != null) {\n    namingAttribute=namingAttr.getValue();\n  }\n  Attr classAttr=t.getAttribute(TEMPLATE_JAVACLASS);\n  String[] classNames=null;\n  if (classAttr != null) {\n    classNames=classAttr.getStringValues();\n  }\n  AttrSet required=decodeAttr(t.getAttribute(TEMPLATE_REQUIRED),\"=\");\n  AttrSet optional=decodeAttr(t.getAttribute(TEMPLATE_OPTIONAL),\"=\");\n  AttrSet validated=decodeAttr(t.getAttribute(TEMPLATE_VALIDATED),\"=\");\n  CreationTemplate template=new CreationTemplate();\n  ArrayList classes=new ArrayList();\n  try {\n    if (classNames != null) {\n      for (int i=0; i < classNames.length; i++) {\n        Class cls=Class.forName(classNames[i]);\n        classes.add(cls);\n      }\n    }\n    template=new CreationTemplate(name,required,optional,classes);\n  }\n catch (  ClassNotFoundException e) {\n    template=new CreationTemplate(name,required,optional);\n  }\n  if (validated != null) {\n    template.setValidation(validated);\n  }\n  if (namingAttribute != null) {\n    template.setNamingAttribute(namingAttribute);\n  }\n  return template;\n}"}
{"ids": "30243", "raw_code": "public void placeItem(ItemStack stack,BlockPos pos,World world,boolean centreItem){\n  double offset=(centreItem) ? 0.5D : 0.0D;\n  EntityItem entityitem=new EntityItem(world,(double)pos.getX() + offset,(double)pos.getY() + offset,(double)pos.getZ() + offset,stack);\n  entityitem.motionX=0;\n  entityitem.motionY=0;\n  entityitem.motionZ=0;\n  entityitem.setDefaultPickupDelay();\n  world.spawnEntityInWorld(entityitem);\n}"}
{"ids": "35453", "raw_code": "private E unlinkFirst(){\n  Node<E> f=first;\n  if (f == null)   return null;\n  Node<E> n=f.next;\n  E item=f.item;\n  f.item=null;\n  f.next=f;\n  first=n;\n  if (n == null)   last=null;\n else   n.prev=null;\n  --count;\n  notFull.signal();\n  return item;\n}"}
{"ids": "72051", "raw_code": "private <M extends ConfigurationClient,P>ManagedObject<M> createNewManagedObject(ManagedObjectDefinition<M,?> d,ManagedObjectPath<M,?> p,PropertyDefinition<P> namingPropertyDefinition,String name,Collection<PropertyException> exceptions){\n  PropertySet childProperties=new PropertySet();\n  for (  PropertyDefinition<?> pd : d.getAllPropertyDefinitions()) {\n    try {\n      createProperty(childProperties,p,pd);\n    }\n catch (    PropertyException e) {\n      if (exceptions != null) {\n        exceptions.add(e);\n      }\n    }\n  }\n  if (namingPropertyDefinition != null) {\n    P value=namingPropertyDefinition.decodeValue(name);\n    childProperties.setPropertyValues(namingPropertyDefinition,Collections.singleton(value));\n  }\n  return newInstance(d,p,childProperties,false,namingPropertyDefinition);\n}"}
{"ids": "68841", "raw_code": "private byte[] decrypt(byte[] d,int start,int end,int key,int skip){\n  if (end - start - skip < 0) {\n    skip=0;\n  }\n  byte[] o=new byte[end - start - skip];\n  int r=key;\n  int ipos;\n  int c1=52845;\n  int c2=22719;\n  for (ipos=start; ipos < end; ipos++) {\n    int c=d[ipos] & 0xff;\n    int p=(c ^ (r >> 8)) & 0xff;\n    r=((c + r) * c1 + c2) & 0xffff;\n    if (ipos - start - skip >= 0) {\n      o[ipos - start - skip]=(byte)p;\n    }\n  }\n  return o;\n}"}
{"ids": "57237", "raw_code": "public static void appendInstruction(OFFlowMod.Builder fmb,OFInstruction inst){\n  List<OFInstruction> newIl=new ArrayList<OFInstruction>();\n  List<OFInstruction> oldIl=fmb.getInstructions();\n  if (oldIl != null) {\n    newIl.addAll(fmb.getInstructions());\n  }\n  for (  OFInstruction i : newIl) {\n    if (i.getType() == inst.getType()) {\n      newIl.remove(i);\n    }\n  }\n  newIl.add(inst);\n  fmb.setInstructions(newIl);\n}"}
{"ids": "53095", "raw_code": "@Override public final void insertAll(DBIDs ids){\n  if (ids.isEmpty() || (ids.size() == 1)) {\n    return;\n  }\n  if (canBulkLoad()) {\n    List<RdKNNEntry> leafs=new ArrayList<>(ids.size());\n    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {\n      leafs.add(createNewLeafEntry(DBIDUtil.deref(iter)));\n    }\n    bulkLoad(leafs);\n  }\n else {\n    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {\n      insert(iter);\n    }\n  }\n  doExtraIntegrityChecks();\n}"}
{"ids": "57849", "raw_code": "public static byte[] asUnsignedByteArray(BigInteger value){\n  byte[] bytes=value.toByteArray();\n  if (bytes[0] == 0) {\n    byte[] tmp=new byte[bytes.length - 1];\n    System.arraycopy(bytes,1,tmp,0,tmp.length);\n    return tmp;\n  }\n  return bytes;\n}"}
{"ids": "58187", "raw_code": "public static boolean isSupplemental(int c){\n  return (c >= 0x10000 && c <= 0x10FFFF);\n}"}
{"ids": "72303", "raw_code": "private final String _decodeShortUnicodeName(int len) throws IOException {\n  int outPtr=0;\n  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();\n  int inPtr=_inputPtr;\n  _inputPtr+=len;\n  final int[] codes=SmileConstants.sUtf8UnitLengths;\n  final byte[] inBuf=_inputBuffer;\n  for (int end=inPtr + len; inPtr < end; ) {\n    int i=inBuf[inPtr++] & 0xFF;\n    int code=codes[i];\n    if (code != 0) {\nswitch (code) {\ncase 1:\n        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);\n      break;\ncase 2:\n    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);\n  break;\ncase 3:\ni=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);\ni-=0x10000;\noutBuf[outPtr++]=(char)(0xD800 | (i >> 10));\ni=0xDC00 | (i & 0x3FF);\nbreak;\ndefault :\n_reportError(\"Invalid byte \" + Integer.toHexString(i) + \" in short Unicode text block\");\n}\n}\noutBuf[outPtr++]=(char)i;\n}\nreturn _textBuffer.setCurrentAndReturn(outPtr);\n}"}
{"ids": "15167", "raw_code": "public void saveDeviceProfile(@Nonnull String user,@Nonnull String realm,@Nonnull PushDeviceSettings deviceSettings) throws AuthLoginException {\n  Reject.ifNull(user,realm,deviceSettings);\n  try {\n    devicesDao.saveDeviceProfiles(user,realm,jsonUtils.toJsonValues(Collections.singletonList(deviceSettings)));\n  }\n catch (  IOException e) {\n    debug.error(\"Pusher.createDeviceProfile(): Unable to save device profile for user {} in realm {}\",user,realm,e);\n    throw new AuthLoginException(e);\n  }\n}"}
{"ids": "319", "raw_code": "public RankingImageListProvider inDays(int days){\n  mTime=Integer.toString(days) + \"d\";\n  return this;\n}"}
{"ids": "28766", "raw_code": "public void removeUpdateListener(AnimatorUpdateListener listener){\n  if (mUpdateListeners == null) {\n    return;\n  }\n  mUpdateListeners.remove(listener);\n  if (mUpdateListeners.size() == 0) {\n    mUpdateListeners=null;\n  }\n}"}
{"ids": "68567", "raw_code": "public final void dbUnavailable(final boolean alarmUp,final String exceptionMsg,final String dbInfo){\n  if (alarmUp == FallbackAlarmsInterface.ACTIVATED) {\n    ArrayList recipients=new ArrayList();\n    MailDetailsBean mailDetails=new MailDetailsBean();\n    mailDetails.setSender(\"mruizgar@cern.ch\");\n    recipients.add(\"mruizgar@cern.ch\");\n    mailDetails.setToRecipients(recipients);\n    mailDetails.setSubject(\"DB Unavailable\");\n    mailDetails.setMessage(\"The DB connection to \" + dbInfo + \"could not be established due to: \"+ exceptionMsg);\n    mailDetails.setServer(\"cernmx.cern.ch\");\n    SMTPMailSender mailSender=new SMTPMailSender();\n    try {\n      mailSender.sendMail(mailDetails);\n    }\n catch (    MailSenderException e) {\n      LOG.debug(e.getMessage());\n    }\n  }\n}"}
{"ids": "63951", "raw_code": "public static String tidyString(String string){\n  if (string.matches(\".*?\\\\.$\")) {\n    return string;\n  }\n else {\n    return string.replaceAll(\"(\\\\p{Punct}+\\\\z)|(\\\\A\\\\p{Punct}+)\",\"\");\n  }\n}"}
{"ids": "75170", "raw_code": "public Select<T> sortDesc(String... columns){\n  for (  String column : columns) {\n    mSortingOrderList.add(column + \" DESC\");\n  }\n  return this;\n}"}
{"ids": "47394", "raw_code": "public LogRecord(Level level,String msg){\n  level.getClass();\n  this.level=level;\n  message=msg;\n  sequenceNumber=globalSequenceNumber.getAndIncrement();\n  threadID=defaultThreadID();\n  millis=System.currentTimeMillis();\n  needToInferCaller=true;\n}"}
{"ids": "68715", "raw_code": "public Matrix correlation(){\n  final Matrix corr=covariance();\n  final Array v=corr.diagonal();\n  for (int i=0; i < dimension_; i++) {\n    for (int j=0; j < dimension_; j++) {\n      if (i == j) {\n        if (v.$[v._(i)] == 0.0) {\n          corr.$[corr._(i,j)]=1.0;\n        }\n else {\n          corr.$[corr._(i,j)]*=1.0 / Math.sqrt(v.$[v._(i)] * v.$[v._(j)]);\n        }\n      }\n else {\n        if (v.$[v._(i)] == 0.0 && v.$[v._(j)] == 0) {\n          corr.$[corr._(i,j)]=1.0;\n        }\n else         if (v.$[v._(i)] == 0.0 || v.$[v._(j)] == 0.0) {\n          corr.$[corr._(i,j)]=0.0;\n        }\n else {\n          corr.$[corr._(i,j)]*=1.0 / Math.sqrt(v.$[v._(i)] * v.$[v._(j)]);\n        }\n      }\n    }\n  }\n  return corr;\n}"}
{"ids": "76494", "raw_code": "@NotNull public static SaveDirectory from(File file) throws FileNotFoundException {\n  File currentFile=file;\n  SaveDirectory result=null;\n  if (currentFile == null) {\n  }\n else {\n    result=createValidSaveDirectory(currentFile);\n    currentFile=currentFile.getParentFile();\n    if (result != null) {\n      return result;\n    }\n else     if (currentFile == null) {\n    }\n else {\n      result=createValidSaveDirectory(currentFile);\n      currentFile=currentFile.getParentFile();\n      if (result != null) {\n        return result;\n      }\n else {\n      }\n    }\n  }\n  throw new FileNotFoundException(\"unable to load save directory: \" + file);\n}"}
{"ids": "65324", "raw_code": "public Serializer serializer(){\n  return serializer;\n}"}
{"ids": "62874", "raw_code": "private void addIncludedResources(JsonApiDocument jsonApiDocument,PersistentResource rec,List<String> requestedRelationPaths){\n  requestedRelationPaths.forEach(null);\n}"}
{"ids": "41745", "raw_code": "protected VideoDTO extractOneVideoFromCursor(Cursor cursor){\n  if (videoIdCol == -1) {\n    videoIdCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media._ID);\n    videoTitleCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.TITLE);\n    videoDisplayNameCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DISPLAY_NAME);\n    videoDescriptionCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DESCRIPTION);\n    videoBucketIdCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.BUCKET_ID);\n    videoBucketDisplayNameCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.BUCKET_DISPLAY_NAME);\n    videoDataCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATA);\n    videoMimeCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.MIME_TYPE);\n    videoResolutionCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.RESOLUTION);\n    videoSizeCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.SIZE);\n    videoDateAddedCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATE_ADDED);\n    videoDateTakenCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATE_TAKEN);\n    videoDateModifyCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATE_MODIFIED);\n    videoLatitudeCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.LATITUDE);\n    videoLongitudeCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.LONGITUDE);\n    videoAlbumCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.ALBUM);\n    videoArtistCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.ARTIST);\n  }\n  VideoDTO video=new VideoDTO();\n  video.setId(cursor.getLong(videoIdCol));\n  video.setTitle(cursor.getString(videoTitleCol));\n  video.setDisplayName(cursor.getString(videoDisplayNameCol));\n  video.setDescription(cursor.getString(videoDescriptionCol));\n  video.setBucketId(cursor.getString(videoBucketIdCol));\n  video.setBucketDisplayName(cursor.getString(videoBucketDisplayNameCol));\n  video.setUri(cursor.getString(videoDataCol));\n  video.setMimeType(cursor.getString(videoMimeCol));\n  video.setSize(cursor.getLong(videoSizeCol));\n  video.setAddedDate(new Date(cursor.getLong(videoDateAddedCol)));\n  video.setTakenDate(new Date(cursor.getLong(videoDateTakenCol)));\n  video.setModifyDate(new Date(cursor.getLong(videoDateModifyCol)));\n  video.setLatitude(cursor.getDouble(videoLatitudeCol));\n  video.setLongitude(cursor.getDouble(videoLongitudeCol));\n  video.setAlbum(cursor.getString(videoAlbumCol));\n  video.setArtist(cursor.getString(videoArtistCol));\n  String resolution=cursor.getString(videoResolutionCol);\n  if (resolution != null) {\n    try {\n      String[] res=resolution.split(\"x\");\n      int width=Integer.parseInt(res[0]);\n      int height=Integer.parseInt(res[1]);\n      video.setWidth(width);\n      video.setHeight(height);\n    }\n catch (    Exception e) {\n      Log.w(TAG,String.format(\"Failed to parse resolution of video(id=%d, title=%s, displayName=%s)\",video.getId(),video.getTitle(),video.getDisplayName()),e);\n    }\n  }\n  return video;\n}"}
{"ids": "33368", "raw_code": "private void shiftSegments(int fromIdx,int offset){\n  for (  Element element : elements) {\n    if (element.end.left > fromIdx) {\n      shiftSegment(element.start,fromIdx,offset);\n      shiftSegment(element.end,fromIdx,offset);\n      if (element.text != null) {\n        for (        Segment textSegment : element.text) {\n          shiftSegment(textSegment,fromIdx,offset);\n        }\n      }\n    }\n  }\n}"}
{"ids": "67283", "raw_code": "public RefUpdate.Result modifyFile(ChangeEdit edit,String file,RawInput content) throws AuthException, InvalidChangeOperationException, IOException {\n  return modify(TreeOperation.CHANGE_ENTRY,edit,file,null,content);\n}"}
{"ids": "81496", "raw_code": "private void startDocument(final boolean multiObjectMode) throws SAXException {\n  if (depth == 0) {\n    contentHandler.startDocument();\n    if (multiObjectMode) {\n      depth++;\n    }\n  }\n}"}
{"ids": "67729", "raw_code": "public void flush() throws IOException {\n  writer.flush();\n}"}
{"ids": "32401", "raw_code": "private static ArrayList<GridCollisionJobContextWrapper> slice(Collection<CollisionJobContext> src,int num){\n  ArrayList<GridCollisionJobContextWrapper> slice=new ArrayList<>();\n  Iterator<CollisionJobContext> iter=src.iterator();\n  for (int i=0; i < num && iter.hasNext(); i++)   slice.add(new GridCollisionJobContextWrapper(iter.next(),i));\n  return slice;\n}"}
{"ids": "20536", "raw_code": "protected void calculateFormatter(float min,float max){\n  float reference=0f;\n  if (mData == null || mData.getXValCount() < 2) {\n    reference=Math.max(Math.abs(min),Math.abs(max));\n  }\n else {\n    reference=Math.abs(max - min);\n  }\n  int digits=Utils.getDecimals(reference);\n  mDefaultFormatter=new DefaultValueFormatter(digits);\n}"}
{"ids": "83811", "raw_code": "public Request add(Request request){\n  request.setRequestQueue(this);\nsynchronized (mCurrentRequests) {\n    mCurrentRequests.add(request);\n  }\n  request.setSequence(getSequenceNumber());\n  request.addMarker(\"add-to-queue\");\n  if (!request.shouldCache()) {\n    mNetworkQueue.add(request);\n    return request;\n  }\nsynchronized (mWaitingRequests) {\n    String cacheKey=request.getCacheKey();\n    if (mWaitingRequests.containsKey(cacheKey)) {\n      Queue<Request> stagedRequests=mWaitingRequests.get(cacheKey);\n      if (stagedRequests == null) {\n        stagedRequests=new LinkedList<Request>();\n      }\n      stagedRequests.add(request);\n      mWaitingRequests.put(cacheKey,stagedRequests);\n      if (VolleyLog.DEBUG) {\n        VolleyLog.v(\"Request for cacheKey=%s is in flight, putting on hold.\",cacheKey);\n      }\n    }\n else {\n      mWaitingRequests.put(cacheKey,null);\n      mCacheQueue.add(request);\n    }\n    return request;\n  }\n}"}
{"ids": "6388", "raw_code": "public String lookup(String data){\n  Iterator<String> it=map.getPrefixedBy(data);\n  if (!it.hasNext())   return null;\n  return it.next();\n}"}
{"ids": "51944", "raw_code": "public static Object loadModule(String homedir,ScriptEngine engine,String name) throws FileNotFoundException, ScriptException {\n  HashMap<String,File> mp=(HashMap<String,File>)engine.get(\"__MODULES\");\n  Object ret=load(mp.get(name),engine);\n  return ret;\n}"}
{"ids": "61905", "raw_code": "@Override public void modifyVariableId(String nodeId,String newId){\n  Map<Assignment,UtilityEstimate> utilities2=new HashMap<Assignment,UtilityEstimate>();\n  for (  Assignment a : table.keySet()) {\n    Assignment b=new Assignment();\n    for (    String var : a.getVariables()) {\n      String newVar=(var.equals(nodeId)) ? newId : var;\n      b.addPair(newVar,a.getValue(var));\n    }\n    utilities2.put(b,table.get(a));\n  }\n  table=utilities2;\n}"}
{"ids": "53288", "raw_code": "public static long[] truncateI(long[] v,int len){\n  final int zap=(v.length * Long.SIZE) - len;\n  final int zapWords=(zap >>> LONG_LOG2_SIZE);\n  final int zapbits=zap & LONG_LOG2_MASK;\n  Arrays.fill(v,v.length - zapWords,v.length,0);\n  if (zapbits > 0) {\n    v[v.length - zapWords - 1]&=(LONG_ALL_BITS >>> zapbits);\n  }\n  return v;\n}"}
{"ids": "60359", "raw_code": "private void positionAtCentralDirectory() throws IOException {\n  boolean found=false;\n  long off=archive.length() - MIN_EOCD_SIZE;\n  if (off >= 0) {\n    archive.seek(off);\n    byte[] sig=JBZipOutputStream.EOCD_SIG;\n    int curr=archive.read();\n    while (curr != -1) {\n      if (curr == sig[POS_0]) {\n        curr=archive.read();\n        if (curr == sig[POS_1]) {\n          curr=archive.read();\n          if (curr == sig[POS_2]) {\n            curr=archive.read();\n            if (curr == sig[POS_3]) {\n              found=true;\n              break;\n            }\n          }\n        }\n      }\n      archive.seek(--off);\n      curr=archive.read();\n    }\n  }\n  if (!found) {\n    throw new ZipException(\"archive is not a ZIP archive\");\n  }\n  archive.seek(off + CFD_LOCATOR_OFFSET);\n  byte[] cfdOffset=new byte[WORD];\n  archive.readFully(cfdOffset);\n  currentcfdfoffset=ZipLong.getValue(cfdOffset);\n  archive.seek(currentcfdfoffset);\n}"}
{"ids": "71105", "raw_code": "public List query(double x1,double x2){\n  return super.query(new Interval(Math.min(x1,x2),Math.max(x1,x2)));\n}"}
{"ids": "3046", "raw_code": "public static boolean isNull(Object object){\n  return object != null && object == NULL_CACHE.get(object.getClass());\n}"}
{"ids": "85280", "raw_code": "public static void createDestinationFolder(String path){\n  File fpath=new File(path);\n  fpath.mkdirs();\n}"}
{"ids": "4694", "raw_code": "public void removeAll(){\n  log.debug(\"Idle connections count = \" + connectionToAdded.size());\n  connectionToAdded.clear();\n}"}
{"ids": "51519", "raw_code": "public float readFloat() throws IOException {\n  return primitiveTypes.readFloat();\n}"}
{"ids": "35870", "raw_code": "public synchronized static int insertLuaState(LuaState L){\n  int i;\n  for (i=0; i < states.size(); i++) {\n    LuaState state=(LuaState)states.get(i);\n    if (state != null) {\n      if (state.getCPtrPeer() == L.getCPtrPeer())       return i;\n    }\n  }\n  i=getNextStateIndex();\n  states.set(i,L);\n  return i;\n}"}
{"ids": "84304", "raw_code": "public PhoneNumberValidator(@NonNull final CharSequence errorMessage){\n  super(errorMessage,REGEX);\n}"}
{"ids": "17400", "raw_code": "@Override public int hashCode(){\n  return fullyQualifiedName.hashCode();\n}"}
{"ids": "42632", "raw_code": "public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){\n  for (int i=0; i < count; i++) {\n    destbytes[count + i]=srcString.getBytes()[i];\n  }\n}"}
{"ids": "20688", "raw_code": "public Point2D convertWindowToReference(Point2D apt){\n  if (scrollBackReferenceRect == null)   return null;\n else   return new Point2D.Double((apt.getX() - scrollBackReferenceRect.getX()) / scrollBackReferenceRect.getWidth(),(apt.getY() - scrollBackReferenceRect.getY()) / scrollBackReferenceRect.getHeight());\n}"}
{"ids": "67926", "raw_code": "public void clear(){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    for (    TenantQueue q : qs.values()) {\n      q.clear();\n    }\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "22659", "raw_code": "public void printUsage(PrintWriter pw,int width,String cmdLineSyntax){\n  int argPos=cmdLineSyntax.indexOf(' ') + 1;\n  printWrapped(pw,width,defaultSyntaxPrefix.length() + argPos,defaultSyntaxPrefix + cmdLineSyntax);\n}"}
{"ids": "87097", "raw_code": "public boolean hasNameValue(String name){\n  return nameValueMap.containsKey(name.toLowerCase());\n}"}
{"ids": "36396", "raw_code": "private void addNewLine(){\n  if (addLineDialog == null) {\n    addLineDialog=new AddParallelLineDialog();\n  }\n  addLineDialog.setChartEngine(engine);\n  addLineDialog.showDialog();\n  if (horizontalLineRadiobutton.isSelected()) {\n    setHorizontalLineSelected();\n  }\n else   if (verticalLineRadiobutton.isSelected()) {\n    setVerticalLineSelected();\n  }\n}"}
{"ids": "56668", "raw_code": "public final static <T>CompletableFuture<List<T>> streamToCompletableFuture(final Stream<T> stream){\n  return CompletableFuture.completedFuture(stream.collect(CyclopsCollectors.toListX()));\n}"}
{"ids": "68142", "raw_code": "@SuppressWarnings(\"unchecked\") public static boolean isGzipSupported(final HttpServletRequest request){\n  if (request != null) {\n    final Enumeration<String> headerNames=request.getHeaderNames();\n    if (headerNames != null) {\n      while (headerNames.hasMoreElements()) {\n        final String headerName=headerNames.nextElement();\n        final Matcher m=PATTERN_ACCEPT_ENCODING.matcher(headerName);\n        if (m.find()) {\n          final String headerValue=request.getHeader(headerName);\n          final Matcher mValue=PATTERN_GZIP.matcher(headerValue);\n          return mValue.find();\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "83521", "raw_code": "private boolean isLanguageAllowed(String languageKey){\n  if (allowedLanguages == null)   return true;\n  return allowedLanguages.contains(languageKey);\n}"}
{"ids": "30273", "raw_code": "public List<Boundary> populateWard(final Long zoneId){\n  List<Boundary> wardList=new LinkedList<Boundary>();\n  try {\n    wardList=boundaryService.getChildBoundariesByBoundaryId(zoneId);\n  }\n catch (  final Exception e) {\n    LOGGER.error(\"Error while loading warda - wards.\" + e.getMessage());\n    throw new ApplicationRuntimeException(\"Unable to load ward information\",e);\n  }\n  return wardList;\n}"}
{"ids": "18272", "raw_code": "static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {\n  try {\n    Class providerClass=findProviderClass(className,cl,doFallback);\n    Object instance=providerClass.newInstance();\n    debugPrintln(\"created new instance of \" + providerClass + \" using ClassLoader: \"+ cl);\n    return instance;\n  }\n catch (  ClassNotFoundException x) {\n    throw new ConfigurationError(\"Provider \" + className + \" not found\",x);\n  }\ncatch (  Exception x) {\n    throw new ConfigurationError(\"Provider \" + className + \" could not be instantiated: \"+ x,x);\n  }\n}"}
{"ids": "15433", "raw_code": "public void handleRequest(List arguments){\n  try {\n    InstallLogger migrateLog=new InstallLogger(STR_MIGRATE);\n    MultipleMigrateDriver driver=new MultipleMigrateDriver();\n    if (arguments.isEmpty()) {\n      Debug.log(\"MigrateHandler: invoked with 0 arguments.\");\n      driver.migrate(migrateLog);\n    }\n else     if (arguments.size() == 2) {\n      Debug.log(\"MigrateHandler: invoked with 1 or more arguments.\");\n      driver.migrate(migrateLog);\n    }\n  }\n catch (  InstallAbortException ia) {\n    Debug.log(\"MigrateHandler: User Requested Abort \",ia);\n    Console.printlnRawText(ia.getMessage());\n  }\ncatch (  InstallException ex) {\n    Debug.log(\"MigrateHandler: Failed to process migrate request \",ex);\n    printConsoleMessage(LOC_HR_ERR_MIGRATE,new Object[]{ex.getMessage()});\n  }\n}"}
{"ids": "74645", "raw_code": "public static SynchronizerStatus makeRunningStatus(){\n  return new SynchronizerStatus(Status.RUNNING,new Date(),null);\n}"}
{"ids": "85375", "raw_code": "public static Iterable<File> applyCwd(File cwd,Iterable<File> files){\n  if (files != null) {\n    List<File> result=new ArrayList<File>();\n    for (    File f : files) {\n      result.add(applyCwd(cwd,f));\n    }\n    return result;\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "31718", "raw_code": "private void close(boolean force){\n  if (closeGuard.compareAndSet(false,true))   hadoop.close(force);\n}"}
{"ids": "47948", "raw_code": "MutableBigInteger divideKnuth(MutableBigInteger b,MutableBigInteger quotient,boolean needRemainder){\n  if (b.intLen == 0)   throw new ArithmeticException(\"BigInteger divide by zero\");\n  if (intLen == 0) {\n    quotient.intLen=quotient.offset=0;\n    return needRemainder ? new MutableBigInteger() : null;\n  }\n  int cmp=compare(b);\n  if (cmp < 0) {\n    quotient.intLen=quotient.offset=0;\n    return needRemainder ? new MutableBigInteger(this) : null;\n  }\n  if (cmp == 0) {\n    quotient.value[0]=quotient.intLen=1;\n    quotient.offset=0;\n    return needRemainder ? new MutableBigInteger() : null;\n  }\n  quotient.clear();\n  if (b.intLen == 1) {\n    int r=divideOneWord(b.value[b.offset],quotient);\n    if (needRemainder) {\n      if (r == 0)       return new MutableBigInteger();\n      return new MutableBigInteger(r);\n    }\n else {\n      return null;\n    }\n  }\n  if (intLen >= KNUTH_POW2_THRESH_LEN) {\n    int trailingZeroBits=Math.min(getLowestSetBit(),b.getLowestSetBit());\n    if (trailingZeroBits >= KNUTH_POW2_THRESH_ZEROS * 32) {\n      MutableBigInteger a=new MutableBigInteger(this);\n      b=new MutableBigInteger(b);\n      a.rightShift(trailingZeroBits);\n      b.rightShift(trailingZeroBits);\n      MutableBigInteger r=a.divideKnuth(b,quotient);\n      r.leftShift(trailingZeroBits);\n      return r;\n    }\n  }\n  return divideMagnitude(b,quotient,needRemainder);\n}"}
{"ids": "41281", "raw_code": "public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){\n  Random random=new Random();\n  Cache.Entry entry=new Cache.Entry();\n  if (data != null) {\n    entry.data=data;\n  }\n else {\n    entry.data=new byte[random.nextInt(1024)];\n  }\n  entry.etag=String.valueOf(random.nextLong());\n  entry.lastModified=random.nextLong();\n  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;\n  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;\n  return entry;\n}"}
{"ids": "5452", "raw_code": "@SuppressWarnings(\"unchecked\") public void insert(int id,Comparable<E> priority){\n  int i;\n  i=++_n;\n  ElementH p=new ElementH();\n  while (i > 1) {\n    int pIdx=i / 2;\n    ElementH eIdx=(ElementH)_elements[pIdx];\n    p.id=eIdx.id;\n    p.priority=eIdx.priority;\n    if (priority.compareTo((E)p.priority) > 0) {\n      break;\n    }\n    ElementH ei=(ElementH)_elements[i];\n    ei.id=p.id;\n    ei.priority=p.priority;\n    _pos[p.id]=i;\n    i=pIdx;\n  }\n  ElementH ei=(ElementH)_elements[i];\n  ei.id=id;\n  ei.priority=priority;\n  _pos[id]=i;\n}"}
{"ids": "43068", "raw_code": "ExternalProblem(Socket socket) throws IOException {\n  this(socket.getInputStream(),socket.getOutputStream());\n}"}
{"ids": "82565", "raw_code": "private static void stopGC(){\n  gcShouldLoop=false;\nsynchronized (LOCK) {\n    LOCK.notify();\n  }\n}"}
{"ids": "18283", "raw_code": "public final void insertElementAt(int value,int at){\n  if ((m_firstFree + 1) >= m_mapSize) {\n    m_mapSize+=m_blocksize;\n    int newMap[]=new int[m_mapSize];\n    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);\n    m_map=newMap;\n  }\n  if (at <= (m_firstFree - 1)) {\n    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);\n  }\n  m_map[at]=value;\n  m_firstFree++;\n}"}
{"ids": "6798", "raw_code": "public static @Nullable RequestBody createGzip(final MediaType mediaType,final String body){\n  ByteArrayOutputStream gzipByteArrayOutputStream=new ByteArrayOutputStream();\n  try {\n    OutputStream gzipOutputStream=new GZIPOutputStream(gzipByteArrayOutputStream);\n    gzipOutputStream.write(body.getBytes());\n    gzipOutputStream.close();\n  }\n catch (  IOException e) {\n    return null;\n  }\n  return RequestBody.create(mediaType,gzipByteArrayOutputStream.toByteArray());\n}"}
{"ids": "64779", "raw_code": "private void processTSBK(TSBKMessage tsbk){\n  broadcast(new DecoderStateEvent(this,Event.CONTINUATION,State.CONTROL));\n  if (tsbk.getVendor() == Vendor.STANDARD) {\nswitch (tsbk.getOpcode()) {\ncase ADJACENT_STATUS_BROADCAST:\n      if (tsbk instanceof AdjacentStatusBroadcast) {\n        IAdjacentSite ias=(IAdjacentSite)tsbk;\n        mNeighborMap.put(ias.getUniqueID(),ias);\n        updateSystem(ias.getSystemID());\n      }\n    break;\ncase ACKNOWLEDGE_RESPONSE:\n  processTSBKResponse(tsbk);\nbreak;\ncase AUTHENTICATION_COMMAND:\nprocessTSBKCommand(tsbk);\nbreak;\ncase CALL_ALERT:\nprocessTSBKPage(tsbk);\nbreak;\ncase DENY_RESPONSE:\nprocessTSBKResponse(tsbk);\nbreak;\ncase EXTENDED_FUNCTION_COMMAND:\nprocessTSBKCommand(tsbk);\nbreak;\ncase GROUP_AFFILIATION_QUERY:\nprocessTSBKQuery(tsbk);\nbreak;\ncase GROUP_AFFILIATION_RESPONSE:\nprocessTSBKResponse(tsbk);\nbreak;\ncase GROUP_DATA_CHANNEL_ANNOUNCEMENT:\ncase GROUP_DATA_CHANNEL_ANNOUNCEMENT_EXPLICIT:\nprocessTSBKDataChannelAnnouncement(tsbk);\nbreak;\ncase GROUP_DATA_CHANNEL_GRANT:\ncase GROUP_VOICE_CHANNEL_GRANT:\ncase GROUP_VOICE_CHANNEL_GRANT_UPDATE:\ncase GROUP_VOICE_CHANNEL_GRANT_UPDATE_EXPLICIT:\ncase INDIVIDUAL_DATA_CHANNEL_GRANT:\ncase TELEPHONE_INTERCONNECT_VOICE_CHANNEL_GRANT:\ncase TELEPHONE_INTERCONNECT_VOICE_CHANNEL_GRANT_UPDATE:\ncase UNIT_TO_UNIT_VOICE_CHANNEL_GRANT:\ncase UNIT_TO_UNIT_VOICE_CHANNEL_GRANT_UPDATE:\nprocessTSBKChannelGrant(tsbk);\nbreak;\ncase IDENTIFIER_UPDATE_NON_VUHF:\ncase IDENTIFIER_UPDATE_VHF_UHF_BANDS:\nIdentifierUpdate iu=(IdentifierUpdate)tsbk;\nif (!mBands.containsKey(iu.getIdentifier())) {\nmBands.put(iu.getIdentifier(),iu);\n}\nbreak;\ncase LOCATION_REGISTRATION_RESPONSE:\ncase UNIT_DEREGISTRATION_ACKNOWLEDGE:\nprocessTSBKResponse(tsbk);\nbreak;\ncase MESSAGE_UPDATE:\nprocessTSBKMessage(tsbk);\nbreak;\ncase NETWORK_STATUS_BROADCAST:\nmNetworkStatus=(module.decode.p25.message.tsbk.osp.control.NetworkStatusBroadcast)tsbk;\nbreak;\ncase PROTECTION_PARAMETER_UPDATE:\nprocessTSBKResponse(tsbk);\nbreak;\ncase QUEUED_RESPONSE:\nprocessTSBKResponse(tsbk);\nbreak;\ncase RADIO_UNIT_MONITOR_COMMAND:\nprocessTSBKCommand(tsbk);\nbreak;\ncase RFSS_STATUS_BROADCAST:\nprocessTSBKRFSSStatus((RFSSStatusBroadcast)tsbk);\nbreak;\ncase ROAMING_ADDRESS_COMMAND:\nprocessTSBKCommand(tsbk);\nbreak;\ncase SECONDARY_CONTROL_CHANNEL_BROADCAST:\nmodule.decode.p25.message.tsbk.osp.control.SecondaryControlChannelBroadcast sccb=(module.decode.p25.message.tsbk.osp.control.SecondaryControlChannelBroadcast)tsbk;\nif (sccb.getDownlinkFrequency1() > 0) {\nmSecondaryControlChannels.add(sccb);\n}\nbreak;\ncase SNDCP_DATA_CHANNEL_ANNOUNCEMENT_EXPLICIT:\nmSNDCPDataChannel=(SNDCPDataChannelAnnouncementExplicit)tsbk;\nbreak;\ncase SNDCP_DATA_CHANNEL_GRANT:\nprocessTSBKChannelGrant(tsbk);\nbreak;\ncase STATUS_QUERY:\nprocessTSBKQuery(tsbk);\nbreak;\ncase STATUS_UPDATE:\nprocessTSBKResponse(tsbk);\nbreak;\ncase TELEPHONE_INTERCONNECT_ANSWER_REQUEST:\ncase UNIT_TO_UNIT_ANSWER_REQUEST:\nprocessTSBKPage(tsbk);\nbreak;\ncase UNIT_REGISTRATION_COMMAND:\nprocessTSBKCommand(tsbk);\nbreak;\ncase UNIT_REGISTRATION_RESPONSE:\nprocessTSBKResponse(tsbk);\nbreak;\ndefault :\nbreak;\n}\n}\n else if (tsbk.getVendor() == Vendor.MOTOROLA) {\nprocessMotorolaTSBK((MotorolaTSBKMessage)tsbk);\n}\n}"}
{"ids": "60063", "raw_code": "public XintroActivityBuilder removeFragment(int fragmentPos){\n  introFragmentModelList.remove(fragmentPos);\n  return this;\n}"}
{"ids": "49524", "raw_code": "public TreeViewerBuilder(Composite parent,int style){\n  mappings=Collections.emptyMap();\n  checkable=(style & SWT.CHECK) == SWT.CHECK;\n  if (checkable) {\n    viewer=new CheckboxTreeViewer(parent,style);\n  }\n else {\n    viewer=new TreeViewer(parent,style);\n  }\n  ColumnViewerToolTipSupport.enableFor(viewer,ToolTip.NO_RECREATE);\n}"}
{"ids": "16159", "raw_code": "@Override public void write(byte[] buffer,int offset,int count) throws IOException {\nsynchronized (intThread) {\n    int avail=(wroteIndex - dataEndIndex + data.length) % data.length;\n    if (avail == 0)     avail=data.length;\n    if (avail < count) {\n      throw new IOException(\"Buffer overrun, have \" + avail + \" bytes available and want to write \"+ count);\n    }\n    if (count > data.length - dataEndIndex) {\n      int firstPart=data.length - dataEndIndex;\n      int secondPart=count - firstPart;\n      System.arraycopy(buffer,offset,data,dataEndIndex,firstPart);\n      System.arraycopy(buffer,offset + firstPart,data,0,secondPart);\n      dataEndIndex=secondPart;\n    }\n else {\n      System.arraycopy(buffer,offset,data,dataEndIndex,count);\n      dataEndIndex+=count;\n    }\n    intThread.notify();\n  }\n}"}
{"ids": "79748", "raw_code": "public void pause(){\n  pauseLock.lock();\n  try {\n    paused=true;\n  }\n  finally {\n    pauseLock.unlock();\n  }\n}"}
{"ids": "67410", "raw_code": "public void addToConsolitatedMsg(final String message){\n  if (consolidatedMessage != null && consolidatedMessage.length() > 0) {\n    consolidatedMessage=consolidatedMessage + \"<br>\";\n  }\n  consolidatedMessage=consolidatedMessage + message;\n}"}
{"ids": "25250", "raw_code": "private static byte[] readClass(final InputStream is,boolean close) throws IOException {\n  if (is == null) {\n    throw new IOException(\"Class not found\");\n  }\n  try {\n    byte[] b=new byte[is.available()];\n    int len=0;\n    while (true) {\n      int n=is.read(b,len,b.length - len);\n      if (n == -1) {\n        if (len < b.length) {\n          byte[] c=new byte[len];\n          System.arraycopy(b,0,c,0,len);\n          b=c;\n        }\n        return b;\n      }\n      len+=n;\n      if (len == b.length) {\n        int last=is.read();\n        if (last < 0) {\n          return b;\n        }\n        byte[] c=new byte[b.length + 1000];\n        System.arraycopy(b,0,c,0,len);\n        c[len++]=(byte)last;\n        b=c;\n      }\n    }\n  }\n  finally {\n    if (close) {\n      is.close();\n    }\n  }\n}"}
{"ids": "54553", "raw_code": "public void sort(final Comparator<? super T> comparator){\nsynchronized (mLock) {\n    Collections.sort(mList,comparator);\n  }\n  notifyDataSetChanged();\n}"}
{"ids": "25025", "raw_code": "public String cropKeepFinalCharacter(String string,char finalChar){\n  String cropped=crop(string);\n  if ((null == string) || string.equals(cropped)) {\n    return string;\n  }\n  if (cropped.length() == 0) {\n    return cropped;\n  }\n  return cropped + finalChar;\n}"}
{"ids": "79997", "raw_code": "public static boolean isDerivedAdjective(final String word){\n  if (word.length() > 4) {\n    if (word.endsWith(\"al\") || word.endsWith(\"ic\"))     return true;\n    if (word.endsWith(\"ed\"))     return true;\n  }\n  return false;\n}"}
{"ids": "3186", "raw_code": "String renameFile(String inputFilename){\n  for (  Pattern searchExp : regexMappings.keySet()) {\n    Matcher matcher=searchExp.matcher(inputFilename);\n    if (matcher.find()) {\n      String renamed=matcher.replaceFirst(regexMappings.get(searchExp));\n      return FILE_SEP_CHAR_MATCHER.trimLeadingFrom(renamed);\n    }\n  }\n  throw new MoeProblem(\"Cannot find a rename mapping that covers file %s. \" + \"Every file needs an applicable renaming rule.\",inputFilename);\n}"}
{"ids": "68273", "raw_code": "private static int validateAdbServerPort(@NonNull String adbServerPort) throws IllegalArgumentException {\n  try {\n    int port=Integer.decode(adbServerPort);\n    if (port <= 0 || port >= 65535) {\n      throw new IllegalArgumentException(\"Should be > 0 and < 65535\");\n    }\n    return port;\n  }\n catch (  NumberFormatException e) {\n    throw new IllegalArgumentException(\"Not a valid port number\");\n  }\n}"}
{"ids": "66328", "raw_code": "public static String formatElapsed(Timestamp start){\n  if (start == null)   return \"NoStartTime\";\n  long startTime=start.getTime();\n  long endTime=System.currentTimeMillis();\n  return formatElapsed(endTime - startTime);\n}"}
{"ids": "77977", "raw_code": "@Override public void stop(){\n  for (  Thread thread : threads) {\n    thread.interrupt();\n  }\n  try {\n    for (    Thread thread : threads) {\n      thread.join();\n    }\n  }\n catch (  InterruptedException e) {\n  }\n}"}
{"ids": "22255", "raw_code": "private boolean verifyPublishedDualInetAddress(String nodeId){\n  DualInetAddress dualAddress=null;\n  Configuration config=queryConfiguration(Constants.NODE_DUALINETADDR_CONFIG,nodeId);\n  if (config != null) {\n    dualAddress=parseInetAddressConfig(config);\n  }\n  if ((dualAddress != null) && dualAddress.equals(inetAddressLookupMap.getDualInetAddress())) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "71978", "raw_code": "public boolean responseIsString(String oid){\n  return stringResponses.contains(oid);\n}"}
{"ids": "35963", "raw_code": "private static int type(final ClassWriter cw,final String desc){\n  String t;\n  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;\nswitch (desc.charAt(index)) {\ncase 'V':\n    return 0;\ncase 'Z':\ncase 'C':\ncase 'B':\ncase 'S':\ncase 'I':\n  return INTEGER;\ncase 'F':\nreturn FLOAT;\ncase 'J':\nreturn LONG;\ncase 'D':\nreturn DOUBLE;\ncase 'L':\nt=desc.substring(index + 1,desc.length() - 1);\nreturn OBJECT | cw.addType(t);\ndefault :\nint data;\nint dims=index + 1;\nwhile (desc.charAt(dims) == '[') {\n++dims;\n}\nswitch (desc.charAt(dims)) {\ncase 'Z':\ndata=BOOLEAN;\nbreak;\ncase 'C':\ndata=CHAR;\nbreak;\ncase 'B':\ndata=BYTE;\nbreak;\ncase 'S':\ndata=SHORT;\nbreak;\ncase 'I':\ndata=INTEGER;\nbreak;\ncase 'F':\ndata=FLOAT;\nbreak;\ncase 'J':\ndata=LONG;\nbreak;\ncase 'D':\ndata=DOUBLE;\nbreak;\ndefault :\nt=desc.substring(dims + 1,desc.length() - 1);\ndata=OBJECT | cw.addType(t);\n}\nreturn (dims - index) << 28 | data;\n}\n}"}
{"ids": "59897", "raw_code": "public void logFine(String message){\n  logger.fine(logPrefix + message);\n}"}
{"ids": "41241", "raw_code": "public static Optional<String> createInputDialog(final Window owner,final String title,final String label){\n  final TextInputDialog dialog=new TextInputDialog();\n  dialog.setTitle(title);\n  dialog.setHeaderText(null);\n  dialog.setContentText(label);\n  dialog.initOwner(owner);\n  return dialog.showAndWait();\n}"}
{"ids": "41259", "raw_code": "public static void closeOutputStream(OutputStream stream,String tag){\n  if (stream != null) {\n    try {\n      stream.close();\n    }\n catch (    IOException e) {\n      Log.e(tag,\"Exception occured when closing ByteArrayOutputStream.\" + e);\n    }\n  }\n}"}
{"ids": "71266", "raw_code": "private static String encode(final String text) throws UnsupportedEncodingException {\n  return URLEncoder.encode(text,\"UTF-8\");\n}"}
{"ids": "9330", "raw_code": "public static String convertToRGB(int color){\n  String red=Integer.toHexString(Color.red(color));\n  String green=Integer.toHexString(Color.green(color));\n  String blue=Integer.toHexString(Color.blue(color));\n  if (red.length() == 1) {\n    red=\"0\" + red;\n  }\n  if (green.length() == 1) {\n    green=\"0\" + green;\n  }\n  if (blue.length() == 1) {\n    blue=\"0\" + blue;\n  }\n  return \"#\" + red + green+ blue;\n}"}
{"ids": "49401", "raw_code": "private static final void appendEncodedByte(StringBuffer buffer,byte value,byte[] state){\n  if (state[0] != 0) {\n    char c=(char)((state[1] << 8) | (((int)value) & 0xFF));\n    buffer.append(c);\n    state[0]=0;\n  }\n else {\n    state[0]=1;\n    state[1]=value;\n  }\n}"}
{"ids": "76861", "raw_code": "public SidedPlane(double pX,double pY,double pZ,Vector v,double D){\n  super(v,D);\n  sigNum=Math.signum(evaluate(pX,pY,pZ));\n  if (sigNum == 0.0)   throw new IllegalArgumentException(\"Cannot determine sidedness because check point is on plane.\");\n}"}
{"ids": "78556", "raw_code": "public String buildUnionQuery(String[] subQueries,String sortOrder,String limit){\n  StringBuilder query=new StringBuilder(128);\n  int subQueryCount=subQueries.length;\n  String unionOperator=mDistinct ? \" UNION \" : \" UNION ALL \";\n  for (int i=0; i < subQueryCount; i++) {\n    if (i > 0) {\n      query.append(unionOperator);\n    }\n    query.append(subQueries[i]);\n  }\n  appendClause(query,\" ORDER BY \",sortOrder);\n  appendClause(query,\" LIMIT \",limit);\n  return query.toString();\n}"}
{"ids": "83628", "raw_code": "void registerCallback(BluetoothCallback callback){\nsynchronized (mCallbacks) {\n    mCallbacks.add(callback);\n  }\n}"}
{"ids": "51791", "raw_code": "private void validateTableMetaDataNoRow(String tableNamePattern,String[] types) throws Exception {\n  try (ResultSet tables=dbmd.getTables(null,null,tableNamePattern,types)){\n    assertFalse(String.format(\"Expected empty result set for requesting %s with types %s\",tableNamePattern,Arrays.toString(types)),tables.next());\n  }\n }"}
{"ids": "84428", "raw_code": "void checkClassBounds(DiagnosticPosition pos,Type type){\n  checkClassBounds(pos,new HashMap<TypeSymbol,Type>(),type);\n}"}
{"ids": "16084", "raw_code": "private static String parseToken(String pattern,int[] indexRef){\n  StringBuffer buf=new StringBuffer();\n  int i=indexRef[0];\n  int length=pattern.length();\n  char c=pattern.charAt(i);\n  if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n    buf.append(c);\n    while (i + 1 < length) {\n      char peek=pattern.charAt(i + 1);\n      if (peek == c) {\n        buf.append(c);\n        i++;\n      }\n else {\n        break;\n      }\n    }\n  }\n else {\n    buf.append('\\'');\n    boolean inLiteral=false;\n    for (; i < length; i++) {\n      c=pattern.charAt(i);\n      if (c == '\\'') {\n        if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n          i++;\n          buf.append(c);\n        }\n else {\n          inLiteral=!inLiteral;\n        }\n      }\n else       if (!inLiteral && (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {\n        i--;\n        break;\n      }\n else {\n        buf.append(c);\n      }\n    }\n  }\n  indexRef[0]=i;\n  return buf.toString();\n}"}
{"ids": "27423", "raw_code": "public int alloc(final RWStore store,final int size,final IAllocationContext context){\n  try {\n    if (size <= 0)     throw new IllegalArgumentException(\"Allocate requires positive size, got: \" + size);\n    if (size > m_size)     throw new IllegalArgumentException(\"FixedAllocator with slots of \" + m_size + \" bytes requested allocation for \"+ size+ \" bytes\");\n    if (m_freeBits == 0) {\n      throw new IllegalStateException(\"Request to allocate from \" + m_size + \"byte slot FixedAllocator with zero bits free - should not be on the Free List\");\n    }\n    int addr=-1;\n    if (m_size <= m_store.cSmallSlot) {\n      return allocFromIndex(size);\n    }\n    final Iterator<AllocBlock> iter=m_allocBlocks.iterator();\n    int count=-1;\n    while (addr == -1 && iter.hasNext()) {\n      count++;\n      final AllocBlock block=iter.next();\n      checkBlock(block);\n      addr=block.alloc(m_size);\n    }\n    if (addr != -1) {\n      addr+=3;\n      if (--m_freeBits == 0) {\n        if (s_islogTrace)         log.trace(\"Remove from free list\");\n        removeFromFreeList();\n        if (m_freeList.size() > 0) {\n          if (s_islogDebug) {\n            final FixedAllocator nxt=(FixedAllocator)m_freeList.get(0);\n            log.debug(\"Freelist head: \" + nxt.getSummaryStats());\n          }\n        }\n      }\n      addr+=(count * 32 * m_bitSize);\n      final int value=-((m_index << RWStore.OFFSET_BITS) + addr);\n      if (m_statsBucket != null) {\n        m_statsBucket.allocate(size);\n      }\n      return value;\n    }\n else {\n      StringBuilder sb=new StringBuilder();\n      sb.append(\"FixedAllocator returning null address, with freeBits: \" + m_freeBits + \"\\n\");\n      for (      AllocBlock ab : m_allocBlocks) {\n        sb.append(ab.show() + \"\\n\");\n      }\n      log.error(sb);\n      return 0;\n    }\n  }\n  finally {\n    if (s_islogDebug)     checkBits();\n  }\n}"}
{"ids": "34585", "raw_code": "public static NativePage createNativePageForURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){\n  return createNativePageForURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());\n}"}
{"ids": "1674", "raw_code": "@Override public void nodeDown(long eventUID,String nodeID){\n  try {\n    lock.lock();\n    untriedConnectors.putAll(triedConnectors);\n    triedConnectors.clear();\n    if (untriedConnectors.size() > 0) {\n      condition.signal();\n    }\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "31904", "raw_code": "public static synchronized Collection<String> allLocalMACs(){\n  List<String> macs=new ArrayList<>(3);\n  try {\n    Enumeration<NetworkInterface> itfs=NetworkInterface.getNetworkInterfaces();\n    if (itfs != null) {\n      for (      NetworkInterface itf : asIterable(itfs)) {\n        byte[] hwAddr=itf.getHardwareAddress();\n        if (hwAddr != null && hwAddr.length > 0) {\n          String mac=byteArray2HexString(hwAddr);\n          if (!macs.contains(mac))           macs.add(mac);\n        }\n      }\n    }\n  }\n catch (  SocketException ignore) {\n    return Collections.emptyList();\n  }\n  Collections.sort(macs);\n  return macs;\n}"}
{"ids": "47218", "raw_code": "private final void accessCheck(T obj){\n  if (!cclass.isInstance(obj))   throw accessCheckException(obj);\n}"}
{"ids": "46547", "raw_code": "protected void markFirstTime(Element elem){\n  String elemName=elem.getName();\n  if (elemName.equals(\"html\")) {\n    seenHtml=true;\n  }\n else   if (elemName.equals(\"head\")) {\n    seenHead=true;\n  }\n else   if (elemName.equals(\"body\")) {\n    if (buf.length == 1) {\n      char[] newBuf=new char[256];\n      newBuf[0]=buf[0];\n      buf=newBuf;\n    }\n    seenBody=true;\n  }\n}"}
{"ids": "9257", "raw_code": "public static String timeToString(long period){\n  period/=10;\n  final long milsecs=period % 100;\n  period/=100;\n  final long secs=period % 60;\n  period/=60;\n  final long mins=period % 60;\n  period/=60;\n  final long hours=period;\n  return String.format(\"%02d:%02d:%02d.%02d\",hours,mins,secs,milsecs);\n}"}
{"ids": "18424", "raw_code": "private boolean conditionM0(String value,int index){\n  if (charAt(value,index + 1) == 'M') {\n    return true;\n  }\n  return contains(value,index - 1,3,\"UMB\") && ((index + 1) == value.length() - 1 || contains(value,index + 2,2,\"ER\"));\n}"}
{"ids": "52742", "raw_code": "@Reference(authors=\"F. J. Rohlf\",title=\"Methods of comparing classifications\",booktitle=\"Annual Review of Ecology and Systematics\",url=\"http://dx.doi.org/10.1146/annurev.es.05.110174.000533\") public double computeTau(long c,long d,double m,long wd,long bd){\n  double tie=(wd * (wd - 1) + bd * (bd - 1)) >>> 1;\n  return (c - d) / Math.sqrt((m - tie) * m);\n}"}
{"ids": "30761", "raw_code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  serviceID=new ServiceID(in);\n}"}
{"ids": "32159", "raw_code": "private void generateCreateEvents(List<IgfsPath> createdPaths,boolean file){\n  if (evts.isRecordable(EventType.EVT_IGFS_DIR_CREATED)) {\n    for (int i=0; i < createdPaths.size() - 1; i++)     IgfsUtils.sendEvents(igfsCtx.kernalContext(),createdPaths.get(i),EventType.EVT_IGFS_DIR_CREATED);\n  }\n  IgfsPath leafPath=createdPaths.get(createdPaths.size() - 1);\n  if (file) {\n    IgfsUtils.sendEvents(igfsCtx.kernalContext(),leafPath,EventType.EVT_IGFS_FILE_CREATED);\n    IgfsUtils.sendEvents(igfsCtx.kernalContext(),leafPath,EventType.EVT_IGFS_FILE_OPENED_WRITE);\n  }\n else   IgfsUtils.sendEvents(igfsCtx.kernalContext(),leafPath,EventType.EVT_IGFS_DIR_CREATED);\n}"}
{"ids": "65297", "raw_code": "public OptInTemplateClassResolver(Set allowedClasses,List trustedTemplates){\n  this.allowedClasses=allowedClasses != null ? allowedClasses : Collections.EMPTY_SET;\n  if (trustedTemplates != null) {\n    trustedTemplateNames=new HashSet();\n    trustedTemplatePrefixes=new ArrayList();\n    Iterator it=trustedTemplates.iterator();\n    while (it.hasNext()) {\n      String li=(String)it.next();\n      if (li.startsWith(\"/\"))       li=li.substring(1);\n      if (li.endsWith(\"*\")) {\n        trustedTemplatePrefixes.add(li.substring(0,li.length() - 1));\n      }\n else {\n        trustedTemplateNames.add(li);\n      }\n    }\n  }\n else {\n    trustedTemplateNames=Collections.EMPTY_SET;\n    trustedTemplatePrefixes=Collections.EMPTY_LIST;\n  }\n}"}
{"ids": "32243", "raw_code": "protected void asyncOpRelease(){\n  if (asyncOpsSem != null)   asyncOpsSem.release();\n}"}
{"ids": "73697", "raw_code": "public static boolean validSystemNameConfig(String systemName,char type){\n  if (!validSystemNameFormat(systemName,type)) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "62954", "raw_code": "public void removeAll(){\n  if (mRecords.size() >= 0) {\n    mRecords.clear();\n    mCurrentPosition=-1;\n    notifyObservers();\n  }\n}"}
{"ids": "67322", "raw_code": "public synchronized boolean startReindexer(String name,boolean force) throws ReindexerAlreadyRunningException {\n  OnlineReindexer<?,?,?> reindexer=reindexers.get(name);\n  validateReindexerNotRunning(reindexer);\n  if (force || !isCurrentIndexVersionLatest(name,reindexer)) {\n    reindexer.start();\n    return true;\n  }\n  return false;\n}"}
{"ids": "79473", "raw_code": "@Override public void printStackTrace(){\n  super.printStackTrace();\n  if (nested != null)   nested.printStackTrace();\n}"}
{"ids": "5215", "raw_code": "private static void updateLastModified(File destDir,String warFilePath){\n  File warFile=new File(warFilePath);\n  destDir.setLastModified(warFile.lastModified());\n}"}
{"ids": "7174", "raw_code": "public void addChild(BaseAssemblyNode childNode){\n  childNode.parentNode=this;\n  childNodes.add(childNode);\n}"}
{"ids": "38340", "raw_code": "protected void notifyHistoryChangedListeners(){\n  Iterator<HistoryChangedListener> iter;\n  HistoryChangedListener l;\n  iter=m_HistoryChangedListeners.iterator();\n  while (iter.hasNext()) {\n    l=iter.next();\n    l.historyChanged(new HistoryChangedEvent(this,HISTORY_NAME,getHistory()));\n  }\n}"}
{"ids": "44148", "raw_code": "private void signalNotFull(){\n  final ReentrantLock putLock=this.putLock;\n  putLock.lock();\n  try {\n    notFull.signal();\n  }\n  finally {\n    putLock.unlock();\n  }\n}"}
{"ids": "71501", "raw_code": "@RequiresPermission(Manifest.permission.CAMERA) public CameraSource start() throws IOException {\nsynchronized (mCameraLock) {\n    if (mCamera != null) {\n      return this;\n    }\n    mCamera=createCamera();\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n      mDummySurfaceTexture=new SurfaceTexture(DUMMY_TEXTURE_NAME);\n      mCamera.setPreviewTexture(mDummySurfaceTexture);\n    }\n else {\n      mDummySurfaceView=new SurfaceView(mContext);\n      mCamera.setPreviewDisplay(mDummySurfaceView.getHolder());\n    }\n    mCamera.startPreview();\n    mProcessingThread=new Thread(mFrameProcessor);\n    mFrameProcessor.setActive(true);\n    mProcessingThread.start();\n  }\n  return this;\n}"}
{"ids": "4470", "raw_code": "private TextView findTextViewByTagId(final String tagId){\n  for (  final TextView view : mTagViewMap.values()) {\n    final Tag tag=(Tag)view.getTag();\n    if (tagId.equals(tag.id)) {\n      return view;\n    }\n  }\n  return null;\n}"}
{"ids": "1955", "raw_code": "public Space prune(Space prefix) throws ScopeException {\n  Space x=this;\n  ArrayList<Space> stack=new ArrayList<>();\n  while (x != null && !x.equals(prefix)) {\n    stack.add(0,x);\n    x=x.getParent();\n  }\n  if (x == null) {\n    throw new ScopeException(\"cannot prune distinct spaces\");\n  }\n else {\n    Space result=new Space(universe,x.getDomain());\n    for (    Space space : stack) {\n      result=result.S(space.getRelation());\n    }\n    return result;\n  }\n}"}
{"ids": "79946", "raw_code": "default void infof(String format,Object... args){\n  info(String.format(format,args));\n}"}
{"ids": "70895", "raw_code": "public static int darker(int color,float factor){\n  int a=Color.alpha(color);\n  int r=Color.red(color);\n  int g=Color.green(color);\n  int b=Color.blue(color);\n  return Color.argb(a,Math.max((int)(r * factor),0),Math.max((int)(g * factor),0),Math.max((int)(b * factor),0));\n}"}
{"ids": "5914", "raw_code": "public <FV>FV extractRawJavaFieldValue(Object object) throws SQLException {\n  Object val;\n  if (fieldGetMethod == null) {\n    try {\n      val=field.get(object);\n    }\n catch (    Exception e) {\n      throw SqlExceptionUtil.create(\"Could not get field value for \" + this,e);\n    }\n  }\n else {\n    try {\n      val=fieldGetMethod.invoke(object);\n    }\n catch (    Exception e) {\n      throw SqlExceptionUtil.create(\"Could not call \" + fieldGetMethod + \" for \"+ this,e);\n    }\n  }\n  @SuppressWarnings(\"unchecked\") FV converted=(FV)val;\n  return converted;\n}"}
{"ids": "63025", "raw_code": "public static void writeFile(File file,byte[] data){\n  try {\n    RandomAccessFile ra=new RandomAccessFile(file,\"rw\");\n    ra.write(data);\n    ra.setLength(data.length);\n    ra.close();\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error writing to file \" + file,e);\n  }\n}"}
{"ids": "75801", "raw_code": "public static double[] thresholdStringToArray(String top,int L){\n  if (top.startsWith(\"[\")) {\n    return MLUtils.toDoubleArray(top);\n  }\n else {\n    double t[]=new double[L];\n    Arrays.fill(t,Double.parseDouble(top));\n    return t;\n  }\n}"}
{"ids": "37590", "raw_code": "@Override public String[] determineColumnConstraints(ResultProducer rp) throws Exception {\n  return null;\n}"}
{"ids": "848", "raw_code": "public static int eval(String url,String text) throws IOException {\n  String returnValue=null;\n  if (url.startsWith(\"http:\")) {\n    returnValue=doHttp(url,text);\n  }\n else   if (url.startsWith(\"bsh:\")) {\n    returnValue=doBsh(url,text);\n  }\n else   throw new IOException(\"Unrecognized URL type.\" + \"Scheme must be http:// or bsh://\");\n  try {\n    return Integer.parseInt(returnValue);\n  }\n catch (  Exception e) {\n    return 0;\n  }\n}"}
{"ids": "48075", "raw_code": "public DSAPrivateKey(byte[] encoded) throws InvalidKeyException {\n  clearOldKey();\n  decode(encoded);\n}"}
{"ids": "59534", "raw_code": "private void sendBroadcastNewOperation(Target target,RemoteOperation operation){\n  Intent intent=new Intent(ACTION_OPERATION_ADDED);\n  if (target.mAccount != null) {\n    intent.putExtra(EXTRA_ACCOUNT,target.mAccount);\n  }\n else {\n    intent.putExtra(EXTRA_SERVER_URL,target.mServerUrl);\n  }\n  sendStickyBroadcast(intent);\n}"}
{"ids": "56321", "raw_code": "int successful(){\n  return success.get();\n}"}
{"ids": "31013", "raw_code": "public void monitor(String key){\n  Timer t=new Timer(true);\n  t.schedule(new WatchableRegistration(key),10 * 1000,10 * 1000);\n}"}
{"ids": "15161", "raw_code": "protected int checkRiskAttribute(){\n  int retVal=0;\n  if (debug.messageEnabled()) {\n    debug.message(\"{}.checkRiskAttribute\",ADAPTIVE);\n  }\n  if (riskAttributeName != null && riskAttributeValue != null) {\n    Set<String> riskAttributeValues=null;\n    riskAttributeValues=getIdentityAttributeSet(riskAttributeName);\n    if (riskAttributeValues != null) {\n      for (      String riskAttr : riskAttributeValues) {\n        if (riskAttributeValue.equalsIgnoreCase(riskAttr)) {\n          if (debug.messageEnabled()) {\n            debug.message(\"{}.checkRiskAttribute: Found Match\",ADAPTIVE);\n          }\n          retVal=riskAttributeScore;\n          break;\n        }\n      }\n    }\n  }\n  if (!riskAttributeInvert) {\n    retVal=riskAttributeScore - retVal;\n  }\n  return retVal;\n}"}
{"ids": "24398", "raw_code": "public static MethExecutorResult executeInstance(String receiver,String selector,Class[] types,Object[] args){\n  try {\n    Class receiverClass=Class.forName(receiver);\n    Constructor init=receiverClass.getDeclaredConstructor(new Class[0]);\n    init.setAccessible(true);\n    Object target=init.newInstance(new Object[0]);\n    Object res=null;\n    try {\n      Method theMethod=getMethod(receiverClass,selector,types);\n      res=theMethod.invoke(target,args);\n      return new MethExecutorResult(res);\n    }\n catch (    InvocationTargetException invTargEx) {\n      Throwable targEx=invTargEx.getTargetException();\n      if (targEx == null) {\n        return new MethExecutorResult(res);\n      }\n else {\n        return new MethExecutorResult(targEx);\n      }\n    }\n  }\n catch (  VirtualMachineError e) {\n    SystemFailure.initiateFailure(e);\n    throw e;\n  }\ncatch (  Throwable t) {\n    return new MethExecutorResult(t);\n  }\n}"}
{"ids": "30816", "raw_code": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  marshalAttributes(attrs,stream);\n}"}
{"ids": "48182", "raw_code": "@Override synchronized public void write(byte b[],int off,int len) throws IOException {\n  if (b == null) {\n    throw new NullPointerException();\n  }\n else   if (off < 0 || len < 0 || len > b.length - off) {\n    throw new IndexOutOfBoundsException();\n  }\n else   if (len == 0) {\n    return;\n  }\n  c.checkWrite();\n  boolean isFirstRecordOfThePayload=true;\n  try {\n    do {\n      boolean holdRecord=false;\n      int howmuch;\n      if (isFirstRecordOfThePayload && c.needToSplitPayload()) {\n        howmuch=Math.min(0x01,r.availableDataBytes());\n        if ((len != 1) && (howmuch == 1)) {\n          holdRecord=true;\n        }\n      }\n else {\n        howmuch=Math.min(len,r.availableDataBytes());\n      }\n      if (isFirstRecordOfThePayload && howmuch != 0) {\n        isFirstRecordOfThePayload=false;\n      }\n      if (howmuch > 0) {\n        r.write(b,off,howmuch);\n        off+=howmuch;\n        len-=howmuch;\n      }\n      c.writeRecord(r,holdRecord);\n      c.checkWrite();\n    }\n while (len > 0);\n  }\n catch (  Exception e) {\n    c.handleException(e);\n  }\n}"}
{"ids": "77822", "raw_code": "public boolean onInterceptTouchEvent(MotionEvent ev){\n  @SuppressWarnings(\"all\") final boolean debug=false;\n  if (debug) {\n    Log.d(Launcher.TAG,\"DragController.onInterceptTouchEvent \" + ev + \" mDragging=\"+ mDragging);\n  }\n  acquireVelocityTrackerAndAddMovement(ev);\n  final int action=ev.getAction();\n  final int[] dragLayerPos=getClampedDragLayerPos(ev.getX(),ev.getY());\n  final int dragLayerX=dragLayerPos[0];\n  final int dragLayerY=dragLayerPos[1];\nswitch (action) {\ncase MotionEvent.ACTION_MOVE:\n    break;\ncase MotionEvent.ACTION_DOWN:\n  mMotionDownX=dragLayerX;\nmMotionDownY=dragLayerY;\nmLastDropTarget=null;\nbreak;\ncase MotionEvent.ACTION_UP:\nmLastTouchUpTime=System.currentTimeMillis();\nif (mDragging) {\nPointF vec=isFlingingToDelete(mDragObject.dragSource);\nif (!DeleteDropTarget.willAcceptDrop(mDragObject.dragInfo)) {\nvec=null;\n}\nif (vec != null) {\ndropOnFlingToDeleteTarget(dragLayerX,dragLayerY,vec);\n}\n else {\ndrop(dragLayerX,dragLayerY);\n}\n}\nendDrag();\nbreak;\ncase MotionEvent.ACTION_CANCEL:\ncancelDrag();\nbreak;\n}\nreturn mDragging;\n}"}
{"ids": "19883", "raw_code": "private void resetDatabase(TungstenProperties serviceProps,Map<String,String> progress) throws InterruptedException {\n  DataSourceAdministrator admin=null;\n  String serviceName=serviceProps.getString(ReplicatorConf.SERVICE_NAME);\n  try {\n    admin=new DataSourceAdministrator(serviceProps);\n    admin.prepare();\n    progress.put(\"clear data source catalogs\",serviceName);\n    boolean cleared=admin.resetAll();\n    if (cleared) {\n      logger.info(\"Data source catalog information cleared\");\n    }\n else {\n      logger.info(\"Unable to clear data source information: service=\" + serviceName);\n    }\n  }\n catch (  ReplicatorException e) {\n    logger.error(String.format(\"Error while clearing data source information %s: %s\",serviceName,e.getMessage()),e);\n  }\n finally {\n    if (admin != null) {\n      admin.release();\n    }\n  }\n}"}
{"ids": "34348", "raw_code": "public static final void writeValueXml(Object v,String name,XmlSerializer out) throws XmlPullParserException, IOException {\n  String typeStr;\n  if (v == null) {\n    out.startTag(null,\"null\");\n    if (name != null) {\n      out.attribute(null,\"name\",name);\n    }\n    out.endTag(null,\"null\");\n    return;\n  }\n else   if (v instanceof String) {\n    out.startTag(null,\"string\");\n    if (name != null) {\n      out.attribute(null,\"name\",name);\n    }\n    out.text(v.toString());\n    out.endTag(null,\"string\");\n    return;\n  }\n else   if (v instanceof Integer) {\n    typeStr=\"int\";\n  }\n else   if (v instanceof Long) {\n    typeStr=\"long\";\n  }\n else   if (v instanceof Float) {\n    typeStr=\"float\";\n  }\n else   if (v instanceof Double) {\n    typeStr=\"double\";\n  }\n else   if (v instanceof Boolean) {\n    typeStr=\"boolean\";\n  }\n else   if (v instanceof byte[]) {\n    writeByteArrayXml((byte[])v,name,out);\n    return;\n  }\n else   if (v instanceof int[]) {\n    writeIntArrayXml((int[])v,name,out);\n    return;\n  }\n else   if (v instanceof Map) {\n    writeMapXml((Map)v,name,out);\n    return;\n  }\n else   if (v instanceof List) {\n    writeListXml((List)v,name,out);\n    return;\n  }\n else   if (v instanceof CharSequence) {\n    out.startTag(null,\"string\");\n    if (name != null) {\n      out.attribute(null,\"name\",name);\n    }\n    out.text(v.toString());\n    out.endTag(null,\"string\");\n    return;\n  }\n else {\n    throw new RuntimeException(\"writeValueXml: unable to write value \" + v);\n  }\n  out.startTag(null,typeStr);\n  if (name != null) {\n    out.attribute(null,\"name\",name);\n  }\n  out.attribute(null,\"value\",v.toString());\n  out.endTag(null,typeStr);\n}"}
{"ids": "43031", "raw_code": "private void initializeIdealPoint(){\n  idealPoint=new double[problem.getNumberOfObjectives()];\n  Arrays.fill(idealPoint,Double.POSITIVE_INFINITY);\n}"}
{"ids": "42147", "raw_code": "private long startWait(){\n  return System.nanoTime();\n}"}
{"ids": "74718", "raw_code": "public static String[] readFontNames(final FontData fontData){\n  final String[] fontNames=new String[1];\n  fontNames[0]=null;\n  final BufferedReader br=new BufferedReader(new StringReader(new String(fontData.getBytes(0,fontData.length()))));\n  String line=null;\n  while (true) {\n    try {\n      line=br.readLine();\n    }\n catch (    final IOException e) {\n      LogWriter.writeLog(\"Exception: \" + e.getMessage());\n    }\n    if (line == null) {\n      break;\n    }\n    if (line.startsWith(\"/FontName\")) {\n      final int nameStart=line.indexOf('/',9);\n      if (nameStart != -1) {\n        final int nameEnd=line.indexOf(' ',nameStart);\n        if (nameEnd != -1) {\n          final String name=line.substring(nameStart + 1,nameEnd);\n          fontNames[0]=name.toLowerCase();\n          break;\n        }\n      }\n    }\n  }\n  if (br != null) {\n    try {\n      br.close();\n    }\n catch (    final Exception e) {\n      LogWriter.writeLog(\"Exception \" + e + \" closing stream\");\n    }\n  }\n  if (fontData != null) {\n    fontData.close();\n  }\n  return fontNames;\n}"}
{"ids": "67734", "raw_code": "private void writeUnitsOfIndentation(int i) throws IOException {\n  for (; i > 0; i--) {\n    writer.write(INDENTATION_UNIT);\n  }\n}"}
{"ids": "85200", "raw_code": "private PatternParser() throws HyphenationException {\n  token=new StringBuilder();\n  parser=createParser();\n  parser.setContentHandler(this);\n  parser.setErrorHandler(this);\n  hyphenChar='-';\n}"}
{"ids": "43514", "raw_code": "public static int capBetween(int min,int number,int max){\n  assertTrue(min <= max);\n  return Math.min(max,Math.max(min,number));\n}"}
{"ids": "57804", "raw_code": "public boolean hasExtensions(){\n  return extensions != null;\n}"}
{"ids": "35577", "raw_code": "public void munge(String entityId,Collection<Statement> statements,Collection<String> existingValues,Collection<String> existingRefs,Change sourceChange){\n  if (statements.isEmpty()) {\n    return;\n  }\n  MungeOperation op=new MungeOperation(entityId,statements,existingValues,existingRefs);\n  if (sourceChange != null) {\n    op.importFromChange(sourceChange);\n  }\n  op.munge();\n  existingValues.removeAll(op.extraValidSubjects);\n  existingRefs.removeAll(op.extraValidSubjects);\n  return;\n}"}
{"ids": "38455", "raw_code": "public void showPropertyDialog(){\n  if (m_Editor.getValue() != null) {\n    if (m_PD == null) {\n      int x=getLocationOnScreen().x;\n      int y=getLocationOnScreen().y;\n      if (PropertyDialog.getParentDialog(this) != null)       m_PD=new PropertyDialog(PropertyDialog.getParentDialog(this),m_Editor,x,y);\n else       m_PD=new PropertyDialog(PropertyDialog.getParentFrame(this),m_Editor,x,y);\n      m_PD.setVisible(true);\n    }\n else {\n      m_PD.setVisible(true);\n    }\n    m_Editor.setValue(m_Editor.getValue());\n  }\n}"}
{"ids": "77021", "raw_code": "public Lucene60Codec(Mode mode){\n  super(\"Lucene60\");\n  this.storedFieldsFormat=new Lucene50StoredFieldsFormat(Objects.requireNonNull(mode));\n}"}
{"ids": "65446", "raw_code": "public void delete() throws IOException {\n  close();\n  Util.deleteContents(directory);\n}"}
{"ids": "14956", "raw_code": "public synchronized void remove(String name){\n  for (int i=0; i < modifications.size(); i++) {\n    Modification mod=modifications.get(i);\n    Attribute attr=mod.getAttribute();\n    if (name.equalsIgnoreCase(attr.getAttributeDescriptionAsString())) {\n      modifications.remove(i);\n      return;\n    }\n  }\n}"}
{"ids": "62777", "raw_code": "private boolean quietSleep(long ms){\n  try {\n    Thread.sleep(ms);\n  }\n catch (  InterruptedException e) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "50106", "raw_code": "public void pushFrame(LocalVariableMap vars,DMLProgramCounter pc){\n  callStack.push(new DMLFrame(vars,pc));\n}"}
{"ids": "40547", "raw_code": "public boolean isLandingPage(URL url){\n  if (url.getQuery() != null) {\n    return false;\n  }\n else {\n    return landingPageSuffix(url) != \"\";\n  }\n}"}
{"ids": "86724", "raw_code": "public static synchronized void progress(final String message){\n  sLastProgress=message;\n  final PrintStream prog=getProgressStream();\n  if (prog != null) {\n    prog.println(now() + message);\n    prog.flush();\n    if (prog.checkError()) {\n      sProgressStream=null;\n    }\n  }\n}"}
{"ids": "10274", "raw_code": "private static boolean match(CharSequence string,CharSequence pattern,int sNdx,int pNdx){\n  int pLen=pattern.length();\n  if (pLen == 1) {\n    if (pattern.charAt(0) == '*') {\n      return true;\n    }\n  }\n  int sLen=string.length();\n  boolean nextIsNotWildcard=false;\n  while (true) {\n    if ((sNdx >= sLen) == true) {\n      while ((pNdx < pLen) && (pattern.charAt(pNdx) == '*')) {\n        pNdx++;\n      }\n      return pNdx >= pLen;\n    }\n    if (pNdx >= pLen) {\n      return false;\n    }\n    char p=pattern.charAt(pNdx);\n    if (nextIsNotWildcard == false) {\n      if (p == '\\\\') {\n        pNdx++;\n        nextIsNotWildcard=true;\n        continue;\n      }\n      if (p == '?') {\n        sNdx++;\n        pNdx++;\n        continue;\n      }\n      if (p == '*') {\n        char pNext=0;\n        if (pNdx + 1 < pLen) {\n          pNext=pattern.charAt(pNdx + 1);\n        }\n        if (pNext == '*') {\n          pNdx++;\n          continue;\n        }\n        int i;\n        pNdx++;\n        for (i=string.length(); i >= sNdx; i--) {\n          if (match(string,pattern,i,pNdx) == true) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n else {\n      nextIsNotWildcard=false;\n    }\n    if (p != string.charAt(sNdx)) {\n      return false;\n    }\n    sNdx++;\n    pNdx++;\n  }\n}"}
{"ids": "24413", "raw_code": "public String nextCDATA() throws JSONException {\n  char c;\n  int i;\n  StringBuffer sb=new StringBuffer();\n  for (; ; ) {\n    c=next();\n    if (end()) {\n      throw syntaxError(\"Unclosed CDATA\");\n    }\n    sb.append(c);\n    i=sb.length() - 3;\n    if (i >= 0 && sb.charAt(i) == ']' && sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {\n      sb.setLength(i);\n      return sb.toString();\n    }\n  }\n}"}
{"ids": "35435", "raw_code": "public void addGrammarFile(String fileName){\n  grammarFiles.add(fileName);\n}"}
{"ids": "21832", "raw_code": "private Workflow.Method rollbackDeleteMirrorDeviceMethod(URI vplexURI,URI vplexMirrorURI){\n  return new Workflow.Method(RB_DELETE_MIRROR_DEVICE_METHOD_NAME,vplexURI,vplexMirrorURI);\n}"}
{"ids": "46048", "raw_code": "private String findCipherAndStrength(byte[] supportedCiphers,String[] tokens){\n  byte s;\n  for (int i=0; i < strength.length; i++) {\n    if ((s=strength[i]) != 0) {\n      for (int j=0; j < supportedCiphers.length; j++) {\n        if (s == supportedCiphers[j] && (specifiedCipher == null || specifiedCipher.equals(tokens[j]))) {\nswitch (s) {\ncase HIGH_STRENGTH:\n            negotiatedStrength=\"high\";\n          break;\ncase MEDIUM_STRENGTH:\n        negotiatedStrength=\"medium\";\n      break;\ncase LOW_STRENGTH:\n    negotiatedStrength=\"low\";\n  break;\n}\nreturn tokens[j];\n}\n}\n}\n}\nreturn null;\n}"}
{"ids": "54913", "raw_code": "public static String[] split(String line,String delim){\n  List list=new ArrayList();\n  StringTokenizer t=new StringTokenizer(line,delim);\n  while (t.hasMoreTokens()) {\n    list.add(t.nextToken());\n  }\n  return (String[])list.toArray(new String[list.size()]);\n}"}
{"ids": "62625", "raw_code": "public static String slurpFile(File file) throws IOException {\n  Reader r=new FileReader(file);\n  return slurpReader(r);\n}"}
{"ids": "76496", "raw_code": "@NotNull public List<PlayerNbt> createSingleplayerPlayerNbts(){\n  Log.i(\"using player from level.dat\");\n  return Arrays.asList(createLevelDatPlayerNbt());\n}"}
{"ids": "77883", "raw_code": "public GetFormKeyCmd(String processDefinitionId,String taskDefinitionKey){\n  setProcessDefinitionId(processDefinitionId);\n  if (taskDefinitionKey == null || taskDefinitionKey.length() < 1) {\n    throw new ActivitiIllegalArgumentException(\"The task definition key is mandatory, but '\" + taskDefinitionKey + \"' has been provided.\");\n  }\n  this.taskDefinitionKey=taskDefinitionKey;\n}"}
{"ids": "65860", "raw_code": "private void statInit(){\n  lDocumentNo.setLabelFor(fDocumentNo);\n  fDocumentNo.setBackground(AdempierePLAF.getInfoBackground());\n  fDocumentNo.addActionListener(this);\n  fcheckReceipt.setSelected(true);\n  fcheckReceipt.setActionCommand(\"OnlyReceipt\");\n  fcheckReceipt.addActionListener(this);\n  fcheckPayment.setSelected(false);\n  fcheckPayment.setActionCommand(\"OnlyPayment\");\n  fcheckPayment.addActionListener(this);\n  fBankAccount_ID=new VLookup(\"C_BankAccount_ID\",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPayment.Table_Name,MPayment.COLUMNNAME_C_BankAccount_ID),DisplayType.TableDir));\n  lBankAccount_ID.setLabelFor(fBankAccount_ID);\n  fBankAccount_ID.setBackground(AdempierePLAF.getInfoBackground());\n  fBankAccount_ID.addActionListener(this);\n  fBPartner_ID=new VLookup(\"C_BPartner_ID\",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPayment.Table_Name,MPayment.COLUMNNAME_C_BPartner_ID),DisplayType.Search));\n  lBPartner_ID.setLabelFor(fBPartner_ID);\n  fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());\n  fBPartner_ID.addActionListener(this);\n  lDateFrom.setLabelFor(fDateFrom);\n  fDateFrom.setBackground(AdempierePLAF.getInfoBackground());\n  fDateFrom.setToolTipText(Msg.translate(Env.getCtx(),\"DateFrom\"));\n  fDateFrom.addActionListener(this);\n  lDateTo.setLabelFor(fDateTo);\n  fDateTo.setBackground(AdempierePLAF.getInfoBackground());\n  fDateTo.setToolTipText(Msg.translate(Env.getCtx(),\"DateTo\"));\n  fDateTo.addActionListener(this);\n  lAmtFrom.setLabelFor(fAmtFrom);\n  fAmtFrom.setBackground(AdempierePLAF.getInfoBackground());\n  fAmtFrom.setToolTipText(Msg.translate(Env.getCtx(),\"AmtFrom\"));\n  fAmtFrom.setBorder(fDateFrom.getBorder());\n  fAmtFrom.addActionListener(this);\n  lAmtTo.setLabelFor(fAmtTo);\n  fAmtTo.setBackground(AdempierePLAF.getInfoBackground());\n  fAmtTo.setToolTipText(Msg.translate(Env.getCtx(),\"AmtTo\"));\n  fAmtTo.setBorder(fDateFrom.getBorder());\n  fAmtTo.addActionListener(this);\n  CPanel amtPanel=new CPanel();\n  CPanel datePanel=new CPanel();\n  amtPanel.setLayout(new ALayout(0,0,true));\n  amtPanel.add(fAmtFrom,new ALayoutConstraint(0,0));\n  amtPanel.add(lAmtTo,null);\n  amtPanel.add(fAmtTo,null);\n  datePanel.setLayout(new ALayout(0,0,true));\n  datePanel.add(fDateFrom,new ALayoutConstraint(0,0));\n  datePanel.add(lDateTo,null);\n  datePanel.add(fDateTo,null);\n  p_criteriaGrid.add(lDocumentNo,new ALayoutConstraint(0,0));\n  p_criteriaGrid.add(fDocumentNo,null);\n  p_criteriaGrid.add(lBPartner_ID,null);\n  p_criteriaGrid.add(fBPartner_ID,null);\n  p_criteriaGrid.add(fcheckReceipt,new ALayoutConstraint(0,5));\n  p_criteriaGrid.add(lBankAccount_ID,new ALayoutConstraint(1,0));\n  p_criteriaGrid.add(fBankAccount_ID);\n  p_criteriaGrid.add(lDateFrom,null);\n  p_criteriaGrid.add(datePanel,null);\n  p_criteriaGrid.add(fcheckPayment,new ALayoutConstraint(1,5));\n  p_criteriaGrid.add(lAmtFrom,new ALayoutConstraint(2,2));\n  p_criteriaGrid.add(amtPanel,null);\n}"}
{"ids": "38426", "raw_code": "@Override public Graphics create(){\n  if (DEBUG) {\n    m_printstream.println(\"%create\");\n  }\n  PostscriptGraphics psg=new PostscriptGraphics(this);\n  return (psg);\n}"}
{"ids": "31129", "raw_code": "private void parseActions(){\n  StringTokenizer st=new StringTokenizer(actions,\" ,\",true);\n  boolean comma=false;\n  while (st.hasMoreTokens()) {\n    String act=st.nextToken();\n    if (act.equals(\" \")) {\n      continue;\n    }\n else     if (comma) {\n      if (!act.equals(\",\")) {\n        comma=false;\n        break;\n      }\n    }\n else     if (act.equalsIgnoreCase(\"connect\")) {\n      mask|=CONNECT;\n    }\n else     if (act.equalsIgnoreCase(\"accept\")) {\n      mask|=ACCEPT;\n    }\n else     if (act.equalsIgnoreCase(\"delegate\")) {\n      mask|=DELEGATE;\n    }\n else     if (act.equalsIgnoreCase(\"listen\")) {\n      mask|=LISTEN;\n    }\n else {\n      break;\n    }\n    comma=!comma;\n  }\n  if (!comma) {\n    throw new IllegalArgumentException(\"invalid actions\");\n  }\n}"}
{"ids": "60607", "raw_code": "byte[] toBytes(SSLSession session){\n  if (!(session instanceof OpenSSLSessionImpl)) {\n    return null;\n  }\n  OpenSSLSessionImpl sslSession=(OpenSSLSessionImpl)session;\n  try {\n    ByteArrayOutputStream baos=new ByteArrayOutputStream();\n    DataOutputStream daos=new DataOutputStream(baos);\n    daos.writeInt(OPEN_SSL);\n    byte[] data=sslSession.getEncoded();\n    daos.writeInt(data.length);\n    daos.write(data);\n    Certificate[] certs=session.getPeerCertificates();\n    daos.writeInt(certs.length);\n    for (    Certificate cert : certs) {\n      data=cert.getEncoded();\n      daos.writeInt(data.length);\n      daos.write(data);\n    }\n    return baos.toByteArray();\n  }\n catch (  IOException e) {\n    log(e);\n    return null;\n  }\ncatch (  CertificateEncodingException e) {\n    log(e);\n    return null;\n  }\n}"}
{"ids": "66615", "raw_code": "private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){\n  Mode subMode=Mode.ALPHA;\n  Mode priorToShiftMode=Mode.ALPHA;\n  int i=0;\n  while (i < length) {\n    int subModeCh=textCompactionData[i];\n    char ch=0;\nswitch (subMode) {\ncase ALPHA:\n      if (subModeCh < 26) {\n        ch=(char)('A' + subModeCh);\n      }\n else {\n        if (subModeCh == 26) {\n          ch=' ';\n        }\n else         if (subModeCh == LL) {\n          subMode=Mode.LOWER;\n        }\n else         if (subModeCh == ML) {\n          subMode=Mode.MIXED;\n        }\n else         if (subModeCh == PS) {\n          priorToShiftMode=subMode;\n          subMode=Mode.PUNCT_SHIFT;\n        }\n else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n          result.append((char)byteCompactionData[i]);\n        }\n else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n          subMode=Mode.ALPHA;\n        }\n      }\n    break;\ncase LOWER:\n  if (subModeCh < 26) {\n    ch=(char)('a' + subModeCh);\n  }\n else {\n    if (subModeCh == 26) {\n      ch=' ';\n    }\n else     if (subModeCh == AS) {\n      priorToShiftMode=subMode;\n      subMode=Mode.ALPHA_SHIFT;\n    }\n else     if (subModeCh == ML) {\n      subMode=Mode.MIXED;\n    }\n else     if (subModeCh == PS) {\n      priorToShiftMode=subMode;\n      subMode=Mode.PUNCT_SHIFT;\n    }\n else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n      result.append((char)byteCompactionData[i]);\n    }\n else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n      subMode=Mode.ALPHA;\n    }\n  }\nbreak;\ncase MIXED:\nif (subModeCh < PL) {\nch=MIXED_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PL) {\n  subMode=Mode.PUNCT;\n}\n else if (subModeCh == 26) {\n  ch=' ';\n}\n else if (subModeCh == LL) {\n  subMode=Mode.LOWER;\n}\n else if (subModeCh == AL) {\n  subMode=Mode.ALPHA;\n}\n else if (subModeCh == PS) {\n  priorToShiftMode=subMode;\n  subMode=Mode.PUNCT_SHIFT;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\n  result.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\n  subMode=Mode.ALPHA;\n}\n}\nbreak;\ncase PUNCT:\nif (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\ncase ALPHA_SHIFT:\nsubMode=priorToShiftMode;\nif (subModeCh < 26) {\nch=(char)('A' + subModeCh);\n}\n else {\nif (subModeCh == 26) {\nch=' ';\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\ncase PUNCT_SHIFT:\nsubMode=priorToShiftMode;\nif (subModeCh < PAL) {\nch=PUNCT_CHARS[subModeCh];\n}\n else {\nif (subModeCh == PAL) {\nsubMode=Mode.ALPHA;\n}\n else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {\nresult.append((char)byteCompactionData[i]);\n}\n else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {\nsubMode=Mode.ALPHA;\n}\n}\nbreak;\n}\nif (ch != 0) {\nresult.append(ch);\n}\ni++;\n}\n}"}
{"ids": "81331", "raw_code": "public static boolean isValidName(String name){\n  if (name == null) {\n    return false;\n  }\n  return name.length() > 3;\n}"}
{"ids": "54481", "raw_code": "protected void addCounters(BasicCounters<MutableLong> target,BasicCounters<MutableLong> source){\n  for (  Enum<ReaderCounterKeys> key : ReaderCounterKeys.values()) {\n    MutableLong tcounter=target.getCounter(key);\n    if (tcounter == null) {\n      tcounter=new MutableLong();\n      target.setCounter(key,tcounter);\n    }\n    MutableLong scounter=source.getCounter(key);\n    if (scounter != null) {\n      tcounter.add(scounter.longValue());\n    }\n  }\n}"}
{"ids": "82898", "raw_code": "private void addCard(SharedPreferences sharedPreferences,String key){\n  String json=sharedPreferences.getString(key,null);\n  if (json != null) {\n    try {\n      JSONObject jsonData=new JSONObject(json);\n      if (jsonData.has(IMAGE_KEY)) {\n        String image=jsonData.getString(IMAGE_KEY);\n        List<ITopic> cards=getSourceTopicModel();\nswitch (key) {\ncase POOL_KEY:\n          cards.add(0,Cards.pool(image,getActivity()));\n        removeDuplicates(POOL_KEY,cards);\n      break;\ncase VIDEO_KEY:\nswitch (jsonData.getString(ID_KEY)) {\ncase POOL_CAMERA_ID:\n      mGreatShotUrl=jsonData.getString(URL_KEY);\n    mElv.setOnGroupClickListener(greatShotListener);\n  cards.add(0,Cards.poolVideo(mGreatShotUrl,getActivity()));\nremoveDuplicates(VIDEO_KEY,cards);\nbreak;\n}\nbreak;\ncase FOOD_KEY:\ncards.add(0,Cards.food(image,getActivity()));\nremoveDuplicates(FOOD_KEY,cards);\nbreak;\ncase PRINTER_3D_KEY:\ncards.add(0,Cards.printer3d(image,getActivity()));\nremoveDuplicates(PRINTER_3D_KEY,cards);\nbreak;\n}\n}\n else if (jsonData.has(MESSAGE_KEY)) {\nString message=jsonData.getString(MESSAGE_KEY);\nList<ITopic> cards=getSourceTopicModel();\ncards.add(0,Cards.test(message,getActivity()));\n}\nUI.execute(null);\n}\n catch (JSONException e) {\ne.printStackTrace();\n}\n}\n}"}
{"ids": "42800", "raw_code": "public static List<LoggedMqttMessage> parseMessageLog(final List<String> messages,final ProgressUpdater progress,final long current,final long max) throws SpyException {\n  try {\n    final long startTime=TimeUtils.getMonotonicTime();\n    final int items=messages.size();\n    final long chunkSize=items / 10;\n    final MqttMessageLogParser parser=new MqttMessageLogParser();\n    final List<LoggedMqttMessage> list=new ArrayList<LoggedMqttMessage>();\n    long item=0;\n    long reportAt=1;\n    for (int i=0; i < items; i++) {\n      final String message=messages.get(i);\n      if (progress != null) {\n        if (progress.isCancelled()) {\n          logger.info(\"Task cancelled!\");\n          return null;\n        }\n        item++;\n        if (item % 1000 == 0) {\n          progress.update(current + item,max);\n        }\n      }\n      if ((i > 0) && (i == (chunkSize * reportAt))) {\n        final long currentTime=TimeUtils.getMonotonicTime();\n        final long timeTaken=currentTime - startTime;\n        final long totalTimeExpected=timeTaken * items / i;\n        if (timeTaken > 1000) {\n          logger.info(\"Processed {}%, estimated time left = {}s\",reportAt * 10,(totalTimeExpected - timeTaken) / 1000);\n        }\n        reportAt++;\n      }\n      try {\n        list.add(parser.parse(message));\n      }\n catch (      XMLException e) {\n        logger.error(\"Can't process message \" + message,e);\n      }\n    }\n    logger.info(\"Message audit log - parsed {} XML messages\",list.size());\n    return list;\n  }\n catch (  XMLException e) {\n    throw new SpyException(\"Can't parse the message audit log file\",e);\n  }\n}"}
{"ids": "52861", "raw_code": "private void recomputeSeperation(double[][] means,double[] sep){\n  final int k=means.length;\n  assert (sep.length == k);\n  boolean issquared=(distanceFunction instanceof SquaredEuclideanDistanceFunction);\n  Arrays.fill(sep,Double.POSITIVE_INFINITY);\n  for (int i=1; i < k; i++) {\n    DoubleVector m1=DoubleVector.wrap(means[i]);\n    for (int j=0; j < i; j++) {\n      double d=distanceFunction.distance(m1,DoubleVector.wrap(means[j]));\n      sep[i]=(d < sep[i]) ? d : sep[i];\n      sep[j]=(d < sep[j]) ? d : sep[j];\n    }\n  }\n  for (int i=0; i < k; i++) {\n    sep[i]=issquared ? Math.sqrt(sep[i]) : sep[i];\n    sep[i]*=.5;\n  }\n}"}
{"ids": "12650", "raw_code": "private int transition(int state,int symbol){\n  for (int i=state; i < transitions.length; i++) {\n    if ((transitions[i] % vocabularySize) == symbol) {\n      return (transitions[i] / vocabularySize);\n    }\n  }\n  return -1;\n}"}
{"ids": "85386", "raw_code": "public synchronized CeylonConfig merge(CeylonConfig other){\n  for (  String key : other.getOptionNames(null)) {\n    String[] values=other.getOptionValues(key);\n    setOptionValues(key,values);\n  }\n  return this;\n}"}
{"ids": "47494", "raw_code": "private long monthRange(){\n  ValueRange startRange=chrono.range(MONTH_OF_YEAR);\n  if (startRange.isFixed() && startRange.isIntValue()) {\n    return startRange.getMaximum() - startRange.getMinimum() + 1;\n  }\n  return -1;\n}"}
{"ids": "54737", "raw_code": "public void animate(MarkerWithPosition marker,LatLng from,LatLng to){\n  lock.lock();\n  mAnimationTasks.add(new AnimationTask(marker,from,to));\n  lock.unlock();\n}"}
{"ids": "12865", "raw_code": "@Override public int compareTo(ComponentDescription o){\n  int myPos=0;\n  int oPos=0;\n  if (this instanceof LanguageComponentDescription) {\n    myPos=5;\n  }\n else   if (this instanceof VoiceComponentDescription) {\n    myPos=10;\n  }\n  if (o instanceof LanguageComponentDescription) {\n    oPos=5;\n  }\n else   if (o instanceof VoiceComponentDescription) {\n    oPos=10;\n  }\n  if (oPos - myPos != 0) {\n    return (oPos - myPos);\n  }\n  return name.compareTo(o.name);\n}"}
{"ids": "71361", "raw_code": "public static byte[] escapeEasternUnicodeByteStream(byte[] origBytes,String origString){\n  if (origBytes == null) {\n    return null;\n  }\n  if (origBytes.length == 0) {\n    return new byte[0];\n  }\n  int bytesLen=origBytes.length;\n  int bufIndex=0;\n  int strIndex=0;\n  ByteArrayOutputStream bytesOut=new ByteArrayOutputStream(bytesLen);\n  while (true) {\n    if (origString.charAt(strIndex) == '\\\\') {\n      bytesOut.write(origBytes[bufIndex++]);\n    }\n else {\n      int loByte=origBytes[bufIndex];\n      if (loByte < 0) {\n        loByte+=256;\n      }\n      bytesOut.write(loByte);\n      if (loByte >= 0x80) {\n        if (bufIndex < (bytesLen - 1)) {\n          int hiByte=origBytes[bufIndex + 1];\n          if (hiByte < 0) {\n            hiByte+=256;\n          }\n          bytesOut.write(hiByte);\n          bufIndex++;\n          if (hiByte == 0x5C) {\n            bytesOut.write(hiByte);\n          }\n        }\n      }\n else       if (loByte == 0x5c) {\n        if (bufIndex < (bytesLen - 1)) {\n          int hiByte=origBytes[bufIndex + 1];\n          if (hiByte < 0) {\n            hiByte+=256;\n          }\n          if (hiByte == 0x62) {\n            bytesOut.write(0x5c);\n            bytesOut.write(0x62);\n            bufIndex++;\n          }\n        }\n      }\n      bufIndex++;\n    }\n    if (bufIndex >= bytesLen) {\n      break;\n    }\n    strIndex++;\n  }\n  return bytesOut.toByteArray();\n}"}
{"ids": "16462", "raw_code": "private static StringBuilder dump(StringBuilder _lbuffer,long value){\n  for (int j=0; j < 8; j++) {\n    _lbuffer.append(CHARS[(int)(value >> SHIFTS[j]) & 15]);\n  }\n  return _lbuffer;\n}"}
{"ids": "70876", "raw_code": "@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  super.onMeasure(widthMeasureSpec,heightMeasureSpec);\n  int sizeWidth=MeasureSpec.getSize(widthMeasureSpec) - getPaddingLeft() - getPaddingRight();\n  int sizeHeight=MeasureSpec.getSize(heightMeasureSpec);\n  int modeWidth=MeasureSpec.getMode(widthMeasureSpec);\n  int modeHeight=MeasureSpec.getMode(heightMeasureSpec);\n  int width=0;\n  int height=getPaddingTop() + getPaddingBottom();\n  int lineWidth=0;\n  int lineHeight=0;\n  int childCount=getChildCount();\n  for (int i=0; i < childCount; i++) {\n    View child=getChildAt(i);\n    boolean lastChild=i == childCount - 1;\n    if (child.getVisibility() == View.GONE) {\n      if (lastChild) {\n        width=Math.max(width,lineWidth);\n        height+=lineHeight;\n      }\n      continue;\n    }\n    measureChildWithMargins(child,widthMeasureSpec,lineWidth,heightMeasureSpec,height);\n    LayoutParams lp=(LayoutParams)child.getLayoutParams();\n    int childWidthMode=MeasureSpec.AT_MOST;\n    int childWidthSize=sizeWidth;\n    int childHeightMode=MeasureSpec.AT_MOST;\n    int childHeightSize=sizeHeight;\n    if (lp.width == LayoutParams.MATCH_PARENT) {\n      childWidthMode=MeasureSpec.EXACTLY;\n      childWidthSize-=lp.leftMargin + lp.rightMargin;\n    }\n else     if (lp.width >= 0) {\n      childWidthMode=MeasureSpec.EXACTLY;\n      childWidthSize=lp.width;\n    }\n    if (lp.height >= 0) {\n      childHeightMode=MeasureSpec.EXACTLY;\n      childHeightSize=lp.height;\n    }\n else     if (modeHeight == MeasureSpec.UNSPECIFIED) {\n      childHeightMode=MeasureSpec.UNSPECIFIED;\n      childHeightSize=0;\n    }\n    child.measure(MeasureSpec.makeMeasureSpec(childWidthSize,childWidthMode),MeasureSpec.makeMeasureSpec(childHeightSize,childHeightMode));\n    int childWidth=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;\n    if (lineWidth + childWidth > sizeWidth) {\n      width=Math.max(width,lineWidth);\n      lineWidth=childWidth;\n      height+=lineHeight;\n      lineHeight=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;\n    }\n else {\n      lineWidth+=childWidth;\n      lineHeight=Math.max(lineHeight,child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);\n    }\n    if (lastChild) {\n      width=Math.max(width,lineWidth);\n      height+=lineHeight;\n    }\n  }\n  width+=getPaddingLeft() + getPaddingRight();\n  setMeasuredDimension((modeWidth == MeasureSpec.EXACTLY) ? sizeWidth : width,(modeHeight == MeasureSpec.EXACTLY) ? sizeHeight : height);\n}"}
{"ids": "35315", "raw_code": "public UnionMemberDescriptionWithError(IEObjectDescription delegate,ComposedTypeRef composedTypeRef,IScope[] subScopes,boolean writeAccess){\n  super(delegate);\n  this.composedTypeRef=composedTypeRef;\n  this.subScopes=subScopes;\n  max=subScopes.length;\n  this.writeAccess=writeAccess;\n}"}
{"ids": "16120", "raw_code": "private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {\n  iInstant=(DateMidnight)oos.readObject();\n  DateTimeFieldType type=(DateTimeFieldType)oos.readObject();\n  iField=type.getField(iInstant.getChronology());\n}"}
{"ids": "78363", "raw_code": "public void generateLootChest(World world,Random random,BlockPos pos,int min,int max,IBlockState state,ResourceLocation lootTable){\n  world.setBlockState(pos,state,3);\n  TileEntityChest chest=(TileEntityChest)world.getTileEntity(pos);\n  if (chest != null)   chest.setLootTable(lootTable,random.nextLong());\n}"}
{"ids": "70381", "raw_code": "private void drawAutoHit(Graphics g,Coords hex){\n  int baseX=(hex.getX() * (hexSide[zoom] + hexSideBySin30[zoom])) + leftMargin + hexSide[zoom];\n  int baseY=(((2 * hex.getY()) + 1 + (hex.getX() % 2)) * hexSideByCos30[zoom]) + topMargin;\n  Color alt=g.getColor();\n  g.setColor(Color.RED);\n  g.drawOval(baseX - (unitSize - 1),baseY - (unitSize - 1),(2 * unitSize) - 2,(2 * unitSize) - 2);\n  g.drawLine(baseX - unitSize - 1,baseY,(baseX - unitSize) + 3,baseY);\n  g.drawLine(baseX + unitSize + 1,baseY,(baseX + unitSize) - 3,baseY);\n  g.drawLine(baseX,baseY - unitSize - 1,baseX,(baseY - unitSize) + 3);\n  g.drawLine(baseX,baseY + unitSize + 1,baseX,(baseY + unitSize) - 3);\n  g.setColor(alt);\n}"}
{"ids": "26535", "raw_code": "public void remove() throws RecurrenceRuleException {\n  try {\n    rule.remove();\n  }\n catch (  GenericEntityException e) {\n    throw new RecurrenceRuleException(e.getMessage(),e);\n  }\n}"}
{"ids": "51888", "raw_code": "private boolean shouldBeEscaped(char c){\n  return c < ' ' || (c >= '\\u0080' && c < '\\u00a0') || (c >= '\\u2000' && c < '\\u2100');\n}"}
{"ids": "37235", "raw_code": "public CEventTableMenu(final JTable table,final List<ITraceEvent> traces){\n  addOpenFunction(SwingUtilities.getWindowAncestor(table),traces);\n  add(new JMenuItem(CActionProxy.proxy(new CSearchTableAction(SwingUtilities.getWindowAncestor(table),table))));\n  add(new CopySelectionAction(table));\n}"}
{"ids": "84254", "raw_code": "@Override public int available() throws IOException {\n  return (outBytes_.length + inputStream_.available());\n}"}
{"ids": "85767", "raw_code": "public boolean checkError(){\n  return pw.checkError();\n}"}
{"ids": "28986", "raw_code": "public void addBugPattern(BugPattern bugPattern){\n  bugPatterns.add(bugPattern);\n}"}
{"ids": "79758", "raw_code": "public SpiderGitParser(SpiderParam params){\n  super();\n  this.params=params;\n}"}
{"ids": "75974", "raw_code": "public void onRetry(int retryNo){\n  Log.d(LOG_TAG,String.format(\"Request retry no. %d\",retryNo));\n}"}
{"ids": "33324", "raw_code": "protected void analyzeDtoSetterMethod(Method method,MethodModel methodModel){\n  methodModel.setSetter(true);\n  Type fieldType=method.getGenericParameterTypes()[0];\n  String fieldName=getSetterFieldName(method);\n  fieldAttributes.put(fieldName,fieldType);\n  methodModel.setFieldName(fieldName);\n  methodModel.setFieldType(convertType(fieldType));\n}"}
{"ids": "16926", "raw_code": "public static String loadLastColor(Context context){\n  try {\n    SharedPreferences sharedPreferences=context.getSharedPreferences(\"colpick\",Context.MODE_PRIVATE);\n    String s=sharedPreferences.getString(SP_KEY_LAST_COLOR,null);\n    Color.parseColor(s);\n    return s;\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    return null;\n  }\n}"}
{"ids": "46694", "raw_code": "public BevelBorder(int bevelType,Color highlight,Color shadow){\n  this(bevelType,highlight.brighter(),highlight,shadow,shadow.brighter());\n}"}
{"ids": "54707", "raw_code": "protected final void refreshSessionLayer(final Location location){\n  if (!mRefreshSessionPending && isVisible()) {\n    Log.d(TAG,\"Updating session layer\");\n    mRefreshSessionPending=true;\n    triggerSessionObjectsUpdate(null);\n    sessionObjectsRefreshTime=System.currentTimeMillis();\n    sessionObjectsRefreshedAt=location;\n  }\n else   if (!isVisible()) {\n    Log.v(TAG,\"Not visible, skipping refresh\");\n  }\n else {\n    Log.v(TAG,\"Session layer is refreshing. Skipping refresh..\");\n  }\n}"}
{"ids": "34428", "raw_code": "public static int mDateGap(String dayName){\n  Log.d(\"dayname\",dayName);\n  if (dayName.equals(\"mon\")) {\n    return 1;\n  }\n else   if (dayName.equals(\"tue\")) {\n    return 2;\n  }\n else   if (dayName.equals(\"wed\")) {\n    return 3;\n  }\n else   if (dayName.equals(\"thu\")) {\n    return 4;\n  }\n else   if (dayName.equals(\"fri\")) {\n    return 5;\n  }\n else   if (dayName.equals(\"sat\")) {\n    return 6;\n  }\n else {\n    return 0;\n  }\n}"}
{"ids": "79261", "raw_code": "public static String removeAdditionalParty(HttpServletRequest request,HttpServletResponse response){\n  ShoppingCart cart=getCartObject(request);\n  String partyId=request.getParameter(\"additionalPartyId\");\n  String roleTypeId[]=request.getParameterValues(\"additionalRoleTypeId\");\n  List<String> eventList=new LinkedList<String>();\n  Locale locale=UtilHttp.getLocale(request);\n  int i;\n  if (UtilValidate.isEmpty(partyId) || roleTypeId.length < 1) {\n    request.setAttribute(\"_ERROR_MESSAGE_\",UtilProperties.getMessage(resource_error,\"OrderPartyIdAndOrRoleTypeIdNotDefined\",locale));\n    return \"error\";\n  }\n  if (request.getAttribute(\"_EVENT_MESSAGE_LIST_\") != null) {\n    List<String> msg=UtilGenerics.checkList(request.getAttribute(\"_EVENT_MESSAGE_LIST_\"));\n    eventList.addAll(msg);\n  }\n  for (i=0; i < roleTypeId.length; i++) {\n    try {\n      cart.removeAdditionalPartyRole(partyId,roleTypeId[i]);\n    }\n catch (    Exception e) {\n      Debug.logInfo(e.getLocalizedMessage(),module);\n      eventList.add(e.getLocalizedMessage());\n    }\n  }\n  request.removeAttribute(\"_EVENT_MESSAGE_LIST_\");\n  request.setAttribute(\"_EVENT_MESSAGE_LIST_\",eventList);\n  return \"success\";\n}"}
{"ids": "25024", "raw_code": "public Map<String,String[]> crop(final Map<String,String[]> original){\n  Map<String,String[]> result=new HashMap<String,String[]>(original.size());\n  for (  Map.Entry<String,String[]> entry : original.entrySet()) {\n    String key=entry.getKey();\n    if (null == key) {\n      continue;\n    }\n    String[] value=entry.getValue();\n    String[] convertedValue;\n    if (null == value) {\n      convertedValue=new String[1];\n      convertedValue[0]=\"<notset>\";\n    }\n else {\n      boolean croppingWasNeeded=false;\n      convertedValue=value;\n      for (int i=0, l=value.length; i < l; i++) {\n        String curValue=value[i];\n        String croppingResult=crop(curValue);\n        if ((curValue != croppingResult) & !croppingWasNeeded) {\n          croppingWasNeeded=true;\n          convertedValue=new String[value.length];\n          System.arraycopy(value,0,convertedValue,0,i);\n          convertedValue[i]=croppingResult;\n        }\n        if (croppingWasNeeded) {\n          convertedValue[i]=croppingResult;\n        }\n      }\n    }\n    result.put(key,convertedValue);\n  }\n  return result;\n}"}
{"ids": "6043", "raw_code": "@Override int lookForSelectablePosition(int position,boolean lookDown){\n  final ListAdapter adapter=mAdapter;\n  if (adapter == null || isInTouchMode()) {\n    return INVALID_POSITION;\n  }\n  final int count=adapter.getCount();\n  if (!mAreAllItemsSelectable) {\n    if (lookDown) {\n      position=Math.max(0,position);\n      while (position < count && !adapter.isEnabled(position)) {\n        position++;\n      }\n    }\n else {\n      position=Math.min(position,count - 1);\n      while (position >= 0 && !adapter.isEnabled(position)) {\n        position--;\n      }\n    }\n    if (position < 0 || position >= count) {\n      return INVALID_POSITION;\n    }\n    return position;\n  }\n else {\n    if (position < 0 || position >= count) {\n      return INVALID_POSITION;\n    }\n    return position;\n  }\n}"}
{"ids": "21579", "raw_code": "@Override public void deleteBCVHelperVolume(StorageSystem storageSystem,Volume volume) throws Exception {\n  _log.info(String.format(\"Start executing BCV helper volume from array: %s, for volume: %s\",storageSystem.getId(),volume.getId()));\n  try {\n    String deviceName=volume.getNativeId();\n    String deviceNameWithoutLeadingZeros=deviceName.replaceAll(\"^0*\",\"\");\n    String query=String.format(\"SELECT CIM_StorageVolume.%s, CIM_StorageVolume.%s  FROM CIM_StorageVolume where CIM_StorageVolume.%s ='SMI_BCV_META_%s'\",SmisConstants.CP_ELEMENT_NAME,SmisConstants.CP_DEVICE_ID,SmisConstants.CP_ELEMENT_NAME,deviceNameWithoutLeadingZeros);\n    String queryLanguage=\"CQL\";\n    List<CIMInstance> bcvVolumeInstanceList=_helper.executeQuery(storageSystem,query,queryLanguage);\n    if (bcvVolumeInstanceList == null || bcvVolumeInstanceList.isEmpty()) {\n      query=String.format(\"SELECT CIM_StorageVolume.%s, CIM_StorageVolume.%s FROM CIM_StorageVolume where CIM_StorageVolume.%s ='SMI_BCV_META_%s'\",SmisConstants.CP_ELEMENT_NAME,SmisConstants.CP_DEVICE_ID,SmisConstants.CP_ELEMENT_NAME,deviceName);\n      bcvVolumeInstanceList=_helper.executeQuery(storageSystem,query,queryLanguage);\n    }\n    String elementName=null;\n    String nativeId=null;\n    CIMInstance bcvVolumeInstance=null;\n    if (bcvVolumeInstanceList != null && !bcvVolumeInstanceList.isEmpty()) {\n      bcvVolumeInstance=bcvVolumeInstanceList.get(0);\n      elementName=CIMPropertyFactory.getPropertyValue(bcvVolumeInstance,SmisConstants.CP_ELEMENT_NAME);\n      nativeId=CIMPropertyFactory.getPropertyValue(bcvVolumeInstance,SmisConstants.CP_DEVICE_ID);\n      _log.info(String.format(\"Found BCV helper volume: %s, nativeId: %s\",elementName,nativeId));\n    }\n else {\n      _log.warn(String.format(\"Could not find BCV helper volume for volume: %s, nativeId: %s\",volume.getId(),volume.getNativeId()));\n      return;\n    }\n    _log.info(String.format(\"Executing delete of BCV helper volume: \" + nativeId));\n    String[] nativeIds=new String[]{nativeId};\n    CIMObjectPath configSvcPath=_cimPath.getConfigSvcPath(storageSystem);\n    CIMArgument[] inArgs=_helper.getDeleteVolumesInputArguments(storageSystem,nativeIds);\n    CIMArgument[] outArgs=new CIMArgument[5];\n    String returnElementsMethod;\n    if (storageSystem.getUsingSmis80()) {\n      returnElementsMethod=SmisConstants.RETURN_ELEMENTS_TO_STORAGE_POOL;\n    }\n else {\n      returnElementsMethod=SmisConstants.EMC_RETURN_TO_STORAGE_POOL;\n    }\n    _helper.invokeMethodSynchronously(storageSystem,configSvcPath,returnElementsMethod,inArgs,outArgs,null);\n    _log.info(String.format(\"Deleted BCV helper volume: \" + nativeId));\n  }\n catch (  Exception ex) {\n    _log.error(String.format(\"Failed to delete BCV helper volume from array: %s, for volume: %s\",storageSystem.getId(),volume.getId()));\n  }\n}"}
{"ids": "50832", "raw_code": "public void populateBottomTabItems(@NonNull BottomTabsBuilder builder){\n  if (mContainer.getChildCount() >= MIN_BOTTOM_NAVIGATION_ITEMS) {\n    checkBottomItemGuidelines(mContainer.getChildCount());\n  }\n  List<BottomNavigationItem> build=builder.build();\n  for (int i=0; i < build.size(); i++) {\n    BottomNavigationItem item=build.get(i);\n    item.setPosition(i);\n    addBottomNavigationItem(item);\n  }\n  updateBottomNavViews();\n  selectTabView();\n}"}
{"ids": "82423", "raw_code": "public final int skipBytes(int count) throws java.io.IOException {\n  int skipped=0;\n  long skip;\n  while (skipped < count && (skip=in.skip(count - skipped)) != 0) {\n    skipped+=skip;\n  }\n  return skipped;\n}"}
{"ids": "34944", "raw_code": "private final void insert(Object text){\n  buf.insert(buf.length() - 1,\" \");\n  buf.insert(buf.length() - 1,text);\n}"}
{"ids": "78536", "raw_code": "public static void splitTextures(File destination,File texturePack,double scale,boolean alphas,ProgressCallback progress) throws Exception {\n  if (destination == null)   throw new IllegalArgumentException(\"destination cannot be null\");\n  Log.info(\"Exporting textures to \\\"\" + destination + \"\\\"\");\n  if (!destination.exists() || !destination.isDirectory()) {\n    if (destination.exists())     throw new RuntimeException(\"Cannot create texture directory! File is in the way!\");\n    if (!destination.mkdir())     throw new RuntimeException(\"Cannot create texture directory!\");\n  }\n  getTextures(texturePack,scale,progress,alphas,false,destination);\n}"}
{"ids": "30475", "raw_code": "protected synchronized String nextCnxKey(){\n  if (connectionsCounter == Integer.MAX_VALUE)   connectionsCounter=0;\n  connectionsCounter++;\n  int randLong=random.nextInt(Integer.MAX_VALUE);\n  return connectionsCounter + (randLong + \"_\" + ID_SUFFIX);\n}"}
{"ids": "16892", "raw_code": "public static boolean copyFileSafe(final Path srcFile,final Path destFile) throws IOException {\n  return copyFileSafe(srcFile,destFile,false);\n}"}
{"ids": "25684", "raw_code": "public static boolean isHeader(Header header){\n  String xten=header.getStringValue(XTENSION);\n  if (xten == null) {\n    return false;\n  }\n  xten=xten.trim();\n  return xten.equals(XTENSION_BINTABLE) || xten.equals(\"A3DTABLE\");\n}"}
{"ids": "48724", "raw_code": "final void putFloat(int offset,float value){\n  unsafe.putFloat(offset + address,value);\n}"}
{"ids": "54987", "raw_code": "public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {\n  fInDTD=true;\n  try {\n    if (fLexicalHandler != null) {\n      fLexicalHandler.startDTD(rootElement,publicId,systemId);\n    }\n  }\n catch (  SAXException e) {\n    throw new XNIException(e);\n  }\n  if (fDeclHandler != null) {\n    fDeclaredAttrs=new SymbolHash();\n  }\n}"}
{"ids": "34750", "raw_code": "@VisibleForTesting static OMAEntry parseOMAEntry(String entry){\n  int index=entry.indexOf(\",\");\n  long downloadId=Long.parseLong(entry.substring(0,index));\n  return new OMAEntry(downloadId,entry.substring(index + 1));\n}"}
{"ids": "61791", "raw_code": "public void parse() throws IOException {\n  long length=0;\n  try {\n    length=file.length();\n  }\n catch (  IOException e) {\n    throw new IOException(\"Wrong size\");\n  }\n  try {\n    parse(\"\",length);\n  }\n catch (  IOException e) {\n    throw new IOException(\"Parse error: malformed mp4 file\");\n  }\n}"}
{"ids": "40392", "raw_code": "public ReflectiveProperty(Class<T> propertyHolder,Class<V> valueType,String name){\n  super(valueType,name);\n  char firstLetter=Character.toUpperCase(name.charAt(0));\n  String theRest=name.substring(1);\n  String capitalizedName=firstLetter + theRest;\n  String getterName=PREFIX_GET + capitalizedName;\n  try {\n    mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);\n  }\n catch (  NoSuchMethodException e) {\n    try {\n      mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);\n      mGetter.setAccessible(true);\n    }\n catch (    NoSuchMethodException e2) {\n      getterName=PREFIX_IS + capitalizedName;\n      try {\n        mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);\n      }\n catch (      NoSuchMethodException e3) {\n        try {\n          mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);\n          mGetter.setAccessible(true);\n        }\n catch (        NoSuchMethodException e4) {\n          try {\n            mField=propertyHolder.getField(name);\n            Class fieldType=mField.getType();\n            if (!typesMatch(valueType,fieldType)) {\n              throw new NoSuchPropertyException(\"Underlying type (\" + fieldType + \") \"+ \"does not match Property type (\"+ valueType+ \")\");\n            }\n            return;\n          }\n catch (          NoSuchFieldException e5) {\n            throw new NoSuchPropertyException(\"No accessor method or field found for\" + \" property with name \" + name);\n          }\n        }\n      }\n    }\n  }\n  Class getterType=mGetter.getReturnType();\n  if (!typesMatch(valueType,getterType)) {\n    throw new NoSuchPropertyException(\"Underlying type (\" + getterType + \") \"+ \"does not match Property type (\"+ valueType+ \")\");\n  }\n  String setterName=PREFIX_SET + capitalizedName;\n  try {\n    mSetter=propertyHolder.getDeclaredMethod(setterName,getterType);\n    mSetter.setAccessible(true);\n  }\n catch (  NoSuchMethodException ignored) {\n  }\n}"}
{"ids": "37154", "raw_code": "public CFunctionTypePanel(final ListenerProvider<IFilterDialogListener> listeners){\n  super(new BorderLayout());\n  m_listeners=listeners;\n  final JPanel innerPanel=new JPanel(new GridLayout(5,1));\n  innerPanel.add(buildRow(\"Normal functions\",m_normalFunctionCheckbox));\n  innerPanel.add(buildRow(\"Imported functions\",m_importedFunctionCheckbox));\n  innerPanel.add(buildRow(\"Library functions\",m_libraryFunctionCheckbox));\n  innerPanel.add(buildRow(\"Thunk functions\",m_thunkFunctionCheckbox));\n  innerPanel.add(buildRow(\"Thunk adjustor functions\",m_adjustorFunctionCheckbox));\n  add(innerPanel,BorderLayout.NORTH);\n  setBorder(new TitledBorder(\"Function type\"));\n}"}
{"ids": "29338", "raw_code": "public DragContext(Node draggable){\n  this.node=draggable;\n  this.goToForegroundOnContact=true;\n  this.touchId=NULL_ID;\n  this.activated=false;\n  this.dragLimits=new BoundingBox(0,0,Integer.MAX_VALUE,Integer.MAX_VALUE);\n  this.dragThreshold=10.0;\n  this.dragStarted=false;\n  this.relocateThreshold=1.0;\n  this.dragInitAction=null;\n  this.dragFinishAction=null;\n  touchHandler=null;\n  mouseHandler=null;\n  draggable.addEventHandler(TouchEvent.ANY,touchHandler);\n  draggable.addEventHandler(MouseEvent.ANY,mouseHandler);\n}"}
{"ids": "9811", "raw_code": "protected X509Certificate[] openCertificate(File certificateFile){\n  try {\n    FileInputStream is=new FileInputStream(certificateFile);\n    return openCertificate(is,certificateFile.getName());\n  }\n catch (  FileNotFoundException ex) {\n    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString(\"KeyStoreExplorerAction.NoReadFile.message\"),certificateFile),res.getString(\"KeyStoreExplorerAction.OpenCertificate.Title\"),JOptionPane.WARNING_MESSAGE);\n    return null;\n  }\n}"}
{"ids": "5026", "raw_code": "public ShapeTileSimplex(PlaLineIntAlist p_line_alist){\n  lines_list=new ArrayList<PlaLineInt>(p_line_alist.size());\n  for (  PlaLineInt a_line : p_line_alist)   lines_list.add(a_line);\n  Collections.sort(lines_list);\n}"}
{"ids": "72432", "raw_code": "public ProperFractionFormat(NumberFormat format){\n  this(format,(NumberFormat)format.clone(),(NumberFormat)format.clone());\n}"}
{"ids": "68969", "raw_code": "private File createCaptureFile(int encodingType){\n  return createCaptureFile(encodingType,\"\");\n}"}
{"ids": "72528", "raw_code": "public double[][] extractMainSetJacobian(final ODEState state){\n  final double[] p=state.getSecondaryState(index);\n  final double[][] dYdY0=new double[jode.getDimension()][jode.getDimension()];\n  int j=0;\n  for (int i=0; i < jode.getDimension(); i++) {\n    System.arraycopy(p,j,dYdY0[i],0,jode.getDimension());\n    j+=jode.getDimension();\n  }\n  return dYdY0;\n}"}
{"ids": "78033", "raw_code": "public static String byteToHexString(byte[] byteArray){\n  StringBuilder builder=new StringBuilder();\n  for (int i=0; i < byteArray.length; i++) {\n    int byteCode=byteArray[i] & 0xFF;\n    if (byteCode < 0x10) {\n      builder.append(0);\n    }\n    builder.append(Integer.toHexString(byteCode));\n  }\n  return builder.toString();\n}"}
{"ids": "82005", "raw_code": "public static void assertNotEqual(Object expected,Object actual){\n  if (verbose) {\n    log(\"assertNotEqual(\" + expected + \", \"+ actual+ \")\");\n  }\n  TestUtils.assertBool(!expected.equals(actual));\n}"}
{"ids": "31333", "raw_code": "private boolean isEmpty(String value){\n  return value.length() == 0;\n}"}
{"ids": "2825", "raw_code": "private void disposeCodec(IoSession session){\n  disposeEncoder(session);\n  disposeDecoder(session);\n  disposeDecoderOut(session);\n}"}
{"ids": "51484", "raw_code": "public static ObjectStreamClass lookupAny(Class<?> cl){\n  return lookupStreamClass(cl);\n}"}
{"ids": "57028", "raw_code": "public static void main(String[] args){\n  try {\n    int serverPort=Integer.parseInt(System.getProperty(\"net.floodlightcontroller.packetstreamer.port\",\"9090\"));\n    TTransport transport;\n    transport=new TFramedTransport(new TSocket(\"localhost\",serverPort));\n    transport.open();\n    TProtocol protocol=new TBinaryProtocol(transport);\n    PacketStreamer.Client client=new PacketStreamer.Client(protocol);\n    sendPackets(client,(short)2,OFMessageType.PACKET_IN,true);\n    log.debug(\"Terminate session1\");\n    client.terminateSession(\"session1\");\n    transport.close();\n  }\n catch (  TException x) {\n    x.printStackTrace();\n  }\n}"}
{"ids": "31074", "raw_code": "public ConfigurationParser(boolean verify,ClassLoader loader) throws ParserConfigurationException {\n  factory=DocumentBuilderFactory.newInstance();\n  factory.setValidating(verify);\n  factory.setNamespaceAware(true);\n  factory.setExpandEntityReferences(true);\n  factory.setCoalescing(true);\n  builder=factory.newDocumentBuilder();\n  if (verify)   builder.setErrorHandler(new XMLErrorHandler());\n  if (loader == null)   throw new NullPointerException(\"loader is null\");\n}"}
{"ids": "17031", "raw_code": "public Application createJmxApplicationInteractive(String connectionString,String displayName,EnvironmentProvider provider,boolean persistent){\n  return createJmxApplicationInteractive(connectionString,displayName,provider,persistent,false);\n}"}
{"ids": "60640", "raw_code": "public static synchronized void removeProvider(int providerNumber){\n  Provider p=providers.remove(providerNumber - 1);\n  providersNames.remove(p.getName());\n  setNeedRefresh();\n}"}
{"ids": "54979", "raw_code": "public Object referenceInsert(String reference,Object value){\n  String s=null;\n  if (value != null) {\n    s=REFERENCE_VALUE;\n  }\n else {\n    if (reference.equals(\"$floobie\")) {\n      s=NO_REFERENCE_VALUE;\n    }\n  }\n  return s;\n}"}
{"ids": "49076", "raw_code": "public GraphicComponent(GraphicAttribute graphic,Decoration decorator,int[] charsLtoV,byte[] levels,int start,int limit,AffineTransform baseTx){\n  if (limit <= start) {\n    throw new IllegalArgumentException(\"0 or negative length in GraphicComponent\");\n  }\n  this.graphic=graphic;\n  this.graphicAdvance=graphic.getAdvance();\n  this.decorator=decorator;\n  this.cm=createCoreMetrics(graphic);\n  this.baseTx=baseTx;\n  initLocalOrdering(charsLtoV,levels,start,limit);\n}"}
{"ids": "21980", "raw_code": "public static boolean hasValidUserInContext(SecurityContext securityContext){\n  if ((securityContext != null) && (securityContext.getUserPrincipal() instanceof StorageOSUser)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "64579", "raw_code": "private void handleEndOfStream(State state,InnerState innerState) throws StopRequest {\n  mInfo.mCurrentBytes=innerState.mBytesSoFar;\n  mDB.updateDownload(mInfo);\n  boolean lengthMismatched=(innerState.mHeaderContentLength != null) && (innerState.mBytesSoFar != Integer.parseInt(innerState.mHeaderContentLength));\n  if (lengthMismatched) {\n    if (cannotResume(innerState)) {\n      throw new StopRequest(DownloaderService.STATUS_CANNOT_RESUME,\"mismatched content length\");\n    }\n else {\n      throw new StopRequest(getFinalStatusForHttpError(state),\"closed socket before end of file\");\n    }\n  }\n}"}
{"ids": "69543", "raw_code": "public void add(String keyword,byte id){\n  int key=getStringMapKey(keyword);\n  map[key]=new Keyword(keyword.toCharArray(),id,map[key]);\n}"}
{"ids": "24752", "raw_code": "private String secondsToTime(int seconds){\n  String time=\"\";\n  String minutesText=String.valueOf(seconds / 60);\n  if (minutesText.length() == 1)   minutesText=\"0\" + minutesText;\n  String secondsText=String.valueOf(seconds % 60);\n  if (secondsText.length() == 1)   secondsText=\"0\" + secondsText;\n  time=minutesText + \":\" + secondsText;\n  return time;\n}"}
{"ids": "57043", "raw_code": "private void processNewPort(DatapathId sw,OFPort p){\n  if (isLinkDiscoverySuppressed(sw,p)) {\n    return;\n  }\n  IOFSwitch iofSwitch=switchService.getSwitch(sw);\n  if (iofSwitch == null) {\n    return;\n  }\n  NodePortTuple npt=new NodePortTuple(sw,p);\n  discover(sw,p);\n  addToQuarantineQueue(npt);\n}"}
{"ids": "1757", "raw_code": "public AmqpReceiver(AmqpSession session,String address,String receiverId){\n  if (address != null && address.isEmpty()) {\n    throw new IllegalArgumentException(\"Address cannot be empty.\");\n  }\n  this.userSpecifiedSource=null;\n  this.session=session;\n  this.address=address;\n  this.receiverId=receiverId;\n}"}
{"ids": "32834", "raw_code": "public static byte readByte(){\n  return scanner.nextByte();\n}"}
{"ids": "41802", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 0:\n    return SUCCESS;\ndefault :\n  return null;\n}\n}"}
{"ids": "51862", "raw_code": "public static void d(String tag,String msg,Object... args){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  if (args.length > 0) {\n    msg=String.format(msg,args);\n  }\n  Log.d(tag,msg);\n}"}
{"ids": "67640", "raw_code": "public void clearValueLocal(String columnHeader){\n  values.remove(columnHeader.toLowerCase());\n}"}
{"ids": "23744", "raw_code": "public List closeBucketAdvisors(){\n  List primariesHeld=Collections.EMPTY_LIST;\n  if (this.buckets != null) {\n    for (int i=0; i < this.buckets.length; i++) {\n      ProxyBucketRegion pbr=this.buckets[i];\n      if (pbr.isPrimary()) {\n        if (primariesHeld == Collections.EMPTY_LIST) {\n          primariesHeld=new ArrayList();\n        }\n        primariesHeld.add(Integer.valueOf(i));\n      }\n      pbr.close();\n    }\n  }\n  return primariesHeld;\n}"}
{"ids": "28164", "raw_code": "static public Test suite(){\n  return ProxySuiteHelper.suiteWhenStandalone(TestSparqlUpdate.class,\"test.*\",new LinkedHashSet<BufferMode>(Arrays.asList(new BufferMode[]{BufferMode.Transient,BufferMode.DiskWORM,BufferMode.MemStore,BufferMode.DiskRW})),TestMode.quads);\n}"}
{"ids": "46879", "raw_code": "private synchronized void cleanupIsComplexTypeAttribute(){\n  firstAttribute=null;\n  remainingAttributes.clear();\n  isComplexTypeAttribute=false;\n}"}
{"ids": "34571", "raw_code": "public static String leftTrim(final String value){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  return value.replaceAll(\"^\\\\s+\",\"\");\n}"}
{"ids": "64849", "raw_code": "public float polarAngle(){\n  return (float)Math.toDegrees(angle());\n}"}
{"ids": "73477", "raw_code": "public String checkParamsNonNegative(){\n  String ret=\"\";\n  if (param1 < 0) {\n    ret=ret.concat(pdf.getParam1Name() + \" is negative. \\n\");\n  }\n  if (param2 < 0) {\n    ret=ret.concat(pdf.getParam2Name() + \" is negative. \\n\");\n  }\n  if (upperBound < 0) {\n    ret=ret.concat(\"Upper boundary is negative. \\n\");\n  }\n  if (lowerBound < 0) {\n    ret=ret.concat(\"Lower boundary is negative. \\n\");\n  }\n  return ret;\n}"}
{"ids": "14509", "raw_code": "public static boolean validate(String str,String regEx,Debug tmpDebug){\n  debug=tmpDebug;\n  if (str == null || str.length() == 0) {\n    debug.message(\"Source string is null or empty\");\n    return false;\n  }\n  char[] value=str.toCharArray();\n  int count=value.length;\n  Set hSet=new HashSet();\n  StringTokenizer st=new StringTokenizer(regEx,SEPERATOR);\n  while (st.hasMoreTokens()) {\n    hSet.add(st.nextToken());\n  }\n  Iterator itr=hSet.iterator();\n  while (itr.hasNext()) {\n    String obj=(String)itr.next();\n    if (process(value,obj,0,count) > -1) {\n      debug.message(\"detected invalid chars ...\");\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "1185", "raw_code": "public static float turbulence2(float x,float y,float octaves){\n  float t=0.0f;\n  for (float f=1.0f; f <= octaves; f*=2)   t+=Math.abs(noise2(f * x,f * y)) / f;\n  return t;\n}"}
{"ids": "4359", "raw_code": "public void addMapObject(InternalMapObject mapObject){\n  mapObjects.add(mapObject);\n}"}
{"ids": "53696", "raw_code": "public List<MockResponse> enqueue(String... paths){\n  if (paths == null) {\n    return null;\n  }\n  List<MockResponse> mockResponseList=new ArrayList<>();\n  for (  String path : paths) {\n    Fixture fixture=Fixture.parseFrom(path,parser);\n    MockResponse mockResponse=new MockResponse();\n    if (fixture.statusCode != 0) {\n      mockResponse.setResponseCode(fixture.statusCode);\n    }\n    if (fixture.body != null) {\n      mockResponse.setBody(fixture.body);\n    }\n    if (fixture.delay != 0) {\n      mockWebServer.setDispatcher(new DelayedDispatcher(fixture.delay,TimeUnit.MILLISECONDS));\n    }\n    if (fixture.headers != null) {\n      for (      String header : fixture.headers) {\n        mockResponse.addHeader(header);\n      }\n    }\n    mockWebServer.enqueue(mockResponse);\n    mockResponseList.add(mockResponse);\n  }\n  return mockResponseList;\n}"}
{"ids": "9232", "raw_code": "@Override public void endOfStream() throws AdeException {\n  double minProb=1;\n  if (m_totalIntervalCount == 0) {\n    m_totalIntervalCount=1;\n  }\n  for (  Entry<String,BernoulliScore.MsgData> entry : m_msgData.entrySet()) {\n    final FullBernoulliMsgData data=(FullBernoulliMsgData)entry.getValue();\n    data.m_prob=((double)data.m_count + 0.5) / (m_totalIntervalCount + 1.0);\n    if (data.m_prob < 0 || data.m_prob >= 1.0) {\n      logger.info(entry.getKey() + \":  bad m_prob: \" + data.m_prob+ \"=\"+ data.m_count+ \"+0.5 / \"+ m_totalIntervalCount+ \"+1\");\n    }\n    if (data.m_prob < minProb) {\n      minProb=data.m_prob;\n    }\n    data.m_outOfClusterProb=((double)data.m_outOfClusterCount + 0.5) / (m_totalIntervalCount + 1.0);\n    if (data.m_outOfClusterCount < minProb && data.m_outOfClusterCount > 0.0) {\n      minProb=data.m_outOfClusterCount;\n    }\n  }\n  for (  BernoulliScore.MsgData dataSuper : m_msgData.values()) {\n    final FullBernoulliMsgData data=(FullBernoulliMsgData)dataSuper;\n    final double probability=data.m_prob;\n    data.m_score=-Math.log(probability);\n    if (data.m_score > 1) {\n      data.m_score=1;\n    }\n    final double outOfContextProbability=data.m_outOfClusterProb;\n    data.m_outOfContextScore=-Math.log(outOfContextProbability);\n    if (data.m_outOfContextScore > 1) {\n      data.m_outOfContextScore=1;\n    }\n  }\n  m_trained=true;\n}"}
{"ids": "32942", "raw_code": "public boolean hasNextKeyTyped(){\nsynchronized (keyLock) {\n    return !keysTyped.isEmpty();\n  }\n}"}
{"ids": "43076", "raw_code": "public void addOperator(Variation operator){\n  operators.add(operator);\n}"}
{"ids": "75604", "raw_code": "public R paramsToMultipartEntity(boolean isrepeatable){\n  try {\n    mHttpEntity=createMultipartEntity(isrepeatable);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  return (R)this;\n}"}
{"ids": "28548", "raw_code": "private static int parseInt(String value,int beginIndex,int endIndex) throws NumberFormatException {\n  if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\n    throw new NumberFormatException(value);\n  }\n  int i=beginIndex;\n  int result=0;\n  int digit;\n  if (i < endIndex) {\n    digit=Character.digit(value.charAt(i++),10);\n    if (digit < 0) {\n      throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex,endIndex));\n    }\n    result=-digit;\n  }\n  while (i < endIndex) {\n    digit=Character.digit(value.charAt(i++),10);\n    if (digit < 0) {\n      throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex,endIndex));\n    }\n    result*=10;\n    result-=digit;\n  }\n  return -result;\n}"}
{"ids": "24224", "raw_code": "public boolean isAlertDefinitionCreated(StatAlertDefinition alertDefinition){\nsynchronized (ALERT_DEFINITIONS) {\n    return ALERT_DEFINITIONS.containsKey(Integer.valueOf(alertDefinition.getId()));\n  }\n}"}
{"ids": "53203", "raw_code": "public static double logpoissonPDFm1(double x_plus_1,double lambda){\n  if (Double.isInfinite(lambda)) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  if (x_plus_1 > 1) {\n    return rawLogProbability(x_plus_1 - 1,lambda);\n  }\n  if (lambda > Math.abs(x_plus_1 - 1) * MathUtil.LOG2 * Double.MAX_EXPONENT / 1e-14) {\n    return -lambda - GammaDistribution.logGamma(x_plus_1);\n  }\n else {\n    return rawLogProbability(x_plus_1,lambda) + Math.log(x_plus_1 / lambda);\n  }\n}"}
{"ids": "45480", "raw_code": "public void checkAndNotify(){\n  for (  FileAlterationListener listener : listeners) {\n    listener.onStart(this);\n  }\n  File rootFile=rootEntry.getFile();\n  if (rootFile.exists()) {\n    checkAndNotify(rootEntry,rootEntry.getChildren(),listFiles(rootFile));\n  }\n else   if (rootEntry.isExists()) {\n    checkAndNotify(rootEntry,rootEntry.getChildren(),FileUtils.EMPTY_FILE_ARRAY);\n  }\n else {\n  }\n  for (  FileAlterationListener listener : listeners) {\n    listener.onStop(this);\n  }\n}"}
{"ids": "35193", "raw_code": "private double allowableError(int rank){\n  int size=samples.size();\n  final double error=calculateError(rank,size);\n  final double minError=size + 1;\n  if (error < minError) {\n    return error;\n  }\n  return minError;\n}"}
{"ids": "64401", "raw_code": "public RetryPolicy withMaxDuration(long maxDuration,TimeUnit timeUnit){\n  Assert.notNull(timeUnit,\"timeUnit\");\n  Assert.state(timeUnit.toNanos(maxDuration) > delay.toNanos(),\"maxDuration must be greater than the delay\");\n  this.maxDuration=new Duration(maxDuration,timeUnit);\n  return this;\n}"}
{"ids": "1865", "raw_code": "private static final void cleanupNamespaceNodes(ZooKeeper zkc,String root,String selfBrokerUrl) throws Exception {\n  for (  String node : zkc.getChildren(root,false)) {\n    String currentPath=root + \"/\" + node;\n    List<String> children=zkc.getChildren(currentPath,false);\n    if (children.size() == 0) {\n      cleanupSingleNamespaceNode(zkc,currentPath,selfBrokerUrl);\n    }\n else {\n      cleanupNamespaceNodes(zkc,currentPath,selfBrokerUrl);\n    }\n  }\n}"}
{"ids": "74514", "raw_code": "String validateLogixReference(String name){\n  Logix l=null;\n  if (name != null) {\n    if (name.length() > 0) {\n      l=_logixManager.getByUserName(name);\n      if (l != null) {\n        return name;\n      }\n    }\n    l=_logixManager.getBySystemName(name);\n  }\n  if (l == null) {\n    messageInvalidActionItemName(name,\"Logix\");\n    return null;\n  }\n  return name;\n}"}
{"ids": "36557", "raw_code": "protected void clearMenuSelection(){\n  popupMenuGroup.clearSelection();\n  updateSelectionStatus();\n}"}
{"ids": "83151", "raw_code": "public double distance(LatLng ll){\n  double er=6366.707;\n  double latFrom=Math.toRadians(getLat());\n  double latTo=Math.toRadians(ll.getLat());\n  double lngFrom=Math.toRadians(getLng());\n  double lngTo=Math.toRadians(ll.getLng());\n  double d=Math.acos(Math.sin(latFrom) * Math.sin(latTo) + Math.cos(latFrom) * Math.cos(latTo) * Math.cos(lngTo - lngFrom)) * er;\n  return d;\n}"}
{"ids": "78437", "raw_code": "@Override public Integer[] applyControlsToImpact(int riskType,CnATreeElement asset,Integer impactC,Integer impactI,Integer impactA){\n  if (riskType == RISK_PRE_CONTROLS) {\n    return null;\n  }\n  asset=Retriever.checkRetrieveLinks(asset,true);\n  Map<CnATreeElement,CnALink> linkedElements=CnALink.getLinkedElements(asset,Control.TYPE_ID);\n  Integer impactC0=Integer.valueOf(impactC.intValue());\n  Integer impactI0=Integer.valueOf(impactI.intValue());\n  Integer impactA0=Integer.valueOf(impactA.intValue());\nswitch (riskType) {\ncase RISK_WITH_IMPLEMENTED_CONTROLS:\n    for (    CnATreeElement control : linkedElements.keySet()) {\n      control=Retriever.checkRetrieveElement(control);\n      if (Control.isImplemented(control.getEntity())) {\n        impactC0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_C);\n        impactI0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_I);\n        impactA0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_A);\n      }\n    }\n  break;\ncase RISK_WITH_ALL_CONTROLS:\nfor (CnATreeElement control : linkedElements.keySet()) {\n  control=Retriever.checkRetrieveElement(control);\n  impactC0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_C);\n  impactI0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_I);\n  impactA0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_A);\n}\nbreak;\ncase RISK_WITHOUT_NA_CONTROLS:\nfor (CnATreeElement control : linkedElements.keySet()) {\ncontrol=Retriever.checkRetrieveElement(control);\nif (Control.isPlanned(control.getEntity())) {\nimpactC0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_C);\nimpactI0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_I);\nimpactA0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_A);\n}\n}\nbreak;\ndefault :\nbreak;\n}\nimpactC0=(impactC0.intValue() < 0) ? Integer.valueOf(0) : impactC0;\nimpactI0=(impactI0.intValue() < 0) ? Integer.valueOf(0) : impactI0;\nimpactA0=(impactA0.intValue() < 0) ? Integer.valueOf(0) : impactA0;\nreturn new Integer[]{impactC0,impactI0,impactA0};\n}"}
{"ids": "35212", "raw_code": "public static String encode(String encode){\n  StringBuilder str=new StringBuilder(encode);\n  String key;\n  int i=0;\n  while (i < str.length()) {\n    key=findValue(str.charAt(i));\n    if (key != null) {\n      str.replace(i,i + 1,key);\n      i+=key.length();\n    }\n else {\n      i++;\n    }\n  }\n  return str.toString();\n}"}
{"ids": "24373", "raw_code": "protected static Boolean tryToLock(String serviceName){\n  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);\n  boolean locked=service.lock(\"obj\",1000,-1);\n  if (locked) {\n    service.unlock(\"obj\");\n  }\n  return Boolean.valueOf(locked);\n}"}
{"ids": "11357", "raw_code": "public int hashCode(){\n  LatLonPoint llp=getLocation();\n  int hc1=Float.floatToIntBits(llp.getLatitude());\n  int hc2=Float.floatToIntBits(llp.getLongitude());\n  return hc1 ^ (hc2 << 5) ^ (hc2 >>> 27);\n}"}
{"ids": "57465", "raw_code": "private XPathFactory loadFromServicesFile(String uri,String resourceName,InputStream in){\n  if (debug)   debugPrintln(\"Reading \" + resourceName);\n  BufferedReader rd;\n  try {\n    rd=new BufferedReader(new InputStreamReader(in,\"UTF-8\"),DEFAULT_LINE_LENGTH);\n  }\n catch (  java.io.UnsupportedEncodingException e) {\n    rd=new BufferedReader(new InputStreamReader(in),DEFAULT_LINE_LENGTH);\n  }\n  String factoryClassName;\n  XPathFactory resultFactory=null;\n  while (true) {\n    try {\n      factoryClassName=rd.readLine();\n    }\n catch (    IOException x) {\n      break;\n    }\n    if (factoryClassName != null) {\n      int hashIndex=factoryClassName.indexOf('#');\n      if (hashIndex != -1) {\n        factoryClassName=factoryClassName.substring(0,hashIndex);\n      }\n      factoryClassName=factoryClassName.trim();\n      if (factoryClassName.length() == 0) {\n        continue;\n      }\n      try {\n        XPathFactory foundFactory=createInstance(factoryClassName);\n        if (foundFactory.isObjectModelSupported(uri)) {\n          resultFactory=foundFactory;\n          break;\n        }\n      }\n catch (      Exception ignored) {\n      }\n    }\n else {\n      break;\n    }\n  }\n  IoUtils.closeQuietly(rd);\n  return resultFactory;\n}"}
{"ids": "63892", "raw_code": "private synchronized void _stop(){\n  while (m_activities.size() > 0) {\n    Activity a=(Activity)m_activities.get(m_activities.size() - 1);\n    a.cancel();\n  }\n  _setRunning(false);\n  notify();\n}"}
{"ids": "27076", "raw_code": "public RhythmGroup makeGroup(String title){\n  final RhythmGroup group=new RhythmGroup();\n  group.mTitle=title;\n  group.mIndex=mRhythmGroups.size();\n  group.mControl=this;\n  mRhythmGroups.add(group);\n  if (mCurrentNotificationGroupIndex == NOTIFICATION_NO_GROUPS) {\n    mCurrentNotificationGroupIndex=0;\n    requestNotificationUpdate();\n  }\n  return group;\n}"}
{"ids": "52352", "raw_code": "public void writeTo(final OutputStream out) throws IOException {\n  for (  final Block block : blocks) {\n    out.write(block.data,0,block.limit);\n  }\n}"}
{"ids": "32911", "raw_code": "public KMP(String pat){\n  this.R=256;\n  this.pat=pat;\n  int m=pat.length();\n  dfa=new int[R][m];\n  dfa[pat.charAt(0)][0]=1;\n  for (int x=0, j=1; j < m; j++) {\n    for (int c=0; c < R; c++)     dfa[c][j]=dfa[c][x];\n    dfa[pat.charAt(j)][j]=j + 1;\n    x=dfa[pat.charAt(j)][x];\n  }\n}"}
{"ids": "51665", "raw_code": "private void loadConfiguration(){\n  mClientId=mConfigurationManager.getString(PREF_CLIENT_ID,\"\");\n  mClientKey=mConfigurationManager.getString(PREF_CLIENT_KEY,\"\");\n  Timber.i(\"loaded HoundifyCommandManager configuration\");\n}"}
{"ids": "32008", "raw_code": "public static void putBooleanField(Object obj,long fieldOff,boolean val){\n  UNSAFE.putBoolean(obj,fieldOff,val);\n}"}
{"ids": "3028", "raw_code": "public void sort(Comparator<File> comparator){\nsynchronized (mLock) {\n    Collections.sort(fileList,comparator);\n  }\n  notifyDataSetChanged();\n}"}
{"ids": "39795", "raw_code": "public AcceptRequestInterceptor(final String accept){\n  this.accept=accept;\n  checkArgument(!accept.isEmpty(),\"accept must not be empty\");\n}"}
{"ids": "53117", "raw_code": "private int tailingNonNewline(String str,int off,int len){\n  for (int cnt=0; cnt < len; cnt++) {\n    final int pos=off + (len - 1) - cnt;\n    if (str.charAt(pos) == UNIX_NEWLINE) {\n      return cnt;\n    }\n    if (str.charAt(pos) == CARRIAGE_RETURN) {\n      return cnt;\n    }\n  }\n  return len;\n}"}
{"ids": "27349", "raw_code": "@Override public void reset(){\n  _clear();\n  bnodes=null;\n  bnodesTotalCount=0;\n  bnodesResolvedCount=0;\n  deferredStmts=null;\n  reifiedStmts=null;\n  if (queue != null) {\n    final Future<Void> ft=this.ft;\n    if (ft != null) {\n      ft.cancel(true);\n      this.ft=null;\n    }\n    queue.clear();\n  }\n}"}
{"ids": "86748", "raw_code": "public static byte[] readData(final InputStream input) throws IOException {\n  final byte[] inputBuffer=new byte[BUFFER_LENGTH];\n  final ByteArrayOutputStream byteOutput=new ByteArrayOutputStream(BUFFER_LENGTH);\n  int bytesRead;\n  while ((bytesRead=input.read(inputBuffer)) != -1) {\n    byteOutput.write(inputBuffer,0,bytesRead);\n  }\n  final byte[] r=byteOutput.toByteArray();\n  byteOutput.close();\n  return r;\n}"}
{"ids": "78078", "raw_code": "public static String makeLogTag(Class cls){\n  return makeLogTag(cls.getSimpleName());\n}"}
{"ids": "38907", "raw_code": "@Override public synchronized void println(){\n  print(\"\\n\");\n}"}
{"ids": "30002", "raw_code": "public AbstractSiteMap parseSiteMap(String contentType,byte[] content,URL url) throws UnknownFormatException, IOException {\n  MediaType mediaType=MediaType.parse(contentType);\n  while (mediaType != null && !mediaType.equals(MediaType.OCTET_STREAM)) {\n    if (XML_MEDIA_TYPES.contains(mediaType)) {\n      return processXml(url,content);\n    }\n else     if (TEXT_MEDIA_TYPES.contains(mediaType)) {\n      return processText(url.toString(),content);\n    }\n else     if (GZ_MEDIA_TYPES.contains(mediaType)) {\n      return processGzip(url,content);\n    }\n else {\n      mediaType=MEDIA_TYPE_REGISTRY.getSupertype(mediaType);\n      return parseSiteMap(mediaType.toString(),content,url);\n    }\n  }\n  throw new UnknownFormatException(\"Can't parse a sitemap with the MediaType of: \" + contentType + \" (at: \"+ url+ \")\");\n}"}
{"ids": "72050", "raw_code": "private void createDefaultManagedObject(ManagedObjectDefinition<?,?> d,ManagedObject<?> child,DefaultManagedObject<?,?> dmo){\n  for (  PropertyDefinition<?> pd : d.getAllPropertyDefinitions()) {\n    setPropertyValues(child,pd,dmo);\n  }\n  try {\n    child.commit();\n  }\n catch (  ManagedObjectAlreadyExistsException e) {\n    moaee=e;\n  }\ncatch (  MissingMandatoryPropertiesException e) {\n    mmpe=e;\n  }\ncatch (  ConcurrentModificationException e) {\n    cme=e;\n  }\ncatch (  OperationRejectedException e) {\n    ore=e;\n  }\ncatch (  LdapException e) {\n    ere=e;\n  }\n}"}
{"ids": "82206", "raw_code": "static String omitQuotesIfExist(String str){\n  if (str == null) {\n    return null;\n  }\n  if (((str.charAt(0) == '\\\"') || (str.charAt(0) == '\\'')) && (str.length() >= 2)) {\n    str=str.substring(1,str.length() - 1);\n  }\n  return str;\n}"}
{"ids": "42033", "raw_code": "public static byte[] decode(byte[] input,int offset,int len,int flags){\n  Decoder decoder=new Decoder(flags,new byte[len * 3 / 4]);\n  if (!decoder.process(input,offset,len,true)) {\n    throw new IllegalArgumentException(\"bad base-64\");\n  }\n  if (decoder.op == decoder.output.length) {\n    return decoder.output;\n  }\n  byte[] temp=new byte[decoder.op];\n  System.arraycopy(decoder.output,0,temp,0,decoder.op);\n  return temp;\n}"}
{"ids": "70131", "raw_code": "private static boolean canCompleteNodePath(Entity start,Entity end,ArrayList<Entity> network,int startPosition,List<ECMInfo> allECMInfo){\n  Entity spotter=network.get(startPosition);\n  ECMInfo spotterStartECM=ComputeECM.getECMEffects(spotter,start.getPosition(),spotter.getPosition(),true,allECMInfo);\n  boolean isC3BDefeated=start.hasBoostedC3() && (spotterStartECM != null) && spotterStartECM.isAngelECM();\n  boolean isNovaDefeated=start.hasNovaCEWS() && (spotterStartECM != null) && spotterStartECM.isNovaECM();\n  boolean isC3Defeated=!(start.hasBoostedC3() || start.hasNovaCEWS()) && (spotterStartECM != null) && spotterStartECM.isECM();\n  if (isC3BDefeated || isNovaDefeated || isC3Defeated) {\n    return false;\n  }\n  ECMInfo spotterEndECM=ComputeECM.getECMEffects(spotter,spotter.getPosition(),end.getPosition(),true,allECMInfo);\n  isC3BDefeated=start.hasBoostedC3() && (spotterEndECM != null) && spotterEndECM.isAngelECM();\n  isNovaDefeated=start.hasNovaCEWS() && (spotterEndECM != null) && spotterEndECM.isNovaECM();\n  isC3Defeated=!(start.hasBoostedC3() || start.hasNovaCEWS()) && (spotterEndECM != null) && spotterEndECM.isECM();\n  if (!(isC3BDefeated || isNovaDefeated || isC3Defeated)) {\n    return true;\n  }\n  for (++startPosition; startPosition < network.size(); startPosition++) {\n    if (Compute.canCompleteNodePath(spotter,end,network,startPosition,allECMInfo)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "47372", "raw_code": "static void make72Safe(StringBuffer line){\n  int length=line.length();\n  if (length > 72) {\n    int index=70;\n    while (index < length - 2) {\n      line.insert(index,\"\\r\\n \");\n      index+=72;\n      length+=3;\n    }\n  }\n  return;\n}"}
{"ids": "48456", "raw_code": "@Override public int last(){\n  CharacterIterator t=getText();\n  t.setIndex(t.getEndIndex());\n  return t.getIndex();\n}"}
{"ids": "4679", "raw_code": "public static void registerProtocol(final String id,final Protocol protocol){\n  if (id == null) {\n    throw new IllegalArgumentException(\"id is null\");\n  }\n  if (protocol == null) {\n    throw new IllegalArgumentException(\"protocol is null\");\n  }\n  PROTOCOLS.put(id,protocol);\n}"}
{"ids": "77695", "raw_code": "public static String linkHTML(String text){\n  if (text == null || text.length() == 0) {\n    return \"\";\n  }\n  boolean http=text.indexOf(\"http\") != -1;\n  boolean www=text.indexOf(\"www.\") != -1;\n  boolean email=text.indexOf(\"@\") != -1;\n  if (!http && !www && !email) {\n    return text;\n  }\n  if (text.indexOf(\"<\") != -1 && text.indexOf(\">\") != -1) {\n    return text;\n  }\n  if (http) {\n    Matcher matcher=httpRegex.matcher(text);\n    StringBuffer sb=new StringBuffer();\n    while (matcher.find()) {\n      String url=matcher.group();\n      if (url.indexOf(\".png\") != -1 || url.indexOf(\".jpg\") != -1 || url.indexOf(\".jpeg\") != -1 || url.indexOf(\".gif\") != -1) {\n        url=\"<a href='\" + url + \"' target='_blank'><img src='\"+ url+ \"' height='50'></a>\";\n      }\n else       if (url.indexOf(\".mp4\") != -1 || url.indexOf(\".webm\") != -1 || url.indexOf(\".ogg\") != -1) {\n        url=\"<a href='\" + url + \"' target='_blank'><video src='\"+ url+ \"' height='50'></a>\";\n      }\n else       if (url.indexOf(\".wav\") != -1 || url.indexOf(\".mp3\") != -1) {\n        url=\"<a href='\" + url + \"' target='_blank'><audio src='\"+ url+ \"' controls>audio</a>\";\n      }\n else {\n        url=\"<a href='\" + url + \"' target='_blank'>\"+ url+ \"</a>\";\n      }\n      matcher.appendReplacement(sb,url);\n    }\n    matcher.appendTail(sb);\n    text=sb.toString();\n  }\n else   if (www) {\n    Matcher matcher=wwwRegex.matcher(text);\n    StringBuffer sb=new StringBuffer();\n    while (matcher.find()) {\n      String url=matcher.group();\n      matcher.appendReplacement(sb,\"<a href='http://\" + url + \"' target='_blank'>\"+ url+ \"</a>\");\n    }\n    matcher.appendTail(sb);\n    text=sb.toString();\n  }\n  if (email) {\n    Matcher matcher=emailRegex.matcher(text);\n    StringBuffer sb=new StringBuffer();\n    while (matcher.find()) {\n      String address=matcher.group();\n      matcher.appendReplacement(sb,\"<a href='mailto://\" + address + \"' target='_blank'>\"+ address+ \"</a>\");\n    }\n    matcher.appendTail(sb);\n    text=sb.toString();\n  }\n  return text;\n}"}
{"ids": "70766", "raw_code": "public static int hash(String key,int bitSize,String input,String hashType){\n  int bitLimitedHash;\n  try {\n    MessageDigest md=MessageDigest.getInstance(hashType);\n    byte[] array=md.digest(input.getBytes());\n    int hashInt=fromByteArray(array);\n    bitLimitedHash=hashInt;\n    if (bitSize < 32) {\n      bitLimitedHash=(0xFFFFFFFF >>> (32 - bitSize)) & hashInt;\n    }\n    logger.debug(\"hashInt = \" + hashInt + \" bitLimitedHash = \"+ bitLimitedHash);\n  }\n catch (  NoSuchAlgorithmException e) {\n    logger.info(e.toString());\n    bitLimitedHash=hash(key,bitSize,input);\n  }\n  return bitLimitedHash;\n}"}
{"ids": "57259", "raw_code": "private OFFactory computeInitialFactory(Set<OFVersion> ofVersions){\n  if (ofVersions == null || ofVersions.isEmpty()) {\n    throw new IllegalStateException(\"OpenFlow version list should never be null or empty at this point. Make sure it's set in the OFSwitchManager.\");\n  }\n  OFVersion highest=null;\n  for (  OFVersion v : ofVersions) {\n    if (highest == null) {\n      highest=v;\n    }\n else     if (v.compareTo(highest) > 0) {\n      highest=v;\n    }\n  }\n  return OFFactories.getFactory(highest);\n}"}
{"ids": "31664", "raw_code": "private void loadJettyConfiguration(@Nullable URL cfgUrl) throws IgniteCheckedException {\n  if (cfgUrl == null) {\n    HttpConfiguration httpCfg=new HttpConfiguration();\n    httpCfg.setSecureScheme(\"https\");\n    httpCfg.setSecurePort(8443);\n    httpCfg.setSendServerVersion(true);\n    httpCfg.setSendDateHeader(true);\n    String srvPortStr=System.getProperty(IGNITE_JETTY_PORT,\"8080\");\n    int srvPort;\n    try {\n      srvPort=Integer.parseInt(srvPortStr);\n    }\n catch (    NumberFormatException ignore) {\n      throw new IgniteCheckedException(\"Failed to start Jetty server because IGNITE_JETTY_PORT system property \" + \"cannot be cast to integer: \" + srvPortStr);\n    }\n    httpSrv=new Server(new QueuedThreadPool(200,20));\n    ServerConnector srvConn=new ServerConnector(httpSrv,new HttpConnectionFactory(httpCfg));\n    srvConn.setHost(System.getProperty(IGNITE_JETTY_HOST,\"localhost\"));\n    srvConn.setPort(srvPort);\n    srvConn.setIdleTimeout(30000L);\n    srvConn.setReuseAddress(true);\n    httpSrv.addConnector(srvConn);\n    httpSrv.setStopAtShutdown(false);\n  }\n else {\n    XmlConfiguration cfg;\n    try {\n      cfg=new XmlConfiguration(cfgUrl);\n    }\n catch (    FileNotFoundException e) {\n      throw new IgniteSpiException(\"Failed to find configuration file: \" + cfgUrl,e);\n    }\ncatch (    SAXException e) {\n      throw new IgniteSpiException(\"Failed to parse configuration file: \" + cfgUrl,e);\n    }\ncatch (    IOException e) {\n      throw new IgniteSpiException(\"Failed to load configuration file: \" + cfgUrl,e);\n    }\ncatch (    Exception e) {\n      throw new IgniteSpiException(\"Failed to start HTTP server with configuration file: \" + cfgUrl,e);\n    }\n    try {\n      httpSrv=(Server)cfg.configure();\n    }\n catch (    Exception e) {\n      throw new IgniteCheckedException(\"Failed to start Jetty HTTP server.\",e);\n    }\n  }\n  assert httpSrv != null;\n  httpSrv.setHandler(jettyHnd);\n  override(getJettyConnector());\n}"}
{"ids": "49567", "raw_code": "public byte[] encodeFrame(){\n  int length=this.payload.length + frameLengthOverhead;\n  if (this.payload.length > 65535) {\n    length+=8;\n  }\n else   if (this.payload.length >= 126) {\n    length+=2;\n  }\n  ByteBuffer buffer=ByteBuffer.allocate(length);\n  appendFinAndOpCode(buffer,this.opcode,this.fin);\n  byte mask[]=generateMaskingKey();\n  appendLengthAndMask(buffer,this.payload.length,mask);\n  for (int i=0; i < this.payload.length; i++) {\n    buffer.put((byte)(this.payload[i]^=mask[i % 4]));\n  }\n  buffer.flip();\n  return buffer.array();\n}"}
{"ids": "77818", "raw_code": "public static void preloadIcon(Context context,ComponentName componentName,Bitmap icon,int dpi){\n  try {\n    PackageManager packageManager=context.getPackageManager();\n    packageManager.getActivityIcon(componentName);\n    return;\n  }\n catch (  PackageManager.NameNotFoundException e) {\n  }\n  final String key=componentName.flattenToString();\n  FileOutputStream resourceFile=null;\n  try {\n    resourceFile=context.openFileOutput(getResourceFilename(componentName),Context.MODE_PRIVATE);\n    ByteArrayOutputStream os=new ByteArrayOutputStream();\n    if (icon.compress(android.graphics.Bitmap.CompressFormat.PNG,75,os)) {\n      byte[] buffer=os.toByteArray();\n      resourceFile.write(buffer,0,buffer.length);\n    }\n else {\n      Log.w(TAG,\"failed to encode cache for \" + key);\n      return;\n    }\n  }\n catch (  FileNotFoundException e) {\n    Log.w(TAG,\"failed to pre-load cache for \" + key,e);\n  }\ncatch (  IOException e) {\n    Log.w(TAG,\"failed to pre-load cache for \" + key,e);\n  }\n finally {\n    if (resourceFile != null) {\n      try {\n        resourceFile.close();\n      }\n catch (      IOException e) {\n        Log.d(TAG,\"failed to save restored icon for: \" + key,e);\n      }\n    }\n  }\n}"}
{"ids": "68053", "raw_code": "public void normalize(){\n  StringBuilder sb=new StringBuilder();\n  for (  String v : values) {\n    sb.append(v);\n  }\n  values.clear();\n  values.add(sb.toString());\n  compacted=false;\n}"}
{"ids": "14058", "raw_code": "public void addAttribute(String key,String value){\n  extraSessionAttributes.put(key,value);\n}"}
{"ids": "55559", "raw_code": "String capitalise(final String s){\n  if (s.length() == 0) {\n    return s;\n  }\n  final StringBuffer s1=new StringBuffer(s);\n  if (Character.isLowerCase(s1.charAt(0))) {\n    s1.setCharAt(0,Character.toUpperCase(s1.charAt(0)));\n  }\n  for (int j=1; j < s1.length(); j++) {\n    if (Character.isUpperCase(s1.charAt(j))) {\n      s1.setCharAt(j,Character.toLowerCase(s1.charAt(j)));\n    }\n  }\n  return s1.toString();\n}"}
{"ids": "61177", "raw_code": "public void recompose(Vector recomposableElements) throws TransformerException {\n  int n=getIncludeCountComposed();\n  for (int i=-1; i < n; i++) {\n    Stylesheet included=getIncludeComposed(i);\n    int s=included.getOutputCount();\n    for (int j=0; j < s; j++) {\n      recomposableElements.addElement(included.getOutput(j));\n    }\n    s=included.getAttributeSetCount();\n    for (int j=0; j < s; j++) {\n      recomposableElements.addElement(included.getAttributeSet(j));\n    }\n    s=included.getDecimalFormatCount();\n    for (int j=0; j < s; j++) {\n      recomposableElements.addElement(included.getDecimalFormat(j));\n    }\n    s=included.getKeyCount();\n    for (int j=0; j < s; j++) {\n      recomposableElements.addElement(included.getKey(j));\n    }\n    s=included.getNamespaceAliasCount();\n    for (int j=0; j < s; j++) {\n      recomposableElements.addElement(included.getNamespaceAlias(j));\n    }\n    s=included.getTemplateCount();\n    for (int j=0; j < s; j++) {\n      recomposableElements.addElement(included.getTemplate(j));\n    }\n    s=included.getVariableOrParamCount();\n    for (int j=0; j < s; j++) {\n      recomposableElements.addElement(included.getVariableOrParam(j));\n    }\n    s=included.getStripSpaceCount();\n    for (int j=0; j < s; j++) {\n      recomposableElements.addElement(included.getStripSpace(j));\n    }\n    s=included.getPreserveSpaceCount();\n    for (int j=0; j < s; j++) {\n      recomposableElements.addElement(included.getPreserveSpace(j));\n    }\n  }\n}"}
{"ids": "71200", "raw_code": "private Geometry unionActual(Geometry g0,Geometry g1){\n  return restrictToPolygons(g0.union(g1));\n}"}
{"ids": "50880", "raw_code": "public boolean supports(@MagicConstant(flagsFromClass=Features.class) int capability){\n  IAndroidTarget target=getTarget();\n  if (target != null) {\n    return RenderService.supportsCapability(getModule(),target,capability);\n  }\n  return false;\n}"}
{"ids": "69884", "raw_code": "@Override public void transactionAborted(){\n  if (listeners.isEmpty()) {\n    records.reset();\n  }\n else {\n    records.flush();\n    listeners.forEach(null);\n  }\n}"}
{"ids": "81680", "raw_code": "@Override public boolean add(E o){\n  if (null == o) {\n    throw new NullPointerException();\n  }\n  if (offer(o)) {\n    return true;\n  }\n  throw new IllegalStateException();\n}"}
{"ids": "7567", "raw_code": "public StandardCrosshairLabelGenerator(){\n  this(\"{0}\",NumberFormat.getNumberInstance());\n}"}
{"ids": "21486", "raw_code": "private URI createEthernetStoragePort(Map<String,Object> keyMap,StoragePort port,String name,String portInstanceID,List<StoragePort> newPorts,List<StoragePort> existingPorts) throws IOException {\n  StoragePort portinMemory=(StoragePort)keyMap.get(portInstanceID);\n  if (null == port) {\n    portinMemory.setPortNetworkId(name);\n    portinMemory.setPortEndPointID(name);\n    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(_dbClient,portinMemory);\n    portinMemory.setNativeGuid(portNativeGuid);\n    portinMemory.setLabel(portNativeGuid);\n    _dbClient.createObject(portinMemory);\n    newPorts.add(portinMemory);\n    return portinMemory.getId();\n  }\n else {\n    port.setPortName(portinMemory.getPortName());\n    port.setPortSpeed(portinMemory.getPortSpeed());\n    port.setPortEndPointID(name);\n    port.setCompatibilityStatus(portinMemory.getCompatibilityStatus());\n    port.setDiscoveryStatus(portinMemory.getDiscoveryStatus());\n    port.setOperationalStatus(portinMemory.getOperationalStatus());\n    port.setPortType(portinMemory.getPortType());\n    _dbClient.persistObject(port);\n    existingPorts.add(port);\n    return port.getId();\n  }\n}"}
{"ids": "13517", "raw_code": "default int add(Item stack){\n  int itemsLeft=stack.count();\n  for (int i=0; i < size(); i++) {\n    itemsLeft=add(i,stack.withAmount(itemsLeft));\n  }\n  if (itemsLeft != stack.count()) {\n    markChanged();\n  }\n  return itemsLeft;\n}"}
{"ids": "7368", "raw_code": "public void mark(long n){\n  count.addAndGet(n);\n  m1Rate.update(n);\n  m5Rate.update(n);\n  m15Rate.update(n);\n}"}
{"ids": "74603", "raw_code": "public String[] readAllLines(){\n  ArrayList<String> lines=new ArrayList<String>();\n  while (hasNextLine()) {\n    lines.add(readLine());\n  }\n  return lines.toArray(new String[0]);\n}"}
{"ids": "61419", "raw_code": "public static boolean isAbsolutePath(String systemId){\n  if (systemId == null)   return false;\n  final File file=new File(systemId);\n  return file.isAbsolute();\n}"}
{"ids": "4592", "raw_code": "protected QualifiedItem[] parseQualifiedItems(final VersionSpec defaultVersion,final boolean allowVersionRange,final int startIndex){\n  return parseQualifiedItems(getFreeArguments(),defaultVersion,allowVersionRange,startIndex);\n}"}
{"ids": "33213", "raw_code": "public void changeChangeEnabled(ChangeEnabledState state) throws RefactoringException {\n  RefactoringSession session=getRefactoringSession(state.getSessionId());\n  session.updateChangeEnabled(state.getChangeId(),state.isEnabled());\n}"}
{"ids": "35589", "raw_code": "public UpdateBuilder bindUris(String from,Collection<String> uris){\n  return bindUris(from,uris,\"\");\n}"}
{"ids": "8684", "raw_code": "private int[] findNearestArea(int pixelX,int pixelY,int minSpanX,int minSpanY,int spanX,int spanY,boolean ignoreOccupied,int[] result,int[] resultSpan){\n  lazyInitTempRectStack();\n  pixelX-=(mCellWidth + mWidthGap) * (spanX - 1) / 2f;\n  pixelY-=(mCellHeight + mHeightGap) * (spanY - 1) / 2f;\n  final int[] bestXY=result != null ? result : new int[2];\n  double bestDistance=Double.MAX_VALUE;\n  final Rect bestRect=new Rect(-1,-1,-1,-1);\n  final Stack<Rect> validRegions=new Stack<Rect>();\n  final int countX=mCountX;\n  final int countY=mCountY;\n  if (minSpanX <= 0 || minSpanY <= 0 || spanX <= 0 || spanY <= 0 || spanX < minSpanX || spanY < minSpanY) {\n    return bestXY;\n  }\n  for (int y=0; y < countY - (minSpanY - 1); y++) {\n    inner:     for (int x=0; x < countX - (minSpanX - 1); x++) {\n      int ySize=-1;\n      int xSize=-1;\n      if (ignoreOccupied) {\n        for (int i=0; i < minSpanX; i++) {\n          for (int j=0; j < minSpanY; j++) {\n            if (mOccupied[x + i][y + j]) {\n              continue inner;\n            }\n          }\n        }\n        xSize=minSpanX;\n        ySize=minSpanY;\n        boolean incX=true;\n        boolean hitMaxX=xSize >= spanX;\n        boolean hitMaxY=ySize >= spanY;\n        while (!(hitMaxX && hitMaxY)) {\n          if (incX && !hitMaxX) {\n            for (int j=0; j < ySize; j++) {\n              if (x + xSize > countX - 1 || mOccupied[x + xSize][y + j]) {\n                hitMaxX=true;\n              }\n            }\n            if (!hitMaxX) {\n              xSize++;\n            }\n          }\n else           if (!hitMaxY) {\n            for (int i=0; i < xSize; i++) {\n              if (y + ySize > countY - 1 || mOccupied[x + i][y + ySize]) {\n                hitMaxY=true;\n              }\n            }\n            if (!hitMaxY) {\n              ySize++;\n            }\n          }\n          hitMaxX|=xSize >= spanX;\n          hitMaxY|=ySize >= spanY;\n          incX=!incX;\n        }\n        incX=true;\n        hitMaxX=xSize >= spanX;\n        hitMaxY=ySize >= spanY;\n      }\n      final int[] cellXY=mTmpPoint;\n      cellToCenterPoint(x,y,cellXY);\n      Rect currentRect=mTempRectStack.pop();\n      currentRect.set(x,y,x + xSize,y + ySize);\n      boolean contained=false;\n      for (      Rect r : validRegions) {\n        if (r.contains(currentRect)) {\n          contained=true;\n          break;\n        }\n      }\n      validRegions.push(currentRect);\n      double distance=Math.hypot(cellXY[0] - pixelX,cellXY[1] - pixelY);\n      if ((distance <= bestDistance && !contained) || currentRect.contains(bestRect)) {\n        bestDistance=distance;\n        bestXY[0]=x;\n        bestXY[1]=y;\n        if (resultSpan != null) {\n          resultSpan[0]=xSize;\n          resultSpan[1]=ySize;\n        }\n        bestRect.set(currentRect);\n      }\n    }\n  }\n  if (bestDistance == Double.MAX_VALUE) {\n    bestXY[0]=-1;\n    bestXY[1]=-1;\n  }\n  recycleTempRects(validRegions);\n  return bestXY;\n}"}
{"ids": "24958", "raw_code": "public void validationStatesRemoved(K key){\n  hideMessage(key);\n  validationErrorStates.remove(key);\n  notifyUpstream(key,Collections.<ValidationState>emptySet());\n}"}
{"ids": "77944", "raw_code": "public void killApplication(String applicationId) throws IOException, YarnException {\n  log.info(\"killing job with application id: \" + applicationId);\n  yarnClient.killApplication(getApplicationIDFromString(applicationId));\n}"}
{"ids": "5766", "raw_code": "public static String convert(String prefix){\n  StringBuilder sb=new StringBuilder();\n  prefix=prefix.replace('\\n',';');\n  String[] lines=prefix.split(\"[;]\");\n  for (  String line : lines) {\n    List<String> tokens=new ArrayList<String>();\n    char[] c=UnsafeString.getChars(line);\n    int lastidx=0;\n    int idx=0;\n    while (idx < c.length) {\n      while (c[idx] != '(' && c[idx] != ')' && c[idx] != ',') {\n        idx++;\n      }\n      if (idx != lastidx) {\n        tokens.add(new String(c,lastidx,idx - lastidx));\n      }\n      idx++;\n      lastidx=idx;\n    }\n    Collections.reverse(tokens);\n    for (    String token : tokens) {\n      sb.append(token);\n      sb.append(\"\\n\");\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "1345", "raw_code": "public boolean toBoolean(Element el,String attributeName,boolean defaultValue){\n  String value=el.getAttribute(attributeName);\n  if (value == null)   return defaultValue;\n  return Caster.toBooleanValue(value,false);\n}"}
{"ids": "13315", "raw_code": "protected void serializePreRoot() throws IOException {\n  int i;\n  if (_preRoot != null) {\n    for (i=0; i < _preRoot.size(); ++i) {\n      printText((String)_preRoot.elementAt(i),true,true);\n      if (_indenting)       _printer.breakLine();\n    }\n    _preRoot.removeAllElements();\n  }\n}"}
{"ids": "56773", "raw_code": "private void createSchemaColumnEntities(List<SchemaColumn> schemaColumns,boolean isPartitionList,Collection<SchemaColumnEntity> schemaColumnEntityList,Map<String,SchemaColumnEntity> schemaColumnEntityMap,BusinessObjectFormatEntity businessObjectFormatEntity){\n  if (!CollectionUtils.isEmpty(schemaColumns)) {\n    int position=1;\n    for (    SchemaColumn schemaColumn : schemaColumns) {\n      SchemaColumnEntity schemaColumnEntity=schemaColumnEntityMap.get(schemaColumn.getName());\n      if (schemaColumnEntity == null) {\n        schemaColumnEntity=createSchemaColumnEntity(schemaColumn,businessObjectFormatEntity);\n        schemaColumnEntityList.add(schemaColumnEntity);\n        schemaColumnEntityMap.put(schemaColumn.getName(),schemaColumnEntity);\n      }\n      if (isPartitionList) {\n        schemaColumnEntity.setPartitionLevel(position++);\n      }\n else {\n        schemaColumnEntity.setPosition(position++);\n      }\n    }\n  }\n}"}
{"ids": "42708", "raw_code": "public static <T>String joinAnd(final String delimiter,final String lastDelimiter,final Collection<T> objs){\n  if (objs == null || objs.isEmpty())   return \"\";\n  final Iterator<T> iter=objs.iterator();\n  final StringBuilder buffer=new StringBuilder();\n  while (iter.hasNext()) {\n    final T obj=iter.next();\n    if (notEmpty(obj)) {\n      if (buffer.length() != 0) {\n        buffer.append(iter.hasNext() ? delimiter : lastDelimiter);\n      }\n      buffer.append(Strings.toString(obj));\n    }\n  }\n  return buffer.toString();\n}"}
{"ids": "21695", "raw_code": "public static String generateNativeGuid(DbClient dbClient,Snapshot snapshot) throws IOException {\n  FileShare fs=dbClient.queryObject(FileShare.class,snapshot.getParent());\n  StorageSystem device=dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());\n  return String.format(\"%s+%s+\" + SNAPSHOT + \"+%s\",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber(),snapshot.getNativeId());\n}"}
{"ids": "79309", "raw_code": "public static Map<String,Object> updateFile(DispatchContext dctx,Map<String,? extends Object> context){\n  Map<String,Object> result=null;\n  try {\n    result=updateFileMethod(dctx,context);\n  }\n catch (  GenericServiceException e) {\n    return ServiceUtil.returnError(e.getMessage());\n  }\n  return result;\n}"}
{"ids": "73169", "raw_code": "public EditSensorsDialog(final Collection<Sensor> sensors){\n  super();\n  if (sensors == null) {\n    throw new IllegalArgumentException(\"sensors must not be null\");\n  }\n  this.sensors=sensors;\n  setTitle(\"Edit \" + sensors.size() + \" Sensor(s):\");\n  initComponents();\n  layoutComponents();\n}"}
{"ids": "79859", "raw_code": "@VisibleForTesting synchronized void trimToSize(int targetSize){\n  int bytesToFree=Math.min(mUsed.mNumBytes + mFree.mNumBytes - targetSize,mFree.mNumBytes);\n  if (bytesToFree <= 0) {\n    return;\n  }\n  if (FLog.isLoggable(FLog.VERBOSE)) {\n    FLog.v(TAG,\"trimToSize: TargetSize = %d; Initial Size = %d; Bytes to free = %d\",targetSize,mUsed.mNumBytes + mFree.mNumBytes,bytesToFree);\n  }\n  logStats();\n  for (int i=0; i < mBuckets.size(); ++i) {\n    if (bytesToFree <= 0) {\n      break;\n    }\n    Bucket<V> bucket=mBuckets.valueAt(i);\n    while (bytesToFree > 0) {\n      V value=bucket.pop();\n      if (value == null) {\n        break;\n      }\n      free(value);\n      bytesToFree-=bucket.mItemSize;\n      mFree.decrement(bucket.mItemSize);\n    }\n  }\n  logStats();\n  if (FLog.isLoggable(FLog.VERBOSE)) {\n    FLog.v(TAG,\"trimToSize: TargetSize = %d; Final Size = %d\",targetSize,mUsed.mNumBytes + mFree.mNumBytes);\n  }\n}"}
{"ids": "41158", "raw_code": "@Override public void addFocusables(ArrayList<View> views,int direction,int focusableMode){\n  final int focusableCount=views.size();\n  final int descendantFocusability=getDescendantFocusability();\n  if (descendantFocusability != FOCUS_BLOCK_DESCENDANTS) {\n    for (int i=0; i < getChildCount(); i++) {\n      final View child=getChildAt(i);\n      if (child.getVisibility() == VISIBLE) {\n        ItemInfo ii=infoForChild(child);\n        if (ii != null && ii.position == mCurItem) {\n          child.addFocusables(views,direction,focusableMode);\n        }\n      }\n    }\n  }\n  if (descendantFocusability != FOCUS_AFTER_DESCENDANTS || (focusableCount == views.size())) {\n    if (!isFocusable()) {\n      return;\n    }\n    if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isInTouchMode() && !isFocusableInTouchMode()) {\n      return;\n    }\n    if (views != null) {\n      views.add(this);\n    }\n  }\n}"}
{"ids": "11486", "raw_code": "public String readToDelimiter(char delim) throws FormatException {\n  StringBuffer buildretval=new StringBuffer();\n  char tmp;\n  try {\n    while ((tmp=readChar()) != delim)     buildretval.append(tmp);\n  }\n catch (  EOFException e) {\n  }\ncatch (  FormatException fe) {\n    if (buildretval.length() == 0) {\n      throw fe;\n    }\n  }\n  return buildretval.toString();\n}"}
{"ids": "29836", "raw_code": "private void addNewLineAtTop(RecyclerView.Recycler recycler){\n  int x=layoutStartPoint().x, bottom=getDecoratedTop(getChildAt(getMaxHeightLayoutPositionInLine(0))), y;\n  int height=0;\n  List<View> lineChildren=new LinkedList<>();\n  int currentAdapterPosition=0;\n  int endAdapterPosition=getChildAdapterPosition(0) - 1;\n  Rect rect=new Rect();\n  boolean newline;\n  boolean firstItem=true;\n  LayoutContext layoutContext=LayoutContext.fromLayoutOptions(flowLayoutOptions);\n  int firstItemAdapterPosition=getChildAdapterPosition(0);\n  if (cacheHelper.hasPreviousLineCached(firstItemAdapterPosition)) {\n    int previousLineIndex=cacheHelper.itemLineIndex(firstItemAdapterPosition) - 1;\n    Line previousLine=cacheHelper.getLine(previousLineIndex);\n    int firstNewItemAdapterPosition=cacheHelper.firstItemIndex(previousLineIndex);\n    for (int i=0; i < previousLine.itemCount; i++) {\n      View newView=recycler.getViewForPosition(firstNewItemAdapterPosition + i);\n      addView(newView,i);\n      lineChildren.add(newView);\n    }\n    height=previousLine.maxHeight;\n  }\n else {\n    while (currentAdapterPosition <= endAdapterPosition) {\n      View newChild=recycler.getViewForPosition(currentAdapterPosition);\n      newline=calcChildLayoutRect(newChild,x,0,height,layoutContext,rect);\n      cacheHelper.setItem(currentAdapterPosition,new Point(rect.width(),rect.height()));\n      addView(newChild,lineChildren.size());\n      if (newline && !firstItem) {\n        for (        View viewToRecycle : lineChildren) {\n          removeAndRecycleView(viewToRecycle,recycler);\n        }\n        lineChildren.clear();\n        x=advanceInSameLine(layoutStartPoint().x,rect,layoutContext);\n        height=rect.height();\n        layoutContext.currentLineItemCount=1;\n      }\n else {\n        x=advanceInSameLine(x,rect,layoutContext);\n        height=Math.max(height,rect.height());\n        firstItem=false;\n        layoutContext.currentLineItemCount++;\n      }\n      lineChildren.add(newChild);\n      currentAdapterPosition++;\n    }\n  }\n  x=layoutStartPoint().x;\n  y=bottom - height;\n  firstItem=true;\n  layoutContext=LayoutContext.fromLayoutOptions(flowLayoutOptions);\n  for (int i=0; i < lineChildren.size(); i++) {\n    View childView=lineChildren.get(i);\n    newline=calcChildLayoutRect(childView,x,y,height,layoutContext,rect);\n    if (newline && firstItem) {\n      int rectHeight=rect.height();\n      rect.top-=rectHeight;\n      rect.bottom-=rectHeight;\n      firstItem=false;\n    }\n    layoutDecorated(childView,rect.left,rect.top,rect.right,rect.bottom);\n    x=advanceInSameLine(x,rect,layoutContext);\n  }\n}"}
{"ids": "43863", "raw_code": "protected static final String addEscapes(String str){\n  StringBuffer retval=new StringBuffer();\n  char ch;\n  for (int i=0; i < str.length(); i++) {\nswitch (str.charAt(i)) {\ncase 0:\n      continue;\ncase '\\b':\n    retval.append(\"\\\\b\");\n  continue;\ncase '\\t':\nretval.append(\"\\\\t\");\ncontinue;\ncase '\\n':\nretval.append(\"\\\\n\");\ncontinue;\ncase '\\f':\nretval.append(\"\\\\f\");\ncontinue;\ncase '\\r':\nretval.append(\"\\\\r\");\ncontinue;\ncase '\\\"':\nretval.append(\"\\\\\\\"\");\ncontinue;\ncase '\\'':\nretval.append(\"\\\\\\'\");\ncontinue;\ncase '\\\\':\nretval.append(\"\\\\\\\\\");\ncontinue;\ndefault :\nif ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {\nString s=\"0000\" + Integer.toString(ch,16);\nretval.append(\"\\\\u\" + s.substring(s.length() - 4,s.length()));\n}\n else {\nretval.append(ch);\n}\ncontinue;\n}\n}\nreturn retval.toString();\n}"}
{"ids": "51986", "raw_code": "default T call(SourceSection source,T lhs,T argument1,T argument2){\n  return call(source,lhs,Arrays.asList(argument(argument1),argument(argument2)));\n}"}
{"ids": "70207", "raw_code": "public boolean equalMapGenParameters(MapSettings other){\n  if ((boardWidth != other.getBoardWidth()) || (boardHeight != other.getBoardHeight()) || (mapWidth != other.getMapWidth())|| (mapHeight != other.getMapHeight())|| (invertNegativeTerrain != other.getInvertNegativeTerrain())|| (hilliness != other.getHilliness())|| (cliffs != other.getCliffs())|| (range != other.getRange())|| (minWaterSpots != other.getMinWaterSpots())|| (maxWaterSpots != other.getMaxWaterSpots())|| (minWaterSize != other.getMinWaterSize())|| (maxWaterSize != other.getMaxWaterSize())|| (probDeep != other.getProbDeep())|| (minForestSpots != other.getMinForestSpots())|| (maxForestSpots != other.getMaxForestSpots())|| (minForestSize != other.getMinForestSize())|| (maxForestSize != other.getMaxForestSize())|| (probHeavy != other.getProbHeavy())|| (minRoughSpots != other.getMinRoughSpots())|| (maxRoughSpots != other.getMaxRoughSpots())|| (minRoughSize != other.getMinRoughSize())|| (maxRoughSize != other.getMaxRoughSize())|| (minSandSpots != other.getMinSandSpots())|| (maxSandSpots != other.getMaxSandSpots())|| (minSandSize != other.getMinSandSize())|| (maxSandSize != other.getMaxSandSize())|| (minPlantedFieldSpots != other.getMinPlantedFieldSpots())|| (maxPlantedFieldSpots != other.getMaxPlantedFieldSpots())|| (minPlantedFieldSize != other.getMinPlantedFieldSize())|| (maxPlantedFieldSize != other.getMaxPlantedFieldSize())|| (minSwampSpots != other.getMinSwampSpots())|| (maxSwampSpots != other.getMaxSwampSpots())|| (minSwampSize != other.getMinSwampSize())|| (maxSwampSize != other.getMaxSwampSize())|| (minPavementSpots != other.getMinPavementSpots())|| (maxPavementSpots != other.getMaxPavementSpots())|| (minPavementSize != other.getMinPavementSize())|| (maxPavementSize != other.getMaxPavementSize())|| (minRubbleSpots != other.getMinRubbleSpots())|| (maxRubbleSpots != other.getMaxRubbleSpots())|| (minRubbleSize != other.getMinRubbleSize())|| (maxRubbleSize != other.getMaxRubbleSize())|| (minFortifiedSpots != other.getMinFortifiedSpots())|| (maxFortifiedSpots != other.getMaxFortifiedSpots())|| (minFortifiedSize != other.getMinFortifiedSize())|| (maxFortifiedSize != other.getMaxFortifiedSize())|| (minIceSpots != other.getMinIceSpots())|| (maxIceSpots != other.getMaxIceSpots())|| (minIceSize != other.getMinIceSize())|| (maxIceSize != other.getMaxIceSize())|| (probRoad != other.getProbRoad())|| (probInvert != other.getProbInvert())|| (probRiver != other.getProbRiver())|| (probCrater != other.getProbCrater())|| (minRadius != other.getMinRadius())|| (maxRadius != other.getMaxRadius())|| (minCraters != other.getMinCraters())|| (maxCraters != other.getMaxCraters())|| (!theme.equals(other.getTheme()))|| (fxMod != other.getFxMod())|| (cityBlocks != other.getCityBlocks())|| (cityType != other.getCityType())|| (cityMinCF != other.getCityMinCF())|| (cityMaxCF != other.getCityMaxCF())|| (cityMinFloors != other.getCityMinFloors())|| (cityMaxFloors != other.getCityMaxFloors())|| (cityDensity != other.getCityDensity())|| (probFlood != other.getProbFlood())|| (probForestFire != other.getProbForestFire())|| (probFreeze != other.getProbFreeze())|| (probDrought != other.getProbDrought())|| (algorithmToUse != other.getAlgorithmToUse())|| (mountainHeightMin != other.getMountainHeightMin())|| (mountainHeightMax != other.getMountainHeightMax())|| (mountainPeaks != other.getMountainPeaks())|| (mountainStyle != other.getMountainStyle())|| (mountainWidthMin != other.getMountainWidthMin())|| (mountainWidthMax != other.getMountainWidthMax())|| (boardBuildings != other.getBoardBuildings())) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "31604", "raw_code": "public synchronized void curl(PointF curlPos,PointF curlDir,double radius){\n  if (DRAW_CURL_POSITION) {\n    mBufCurlPositionLines.position(0);\n    mBufCurlPositionLines.put(curlPos.x);\n    mBufCurlPositionLines.put(curlPos.y - 1.0f);\n    mBufCurlPositionLines.put(curlPos.x);\n    mBufCurlPositionLines.put(curlPos.y + 1.0f);\n    mBufCurlPositionLines.put(curlPos.x - 1.0f);\n    mBufCurlPositionLines.put(curlPos.y);\n    mBufCurlPositionLines.put(curlPos.x + 1.0f);\n    mBufCurlPositionLines.put(curlPos.y);\n    mBufCurlPositionLines.put(curlPos.x);\n    mBufCurlPositionLines.put(curlPos.y);\n    mBufCurlPositionLines.put(curlPos.x + curlDir.x * 2);\n    mBufCurlPositionLines.put(curlPos.y + curlDir.y * 2);\n    mBufCurlPositionLines.position(0);\n  }\n  mBufVertices.position(0);\n  mBufColors.position(0);\n  if (DRAW_TEXTURE) {\n    mBufTexCoords.position(0);\n  }\n  double curlAngle=Math.acos(curlDir.x);\n  curlAngle=curlDir.y > 0 ? -curlAngle : curlAngle;\n  mArrTempVertices.addAll(mArrRotatedVertices);\n  mArrRotatedVertices.clear();\n  for (int i=0; i < 4; ++i) {\n    Vertex v=mArrTempVertices.remove(0);\n    v.set(mRectangle[i]);\n    v.translate(-curlPos.x,-curlPos.y);\n    v.rotateZ(-curlAngle);\n    int j=0;\n    for (; j < mArrRotatedVertices.size(); ++j) {\n      Vertex v2=mArrRotatedVertices.get(j);\n      if (v.mPosX > v2.mPosX) {\n        break;\n      }\n      if (v.mPosX == v2.mPosX && v.mPosY > v2.mPosY) {\n        break;\n      }\n    }\n    mArrRotatedVertices.add(j,v);\n  }\n  int lines[][]={{0,1},{0,2},{1,3},{2,3}};\n{\n    Vertex v0=mArrRotatedVertices.get(0);\n    Vertex v2=mArrRotatedVertices.get(2);\n    Vertex v3=mArrRotatedVertices.get(3);\n    double dist2=Math.sqrt((v0.mPosX - v2.mPosX) * (v0.mPosX - v2.mPosX) + (v0.mPosY - v2.mPosY) * (v0.mPosY - v2.mPosY));\n    double dist3=Math.sqrt((v0.mPosX - v3.mPosX) * (v0.mPosX - v3.mPosX) + (v0.mPosY - v3.mPosY) * (v0.mPosY - v3.mPosY));\n    if (dist2 > dist3) {\n      lines[1][1]=3;\n      lines[2][1]=2;\n    }\n  }\n  mVerticesCountFront=mVerticesCountBack=0;\n  if (DRAW_SHADOW) {\n    mArrTempShadowVertices.addAll(mArrDropShadowVertices);\n    mArrTempShadowVertices.addAll(mArrSelfShadowVertices);\n    mArrDropShadowVertices.clear();\n    mArrSelfShadowVertices.clear();\n  }\n  double curlLength=Math.PI * radius;\n  mArrScanLines.clear();\n  if (mMaxCurlSplits > 0) {\n    mArrScanLines.add((double)0);\n  }\n  for (int i=1; i < mMaxCurlSplits; ++i) {\n    mArrScanLines.add((-curlLength * i) / (mMaxCurlSplits - 1));\n  }\n  mArrScanLines.add(mArrRotatedVertices.get(3).mPosX - 1);\n  double scanXmax=mArrRotatedVertices.get(0).mPosX + 1;\n  for (int i=0; i < mArrScanLines.size(); ++i) {\n    double scanXmin=mArrScanLines.get(i);\n    for (int j=0; j < mArrRotatedVertices.size(); ++j) {\n      Vertex v=mArrRotatedVertices.get(j);\n      if (v.mPosX >= scanXmin && v.mPosX <= scanXmax) {\n        Vertex n=mArrTempVertices.remove(0);\n        n.set(v);\n        Array<Vertex> intersections=getIntersections(mArrRotatedVertices,lines,n.mPosX);\n        if (intersections.size() == 1 && intersections.get(0).mPosY > v.mPosY) {\n          mArrOutputVertices.addAll(intersections);\n          mArrOutputVertices.add(n);\n        }\n else         if (intersections.size() <= 1) {\n          mArrOutputVertices.add(n);\n          mArrOutputVertices.addAll(intersections);\n        }\n else {\n          mArrTempVertices.add(n);\n          mArrTempVertices.addAll(intersections);\n        }\n      }\n    }\n    Array<Vertex> intersections=getIntersections(mArrRotatedVertices,lines,scanXmin);\n    if (intersections.size() == 2) {\n      Vertex v1=intersections.get(0);\n      Vertex v2=intersections.get(1);\n      if (v1.mPosY < v2.mPosY) {\n        mArrOutputVertices.add(v2);\n        mArrOutputVertices.add(v1);\n      }\n else {\n        mArrOutputVertices.addAll(intersections);\n      }\n    }\n else     if (intersections.size() != 0) {\n      mArrTempVertices.addAll(intersections);\n    }\n    while (mArrOutputVertices.size() > 0) {\n      Vertex v=mArrOutputVertices.remove(0);\n      mArrTempVertices.add(v);\n      boolean textureFront;\n      if (i == 0) {\n        textureFront=true;\n        mVerticesCountFront++;\n      }\n else       if (i == mArrScanLines.size() - 1 || curlLength == 0) {\n        v.mPosX=-(curlLength + v.mPosX);\n        v.mPosZ=2 * radius;\n        v.mPenumbraX=-v.mPenumbraX;\n        textureFront=false;\n        mVerticesCountBack++;\n      }\n else {\n        double rotY=Math.PI * (v.mPosX / curlLength);\n        v.mPosX=radius * Math.sin(rotY);\n        v.mPosZ=radius - (radius * Math.cos(rotY));\n        v.mPenumbraX*=Math.cos(rotY);\n        v.mColorFactor=(float)(.1f + .9f * Math.sqrt(Math.sin(rotY) + 1));\n        if (v.mPosZ >= radius) {\n          textureFront=false;\n          mVerticesCountBack++;\n        }\n else {\n          textureFront=true;\n          mVerticesCountFront++;\n        }\n      }\n      if (textureFront != mFlipTexture) {\n        v.mTexX*=mTextureRectFront.right;\n        v.mTexY*=mTextureRectFront.bottom;\n        v.mColor=mTexturePage.getColor(CurlPage.SIDE_FRONT);\n      }\n else {\n        v.mTexX*=mTextureRectBack.right;\n        v.mTexY*=mTextureRectBack.bottom;\n        v.mColor=mTexturePage.getColor(CurlPage.SIDE_BACK);\n      }\n      v.rotateZ(curlAngle);\n      v.translate(curlPos.x,curlPos.y);\n      addVertex(v);\n      if (DRAW_SHADOW && v.mPosZ > 0 && v.mPosZ <= radius) {\n        ShadowVertex sv=mArrTempShadowVertices.remove(0);\n        sv.mPosX=v.mPosX;\n        sv.mPosY=v.mPosY;\n        sv.mPosZ=v.mPosZ;\n        sv.mPenumbraX=(v.mPosZ / 2) * -curlDir.x;\n        sv.mPenumbraY=(v.mPosZ / 2) * -curlDir.y;\n        sv.mPenumbraColor=v.mPosZ / radius;\n        int idx=(mArrDropShadowVertices.size() + 1) / 2;\n        mArrDropShadowVertices.add(idx,sv);\n      }\n      if (DRAW_SHADOW && v.mPosZ > radius) {\n        ShadowVertex sv=mArrTempShadowVertices.remove(0);\n        sv.mPosX=v.mPosX;\n        sv.mPosY=v.mPosY;\n        sv.mPosZ=v.mPosZ;\n        sv.mPenumbraX=((v.mPosZ - radius) / 3) * v.mPenumbraX;\n        sv.mPenumbraY=((v.mPosZ - radius) / 3) * v.mPenumbraY;\n        sv.mPenumbraColor=(v.mPosZ - radius) / (2 * radius);\n        int idx=(mArrSelfShadowVertices.size() + 1) / 2;\n        mArrSelfShadowVertices.add(idx,sv);\n      }\n    }\n    scanXmax=scanXmin;\n  }\n  mBufVertices.position(0);\n  mBufColors.position(0);\n  if (DRAW_TEXTURE) {\n    mBufTexCoords.position(0);\n  }\n  if (DRAW_SHADOW) {\n    mBufShadowColors.position(0);\n    mBufShadowVertices.position(0);\n    mDropShadowCount=0;\n    for (int i=0; i < mArrDropShadowVertices.size(); ++i) {\n      ShadowVertex sv=mArrDropShadowVertices.get(i);\n      mBufShadowVertices.put((float)sv.mPosX);\n      mBufShadowVertices.put((float)sv.mPosY);\n      mBufShadowVertices.put((float)sv.mPosZ);\n      mBufShadowVertices.put((float)(sv.mPosX + sv.mPenumbraX));\n      mBufShadowVertices.put((float)(sv.mPosY + sv.mPenumbraY));\n      mBufShadowVertices.put((float)sv.mPosZ);\n      for (int j=0; j < 4; ++j) {\n        double color=SHADOW_OUTER_COLOR[j] + (SHADOW_INNER_COLOR[j] - SHADOW_OUTER_COLOR[j]) * sv.mPenumbraColor;\n        mBufShadowColors.put((float)color);\n      }\n      mBufShadowColors.put(SHADOW_OUTER_COLOR);\n      mDropShadowCount+=2;\n    }\n    mSelfShadowCount=0;\n    for (int i=0; i < mArrSelfShadowVertices.size(); ++i) {\n      ShadowVertex sv=mArrSelfShadowVertices.get(i);\n      mBufShadowVertices.put((float)sv.mPosX);\n      mBufShadowVertices.put((float)sv.mPosY);\n      mBufShadowVertices.put((float)sv.mPosZ);\n      mBufShadowVertices.put((float)(sv.mPosX + sv.mPenumbraX));\n      mBufShadowVertices.put((float)(sv.mPosY + sv.mPenumbraY));\n      mBufShadowVertices.put((float)sv.mPosZ);\n      for (int j=0; j < 4; ++j) {\n        double color=SHADOW_OUTER_COLOR[j] + (SHADOW_INNER_COLOR[j] - SHADOW_OUTER_COLOR[j]) * sv.mPenumbraColor;\n        mBufShadowColors.put((float)color);\n      }\n      mBufShadowColors.put(SHADOW_OUTER_COLOR);\n      mSelfShadowCount+=2;\n    }\n    mBufShadowColors.position(0);\n    mBufShadowVertices.position(0);\n  }\n}"}
{"ids": "78706", "raw_code": "public void saveLockPassword(String password,int quality,boolean isFallback){\n  final byte[] hash=passwordToHash(password);\n  try {\n    RandomAccessFile raf=new RandomAccessFile(sLockPasswordFilename,\"rwd\");\n    try {\n      if (password == null) {\n        raf.setLength(0);\n      }\n else {\n        raf.write(hash,0,hash.length);\n      }\n    }\n  finally {\n      if (raf != null)       raf.close();\n    }\n  }\n catch (  FileNotFoundException fnfe) {\n    LogUtil.e(TAG,\"Unable to save lock pattern to \" + sLockPasswordFilename);\n  }\ncatch (  IOException ioe) {\n    LogUtil.e(TAG,\"Unable to save lock pattern to \" + sLockPasswordFilename);\n  }\n}"}
{"ids": "50489", "raw_code": "public boolean checkUsernameExists(String username) throws DataAccessException {\n  return getUserInfo(username) != null;\n}"}
{"ids": "31496", "raw_code": "public Code39Reader(){\n  usingCheckDigit=false;\n  extendedMode=false;\n}"}
{"ids": "10033", "raw_code": "public static String encode(final List<Position> path,int precision){\n  long lastLat=0;\n  long lastLng=0;\n  final StringBuffer result=new StringBuffer();\n  double factor=Math.pow(10,precision);\n  for (  final Position point : path) {\n    long lat=Math.round(point.getLatitude() * factor);\n    long lng=Math.round(point.getLongitude() * factor);\n    long dLat=lat - lastLat;\n    long dLng=lng - lastLng;\n    encode(dLat,result);\n    encode(dLng,result);\n    lastLat=lat;\n    lastLng=lng;\n  }\n  return result.toString();\n}"}
{"ids": "20604", "raw_code": "public ActivityResolveInfo(ResolveInfo resolveInfo){\n  this.resolveInfo=resolveInfo;\n}"}
{"ids": "4995", "raw_code": "@Override public int compareTo(LibPackage p_other){\n  return pkg_name.compareToIgnoreCase(p_other.pkg_name);\n}"}
{"ids": "77852", "raw_code": "public void writeExif(Bitmap bmap,String exifOutFileName) throws FileNotFoundException, IOException {\n  if (bmap == null || exifOutFileName == null) {\n    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);\n  }\n  OutputStream s=null;\n  try {\n    s=getExifWriterStream(exifOutFileName);\n    bmap.compress(Bitmap.CompressFormat.JPEG,90,s);\n    s.flush();\n  }\n catch (  IOException e) {\n    closeSilently(s);\n    throw e;\n  }\n  s.close();\n}"}
{"ids": "52096", "raw_code": "public double entropy(int[] x){\n  double h=0.0;\n  int n=x.length;\n  double ln2=Math.log(2.0);\n  int n0=0;\n  for (int i=0; i < n; i++) {\n    if (x[i] == 0) {\n      n0++;\n    }\n  }\n  double p;\n  if (n0 == 0 || n0 == n) {\n    return h;\n  }\n else {\n    p=(double)n0 / (double)n;\n    h=-(p * Math.log(p) + (1.0 - p) * Math.log(1.0 - p)) / ln2;\n  }\n  return h;\n}"}
{"ids": "54697", "raw_code": "private String[] addtoSelectionArgs(final String argValue,final String[] selectionArgsIn){\n  String[] selectionArgs=selectionArgsIn;\n  List<String> selectionArgsList=new ArrayList<>();\n  selectionArgsList.add(argValue);\n  if (null != selectionArgsIn) {\n    for (    final String arg : selectionArgsIn) {\n      selectionArgsList.add(arg);\n    }\n  }\n  selectionArgs=selectionArgsList.toArray(new String[0]);\n  selectionArgsList.clear();\n  selectionArgsList=null;\n  return selectionArgs;\n}"}
{"ids": "20899", "raw_code": "public void put(String sample,String attribute,Object value){\n  if (!sampleOrder.contains(sample))   sampleOrder.add(sample);\n  if (!attributeOrder.contains(attribute))   attributeOrder.add(attribute);\n  table.put(sample,attribute,value);\n}"}
{"ids": "68054", "raw_code": "public boolean isCompacted(){\n  return compacted;\n}"}
{"ids": "80239", "raw_code": "protected void center(){\n  Container parent=getParent();\n  final Dimension size=getPreferredSize();\n  setBounds((parent.getWidth() - size.width) / 2,(parent.getHeight() - size.height) / 2,size.width,size.height);\n}"}
{"ids": "70873", "raw_code": "public boolean isCardDismissible(String tag){\n  return mDismissibleCards.contains(tag);\n}"}
{"ids": "47681", "raw_code": "public void write(char cbuf[],int off,int len) throws IOException {\n  se.write(cbuf,off,len);\n}"}
{"ids": "14837", "raw_code": "public boolean validate(String telephone){\n  char aChar;\n  StringBuilder buf=new StringBuilder(telephone);\n  for (int aIndex=0; aIndex < buf.length(); aIndex++) {\n    aChar=buf.charAt(aIndex);\n    if (!Character.isSpaceChar(aChar)) {\n      if (!Character.isDigit(aChar) && !isValidTelephoneChars(aChar)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}"}
{"ids": "51915", "raw_code": "public static void unpack(HashMap<String,Object> object,String key,Object value){\n  String[] split=key.split(\"\\\\.\");\n  HashMap lobj=object;\n  for (int cur=0; cur < split.length; cur++) {\n    String current=split[cur];\n    if (!(lobj.containsKey(current) && lobj.get(current) instanceof HashMap)) {\n      lobj.put(current,new HashMap<String,Object>());\n    }\n    if (cur == split.length - 1) {\n      lobj.put(current,value);\n    }\n else     lobj=(HashMap)lobj.get(current);\n  }\n}"}
{"ids": "55824", "raw_code": "public void removeListener(DNSListener listener){\n  _listeners.remove(listener);\n}"}
{"ids": "41983", "raw_code": "static Set<String> parseResourcePathParams(String resourcePath){\n  Matcher matcher=PARAM_URL_REGEX.matcher(resourcePath);\n  Set<String> patterns=new LinkedHashSet<>();\n  while (matcher.find()) {\n    patterns.add(matcher.group(1));\n  }\n  return patterns;\n}"}
{"ids": "60601", "raw_code": "@Override public void close() throws IOException {\n  if (logger != null) {\n    logger.println(\"SSLSocket.close \" + socket_was_closed);\n  }\n  if (!socket_was_closed) {\n    if (handshake_started) {\n      alertProtocol.alert(AlertProtocol.WARNING,AlertProtocol.CLOSE_NOTIFY);\n      try {\n        output.write(alertProtocol.wrap());\n      }\n catch (      IOException ex) {\n      }\n      alertProtocol.setProcessed();\n    }\n    shutdown();\n    closeTransportLayer();\n    socket_was_closed=true;\n  }\n}"}
{"ids": "757", "raw_code": "public JRangeSlider(BoundedRangeModel model,int orientation,int direction){\n  super.setFocusable(true);\n  this.model=model;\n  this.orientation=orientation;\n  this.direction=direction;\n  setForeground(Color.LIGHT_GRAY);\n  this.lstnr=createListener();\n  model.addChangeListener(lstnr);\n  addMouseListener(this);\n  addMouseMotionListener(this);\n  addKeyListener(this);\n}"}
{"ids": "3690", "raw_code": "public boolean canRead(String path){\n  try {\n    ZipEntry entry=getZipEntry(path);\n    return entry != null && !entry.isDirectory();\n  }\n catch (  IOException e) {\n    log.log(Level.FINE,e.toString(),e);\n    return false;\n  }\n}"}
{"ids": "61411", "raw_code": "public boolean equals(Object p_test){\n  if (p_test instanceof URI) {\n    URI testURI=(URI)p_test;\n    if (((m_scheme == null && testURI.m_scheme == null) || (m_scheme != null && testURI.m_scheme != null && m_scheme.equals(testURI.m_scheme))) && ((m_userinfo == null && testURI.m_userinfo == null) || (m_userinfo != null && testURI.m_userinfo != null && m_userinfo.equals(testURI.m_userinfo))) && ((m_host == null && testURI.m_host == null) || (m_host != null && testURI.m_host != null && m_host.equals(testURI.m_host)))&& m_port == testURI.m_port && ((m_path == null && testURI.m_path == null) || (m_path != null && testURI.m_path != null && m_path.equals(testURI.m_path))) && ((m_queryString == null && testURI.m_queryString == null) || (m_queryString != null && testURI.m_queryString != null && m_queryString.equals(testURI.m_queryString))) && ((m_fragment == null && testURI.m_fragment == null) || (m_fragment != null && testURI.m_fragment != null && m_fragment.equals(testURI.m_fragment)))) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "72435", "raw_code": "public ISAACRandom(){\n  setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n}"}
{"ids": "37436", "raw_code": "public static boolean isMD5String(final String string){\n  Preconditions.checkNotNull(string,\"Error: String argument can't be null\");\n  return (string.length() == 32) && isHexString(string);\n}"}
{"ids": "5949", "raw_code": "public synchronized void waitForSubmittedTasks() throws InterruptedException {\n  while (currentTaskCount.get() > 0) {\n    waitForSingleTask();\n  }\n}"}
{"ids": "47260", "raw_code": "private int scanToken(int startPos){\n  int position=startPos;\n  while (position < maxPosition) {\n    if (!hasSurrogates) {\n      char c=str.charAt(position);\n      if ((c <= maxDelimCodePoint) && (delimiters.indexOf(c) >= 0))       break;\n      position++;\n    }\n else {\n      int c=str.codePointAt(position);\n      if ((c <= maxDelimCodePoint) && isDelimiter(c))       break;\n      position+=Character.charCount(c);\n    }\n  }\n  if (retDelims && (startPos == position)) {\n    if (!hasSurrogates) {\n      char c=str.charAt(position);\n      if ((c <= maxDelimCodePoint) && (delimiters.indexOf(c) >= 0))       position++;\n    }\n else {\n      int c=str.codePointAt(position);\n      if ((c <= maxDelimCodePoint) && isDelimiter(c))       position+=Character.charCount(c);\n    }\n  }\n  return position;\n}"}
{"ids": "17352", "raw_code": "public void zoomAt(double x,double y,double z,double zoomValue){\n  double[] diff={targetXoff - x,targetYoff - y,z - targetZoff};\n  double length=Math.sqrt(diff[0] * diff[0] + diff[1] * diff[1] + diff[2] * diff[2]);\n  if (length == 0) {\n    length=1;\n  }\n  double[] normalized={diff[0] / length,diff[1] / length,diff[2] / length};\n  double percent=zoomValue / normalized[2];\n  moveToPosition(-(float)(targetXoff + normalized[0] * percent),-(float)(targetYoff + normalized[1] * percent));\n  zoomToCamera((float)(targetZoff + normalized[2] * percent));\n}"}
{"ids": "27191", "raw_code": "private static int stringToHash(String s){\n  int len=s.length();\n  int hash2=0;\n  int hash=len;\n  hash<<=5;\n  hash+=s.charAt(0) - 0x60;\n  int j=len;\n  for (int i=0; i < 4 && j > 0; i++) {\n    j--;\n    hash<<=5;\n    hash+=s.charAt(j) - 0x60;\n    hash2<<=6;\n    hash2+=s.charAt(i) - 0x5F;\n  }\n  return hash ^ hash2;\n}"}
{"ids": "16714", "raw_code": "public void registerDenseFeatures(ArrayList<FeatureFunction> featureFunctions){\n  for (  FeatureFunction feature : featureFunctions) {\n    ArrayList<String> names=feature.reportDenseFeatures(denseFeatures.size());\n    for (    String name : names) {\n      DENSE_FEATURE_NAMES.add(name);\n      denseFeatures.add(getSparse(name));\n      sparseFeatures.remove(name);\n    }\n  }\n}"}
{"ids": "81215", "raw_code": "private void addFlag(final List<String> args,final String argName,final boolean value){\n  if (value) {\n    args.add(argName);\n  }\n}"}
{"ids": "9594", "raw_code": "public static PrivateKey load(InputStream is) throws IOException, CryptoException {\n  byte[] pvk=ReadUtil.readFully(is);\n  ByteBuffer bb=ByteBuffer.wrap(pvk);\n  bb.order(ByteOrder.LITTLE_ENDIAN);\n  long keyType=readReservedMagicKeyType(bb);\n  long encrypted=UnsignedUtil.getInt(bb);\n  if (encrypted != PVK_UNENCRYPTED) {\n    throw new PrivateKeyEncryptedException(MessageFormat.format(res.getString(\"MsPvkIsEncrypted.exception.message\"),Long.toHexString(encrypted),Long.toHexString(PVK_UNENCRYPTED)));\n  }\n  long saltLength=UnsignedUtil.getInt(bb);\n  if (saltLength != UNENCRYPTED_SALT_LENGTH) {\n    throw new CryptoException(MessageFormat.format(res.getString(\"InvalidMsPvkSaltLengthField.exception.message\"),Long.toHexString(saltLength),Long.toHexString(UNENCRYPTED_SALT_LENGTH)));\n  }\n  long keyLength=UnsignedUtil.getInt(bb);\n  readPrivateKeyBlobHeader(bb,keyType);\n  byte[] privateKeyBlob=new byte[bb.remaining()];\n  bb.get(privateKeyBlob);\n  if (keyLength != (privateKeyBlob.length + BLOB_HEADER_LENGTH)) {\n    throw new CryptoException(MessageFormat.format(res.getString(\"InvalidMsPvkKeyLengthField.exception.message\"),Long.toHexString(keyLength),Long.toHexString(privateKeyBlob.length + BLOB_HEADER_LENGTH)));\n  }\n  return blobToPrivateKey(privateKeyBlob);\n}"}
{"ids": "34187", "raw_code": "public static byte[] keyGenPrivate(byte[] randomBytes) throws NoSuchAlgorithmException, DigestException {\n  if (randomBytes.length < 32) {\n    throw new RuntimeException(\"Random bytes too small\");\n  }\n  MessageDigest digest=MessageDigest.getInstance(\"SHA-256\");\n  digest.digest(randomBytes,0,randomBytes.length);\n  byte[] privateKey=digest.digest();\n  privateKey[0]&=248;\n  privateKey[31]&=127;\n  privateKey[31]|=64;\n  return privateKey;\n}"}
{"ids": "32398", "raw_code": "private boolean isCheckpointTableExists(Connection conn){\n  Statement st=null;\n  ResultSet rs=null;\n  try {\n    st=conn.createStatement();\n    rs=st.executeQuery(chkTblExistsSql);\n    return true;\n  }\n catch (  SQLException ignored) {\n    return false;\n  }\n finally {\n    U.close(rs,log);\n    U.close(st,log);\n  }\n}"}
{"ids": "20105", "raw_code": "public FunctionTableModel(){\n  columnList.add(Localisation.getString(FunctionTableModel.class,\"FunctionTableModel.parameter\"));\n  columnList.add(Localisation.getString(FunctionTableModel.class,\"FunctionTableModel.type\"));\n  columnList.add(Localisation.getString(FunctionTableModel.class,\"FunctionTableModel.optional\"));\n  columnList.add(Localisation.getString(FunctionTableModel.class,\"FunctionTableModel.value\"));\n}"}
{"ids": "21202", "raw_code": "private NewCookie createWsCookie(String cookieName,String token,boolean setMaxAge,String userAgent){\n  String ieExpires=\"\";\n  int maxAge=setMaxAge ? _tokenManager.getMaxTokenLifeTimeInSecs() : NewCookie.DEFAULT_MAX_AGE;\n  if (setMaxAge && StringUtils.contains(userAgent,\"MSIE\")) {\n    ieExpires=\";expires=\" + getExpiredTimeGMT(maxAge);\n    _log.debug(\"Expires: \" + ieExpires);\n  }\n  if (token != null && !token.isEmpty()) {\n    return new NewCookie(cookieName,token + \";HttpOnly\" + ieExpires,null,null,null,maxAge,true);\n  }\n  return null;\n}"}
{"ids": "40742", "raw_code": "protected void initView(){\n  p.setFakeBoldText(false);\n  p.setAntiAlias(true);\n  p.setTextSize(MINI_DAY_NUMBER_TEXT_SIZE);\n  p.setStyle(Style.FILL);\n  mMonthNumPaint=new Paint();\n  mMonthNumPaint.setFakeBoldText(true);\n  mMonthNumPaint.setAntiAlias(true);\n  mMonthNumPaint.setTextSize(MINI_DAY_NUMBER_TEXT_SIZE);\n  mMonthNumPaint.setColor(mFocusMonthColor);\n  mMonthNumPaint.setStyle(Style.FILL);\n  mMonthNumPaint.setTextAlign(Align.CENTER);\n}"}
{"ids": "17595", "raw_code": "ScheduledFutureTask(Runnable r,V result,long ns,long period){\n  super(r,result);\n  this.time=ns;\n  this.period=period;\n  this.sequenceNumber=sequencer.getAndIncrement();\n}"}
{"ids": "61048", "raw_code": "public boolean verify(X509Certificate cert,Provider sigProvider) throws NoSuchAlgorithmException, CertificateExpiredException, CertificateNotYetValidException, CMSException {\n  Time signingTime=getSigningTime();\n  if (signingTime != null) {\n    cert.checkValidity(signingTime.getDate());\n  }\n  return doVerify(cert.getPublicKey(),sigProvider);\n}"}
{"ids": "6826", "raw_code": "public GeoMark analyse(final String text,final String[] tags,final int maxlength,final String salt){\n  GeoLocation loc=geocode(text,tags,maxlength);\n  if (loc != null)   return new GeoMark(loc,salt);\n  return reverse_geocode(text);\n}"}
{"ids": "11333", "raw_code": "public void findAndInit(Iterator it){\n  while (it.hasNext()) {\n    findAndInit(it.next());\n  }\n}"}
{"ids": "26845", "raw_code": "private static String formatTo2Digits(String str){\n  if (str.length() < 2) {\n    str=\"0\" + str;\n  }\n  return str;\n}"}
{"ids": "35534", "raw_code": "public void addFooterView(View v,Object data,boolean isSelectable){\n  FixedViewInfo info=new FixedViewInfo();\n  info.view=v;\n  info.data=data;\n  info.isSelectable=isSelectable;\n  mFooterViewInfos.add(info);\n  if (mAdapter != null && mObserver != null) {\n    mObserver.onChanged();\n  }\n}"}
{"ids": "16079", "raw_code": "public static int calculateDigitCount(long value){\n  if (value < 0) {\n    if (value != Long.MIN_VALUE) {\n      return calculateDigitCount(-value) + 1;\n    }\n else {\n      return 20;\n    }\n  }\n  return (value < 10 ? 1 : (value < 100 ? 2 : (value < 1000 ? 3 : (value < 10000 ? 4 : ((int)(Math.log(value) / LOG_10) + 1)))));\n}"}
{"ids": "14505", "raw_code": "public static Byte[] convertDate(String date){\n  StringTokenizer st=new StringTokenizer(date);\n  String sdate=st.nextToken();\n  String stime=st.nextToken();\n  st=new StringTokenizer(sdate,\"-\");\n  String year=st.nextToken();\n  int iyear=0;\n  try {\n    iyear=Integer.parseInt(year);\n  }\n catch (  NumberFormatException ex) {\n    debug.error(\"MonitoringUtil.convertDate year = \" + year + \" not parsable\");\n  }\n  byte yrlow=(byte)(iyear & 0xff);\n  byte yrhigh=(byte)(((iyear & 0xff00) >> 8) & 0xff);\n  String month=st.nextToken();\n  String day=st.nextToken();\n  st=new StringTokenizer(stime,\":\");\n  String hour=st.nextToken();\n  String min=st.nextToken();\n  String sec=st.nextToken();\n  Byte bz=Byte.valueOf((byte)0);\n  Byte byrhi=bz;\n  Byte byrlo=bz;\n  Byte bmo=bz;\n  Byte bdy=bz;\n  Byte bhr=bz;\n  Byte bmn=bz;\n  Byte bsc=bz;\n  try {\n    byrhi=new Byte(yrhigh);\n    byrlo=new Byte(yrlow);\n    bmo=new Byte(month);\n    bdy=new Byte(day);\n    bhr=new Byte(hour);\n    bmn=new Byte(min);\n    bsc=new Byte(sec);\n  }\n catch (  NumberFormatException ex) {\n    debug.error(\"MonitoringUtil error converting start date/time\" + \", date = \" + sdate + \", time = \"+ stime);\n  }\n  Byte[] ret=new Byte[8];\n  ret[0]=byrhi;\n  ret[1]=byrlo;\n  ret[2]=bmo;\n  ret[3]=bdy;\n  ret[4]=bhr;\n  ret[5]=bmn;\n  ret[6]=bsc;\n  ret[7]=bz;\n  return ret;\n}"}
{"ids": "12612", "raw_code": "private void parseAndAdd(String line,BufferedReader reader) throws IOException {\n  try {\n    StringTokenizer tokenizer=new StringTokenizer(line,\" \");\n    String tag=tokenizer.nextToken();\n    if (tag.equals(\"CONTINUITY_WEIGHT\")) {\n      continuityWeight=Integer.parseInt(tokenizer.nextToken());\n    }\n else     if (tag.equals(\"OPTIMAL_COUPLING\")) {\n      optimalCoupling=Integer.parseInt(tokenizer.nextToken());\n    }\n else     if (tag.equals(\"EXTEND_SELECTIONS\")) {\n      extendSelections=Integer.parseInt(tokenizer.nextToken());\n    }\n else     if (tag.equals(\"JOIN_METHOD\")) {\n      joinMethod=Integer.parseInt(tokenizer.nextToken());\n    }\n else     if (tag.equals(\"JOIN_WEIGHTS\")) {\n      int numWeights=Integer.parseInt(tokenizer.nextToken());\n      joinWeights=new int[numWeights];\n      for (int i=0; i < numWeights; i++) {\n        joinWeights[i]=Integer.parseInt(tokenizer.nextToken());\n      }\n      joinWeightShift=calcJoinWeightShift(joinWeights);\n    }\n else     if (tag.equals(\"STS\")) {\n      String name=tokenizer.nextToken();\n      if (name.equals(\"STS\")) {\n        sts=new SampleSet(tokenizer,reader);\n      }\n else {\n        mcep=new SampleSet(tokenizer,reader);\n      }\n    }\n else     if (tag.equals(\"UNITS\")) {\n      int type=Integer.parseInt(tokenizer.nextToken());\n      int phone=Integer.parseInt(tokenizer.nextToken());\n      int start=Integer.parseInt(tokenizer.nextToken());\n      int end=Integer.parseInt(tokenizer.nextToken());\n      int prev=Integer.parseInt(tokenizer.nextToken());\n      int next=Integer.parseInt(tokenizer.nextToken());\n      DatabaseClusterUnit unit=new DatabaseClusterUnit(type,phone,start,end,prev,next);\n      unitList.add(unit);\n    }\n else     if (tag.equals(\"CART\")) {\n      String name=tokenizer.nextToken();\n      int nodes=Integer.parseInt(tokenizer.nextToken());\n      CART cart=new CARTImpl(reader,nodes);\n      cartMap.put(name,cart);\n      if (defaultCart == null) {\n        defaultCart=cart;\n      }\n    }\n else     if (tag.equals(\"UNIT_TYPE\")) {\n      String name=tokenizer.nextToken();\n      int start=Integer.parseInt(tokenizer.nextToken());\n      int count=Integer.parseInt(tokenizer.nextToken());\n      UnitType unitType=new UnitType(name,start,count);\n      unitTypesList.add(unitType);\n    }\n else {\n      throw new Error(\"Unsupported tag \" + tag + \" in db line `\"+ line+ \"'\");\n    }\n  }\n catch (  NoSuchElementException nse) {\n    throw new Error(\"Error parsing db \" + nse.getMessage());\n  }\ncatch (  NumberFormatException nfe) {\n    throw new Error(\"Error parsing numbers in db line `\" + line + \"':\"+ nfe.getMessage());\n  }\n}"}
{"ids": "87082", "raw_code": "public String byteStringNoSemicolon(){\n  StringBuilder retval=new StringBuilder();\n  try {\n    while (true) {\n      char next=lookAhead(0);\n      if (next == '\\0' || next == '\\n' || next == ';' || next == ',') {\n        break;\n      }\n else {\n        consume(1);\n        retval.append(next);\n      }\n    }\n  }\n catch (  ParseException ex) {\n    return retval.toString();\n  }\n  return retval.toString();\n}"}
{"ids": "32844", "raw_code": "public static void println(double x){\n  out.println(x);\n}"}
{"ids": "86957", "raw_code": "public boolean subscribeTopic(@NonNull Context context,@NonNull String[] newTopics){\n  if (!initialized)   init(context);\n  if (newTopics.length == 0)   return false;\n  if (null == topics) {\n    topics=new ArrayList<>();\n  }\n  for (  String topic : newTopics) {\n    if (topics.contains(topic)) {\n      return false;\n    }\n    topics.add(topic);\n  }\n  saveSubscibedTopics(context);\n  Intent intent=new Intent(context,RegistrationIntentService.class);\n  intent.setAction(RegistrationIntentService.ACTION_SUBSCRIBE);\n  intent.putExtra(RegistrationIntentService.EXTRA_TOPIC_LIST,newTopics);\n  context.startService(intent);\n  return true;\n}"}
{"ids": "62042", "raw_code": "public static String serialise(Node node){\n  try {\n    DOMImplementationRegistry registry=DOMImplementationRegistry.newInstance();\n    DOMImplementationLS lsImpl=(DOMImplementationLS)registry.getDOMImplementation(\"LS\");\n    LSSerializer serializer=lsImpl.createLSSerializer();\n    return serializer.writeToString(node);\n  }\n catch (  Exception e) {\n    log.fine(\"could not serialise XML node: \" + e);\n    return \"\";\n  }\n}"}
{"ids": "10997", "raw_code": "public static boolean isOnSegment(Geo a,Geo b,Geo i){\n  return ((a.distance(i) < a.distance(b)) && (b.distance(i) < b.distance(a)));\n}"}
{"ids": "69219", "raw_code": "public void addExtensionPoint(ExtensionPoint extensionPoint){\n  fExtensionPoints.add(extensionPoint);\n}"}
{"ids": "24334", "raw_code": "private List addNodeToList(int startIndexForNode,int endIndexForNode){\n  List localvmList=new ArrayList();\n  for (int i=startIndexForNode; i < endIndexForNode; i++) {\n    localvmList.add(vm[i]);\n  }\n  return localvmList;\n}"}
{"ids": "8360", "raw_code": "public void addMetaMethod(MetaMethod method){\n  if (isInitialized()) {\n    throw new RuntimeException(\"Already initialized, cannot add new method: \" + method);\n  }\n  final CachedClass declaringClass=method.getDeclaringClass();\n  addMetaMethodToIndex(method,metaMethodIndex.getHeader(declaringClass.getTheClass()));\n}"}
{"ids": "55830", "raw_code": "public void waitForEvent(long timeout){\n  Thread thread=Thread.currentThread();\n  Semaphore semaphore=_semaphores.get(thread);\n  if (semaphore == null) {\n    semaphore=new Semaphore(1,true);\n    semaphore.drainPermits();\n    _semaphores.putIfAbsent(thread,semaphore);\n  }\n  semaphore=_semaphores.get(thread);\n  try {\n    semaphore.tryAcquire(timeout,TimeUnit.MILLISECONDS);\n  }\n catch (  InterruptedException exception) {\n    logger.log(Level.FINER,\"Exception \",exception);\n  }\n}"}
{"ids": "84398", "raw_code": "public String stringValue(){\n  Object cv=Assert.checkNonNull(constValue());\n  return cv.toString();\n}"}
{"ids": "53785", "raw_code": "public Date parseDate(String str){\n  try {\n    return dateFormat.parse(str);\n  }\n catch (  java.text.ParseException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "70015", "raw_code": "default int hash32(String value){\n  return hash32(value.getBytes());\n}"}
{"ids": "46782", "raw_code": "public Name addAll(Name suffix) throws InvalidNameException {\n  return addAll(size(),suffix);\n}"}
{"ids": "53491", "raw_code": "public final InputStream asInputStream() throws UnknownResourceException {\n  return toInputStream();\n}"}
{"ids": "36611", "raw_code": "private static double euclideanNorm(double vector[]){\n  int n=vector.length;\n  if (n < 1) {\n    return 0;\n  }\n  if (n == 1) {\n    return Math.abs(vector[0]);\n  }\n  double scale=0;\n  double sum=1;\n  for (int i=0; i < n; i++) {\n    if (vector[i] != 0) {\n      double abs=Math.abs(vector[i]);\n      if (scale < abs) {\n        double t=scale / abs;\n        sum=1 + sum * (t * t);\n        scale=abs;\n      }\n else {\n        double t=abs / scale;\n        sum+=t * t;\n      }\n    }\n  }\n  return scale * Math.sqrt(sum);\n}"}
{"ids": "48740", "raw_code": "public static FileDescriptor createSocket() throws IOException {\n  if (!isSupported)   throw new UnsupportedOperationException(\"SDP not supported on this platform\");\n  int fdVal=create0();\n  FileDescriptor fd=new FileDescriptor();\n  fdAccess.set(fd,fdVal);\n  return fd;\n}"}
{"ids": "2619", "raw_code": "public static Grammar doTheMerges(Grammar grammar,Lexicon lexicon,boolean[][][] mergeThesePairs,double[][] mergeWeights){\n  short[] numSubStatesArray=grammar.numSubStates;\n  short[] newNumSubStatesArray=grammar.numSubStates;\n  Grammar newGrammar=null;\n  while (true) {\n    boolean somethingToMerge=false;\n    for (int tag=0; tag < numSubStatesArray.length; tag++) {\n      for (int i=0; i < newNumSubStatesArray[tag]; i++) {\n        for (int j=0; j < newNumSubStatesArray[tag]; j++) {\n          somethingToMerge=somethingToMerge || mergeThesePairs[tag][i][j];\n        }\n      }\n    }\n    if (!somethingToMerge)     break;\n    boolean[][][] mergeThisIteration=new boolean[newNumSubStatesArray.length][][];\n    for (int tag=0; tag < numSubStatesArray.length; tag++) {\n      mergeThisIteration[tag]=new boolean[mergeThesePairs[tag].length][mergeThesePairs[tag].length];\n      for (int i=0; i < mergeThesePairs[tag].length; i++) {\n        for (int j=0; j < mergeThesePairs[tag].length; j++) {\n          mergeThisIteration[tag][i][j]=mergeThesePairs[tag][i][j];\n        }\n      }\n    }\n    for (int tag=0; tag < numSubStatesArray.length; tag++) {\n      boolean[] alreadyDecidedToMerge=new boolean[mergeThesePairs[tag].length];\n      for (int i=0; i < mergeThesePairs[tag].length; i++) {\n        for (int j=0; j < mergeThesePairs[tag].length; j++) {\n          if (alreadyDecidedToMerge[i] || alreadyDecidedToMerge[j])           mergeThisIteration[tag][i][j]=false;\n          alreadyDecidedToMerge[i]=alreadyDecidedToMerge[i] || mergeThesePairs[tag][i][j];\n          alreadyDecidedToMerge[j]=alreadyDecidedToMerge[j] || mergeThesePairs[tag][i][j];\n        }\n      }\n    }\n    for (int tag=0; tag < numSubStatesArray.length; tag++) {\n      for (int i=0; i < mergeThesePairs[tag].length; i++) {\n        for (int j=0; j < mergeThesePairs[tag].length; j++) {\n          mergeThesePairs[tag][i][j]=mergeThesePairs[tag][i][j] && !mergeThisIteration[tag][i][j];\n        }\n      }\n    }\n    newGrammar=grammar.mergeStates(mergeThisIteration,mergeWeights);\n    lexicon.mergeStates(mergeThisIteration,mergeWeights);\n    grammar.fixMergeWeightsEtc(mergeThesePairs,mergeWeights,mergeThisIteration);\n    grammar=newGrammar;\n    newNumSubStatesArray=grammar.numSubStates;\n  }\n  grammar.makeCRArrays();\n  return grammar;\n}"}
{"ids": "56918", "raw_code": "private static void extractFile(ZipInputStream zipIn,String filePath) throws IOException {\n  BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(filePath));\n  byte[] bytesIn=new byte[BUFFER_SIZE];\n  int read=0;\n  while ((read=zipIn.read(bytesIn)) != -1) {\n    bos.write(bytesIn,0,read);\n  }\n  bos.close();\n}"}
{"ids": "55851", "raw_code": "public static final String squareToString(int square){\n  StringBuilder ret=new StringBuilder();\n  int x=Position.getX(square);\n  int y=Position.getY(square);\n  ret.append((char)(x + 'a'));\n  ret.append((char)(y + '1'));\n  return ret.toString();\n}"}
{"ids": "7642", "raw_code": "protected void drawVerticalItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,StatisticalCategoryDataset dataset,int visibleRow,int row,int column){\n  double rectX=calculateBarW0(plot,PlotOrientation.VERTICAL,dataArea,domainAxis,state,visibleRow,column);\n  Number meanValue=dataset.getMeanValue(row,column);\n  if (meanValue == null) {\n    return;\n  }\n  double value=meanValue.doubleValue();\n  double base=0.0;\n  double lclip=getLowerClip();\n  double uclip=getUpperClip();\n  if (uclip <= 0.0) {\n    if (value >= uclip) {\n      return;\n    }\n    base=uclip;\n    if (value <= lclip) {\n      value=lclip;\n    }\n  }\n else   if (lclip <= 0.0) {\n    if (value >= uclip) {\n      value=uclip;\n    }\n else {\n      if (value <= lclip) {\n        value=lclip;\n      }\n    }\n  }\n else {\n    if (value <= lclip) {\n      return;\n    }\n    base=getLowerClip();\n    if (value >= uclip) {\n      value=uclip;\n    }\n  }\n  RectangleEdge yAxisLocation=plot.getRangeAxisEdge();\n  double transY1=rangeAxis.valueToJava2D(base,dataArea,yAxisLocation);\n  double transY2=rangeAxis.valueToJava2D(value,dataArea,yAxisLocation);\n  double rectY=Math.min(transY2,transY1);\n  double rectWidth=state.getBarWidth();\n  double rectHeight=Math.abs(transY2 - transY1);\n  Rectangle2D bar=new Rectangle2D.Double(rectX,rectY,rectWidth,rectHeight);\n  Paint itemPaint=getItemPaint(row,column);\n  GradientPaintTransformer t=getGradientPaintTransformer();\n  if (t != null && itemPaint instanceof GradientPaint) {\n    itemPaint=t.transform((GradientPaint)itemPaint,bar);\n  }\n  g2.setPaint(itemPaint);\n  g2.fill(bar);\n  if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {\n    Stroke stroke=getItemOutlineStroke(row,column);\n    Paint paint=getItemOutlinePaint(row,column);\n    if (stroke != null && paint != null) {\n      g2.setStroke(stroke);\n      g2.setPaint(paint);\n      g2.draw(bar);\n    }\n  }\n  Number n=dataset.getStdDevValue(row,column);\n  if (n != null) {\n    double valueDelta=n.doubleValue();\n    double highVal=rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta,dataArea,yAxisLocation);\n    double lowVal=rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta,dataArea,yAxisLocation);\n    if (this.errorIndicatorPaint != null) {\n      g2.setPaint(this.errorIndicatorPaint);\n    }\n else {\n      g2.setPaint(getItemOutlinePaint(row,column));\n    }\n    if (this.errorIndicatorStroke != null) {\n      g2.setStroke(this.errorIndicatorStroke);\n    }\n else {\n      g2.setStroke(getItemOutlineStroke(row,column));\n    }\n    Line2D line;\n    line=new Line2D.Double(rectX + rectWidth / 2.0d,lowVal,rectX + rectWidth / 2.0d,highVal);\n    g2.draw(line);\n    line=new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d,highVal,rectX + rectWidth / 2.0d + 5.0d,highVal);\n    g2.draw(line);\n    line=new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d,lowVal,rectX + rectWidth / 2.0d + 5.0d,lowVal);\n    g2.draw(line);\n  }\n  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);\n  if (generator != null && isItemLabelVisible(row,column)) {\n    drawItemLabel(g2,dataset,row,column,plot,generator,bar,(value < 0.0));\n  }\n  EntityCollection entities=state.getEntityCollection();\n  if (entities != null) {\n    addItemEntity(entities,dataset,row,column,bar);\n  }\n}"}
{"ids": "70129", "raw_code": "public static boolean hasValidCover(IGame game,Coords pos,int elevation){\n  if ((pos == null) || (elevation > 0)) {\n    return false;\n  }\n  boolean hasMovedEntity=false;\n  for (  Entity e : game.getEntitiesVector(pos)) {\n    if (e.isDone() && !(e instanceof Infantry) && (e.getElevation() == elevation)) {\n      hasMovedEntity=true;\n      break;\n    }\n  }\n  if (!hasMovedEntity) {\n    Enumeration<Entity> wrecks=game.getWreckedEntities();\n    while (wrecks.hasMoreElements()) {\n      Entity e=wrecks.nextElement();\n      if (pos.equals(e.getPosition()) && !(e instanceof Infantry)) {\n        hasMovedEntity=true;\n      }\n    }\n  }\n  return hasMovedEntity;\n}"}
{"ids": "83242", "raw_code": "public static Coordinate[] computeTangentsThroughPoint(Coordinate circleCenter,double radius,Coordinate point){\n  Coordinate[] ret=new Coordinate[3];\n  double dx=(point.x - circleCenter.x) / 2;\n  double dy=(point.y - circleCenter.y) / 2;\n  double d=Math.sqrt(dx * dx + dy * dy);\n  double a=(radius * radius) / (2.0 * d);\n  double x2=circleCenter.x + (dx * a / d);\n  double y2=circleCenter.y + (dy * a / d);\n  double h=Math.sqrt(radius * radius - a * a);\n  double rx=-dy * (h / d);\n  double ry=dx * (h / d);\n  double xi=x2 + rx;\n  double yi=y2 + ry;\n  double xiPrime=x2 - rx;\n  double yiPrime=y2 - ry;\n  ret[0]=new Coordinate(point);\n  ret[1]=new Coordinate(xi,yi);\n  ret[2]=new Coordinate(xiPrime,yiPrime);\n  return ret;\n}"}
{"ids": "20237", "raw_code": "public void addGroup(GroupConfigInterface subGroup){\n  subGroupList.add(subGroup);\n}"}
{"ids": "16979", "raw_code": "public void startScanning(final BeaconServiceConnection serviceConnection){\n  final Cursor cursor=mDatabaseHelper.getAllRegions();\n  while (cursor.moveToNext()) {\n    final UUID uuid=UUID.fromString(cursor.getString(2));\n    final int major=cursor.getInt(3);\n    final int minor=cursor.getInt(4);\n    final int event=cursor.getInt(6);\n    serviceConnection.startRangingBeaconsInRegion(BeaconsFragment.BEACON_COMPANY_ID,uuid,major,minor,this);\n    if (event == BeaconContract.EVENT_IN_RANGE || event == BeaconContract.EVENT_OUT_OF_RANGE)     serviceConnection.startMonitoringForRegion(BeaconsFragment.BEACON_COMPANY_ID,uuid,major,minor,this);\n  }\n}"}
{"ids": "25667", "raw_code": "public static boolean isHeader(Header hdr){\n  return hdr.getBooleanValue(ZIMAGE,false);\n}"}
{"ids": "10679", "raw_code": "public static InfoRegister createFolder(User user,Integer bookId,List atts,List inter,Map documents,String entidad,boolean consolidacion) throws ValidationException, SecurityException, BookException, SessionException, TecDocException, ParseException, AttributesException {\n  InfoRegister result=new InfoRegister();\n  String sessionID=new String();\n  try {\n    sessionID=Login.login(user,entidad);\n    setOfficeUserRegister(entidad,sessionID,atts);\n    BookSession.openBook(sessionID,bookId,entidad);\n    Integer launchDistOutRegister=RegisterServicesUtil.getInvesConfActions(entidad);\n    RegisterServicesUtil.canCreateFolder(sessionID,bookId,documents,user,atts,entidad,consolidacion);\n    AxSf axsfQ=BookSession.getFormFormat(sessionID,bookId,entidad);\n    FieldFormat fieldFormat=RegisterServicesUtil.getFieldFormat(sessionID,bookId);\n    Map translatedIds=RegisterServicesUtil.getFieldsWithSustitute(atts,axsfQ,sessionID,bookId,entidad);\n    AxSf newAxSF=RegisterServicesUtil.initInOrOutFolder(user,axsfQ);\n    newAxSF=RegisterServicesUtil.completeFolder(translatedIds,axsfQ,newAxSF,user.getLocale(),atts,fieldFormat,consolidacion);\n    FolderDataSession data=Register.createNewFolder(sessionID,bookId,newAxSF,inter,documents,launchDistOutRegister,user.getLocale(),entidad,consolidacion);\n    result=ConsultRegister.consultRegisterInfo(bookId,data.getAxsfNew(),data.getNewRegisterID(),data.getScrofic(),data.getUserName(),user.getLocale());\n  }\n  finally {\n    BookSession.closeBook(sessionID,bookId);\n    SecuritySession.logout(sessionID,entidad);\n  }\n  return result;\n}"}
{"ids": "44287", "raw_code": "public void close() throws IOException {\n  fInputStream.close();\n}"}
{"ids": "17294", "raw_code": "private void handleSubscriptionError(AzureAllocationContext ctx,String namespace,Throwable e){\n  if (e instanceof CloudException) {\n    CloudException ce=(CloudException)e;\n    CloudError body=ce.getBody();\n    if (body != null) {\n      String code=body.getCode();\n      if (MISSING_SUBSCRIPTION_CODE.equals(code)) {\n        registerSubscription(ctx,namespace);\n        return;\n      }\n    }\n  }\n  handleError(ctx,e);\n}"}
{"ids": "31714", "raw_code": "public boolean hasShutdownHook(Runnable shutdownHook){\n  return hooks.contains(shutdownHook);\n}"}
{"ids": "54442", "raw_code": "@Override public void endProcessSubTokens(){\n  if (!skey.isEmpty()) {\n    map.put(skey,sval);\n    skey=\"\";\n    sval=\"\";\n  }\n}"}
{"ids": "53271", "raw_code": "private void heapifyDown(Comparable<Object> cur){\n  final int stop=size >>> 1;\n  int twopos=0;\n  while (twopos < stop) {\n    int bestchild=(twopos << 1) + 1;\n    Comparable<Object> best=twoheap[bestchild];\n    final int right=bestchild + 1;\n    if (right < size && best.compareTo(twoheap[right]) > 0) {\n      bestchild=right;\n      best=twoheap[right];\n    }\n    if (cur.compareTo(best) <= 0) {\n      break;\n    }\n    twoheap[twopos]=best;\n    twopos=bestchild;\n  }\n  twoheap[twopos]=cur;\n}"}
{"ids": "62716", "raw_code": "public void addFeature(IFeatureVector fv){\n  idxList.addAll(Ints.asList(fv.getIndices()));\n  valList.addAll(Floats.asList(fv.getValues()));\n}"}
{"ids": "8912", "raw_code": "protected void waitForExternalStoreMount() throws Exception {\n  String extStorageState=Environment.getExternalStorageState();\n  int currentWaitTime=0;\n  while (!extStorageState.equals(Environment.MEDIA_MOUNTED)) {\n    Log.i(LOG_TAG,\"Waiting for SD card...\");\n    currentWaitTime=timeoutWait(currentWaitTime,DEFAULT_WAIT_POLL_TIME,DEFAULT_MAX_WAIT_TIME,\"Timed out waiting for SD Card to be ready!\");\n    extStorageState=Environment.getExternalStorageState();\n  }\n}"}
{"ids": "51675", "raw_code": "public static DataDisplayTable listGlyphDimensionBounds(Font font){\n  String[] header={\"Dimension\",\"Value\"};\n  Align[] displayAlignment={Align.Left,Align.Right};\n  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));\n  table.setAlignment(Arrays.asList(displayAlignment));\n  LocaTable locaTable=FontUtils.getLocaTable(font);\n  GlyphTable glyfTable=FontUtils.getGlyphTable(font);\n  int xMin=Integer.MAX_VALUE;\n  int yMin=Integer.MAX_VALUE;\n  int xMax=Integer.MIN_VALUE;\n  int yMax=Integer.MIN_VALUE;\n  for (int i=0; i < locaTable.numGlyphs(); i++) {\n    Glyph glyph=glyfTable.glyph(locaTable.glyphOffset(i),locaTable.glyphLength(i));\n    if (glyph.xMin() < xMin) {\n      xMin=glyph.xMin();\n    }\n    if (glyph.yMin() < yMin) {\n      yMin=glyph.yMin();\n    }\n    if (glyph.xMax() > xMax) {\n      xMax=glyph.xMax();\n    }\n    if (glyph.yMax() > yMax) {\n      yMax=glyph.yMax();\n    }\n  }\n  table.add(Arrays.asList(new String[]{\"xMin\",String.format(\"%d\",xMin)}));\n  table.add(Arrays.asList(new String[]{\"xMax\",String.format(\"%d\",xMax)}));\n  table.add(Arrays.asList(new String[]{\"yMin\",String.format(\"%d\",yMin)}));\n  table.add(Arrays.asList(new String[]{\"yMax\",String.format(\"%d\",yMax)}));\n  return table;\n}"}
{"ids": "59850", "raw_code": "private boolean isInThumbRange(float touchX,double normalizedThumbValue){\n  return Math.abs(touchX - normalizedToScreen(normalizedThumbValue)) <= thumbHalfWidth;\n}"}
{"ids": "85689", "raw_code": "public static byte[] str2UnicodeByteArray(final JBBPByteOrder byteOrder,final String str){\n  final byte[] result=new byte[str.length() << 1];\n  int index=0;\n  for (int i=0; i < str.length(); i++) {\n    final int val=str.charAt(i);\nswitch (byteOrder) {\ncase BIG_ENDIAN:\n{\n        result[index++]=(byte)(val >> 8);\n        result[index++]=(byte)val;\n      }\n    break;\ncase LITTLE_ENDIAN:\n{\n    result[index++]=(byte)val;\n    result[index++]=(byte)(val >> 8);\n  }\nbreak;\ndefault :\nthrow new Error(\"Unexpected byte order [\" + byteOrder + ']');\n}\n}\nreturn result;\n}"}
{"ids": "33959", "raw_code": "private MethodDef parse_method(StrTok st){\n  String method_name=st.need_word();\n  st.need(\"(\");\n  ArrayList<String> args=new ArrayList<>();\n  String tok=st.nextToken();\n  if (tok != \")\") {\n    st.pushBack();\n    do {\n      tok=st.need_word();\n      args.add(tok);\n    }\n while (st.nextToken() == \",\");\n    st.pushBack();\n    st.need(\")\");\n  }\n  Type[] targs=new Type[args.size()];\n  for (int ii=0; ii < args.size(); ii++) {\n    targs[ii]=BCELUtil.classname_to_type(args.get(ii));\n  }\n  return new MethodDef(method_name,targs);\n}"}
{"ids": "83236", "raw_code": "private void writeExperiecedAndCausingPersonDelay(){\n  SortedMap<Double,Map<Id<Person>,Double>> timeBin2AffectedPerson2Delay=getExperiencedPersonDelay(1);\n  SortedMap<Double,Map<Id<Person>,Double>> timeBin2CausingPerson2Delay=getCausingPersonDelay(1);\n  if (timeBin2AffectedPerson2Delay.size() != 1)   throw new RuntimeException(\"Delay is not summed up for all time bins.\");\n  Map<Id<Person>,Double> affectedperson2Delay=timeBin2AffectedPerson2Delay.get(simulationEndTime);\n  Map<Id<Person>,Double> causedPerson2Delay=timeBin2CausingPerson2Delay.get(simulationEndTime);\n  BufferedWriter writer=IOUtils.getBufferedWriter(runDir + \"/analysis/affectedAndCausedDelay_\" + pricingScenario+ suffixForSoring+ \".txt\");\n  try {\n    writer.write(\"personId \\t userGroup \\t affectedDelayInHr \\t causedDelayInHr \\n\");\n    for (    Id<Person> id : causedPerson2Delay.keySet()) {\n      writer.write(id + \"\\t\" + pf.getMunichUserGroupFromPersonId(id)+ \"\\t\"+ affectedperson2Delay.get(id) / 3600 + \"\\t\" + causedPerson2Delay.get(id) / 3600 + \"\\n\");\n    }\n    writer.close();\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Data is not written in file. Reason: \" + e);\n  }\n}"}
{"ids": "86745", "raw_code": "static List<List<File>> partition(final int binCount,final File... files){\n  final File[] sort=Arrays.copyOf(files,files.length);\n  return binThem(binCount,sort);\n}"}
{"ids": "26608", "raw_code": "private void calcBitePoint(int centerX,int centerY,float circleEdgeX,float circleEdgeY,double biteLine,boolean isFirstBite,boolean isRandomBite){\n  double bitePercent;\n  if (isFirstBite) {\n    biteX=(int)circleEdgeX;\n    biteY=(int)circleEdgeY;\n  }\n else {\n    bitePercent=biteRadius / biteLine;\n    if (isRandomBite) {\n      bitePercent*=bitesTakenMap.get(biteDirection);\n    }\n else {\n      bitePercent*=(numBitesForOneDirection - numBitesForOneDirectionLeft);\n    }\n    biteX=DrawUtils.getPointBetweenTwoPoints(circleEdgeX,centerX,bitePercent);\n    biteY=DrawUtils.getPointBetweenTwoPoints(circleEdgeY,centerY,bitePercent);\n  }\n}"}
{"ids": "5123", "raw_code": "private boolean zzRefill() throws java.io.IOException {\n  if (zzStartRead > 0) {\n    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);\n    zzEndRead-=zzStartRead;\n    zzCurrentPos-=zzStartRead;\n    zzMarkedPos-=zzStartRead;\n    zzPushbackPos-=zzStartRead;\n    zzStartRead=0;\n  }\n  if (zzCurrentPos >= zzBuffer.length) {\n    char newBuffer[]=new char[zzCurrentPos * 2];\n    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);\n    zzBuffer=newBuffer;\n  }\n  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);\n  if (numRead < 0) {\n    return true;\n  }\n else {\n    zzEndRead+=numRead;\n    return false;\n  }\n}"}
{"ids": "56792", "raw_code": "private void updateBusinessObjectDefinitionEntityDescriptiveInformation(BusinessObjectDefinitionEntity businessObjectDefinitionEntity,BusinessObjectDefinitionDescriptiveInformationUpdateRequest request){\n  businessObjectDefinitionEntity.setDescription(request.getDescription());\n  businessObjectDefinitionEntity.setDisplayName(request.getDisplayName());\n  businessObjectDefinitionDao.saveAndRefresh(businessObjectDefinitionEntity);\n}"}
{"ids": "64614", "raw_code": "@Override public void onDownloadProgress(DownloadProgressInfo progress){\n  mAverageSpeed.setText(getString(R.string.kilobytes_per_second,Helpers.getSpeedString(progress.mCurrentSpeed)));\n  mTimeRemaining.setText(getString(R.string.time_remaining,Helpers.getTimeRemaining(progress.mTimeRemaining)));\n  progress.mOverallTotal=progress.mOverallTotal;\n  mPB.setMax((int)(progress.mOverallTotal >> 8));\n  mPB.setProgress((int)(progress.mOverallProgress >> 8));\n  mProgressPercent.setText(Long.toString(progress.mOverallProgress * 100 / progress.mOverallTotal) + \"%\");\n  mProgressFraction.setText(Helpers.getDownloadProgressString(progress.mOverallProgress,progress.mOverallTotal));\n}"}
{"ids": "12294", "raw_code": "public static void updateAllForFacade(DataStore dataStore,Iterable<Update> updates){\n  updateAllForFacade(dataStore,updates.iterator());\n}"}
{"ids": "72447", "raw_code": "public ArrayFieldVector(FieldVector<T> v1,FieldVector<T> v2) throws NullArgumentException {\n  MathUtils.checkNotNull(v1);\n  MathUtils.checkNotNull(v2);\n  field=v1.getField();\n  final T[] v1Data=(v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v1).data : v1.toArray();\n  final T[] v2Data=(v2 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v2).data : v2.toArray();\n  data=MathArrays.buildArray(field,v1Data.length + v2Data.length);\n  System.arraycopy(v1Data,0,data,0,v1Data.length);\n  System.arraycopy(v2Data,0,data,v1Data.length,v2Data.length);\n}"}
{"ids": "14766", "raw_code": "public boolean equals(Object o){\n  if (o instanceof ServiceConfigManager) {\n    ServiceConfigManager oscm=(ServiceConfigManager)o;\n    if (serviceName.equals(oscm.serviceName) && version.equals(oscm.version)) {\n      return (true);\n    }\n  }\n  return (false);\n}"}
{"ids": "627", "raw_code": "public void addItemBoundsListener(ItemBoundsListener ibl){\n  if (m_bounders == null)   m_bounders=new CopyOnWriteArrayList();\n  m_bounders.add(ibl);\n}"}
{"ids": "64703", "raw_code": "public static S2CellId fromFaceIJ(int face,int i,int j){\n  long n[]={0,face << (POS_BITS - 33)};\n  int bits=(face & SWAP_MASK);\n  for (int k=7; k >= 0; --k) {\n    bits=getBits(n,i,j,k,bits);\n  }\n  S2CellId s=new S2CellId((((n[1] << 32) + n[0]) << 1) + 1);\n  return s;\n}"}
{"ids": "54362", "raw_code": "public void increaseDpi(){\n  if (this.currentDpiPos < (this.dpiSizes.length - 1)) {\n    ++this.currentDpiPos;\n  }\n}"}
{"ids": "57995", "raw_code": "StringVector processPREFIX_URLLIST(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {\n  StringTokenizer tokenizer=new StringTokenizer(value,\" \\t\\n\\r\\f\");\n  int nStrings=tokenizer.countTokens();\n  StringVector strings=new StringVector(nStrings);\n  for (int i=0; i < nStrings; i++) {\n    String prefix=tokenizer.nextToken();\n    String url=handler.getNamespaceForPrefix(prefix);\n    if (url != null)     strings.addElement(url);\n else     throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANT_RESOLVE_NSPREFIX,new Object[]{prefix}));\n  }\n  return strings;\n}"}
{"ids": "12955", "raw_code": "@Override public void write(DataOutput out) throws IOException {\n  out.writeLong(duration);\n  out.writeInt(getLength());\n  for (int i=0; i < coeffs.length; i++) {\n    out.writeFloat(coeffs[i]);\n  }\n}"}
{"ids": "83510", "raw_code": "private void addSharingProfiles(Collection<SharingProfile> sharingProfiles) throws GuacamoleException {\n  for (  SharingProfile sharingProfile : sharingProfiles) {\n    String primaryConnectionIdentifier=sharingProfile.getPrimaryConnectionIdentifier();\n    APIConnection primaryConnection=retrievedConnections.get(primaryConnectionIdentifier);\n    if (primaryConnection != null) {\n      Collection<APISharingProfile> children=primaryConnection.getSharingProfiles();\n      if (children == null) {\n        children=new ArrayList<APISharingProfile>();\n        primaryConnection.setSharingProfiles(children);\n      }\n      children.add(new APISharingProfile(sharingProfile));\n    }\n else     logger.debug(\"Sharing profile \\\"{}\\\" cannot be added to the \" + \"tree: primary connection \\\"{}\\\" does not actually \" + \"exist.\",sharingProfile.getIdentifier(),primaryConnectionIdentifier);\n  }\n}"}
{"ids": "22562", "raw_code": "public void failoverCopy(RPCopyRequestParams copyToFailoverTo) throws RecoverPointException {\n  String bookmarkName=copyToFailoverTo.getBookmarkName();\n  Date apitTime=copyToFailoverTo.getApitTime();\n  if (bookmarkName != null) {\n    logger.info(\"Failover copy to bookmark : \" + bookmarkName);\n  }\n else   if (apitTime != null) {\n    logger.info(\"Failover copy to APIT : \" + apitTime.toString());\n  }\n else {\n    logger.info(\"Failover copy to most recent image\");\n  }\n  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();\n  imageManager.enableCopyImage(functionalAPI,copyToFailoverTo,true);\n}"}
{"ids": "80326", "raw_code": "private static void prepareLoggingSystemEnviroment(){\n  System.setProperty(\"log.directory\",getLogFolder());\n}"}
{"ids": "15342", "raw_code": "public StateAttribute(byte[] octets){\n  super(octets);\n  state=new String(octets,2,octets.length - 2,Charset.forName(\"utf-8\"));\n}"}
{"ids": "47322", "raw_code": "private static long calcSize(long size,long skip,long limit){\n  return size >= 0 ? Math.max(-1,Math.min(size - skip,limit)) : -1;\n}"}
{"ids": "31962", "raw_code": "public static Collection<InetSocketAddress> resolveAddresses(AddressResolver addrRslvr,Iterable<String> addrs,int port) throws IgniteSpiException {\n  assert addrRslvr != null;\n  Collection<InetSocketAddress> extAddrs=new HashSet<>();\n  for (  String addr : addrs) {\n    InetSocketAddress sockAddr=new InetSocketAddress(addr,port);\n    if (!sockAddr.isUnresolved()) {\n      Collection<InetSocketAddress> extAddrs0=resolveAddress(addrRslvr,sockAddr);\n      if (extAddrs0 != null)       extAddrs.addAll(extAddrs0);\n    }\n  }\n  return extAddrs;\n}"}
{"ids": "61937", "raw_code": "private double sampleFromGamma(double k,double theta){\n  boolean accept=false;\n  if (k < 1) {\n    double c=(1 / k);\n    double d=((1 - k) * Math.pow(k,(k / (1 - k))));\n    double u, v, z, e, x;\n    do {\n      u=rng.nextDouble();\n      v=rng.nextDouble();\n      z=-Math.log(u);\n      e=-Math.log(v);\n      x=Math.pow(z,c);\n      if ((z + e) >= (d + x)) {\n        accept=true;\n      }\n    }\n while (!accept);\n    return (x * theta);\n  }\n else {\n    double b=(k - Math.log(4));\n    double c=(k + Math.sqrt(2 * k - 1));\n    double lam=Math.sqrt(2 * k - 1);\n    double cheng=(1 + Math.log(4.5));\n    double u, v, x, y, z, r;\n    do {\n      u=rng.nextDouble();\n      v=rng.nextDouble();\n      y=((1 / lam) * Math.log(v / (1 - v)));\n      x=(k * Math.exp(y));\n      z=(u * v * v);\n      r=(b + (c * y) - x);\n      if ((r >= ((4.5 * z) - cheng)) || (r >= Math.log(z))) {\n        accept=true;\n      }\n    }\n while (!accept);\n    return (x * theta);\n  }\n}"}
{"ids": "37703", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>();\n  newVector.addElement(new Option(\"\\tName of file containing network structure in BIF format\\n\",\"B\",1,\"-B <BIF File>\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "69710", "raw_code": "public BlocklyController build(){\n  if (mViewFactory == null && (mWorkspaceFragment != null || mTrashFragment != null || mToolboxFragment != null || mToolboxDrawer != null)) {\n    throw new IllegalStateException(\"BlockViewFactory cannot be null when using Fragments.\");\n  }\n  if (mWorkspaceHelper == null) {\n    mWorkspaceHelper=new WorkspaceHelper(mContext);\n  }\n  BlockFactory factory=new BlockFactory(mContext,null);\n  for (int i=0; i < mBlockDefResources.size(); i++) {\n    try {\n      factory.addBlocks(mBlockDefResources.get(i));\n    }\n catch (    Throwable e) {\n      factory.clear();\n      throw e;\n    }\n  }\n  for (int i=0; i < mBlockDefAssets.size(); i++) {\n    String assetPath=mBlockDefAssets.get(i);\n    try {\n      factory.addBlocks(mAssetManager.open(assetPath));\n    }\n catch (    IOException e) {\n      factory.clear();\n      throw new IllegalStateException(\"Failed to load block definitions from asset: \" + assetPath,e);\n    }\n  }\n  for (int i=0; i < mBlockDefs.size(); i++) {\n    factory.addBlockTemplate(mBlockDefs.get(i));\n  }\n  BlocklyController controller=new BlocklyController(mContext,factory,mWorkspaceHelper,mViewFactory);\n  if (mToolboxResId != 0) {\n    controller.loadToolboxContents(mToolboxResId);\n  }\n else   if (mToolboxXml != null) {\n    controller.loadToolboxContents(mToolboxXml);\n  }\n else   if (mToolboxAssetId != null && mAssetManager != null) {\n    try {\n      controller.loadToolboxContents(mAssetManager.open(mToolboxAssetId));\n    }\n catch (    IOException e) {\n      throw new IllegalArgumentException(\"Failed to load toolbox from assets \" + mToolboxAssetId,e);\n    }\n  }\n  controller.setWorkspaceFragment(mWorkspaceFragment);\n  controller.setTrashFragment(mTrashFragment);\n  controller.setToolboxFragment(mToolboxFragment);\n  controller.setTrashIcon(mTrashIcon);\n  controller.setVariableCallback(mVariableCallback);\n  return controller;\n}"}
{"ids": "30635", "raw_code": "@Override public void run(){\n  while (!isInterrupted()) {\n    try {\n      KeyHolder<K> ref=(KeyHolder<K>)_queue.remove();\n      V removed=_table.remove(ref);\n      if (_listener != null && removed != null)       _listener.weakEntryRemoved(removed);\n    }\n catch (    InterruptedException e) {\n      interrupt();\n      break;\n    }\n  }\n}"}
{"ids": "56874", "raw_code": "public JobDefinitionCreateRequest createJobDefinitionCreateRequest(String namespaceCd,String jobName,String jobDescription,String activitiXml,List<Parameter> parameters){\n  JobDefinitionCreateRequest request=new JobDefinitionCreateRequest();\n  request.setNamespace(namespaceCd);\n  request.setJobName(jobName);\n  request.setDescription(jobDescription);\n  request.setActivitiJobXml(activitiXml);\n  request.setParameters(parameters);\n  return request;\n}"}
{"ids": "34725", "raw_code": "public TabState restoreTabState(int tabId,boolean encrypted){\n  return TabState.restoreTabState(getTabStateFile(tabId,encrypted),encrypted);\n}"}
{"ids": "86237", "raw_code": "public FTPClient(){\n  addListParser(new UnixListParser());\n  addListParser(new DOSListParser());\n  addListParser(new EPLFListParser());\n  addListParser(new NetWareListParser());\n  addListParser(new MLSDListParser());\n}"}
{"ids": "66546", "raw_code": "private Level descriptionToLogLevel(String description){\n  Level result=Level.OFF;\n  if (description.equals(s_logger.localizeMessage(\"guiLogLevelOff\"))) {\n    result=Level.OFF;\n  }\n else   if (description.equals(s_logger.localizeMessage(\"guiLogLevelSevere\"))) {\n    result=Level.SEVERE;\n  }\n else   if (description.equals(s_logger.localizeMessage(\"guiLogLevelWarning\"))) {\n    result=Level.WARNING;\n  }\n else   if (description.equals(s_logger.localizeMessage(\"guiLogLevelInfo\"))) {\n    result=Level.INFO;\n  }\n else   if (description.equals(s_logger.localizeMessage(\"guiLogLevelConfig\"))) {\n    result=Level.CONFIG;\n  }\n else   if (description.equals(s_logger.localizeMessage(\"guiLogLevelFine\"))) {\n    result=Level.FINE;\n  }\n else   if (description.equals(s_logger.localizeMessage(\"guiLogLevelFiner\"))) {\n    result=Level.FINER;\n  }\n else   if (description.equals(s_logger.localizeMessage(\"guiLogLevelFinest\"))) {\n    result=Level.FINEST;\n  }\n else   if (description.equals(s_logger.localizeMessage(\"guiLogLevelAll\"))) {\n    result=Level.ALL;\n  }\n  return result;\n}"}
{"ids": "56723", "raw_code": "default boolean isImmutable(){\n  return false;\n}"}
{"ids": "30608", "raw_code": "public long renew(String entryUid,String className,int objectType,long duration,boolean fromReplication,boolean origin,boolean isFromGateway) throws UnknownLeaseException, InternalSpaceException {\n  try {\n    extendLeasePeriod(entryUid,className,objectType,duration,fromReplication,origin,false,null,isFromGateway);\n  }\n catch (  UnknownLeaseException unknownLeaseException) {\n    if (_cacheManager.isCacheExternalDB() && objectType != ObjectTypes.NOTIFY_NULL_TEMPLATE && objectType != ObjectTypes.NOTIFY_TEMPLATE) {\n      if (_logger.isLoggable(Level.FINE)) {\n        _logger.log(Level.FINE,\"Failed to renew lease of an entry belonging to external-data-source.\",unknownLeaseException);\n      }\n    }\n else     throw unknownLeaseException;\n  }\n  return duration;\n}"}
{"ids": "10784", "raw_code": "public static void inRange(final long value,final String name,final long minInclusive,final long maxInclusive){\n  if (value < minInclusive || value > maxInclusive) {\n    final String message=String.format(\"%s must be between %d and %d inclusive\",name,minInclusive,maxInclusive);\n    throw new IllegalArgumentException(message);\n  }\n}"}
{"ids": "30980", "raw_code": "public static File unzipToTempFolder(File zipFile){\n  String zipFilename=zipFile.getName();\n  String tempFolderPrefix=zipFilename.substring(0,zipFilename.lastIndexOf('.'));\n  File tempFolder=createTempFolder(tempFolderPrefix);\n  try {\n    PUZipUtils.unzip(zipFile,tempFolder);\n    return tempFolder;\n  }\n catch (  Exception e) {\n    try {\n      FileUtils.deleteFileOrDirectory(tempFolder);\n    }\n catch (    RuntimeException ex) {\n      logger.debug(\"Failed to delete folder \" + tempFolder,ex);\n    }\n    throw new RuntimeException(\"Failed to unzip file \" + zipFile + \" to \"+ tempFolder,e);\n  }\n}"}
{"ids": "37115", "raw_code": "public void clear(){\n  m_reducedResults.clear();\n  m_currentSearchIndex=0;\n}"}
{"ids": "67047", "raw_code": "public static void createAccessorMethod(SootMethod container,Stmt stmt){\n  Body containerBody=container.getActiveBody();\n  soot.util.Chain containerStmts=containerBody.getUnits();\n  if (!containerStmts.contains(stmt))   throw new RuntimeException();\n  if (stmt.containsInvokeExpr()) {\n    createInvokeAccessor(container,stmt);\n  }\n else   if (stmt instanceof AssignStmt) {\n    AssignStmt as=(AssignStmt)stmt;\n    FieldRef ref;\n    if (as.getLeftOp() instanceof FieldRef) {\n      ref=(FieldRef)as.getLeftOp();\n      createSetAccessor(container,as,ref);\n    }\n else     if (as.getRightOp() instanceof FieldRef) {\n      ref=(FieldRef)as.getRightOp();\n      createGetAccessor(container,as,ref);\n    }\n else {\n      throw new RuntimeException(\"Expected class member access\");\n    }\n  }\n else   throw new RuntimeException(\"Expected class member access\");\n}"}
{"ids": "49311", "raw_code": "@Override public void displayChanged(){\n  updateGC();\n}"}
{"ids": "18140", "raw_code": "public final void pushPair(Node v1,Node v2){\n  if (null == m_map) {\n    m_map=new Node[m_blocksize];\n    m_mapSize=m_blocksize;\n  }\n else {\n    if ((m_firstFree + 2) >= m_mapSize) {\n      m_mapSize+=m_blocksize;\n      Node newMap[]=new Node[m_mapSize];\n      System.arraycopy(m_map,0,newMap,0,m_firstFree);\n      m_map=newMap;\n    }\n  }\n  m_map[m_firstFree]=v1;\n  m_map[m_firstFree + 1]=v2;\n  m_firstFree+=2;\n}"}
{"ids": "43572", "raw_code": "private static String escapeJSON(String text){\n  StringBuilder builder=new StringBuilder();\n  builder.append('\"');\n  for (int index=0; index < text.length(); index++) {\n    char chr=text.charAt(index);\nswitch (chr) {\ncase '\"':\ncase '\\\\':\n      builder.append('\\\\');\n    builder.append(chr);\n  break;\ncase '\\b':\nbuilder.append(\"\\\\b\");\nbreak;\ncase '\\t':\nbuilder.append(\"\\\\t\");\nbreak;\ncase '\\n':\nbuilder.append(\"\\\\n\");\nbreak;\ncase '\\r':\nbuilder.append(\"\\\\r\");\nbreak;\ndefault :\nif (chr < ' ') {\nString t=\"000\" + Integer.toHexString(chr);\nbuilder.append(\"\\\\u\" + t.substring(t.length() - 4));\n}\n else {\nbuilder.append(chr);\n}\nbreak;\n}\n}\nbuilder.append('\"');\nreturn builder.toString();\n}"}
{"ids": "1073", "raw_code": "final Segment<K,V> segmentFor(int hash){\n  return segments[(hash >>> segmentShift) & segmentMask];\n}"}
{"ids": "74475", "raw_code": "@SuppressWarnings(\"deprecation\") private void startSetTimeChanged(){\n  int hours=0;\n  int minutes=0;\n  try {\n    hours=Integer.parseInt(startHoursField.getText());\n  }\n catch (  Exception e) {\n    JOptionPane.showMessageDialog(this,(Bundle.getMessage(\"HoursError\") + \"\\n\" + e),Bundle.getMessage(\"ErrorTitle\"),JOptionPane.ERROR_MESSAGE);\n    log.error(\"Exception when parsing hours Field: \" + e);\n    return;\n  }\n  if ((hours < 0) || (hours > 23)) {\n    JOptionPane.showMessageDialog(this,(Bundle.getMessage(\"HoursRangeError\")),Bundle.getMessage(\"ErrorTitle\"),JOptionPane.ERROR_MESSAGE);\n    return;\n  }\n  try {\n    minutes=Integer.parseInt(startMinutesField.getText());\n  }\n catch (  Exception e) {\n    JOptionPane.showMessageDialog(this,(Bundle.getMessage(\"HoursError\") + \"\\n\" + e),Bundle.getMessage(\"ErrorTitle\"),JOptionPane.ERROR_MESSAGE);\n    log.error(\"Exception when parsing hours Field: \" + e);\n    return;\n  }\n  if ((minutes < 0) || (minutes > 59)) {\n    JOptionPane.showMessageDialog(this,(Bundle.getMessage(\"MinutesRangeError\")),Bundle.getMessage(\"ErrorTitle\"),JOptionPane.ERROR_MESSAGE);\n    return;\n  }\n  long mSecPerHour=3600000;\n  long mSecPerMinute=60000;\n  Date tem=clock.getTime();\n  int cHours=tem.getHours();\n  long cNumMSec=tem.getTime();\n  long nNumMSec=((cNumMSec / mSecPerHour) * mSecPerHour) - (cHours * mSecPerHour) + (hours * mSecPerHour) + (minutes * mSecPerMinute);\n  clock.setStartSetTime(startSetTimeCheckBox.isSelected(),new Date(nNumMSec));\n  changed=true;\n}"}
{"ids": "39370", "raw_code": "public static String serialize(Object toSerialize) throws Exception {\n  Class<?> xstreamClass;\n  java.lang.reflect.Constructor<?> constructor;\n  Object xstream;\n  Class<?>[] serializeArgsClasses=new Class[1];\n  Object[] serializeArgs=new Object[1];\n  java.lang.reflect.Method methodSerialize;\n  String result;\n  xstreamClass=Class.forName(\"com.thoughtworks.xstream.XStream\");\n  constructor=xstreamClass.getConstructor();\n  xstream=constructor.newInstance();\n  serializeArgsClasses[0]=Object.class;\n  serializeArgs[0]=toSerialize;\n  methodSerialize=xstreamClass.getMethod(\"toXML\",serializeArgsClasses);\n  try {\n    result=(String)methodSerialize.invoke(xstream,serializeArgs);\n  }\n catch (  Exception ex) {\n    result=null;\n  }\n  return result;\n}"}
{"ids": "41359", "raw_code": "@Override public void release(){\n  super.release();\n}"}
{"ids": "62244", "raw_code": "public static <E>List<E> of(){\n  return Collections.emptyList();\n}"}
{"ids": "7470", "raw_code": "protected void drawDomainCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,int datasetIndex,Comparable rowKey,Comparable columnKey,Stroke stroke,Paint paint){\n  CategoryDataset dataset=getDataset(datasetIndex);\n  CategoryAxis axis=getDomainAxisForDataset(datasetIndex);\n  CategoryItemRenderer renderer=getRenderer(datasetIndex);\n  Line2D line;\n  if (orientation == PlotOrientation.VERTICAL) {\n    double xx=renderer.getItemMiddle(rowKey,columnKey,dataset,axis,dataArea,RectangleEdge.BOTTOM);\n    line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());\n  }\n else {\n    double yy=renderer.getItemMiddle(rowKey,columnKey,dataset,axis,dataArea,RectangleEdge.LEFT);\n    line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);\n  }\n  g2.setStroke(stroke);\n  g2.setPaint(paint);\n  g2.draw(line);\n}"}
{"ids": "62599", "raw_code": "@Override public Table summary(){\n  Table table=Table.create(\"Column: \" + name());\n  CategoryColumn measure=CategoryColumn.create(\"Measure\");\n  CategoryColumn value=CategoryColumn.create(\"Value\");\n  table.addColumn(measure);\n  table.addColumn(value);\n  measure.add(\"Count\");\n  value.add(String.valueOf(size()));\n  measure.add(\"Missing\");\n  value.add(String.valueOf(countMissing()));\n  measure.add(\"Earliest\");\n  value.add(String.valueOf(min()));\n  measure.add(\"Latest\");\n  value.add(String.valueOf(max()));\n  return table;\n}"}
{"ids": "37268", "raw_code": "public CVisibilityCriteriumPanel(final CVisibilityCriterium criterium){\n  super(new BorderLayout());\n  visibilityCriterium=criterium;\n  visibilityStateBox.addActionListener(visibilityStateBoxListener);\n  initPanel();\n}"}
{"ids": "65912", "raw_code": "public boolean isAlterAdd(){\n  return columnsToAdd.size() > 0;\n}"}
{"ids": "37138", "raw_code": "private boolean processRemovedNode(final INaviViewNode node){\n  if (node instanceof INaviCodeNode) {\n    final INaviCodeNode cnode=(INaviCodeNode)node;\n    try {\n      final INaviFunction targetFunction=cnode.getParentFunction();\n      if (m_nodeCounter.containsKey(targetFunction)) {\n        final int newCounter=m_nodeCounter.get(targetFunction) - 1;\n        if (newCounter == 0) {\n          m_nodeCounter.remove(targetFunction);\n          final Set<CCrossReference> toDelete=new HashSet<CCrossReference>();\n          for (          final CCrossReference reference : m_crossReferences) {\n            if (reference.getCalledFunction() == targetFunction) {\n              toDelete.add(reference);\n            }\n          }\n          m_crossReferences.removeAll(toDelete);\n          return true;\n        }\n else {\n          m_nodeCounter.put(targetFunction,newCounter);\n        }\n      }\n    }\n catch (    final MaybeNullException exception) {\n    }\n  }\n  return false;\n}"}
{"ids": "62264", "raw_code": "public long transferTo(long position,long count,OutputStream dst) throws IOException {\n  return transferTo(position,count,Channels.newChannel(dst));\n}"}
{"ids": "25798", "raw_code": "private void writeIndexFile() throws IOException, CarbonDataWriterException {\n  IndexHeader indexHeader=CarbonMetadataUtil.getIndexHeader(localCardinality,thriftColumnSchemaList);\n  List<BlockIndex> blockIndexThrift=CarbonMetadataUtil.getBlockIndexInfo(blockIndexInfoList);\n  String fileName=storeLocation + File.separator + carbonTablePath.getCarbonIndexFileName(carbonDataFileAttributes.getTaskId(),carbonDataFileAttributes.getFactTimeStamp());\n  CarbonIndexFileWriter writer=new CarbonIndexFileWriter();\n  writer.openThriftWriter(fileName);\n  writer.writeThrift(indexHeader);\n  for (  BlockIndex blockIndex : blockIndexThrift) {\n    writer.writeThrift(blockIndex);\n  }\n  writer.close();\n  copyCarbonDataFileToCarbonStorePath(fileName);\n}"}
{"ids": "39655", "raw_code": "public void nackAll(PubsubReader<T> reader) throws IOException {\n  checkState(this.reader == null,\"Cannot nackAll on persisting checkpoint\");\n  List<String> batchYetToAckIds=new ArrayList<>(Math.min(notYetReadIds.size(),ACK_BATCH_SIZE));\n  for (  String ackId : notYetReadIds) {\n    batchYetToAckIds.add(ackId);\n    if (batchYetToAckIds.size() >= ACK_BATCH_SIZE) {\n      long nowMsSinceEpoch=now(reader);\n      reader.nackBatch(nowMsSinceEpoch,batchYetToAckIds);\n      batchYetToAckIds.clear();\n    }\n  }\n  if (!batchYetToAckIds.isEmpty()) {\n    long nowMsSinceEpoch=now(reader);\n    reader.nackBatch(nowMsSinceEpoch,batchYetToAckIds);\n  }\n}"}
{"ids": "19436", "raw_code": "static public void assertEquals(String message,Object expected,Object actual){\n  if (expected == null && actual == null)   return;\n  if (expected != null && expected.equals(actual))   return;\n  failNotEquals(message,expected,actual);\n}"}
{"ids": "46195", "raw_code": "public static NamingException mapErrorCode(int errorCode,String errorMessage){\n  if (errorCode == LdapClient.LDAP_SUCCESS)   return null;\n  NamingException e=null;\n  String message=LdapClient.getErrorMessage(errorCode,errorMessage);\nswitch (errorCode) {\ncase LdapClient.LDAP_ALIAS_DEREFERENCING_PROBLEM:\n    e=new NamingException(message);\n  break;\ncase LdapClient.LDAP_ALIAS_PROBLEM:\ne=new NamingException(message);\nbreak;\ncase LdapClient.LDAP_ATTRIBUTE_OR_VALUE_EXISTS:\ne=new AttributeInUseException(message);\nbreak;\ncase LdapClient.LDAP_AUTH_METHOD_NOT_SUPPORTED:\ncase LdapClient.LDAP_CONFIDENTIALITY_REQUIRED:\ncase LdapClient.LDAP_STRONG_AUTH_REQUIRED:\ncase LdapClient.LDAP_INAPPROPRIATE_AUTHENTICATION:\ne=new AuthenticationNotSupportedException(message);\nbreak;\ncase LdapClient.LDAP_ENTRY_ALREADY_EXISTS:\ne=new NameAlreadyBoundException(message);\nbreak;\ncase LdapClient.LDAP_INVALID_CREDENTIALS:\ncase LdapClient.LDAP_SASL_BIND_IN_PROGRESS:\ne=new AuthenticationException(message);\nbreak;\ncase LdapClient.LDAP_INAPPROPRIATE_MATCHING:\ne=new InvalidSearchFilterException(message);\nbreak;\ncase LdapClient.LDAP_INSUFFICIENT_ACCESS_RIGHTS:\ne=new NoPermissionException(message);\nbreak;\ncase LdapClient.LDAP_INVALID_ATTRIBUTE_SYNTAX:\ncase LdapClient.LDAP_CONSTRAINT_VIOLATION:\ne=new InvalidAttributeValueException(message);\nbreak;\ncase LdapClient.LDAP_LOOP_DETECT:\ne=new NamingException(message);\nbreak;\ncase LdapClient.LDAP_NO_SUCH_ATTRIBUTE:\ne=new NoSuchAttributeException(message);\nbreak;\ncase LdapClient.LDAP_NO_SUCH_OBJECT:\ne=new NameNotFoundException(message);\nbreak;\ncase LdapClient.LDAP_OBJECT_CLASS_MODS_PROHIBITED:\ncase LdapClient.LDAP_OBJECT_CLASS_VIOLATION:\ncase LdapClient.LDAP_NOT_ALLOWED_ON_RDN:\ne=new SchemaViolationException(message);\nbreak;\ncase LdapClient.LDAP_NOT_ALLOWED_ON_NON_LEAF:\ne=new ContextNotEmptyException(message);\nbreak;\ncase LdapClient.LDAP_OPERATIONS_ERROR:\ne=new NamingException(message);\nbreak;\ncase LdapClient.LDAP_OTHER:\ne=new NamingException(message);\nbreak;\ncase LdapClient.LDAP_PROTOCOL_ERROR:\ne=new CommunicationException(message);\nbreak;\ncase LdapClient.LDAP_SIZE_LIMIT_EXCEEDED:\ne=new SizeLimitExceededException(message);\nbreak;\ncase LdapClient.LDAP_TIME_LIMIT_EXCEEDED:\ne=new TimeLimitExceededException(message);\nbreak;\ncase LdapClient.LDAP_UNAVAILABLE_CRITICAL_EXTENSION:\ne=new OperationNotSupportedException(message);\nbreak;\ncase LdapClient.LDAP_UNAVAILABLE:\ncase LdapClient.LDAP_BUSY:\ne=new ServiceUnavailableException(message);\nbreak;\ncase LdapClient.LDAP_UNDEFINED_ATTRIBUTE_TYPE:\ne=new InvalidAttributeIdentifierException(message);\nbreak;\ncase LdapClient.LDAP_UNWILLING_TO_PERFORM:\ne=new OperationNotSupportedException(message);\nbreak;\ncase LdapClient.LDAP_COMPARE_FALSE:\ncase LdapClient.LDAP_COMPARE_TRUE:\ncase LdapClient.LDAP_IS_LEAF:\ne=new NamingException(message);\nbreak;\ncase LdapClient.LDAP_ADMIN_LIMIT_EXCEEDED:\ne=new LimitExceededException(message);\nbreak;\ncase LdapClient.LDAP_REFERRAL:\ne=new NamingException(message);\nbreak;\ncase LdapClient.LDAP_PARTIAL_RESULTS:\ne=new NamingException(message);\nbreak;\ncase LdapClient.LDAP_INVALID_DN_SYNTAX:\ncase LdapClient.LDAP_NAMING_VIOLATION:\ne=new InvalidNameException(message);\nbreak;\ndefault :\ne=new NamingException(message);\nbreak;\n}\nreturn e;\n}"}
{"ids": "6757", "raw_code": "public final void computeIndex(){\n  if (indexComputed) {\n    return;\n  }\n  List<Long> cellList=new ArrayList();\n  List<Integer> edgeList=new ArrayList();\n  for (int i=0; i < getNumEdges(); ++i) {\n    S2Point from=edgeFrom(i);\n    S2Point to=edgeTo(i);\n    ArrayList<S2CellId> cover=new ArrayList();\n    int level=getCovering(from,to,true,cover);\n    minimumS2LevelUsed=Math.min(minimumS2LevelUsed,level);\n    for (    S2CellId cellId : cover) {\n      cellList.add(cellId.id());\n      edgeList.add(i);\n    }\n  }\n  cells=new long[cellList.size()];\n  edges=new int[edgeList.size()];\n  for (int i=0; i < cells.length; i++) {\n    cells[i]=cellList.get(i);\n    edges[i]=edgeList.get(i);\n  }\n  sortIndex();\n  indexComputed=true;\n}"}
{"ids": "30987", "raw_code": "public WaitForAnyListener(int numberOfResults){\n  this(numberOfResults,null);\n}"}
{"ids": "24411", "raw_code": "public static Object stringToValue(String string){\n  Double d;\n  if (string.equals(\"\")) {\n    return string;\n  }\n  if (string.equalsIgnoreCase(\"true\")) {\n    return Boolean.TRUE;\n  }\n  if (string.equalsIgnoreCase(\"false\")) {\n    return Boolean.FALSE;\n  }\n  if (string.equalsIgnoreCase(\"null\")) {\n    return JSONObject.NULL;\n  }\n  char b=string.charAt(0);\n  if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {\n    try {\n      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {\n        d=Double.valueOf(string);\n        if (!d.isInfinite() && !d.isNaN()) {\n          return d;\n        }\n      }\n else {\n        Long myLong=new Long(string);\n        if (myLong.longValue() == myLong.intValue()) {\n          return new Integer(myLong.intValue());\n        }\n else {\n          return myLong;\n        }\n      }\n    }\n catch (    Exception ignore) {\n    }\n  }\n  return string;\n}"}
{"ids": "26500", "raw_code": "public EntityQuery orderBy(String... fields){\n  this.orderBy=Arrays.asList(fields);\n  return this;\n}"}
{"ids": "27314", "raw_code": "public void removeNodesFromPartition(List<IGroupMemberNode> nodesToRemove){\n  for (  final IGroupMemberNode nodeToRemove : nodesToRemove) {\n    if (nodeToRemove != null) {\n      if (!nonOptionalNonMinusNodes.remove(nodeToRemove)) {\n        if (nodeToRemove.equals(optionalOrMinus)) {\n          optionalOrMinus=null;\n        }\n      }\n    }\n  }\n  recomputeDefinitelyProduced();\n}"}
{"ids": "49516", "raw_code": "public static void banner(Logger logger,Class<?> clazz,String methodName,String text){\n  String string=clazz.getSimpleName() + \".\" + methodName;\n  if (text != null) {\n    string+=\" \" + text;\n  }\n  logger.info(\"\");\n  logger.info(\"*************************************************************\");\n  logger.info(\"* \" + string);\n  logger.info(\"*************************************************************\");\n}"}
{"ids": "60897", "raw_code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  if (resourceBundleName != null) {\n    try {\n      rb=ResourceBundle.getBundle(resourceBundleName);\n    }\n catch (    MissingResourceException e) {\n      rb=null;\n    }\n  }\n}"}
{"ids": "32534", "raw_code": "private static void exit(@Nullable String errMsg,@Nullable Options options,int exitCode){\n  if (errMsg != null)   echo(\"ERROR: \" + errMsg);\n  String runner=System.getProperty(IGNITE_PROG_NAME,\"randignite.{sh|bat}\");\n  int space=runner.indexOf(' ');\n  runner=runner.substring(0,space == -1 ? runner.length() : space);\n  if (options != null) {\n    HelpFormatter formatter=new HelpFormatter();\n    formatter.printHelp(runner,options);\n  }\n  System.exit(exitCode);\n}"}
{"ids": "62980", "raw_code": "private static void replaceAltSpecialInstructions(){\n  fillInstructionMap(0x8300,0xFF00,new FrInstruction(InstructionFormat.D,0,0,\"AND\",\"#u,C\",\"Cw\",Instruction.FlowType.NONE,false,false,andccrU8SimulationCode));\n  fillInstructionMap(0x8700,0xFF00,new FrInstruction(InstructionFormat.D,0,0,\"MOV\",\"#u,M\",\"\",Instruction.FlowType.NONE,false,false,stilmU8SimulationCode));\n  fillInstructionMap(0x9300,0xFF00,new FrInstruction(InstructionFormat.D,0,0,\"OR\",\"#u,C\",\"Cw\",Instruction.FlowType.NONE,false,false,orccrU8SimulationCode));\n  fillInstructionMap(0xA300,0xFF00,new FrInstruction(InstructionFormat.D,0,0,\"ADD\",\"#4s,S\",\"\",Instruction.FlowType.NONE,false,false,addspS10SimulationCode));\n}"}
{"ids": "74051", "raw_code": "@Override public boolean addSensorToRoute(String sensorName,int mode){\n  if (_controlSensorList.size() >= MAX_CONTROL_SENSORS) {\n    log.warn(\"Reached maximum number of control Sensors for Route: {}\",getSystemName());\n  }\n  ControlSensor sensor=new ControlSensor(sensorName);\n  log.debug(\"addSensorToRoute {} {}\",getSystemName(),sensorName);\n  if (!sensor.setState(mode)) {\n    return false;\n  }\n  if (isControlSensorIncluded(sensor)) {\n    log.debug(\"Not adding duplicate control sensor {} to route {}\",sensorName,getSystemName());\n  }\n else {\n    _controlSensorList.add(sensor);\n  }\n  return true;\n}"}
{"ids": "49347", "raw_code": "private void eliminateBackfillStates(int baseState){\n  if (statesToBackfill.contains(new Integer(baseState))) {\n    statesToBackfill.removeElement(new Integer(baseState));\n    short[] state=tempStateTable.elementAt(baseState);\n    for (int i=0; i < numCategories; i++) {\n      if (state[i] != 0) {\n        eliminateBackfillStates(state[i]);\n      }\n    }\n  }\n}"}
{"ids": "6979", "raw_code": "static boolean separateConvexPolygons(float[] verts1,float[] verts2,Vector2 separation){\n  final int length1=verts1.length;\n  final int length2=verts2.length;\n  for (int i=0; i < length1; i+=2) {\n    final int j=(i + 1) % length1;\n    float projX=verts1[j + 1] - verts1[i + 1];\n    float projY=verts1[i] - verts1[j];\n    final float length=(float)Math.sqrt(projX * projX + projY * projY);\n    projX/=length;\n    projY/=length;\n    float min1=Float.POSITIVE_INFINITY, max1=Float.NEGATIVE_INFINITY;\n    for (int k=0; k < length1; k+=2) {\n      final float dot=projX * verts1[k] + projY * verts1[k + 1];\n      if (dot < min1)       min1=dot;\n      if (dot > max1)       max1=dot;\n    }\n    float min2=Float.POSITIVE_INFINITY, max2=Float.NEGATIVE_INFINITY;\n    for (int k=0; k < length2; k+=2) {\n      final float dot=projX * verts2[k] + projY * verts2[k + 1];\n      if (dot < min2)       min2=dot;\n      if (dot > max2)       max2=dot;\n    }\n    if ((max1 < min2) || (max2 < min1)) {\n      if (null != separation)       separation.set(projY,-projX);\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "66163", "raw_code": "public String paymentTerm(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){\n  Integer C_PaymentTerm_ID=(Integer)value;\n  int C_Invoice_ID=Env.getContextAsInt(ctx,WindowNo,\"C_Invoice_ID\");\n  if (C_PaymentTerm_ID == null || C_PaymentTerm_ID.intValue() == 0 || C_Invoice_ID == 0)   return \"\";\n  MPaymentTerm pt=new MPaymentTerm(ctx,C_PaymentTerm_ID.intValue(),null);\n  if (pt.get_ID() == 0)   return \"PaymentTerm not found\";\n  boolean valid=pt.apply(C_Invoice_ID);\n  mTab.setValue(\"IsPayScheduleValid\",valid ? \"Y\" : \"N\");\n  return \"\";\n}"}
{"ids": "40410", "raw_code": "static void checkTypeRefAndPath(int typeRef,TypePath typePath){\n  int mask=0;\nswitch (typeRef >>> 24) {\ncase TypeReference.CLASS_TYPE_PARAMETER:\ncase TypeReference.METHOD_TYPE_PARAMETER:\ncase TypeReference.METHOD_FORMAL_PARAMETER:\n    mask=0xFFFF0000;\n  break;\ncase TypeReference.FIELD:\ncase TypeReference.METHOD_RETURN:\ncase TypeReference.METHOD_RECEIVER:\ncase TypeReference.LOCAL_VARIABLE:\ncase TypeReference.RESOURCE_VARIABLE:\ncase TypeReference.INSTANCEOF:\ncase TypeReference.NEW:\ncase TypeReference.CONSTRUCTOR_REFERENCE:\ncase TypeReference.METHOD_REFERENCE:\nmask=0xFF000000;\nbreak;\ncase TypeReference.CLASS_EXTENDS:\ncase TypeReference.CLASS_TYPE_PARAMETER_BOUND:\ncase TypeReference.METHOD_TYPE_PARAMETER_BOUND:\ncase TypeReference.THROWS:\ncase TypeReference.EXCEPTION_PARAMETER:\nmask=0xFFFFFF00;\nbreak;\ncase TypeReference.CAST:\ncase TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:\ncase TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:\ncase TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:\ncase TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:\nmask=0xFF0000FF;\nbreak;\ndefault :\nthrow new IllegalArgumentException(\"Invalid type reference sort 0x\" + Integer.toHexString(typeRef >>> 24));\n}\nif ((typeRef & ~mask) != 0) {\nthrow new IllegalArgumentException(\"Invalid type reference 0x\" + Integer.toHexString(typeRef));\n}\nif (typePath != null) {\nfor (int i=0; i < typePath.getLength(); ++i) {\nint step=typePath.getStep(i);\nif (step != TypePath.ARRAY_ELEMENT && step != TypePath.INNER_TYPE && step != TypePath.TYPE_ARGUMENT && step != TypePath.WILDCARD_BOUND) {\nthrow new IllegalArgumentException(\"Invalid type path step \" + i + \" in \"+ typePath);\n}\nif (step != TypePath.TYPE_ARGUMENT && typePath.getStepArgument(i) != 0) {\nthrow new IllegalArgumentException(\"Invalid type path step argument for step \" + i + \" in \"+ typePath);\n}\n}\n}\n}"}
{"ids": "76677", "raw_code": "public static void transformCriteria(Properties formProperties,InputStream xslIs,Result result) throws SAXException, IOException, ParserConfigurationException, TransformerException {\n  dbf.setNamespaceAware(true);\n  DocumentBuilder builder=dbf.newDocumentBuilder();\n  org.w3c.dom.Document xslDoc=builder.parse(xslIs);\n  DOMSource ds=new DOMSource(xslDoc);\n  Transformer transformer=null;\nsynchronized (tFactory) {\n    transformer=tFactory.newTransformer(ds);\n  }\n  transformCriteria(formProperties,transformer,result);\n}"}
{"ids": "25347", "raw_code": "public static List<byte[]> splitAndPad(byte[] byteArray,int blocksize){\n  List<byte[]> blocks=new ArrayList<byte[]>();\n  int numBlocks=(int)Math.ceil(byteArray.length / (double)blocksize);\n  for (int i=0; i < numBlocks; i++) {\n    byte[] block=new byte[blocksize];\n    Arrays.fill(block,(byte)0x00);\n    if (i + 1 == numBlocks) {\n      int remainingBytes=byteArray.length - (i * blocksize);\n      System.arraycopy(byteArray,i * blocksize,block,0,remainingBytes);\n    }\n else {\n      System.arraycopy(byteArray,i * blocksize,block,0,blocksize);\n    }\n    blocks.add(block);\n  }\n  return blocks;\n}"}
{"ids": "43921", "raw_code": "public void put(E item) throws InterruptedException {\n  if (!done.get()) {\n    queue.put(item);\n  }\n}"}
{"ids": "49561", "raw_code": "protected void notifyComplete(){\n  final String methodName=\"notifyComplete\";\n  log.fine(CLASS_NAME,methodName,\"404\",new Object[]{getKey(),this.response,this.exception});\nsynchronized (responseLock) {\n    if (exception == null && pendingComplete) {\n      completed=true;\n      pendingComplete=false;\n    }\n else {\n      pendingComplete=false;\n    }\n    responseLock.notifyAll();\n  }\nsynchronized (sentLock) {\n    sent=true;\n    sentLock.notifyAll();\n  }\n}"}
{"ids": "60350", "raw_code": "private Node<K,V>[] initTable(){\n  Node<K,V>[] tab;\n  int sc;\n  while ((tab=table) == null || tab.length == 0) {\n    if ((sc=sizeCtl) < 0) {\n      Thread.yield();\n    }\n else     if (U.compareAndSwapInt(this,SIZECTL,sc,-1)) {\n      try {\n        if ((tab=table) == null || tab.length == 0) {\n          int n=(sc > 0) ? sc : DEFAULT_CAPACITY;\n          @SuppressWarnings(\"unchecked\") Node<K,V>[] nt=(Node<K,V>[])new Node<?,?>[n];\n          table=tab=nt;\n          sc=n - (n >>> 2);\n        }\n      }\n  finally {\n        sizeCtl=sc;\n      }\n      break;\n    }\n  }\n  return tab;\n}"}
{"ids": "63622", "raw_code": "public BufferedImage drawBarGraphWithStdDev(String graphTitle,String xLabel,String yLabel,HashMap<ComparableLabel,Integer[]> barDataPoints,String[] barLabels,Long stdDevHigh,Long stdDevLow,Long graphMaxValue){\n  BufferedImage bi=new BufferedImage(this.WIDTH,this.HEIGHT,BufferedImage.TYPE_INT_ARGB);\n  Graphics2D g2d=bi.createGraphics();\n  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n  g2d.setRenderingHints(renderHints);\n  drawChartAndGraphRectangles(g2d);\n  drawBarLegend(g2d,\"Legend\",barLabels,stdDevHigh,stdDevLow);\n  drawTitleAndLabels(g2d,graphTitle,xLabel,yLabel);\n  Collection<Integer[]> valueCollection=barDataPoints.values();\n  Set<ComparableLabel> dateKeySet=barDataPoints.keySet();\n  long maxValue=0;\n  for (  Integer[] intArray : valueCollection) {\n    for (    Integer intValue : intArray) {\n      if (maxValue < intValue) {\n        maxValue=intValue;\n      }\n    }\n  }\n  long yMaxMark=0;\n  int yLabelXOffset=50;\n  yMaxMark=determineYMaxMark(maxValue,stdDevHigh,graphMaxValue);\n  drawYAxisDivisions(g2d,yMaxMark,yLabelXOffset);\n  ArrayList<ComparableLabel> orderedDateSet=new ArrayList<ComparableLabel>();\n  orderedDateSet.addAll(dateKeySet);\n  Collections.sort(orderedDateSet);\n  drawXAxisDivisions(g2d,orderedDateSet);\n  drawBarsOnGraph(g2d,orderedDateSet,barDataPoints,yMaxMark);\n  if (stdDevHigh != null) {\n    drawStdDevLine(g2d,stdDevHigh,yMaxMark,this.stdDevHighColor);\n  }\n  if (stdDevLow != null) {\n    drawStdDevLine(g2d,stdDevLow,yMaxMark,this.stdDevLowColor);\n  }\n  return bi;\n}"}
{"ids": "6845", "raw_code": "public synchronized boolean loadPublicKey(){\n  if (!has(\"public_key\") || !has(\"key_algorithm\"))   return false;\n  String encodedKey=getString(\"public_key\");\n  String algorithm=getString(\"key_algorithm\");\n  PublicKey pub=IO.decodePublicKey(encodedKey,algorithm);\n  if (pub != null) {\n    public_key=pub;\n    key_algorithm=algorithm;\n    setPeerHash();\n    return true;\n  }\n  return false;\n}"}
{"ids": "81240", "raw_code": "private String extractProjectNameFromUri(@NotNull String uri){\n  int indexFinishProjectName=uri.lastIndexOf(\".\");\n  int indexStartProjectName=uri.lastIndexOf(\"/\") != -1 ? uri.lastIndexOf(\"/\") + 1 : (uri.lastIndexOf(\":\") + 1);\n  if (indexStartProjectName != 0 && indexStartProjectName < indexFinishProjectName) {\n    return uri.substring(indexStartProjectName,indexFinishProjectName);\n  }\n  if (indexStartProjectName != 0) {\n    return uri.substring(indexStartProjectName);\n  }\n  return \"\";\n}"}
{"ids": "12731", "raw_code": "private void loadTextData(DataInputStream dis) throws IOException {\n  for (int f=0; f < numFrames; f++) {\n    times[f]=Float.parseFloat(General.readWord(dis));\n    General.readWord(dis);\n    for (int c=0; c < numChannels; c++) {\n      frames[f][c]=Float.parseFloat(General.readWord(dis));\n    }\n  }\n}"}
{"ids": "41853", "raw_code": "public void addSwipeListener(SwipeListener listener){\n  if (mListeners == null) {\n    mListeners=new ArrayList<SwipeListener>();\n  }\n  mListeners.add(listener);\n}"}
{"ids": "44581", "raw_code": "public static boolean isGzipContent(String contentEncoding){\n  return contentEncoding != null && contentEncoding.contains(\"gzip\");\n}"}
{"ids": "1698", "raw_code": "public synchronized boolean checkSize(final int sizeChecked){\n  if (!started) {\n    throw new IllegalStateException(\"TimedBuffer is not started\");\n  }\n  if (sizeChecked > bufferSize) {\n    throw new IllegalStateException(\"Can't write records bigger than the bufferSize(\" + bufferSize + \") on the journal\");\n  }\n  if (bufferLimit == 0 || buffer.writerIndex() + sizeChecked > bufferLimit) {\n    flush();\n    delayFlush=true;\n    final int remainingInFile=bufferObserver.getRemainingBytes();\n    if (sizeChecked > remainingInFile) {\n      return false;\n    }\n else {\n      bufferLimit=Math.min(remainingInFile,bufferSize);\n      return true;\n    }\n  }\n else {\n    delayFlush=true;\n    return true;\n  }\n}"}
{"ids": "41819", "raw_code": "void reclaimScrapViews(List<View> views){\n  if (mViewTypeCount == 1) {\n    views.addAll(mCurrentScrap);\n  }\n else {\n    final int viewTypeCount=mViewTypeCount;\n    final ArrayList<View>[] scrapViews=mScrapViews;\n    for (int i=0; i < viewTypeCount; ++i) {\n      final ArrayList<View> scrapPile=scrapViews[i];\n      views.addAll(scrapPile);\n    }\n  }\n}"}
{"ids": "42704", "raw_code": "private void formatNodeTo(Formatter f,int level,RadixTreeNode<T> node){\n  for (int i=0; i < level; i++) {\n    f.format(\" \");\n  }\n  f.format(\"|\");\n  for (int i=0; i < level; i++) {\n    f.format(\"-\");\n  }\n  if (node.isReal() == true)   f.format(\"%s[%s]*%n\",node.getKey(),node.getValue());\n else   f.format(\"%s%n\",node.getKey());\n  for (  RadixTreeNode<T> child : node.getChildern()) {\n    formatNodeTo(f,level + 1,child);\n  }\n}"}
{"ids": "213", "raw_code": "protected void startDownload(int blocks){\n  if (blocks > 0)   log.info(\"Downloading block chain of size \" + blocks + \". \"+ (blocks > 1000 ? \"This may take a while.\" : \"\"));\n}"}
{"ids": "17257", "raw_code": "public void add(int start,int end,int handler,int type){\n  if (start < end)   entries.add(new ExceptionTableEntry(start,end,handler,type));\n}"}
{"ids": "40841", "raw_code": "private void freeKick(Team offense){\n  if (gameTime <= 0)   return;\n else {\n    if (gameTime < 180 && ((gamePoss && (awayScore - homeScore) <= 8 && (awayScore - homeScore) > 0) || (!gamePoss && (homeScore - awayScore) <= 8 && (homeScore - awayScore) > 0))) {\n      if (offense.getK(0).ratKickFum * Math.random() > 60 || Math.random() < 0.1) {\n        gameEventLog+=getEventPrefix() + offense.abbr + \" K \"+ offense.getK(0).name+ \" successfully executes onside kick! \"+ offense.abbr+ \" has possession!\";\n        gameYardLine=35;\n        gameDown=1;\n        gameYardsNeed=10;\n      }\n else {\n        gameEventLog+=getEventPrefix() + offense.abbr + \" K \"+ offense.getK(0).name+ \" failed the onside kick and lost possession.\";\n        gamePoss=!gamePoss;\n        gameYardLine=65;\n        gameDown=1;\n        gameYardsNeed=10;\n      }\n      gameTime-=4 + 4 * Math.random();\n    }\n else {\n      gameYardLine=(int)(115 - (offense.getK(0).ratKickPow + 20 - 40 * Math.random()));\n      if (gameYardLine <= 0)       gameYardLine=25;\n      gameDown=1;\n      gameYardsNeed=10;\n      gamePoss=!gamePoss;\n      gameTime-=15 * Math.random();\n    }\n  }\n}"}
{"ids": "57139", "raw_code": "private void processNewPort(long sw,short p){\n  if (isLinkDiscoverySuppressed(sw,p)) {\n    return;\n  }\n  IOFSwitch iofSwitch=floodlightProvider.getSwitch(sw);\n  if (iofSwitch == null)   return;\n  if (autoPortFastFeature && iofSwitch.isFastPort(p)) {\n    return;\n  }\n  NodePortTuple npt=new NodePortTuple(sw,p);\n  discover(sw,p);\n  if (!iofSwitch.isFastPort(p)) {\n    addToQuarantineQueue(npt);\n  }\n else {\n    addToMaintenanceQueue(npt);\n  }\n}"}
{"ids": "62331", "raw_code": "public static void put3ByteInt(ByteBuffer buffer,int val){\n  put3ByteInt(buffer,val,buffer.order());\n}"}
{"ids": "82011", "raw_code": "public static void assertNoException(Runnable expression,String errorMessage){\n  if (verbose) {\n    log(\"assertNoException(\" + expression + \", \"+ errorMessage+ \")\");\n  }\n  try {\n    expression.run();\n  }\n catch (  RuntimeException failure) {\n    TestUtils.fail(errorMessage);\n  }\n}"}
{"ids": "81673", "raw_code": "@Override public int indexOf(Object object){\n  return indexOf(object,0);\n}"}
{"ids": "52523", "raw_code": "protected ResponseFormatType generateAcceptFormat(String format) throws BadApiRequestException {\n  try {\n    return format == null ? ResponseFormatType.JSON : ResponseFormatType.valueOf(format.toUpperCase(Locale.ENGLISH));\n  }\n catch (  IllegalArgumentException e) {\n    LOG.error(ACCEPT_FORMAT_INVALID.logFormat(format),e);\n    throw new BadApiRequestException(ACCEPT_FORMAT_INVALID.format(format));\n  }\n}"}
{"ids": "85590", "raw_code": "public SharedObject(Map<String,Object> data,String name,String path,boolean persistent){\n  super();\n  this.name=name;\n  this.path=path;\n  this.persistentSO=persistent;\n  ownerMessage=new SharedObjectMessage(null,name,0,persistent);\n  creationTime=System.currentTimeMillis();\n  super.setAttributes(data);\n}"}
{"ids": "72691", "raw_code": "public static String dateToString(Date date){\n  if (date == null) {\n    return null;\n  }\n else {\n    DateFormat df=new SimpleDateFormat(dateFormat);\n    df.setTimeZone(utc);\n    return df.format(date);\n  }\n}"}
{"ids": "20421", "raw_code": "public static String infoFirstLastPixels(ImageLineInt line){\n  return line.imgInfo.channels == 1 ? String.format(\"first=(%d) last=(%d)\",line.scanline[0],line.scanline[line.scanline.length - 1]) : String.format(\"first=(%d %d %d) last=(%d %d %d)\",line.scanline[0],line.scanline[1],line.scanline[2],line.scanline[line.scanline.length - line.imgInfo.channels],line.scanline[line.scanline.length - line.imgInfo.channels + 1],line.scanline[line.scanline.length - line.imgInfo.channels + 2]);\n}"}
{"ids": "69151", "raw_code": "public static Iterable<Element> elements(NodeList nodes){\n  return null;\n}"}
{"ids": "29324", "raw_code": "public static int minDistance(String word1,String word2){\n  if (word1.equals(word2))   return 0;\n  int m=word1.length();\n  int n=word2.length();\n  int[][] d=new int[m + 1][n + 1];\n  d[0][0]=0;\n  for (int i=1; i < m + 1; i++)   d[i][0]=i;\n  for (int j=1; j < n + 1; j++)   d[0][j]=j;\n  for (int i=1; i < m + 1; i++) {\n    for (int j=1; j < n + 1; j++) {\n      d[i][j]=Math.min(Math.min(d[i][j - 1] + 1,d[i - 1][j] + 1),word1.charAt(i - 1) == word2.charAt(j - 1) ? d[i - 1][j - 1] : d[i - 1][j - 1] + 1);\n    }\n  }\n  return d[m][n];\n}"}
{"ids": "34612", "raw_code": "public void addUrl(String url){\n  Set<String> urls=getCachedUrls();\n  urls.add(url);\n  putCachedUrls(urls);\n  updateNotification(urls);\n}"}
{"ids": "66541", "raw_code": "private void closeDatabaseConnection(Connection connection){\n  if (connection == null)   return;\n  try {\n    connection.close();\n  }\n catch (  SQLException e) {\n  }\n  connection=null;\n  return;\n}"}
{"ids": "16908", "raw_code": "public void addUnnamedTask(TmmTask task){\n  if (unnamedTaskExecutor == null || unnamedTaskExecutor.isShutdown()) {\n    unnamedTaskExecutor=createUnnamedTaskExecutor();\n  }\n  task.addListener(this);\n  task.setState(TaskState.QUEUED);\n  unnamedTaskExecutor.execute(task);\n}"}
{"ids": "27468", "raw_code": "public Path(final Vertex v0,final Vertex v1,final EdgeSample edgeSample){\n  if (v0 == null)   throw new IllegalArgumentException();\n  if (v1 == null)   throw new IllegalArgumentException();\n  if (v0.sample == null)   throw new IllegalArgumentException();\n  if (edgeSample == null)   throw new IllegalArgumentException();\n  if (edgeSample.getSample() == null)   throw new IllegalArgumentException();\n  this.vertices=new Vertex[]{v0,v1};\n  this.preds=getPredicates(vertices);\n  this.edgeSample=edgeSample;\n  this.sumEstRead=v0.sample.estCard + edgeSample.estRead;\n  this.sumEstCard=edgeSample.estCard;\n  this.sumEstCost=getCost(this.sumEstRead,this.sumEstCard);\n}"}
{"ids": "11235", "raw_code": "public boolean evaluate(Map record){\n  Object recVal=record.get(keyField);\n  return op.evaluate(this.val,recVal);\n}"}
{"ids": "71867", "raw_code": "public char[] toCharArray(){\n  Charset utf8=Charset.forName(\"UTF-8\");\n  CharBuffer charBuffer=utf8.decode(ByteBuffer.wrap(buffer,offset,length));\n  char[] chars=new char[charBuffer.remaining()];\n  charBuffer.get(chars);\n  return chars;\n}"}
{"ids": "85522", "raw_code": "public static byte[] chars2utf(char[] src,int sindex,int len){\n  byte[] dst=new byte[len * 3];\n  int len1=chars2utf(src,sindex,dst,0,len);\n  byte[] result=new byte[len1];\n  System.arraycopy(dst,0,result,0,len1);\n  return result;\n}"}
{"ids": "66528", "raw_code": "private void readReference(){\n  String sql;\n  if (Env.isBaseLanguage(Env.getCtx(),\"AD_Ref_List\"))   sql=\"SELECT Value, Name, Description FROM AD_Ref_List \" + \"WHERE AD_Reference_ID=135 ORDER BY Name\";\n else   sql=\"SELECT l.Value, t.Name, t.Description \" + \"FROM AD_Ref_List l, AD_Ref_List_Trl t \" + \"WHERE l.AD_Ref_List_ID=t.AD_Ref_List_ID\"+ \" AND t.AD_Language='\" + Env.getAD_Language(Env.getCtx()) + \"'\"+ \" AND l.AD_Reference_ID=135 ORDER BY t.Name\";\n  ArrayList<String> v_value=new ArrayList<String>();\n  ArrayList<String> v_name=new ArrayList<String>();\n  ArrayList<String> v_description=new ArrayList<String>();\n  try {\n    PreparedStatement pstmt=DB.prepareStatement(sql,null);\n    ResultSet rs=pstmt.executeQuery();\n    while (rs.next()) {\n      String value=rs.getString(1);\n      String name=rs.getString(2);\n      String description=rs.getString(3);\n      if (description == null)       description=\"\";\n      v_value.add(value);\n      v_name.add(name);\n      v_description.add(description);\n    }\n    rs.close();\n    pstmt.close();\n  }\n catch (  SQLException e) {\n    log.log(Level.SEVERE,sql,e);\n  }\n  int size=v_value.size();\n  s_value=new String[size];\n  s_name=new String[size];\n  s_description=new String[size];\n  for (int i=0; i < size; i++) {\n    s_value[i]=(String)v_value.get(i);\n    s_name[i]=(String)v_name.get(i);\n    s_description[i]=(String)v_description.get(i);\n  }\n}"}
{"ids": "25948", "raw_code": "private CarbonDictionarySortInfo createColumnSortInfo(CarbonDictionarySortModel[] dictionarySortModels){\n  int[] sortIndex;\n  int[] sortIndexInverted;\n  Arrays.sort(dictionarySortModels);\n  sortIndex=new int[dictionarySortModels.length];\n  sortIndexInverted=new int[dictionarySortModels.length];\n  for (int i=0; i < dictionarySortModels.length; i++) {\n    CarbonDictionarySortModel dictionarySortModel=dictionarySortModels[i];\n    sortIndex[i]=dictionarySortModel.getKey();\n    sortIndexInverted[dictionarySortModel.getKey() - 1]=i + 1;\n  }\n  dictionarySortModels=null;\n  List<Integer> sortIndexList=convertToList(sortIndex);\n  List<Integer> sortIndexInvertedList=convertToList(sortIndexInverted);\n  return new CarbonDictionarySortInfo(sortIndexList,sortIndexInvertedList);\n}"}
{"ids": "67946", "raw_code": "public static void agentmain(String agentArgs,Instrumentation inst) throws Exception {\nsynchronized (JVMAgent.class) {\n    if (instance == null) {\n      instance=new JVMAgent(inst);\n      waitForInstance.countDown();\n    }\n  }\n}"}
{"ids": "66593", "raw_code": "public void close(){\n  Handler[] handlerArray=m_logger.getHandlers();\n  for (int i=0; i < handlerArray.length; i++) {\n    Handler h=handlerArray[i];\n    h.flush();\n    h.close();\n    m_logger.removeHandler(h);\n  }\n}"}
{"ids": "60388", "raw_code": "public static List<String> splitText(String text){\n  int startLine=0;\n  int i=0;\n  int n=text.length();\n  ArrayList<String> rc=new ArrayList<String>();\n  while (i < n) {\nswitch (text.charAt(i)) {\ncase '\\n':\n      i++;\n    if (i < n && text.charAt(i) == '\\r') {\n      i++;\n    }\n  rc.add(text.substring(startLine,i));\nstartLine=i;\nbreak;\ncase '\\r':\ni++;\nif (i < n && text.charAt(i) == '\\n') {\ni++;\n}\nrc.add(text.substring(startLine,i));\nstartLine=i;\nbreak;\ndefault :\ni++;\n}\n}\nif (startLine == text.length()) {\nrc.add(\"\");\n}\n else {\nrc.add(text.substring(startLine,i));\n}\nreturn rc;\n}"}
{"ids": "10013", "raw_code": "CountryCodeSource maybeStripInternationalPrefixAndNormalize(StringBuilder number,String possibleIddPrefix){\n  if (number.length() == 0) {\n    return CountryCodeSource.FROM_DEFAULT_COUNTRY;\n  }\n  Matcher m=PLUS_CHARS_PATTERN.matcher(number);\n  if (m.lookingAt()) {\n    number.delete(0,m.end());\n    normalize(number);\n    return CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN;\n  }\n  Pattern iddPattern=regexCache.getPatternForRegex(possibleIddPrefix);\n  normalize(number);\n  return parsePrefixAsIdd(iddPattern,number) ? CountryCodeSource.FROM_NUMBER_WITH_IDD : CountryCodeSource.FROM_DEFAULT_COUNTRY;\n}"}
{"ids": "60882", "raw_code": "@Override public void write(int value){\n  digest.update((byte)value);\n}"}
{"ids": "26240", "raw_code": "public boolean isManufactured(boolean ignoreSupplierProducts){\n  List<GenericValue> supplierProducts=null;\n  try {\n    supplierProducts=product.getRelated(\"SupplierProduct\",UtilMisc.toMap(\"supplierPrefOrderId\",\"10_MAIN_SUPPL\"),UtilMisc.toList(\"minimumOrderQuantity\"),false);\n  }\n catch (  GenericEntityException gee) {\n    Debug.logError(\"Problem in BOMNode.isManufactured()\",module);\n  }\n  supplierProducts=EntityUtil.filterByDate(supplierProducts,UtilDateTime.nowTimestamp(),\"availableFromDate\",\"availableThruDate\",true);\n  return childrenNodes.size() > 0 && (ignoreSupplierProducts || UtilValidate.isEmpty(supplierProducts));\n}"}
{"ids": "62901", "raw_code": "private void addCodeFromField(StringBuilder sb,Field f){\n  try {\n    sb.append(f.getName() + \" = \" + f.getInt(KeyEvent.class));\n  }\n catch (  IllegalArgumentException e) {\n    e.printStackTrace();\n  }\ncatch (  IllegalAccessException e) {\n    e.printStackTrace();\n  }\n  sb.append(\"\\n\");\n}"}
{"ids": "75946", "raw_code": "protected boolean scrollUp(TextView widget,Spannable buffer,int amount){\n  final Layout layout=widget.getLayout();\n  final int top=widget.getScrollY();\n  int topLine=layout.getLineForVertical(top);\n  if (layout.getLineTop(topLine) == top) {\n    topLine-=1;\n  }\n  if (topLine >= 0) {\n    topLine=Math.max(topLine - amount + 1,0);\n    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(topLine));\n    return true;\n  }\n  return false;\n}"}
{"ids": "43622", "raw_code": "public void load(String filename){\n  ++numMappings;\n  loadClassFile(filename);\n}"}
{"ids": "11656", "raw_code": "protected void fillFaceToolBar(JToolBar faceTB,ButtonGroup bg){\n  for (  EditToolLoader loader : loaderList) {\n    String[] classnames=loader.getEditableClasses();\n    for (int i=0; i < classnames.length; i++) {\n      ImageIcon icon=loader.getIcon(classnames[i]);\n      JToggleButton btn=new JToggleButton(icon,false);\n      btn.setToolTipText(loader.getPrettyName(classnames[i]));\n      btn.setFocusable(false);\n      btn.setActionCommand(classnames[i]);\n      btn.addActionListener(this);\n      bg.add(btn);\n      faceTB.add(btn);\n    }\n  }\n}"}
{"ids": "86841", "raw_code": "public void writeToFile(File filename) throws IOException {\n  FileUtils.stringToFile(mText.toString(),filename);\n}"}
{"ids": "85745", "raw_code": "protected void transformRectsTouch(ArrayList<RectF> rects){\n  for (int i=0; i < rects.size(); i++) {\n    mMatrixTouch.mapRect(rects.get(i));\n  }\n}"}
{"ids": "51435", "raw_code": "@Override public final int arrayOffset(){\n  return protectedArrayOffset();\n}"}
{"ids": "18537", "raw_code": "public DOMTestDocumentBuilderFactory newInstance(DocumentBuilderSetting[] newSettings) throws DOMTestIncompatibleException {\n  if (newSettings == null) {\n    return this;\n  }\n  DocumentBuilderSetting[] mergedSettings=mergeSettings(newSettings);\n  return new BatikTestDocumentBuilderFactory(mergedSettings);\n}"}
{"ids": "12420", "raw_code": "public float[] valueArray(float[] array){\n  if (array == null || array.length != size()) {\n    array=new float[count];\n  }\n  System.arraycopy(values,0,array,0,count);\n  return array;\n}"}
{"ids": "34965", "raw_code": "public static Set<TypeVariable> methodTypeToTargets(final AnnotatedExecutableType methodType){\n  final List<AnnotatedTypeVariable> annotatedTypeVars=methodType.getTypeVariables();\n  final Set<TypeVariable> targets=new LinkedHashSet<>(annotatedTypeVars.size());\n  for (  final AnnotatedTypeVariable atv : annotatedTypeVars) {\n    targets.add(atv.getUnderlyingType());\n  }\n  return targets;\n}"}
{"ids": "51790", "raw_code": "private void validateTableMetaDataSingleRow(String tableNamePattern,String[] types,Map<TableMetaData,Object> validationRules) throws Exception {\n  checkValidationRulesComplete(validationRules);\n  try (ResultSet tables=dbmd.getTables(null,null,tableNamePattern,types)){\n    assertTrue(\"Expected row in table metadata\",tables.next());\n    validateRowValues(tables,validationRules);\n    assertFalse(\"Expected only one row in result set\",tables.next());\n  }\n }"}
{"ids": "13331", "raw_code": "public void flush() throws IOException {\n  try {\n    _writer.write(_buffer,0,_pos);\n    _writer.flush();\n  }\n catch (  IOException except) {\n    if (_exception == null)     _exception=except;\n    throw except;\n  }\n  _pos=0;\n}"}
{"ids": "36553", "raw_code": "private JMenu makeLogLevelMenu(){\n  return new LogLevelMenu();\n}"}
{"ids": "51472", "raw_code": "@Override public void close() throws IOException {\nsynchronized (lock) {\n    buf=null;\n    in.close();\n  }\n}"}
{"ids": "9694", "raw_code": "public DGetAlias(JFrame parent,String title,String alias){\n  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);\n  initComponents(alias);\n}"}
{"ids": "35697", "raw_code": "public static void closeQuietly(Closeable closeable){\n  if (closeable != null) {\n    try {\n      closeable.close();\n    }\n catch (    RuntimeException rethrown) {\n      throw rethrown;\n    }\ncatch (    Exception ignored) {\n    }\n  }\n}"}
{"ids": "49958", "raw_code": "public static ArrayList<Hop> deepCopyHopsDag(ArrayList<Hop> hops) throws HopsException {\n  ArrayList<Hop> ret=new ArrayList<Hop>();\n  try {\n    HashMap<Long,Hop> memo=new HashMap<Long,Hop>();\n    for (    Hop hopRoot : hops)     ret.add(rDeepCopyHopsDag(hopRoot,memo));\n  }\n catch (  Exception ex) {\n    throw new HopsException(ex);\n  }\n  return ret;\n}"}
{"ids": "1592", "raw_code": "public void addAll(T... items){\n  if (mEventDelegate != null)   mEventDelegate.addData(items == null ? 0 : items.length);\n  if (items != null && items.length != 0) {\nsynchronized (mLock) {\n      Collections.addAll(mObjects,items);\n    }\n  }\n  if (mNotifyOnChange)   notifyDataSetChanged();\n}"}
{"ids": "84471", "raw_code": "private void replaceImpl(final int startIndex,final int endIndex,final int removeLen,final String insertStr,final int insertLen){\n  final int newSize=size - removeLen + insertLen;\n  if (insertLen != removeLen) {\n    ensureCapacity(newSize);\n    System.arraycopy(buffer,endIndex,buffer,startIndex + insertLen,size - endIndex);\n    size=newSize;\n  }\n  if (insertLen > 0) {\n    insertStr.getChars(0,insertLen,buffer,startIndex);\n  }\n}"}
{"ids": "59027", "raw_code": "public void testtestIsLast() throws SQLException {\n  assertFalse(target.isLast());\n  target.absolute(-1);\n  assertTrue(target.isLast());\n  assertFalse(emptyTarget.isLast());\n  assertFalse(emptyTarget.next());\n  assertFalse(emptyTarget.isLast());\n  try {\n    target.close();\n    target.isLast();\n    fail(\"Should get SQLException\");\n  }\n catch (  SQLException e) {\n  }\n}"}
{"ids": "84289", "raw_code": "public final void addHelperText(@NonNull final CharSequence helperText){\n  ensureNotNull(helperText,\"The helper text may not be null\");\n  ensureNotEmpty(helperText,\"The helper text may not be empty\");\n  if (!helperTexts.contains(helperText)) {\n    helperTexts.add(helperText);\n    verifyPasswordStrength();\n  }\n}"}
{"ids": "21693", "raw_code": "public static String generateNativeGuid(DbClient dbClient,Volume volume) throws IOException {\n  StorageSystem device=dbClient.queryObject(StorageSystem.class,volume.getStorageController());\n  return String.format(\"%s+%s+\" + VOLUME + \"+%s\",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber(),volume.getNativeId());\n}"}
{"ids": "24861", "raw_code": "public AgentMappings saveAgentMappings(AgentMappings agentMappings,boolean checkEnvironments) throws BusinessException, JAXBException, IOException {\n  if (checkEnvironments) {\n    checkEnvironments(agentMappings);\n  }\n  AgentMappings current;\n  do {\n    current=agentMappingsReference.get();\n    if (current.getRevision() != agentMappings.getRevision()) {\n      throw new BusinessException(\"Update of the agent mappings.\",ConfigurationInterfaceErrorCodeEnum.REVISION_CHECK_FAILED);\n    }\n  }\n while (!agentMappingsReference.compareAndSet(current,agentMappings));\n  agentMappings.setRevision(agentMappings.getRevision() + 1);\n  saveAgentMapping(agentMappings);\n  publishAgentMappingsUpdateEvent();\n  return agentMappings;\n}"}
{"ids": "51325", "raw_code": "public E push(E object){\n  addElement(object);\n  return object;\n}"}
{"ids": "39578", "raw_code": "protected void newCertBtnListener(){\n  NewCertificateDialogData data=new NewCertificateDialogData();\n  NewCertificateDialog dialog=new NewCertificateDialog(getShell(),data,\"\");\n  int returnCode=dialog.open();\n  if (returnCode == Window.OK) {\n    String certPath=data.getCerFilePath();\n    certTxt.setText(certPath != null ? certPath.replace('\\\\','/') : certPath);\n    certInfoTxt.setText(getCertInfo(certTxt.getText()));\n  }\n}"}
{"ids": "37348", "raw_code": "public static void generateMov(final ITranslationEnvironment environment,final long baseOffset,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {\n  Preconditions.checkNotNull(environment,\"Error: Argument environment can't be null\");\n  Preconditions.checkNotNull(instruction,\"Error: Argument instruction can't be null\");\n  Preconditions.checkNotNull(instructions,\"Error: Argument instructions can't be null\");\n  long reilOffset=baseOffset;\n  final List<? extends IOperandTree> operands=instruction.getOperands();\n  final TranslationResult loadSource=Helpers.translateOperand(environment,reilOffset,operands.get(1),true);\n  instructions.addAll(loadSource.getInstructions());\n  reilOffset=baseOffset + instructions.size();\n  final TranslationResult loadDest=Helpers.translateOperand(environment,reilOffset,operands.get(0),false);\n  instructions.addAll(loadDest.getInstructions());\n  reilOffset=baseOffset + instructions.size();\n  Helpers.writeBack(environment,reilOffset,operands.get(0),loadSource.getRegister(),loadDest.getSize(),loadDest.getAddress(),loadDest.getType(),instructions);\n}"}
{"ids": "18082", "raw_code": "public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {\n  if (!m_shouldProcess)   return;\n  XSLTElementProcessor elemProcessor=getCurrentProcessor();\n  XSLTElementDef def=elemProcessor.getElemDef();\n  if (def.getType() != XSLTElementDef.T_PCDATA)   elemProcessor=def.getProcessorFor(null,\"text()\");\n  if (null == elemProcessor) {\n    if (!XMLCharacterRecognizer.isWhiteSpace(ch,start,length))     error(XSLMessages.createMessage(XSLTErrorResources.ER_NONWHITESPACE_NOT_ALLOWED_IN_POSITION,null),null);\n  }\n else   elemProcessor.characters(this,ch,start,length);\n}"}
{"ids": "60115", "raw_code": "public boolean removeEntry(int xIndex,int dataSetIndex){\n  if (dataSetIndex >= mDataSets.size())   return false;\n  T dataSet=mDataSets.get(dataSetIndex);\n  Entry e=dataSet.getEntryForXIndex(xIndex);\n  return removeEntry(e,dataSetIndex);\n}"}
{"ids": "79910", "raw_code": "public Vec2 toVector(Point2D v){\n  return new Vec2(toMeters(v.getX()),toMeters(-v.getY()));\n}"}
{"ids": "21591", "raw_code": "@Override public void terminateAnyRestoreSessions(StorageSystem storage,BlockObject from,URI volume,TaskCompleter taskCompleter) throws Exception {\n  BlockObject blockObject=BlockObject.fetch(_dbClient,volume);\n  Collection<CIMObjectPath> syncObjects=null;\n  if (storage.checkIfVmax3()) {\n    syncObjects=_helper.getSettingsDefineStatePaths(storage,blockObject,(BlockSnapshot)from);\n  }\n else {\n    syncObjects=getRestoredOrMixedStateSyncObjects(storage,blockObject);\n  }\n  for (  CIMObjectPath syncObject : syncObjects) {\n    resumeSnapshot(storage,from,blockObject,syncObject,taskCompleter);\n  }\n}"}
{"ids": "79401", "raw_code": "public static <T>Set<T> toSet(T obj1,T obj2,T obj3,T obj4,T obj5,T obj6){\n  Set<T> theSet=new LinkedHashSet<T>();\n  theSet.add(obj1);\n  theSet.add(obj2);\n  theSet.add(obj3);\n  theSet.add(obj4);\n  theSet.add(obj5);\n  theSet.add(obj6);\n  return theSet;\n}"}
{"ids": "31224", "raw_code": "protected void writeGraphicCtrlExt() throws IOException {\n  out.write(0x21);\n  out.write(0xf9);\n  out.write(4);\n  int transp, disp;\n  if (transparent == -1) {\n    transp=0;\n    disp=0;\n  }\n else {\n    transp=1;\n    disp=2;\n  }\n  if (dispose >= 0) {\n    disp=dispose & 7;\n  }\n  disp<<=2;\n  out.write(0 | disp | 0| transp);\n  writeShort(delay);\n  out.write(transIndex);\n  out.write(0);\n}"}
{"ids": "84594", "raw_code": "public final double doOperation() throws OperatorFailedException {\n  int index;\n  if (updateMap == null) {\n    index=MathUtils.nextInt(parameter.getDimension());\n  }\n else {\n    index=updateMap.get(MathUtils.nextInt(updateMapSize));\n  }\n  double draw=(2.0 * MathUtils.nextDouble() - 1.0) * windowSize;\n  double newValue=parameter.getParameterValue(index) + draw;\n  final Bounds<Double> bounds=parameter.getBounds();\n  final double lower=(lowerOperatorBound == null ? bounds.getLowerLimit(index) : Math.max(bounds.getLowerLimit(index),lowerOperatorBound));\n  final double upper=(upperOperatorBound == null ? bounds.getUpperLimit(index) : Math.min(bounds.getUpperLimit(index),upperOperatorBound));\n  if (condition == BoundaryCondition.reflecting) {\n    newValue=reflectValue(newValue,lower,upper);\n  }\n else   if (condition == BoundaryCondition.absorbing && (newValue < lower || newValue > upper)) {\n    return 0.0;\n  }\n else   if (newValue < lower || newValue > upper) {\n    throw new OperatorFailedException(\"proposed value outside boundaries\");\n  }\n  parameter.setParameterValue(index,newValue);\n  return 0.0;\n}"}
{"ids": "32396", "raw_code": "public Collection<Object> injectables(){\n  return Collections.emptyList();\n}"}
{"ids": "69317", "raw_code": "private void updateEffectiveDimensions(){\n  effectiveWidth=Math.max(0,width - leftBorder - rightBorder);\n  effectiveHeight=Math.max(0,height - topBorder - bottomBorder);\n}"}
{"ids": "54320", "raw_code": "public void addAttribute(AttributeInfo info){\n  if (attribute == null)   attribute=new ArrayList();\n  AttributeInfo.remove(attribute,info.getName());\n  attribute.add(info);\n}"}
{"ids": "80972", "raw_code": "public void addLine(String text) throws BadLocationException {\n  if (text == null || text.length() == 0 || text.equals(\"\\n\")) {\n    return;\n  }\n  document.replace(document.getLength(),0,text);\n}"}
{"ids": "74168", "raw_code": "protected void muteButtonPressed(ActionEvent e){\n  JToggleButton b=(JToggleButton)e.getSource();\n  log.debug(\"Mute button pressed. value = \" + b.isSelected());\n  firePropertyChange(PropertyChangeID.MUTE,!b.isSelected(),b.isSelected());\n}"}
{"ids": "5546", "raw_code": "public TwoDPoint(String s){\n  StringTokenizer st=new StringTokenizer(s,\",\");\n  x=Double.valueOf(st.nextToken());\n  y=Double.valueOf(st.nextToken());\n}"}
{"ids": "13627", "raw_code": "private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  init();\n}"}
{"ids": "33455", "raw_code": "public static boolean isClassSupport(String clzName){\n  try {\n    Class.forName(clzName);\n    return true;\n  }\n catch (  ClassNotFoundException e) {\n    return false;\n  }\n}"}
{"ids": "4624", "raw_code": "public void addPopupListener(final PopupListener listener){\n  if (!popupListeners.contains(listener)) {\n    popupListeners.add(listener);\n  }\n}"}
{"ids": "15918", "raw_code": "public static byte[] decode(byte[] data){\n  int len=data.length / 4 * 3;\n  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);\n  try {\n    encoder.decode(data,0,data.length,bOut);\n  }\n catch (  Exception e) {\n    throw new DecoderException(\"unable to decode base64 data: \" + e.getMessage(),e);\n  }\n  return bOut.toByteArray();\n}"}
{"ids": "25108", "raw_code": "public static String buildSelectorFromAttributeTypeAndValue(String attributeType,String attributeValue){\n  StringBuilder strb=new StringBuilder();\n  strb.append(OPEN_BRACKET);\n  strb.append(attributeType);\n  strb.append(EQUAL);\n  strb.append(attributeValue);\n  strb.append(CLOSE_BRACKET);\n  return strb.toString();\n}"}
{"ids": "34182", "raw_code": "public static Bitmap scaleFit(Bitmap src,int maxW,int maxH){\n  float ratio=Math.min(maxW / (float)src.getWidth(),maxH / (float)src.getHeight());\n  int newW=(int)(src.getWidth() * ratio);\n  int newH=(int)(src.getHeight() * ratio);\n  return scale(src,newW,newH);\n}"}
{"ids": "60986", "raw_code": "public File(String dirPath,String name){\n  if (name == null) {\n    throw new NullPointerException(\"name == null\");\n  }\n  if (dirPath == null || dirPath.isEmpty()) {\n    this.path=fixSlashes(name);\n  }\n else   if (name.isEmpty()) {\n    this.path=fixSlashes(dirPath);\n  }\n else {\n    this.path=fixSlashes(join(dirPath,name));\n  }\n}"}
{"ids": "41553", "raw_code": "void decodeAttributeBody(byte[] attributeValue,char offset,char length){\n  username=new byte[length];\n  System.arraycopy(attributeValue,offset,username,0,length);\n}"}
{"ids": "17470", "raw_code": "protected synchronized byte[] engineGenerateSeed(int numBytes){\n  byte[] myBytes;\n  if (numBytes < 0) {\n    throw new NegativeArraySizeException(Integer.toString(numBytes));\n  }\n  if (numBytes == 0) {\n    return EmptyArray.BYTE;\n  }\n  if (myRandom == null) {\n    myRandom=new SHA1PRNG_SecureRandomImpl();\n    myRandom.engineSetSeed(getRandomBytes(DIGEST_LENGTH));\n  }\n  myBytes=new byte[numBytes];\n  myRandom.engineNextBytes(myBytes);\n  return myBytes;\n}"}
{"ids": "22254", "raw_code": "public static String normalizeInet4Address(String ip4String){\n  final int[] octets=parseInet4Address(ip4String);\n  if (octets == null) {\n    return null;\n  }\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < 4; i++) {\n    if (i > 0) {\n      sb.append('.');\n    }\n    sb.append(octets[i]);\n  }\n  return sb.toString();\n}"}
{"ids": "56999", "raw_code": "public static int[] shuffle(int[] input){\n  List<Integer> vals=new ArrayList<Integer>(input.length);\n  for (int i=0; i < input.length; i++)   vals.add(input[i]);\n  Collections.shuffle(vals,SEEDED_RANDOM);\n  int[] copy=new int[input.length];\n  for (int i=0; i < input.length; i++)   copy[i]=vals.get(i);\n  return copy;\n}"}
{"ids": "33676", "raw_code": "public boolean offer(PooledConnection pooledConnection){\n  acquiredConnections.remove(pooledConnection);\n  boolean offer=queue.offer(pooledConnection);\n  if (!offer) {\n    pooledConnection.dispose();\n  }\n  if (isTerminating.get()) {\n    PooledConnection poll=queue.poll();\n    if (poll != null) {\n      poll.dispose();\n    }\n  }\n  return offer;\n}"}
{"ids": "20184", "raw_code": "private int parseStyleInDefaultWorkspace(GeoServerRESTReader reader,int count,List<StyleWrapper> styleList){\n  RESTStyleList geoServerStyleList=reader.getStyles();\n  for (  String style : geoServerStyleList.getNames()) {\n    StyleWrapper newStyleWrapper=new StyleWrapper(DEFAULT_WORKSPACE_NAME,style);\n    styleList.add(newStyleWrapper);\n    if (parentObj != null) {\n      parentObj.readStylesProgress(connection,count,count);\n    }\n    count++;\n  }\n  return count;\n}"}
{"ids": "1567", "raw_code": "private ClassSignature loadClassFromJigsaw(String classname) throws IOException {\n  if (method_Class_getModule == null || method_Module_getName == null) {\n    return null;\n  }\n  final Class<?> clazz;\n  final String moduleName;\n  try {\n    clazz=Class.forName(classname,false,loader);\n    final Object module=method_Class_getModule.invoke(clazz);\n    moduleName=(String)method_Module_getName.invoke(module);\n  }\n catch (  Exception e) {\n    return null;\n  }\n  return new ClassSignature(clazz,AsmUtils.isRuntimeModule(moduleName));\n}"}
{"ids": "38255", "raw_code": "public void clearAttributeSpecs(){\n  if (m_attributeSpecs == null) {\n    m_attributeSpecs=new ArrayList<AttributeSpec>();\n  }\n  m_attributeSpecs.clear();\n}"}
{"ids": "76328", "raw_code": "public void loadProperties(boolean silent){\n  loadPropertiesFile(System.getProperty(PROPERTIES_FILE,\"evosuite-files/evosuite.properties\"),silent);\n  initializeProperties();\n}"}
{"ids": "3903", "raw_code": "@Override public void start(){\n  try {\n    JournalClientEndpoint endpoint=connect();\n    if (endpoint != null) {\n      OutputStream os;\n      _os=os=endpoint.startMessage();\n      if (os != null) {\n        os.write('M');\n      }\n    }\n  }\n catch (  Exception e) {\n    log.finer(e.toString());\n  }\n}"}
{"ids": "47577", "raw_code": "static private int readBytes(int c[],int len,InputStream is) throws IOException {\n  byte buf[]=new byte[len];\n  if (is.read(buf,0,len) < len) {\n    return -1;\n  }\n  for (int i=0; i < len; i++) {\n    c[i]=buf[i] & 0xff;\n  }\n  return 0;\n}"}
{"ids": "72623", "raw_code": "public static void sort(Object[] array){\n  if (array.length > 1) {\n    Arrays.sort(array,INSTANCE);\n  }\n}"}
{"ids": "53589", "raw_code": "public static int expectedSizeOfProbabilityTable(RandomVariable... vars){\n  int expectedSizeOfDistribution=1;\n  if (null != vars) {\n    for (    RandomVariable rv : vars) {\n      if (!(rv.getDomain() instanceof FiniteDomain)) {\n        throw new IllegalArgumentException(\"Cannot have an infinite domain for a variable in this calculation:\" + rv);\n      }\n      FiniteDomain d=(FiniteDomain)rv.getDomain();\n      expectedSizeOfDistribution*=d.size();\n    }\n  }\n  return expectedSizeOfDistribution;\n}"}
{"ids": "6196", "raw_code": "public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {\n  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);\n  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);\n  List<Mesh> list=new ArrayList<>();\n  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {\n    Mesh mesh=generateMesh(md5Model,md5Mesh);\n    handleTexture(mesh,md5Mesh,defaultColour);\n    list.add(mesh);\n  }\n  Mesh[] meshes=new Mesh[list.size()];\n  meshes=list.toArray(meshes);\n  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);\n  return result;\n}"}
{"ids": "24832", "raw_code": "static String encodeHighLevel(String msg,Compaction compaction,Charset encoding) throws WriterException {\n  StringBuilder sb=new StringBuilder(msg.length());\n  if (encoding == null) {\n    encoding=DEFAULT_ENCODING;\n  }\n else   if (!DEFAULT_ENCODING.equals(encoding)) {\n    CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding.name());\n    if (eci != null) {\n      encodingECI(eci.getValue(),sb);\n    }\n  }\n  int len=msg.length();\n  int p=0;\n  int textSubMode=SUBMODE_ALPHA;\n  byte[] bytes=null;\n  if (compaction == Compaction.TEXT) {\n    encodeText(msg,p,len,sb,textSubMode);\n  }\n else   if (compaction == Compaction.BYTE) {\n    bytes=msg.getBytes(encoding);\n    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);\n  }\n else   if (compaction == Compaction.NUMERIC) {\n    sb.append((char)LATCH_TO_NUMERIC);\n    encodeNumeric(msg,p,len,sb);\n  }\n else {\n    int encodingMode=TEXT_COMPACTION;\n    while (p < len) {\n      int n=determineConsecutiveDigitCount(msg,p);\n      if (n >= 13) {\n        sb.append((char)LATCH_TO_NUMERIC);\n        encodingMode=NUMERIC_COMPACTION;\n        textSubMode=SUBMODE_ALPHA;\n        encodeNumeric(msg,p,n,sb);\n        p+=n;\n      }\n else {\n        int t=determineConsecutiveTextCount(msg,p);\n        if (t >= 5 || n == len) {\n          if (encodingMode != TEXT_COMPACTION) {\n            sb.append((char)LATCH_TO_TEXT);\n            encodingMode=TEXT_COMPACTION;\n            textSubMode=SUBMODE_ALPHA;\n          }\n          textSubMode=encodeText(msg,p,t,sb,textSubMode);\n          p+=t;\n        }\n else {\n          if (bytes == null) {\n            bytes=msg.getBytes(encoding);\n          }\n          int b=determineConsecutiveBinaryCount(msg,bytes,p);\n          if (b == 0) {\n            b=1;\n          }\n          if (b == 1 && encodingMode == TEXT_COMPACTION) {\n            encodeBinary(bytes,p,1,TEXT_COMPACTION,sb);\n          }\n else {\n            encodeBinary(bytes,p,b,encodingMode,sb);\n            encodingMode=BYTE_COMPACTION;\n            textSubMode=SUBMODE_ALPHA;\n          }\n          p+=b;\n        }\n      }\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "31202", "raw_code": "private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){\n  int i;\n  if (av == null) {\nswitch (b[v] & 0xFF) {\ncase 'e':\n      return v + 5;\ncase '@':\n    return readAnnotationValues(v + 3,buf,true,null);\ncase '[':\n  return readAnnotationValues(v + 1,buf,false,null);\ndefault :\nreturn v + 3;\n}\n}\nswitch (b[v++] & 0xFF) {\ncase 'I':\ncase 'J':\ncase 'F':\ncase 'D':\nav.visit(name,readConst(readUnsignedShort(v),buf));\nv+=2;\nbreak;\ncase 'B':\nav.visit(name,new Byte((byte)readInt(items[readUnsignedShort(v)])));\nv+=2;\nbreak;\ncase 'Z':\nav.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);\nv+=2;\nbreak;\ncase 'S':\nav.visit(name,new Short((short)readInt(items[readUnsignedShort(v)])));\nv+=2;\nbreak;\ncase 'C':\nav.visit(name,new Character((char)readInt(items[readUnsignedShort(v)])));\nv+=2;\nbreak;\ncase 's':\nav.visit(name,readUTF8(v,buf));\nv+=2;\nbreak;\ncase 'e':\nav.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));\nv+=4;\nbreak;\ncase 'c':\nav.visit(name,Type.getType(readUTF8(v,buf)));\nv+=2;\nbreak;\ncase '@':\nv=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));\nbreak;\ncase '[':\nint size=readUnsignedShort(v);\nv+=2;\nif (size == 0) {\nreturn readAnnotationValues(v - 2,buf,false,av.visitArray(name));\n}\nswitch (this.b[v++] & 0xFF) {\ncase 'B':\nbyte[] bv=new byte[size];\nfor (i=0; i < size; i++) {\nbv[i]=(byte)readInt(items[readUnsignedShort(v)]);\nv+=3;\n}\nav.visit(name,bv);\n--v;\nbreak;\ncase 'Z':\nboolean[] zv=new boolean[size];\nfor (i=0; i < size; i++) {\nzv[i]=readInt(items[readUnsignedShort(v)]) != 0;\nv+=3;\n}\nav.visit(name,zv);\n--v;\nbreak;\ncase 'S':\nshort[] sv=new short[size];\nfor (i=0; i < size; i++) {\nsv[i]=(short)readInt(items[readUnsignedShort(v)]);\nv+=3;\n}\nav.visit(name,sv);\n--v;\nbreak;\ncase 'C':\nchar[] cv=new char[size];\nfor (i=0; i < size; i++) {\ncv[i]=(char)readInt(items[readUnsignedShort(v)]);\nv+=3;\n}\nav.visit(name,cv);\n--v;\nbreak;\ncase 'I':\nint[] iv=new int[size];\nfor (i=0; i < size; i++) {\niv[i]=readInt(items[readUnsignedShort(v)]);\nv+=3;\n}\nav.visit(name,iv);\n--v;\nbreak;\ncase 'J':\nlong[] lv=new long[size];\nfor (i=0; i < size; i++) {\nlv[i]=readLong(items[readUnsignedShort(v)]);\nv+=3;\n}\nav.visit(name,lv);\n--v;\nbreak;\ncase 'F':\nfloat[] fv=new float[size];\nfor (i=0; i < size; i++) {\nfv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));\nv+=3;\n}\nav.visit(name,fv);\n--v;\nbreak;\ncase 'D':\ndouble[] dv=new double[size];\nfor (i=0; i < size; i++) {\ndv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));\nv+=3;\n}\nav.visit(name,dv);\n--v;\nbreak;\ndefault :\nv=readAnnotationValues(v - 3,buf,false,av.visitArray(name));\n}\n}\nreturn v;\n}"}
{"ids": "57570", "raw_code": "private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){\n  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);\n}"}
{"ids": "52701", "raw_code": "public NetworkConnectivityListener(){\n  mState=State.UNKNOWN;\n}"}
{"ids": "18065", "raw_code": "Vector processSIMPLEPATTERNLIST(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {\n  try {\n    StringTokenizer tokenizer=new StringTokenizer(value,\" \\t\\n\\r\\f\");\n    int nPatterns=tokenizer.countTokens();\n    Vector patterns=new Vector(nPatterns);\n    for (int i=0; i < nPatterns; i++) {\n      XPath pattern=handler.createMatchPatternXPath(tokenizer.nextToken(),owner);\n      patterns.addElement(pattern);\n    }\n    return patterns;\n  }\n catch (  TransformerException te) {\n    throw new org.xml.sax.SAXException(te);\n  }\n}"}
{"ids": "23056", "raw_code": "protected ASN1Sequence(ASN1Encodable[] array){\n  for (int i=0; i != array.length; i++) {\n    seq.addElement(array[i]);\n  }\n}"}
{"ids": "33137", "raw_code": "public void addCopy(IResource copy,CopyArguments arguments){\n  if (fCopy == null) {\n    fCopy=new ArrayList(2);\n    fCopyArguments=new ArrayList(2);\n  }\n  fCopy.add(copy);\n  fCopyArguments.add(arguments);\n  addCopyDelta(copy,arguments);\n}"}
{"ids": "76557", "raw_code": "@Override public void write(byte[] buffer,int offset,int length) throws IOException {\n  while ((mByteToSkip > 0 || mByteToCopy > 0 || mState != STATE_JPEG_DATA) && length > 0) {\n    if (mByteToSkip > 0) {\n      int byteToProcess=length > mByteToSkip ? mByteToSkip : length;\n      length-=byteToProcess;\n      mByteToSkip-=byteToProcess;\n      offset+=byteToProcess;\n    }\n    if (mByteToCopy > 0) {\n      int byteToProcess=length > mByteToCopy ? mByteToCopy : length;\n      out.write(buffer,offset,byteToProcess);\n      length-=byteToProcess;\n      mByteToCopy-=byteToProcess;\n      offset+=byteToProcess;\n    }\n    if (length == 0) {\n      return;\n    }\nswitch (mState) {\ncase STATE_SOI:\n      int byteRead=requestByteToBuffer(2,buffer,offset,length);\n    offset+=byteRead;\n  length-=byteRead;\nif (mBuffer.position() < 2) {\n  return;\n}\nmBuffer.rewind();\nif (mBuffer.getShort() != JpegHeader.SOI) {\nthrow new IOException(\"Not a valid jpeg image, cannot write exif\");\n}\nout.write(mBuffer.array(),0,2);\nmState=STATE_FRAME_HEADER;\nmBuffer.rewind();\nwriteExifData();\nbreak;\ncase STATE_FRAME_HEADER:\nbyteRead=requestByteToBuffer(4,buffer,offset,length);\noffset+=byteRead;\nlength-=byteRead;\nif (mBuffer.position() == 2) {\nshort tag=mBuffer.getShort();\nif (tag == JpegHeader.EOI) {\nout.write(mBuffer.array(),0,2);\nmBuffer.rewind();\n}\n}\nif (mBuffer.position() < 4) {\nreturn;\n}\nmBuffer.rewind();\nshort marker=mBuffer.getShort();\nif (marker == JpegHeader.APP1) {\nmByteToSkip=(mBuffer.getShort() & 0x0000ffff) - 2;\nmState=STATE_JPEG_DATA;\n}\n else if (!JpegHeader.isSofMarker(marker)) {\nout.write(mBuffer.array(),0,4);\nmByteToCopy=(mBuffer.getShort() & 0x0000ffff) - 2;\n}\n else {\nout.write(mBuffer.array(),0,4);\nmState=STATE_JPEG_DATA;\n}\nmBuffer.rewind();\n}\n}\nif (length > 0) {\nout.write(buffer,offset,length);\n}\n}"}
{"ids": "37645", "raw_code": "protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing){\n  print(\"scheme doesn't alter original datasets\");\n  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);\n  print(\"...\");\n  int numTrain=getNumInstances(), numClasses=2, missingLevel=20;\n  boolean[] result=new boolean[2];\n  Instances train=null;\n  Instances trainCopy=null;\n  ASSearch search=null;\n  ASEvaluation evaluation=null;\n  try {\n    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);\n    if (missingLevel > 0) {\n      addMissing(train,missingLevel,predictorMissing,classMissing);\n    }\n    search=ASSearch.makeCopies(getSearch(),1)[0];\n    evaluation=ASEvaluation.makeCopies(getEvaluator(),1)[0];\n    trainCopy=new Instances(train);\n  }\n catch (  Exception ex) {\n    throw new Error(\"Error setting up for tests: \" + ex.getMessage());\n  }\n  try {\n    search(search,evaluation,trainCopy);\n    compareDatasets(train,trainCopy);\n    println(\"yes\");\n    result[0]=true;\n  }\n catch (  Exception ex) {\n    println(\"no\");\n    result[0]=false;\n    if (m_Debug) {\n      println(\"\\n=== Full Report ===\");\n      print(\"Problem during training\");\n      println(\": \" + ex.getMessage() + \"\\n\");\n      println(\"Here are the datasets:\\n\");\n      println(\"=== Train Dataset (original) ===\\n\" + trainCopy.toString() + \"\\n\");\n      println(\"=== Train Dataset ===\\n\" + train.toString() + \"\\n\");\n    }\n  }\n  return result;\n}"}
{"ids": "4929", "raw_code": "public void insert_trace(Polyline p_polyline,int p_layer,int p_half_width,NetNosList p_net_no_arr,int p_clearance_class,ItemFixState p_fixed_state){\n  BrdTracep new_trace=insert_trace_without_cleaning(p_polyline,p_layer,p_half_width,p_net_no_arr,p_clearance_class,p_fixed_state);\n  if (new_trace == null)   return;\n  new_trace.normalize(changed_area.get_area(p_layer));\n}"}
{"ids": "48991", "raw_code": "void sendTransmit(MultiplexConnectionInfo info,byte buf[],int off,int len) throws IOException {\nsynchronized (dataOut) {\n    if (alive && !info.closed)     try {\n      dataOut.writeByte(TRANSMIT);\n      dataOut.writeShort(info.id);\n      dataOut.writeInt(len);\n      dataOut.write(buf,off,len);\n      dataOut.flush();\n    }\n catch (    IOException e) {\n      multiplexLog.log(Log.BRIEF,\"exception: \",e);\n      shutDown();\n      throw e;\n    }\n  }\n}"}
{"ids": "51757", "raw_code": "public <T extends SQLException>T toFlatSQLException(Class<T> type) throws ClassCastException {\n  return type.cast(toFlatSQLException());\n}"}
{"ids": "43926", "raw_code": "public void addTotalResultCountCookie(WorkbenchRequest req,HttpServletResponse resp,int value){\n  addCookie(req,resp,\"total_result_count\",String.valueOf(value));\n}"}
{"ids": "7464", "raw_code": "private Rectangle integerise(Rectangle2D rect){\n  int x0=(int)Math.ceil(rect.getMinX());\n  int y0=(int)Math.ceil(rect.getMinY());\n  int x1=(int)Math.floor(rect.getMaxX());\n  int y1=(int)Math.floor(rect.getMaxY());\n  return new Rectangle(x0,y0,(x1 - x0),(y1 - y0));\n}"}
{"ids": "73967", "raw_code": "@Override public void mouseMoved(MouseEvent evt){\n  delegate.mouseMoved(evt);\n}"}
{"ids": "31811", "raw_code": "protected void validateConfig(){\n  A.notNull(getStreamer(),\"Streamer\");\n  A.notNull(getIgnite(),\"Ignite\");\n  A.notNull(endpointUrl,\"Twitter Streaming API endpoint\");\n  A.ensure(getSingleTupleExtractor() != null || getMultipleTupleExtractor() != null,\"Twitter extractor\");\n  String followParam=apiParams.get(SITE_USER_ID_KEY);\n  A.ensure(followParam != null && followParam.matches(\"^(\\\\d+,? ?)+$\"),\"Site streaming endpoint must provide 'follow' param with value as comma separated numbers\");\n}"}
{"ids": "69241", "raw_code": "public long[] selectZero(long rank,long[] dest,final int offset,final int length){\n  if (length == 0)   return dest;\n  long s=selectZero(rank);\n  dest[offset]=s;\n  int curr=(int)(s / Long.SIZE);\n  long window=~bits[curr] & -1L << s;\n  window&=window - 1;\n  for (int i=1; i < length; i++) {\n    while (window == 0)     window=~bits[++curr];\n    dest[offset + i]=curr * Long.SIZE + Long.numberOfTrailingZeros(window);\n    window&=window - 1;\n  }\n  return dest;\n}"}
{"ids": "41764", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return STRING_FIELD;\ncase 2:\n  return SET_FIELD;\ncase 3:\nreturn LIST_FIELD;\ncase 4:\nreturn BINARY_FIELD;\ndefault :\nreturn null;\n}\n}"}
{"ids": "47874", "raw_code": "public int size(){\nsynchronized (children) {\n    return children.size();\n  }\n}"}
{"ids": "75443", "raw_code": "private String flattenComment(String string){\n  StringBuffer buffer=new StringBuffer(string.length() + 20);\n  boolean skipAdjacentLineSeparator=true;\n  for (int i=0; i < string.length(); i++) {\n    char c=string.charAt(i);\n    if (c == '\\r' || c == '\\n') {\n      if (!skipAdjacentLineSeparator)       buffer.append(Policy.bind(\"separator\"));\n      skipAdjacentLineSeparator=true;\n    }\n else {\n      buffer.append(c);\n      skipAdjacentLineSeparator=false;\n    }\n  }\n  return buffer.toString();\n}"}
{"ids": "41041", "raw_code": "private boolean isAccelerating(SensorEvent event){\n  float ax=event.values[0];\n  float ay=event.values[1];\n  float az=event.values[2];\n  final double magnitude=Math.sqrt(ax * ax + ay * ay + az * az);\n  return magnitude > ACCELERATION_THRESHOLD;\n}"}
{"ids": "79047", "raw_code": "@Override public byte[] readByteArray(String filePath,int length){\n  FileChannel fileChannel=updateCache(filePath);\n  ByteBuffer byteBffer=read(fileChannel,length);\n  return byteBffer.array();\n}"}
{"ids": "75168", "raw_code": "public void popDragEntry(int index){\n  if (isIndexInBound(index)) {\n    mDraggedEntry=mDragEntries.get(index);\n    mDraggedEntryIndex=index;\n    mDragEnteredEntryIndex=index;\n    markDropArea(index);\n  }\n}"}
{"ids": "40899", "raw_code": "public void addEmail(EmailEntity email){\n  emails.add(email);\n}"}
{"ids": "80649", "raw_code": "private static int manhattanDistance(final int x1,final int y1,final int x2,final int y2){\n  return Math.abs(x1 - x2) + Math.abs(y1 - y2);\n}"}
{"ids": "13095", "raw_code": "public void putGrammar(SchemaGrammar grammar){\n  if (grammar.getTargetNamespace() == null)   fNoNSGrammar=grammar;\n else   fGrammarRegistry.put(grammar.getTargetNamespace(),grammar);\n}"}
{"ids": "83416", "raw_code": "public JSONArray optJSONArray(String key){\n  Object o=opt(key);\n  return o instanceof JSONArray ? (JSONArray)o : null;\n}"}
{"ids": "80353", "raw_code": "private void status(){\n  ps.println(\"# Status of this version:\");\n  ps.println(\"#     OUTDATED: sorry, you have to redownload\");\n  ps.println(\"#     UPDATE_NEEDED:   there is an update available\");\n  ps.println(\"#     CURRENT:  good, we don't have to do anything at the moment\");\n  writeKeysWithPrefix(\"version.\",\"version.destination\");\n}"}
{"ids": "58026", "raw_code": "void pushImportSource(Source sourceFromURIResolver){\n  m_importSourceStack.push(sourceFromURIResolver);\n}"}
{"ids": "16755", "raw_code": "public static byte[] buildNalUnit(byte[] data,int offset,int length){\n  byte[] nalUnit=new byte[length + NAL_START_CODE.length];\n  System.arraycopy(NAL_START_CODE,0,nalUnit,0,NAL_START_CODE.length);\n  System.arraycopy(data,offset,nalUnit,NAL_START_CODE.length,length);\n  return nalUnit;\n}"}
{"ids": "9308", "raw_code": "protected void doLogOobMessageOutbound(Message message){\n  if (rpcLogger != null) {\n    rpcLogger.logOobMessage(clientInfo,serverInfo,message,System.currentTimeMillis());\n  }\n}"}
{"ids": "39704", "raw_code": "@Override public void stop(){\n  CountDownLatch latch=stopped;\n  Thread oldThread=thread.getAndUpdate(null);\n  if (oldThread != null && latch != null) {\n    try {\n      latch.await(10,TimeUnit.SECONDS);\n    }\n catch (    InterruptedException e) {\n      Thread.interrupted();\n    }\n  }\n}"}
{"ids": "7602", "raw_code": "@Override public byte[] encode(BufferedImage bufferedImage) throws IOException {\n  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();\n  encode(bufferedImage,outputStream);\n  return outputStream.toByteArray();\n}"}
{"ids": "51893", "raw_code": "private JsonParserException createHelpfulException(char first,char[] expected,int failurePosition) throws JsonParserException {\n  StringBuilder errorToken=new StringBuilder(first + (expected == null ? \"\" : new String(expected,0,failurePosition)));\n  while (isAsciiLetter(peekChar()) && errorToken.length() < 15)   errorToken.append((char)advanceChar());\n  return createParseException(null,\"Unexpected token '\" + errorToken + \"'\"+ (expected == null ? \"\" : \". Did you mean '\" + first + new String(expected)+ \"'?\"),true);\n}"}
{"ids": "78582", "raw_code": "public static void i(String tag,String s,Object... args){\n  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,String.format(s,args));\n}"}
{"ids": "36619", "raw_code": "public void removeLifecycleListener(LifecycleListener lifecycleListener){\n  lifecycleListeners.remove(lifecycleListener);\n}"}
{"ids": "35739", "raw_code": "private synchronized void initRegistry(boolean force) throws MatlabConnectionException {\n  if (_registry == null || force) {\n    try {\n      _registry=LocalHostRMIHelper.createRegistry(_options.getPort());\n    }\n catch (    Exception e) {\n      try {\n        _registry=LocalHostRMIHelper.getRegistry(_options.getPort());\n      }\n catch (      Exception ex) {\n        throw new MatlabConnectionException(\"Could not create or connect to the RMI registry\",ex);\n      }\n    }\n  }\n}"}
{"ids": "70239", "raw_code": "public boolean phaseHasTurns(IGame.Phase thisPhase){\nswitch (thisPhase) {\ncase PHASE_SET_ARTYAUTOHITHEXES:\ncase PHASE_DEPLOY_MINEFIELDS:\ncase PHASE_DEPLOYMENT:\ncase PHASE_MOVEMENT:\ncase PHASE_FIRING:\ncase PHASE_PHYSICAL:\ncase PHASE_TARGETING:\ncase PHASE_OFFBOARD:\n    return true;\ndefault :\n  return false;\n}\n}"}
{"ids": "3730", "raw_code": "public int read() throws IOException {\n  int ch1=is.read();\n  int ch2=is.read();\n  if (ch2 < 0)   return -1;\n  return (ch2 << 8) + ch1;\n}"}
{"ids": "72590", "raw_code": "public static boolean isUrl(String resourceLocation){\n  if (resourceLocation == null) {\n    return false;\n  }\n  if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {\n    return true;\n  }\n  try {\n    new URL(resourceLocation);\n    return true;\n  }\n catch (  MalformedURLException ex) {\n    return false;\n  }\n}"}
{"ids": "3810", "raw_code": "public static String encodeURL(String uri){\n  CharBuffer cb=CharBuffer.allocate();\n  for (int i=0; i < uri.length(); i++) {\n    char ch=uri.charAt(i);\nswitch (ch) {\ncase '<':\ncase '>':\ncase ' ':\ncase '%':\ncase '\\'':\ncase '\\\"':\n      cb.append('%');\n    cb.append(encodeHex(ch >> 4));\n  cb.append(encodeHex(ch));\nbreak;\ndefault :\ncb.append(ch);\n}\n}\nreturn cb.close();\n}"}
{"ids": "48759", "raw_code": "public void close() throws IOException {\n  if (closed) {\n    return;\n  }\n  if (queuedForCleanup) {\n    return;\n  }\n  try {\n    if (expected > count) {\n      long nskip=expected - count;\n      if (nskip <= available()) {\n        do {\n        }\n while ((nskip=(expected - count)) > 0L && skip(Math.min(nskip,available())) > 0L);\n      }\n else       if (expected <= KeepAliveStreamCleaner.MAX_DATA_REMAINING && !hurried) {\n        queueForCleanup(new KeepAliveCleanerEntry(this,hc));\n      }\n else {\n        hc.closeServer();\n      }\n    }\n    if (!closed && !hurried && !queuedForCleanup) {\n      hc.finished();\n    }\n  }\n  finally {\n    if (pi != null)     pi.finishTracking();\n    if (!queuedForCleanup) {\n      in=null;\n      hc=null;\n      closed=true;\n    }\n  }\n}"}
{"ids": "4107", "raw_code": "public boolean isPublic(){\n  return Modifier.isPublic(_method.getModifiers());\n}"}
{"ids": "66795", "raw_code": "private Object[] initializeCallerHierarchyRoots(Map<String,Map<String,Set<JsonElement>>> callerMap){\n  List<TreeElement<SourceMethodNode,SourceMethodNode>> roots=new ArrayList<TreeElement<SourceMethodNode,SourceMethodNode>>();\n  CallerHierarchy callerHierarchy=(CallerHierarchy)fInput;\n  SourceMethodNode rootNode=callerHierarchy.getRoot();\n  Set<SourceMethodNode> processedNodes=new HashSet<SourceMethodNode>();\n  TreeElement<SourceMethodNode,SourceMethodNode> root=initializeCallerHierarchy(rootNode,processedNodes,callerMap);\n  return new Object[]{root};\n}"}
{"ids": "60102", "raw_code": "private List<Entry> reduceWithDouglasPeuker(List<Entry> entries,double epsilon){\n  if (epsilon <= 0 || entries.size() < 3) {\n    return entries;\n  }\n  keep[0]=true;\n  keep[entries.size() - 1]=true;\n  algorithmDouglasPeucker(entries,epsilon,0,entries.size() - 1);\n  List<Entry> reducedEntries=new ArrayList<Entry>();\n  for (int i=0; i < entries.size(); i++) {\n    if (keep[i]) {\n      Entry curEntry=entries.get(i);\n      reducedEntries.add(new Entry(curEntry.getVal(),curEntry.getXIndex()));\n    }\n  }\n  return reducedEntries;\n}"}
{"ids": "12830", "raw_code": "public static double[] computeLogAmplitudeSpectrum(final double[] signal){\n  double[] spectrum=computeAmplitudeSpectrum(signal);\n  for (int i=0; i < spectrum.length; i++) {\n    spectrum[i]=Math.log(spectrum[i]);\n  }\n  return spectrum;\n}"}
{"ids": "65321", "raw_code": "private Segment createMemorySegment(SegmentDescriptor descriptor){\n  File segmentFile=SegmentFile.createSegmentFile(name,storage.directory(),descriptor.id(),descriptor.version());\n  Buffer buffer=HeapBuffer.allocate(Math.min(DEFAULT_BUFFER_SIZE,descriptor.maxSegmentSize()),Integer.MAX_VALUE);\n  descriptor.copyTo(buffer);\n  Segment segment=new Segment(new SegmentFile(segmentFile),buffer.slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this);\n  LOGGER.debug(\"Created segment: {}\",segment);\n  return segment;\n}"}
{"ids": "39852", "raw_code": "public static void init(final AsyncContext context){\n  final SecurityContext security=(SecurityContext)context.getAttribute(AsyncContext.SECURITY_CTX);\n  final boolean forceSetSecurity=forceSetSecurityContext(context);\n  if (forceSetSecurity) {\n    SecurityContextHolder.setContext(security);\n  }\n  ctx.set(context);\n}"}
{"ids": "34747", "raw_code": "private void cancelPreviousWebRtcNotifications(){\n  Set<String> notificationIds=mSharedPreferences.getStringSet(WEBRTC_NOTIFICATION_IDS,null);\n  if (notificationIds == null)   return;\n  Iterator<String> iterator=notificationIds.iterator();\n  while (iterator.hasNext()) {\n    mNotificationManager.cancel(NOTIFICATION_NAMESPACE,Integer.parseInt(iterator.next()));\n  }\n  SharedPreferences.Editor sharedPreferenceEditor=mSharedPreferences.edit();\n  sharedPreferenceEditor.remove(MediaCaptureNotificationService.WEBRTC_NOTIFICATION_IDS);\n  sharedPreferenceEditor.apply();\n}"}
{"ids": "26476", "raw_code": "public static final String readString(byte[] bytes,int offset,int length,String charset) throws IOException {\n  return readString(bytes,0,bytes.length,Charset.forName(charset));\n}"}
{"ids": "32284", "raw_code": "private TopologyUpdaterThread(){\n  super(id + \"-topology-update\");\n}"}
{"ids": "13395", "raw_code": "private void typeParametersRest(List<? extends TypeParameterTree> typeParameters,Indent plusIndent){\n  builder.open(plusIndent);\n  builder.breakOp();\n  builder.open(ZERO);\n  boolean first=true;\n  for (  TypeParameterTree typeParameter : typeParameters) {\n    if (!first) {\n      token(\",\");\n      builder.breakOp(\" \");\n    }\n    scan(typeParameter,null);\n    first=false;\n  }\n  token(\">\");\n  builder.close();\n  builder.close();\n}"}
{"ids": "20850", "raw_code": "public void writeString(String str) throws IOException {\n  if (str == null)   writeInt(0);\n else {\n    if (useCompression && str.length() >= Compressor.MIN_SIZE_FOR_DEFLATION) {\n      byte[] bytes=compressor.deflateString2ByteArray(str);\n      writeInt(-bytes.length);\n      outs.write(bytes,0,bytes.length);\n      position+=bytes.length;\n    }\n else {\n      byte[] bytes=str.getBytes(\"UTF-8\");\n      writeInt(bytes.length);\n      outs.write(bytes,0,bytes.length);\n      position+=bytes.length;\n    }\n  }\n}"}
{"ids": "71729", "raw_code": "public void dequeueSound(Uri uri){\n  mAudioQueue.remove(new AudioQueueItem(uri,null));\n}"}
{"ids": "36987", "raw_code": "public void removeBookmark(final CBookmark bookmark){\n  Preconditions.checkNotNull(bookmark,\"IE00385: Bookmark can not be null\");\n  Preconditions.checkArgument(m_bookmarks.remove(bookmark),\"IE00386: Bookmark is not managed by this manager\");\n  for (  final IBookmarkManagerListener listener : m_listeners) {\n    try {\n      listener.removedBookmark(this,bookmark);\n    }\n catch (    final Exception exception) {\n      CUtilityFunctions.logException(exception);\n    }\n  }\n}"}
{"ids": "29663", "raw_code": "public static KeyStore loadKeyStore(String type,File file,char[] password) throws Exception {\n  KeyStore keyStore=KeyStore.getInstance(type);\n  try (FileInputStream fis=new FileInputStream(file)){\n    keyStore.load(fis,password);\n  }\n   return keyStore;\n}"}
{"ids": "44779", "raw_code": "public void loop(double ellapsedMillis){\n  for (  SpringSystemListener listener : mListeners) {\n    listener.onBeforeIntegrate(this);\n  }\n  advance(ellapsedMillis);\n  if (mActiveSprings.isEmpty()) {\n    mIdle=true;\n  }\n  for (  SpringSystemListener listener : mListeners) {\n    listener.onAfterIntegrate(this);\n  }\n  if (mIdle) {\n    mSpringLooper.stop();\n  }\n}"}
{"ids": "69331", "raw_code": "private void updateRecordingTrack(Track track,long lastTrackPointId,boolean increaseNumberOfPoints){\n  if (lastTrackPointId >= 0) {\n    if (track.getStartId() < 0) {\n      track.setStartId(lastTrackPointId);\n    }\n    track.setStopId(lastTrackPointId);\n  }\n  if (increaseNumberOfPoints) {\n    track.setNumberOfPoints(track.getNumberOfPoints() + 1);\n  }\n  trackTripStatisticsUpdater.updateTime(System.currentTimeMillis());\n  track.setTripStatistics(trackTripStatisticsUpdater.getTripStatistics());\n  myTracksProviderUtils.updateTrack(track);\n}"}
{"ids": "3791", "raw_code": "@Override public void requestStartupUpdates(String from,byte[] tableKey,int podIndex,long deltaTime,Result<Boolean> cont){\n  if (log.isLoggable(Level.FINEST)) {\n    log.finest(\"CacheRequestUpdates \" + from + \" shard=\"+ podIndex+ \" delta=\"+ deltaTime);\n  }\n  long accessTime=CurrentTime.currentTime() + deltaTime;\n  TablePod tablePod=_clientKraken.getTable(tableKey);\n  if (tablePod == null) {\n    if (log.isLoggable(Level.FINEST)) {\n      log.finest(L.l(\"{0} is an unknown table key ({1})\",Hex.toShortHex(tableKey),BartenderSystem.getCurrentSelfServer()));\n    }\n    cont.ok(true);\n    return;\n  }\n  tablePod.getUpdatesFromLocal(podIndex,accessTime,cont);\n}"}
{"ids": "7022", "raw_code": "private void refreshMuteVideoButton(){\n  if ((null != mCall) && mCall.isVideo()) {\n    mMuteLocalCameraView.setVisibility(View.VISIBLE);\n    boolean isMuted=mCall.isVideoRecordingMuted();\n    Log.d(LOG_TAG,\"## refreshMuteVideoButton(): isMuted=\" + isMuted);\n    int iconId=isMuted ? R.drawable.ic_material_videocam_off_pink_red : R.drawable.ic_material_videocam_off_grey;\n    mMuteLocalCameraView.setImageResource(iconId);\n  }\n else {\n    Log.d(LOG_TAG,\"## refreshMuteVideoButton(): View.INVISIBLE\");\n    mMuteLocalCameraView.setVisibility(View.INVISIBLE);\n  }\n}"}
{"ids": "24920", "raw_code": "private void createPreferenceControls(Composite parent,Set<PreferenceId> preferenceSet,InputDefinition inputDefinition){\n  for (  PreferenceId preferenceIdEnum : preferenceSet) {\n    IPreferenceControl preferenceControl=PreferenceControlFactory.createPreferenceControls(parent,toolkit,preferenceIdEnum,this,inputDefinition);\n    if (null != preferenceControl) {\n      preferenceControlList.add(preferenceControl);\n    }\n  }\n}"}
{"ids": "8614", "raw_code": "@RequestMapping(value=\"/page\",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<PageResponse<ProjectDTO>> findAll(@RequestBody PageRequestByExample<ProjectDTO> prbe) throws URISyntaxException {\n  PageResponse<ProjectDTO> pageResponse=projectDTOService.findAll(prbe);\n  return new ResponseEntity<>(pageResponse,new HttpHeaders(),HttpStatus.OK);\n}"}
{"ids": "27997", "raw_code": "static private double fac2(int j){\n  long i=j;\n  if (j < 0)   i=Math.abs(j);\n  double d=1.0;\n  while (i > 1)   d*=i--;\n  if (j < 0)   return -d;\n else   return d;\n}"}
{"ids": "3182", "raw_code": "private static boolean isInputExhausted(StreamTokenizer input) throws ParseError {\n  try {\n    if (input.nextToken() == StreamTokenizer.TT_EOF) {\n      return true;\n    }\n    input.pushBack();\n    return false;\n  }\n catch (  IOException e) {\n    throw new ParseError(e.getMessage());\n  }\n}"}
{"ids": "51262", "raw_code": "public void clear(){\n  m.clear();\n}"}
{"ids": "51155", "raw_code": "public static void writeUnsafe(PacketOutputStream out,InputStream is,long length,boolean noBackslashEscapes) throws IOException {\n  out.writeUnsafe(QUOTE);\n  byte[] buffer=new byte[1024];\n  long bytesLeft=length;\n  int len;\n  for (; ; ) {\n    int bytesToRead=(int)Math.min(bytesLeft,buffer.length);\n    if (bytesToRead == 0) {\n      break;\n    }\n    len=is.read(buffer,0,bytesToRead);\n    if (len <= 0) {\n      break;\n    }\n    writeBytesEscapedUnsafe(out,buffer,len,noBackslashEscapes);\n    bytesLeft-=len;\n  }\n  out.writeUnsafe(QUOTE);\n}"}
{"ids": "30567", "raw_code": "public SQLQuery(Class<T> type,String sqlExpression,QueryResultType queryResultType){\n  this(sqlExpression,type.getName(),null,queryResultType,null);\n}"}
{"ids": "52451", "raw_code": "public Builder retry(long duration,TimeUnit timeUnit){\n  this.retry=timeUnit.toSeconds(duration);\n  return this;\n}"}
{"ids": "33918", "raw_code": "private <T>List<T> toSortedList(T[] array,Comparator<T> comparator){\n  List<T> list=new ArrayList<>();\n  Collections.addAll(list,array);\n  Collections.sort(list,comparator);\n  return list;\n}"}
{"ids": "6827", "raw_code": "private GeoMark reverse_geocode(final String text){\n  for (  String t : text.split(\" \")) {\n    if (t.length() < 9)     continue;\n    String[] c=t.split(\",\");\n    if (c.length != 2)     continue;\n    try {\n      double lat=Double.parseDouble(c[0]);\n      double lon=Double.parseDouble(c[1]);\n      GeoMark mark=cityNear(lat,lon);\n      if (mark == null)       continue;\n      return mark;\n    }\n catch (    NumberFormatException e) {\n      continue;\n    }\n  }\n  return null;\n}"}
{"ids": "5057", "raw_code": "public ArrayList<PlaToupleInt> entrance_points(Polyline p_polyline){\n  ArrayList<PlaToupleInt> result=new ArrayList<PlaToupleInt>(2 * p_polyline.plaline_len());\n  int prev_intersection_line_no=-1;\n  int prev_intersection_edge_no=-1;\n  for (int line_no=1; line_no < p_polyline.plaline_len(-1); ++line_no) {\n    PlaSegmentInt curr_line_seg=p_polyline.segment_get(line_no);\n    int[] curr_intersections=curr_line_seg.border_intersections(this);\n    for (int index=0; index < curr_intersections.length; ++index) {\n      int edge_no=curr_intersections[index];\n      if (line_no != prev_intersection_line_no || edge_no != prev_intersection_edge_no) {\n        result.add(new PlaToupleInt(line_no,edge_no));\n        prev_intersection_line_no=line_no;\n        prev_intersection_edge_no=edge_no;\n      }\n    }\n  }\n  return result;\n}"}
{"ids": "33346", "raw_code": "private void emitClear(String fieldName,StringBuilder builder){\n  builder.append(\"    public void \");\n  builder.append(getClearName(fieldName));\n  builder.append(\"() {\\n      \");\n  builder.append(getEnsureName(fieldName));\n  builder.append(\"();\\n      \");\n  builder.append(fieldName);\n  builder.append(\".clear();\\n\");\n  builder.append(\"    }\\n\\n\");\n}"}
{"ids": "22151", "raw_code": "public static byte[] serializeAsByteArray(Object b) throws IOException {\n  ByteArrayOutputStream bos=new ByteArrayOutputStream();\n  ObjectOutputStream out=new ObjectOutputStream(bos);\n  try {\n    out.writeObject(b);\n  }\n  finally {\n    out.close();\n  }\n  return bos.toByteArray();\n}"}
{"ids": "32040", "raw_code": "public static void putIntLE(long addr,int val){\n  if (UNALIGNED)   UNSAFE.putInt(addr,Integer.reverseBytes(val));\n else   putIntByByte(addr,val,false);\n}"}
{"ids": "82235", "raw_code": "public FloatingActionButton createSubFAB(char icon,String text){\n  FloatingActionButton sub=new FloatingActionButton(icon,text,2.8f);\n  if (subMenu == null) {\n    subMenu=new ArrayList<FloatingActionButton>();\n  }\n  subMenu.add(sub);\n  return sub;\n}"}
{"ids": "31308", "raw_code": "public String readValue(InputNode from) throws Exception {\n  if (!stack.isRelevant(from)) {\n    return null;\n  }\n  int length=text.length();\n  if (length <= 0) {\n    EventNode event=reader.peek();\n    if (event.isEnd()) {\n      if (stack.top() == from) {\n        return null;\n      }\n else {\n        stack.pop();\n      }\n      event=reader.next();\n    }\n  }\n  return readText(from);\n}"}
{"ids": "7003", "raw_code": "private void dispatchOnThirdPartyRegistered(){\nsynchronized (this) {\n    for (    ThirdPartyRegistrationListener listener : mThirdPartyRegistrationListeners) {\n      try {\n        listener.onThirdPartyRegistered();\n      }\n catch (      Exception e) {\n        Log.e(LOG_TAG,\"onSessionsRegistered \" + e.getLocalizedMessage());\n      }\n    }\n    mThirdPartyRegistrationListeners.clear();\n  }\n}"}
{"ids": "74068", "raw_code": "void updateForDecoderTypeID(List<DecoderFile> pList){\n  decoderBox.setModel(DecoderIndexFile.jComboBoxModelFromList(pList));\n  decoderBox.insertItemAt(\"<from locomotive settings>\",0);\n  decoderBox.setSelectedIndex(1);\n}"}
{"ids": "64828", "raw_code": "@Override public void actionPerformed(ActionEvent event){\nswitch (event.getActionCommand()) {\ncase NEW_ALIAS:\n    addAlias(new Alias(\"New Alias\"));\n  break;\ncase COPY_ALIAS:\nfor (Alias alias : getSelectedAliases()) {\n  addAlias(AliasFactory.copyOf(alias));\n}\nbreak;\ncase DELETE_ALIAS:\nList<Alias> toDelete=getSelectedAliases();\nif (toDelete != null && !toDelete.isEmpty()) {\nString title=toDelete.size() == 1 ? \"Delete Alias?\" : \"Delete Aliases?\";\nString prompt=toDelete.size() == 1 ? \"Do you want to delete this alias?\" : \"Do you want to delete these \" + toDelete.size() + \" aliases?\";\nint choice=JOptionPane.showConfirmDialog(AliasController.this,prompt,title,JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);\nif (choice == JOptionPane.YES_OPTION) {\nfor (Alias alias : toDelete) {\nmAliasModel.removeAlias(alias);\n}\n}\n}\nbreak;\ndefault :\nbreak;\n}\n}"}
{"ids": "80333", "raw_code": "public boolean directionKeyIsPressed(){\n  return pressedStateKeys.contains(KeyEvent.VK_UP) || pressedStateKeys.contains(KeyEvent.VK_DOWN) || pressedStateKeys.contains(KeyEvent.VK_LEFT)|| pressedStateKeys.contains(KeyEvent.VK_RIGHT)|| pressedStateKeys.contains(KeyEvent.VK_KP_LEFT)|| pressedStateKeys.contains(KeyEvent.VK_KP_RIGHT)|| pressedStateKeys.contains(KeyEvent.VK_KP_UP)|| pressedStateKeys.contains(KeyEvent.VK_KP_DOWN);\n}"}
{"ids": "85783", "raw_code": "private void calculateCalibration(long difference,float currentMeasure,byte currentIndex){\n  if (difference >= MedtronicConstants.TIME_15_MIN_IN_MS && difference < MedtronicConstants.TIME_20_MIN_IN_MS) {\n    if (isSensorMeasureInRange(currentIndex,expectedSensorSortNumberForCalibration)) {\n      isCalibrating=false;\n      calibrationStatus=MedtronicConstants.CALIBRATED;\n      calibrationIsigValue=currentMeasure;\n      SharedPreferences.Editor editor=settings.edit();\n      calibrationFactor=lastGlucometerValue / calibrationIsigValue;\n      editor.remove(\"expectedSensorSortNumberForCalibration0\");\n      editor.remove(\"expectedSensorSortNumberForCalibration1\");\n      editor.putFloat(\"calibrationFactor\",(float)calibrationFactor);\n      editor.putInt(\"calibrationStatus\",calibrationStatus);\n      editor.commit();\n    }\n else {\n      if (calibrationStatus != MedtronicConstants.WITHOUT_ANY_CALIBRATION && currentIndex != expectedSensorSortNumber) {\n        calibrationStatus=MedtronicConstants.LAST_CALIBRATION_FAILED_USING_PREVIOUS;\n        isCalibrating=false;\n      }\n else {\n        calibrationStatus=MedtronicConstants.WITHOUT_ANY_CALIBRATION;\n      }\n      SharedPreferences.Editor editor=settings.edit();\n      editor.remove(\"expectedSensorSortNumberForCalibration0\");\n      editor.remove(\"expectedSensorSortNumberForCalibration1\");\n      editor.commit();\n    }\n  }\n else   if (difference >= MedtronicConstants.TIME_20_MIN_IN_MS) {\n    if (isSensorMeasureInRange(currentIndex,expectedSensorSortNumberForCalibration)) {\n      calibrationStatus=MedtronicConstants.CALIBRATED_IN_15MIN;\n      calibrationIsigValue=currentMeasure;\n      SharedPreferences.Editor editor=settings.edit();\n      calibrationFactor=lastGlucometerValue / calibrationIsigValue;\n      editor.remove(\"expectedSensorSortNumberForCalibration0\");\n      editor.remove(\"expectedSensorSortNumberForCalibration1\");\n      editor.putFloat(\"calibrationFactor\",(float)calibrationFactor);\n      editor.putInt(\"calibrationStatus\",calibrationStatus);\n      editor.commit();\n    }\n else {\n      if (calibrationStatus != MedtronicConstants.WITHOUT_ANY_CALIBRATION)       calibrationStatus=MedtronicConstants.LAST_CALIBRATION_FAILED_USING_PREVIOUS;\n else {\n        calibrationStatus=MedtronicConstants.WITHOUT_ANY_CALIBRATION;\n      }\n      SharedPreferences.Editor editor=settings.edit();\n      editor.remove(\"expectedSensorSortNumberForCalibration0\");\n      editor.remove(\"expectedSensorSortNumberForCalibration1\");\n      editor.commit();\n    }\n    isCalibrating=false;\n  }\n else {\n    if (isCalibrating) {\n      if (difference < MedtronicConstants.TIME_5_MIN_IN_MS) {\n        calibrationStatus=MedtronicConstants.CALIBRATING;\n      }\n else       if (difference >= MedtronicConstants.TIME_5_MIN_IN_MS && difference <= MedtronicConstants.TIME_15_MIN_IN_MS)       calibrationStatus=MedtronicConstants.CALIBRATING2;\n else       calibrationStatus=MedtronicConstants.CALIBRATING;\n    }\n else {\n      if (calibrationStatus != MedtronicConstants.WITHOUT_ANY_CALIBRATION)       calibrationStatus=MedtronicConstants.LAST_CALIBRATION_FAILED_USING_PREVIOUS;\n else {\n        calibrationStatus=MedtronicConstants.WITHOUT_ANY_CALIBRATION;\n      }\n      SharedPreferences.Editor editor=settings.edit();\n      editor.remove(\"expectedSensorSortNumberForCalibration0\");\n      editor.remove(\"expectedSensorSortNumberForCalibration1\");\n      editor.putInt(\"calibrationStatus\",calibrationStatus);\n      editor.commit();\n    }\n  }\n}"}
{"ids": "16247", "raw_code": "public void addPosition(int offset,int length,String... ids){\n  TextAttribute highlighting=ids.length == 1 ? attributeProvider.getAttribute(ids[0]) : attributeProvider.getMergedAttributes(ids);\n  boolean isExisting=false;\n  for (int i=0, n=removedPositions.size(); i < n; i++) {\n    AttributedPosition position=removedPositions.get(i);\n    if (position == null)     continue;\n    if (position.isEqual(offset,length,highlighting)) {\n      isExisting=true;\n      removedPositions.set(i,null);\n      removedPositionCount--;\n      break;\n    }\n  }\n  if (!isExisting) {\n    AttributedPosition position=presenter.createHighlightedPosition(offset,length,highlighting);\n    addedPositions.add(position);\n  }\n}"}
{"ids": "21724", "raw_code": "static void exportMaskUpdate(ExportMask exportMask,Map<URI,Integer> volumeMap,List<Initiator> initiators,List<URI> targets){\n  if (volumeMap != null) {\n    for (    URI volume : volumeMap.keySet()) {\n      exportMask.addVolume(volume,volumeMap.get(volume));\n    }\n  }\n  if (initiators != null) {\n    for (    Initiator initiator : initiators) {\n      exportMask.addInitiator(initiator);\n    }\n  }\n  if (targets != null) {\n    for (    URI target : targets) {\n      exportMask.addTarget(target);\n    }\n  }\n}"}
{"ids": "1675", "raw_code": "private void internalAddHead(final MessageReference ref){\n  queueMemorySize.addAndGet(ref.getMessageMemoryEstimate());\n  refAdded(ref);\n  int priority=getPriority(ref);\n  messageReferences.addHead(ref,priority);\n}"}
{"ids": "66375", "raw_code": "private boolean createNew(MProduct product,MAcctSchema as){\n  MCost dimension=MCost.getOrCreate(product,0,as,0,0,as.getM_CostType_ID(),m_ce.getM_CostElement_ID());\n  if (dimension.is_new())   return dimension.save();\n  return false;\n}"}
{"ids": "30818", "raw_code": "@Override protected void step(){\n  while (iter.hasNext()) {\n    reg=(SvcReg)iter.next();\n    if (reg.leaseExpiration > now)     return;\n  }\n  reg=null;\n}"}
{"ids": "39320", "raw_code": "public Enumeration<String> packages(){\n  return m_Cache.keys();\n}"}
{"ids": "44086", "raw_code": "protected int size(){\n  return document.length();\n}"}
{"ids": "27640", "raw_code": "public TPS currentRow(){\n  return currentRow(null);\n}"}
{"ids": "53475", "raw_code": "public final void deleteAllEntries(){\n  if (numEntries > 0) {\n    Arrays.fill(entries,null);\n    this.numEntries=0;\n  }\n}"}
{"ids": "6831", "raw_code": "public List<Map<String,Object>> query(final String indexName,final String q,final Operator operator,final int offset,final int count){\n  assert count > 1;\n  SearchRequestBuilder request=elasticsearchClient.prepareSearch(indexName).setQuery(QueryBuilders.multiMatchQuery(q,\"_all\").operator(operator).zeroTermsQuery(ZeroTermsQuery.ALL)).setFrom(offset).setSize(count);\n  SearchResponse response=request.execute().actionGet();\n  SearchHit[] hits=response.getHits().getHits();\n  ArrayList<Map<String,Object>> result=new ArrayList<Map<String,Object>>();\n  for (  SearchHit hit : hits) {\n    Map<String,Object> map=hit.getSource();\n    result.add(map);\n  }\n  return result;\n}"}
{"ids": "67330", "raw_code": "public SortedSet<String> plugins(){\n  SortedSet<String> r=new TreeSet<>();\n  for (  NamePair p : items.keySet()) {\n    r.add(p.pluginName);\n  }\n  return Collections.unmodifiableSortedSet(r);\n}"}
{"ids": "65846", "raw_code": "public static void error(int WindowNo,Container c,String AD_Message){\n  error(WindowNo,c,AD_Message,null);\n}"}
{"ids": "37401", "raw_code": "public ReilFunction translate(final ITranslationEnvironment environment,final IBlockContainer<InstructionType> function) throws InternalTranslationException {\n  return translate(environment,function,new ArrayList<ITranslationExtension<InstructionType>>());\n}"}
{"ids": "46179", "raw_code": "public Name parse(String name) throws NamingException {\n  Vector<String> comps=insStringToStringifiedComps(name);\n  return new CNCompoundName(comps.elements());\n}"}
{"ids": "36005", "raw_code": "public CSVDataSourceFactory(){\n  super(\"csv\",CSV_MIME_TYPES,CSV_FILE_ENDINGS,CSVFormatSpecificationWizardStep.CSV_FORMAT_SPECIFICATION_STEP_ID);\n}"}
{"ids": "83500", "raw_code": "private void sendAck(String index,String message,GuacamoleStatus status){\n  if (status != GuacamoleStatus.SUCCESS)   closeInterceptedStream(index);\n  sendInstruction(new GuacamoleInstruction(\"ack\",index,message,Integer.toString(status.getGuacamoleStatusCode())));\n}"}
{"ids": "763", "raw_code": "public static boolean isWindowsPlatform(){\n  String os=System.getProperty(\"os.name\");\n  return (os != null && os.startsWith(WIN_ID));\n}"}
{"ids": "41598", "raw_code": "static public int countRangesThatCollideZone(List<Bounds> ranges,List<Bounds> zoneRanges){\n  int overallEOAA=0;\n  Collections.sort(zoneRanges);\n  for (  Bounds extractedBounds : ranges) {\n    for (    Bounds expectedBounds : zoneRanges) {\n      if (expectedBounds.start >= extractedBounds.end) {\n        break;\n      }\n      if (extractedBounds.overlaps(expectedBounds)) {\n        overallEOAA++;\n        break;\n      }\n    }\n  }\n  return overallEOAA;\n}"}
{"ids": "81323", "raw_code": "public static boolean timeStampChanged(String location){\nsynchronized (installLock) {\n    if (fgHasChanged.contains(location)) {\n      return true;\n    }\n    File file=new File(location);\n    if (file.exists()) {\n      if (fgInstallTimeMap == null) {\n        readInstallInfo();\n      }\n      Long stamp=fgInstallTimeMap.get(location);\n      long fstamp=file.lastModified();\n      if (stamp != null) {\n        if (stamp.longValue() == fstamp) {\n          return false;\n        }\n      }\n      stamp=new Long(fstamp);\n      fgInstallTimeMap.put(location,stamp);\n      writeInstallInfo();\n      fgHasChanged.add(location);\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "10156", "raw_code": "public static Boolean[] valuesOf(boolean[] array){\n  Boolean[] dest=new Boolean[array.length];\n  for (int i=0; i < array.length; i++) {\n    dest[i]=Boolean.valueOf(array[i]);\n  }\n  return dest;\n}"}
{"ids": "35537", "raw_code": "private void correctTooHigh(int childCount){\n  int lastPosition=mFirstPosition + childCount - 1;\n  if (lastPosition == mItemCount - 1 && childCount > 0) {\n    final int lastBottom=getLowestChildBottom();\n    final int end=(getBottom() - getTop()) - getListPaddingBottom();\n    int bottomOffset=end - lastBottom;\n    final int firstTop=getHighestChildTop();\n    if (bottomOffset > 0 && (mFirstPosition > 0 || firstTop < getListPaddingTop())) {\n      if (mFirstPosition == 0) {\n        bottomOffset=Math.min(bottomOffset,getListPaddingTop() - firstTop);\n      }\n      offsetChildrenTopAndBottom(bottomOffset);\n      if (mFirstPosition > 0) {\n        int previousPosition=mFirstPosition - 1;\n        fillUp(previousPosition,getNextChildUpsBottom(previousPosition));\n        adjustViewsUpOrDown();\n      }\n    }\n  }\n}"}
{"ids": "72280", "raw_code": "public static boolean writeLine(String fileName,String value){\n  BufferedWriter writer=null;\n  try {\n    writer=new BufferedWriter(new FileWriter(fileName));\n    writer.write(value);\n  }\n catch (  FileNotFoundException e) {\n    Log.w(TAG,\"No such file \" + fileName + \" for writing\",e);\n    return false;\n  }\ncatch (  IOException e) {\n    Log.e(TAG,\"Could not write to file \" + fileName,e);\n    return false;\n  }\n finally {\n    try {\n      if (writer != null) {\n        writer.close();\n      }\n    }\n catch (    IOException e) {\n    }\n  }\n  return true;\n}"}
{"ids": "40539", "raw_code": "public void didRollback(){\nsynchronized (this) {\n    if (pending != null) {\n      pending.cancel(false);\n      pending=null;\n    }\n    docsSinceCommit.set(0);\n  }\n}"}
{"ids": "54616", "raw_code": "@Override protected void calculateThumbLocation(){\n  super.calculateThumbLocation();\n  if (slider.getSnapToTicks()) {\n    int upperValue=slider.getValue() + slider.getExtent();\n    int snappedValue=upperValue;\n    int majorTickSpacing=slider.getMajorTickSpacing();\n    int minorTickSpacing=slider.getMinorTickSpacing();\n    int tickSpacing=0;\n    if (minorTickSpacing > 0) {\n      tickSpacing=minorTickSpacing;\n    }\n else     if (majorTickSpacing > 0) {\n      tickSpacing=majorTickSpacing;\n    }\n    if (tickSpacing != 0) {\n      if ((upperValue - slider.getMinimum()) % tickSpacing != 0) {\n        float temp=(float)(upperValue - slider.getMinimum()) / (float)tickSpacing;\n        int whichTick=Math.round(temp);\n        snappedValue=slider.getMinimum() + (whichTick * tickSpacing);\n      }\n      if (snappedValue != upperValue) {\n        slider.setExtent(snappedValue - slider.getValue());\n      }\n    }\n  }\n  if (slider.getOrientation() == JSlider.HORIZONTAL) {\n    int upperPosition=xPositionForValue(slider.getValue() + slider.getExtent());\n    upperThumbRect.x=upperPosition - (upperThumbRect.width / 2);\n    upperThumbRect.y=trackRect.y;\n  }\n else {\n    int upperPosition=yPositionForValue(slider.getValue() + slider.getExtent());\n    upperThumbRect.x=trackRect.x;\n    upperThumbRect.y=upperPosition - (upperThumbRect.height / 2);\n  }\n}"}
{"ids": "8107", "raw_code": "public void compile(int throughPhase) throws CompilationFailedException {\n  gotoPhase(Phases.INITIALIZATION);\n  throughPhase=Math.min(throughPhase,Phases.ALL);\n  while (throughPhase >= phase && phase <= Phases.ALL) {\n    if (phase == Phases.SEMANTIC_ANALYSIS) {\n      doPhaseOperation(resolve);\n      if (dequeued())       continue;\n    }\n    processPhaseOperations(phase);\n    processNewPhaseOperations(phase);\n    if (progressCallback != null)     progressCallback.call(this,phase);\n    completePhase();\n    applyToSourceUnits(mark);\n    if (dequeued())     continue;\n    gotoPhase(phase + 1);\n    if (phase == Phases.CLASS_GENERATION) {\n      sortClasses();\n    }\n  }\n  errorCollector.failIfErrors();\n}"}
{"ids": "72882", "raw_code": "public String generateBearerToken(String email,String username,Map<String,String> payload){\n  String token=tokenGenerator.generate();\n  Map<String,String> payloadCopy=payload == null ? new HashMap() : new HashMap(payload);\n  payloadCopy.put(\"email\",email);\n  payloadCopy.put(\"username\",username);\n  payloadCopy.put(\"creation.time\",Long.toString(System.currentTimeMillis()));\n  tokenMap.put(token,payloadCopy);\n  return token;\n}"}
{"ids": "54993", "raw_code": "public void endDocument(Augmentations augs) throws XNIException {\n  try {\n    if (fDocumentHandler != null) {\n      fDocumentHandler.endDocument();\n    }\n    if (fContentHandler != null) {\n      fContentHandler.endDocument();\n    }\n  }\n catch (  SAXException e) {\n    throw new XNIException(e);\n  }\n}"}
{"ids": "8605", "raw_code": "public final ConnectionState newInput() throws IOException {\n  if (in.hasRemaining()) {\n    throw new RuntimeException(\"data remaining in input\");\n  }\n  in.clear();\n  int r=ch.read(in);\n  if (r == -1)   throw new IOException(\"connection closed on client side\");\n  if (r == 0)   return ConnectionState.SELECTOR_WAIT_FOR_NEW_INPUT;\n  in.flip();\n  return newRequestChunk();\n}"}
{"ids": "4659", "raw_code": "public boolean canMoveForward(){\n  return currentIndex >= 0 && currentIndex < (history.size() - 1);\n}"}
{"ids": "54542", "raw_code": "public void clearCache(){\n  DiskLruCache.clearCache(mCacheDir);\n}"}
{"ids": "63442", "raw_code": "public void addNaturalJoinColumn(Column c){\n  if (naturalJoinColumns == null) {\n    naturalJoinColumns=New.arrayList();\n  }\n  naturalJoinColumns.add(c);\n}"}
{"ids": "33046", "raw_code": "private RefactoringStatus checkCanCreateIntermediaryMethod() throws JavaModelException {\n  List<ITypeBinding> parameterBindings=new ArrayList<ITypeBinding>();\n  if (!isStaticTarget())   parameterBindings.add(fIntermediaryFirstParameterType);\n  parameterBindings.addAll(Arrays.asList(fTargetMethodBinding.getParameterTypes()));\n  return Checks.checkMethodInType(fIntermediaryTypeBinding,fIntermediaryMethodName,parameterBindings.toArray(new ITypeBinding[parameterBindings.size()]));\n}"}
{"ids": "7577", "raw_code": "@Override public String generateToolTip(XYDataset data,int series,int item){\n  return getToolTipText(series,item);\n}"}
{"ids": "19433", "raw_code": "private Class<?> findClassNonDalvik(String name) throws ClassNotFoundException {\n  String pathName=CLASS_PATH + name + \".class\";\n  File path=new File(pathName);\n  RandomAccessFile raf;\n  try {\n    raf=new RandomAccessFile(path,\"r\");\n  }\n catch (  FileNotFoundException fnfe) {\n    throw new ClassNotFoundException(\"Not found: \" + pathName);\n  }\n  byte[] fileData;\n  try {\n    fileData=new byte[(int)raf.length()];\n    raf.readFully(fileData);\n  }\n catch (  IOException ioe) {\n    throw new ClassNotFoundException(\"Read error: \" + pathName);\n  }\n finally {\n    try {\n      raf.close();\n    }\n catch (    IOException ioe) {\n    }\n  }\n  try {\n    return defineClass(name,fileData,0,fileData.length);\n  }\n catch (  Throwable th) {\n    throw new ClassNotFoundException(\"defineClass failed\",th);\n  }\n}"}
{"ids": "53350", "raw_code": "public static void load(Class<?> parent){\n  load(parent,ClassLoader.getSystemClassLoader());\n}"}
{"ids": "63872", "raw_code": "public void removeChangeListener(ChangeListener cl){\n  listeners.remove(cl);\n}"}
{"ids": "53729", "raw_code": "@GuardedBy(\"evictionLock\") void applyRead(Node<K,V> node){\n  if (evictionDeque.contains(node)) {\n    evictionDeque.moveToBack(node);\n  }\n}"}
{"ids": "12049", "raw_code": "private void flushWriteChunk(){\n  if (writeChunk == null)   return;\n  if (writeChunk.position() == 0)   return;\n  if (!writeChunk.hasRemaining()) {\n    bytesWritten+=writeChunk.position();\n    writeChunk.flip();\n    list.addLast(writeChunk);\n    writeChunk=null;\n    return;\n  }\n  bytesWritten+=writeChunk.position();\n  ByteBuffer flushChunk=writeChunk;\n  writeChunk=writeChunk.slice();\n  writeChunk.order(order);\n  flushChunk.flip();\n  list.addLast(flushChunk);\n  return;\n}"}
{"ids": "74694", "raw_code": "public final double sin(){\n  return Math.sin(this.radians);\n}"}
{"ids": "787", "raw_code": "public AxisLabelLayout(String group,int axis,ValuedRangeModel values){\n  this(group,axis,values,null);\n}"}
{"ids": "72772", "raw_code": "public double angle(IMovingAgent agent){\n  return Geometric.angle(this.location,agent.getLocation());\n}"}
{"ids": "7479", "raw_code": "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof DefaultDrawingSupplier)) {\n    return false;\n  }\n  DefaultDrawingSupplier that=(DefaultDrawingSupplier)obj;\n  if (!Arrays.equals(this.paintSequence,that.paintSequence)) {\n    return false;\n  }\n  if (this.paintIndex != that.paintIndex) {\n    return false;\n  }\n  if (!Arrays.equals(this.outlinePaintSequence,that.outlinePaintSequence)) {\n    return false;\n  }\n  if (this.outlinePaintIndex != that.outlinePaintIndex) {\n    return false;\n  }\n  if (!Arrays.equals(this.strokeSequence,that.strokeSequence)) {\n    return false;\n  }\n  if (this.strokeIndex != that.strokeIndex) {\n    return false;\n  }\n  if (!Arrays.equals(this.outlineStrokeSequence,that.outlineStrokeSequence)) {\n    return false;\n  }\n  if (this.outlineStrokeIndex != that.outlineStrokeIndex) {\n    return false;\n  }\n  if (!equalShapes(this.shapeSequence,that.shapeSequence)) {\n    return false;\n  }\n  if (this.shapeIndex != that.shapeIndex) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "63793", "raw_code": "public static int brighter(int c){\n  int r=red(c), g=green(c), b=blue(c);\n  int i=(int)(1.0 / (1.0 - scale));\n  if (r == 0 && g == 0 && b == 0) {\n    return rgba(i,i,i,alpha(c));\n  }\n  if (r > 0 && r < i)   r=i;\n  if (g > 0 && g < i)   g=i;\n  if (b > 0 && b < i)   b=i;\n  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));\n}"}
{"ids": "51994", "raw_code": "@Override protected void paintComponent(Graphics g){\n  super.paintComponent(g);\n  Graphics2D g2=(Graphics2D)g;\n  if (shouldDraw) {\n    drawDisplayListOn(g2);\n  }\n}"}
{"ids": "33176", "raw_code": "public void load(InputStream in) throws IOException {\n  properties.load(in);\n  dirty=false;\n}"}
{"ids": "67150", "raw_code": "@Override public void onBindViewHolder(VH holder,int position){\n  if (list.get(position).type == TYPE_ITEM) {\n    onBindItemViewHolder(holder,position);\n  }\n else   if (list.get(position).type == TYPE_HEADER) {\n    onBindHeaderViewHolder(holder,position);\n  }\n}"}
{"ids": "82121", "raw_code": "public static Map<ComponentWrapper,CC> parseComponentConstraints(Map<ComponentWrapper,String> constrMap){\n  HashMap<ComponentWrapper,CC> flowConstrMap=new HashMap<ComponentWrapper,CC>();\n  for (  ComponentWrapper c : constrMap.keySet()) {\n    flowConstrMap.put(c,parseComponentConstraint(constrMap.get(c)));\n  }\n  return flowConstrMap;\n}"}
{"ids": "59939", "raw_code": "private void sendStageProgressPatch(TaskState state){\n  ServiceUtils.logInfo(this,\"Sending self-patch to stage %s\",state.stage,state.subStage);\n  TaskUtils.sendSelfPatch(this,buildPatch(state.stage,state.subStage,null));\n}"}
{"ids": "4657", "raw_code": "public String moveBack(){\n  Check.isTrue(currentIndex > 0,\"currentIndex > 0\");\n  currentIndex--;\n  return history.get(currentIndex);\n}"}
{"ids": "70437", "raw_code": "public static long hash64(final String text){\n  final byte[] bytes=text.getBytes();\n  return hash64(bytes,bytes.length);\n}"}
{"ids": "40497", "raw_code": "public static void deleteCore(){\n  log.info(\"###deleteCore\");\n  if (h != null) {\n    h.close();\n  }\n  if (factoryProp == null) {\n    System.clearProperty(\"solr.directoryFactory\");\n  }\n  solrConfig=null;\n  h=null;\n  lrf=null;\n  configString=schemaString=null;\n}"}
{"ids": "11542", "raw_code": "public static boolean canTab(List constraints){\n  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {\n    DockConstraint dc=(DockConstraint)iter.next();\n    if (!dc.canTab())     return false;\n  }\n  return true;\n}"}
{"ids": "23303", "raw_code": "public ImdnParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {\n  try {\n    SAXParserFactory factory=SAXParserFactory.newInstance();\n    SAXParser parser=factory.newSAXParser();\n    parser.parse(mInputSource,this);\n    return this;\n  }\n catch (  IOException e) {\n    throw new ParseFailureException(\"Failed to parse input source!\",e);\n  }\n}"}
{"ids": "23747", "raw_code": "static boolean chunkSet(InternalDistributedMember recipient,Set set,int CHUNK_SIZE_IN_BYTES,boolean includeValues,ObjectIntProcedure proc) throws IOException {\n  Iterator it=set.iterator();\n  boolean keepGoing=true;\n  boolean sentLastChunk=false;\n  final HeapDataOutputStream mos=new HeapDataOutputStream(InitialImageOperation.CHUNK_SIZE_IN_BYTES + 2048,recipient.getVersionObject());\n  do {\n    mos.reset();\n    int avgItemSize=0;\n    int itemCount=0;\n    while ((mos.size() + avgItemSize) < InitialImageOperation.CHUNK_SIZE_IN_BYTES && it.hasNext()) {\n      Object key=it.next();\n      DataSerializer.writeObject(key,mos);\n      itemCount++;\n      avgItemSize=mos.size() / itemCount;\n    }\n    DataSerializer.writeObject((Object)null,mos);\n    int lastMsg=it.hasNext() ? 0 : 1;\n    keepGoing=proc.executeWith(mos,lastMsg);\n    sentLastChunk=lastMsg == 1 && keepGoing;\n  }\n while (keepGoing && it.hasNext());\n  return sentLastChunk;\n}"}
{"ids": "10806", "raw_code": "public static BigInteger toBigInteger(final Ed25519EncodedFieldElement encoded){\n  return toBigInteger(encoded.getRaw());\n}"}
{"ids": "83446", "raw_code": "public String escapeLDAPSearchFilter(String filter){\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < filter.length(); i++) {\n    char curChar=filter.charAt(i);\nswitch (curChar) {\ncase '\\\\':\n      sb.append(\"\\\\5c\");\n    break;\ncase '*':\n  sb.append(\"\\\\2a\");\nbreak;\ncase '(':\nsb.append(\"\\\\28\");\nbreak;\ncase ')':\nsb.append(\"\\\\29\");\nbreak;\ncase '\\u0000':\nsb.append(\"\\\\00\");\nbreak;\ndefault :\nsb.append(curChar);\n}\n}\nreturn sb.toString();\n}"}
{"ids": "75655", "raw_code": "protected synchronized void save(){\n  int retVal;\n  File file;\n  String text;\n  FileWriter fwriter;\n  BufferedWriter bwriter;\n  retVal=m_FileChooser.showOpenDialog(this);\n  if (retVal != MekaFileChooser.APPROVE_OPTION)   return;\n  file=m_FileChooser.getSelectedFile();\n  text=m_TextArea.getText();\n  fwriter=null;\n  bwriter=null;\n  try {\n    fwriter=new FileWriter(file);\n    bwriter=new BufferedWriter(fwriter);\n    bwriter.write(text);\n    bwriter.newLine();\n    bwriter.flush();\n    log(\"Log successfully saved to: \" + file);\n  }\n catch (  Exception e) {\n    handleException(\"Failed to save log output to: \" + file,e);\n  }\n finally {\n    FileUtils.closeQuietly(bwriter);\n    FileUtils.closeQuietly(fwriter);\n  }\n}"}
{"ids": "53235", "raw_code": "public EigenvalueDecomposition(double[][] A){\n  n=A.length;\n  V=new double[n][n];\n  d=new double[n];\n  e=new double[n];\n  issymmetric=true;\n  for (int j=0; (j < n) && issymmetric; j++) {\n    for (int i=0; (i < n) && issymmetric; i++) {\n      issymmetric=(A[i][j] == A[j][i]);\n      if (Double.isNaN(A[i][j])) {\n        throw new IllegalArgumentException(\"NaN in EigenvalueDecomposition!\");\n      }\n      if (Double.isInfinite(A[i][j])) {\n        throw new IllegalArgumentException(\"+-inf in EigenvalueDecomposition!\");\n      }\n    }\n  }\n  if (issymmetric) {\n    for (int i=0; i < n; i++) {\n      System.arraycopy(A[i],0,V[i],0,n);\n    }\n    tred2();\n    tql2();\n  }\n else {\n    H=new double[n][n];\n    ort=new double[n];\n    for (int j=0; j < n; j++) {\n      for (int i=0; i < n; i++) {\n        H[i][j]=A[i][j];\n      }\n    }\n    orthes();\n    hqr2();\n  }\n}"}
{"ids": "56481", "raw_code": "public SearchSourceBuilder fields(String... fields){\n  if (fieldNames == null) {\n    fieldNames=new ArrayList<>();\n  }\n  Collections.addAll(fieldNames,fields);\n  return this;\n}"}
{"ids": "53364", "raw_code": "public static StringBuilder formatTo(StringBuilder buf,boolean[] d,String sep){\n  if (d == null) {\n    return buf.append(\"null\");\n  }\n  if (d.length == 0) {\n    return buf;\n  }\n  buf.append(d[0]);\n  for (int i=1; i < d.length; i++) {\n    buf.append(sep);\n    buf.append(format(d[i]));\n  }\n  return buf;\n}"}
{"ids": "66813", "raw_code": "public String toCompleteString(){\n  String ret=\"\";\n  if (!lines.isEmpty() && !Config.v().noSourceInfo) {\n    for (    SourceLocationTag line : lines) {\n      ret+=\"// \" + line + \"\\n\";\n    }\n  }\n  ret+=toSignatureString();\n  return ret;\n}"}
{"ids": "30398", "raw_code": "@Override public void updateReceiptDetails(final Set<BillReceiptInfo> billReceipts){\n  LOGGER.debug(\"updateReceiptDetails : Updating Receipt Details Started, billReceipts : \" + billReceipts);\n  final Boolean status=false;\n  if (billReceipts != null)   super.updateReceiptDetails(billReceipts);\n  LOGGER.debug(\"updateReceiptDetails : Updating Receipt Details Finished, status : \" + status);\n}"}
{"ids": "13802", "raw_code": "public static void removeMapEntries(Map map,Set set){\n  if ((set != null) && !set.isEmpty()) {\n    for (Iterator iter=set.iterator(); iter.hasNext(); ) {\n      map.remove(iter.next());\n    }\n  }\n}"}
{"ids": "50164", "raw_code": "public static void putFile(ServiceClient h,final Operation put,File f) throws IOException {\n  final AsynchronousFileChannel ch=AsynchronousFileChannel.open(f.toPath(),StandardOpenOption.READ);\n  AtomicInteger completionCount=new AtomicInteger(0);\n  String contentType=FileUtils.getContentType(f.toURI());\n  final boolean[] fileIsDone={false};\n  putChunks(h,put,ch,contentType,f.length(),0,completionCount,fileIsDone);\n}"}
{"ids": "83583", "raw_code": "protected StringBuilder processLine(String nextElement){\n  StringBuilder sb=new StringBuilder(INITIAL_STRING_SIZE);\n  for (int j=0; j < nextElement.length(); j++) {\n    char nextChar=nextElement.charAt(j);\n    processCharacter(sb,nextChar);\n  }\n  return sb;\n}"}
{"ids": "33095", "raw_code": "public JavaRefactoringDescriptor(final String id,final String project,final String description,final String comment,final Map arguments,final int flags){\n  super(id,project,description,comment,flags);\n  fArguments=arguments;\n  fArguments.put(ATTRIBUTE_VERSION,VALUE_VERSION_1_0);\n}"}
{"ids": "25374", "raw_code": "private static SupportedGroup negotiateNamedCurve(ClientHello clientHello){\n  SupportedGroup result=null;\n  List<SupportedGroup> preferredGroups=SupportedGroup.getPreferredGroups();\n  SupportedEllipticCurvesExtension extension=clientHello.getSupportedEllipticCurvesExtension();\n  if (extension == null) {\n    if (!preferredGroups.isEmpty()) {\n      result=preferredGroups.get(0);\n    }\n  }\n else {\n    for (    Integer preferredGroupId : extension.getSupportedGroupIds()) {\n      SupportedGroup group=SupportedGroup.fromId(preferredGroupId);\n      if (group != null && group.isUsable() && preferredGroups.contains(group)) {\n        result=group;\n        break;\n      }\n    }\n  }\n  return result;\n}"}
{"ids": "65628", "raw_code": "public void zoom(){\n  if (getSelectedRowKey() != null && getSelectedRowKey() > 0) {\n    MQuery zoomQuery=new MQuery();\n    String column=getKeyColumn();\n    if (column.indexOf(\".\") > 0)     column=column.substring(column.indexOf(\".\") + 1);\n    zoomQuery.addRestriction(column,MQuery.EQUAL,getSelectedRowKey());\n    zoomQuery.setRecordCount(1);\n    zoomQuery.setTableName(column.substring(0,column.length() - 3));\n    AEnv.zoom(236,zoomQuery);\n  }\n}"}
{"ids": "75380", "raw_code": "public long avgRate(){\n  long sum=0L;\n  for (  Sample s : samples) {\n    sum+=s.rate();\n  }\n  return (long)(sum / (long)samples.size());\n}"}
{"ids": "62214", "raw_code": "@Override public synchronized void close() throws IOException {\n  try {\n    if (syncTask != null) {\n      syncTask.cancel();\n    }\n    sync();\n    unmapFile();\n  }\n  finally {\n    super.close();\n  }\n}"}
{"ids": "11664", "raw_code": "public boolean mouseMoved(MouseEvent e){\n  OMGraphic newSelectedGraphic;\n  if (show_plot_ && graph != null) {\n    newSelectedGraphic=graph.selectPoint(e.getX(),e.getY(),4.0f);\n    if (newSelectedGraphic != null) {\n      String infostring=(String)(newSelectedGraphic.getAttribute(OMGraphic.APP_OBJECT));\n      if (infostring != null) {\n        fireRequestInfoLine(infostring);\n      }\n    }\n else {\n      fireRequestInfoLine(\"\");\n    }\n    return true;\n  }\n else {\n    OMGraphicList list=getList();\n    if (list != null) {\n      newSelectedGraphic=list.selectClosest(e.getX(),e.getY(),4.0f);\n      if (newSelectedGraphic != null && (selectedGraphic == null || newSelectedGraphic != selectedGraphic)) {\n        Debug.message(\"basic\",\"Making selection...\");\n        selectedGraphic=newSelectedGraphic;\n        selectedGraphic.regenerate(getProjection());\n        GLOBESite site=(GLOBESite)(newSelectedGraphic.getAttribute(OMGraphic.APP_OBJECT));\n        if (site != null) {\n          fireRequestInfoLine(site.getInfo());\n        }\n        repaint();\n      }\n else       if (selectedGraphic != null && newSelectedGraphic == null) {\n        Debug.message(\"basic\",\"Clearing selection...\");\n        selectedGraphic.regenerate(getProjection());\n        fireRequestInfoLine(\"\");\n        selectedGraphic=null;\n        repaint();\n      }\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "6503", "raw_code": "public void hidePopup(){\n  showPending=false;\n  if (popup != null) {\n    popup.hide();\n    popup=null;\n  }\n}"}
{"ids": "8353", "raw_code": "public final RuntimeException processDoMethodInvokeException(Exception e,Object object,Object[] argumentArray){\n  if (e instanceof RuntimeException)   return (RuntimeException)e;\n  return MetaClassHelper.createExceptionText(\"failed to invoke method: \",this,object,argumentArray,e,true);\n}"}
{"ids": "10947", "raw_code": "protected boolean buildSubfieldDefns(String pszSublist){\n  if (pszSublist.charAt(0) == '*') {\n    bRepeatingSubfields=true;\n    pszSublist=pszSublist.substring(1);\n  }\n  Vector papszSubfieldNames=PropUtils.parseMarkers(pszSublist,\"!\");\n  paoSubfieldDefns=new Vector();\n  for (Iterator it=papszSubfieldNames.iterator(); it.hasNext(); ) {\n    DDFSubfieldDefinition ddfsd=new DDFSubfieldDefinition();\n    ddfsd.setName((String)it.next());\n    paoSubfieldDefns.add(ddfsd);\n  }\n  return true;\n}"}
{"ids": "64902", "raw_code": "public boolean isRunning(){\n  return mRunning.get();\n}"}
{"ids": "2791", "raw_code": "private static Map<String,Boolean> objectMethodsToGenerate(List<ExecutableElement> methods){\n  Map<String,Boolean> vars=new TreeMap<String,Boolean>();\n  vars.put(\"equals\",false);\n  vars.put(\"hashCode\",false);\n  vars.put(\"toString\",false);\n  for (  ExecutableElement method : methods) {\n    if (isToStringOrEqualsOrHashCode(method)) {\n      boolean canGenerate=method.getModifiers().contains(Modifier.ABSTRACT) || isJavaLangObject((TypeElement)method.getEnclosingElement());\n      vars.put(method.getSimpleName().toString(),canGenerate);\n    }\n  }\n  assert vars.size() == 3;\n  return vars;\n}"}
{"ids": "22795", "raw_code": "public void addEntryTime(double time){\n  if (entryTimes == null) {\n    return;\n  }\n  if (time < 0) {\n    time=0.0;\n  }\n  entryTimes.add(Double.valueOf(time));\n}"}
{"ids": "68689", "raw_code": "public final double NPV(){\n  calculate();\n  QL.require(!Double.isNaN(this.NPV),\"NPV not provided\");\n  return NPV;\n}"}
{"ids": "72440", "raw_code": "public ArrayRealVector(ArrayRealVector v1,RealVector v2){\n  final int l1=v1.data.length;\n  final int l2=v2.getDimension();\n  data=new double[l1 + l2];\n  System.arraycopy(v1.data,0,data,0,l1);\n  for (int i=0; i < l2; ++i) {\n    data[l1 + i]=v2.getEntry(i);\n  }\n}"}
{"ids": "79320", "raw_code": "public static Map<String,Object> deactivateContentAssoc(DispatchContext dctx,Map<String,? extends Object> rcontext){\n  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);\n  context.put(\"entityOperation\",\"_UPDATE\");\n  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,\"_UPDATE\");\n  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);\n  context.put(\"targetOperationList\",targetOperationList);\n  context.put(\"contentPurposeList\",contentPurposeList);\n  context.put(\"skipPermissionCheck\",null);\n  Map<String,Object> result=deactivateContentAssocMethod(dctx,context);\n  return result;\n}"}
{"ids": "12342", "raw_code": "public ByteBuffer flushAndReleaseBuffer() throws IOException {\n  _lock.lock();\n  try {\n    _flushPending=true;\n    while (_bufferUseCount != 0) {\n      _flushReady.await();\n    }\n    _buffer.flip();\n    if (_buffer.limit() != 0 && _modified) {\n      if (_backingFile == null) {\n        _backingFile=Files.createTempFile(\"tablebuffer\",\".tmp\");\n      }\n      _log.debug(\"Flushing buffer for index {} to {} ({}/{} bytes)\",_startIndex,_backingFile,_buffer.limit(),_blockSize);\n      try (ByteChannel out=Files.newByteChannel(_backingFile,WRITE)){\n        out.write(_buffer);\n      }\n     }\n else {\n      _log.debug(\"Releasing unmodified buffer for index {}\",_startIndex);\n    }\n    ByteBuffer oldBuffer=_buffer;\n    _buffer=null;\n    _loaded=false;\n    return oldBuffer;\n  }\n catch (  InterruptedException e) {\n    throw Throwables.propagate(e);\n  }\n finally {\n    _flushPending=false;\n    _flushComplete.signalAll();\n    _lock.unlock();\n  }\n}"}
{"ids": "33800", "raw_code": "public static boolean isDirectlyGettingPowered(World world,Coord4D coord){\n  for (  ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {\n    Coord4D sideCoord=coord.getFromSide(side);\n    if (sideCoord.exists(world)) {\n      if (world.isBlockProvidingPowerTo(coord.xCoord,coord.yCoord,coord.zCoord,side.ordinal()) > 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "9980", "raw_code": "public <T extends PropertyContainer>List<SearchMatch<T>> search(String query,Class<T> clazz){\n  SearchResult result=doQuery(query,clazz);\n  List<SearchMatch<T>> matches=buildSearchMatches(result);\n  @SuppressWarnings(\"unchecked\") Function<SearchMatch,T> resolver=(Function<SearchMatch,T>)(clazz.equals(Node.class) ? getNodeResolver() : getRelationshipResolver());\n  return resolveMatchItems(matches,resolver);\n}"}
{"ids": "47401", "raw_code": "private synchronized void enumerate(Hashtable<String,Object> h){\n  if (defaults != null) {\n    defaults.enumerate(h);\n  }\n  for (Enumeration<?> e=keys(); e.hasMoreElements(); ) {\n    String key=(String)e.nextElement();\n    h.put(key,get(key));\n  }\n}"}
{"ids": "65564", "raw_code": "public void updateQuantityCsv(ItemBean original,ItemBean itemToAdd,boolean add){\n  BigDecimal originalQuantity=original.getQtyCsv();\n  BigDecimal quantityToAdd=itemToAdd.getQtyCsv();\n  BigDecimal finalQuantity=null;\n  if (!add)   finalQuantity=originalQuantity.subtract(quantityToAdd);\n else   finalQuantity=originalQuantity.add(quantityToAdd);\n  original.setQtyCsv(finalQuantity);\n}"}
{"ids": "42940", "raw_code": "public static Number abs(Number a){\n  if (isFloatingPoint(a)) {\n    return Math.abs(a.doubleValue());\n  }\n else {\n    return Math.abs(a.longValue());\n  }\n}"}
{"ids": "5612", "raw_code": "private void sendResponse(String status,String mime,Properties header,InputStream data){\n  try {\n    if (status == null)     throw new Error(\"sendResponse(): Status can't be null.\");\n    OutputStream out=mySocket.getOutputStream();\n    PrintWriter pw=new PrintWriter(out);\n    pw.print(\"HTTP/1.0 \" + status + \" \\r\\n\");\n    if (mime != null)     pw.print(\"Content-Type: \" + mime + \"\\r\\n\");\n    if (header == null || header.getProperty(\"Date\") == null)     pw.print(\"Date: \" + gmtFrmt.format(new Date()) + \"\\r\\n\");\n    if (header != null) {\n      Enumeration e=header.keys();\n      while (e.hasMoreElements()) {\n        String key=(String)e.nextElement();\n        String value=header.getProperty(key);\n        pw.print(key + \": \" + value+ \"\\r\\n\");\n      }\n    }\n    pw.print(\"\\r\\n\");\n    pw.flush();\n    if (data != null) {\n      int pending=data.available();\n      byte[] buff=new byte[2048];\n      while (pending > 0) {\n        int read=data.read(buff,0,((pending > 2048) ? 2048 : pending));\n        if (read <= 0)         break;\n        out.write(buff,0,read);\n        pending-=read;\n      }\n    }\n    out.flush();\n    out.close();\n    if (data != null)     data.close();\n  }\n catch (  IOException ioe) {\n    try {\n      mySocket.close();\n    }\n catch (    Throwable t) {\n    }\n  }\n}"}
{"ids": "6278", "raw_code": "public static InputStream toInputStream(CharSequence input,Charset encoding){\n  return toInputStream(input.toString(),encoding);\n}"}
{"ids": "19479", "raw_code": "public User(String id,String name,String email){\n  this.id=id;\n  this.email=email;\n  this.name=name;\n}"}
{"ids": "6297", "raw_code": "public static void forceDeleteOnExit(File file) throws IOException {\n  if (file.isDirectory()) {\n    deleteDirectoryOnExit(file);\n  }\n else {\n    file.deleteOnExit();\n  }\n}"}
{"ids": "73122", "raw_code": "@SuppressWarnings(\"unchecked\") public Object[] toArray(){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    Object[] a=new Object[count];\n    int k=0;\n    for (Node<E> p=first; p != null; p=p.next)     a[k++]=p.item;\n    return a;\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "61692", "raw_code": "public static Asset createAssetFromBitmap(Bitmap bitmap){\n  if (bitmap != null) {\n    final ByteArrayOutputStream byteStream=new ByteArrayOutputStream();\n    bitmap.compress(Bitmap.CompressFormat.PNG,100,byteStream);\n    return Asset.createFromBytes(byteStream.toByteArray());\n  }\n  return null;\n}"}
{"ids": "14806", "raw_code": "public boolean isIPValid(Session sess,String clientIP) throws SSOException {\n  boolean check=false;\n  try {\n    InetAddress sessIPAddress=InetAddress.getByName(sess.getProperty(\"Host\"));\n    InetAddress clientIPAddress=InetAddress.getByName(clientIP);\n    if (sessIPAddress.equals(clientIPAddress)) {\n      check=true;\n    }\n  }\n catch (  Exception e) {\n    if (debug.messageEnabled()) {\n      debug.message(\"IP address check of Token Failed\",e);\n    }\n  }\n  return check;\n}"}
{"ids": "76274", "raw_code": "@SuppressWarnings(\"unchecked\") private static void handleMethodNode(GetStaticGraph staticUsageTree,ClassNode cn,MethodNode mn,int depth){\n  InsnList instructions=mn.instructions;\n  Iterator<AbstractInsnNode> iterator=instructions.iterator();\n  while (iterator.hasNext()) {\n    AbstractInsnNode insn=iterator.next();\n    if (insn instanceof MethodInsnNode) {\n      handleMethodInsnNode(staticUsageTree,cn,mn,(MethodInsnNode)insn,depth + 1);\n    }\n else     if (insn instanceof FieldInsnNode) {\n      handleFieldInsnNode(staticUsageTree,cn,mn,(FieldInsnNode)insn,depth + 1);\n    }\n  }\n}"}
{"ids": "16313", "raw_code": "public boolean handleTouch(MotionEvent event){\n  int action=event.getAction();\n  if (mRenderer != null && action == MotionEvent.ACTION_MOVE) {\n    if (oldX >= 0 || oldY >= 0) {\n      float newX=event.getX(0);\n      float newY=event.getY(0);\n      if (event.getPointerCount() > 1 && (oldX2 >= 0 || oldY2 >= 0) && mRenderer.isZoomEnabled()) {\n        float newX2=event.getX(1);\n        float newY2=event.getY(1);\n        float newDeltaX=Math.abs(newX - newX2);\n        float newDeltaY=Math.abs(newY - newY2);\n        float oldDeltaX=Math.abs(oldX - oldX2);\n        float oldDeltaY=Math.abs(oldY - oldY2);\n        float zoomRate=1;\n        float tan1=Math.abs(newY - oldY) / Math.abs(newX - oldX);\n        float tan2=Math.abs(newY2 - oldY2) / Math.abs(newX2 - oldX2);\n        if (tan1 <= 0.25 && tan2 <= 0.25) {\n          zoomRate=newDeltaX / oldDeltaX;\n          applyZoom(zoomRate,Zoom.ZOOM_AXIS_X);\n        }\n else         if (tan1 >= 3.73 && tan2 >= 3.73) {\n          zoomRate=newDeltaY / oldDeltaY;\n          applyZoom(zoomRate,Zoom.ZOOM_AXIS_Y);\n        }\n else {\n          if (Math.abs(newX - oldX) >= Math.abs(newY - oldY)) {\n            zoomRate=newDeltaX / oldDeltaX;\n          }\n else {\n            zoomRate=newDeltaY / oldDeltaY;\n          }\n          applyZoom(zoomRate,Zoom.ZOOM_AXIS_XY);\n        }\n        oldX2=newX2;\n        oldY2=newY2;\n      }\n else       if (mRenderer.isPanEnabled()) {\n        mPan.apply(oldX,oldY,newX,newY);\n        oldX2=0;\n        oldY2=0;\n      }\n      oldX=newX;\n      oldY=newY;\n      graphicalView.repaint();\n      return true;\n    }\n  }\n else   if (action == MotionEvent.ACTION_DOWN) {\n    oldX=event.getX(0);\n    oldY=event.getY(0);\n    if (mRenderer != null && mRenderer.isZoomEnabled() && zoomR.contains(oldX,oldY)) {\n      if (oldX < zoomR.left + zoomR.width() / 3) {\n        graphicalView.zoomIn();\n      }\n else       if (oldX < zoomR.left + zoomR.width() * 2 / 3) {\n        graphicalView.zoomOut();\n      }\n else {\n        graphicalView.zoomReset();\n      }\n      return true;\n    }\n  }\n else   if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_POINTER_UP) {\n    oldX=0;\n    oldY=0;\n    oldX2=0;\n    oldY2=0;\n    if (action == MotionEvent.ACTION_POINTER_UP) {\n      oldX=-1;\n      oldY=-1;\n    }\n  }\n  return !mRenderer.isClickEnabled();\n}"}
{"ids": "79800", "raw_code": "public void addParameter(NameValuePair param) throws IllegalArgumentException {\n  log.trace(\"enter PostMethod.addParameter(NameValuePair)\");\n  if (param == null) {\n    throw new IllegalArgumentException(\"NameValuePair may not be null\");\n  }\n  addParameter(param.getName(),param.getValue());\n}"}
{"ids": "749", "raw_code": "public static String readAsString(InputStream is) throws IOException {\n  StringBuffer buf=new StringBuffer();\n  byte[] b=new byte[8192];\n  int nread=-1;\n  while ((nread=is.read(b)) >= 0) {\n    String s=new String(b,0,nread);\n    buf.append(s);\n  }\n  return buf.toString();\n}"}
{"ids": "69824", "raw_code": "private void readPolicies(XmlPullParser parser) throws IOException, XmlPullParserException {\n  while (parser.next() != XmlPullParser.END_TAG) {\n    if (parser.getEventType() != XmlPullParser.START_TAG) {\n      continue;\n    }\n    String name=parser.getName();\n    if (TAG_USER_RESTRICTION.equals(name)) {\n      String userRestriction=parser.getAttributeValue(null,ATTRIBUTE_NAME);\n      if (userRestriction != null) {\n        mUserRestrictions.add(userRestriction);\n      }\n    }\n else     if (TAG_GLOBAL_SETTING.equals(name)) {\n      String setting=parser.getAttributeValue(null,ATTRIBUTE_NAME);\n      String value=parser.getAttributeValue(null,ATTRIBUTE_VALUE);\n      if (setting != null && value != null) {\n        mGlobalSettings.add(new GlobalSetting(setting,value));\n      }\n    }\n else     if (TAG_DISABLE_STATUS_BAR.equals(name)) {\n      mDisableStatusBar=Boolean.parseBoolean(parser.getAttributeValue(null,ATTRIBUTE_VALUE));\n    }\n else     if (TAG_DISABLE_KEYGUARD.equals(name)) {\n      mDisableKeyguard=Boolean.parseBoolean(parser.getAttributeValue(null,ATTRIBUTE_VALUE));\n    }\n else     if (TAG_DISABLE_CAMERA.equals(name)) {\n      mDisableCamera=Boolean.parseBoolean(parser.getAttributeValue(null,ATTRIBUTE_VALUE));\n    }\n else     if (TAG_DISABLE_SCREEN_CAPTURE.equals(name)) {\n      mDisableScreenCapture=Boolean.parseBoolean(parser.getAttributeValue(null,ATTRIBUTE_VALUE));\n    }\n    skipCurrentTag(parser);\n  }\n}"}
{"ids": "62444", "raw_code": "public boolean readHeader(RandomAccessFile raf) throws IOException {\n  StringBuffer id=new StringBuffer(4);\n  for (int i=0; i < 4; i++) {\n    int ch=raf.read();\n    if (ch < 32) {\n      String hx=Integer.toHexString(ch);\n      if (hx.length() < 2) {\n        hx=\"0\" + hx;\n      }\n      return false;\n    }\n    id.append((char)ch);\n  }\n  _chunkID=id.toString();\n  _size=AiffUtil.readUINT32(raf);\n  return true;\n}"}
{"ids": "24905", "raw_code": "private XYPlot initializePlot(){\n  jmxChart=new YIntervalSeriesImproved(\"jmx value\");\n  YIntervalSeriesCollection yintervalseriescollection=new YIntervalSeriesCollection();\n  yintervalseriescollection.addSeries(jmxChart);\n  DeviationRenderer renderer=new DeviationRenderer(true,false);\n  renderer.setBaseShapesVisible(true);\n  renderer.setSeriesStroke(0,new BasicStroke(3.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));\n  renderer.setSeriesFillPaint(0,new Color(255,200,200));\n  renderer.setSeriesOutlineStroke(0,new BasicStroke(2.0f));\n  renderer.setSeriesShape(0,new Ellipse2D.Double(-2.5,-2.5,5.0,5.0));\n  renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,DateFormat.getDateTimeInstance(),NumberFormat.getNumberInstance()));\n  NumberAxis rangeAxis=plotDataSolver.getAxis();\n  subplot=new XYPlot(yintervalseriescollection,null,rangeAxis,renderer);\n  subplot.setAxisOffset(new RectangleInsets(5.0,5.0,5.0,5.0));\n  subplot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);\n  subplot.setRangeCrosshairVisible(true);\n  return subplot;\n}"}
{"ids": "51718", "raw_code": "private boolean isFatalState(String sqlState){\n  if (sqlState == null || sqlState.length() < 2) {\n    return true;\n  }\n  for (  String FATAL_SQL_STATE_CLASS : FATAL_SQL_STATE_CLASSES) {\n    if (sqlState.startsWith(FATAL_SQL_STATE_CLASS)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "8578", "raw_code": "private void analyzeFile(File inputFile,Optional<CommonTokenStream> optTokenStream,Optional<TopLevelContext> optTree,Formatter formatter,Severity maxSeverity,ConstructLengths constructLengths,Set<Rules> enabledRules) throws CLIArgumentParserException {\n  try {\n    Printer printer=new Printer(inputFile,maxSeverity,formatter);\n    if (optTokenStream.isPresent() && optTree.isPresent()) {\n      CommonTokenStream tokenStream=optTokenStream.get();\n      TopLevelContext tree=optTree.get();\n      CommentExtractor commentExtractor=new CommentExtractor(tokenStream);\n      ViolationSuppressor disableAnalysis=new ViolationSuppressor(printer,commentExtractor.getSingleLineComments(),commentExtractor.getMultilineComments());\n      disableAnalysis.analyze();\n      List<SwiftBaseListener> listeners=createListeners(enabledRules,printer,tokenStream,constructLengths,commentExtractor);\n      walkParseTree(listeners,tree);\n      try (FileListener fileListener=new FileListener(printer,inputFile,constructLengths,enabledRules)){\n        fileListener.verify();\n      }\n       numErrors.addAndGet(printer.getNumErrorMessages());\n      numWarnings.addAndGet(printer.getNumWarningMessages());\n    }\n else {\n      printer.setShouldPrintParseErrorMessage(true);\n    }\n    printersForAllFiles.add(printer);\n  }\n catch (  IOException e) {\n    handleIOException(e);\n  }\ncatch (  CLIArgumentParserException e) {\n    handleCLIException(e);\n  }\n}"}
{"ids": "67814", "raw_code": "@SuppressWarnings(\"unchecked\") public static <ValueT>ValueT toObject(ByteBuffer bf) throws IOException, ClassNotFoundException {\n  Object obj=null;\n  InputStream is=null;\n  ObjectInputStream ois=null;\n  try {\n    is=new ByteBufferBackedInputStream(bf);\n    ois=new ObjectInputStream(is);\n    obj=ois.readObject();\n  }\n  finally {\n    if (is != null) {\n      is.close();\n    }\n    if (ois != null) {\n      ois.close();\n    }\n  }\n  return (ValueT)obj;\n}"}
{"ids": "27507", "raw_code": "static private void scanDeadlineQueue(final long nowNanos,final PriorityBlockingQueue<QueryDeadline> deadlineQueue){\n  final List<QueryDeadline> c=new ArrayList<QueryDeadline>(DEADLINE_QUEUE_SCAN_SIZE);\n  deadlineQueue.drainTo(c,DEADLINE_QUEUE_SCAN_SIZE);\n  int ndropped=0, nrunning=0;\n  for (  QueryDeadline x : c) {\n    if (x.checkDeadline(nowNanos) != null) {\n      deadlineQueue.add(x);\n      nrunning++;\n    }\n else {\n      ndropped++;\n    }\n  }\n  if (log.isInfoEnabled())   log.info(\"Scan: threadhold=\" + DEADLINE_QUEUE_SCAN_SIZE + \", ndropped=\"+ ndropped+ \", nrunning=\"+ nrunning+ \", deadlineQueueSize=\"+ deadlineQueue.size());\n}"}
{"ids": "64166", "raw_code": "public int compare(File file1,File file2){\n  return caseSensitivity.checkCompareTo(file1.getName(),file2.getName());\n}"}
{"ids": "53758", "raw_code": "@Override public String lastString(){\n  return Integer.toString(lastint);\n}"}
{"ids": "4372", "raw_code": "public boolean removeItemContent(String uid){\n  if (!users.isEmpty()) {\n    return removeContent(uid,users);\n  }\n else   if (!reports.isEmpty()) {\n    return removeContent(uid,reports);\n  }\n else {\n    return removeContent(uid,resources);\n  }\n}"}
{"ids": "6452", "raw_code": "public void close(){\n  if (dialog != null) {\n    dialog.setVisible(false);\n    dialog.dispose();\n    dialog=null;\n    pane=null;\n    myBar=null;\n  }\n}"}
{"ids": "12643", "raw_code": "public static void expandOrdinal(String rawNumberString,WordRelation wordRelation){\n  String numberString=Utilities.deleteChar(rawNumberString,',');\n  expandNumber(numberString,wordRelation);\n  Item lastItem=wordRelation.getTail();\n  if (lastItem != null) {\n    FeatureSet featureSet=lastItem.getFeatures();\n    String lastNumber=featureSet.getString(\"name\");\n    String ordinal=findMatchInArray(lastNumber,digit2num,ord2num);\n    if (ordinal == null) {\n      ordinal=findMatchInArray(lastNumber,digit2teen,ord2teen);\n    }\n    if (ordinal == null) {\n      ordinal=findMatchInArray(lastNumber,digit2enty,ord2enty);\n    }\n    if (lastNumber.equals(\"hundred\")) {\n      ordinal=\"hundredth\";\n    }\n else     if (lastNumber.equals(\"thousand\")) {\n      ordinal=\"thousandth\";\n    }\n else     if (lastNumber.equals(\"billion\")) {\n      ordinal=\"billionth\";\n    }\n    if (ordinal != null) {\n      wordRelation.setLastWord(ordinal);\n    }\n  }\n}"}
{"ids": "19267", "raw_code": "private void checkBoundedTypeParameter(Method method){\n  TypeVariable<Method> typeParameter=getTypeParameter(method);\n  assertEquals(\"T\",typeParameter.getName());\n  assertEquals(method,typeParameter.getGenericDeclaration());\n  Type[] bounds=typeParameter.getBounds();\n  assertLenghtOne(bounds);\n  Type bound=bounds[0];\n  assertEquals(BoundedWildcardsGenericMethods.class,bound);\n}"}
{"ids": "73716", "raw_code": "public void registerSensor(Sensor s,int i){\n  if ((i < 0) || (i > (inputBits[nodeType] - 1)) || (i > MAXSENSORS)) {\n    log.error(\"Unexpected sensor ordinal in registerSensor: \" + Integer.toString(i + 1));\n    return;\n  }\n  hasActiveSensors=true;\n  if (sensorArray[i] == null) {\n    sensorArray[i]=s;\n    if (lastUsedSensor < i) {\n      lastUsedSensor=i;\n    }\n  }\n else {\n    log.warn(\"multiple registration of same sensor: CS\" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERNODE) + i + 1));\n  }\n}"}
{"ids": "4350", "raw_code": "public boolean hasOrganisationUnits(){\n  List<DimensionalItemObject> dimOpts=getDimensionOptions(ORGUNIT_DIM_ID);\n  List<DimensionalItemObject> filterOpts=getFilterOptions(ORGUNIT_DIM_ID);\n  return !dimOpts.isEmpty() || !filterOpts.isEmpty();\n}"}
{"ids": "37775", "raw_code": "protected double negativeLogLikelihood(double[][] dataYs,double[][] probs){\n  double logLikelihood=0;\n  for (int i=0; i < dataYs.length; i++) {\n    for (int j=0; j < m_numClasses; j++) {\n      if (dataYs[i][j] == 1.0) {\n        logLikelihood-=Math.log(probs[i][j]);\n      }\n    }\n  }\n  return logLikelihood;\n}"}
{"ids": "73660", "raw_code": "public static boolean validSystemNameConfig(String systemName,char type,AcelaSystemConnectionMemo memo){\n  if (!validSystemNameFormat(systemName,type,memo.getSystemPrefix())) {\n    return false;\n  }\n  AcelaNode node=getNodeFromSystemName(systemName,memo);\n  if (node == null) {\n    return false;\n  }\n  int bit=getBitFromSystemName(systemName);\n  if ((type == 'T') || (type == 'L')) {\n    if ((bit < MINOUTPUTADDRESS) || (bit > MAXOUTPUTADDRESS)) {\n      return false;\n    }\n  }\n else   if (type == 'S') {\n    if ((bit < MINSENSORADDRESS) || (bit > MAXSENSORADDRESS)) {\n      return false;\n    }\n  }\n else {\n    log.error(\"Invalid type specification in validSystemNameConfig call\");\n    return false;\n  }\n  return true;\n}"}
{"ids": "74830", "raw_code": "public void readEncryptionObject(final PdfObject encyptionObj,final PdfFileReader pdfFileReader) throws PdfSecurityException {\n  stringsEncoded=false;\n  isMetaDataEncypted=true;\n  StmFObj=null;\n  StrFObj=null;\n  isAES=false;\n  if (!isInitialised) {\n    isInitialised=true;\n    SetSecurity.init();\n  }\n  if (SetSecurity.useBouncyCastle) {\n    decryptionMethods=new BouncyCastleDecryption();\n  }\n else {\n    decryptionMethods=new JCADecryption();\n  }\n  final int v=encyptionObj.getInt(PdfDictionary.V);\n  final PdfArrayIterator filters=encyptionObj.getMixedArray(PdfDictionary.Filter);\n  int firstValue=PdfDictionary.Standard;\n  if (filters != null && filters.hasMoreTokens()) {\n    firstValue=filters.getNextValueAsConstant(false);\n  }\n  if (v == 3) {\n    throw new PdfSecurityException(\"Unsupported Custom Adobe Encryption method\");\n  }\n else   if ((v > 4) && (firstValue != PdfDictionary.Standard)) {\n    throw new PdfSecurityException(\"Unsupported Encryption method\");\n  }\n  final int newLength=encyptionObj.getInt(PdfDictionary.Length) >> 3;\n  if (newLength != -1) {\n    this.keyLength=newLength;\n  }\n  rev=encyptionObj.getInt(PdfDictionary.R);\n  P=encyptionObj.getInt(PdfDictionary.P);\n  O=encyptionObj.getTextStreamValueAsByte(PdfDictionary.O);\n  U=encyptionObj.getTextStreamValueAsByte(PdfDictionary.U);\n  OE=encyptionObj.getTextStreamValueAsByte(PdfDictionary.OE);\n  UE=encyptionObj.getTextStreamValueAsByte(PdfDictionary.UE);\n  Perms=encyptionObj.getTextStreamValueAsByte(PdfDictionary.Perms);\n  if (v >= 4) {\n    isAES=true;\n    String CFkey;\n    final PdfObject CF=encyptionObj.getDictionary(PdfDictionary.CF);\n    if (v == 4) {\n      isMetaDataEncypted=encyptionObj.getBoolean(PdfDictionary.EncryptMetadata);\n    }\n    isAESIdentity=false;\n    String key=encyptionObj.getName(PdfDictionary.StrF);\n    if (key != null) {\n      isAESIdentity=key.equals(\"Identity\");\n      stringsEncoded=true;\n      final PdfKeyPairsIterator keyPairs=CF.getKeyPairsIterator();\n      while (keyPairs.hasMorePairs()) {\n        CFkey=keyPairs.getNextKeyAsString();\n        if (CFkey.equals(key)) {\n          StrFObj=PdfObjectFactory.getPDFObjectObjectFromRefOrDirect(new EncryptionObject(encyptionObj.getObjectRefAsString()),pdfFileReader,keyPairs.getNextValueAsBytes(),PdfDictionary.CF);\n        }\n        keyPairs.nextPair();\n      }\n    }\n    key=encyptionObj.getName(PdfDictionary.StmF);\n    if (key != null) {\n      isAESIdentity=key.equals(\"Identity\");\n      final PdfKeyPairsIterator keyPairs=CF.getKeyPairsIterator();\n      while (keyPairs.hasMorePairs()) {\n        CFkey=keyPairs.getNextKeyAsString();\n        if (CFkey.equals(key)) {\n          StmFObj=PdfObjectFactory.getPDFObjectObjectFromRefOrDirect(new EncryptionObject(encyptionObj.getObjectRefAsString()),pdfFileReader,keyPairs.getNextValueAsBytes(),PdfDictionary.CF);\n        }\n        keyPairs.nextPair();\n      }\n    }\n  }\n  isEncrypted=true;\n  isFileViewable=false;\n  LogWriter.writeLog(\"File has encryption settings\");\n  if (firstValue == PdfDictionary.Standard) {\n    try {\n      verifyAccess();\n    }\n catch (    final PdfSecurityException e) {\n      LogWriter.writeLog(\"File requires password \" + e);\n    }\n  }\n else   if (certificate != null) {\n    isFileViewable=true;\n    isPasswordSupplied=true;\n    extractionIsAllowed=true;\n    passwordStatus=PDFflags.VALID_OWNER_PASSWORD;\n  }\n  if (rev == 5) {\n    Perms=v5Decrypt(Perms,encryptionKey);\n    isMetaDataEncypted=Perms[8] == 'T';\n    P=(Perms[0] & 255) | ((Perms[1] & 255) << 8) | ((Perms[2] & 255) << 16)| ((Perms[2] & 255) << 24);\n  }\n}"}
{"ids": "80606", "raw_code": "public void addMember(String playerName){\n  openInvites.remove(playerName);\n  membersAndLastSeen.put(playerName,Long.valueOf(System.currentTimeMillis()));\n  if (leader == null) {\n    leader=playerName;\n  }\n  sendGroupChangeEvent();\n}"}
{"ids": "7568", "raw_code": "public BubbleXYItemLabelGenerator(){\n  this(DEFAULT_FORMAT_STRING,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());\n}"}
{"ids": "22912", "raw_code": "void addNodes(List<Node> newNodes,boolean atBeginning){\n  if (atBeginning) {\n    if ((nodes.size() > 0) && nodes.get(0) == newNodes.get(newNodes.size() - 1)) {\n      Log.i(DEBUG_TAG,\"addNodes attempt to add same node\");\n      if (newNodes.size() > 1) {\n        Log.i(DEBUG_TAG,\"retrying addNodes\");\n        newNodes.remove(newNodes.size() - 1);\n        addNodes(newNodes,atBeginning);\n      }\n      return;\n    }\n    nodes.addAll(0,newNodes);\n  }\n else {\n    if ((nodes.size() > 0) && newNodes.get(0) == nodes.get(nodes.size() - 1)) {\n      Log.i(DEBUG_TAG,\"addNodes attempt to add same node\");\n      if (newNodes.size() > 1) {\n        Log.i(DEBUG_TAG,\"retrying addNodes\");\n        newNodes.remove(0);\n        addNodes(newNodes,atBeginning);\n      }\n      return;\n    }\n    nodes.addAll(newNodes);\n  }\n}"}
{"ids": "42595", "raw_code": "public synchronized Boolean updateAVClientByStreamId(String streamId,RoomClient rcm){\n  try {\n    RoomClient rclUsual=getClientByPublicSID(rcm.getPublicSID(),false);\n    if (rclUsual != null) {\n      rclUsual.setBroadCastID(rcm.getBroadCastID());\n      rclUsual.setAvsettings(rcm.getAvsettings());\n      rclUsual.setVHeight(rcm.getVHeight());\n      rclUsual.setVWidth(rcm.getVWidth());\n      rclUsual.setVX(rcm.getVX());\n      rclUsual.setVY(rcm.getVY());\n      if (clientList.containsKey(rclUsual.getStreamid())) {\n        clientList.put(rclUsual.getStreamid(),rclUsual);\n      }\n else {\n        log.debug(\"Tried to update a non existing Client \" + rclUsual.getStreamid());\n      }\n    }\n    updateClientByStreamId(streamId,rcm);\n  }\n catch (  Exception err) {\n    log.error(\"[updateAVClientByStreamId]\",err);\n  }\n  return null;\n}"}
{"ids": "20515", "raw_code": "public void addColor(int color){\n  if (mColors == null)   mColors=new ArrayList<Integer>();\n  mColors.add(color);\n}"}
{"ids": "6054", "raw_code": "private void clampStartingPosition(){\n  final float cX=mBounds.exactCenterX();\n  final float cY=mBounds.exactCenterY();\n  final float dX=mStartingX - cX;\n  final float dY=mStartingY - cY;\n  final float r=mTargetRadius;\n  if (dX * dX + dY * dY > r * r) {\n    final double angle=Math.atan2(dY,dX);\n    mClampedStartingX=cX + (float)(Math.cos(angle) * r);\n    mClampedStartingY=cY + (float)(Math.sin(angle) * r);\n  }\n else {\n    mClampedStartingX=mStartingX;\n    mClampedStartingY=mStartingY;\n  }\n}"}
{"ids": "7338", "raw_code": "public boolean isEmpty(){\n  if (lastBatch != null) {\n    if (!lastBatch.isEmpty()) {\n      return false;\n    }\n  }\n  return currentBatch.isEmpty();\n}"}
{"ids": "28351", "raw_code": "@SuppressWarnings(\"unchecked\") public DummyData(int cols,int rows,Comparable<?> value){\n  value.getClass();\n  this.cols=cols;\n  this.rows=rows;\n  this.value=value;\n  Class<? extends Comparable<?>>[] types=new Class[cols];\n  Arrays.fill(types,value.getClass());\n  setColumnTypes(types);\n}"}
{"ids": "18315", "raw_code": "public Object clone() throws CloneNotSupportedException {\n  NodeVector clone=(NodeVector)super.clone();\n  if ((null != this.m_map) && (this.m_map == clone.m_map)) {\n    clone.m_map=new int[this.m_map.length];\n    System.arraycopy(this.m_map,0,clone.m_map,0,this.m_map.length);\n  }\n  return clone;\n}"}
{"ids": "33616", "raw_code": "public boolean matchWithPattern(String pattern){\n  if (TextUtils.isEmpty(pattern)) {\n    mCurrentPattern=\"\";\n    mUpperCasePattern=\"\";\n    mLowerCasePattern=\"\";\n  }\n  if (TextUtils.isEmpty(mDisplayName)) {\n    return false;\n  }\n  if (TextUtils.isEmpty(mUpperCaseDisplayName)) {\n    mUpperCaseDisplayName=mDisplayName.toLowerCase();\n    mLowerCaseDisplayName=mDisplayName.toUpperCase();\n  }\n  if (!pattern.equals(mCurrentPattern)) {\n    mCurrentPattern=pattern;\n    mUpperCasePattern=pattern.toUpperCase();\n    mLowerCasePattern=pattern.toLowerCase();\n  }\n  return (mUpperCaseDisplayName.indexOf(mUpperCasePattern) >= 0) || (mLowerCaseDisplayName.indexOf(mUpperCasePattern) >= 0);\n}"}
{"ids": "17529", "raw_code": "public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (obj instanceof AnnotationMember) {\n    AnnotationMember that=(AnnotationMember)obj;\n    if (name.equals(that.name) && tag == that.tag) {\n      if (tag == ARRAY) {\n        return equalArrayValue(that.value);\n      }\n else       if (tag == ERROR) {\n        return false;\n      }\n else {\n        return value.equals(that.value);\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "25479", "raw_code": "public int hleJpegDecodeYCbCr(BufferedImage bufferedImage,TPointer yCbCrBuffer,int yCbCrBufferSize,int dhtMode){\n  int width=bufferedImage.getWidth();\n  int height=bufferedImage.getHeight();\n  int sizeY=width * height;\n  int sizeCb=sizeY >> 2;\n  int addressY=yCbCrBuffer.getAddress();\n  int addressCb=addressY + sizeY;\n  int addressCr=addressCb + sizeCb;\n  if (log.isDebugEnabled()) {\n    log.debug(String.format(\"hleJpegDecodeYCbCr 0x%08X, 0x%08X, 0x%08X\",addressY,addressCb,addressCr));\n  }\n  int[] bufferCb=new int[sizeCb];\n  int[] bufferCr=new int[sizeCb];\n  IMemoryWriter imageWriterY=MemoryWriter.getMemoryWriter(addressY,sizeY,1);\n  for (int y=0; y < height; y++) {\n    int indexCb=(y >> 1) * (width >> 1);\n    for (int x=0; x < width; x+=2, indexCb++) {\n      int argb0=bufferedImage.getRGB(x,y);\n      int yCbCr0=colorARGBToYCbCr(argb0);\n      int argb1=bufferedImage.getRGB(x + 1,y);\n      int yCbCr1=colorARGBToYCbCr(argb1);\n      imageWriterY.writeNext(getY(yCbCr0));\n      imageWriterY.writeNext(getY(yCbCr1));\n      bufferCb[indexCb]+=getCb(yCbCr0);\n      bufferCb[indexCb]+=getCb(yCbCr1);\n      bufferCr[indexCb]+=getCr(yCbCr0);\n      bufferCr[indexCb]+=getCr(yCbCr1);\n    }\n  }\n  imageWriterY.flush();\n  IMemoryWriter imageWriterCb=MemoryWriter.getMemoryWriter(addressCb,sizeCb,1);\n  IMemoryWriter imageWriterCr=MemoryWriter.getMemoryWriter(addressCr,sizeCb,1);\n  for (int i=0; i < sizeCb; i++) {\n    imageWriterCb.writeNext(bufferCb[i] >> 2);\n    imageWriterCr.writeNext(bufferCr[i] >> 2);\n  }\n  imageWriterCb.flush();\n  imageWriterCr.flush();\n  return getWidthHeight(width,height);\n}"}
{"ids": "7941", "raw_code": "public static Range iterateZBounds(XYZDataset dataset,boolean includeInterval){\n  double minimum=Double.POSITIVE_INFINITY;\n  double maximum=Double.NEGATIVE_INFINITY;\n  int seriesCount=dataset.getSeriesCount();\n  for (int series=0; series < seriesCount; series++) {\n    int itemCount=dataset.getItemCount(series);\n    for (int item=0; item < itemCount; item++) {\n      double value=dataset.getZValue(series,item);\n      if (!Double.isNaN(value)) {\n        minimum=Math.min(minimum,value);\n        maximum=Math.max(maximum,value);\n      }\n    }\n  }\n  if (minimum == Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}"}
{"ids": "41952", "raw_code": "public void removeViewFromFadeList(View view){\n  if (mFadeViewList != null && view != null) {\n    mFadeViewList.remove(view);\n  }\n}"}
{"ids": "43005", "raw_code": "void addIndifferentAlgorithm(String algorithm){\n  indifferentAlgorithms.add(algorithm);\n}"}
{"ids": "43871", "raw_code": "public UnionIterator(Iterable<? extends E>... args){\n  this(Arrays.asList(args));\n}"}
{"ids": "61683", "raw_code": "public static String mangleNativeMethod(String owner,String name,String desc){\n  StringBuilder sb=new StringBuilder();\n  sb.append(\"Java_\");\n  sb.append(mangleNativeString(owner));\n  sb.append(\"_\");\n  sb.append(mangleNativeString(name));\n  if (desc != null) {\n    sb.append(\"__\");\n    sb.append(mangleNativeString(desc.substring(1,desc.lastIndexOf(')'))));\n  }\n  return sb.toString();\n}"}
{"ids": "48776", "raw_code": "public String readLine() throws IOException {\n  boolean gotCR=false, gotLF=false;\n  pos=0;\n  lineBuf=new StringBuffer();\n  while (!gotLF) {\n    int c=is.read();\n    if (c == -1) {\n      return null;\n    }\n    if (gotCR) {\n      if (c == LF) {\n        gotLF=true;\n      }\n else {\n        gotCR=false;\n        consume(CR);\n        consume(c);\n      }\n    }\n else {\n      if (c == CR) {\n        gotCR=true;\n      }\n else {\n        consume(c);\n      }\n    }\n  }\n  lineBuf.append(buf,0,pos);\n  return new String(lineBuf);\n}"}
{"ids": "32600", "raw_code": "public LobbyClient login(){\n  if (!m_serverProperties.isServerAvailable()) {\n    JOptionPane.showMessageDialog(m_parent,m_serverProperties.serverErrorMessage,\"Could not connect to server\",JOptionPane.ERROR_MESSAGE);\n    return null;\n  }\n  if (m_serverProperties.port == -1) {\n    if (ClientFileSystemHelper.areWeOldExtraJar()) {\n      JOptionPane.showMessageDialog(m_parent,\"<html>Could not find lobby server for this version of TripleA, <br>Please make sure you are using the latest version: \" + UrlConstants.LATEST_GAME_DOWNLOAD_WEBSITE + \"<br /><br />This is because you are using an old engine that is kept for backwards compatibility. \"+ \"<br /><b>In order to load your Old savegames in the New lobby, you must First join the lobby with the latest engine, Then host a game, Then load the old savegame!</b></html>\",\"Could not connect to server\",JOptionPane.ERROR_MESSAGE);\n    }\n else {\n      JOptionPane.showMessageDialog(m_parent,\"<html>Could not find lobby server for this version of TripleA, <br>Please make sure you are using the latest version: \" + UrlConstants.LATEST_GAME_DOWNLOAD_WEBSITE + \"</html>\",\"Could not connect to server\",JOptionPane.ERROR_MESSAGE);\n    }\n    return null;\n  }\n  return loginToServer();\n}"}
{"ids": "62", "raw_code": "protected Node popNode(Stack<Node> stack,Class<? extends Node> cls,String uri){\n  Node top=stack.isEmpty() ? null : stack.peek();\n  if (top != null) {\n    if (nodeMatches(top,cls,uri)) {\n      Node node=stack.pop();\n      poppedNodes.push(node);\n      return node;\n    }\n else {\n      for (int i=stack.size() - 2; i >= 0; i--) {\n        if (nodeMatches(stack.get(i),cls,uri)) {\n          Node node=stack.remove(i);\n          poppedNodes.push(node);\n          return node;\n        }\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "60949", "raw_code": "static String pathToCookiePath(String path){\n  if (path == null) {\n    return \"/\";\n  }\n  int lastSlash=path.lastIndexOf('/');\n  return path.substring(0,lastSlash + 1);\n}"}
{"ids": "53468", "raw_code": "public static double[][] computeWeightMatrix(int bpp){\n  final int dim=bpp * bpp * bpp;\n  final double[][] m=new double[dim][dim];\n  final double max=3. * (bpp - 1.);\n  for (int x=0; x < dim; x++) {\n    final int rx=(x / bpp) / bpp;\n    final int gx=(x / bpp) % bpp;\n    final int bx=x % bpp;\n    for (int y=x; y < dim; y++) {\n      final int ry=(y / bpp) / bpp;\n      final int gy=(y / bpp) % bpp;\n      final int by=y % bpp;\n      final double dr=Math.abs(rx - ry);\n      final double dg=Math.abs(gx - gy);\n      final double db=Math.abs(bx - by);\n      final double val=1 - (dr + dg + db) / max;\n      m[x][y]=m[y][x]=val;\n    }\n  }\n  return m;\n}"}
{"ids": "42863", "raw_code": "private static boolean isGnome(){\n  return System.getenv(\"GNOME_DESKTOP_SESSION_ID\") != null;\n}"}
{"ids": "46542", "raw_code": "protected SizeRequirements calculateMajorAxisRequirements(int axis,SizeRequirements r){\n  SizeRequirements req=super.calculateMajorAxisRequirements(axis,r);\n  req.maximum=Integer.MAX_VALUE;\n  return req;\n}"}
{"ids": "38259", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(4);\n  newVector.addElement(new Option(\"\\tSets if binary attributes are to be coded as nominal ones.\",\"N\",0,\"-N\"));\n  newVector.addElement(new Option(\"\\tFor each nominal value a new attribute is created, \\n\" + \"\\tnot only if there are more than 2 values.\",\"A\",0,\"-A\"));\n  newVector.addElement(new Option(\"\\tSpecifies list of columns to act on. First and last are \\n\" + \"\\tvalid indexes.\\n\" + \"\\t(default: first-last)\",\"R\",1,\"-R <col1,col2-col4,...>\"));\n  newVector.addElement(new Option(\"\\tInvert matching sense of column indexes.\",\"V\",0,\"-V\"));\n  return newVector.elements();\n}"}
{"ids": "58048", "raw_code": "public void addNodesInDocOrder(DTMIterator iterator,XPathContext support){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));\n  int node;\n  while (DTM.NULL != (node=iterator.nextNode())) {\n    addNodeInDocOrder(node,support);\n  }\n}"}
{"ids": "17514", "raw_code": "public static byte[] readFully(InputStream in) throws IOException {\n  try {\n    return readFullyNoClose(in);\n  }\n  finally {\n    in.close();\n  }\n}"}
{"ids": "54166", "raw_code": "public void endSubreport(String subreport){\n  if (subreport.isEmpty()) {\n    LOG.error(String.format(\"Tried to end non-existing report \\\"%s\\\"\",subreport));\n    return;\n  }\n  String topSubreport=subreports.peek();\n  if (topSubreport.equals(subreport)) {\n    subreports.pop();\n    addLogEntry(new SubreportEndEntry(subreport));\n    return;\n  }\n  LOG.error(String.format(\"Tried to end non-existing report \\\"%s\\\"\",subreport));\n}"}
{"ids": "39224", "raw_code": "public static double dnormLog(double x,double mean,double sd){\n  if (sd <= 0.0)   throw new IllegalArgumentException(\"standard deviation <= 0.0\");\n  return -Math.log(sd) + dnormLog((x - mean) / sd);\n}"}
{"ids": "85371", "raw_code": "public static void delete(File f){\n  delete_(f,false);\n}"}
{"ids": "58288", "raw_code": "public BufferedHeader(final CharArrayBuffer buffer) throws ParseException {\n  super();\n  if (buffer == null) {\n    throw new IllegalArgumentException(\"Char array buffer may not be null\");\n  }\n  int colon=buffer.indexOf(':');\n  if (colon == -1) {\n    throw new ParseException(\"Invalid header: \" + buffer.toString());\n  }\n  String s=buffer.substringTrimmed(0,colon);\n  if (s.length() == 0) {\n    throw new ParseException(\"Invalid header: \" + buffer.toString());\n  }\n  this.buffer=buffer;\n  this.name=s;\n  this.valuePos=colon + 1;\n}"}
{"ids": "59717", "raw_code": "public boolean extendsEntity(Class<?> entityDefinition){\n  return entityDefinition.getAnnotation(ExtendsEntity.class) != null;\n}"}
{"ids": "17494", "raw_code": "public void parse(InputSource input) throws IOException, SAXException {\n  if (parsing) {\n    throw new SAXException(\"Parser is already in use\");\n  }\n  setupParser();\n  parsing=true;\n  try {\n    parser.parse(input);\n  }\n  finally {\n    parsing=false;\n  }\n  parsing=false;\n}"}
{"ids": "31885", "raw_code": "private void release0(long ptr,long size,AtomicLong cnt){\n  if (ptr != 0) {\n    if (SAFE_RELEASE)     fill(ptr,size,(byte)0xAB);\n    GridUnsafe.freeMemory(ptr);\n    cnt.addAndGet(-size);\n    if (lsnr != null)     lsnr.onEvent(RELEASE);\n  }\n}"}
{"ids": "21331", "raw_code": "public void addServices(List<ServiceDefinition> services) throws Exception {\n  ensurePathExists();\n  Set<String> remainingDescriptors=new HashSet<>(dataManager.getChildren(ZK_SERVICE_DEFINITION_PATH));\n  for (  ServiceDefinition service : services) {\n    LOG.debug(String.format(\"Adding Service %s into ZK\",service.serviceId));\n    String path=getServiceDefinitionPath(service.serviceId);\n    try {\n      Stat before=dataManager.checkExists(path);\n      dataManager.putData(path,service);\n      Stat after=dataManager.checkExists(path);\n      nodeUpdated(path,before,after);\n      remainingDescriptors.remove(service.serviceId);\n    }\n catch (    Exception e) {\n      LOG.error(String.format(\"Failed to add Service %s into ZK, path: %s\",service.serviceId,path),e);\n      throw e;\n    }\n  }\n  for (  String descriptorName : remainingDescriptors) {\n    LOG.info(String.format(\"Removing old Service %s from ZK\",descriptorName));\n    dataManager.removeNode(ZK_SERVICE_DEFINITION_PATH + \"/\" + descriptorName);\n  }\n}"}
{"ids": "75736", "raw_code": "protected void readProps(){\n  int count;\n  Properties props;\n  int i;\n  String itemStr;\n  T item;\n  m_IgnoreChanges=true;\n  props=loadProps();\n  count=Integer.parseInt(props.getProperty(expand(getCountKey()),\"0\"));\n  m_RecentItems.clear();\n  for (i=count - 1; i >= 0; i--) {\n    itemStr=props.getProperty(getItemPrefix() + i,\"\");\n    if (itemStr.length() > 0) {\n      item=fromString(itemStr);\n      if (check(item))       addRecentItem(item);\n    }\n  }\n  m_IgnoreChanges=false;\n}"}
{"ids": "49605", "raw_code": "public FormIndex stepIndexOut(FormIndex index){\n  if (index.isTerminal()) {\n    return null;\n  }\n else {\n    return new FormIndex(stepIndexOut(index.getNextLevel()),index);\n  }\n}"}
{"ids": "37976", "raw_code": "protected double kernelHelperLP(int n,char[] s,int endIndexS,char[] t,int endIndexT,int remainingMatchLength){\n  if (n == 0) {\n    return getReturnValue(n);\n  }\n  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {\n    ;\n    return getReturnValue(n);\n  }\n  if (remainingMatchLength < 2 * n) {\n    return getReturnValue(n);\n  }\n  int adr=0;\n  if (m_useRecursionCache) {\n    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT + m_multZZ * remainingMatchLength;\n    if (cachekh2K[adr % maxCache] == adr + 1) {\n      return cachekh2[adr % maxCache];\n    }\n  }\n  int rml=0;\n  double result=0;\n  for (int iS=(endIndexS - remainingMatchLength); iS <= endIndexS; iS++) {\n    result*=m_lambda;\n    result+=kernelHelper2LP(n,s,iS,t,endIndexT,rml++);\n  }\n  if (m_useRecursionCache && endIndexS >= 0 && endIndexT >= 0 && n >= 0) {\n    cachekhK[adr % maxCache]=adr + 1;\n    cachekh[adr % maxCache]=result;\n  }\n  return result;\n}"}
{"ids": "50501", "raw_code": "@Override protected synchronized void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  int width=200;\n  if (MeasureSpec.UNSPECIFIED != MeasureSpec.getMode(widthMeasureSpec)) {\n    width=MeasureSpec.getSize(widthMeasureSpec);\n  }\n  int height=thumbImage.getHeight();\n  if (MeasureSpec.UNSPECIFIED != MeasureSpec.getMode(heightMeasureSpec)) {\n    height=Math.min(height,MeasureSpec.getSize(heightMeasureSpec));\n  }\n  setMeasuredDimension(width,height);\n}"}
{"ids": "9687", "raw_code": "public void start(){\n  calculatePositionArray();\n  setPreferredSize(calculatePreferredSize());\n  offset=getWidth();\n  timer=new Timer(interval,this);\n  timer.start();\n}"}
{"ids": "22183", "raw_code": "public static void writePlainFile(String filePath,byte[] content) throws IOException {\n  FileOutputStream fileOuputStream=new FileOutputStream(filePath);\n  fileOuputStream.write(content);\n  fileOuputStream.close();\n}"}
{"ids": "719", "raw_code": "public void transform(AffineTransform at){\n  clip[2]=clip[0];\n  clip[3]=clip[7];\n  clip[4]=clip[6];\n  clip[5]=clip[1];\n  at.transform(clip,0,clip,0,4);\n  double xmin=clip[0], ymin=clip[1];\n  double xmax=clip[6], ymax=clip[7];\n  for (int i=0; i < 7; i+=2) {\n    if (clip[i] < xmin)     xmin=clip[i];\n    if (clip[i] > xmax)     xmax=clip[i];\n    if (clip[i + 1] < ymin)     ymin=clip[i + 1];\n    if (clip[i + 1] > ymax)     ymax=clip[i + 1];\n  }\n  clip[0]=xmin;\n  clip[1]=ymin;\n  clip[6]=xmax;\n  clip[7]=ymax;\n}"}
{"ids": "73958", "raw_code": "@SuppressWarnings(\"deprecation\") public boolean isPortableFilename(String filename){\n  return (filename.startsWith(PROGRAM) || filename.startsWith(HOME) || filename.startsWith(PREFERENCES)|| filename.startsWith(SCRIPTS)|| filename.startsWith(PROFILE)|| filename.startsWith(SETTINGS)|| filename.startsWith(FILE)|| filename.startsWith(RESOURCE));\n}"}
{"ids": "43478", "raw_code": "void configureBasicAuth(HttpServerRequest serverRequest,HttpClientRequest httpClientRequest){\n  final String authorization=serverRequest.getParam(\"authorization\");\n  if (authorization != null) {\n    httpClientRequest.putHeader(HttpHeaders.AUTHORIZATION,authorization);\n  }\n}"}
{"ids": "17592", "raw_code": "public void rejectedExecution(Runnable r,ThreadPoolExecutor e){\n  if (!e.isShutdown()) {\n    r.run();\n  }\n}"}
{"ids": "74210", "raw_code": "public boolean nodeChange(CatalogTreeNode node,String name){\n  CatalogTreeNode cNode=getCorrespondingNode(node);\n  cNode.setLeaves(node.getLeaves());\n  AbstractCatalogTree tree=(AbstractCatalogTree)getCorespondingModel(node);\n  cNode.setUserObject(name);\n  node.setUserObject(name);\n  tree.nodeChanged(cNode);\n  _model.nodeChanged(node);\n  updatePanel();\n  ImageIndexEditor.indexChanged(true);\n  updatePanel();\n  return true;\n}"}
{"ids": "69497", "raw_code": "public static Enumeration all(){\n  return _all.elements();\n}"}
{"ids": "67938", "raw_code": "public boolean waitUntilEmpty(long timeout) throws InterruptedException {\n  if (!notifyLock.tryLock(timeout,TimeUnit.MILLISECONDS)) {\n    return false;\n  }\n  try {\n    return pending.isEmpty() || notifyCondition.await(timeout,TimeUnit.MILLISECONDS);\n  }\n  finally {\n    notifyLock.unlock();\n  }\n}"}
{"ids": "29060", "raw_code": "public static Set<JavaClassAndMethod> resolveMethodCallTargets(ReferenceType receiverType,InvokeInstruction invokeInstruction,ConstantPoolGen cpg) throws ClassNotFoundException {\n  return resolveMethodCallTargets(receiverType,invokeInstruction,cpg,false);\n}"}
{"ids": "68839", "raw_code": "private String safe(String src){\n  StringBuffer sb=new StringBuffer();\n  for (int i=0; i < src.length(); i++) {\n    char c=src.charAt(i);\n    if (c >= 32 && c < 128) {\n      sb.append(c);\n    }\n else {\n      sb.append(\"<\" + (int)c + \">\");\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "45917", "raw_code": "public Algorithm(Element el){\n  requiredKey=el.getAttribute(\"RequiredKey\");\n  jceName=el.getAttribute(\"JCEName\");\n  algorithmClass=el.getAttribute(\"AlgorithmClass\");\n  if (el.hasAttribute(\"KeyLength\")) {\n    keyLength=Integer.parseInt(el.getAttribute(\"KeyLength\"));\n  }\n else {\n    keyLength=0;\n  }\n}"}
{"ids": "33007", "raw_code": "private Run consumeRun(int offset){\n  char ch=fText.charAt(offset);\n  int length=fText.length();\n  Run run=getRun(ch);\n  while (run.consume(ch) && offset < length - 1) {\n    offset++;\n    ch=fText.charAt(offset);\n  }\n  return run;\n}"}
{"ids": "37702", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(7);\n  newVector.addElement(new Option(\"\\tPopulation size\",\"L\",1,\"-L <integer>\"));\n  newVector.addElement(new Option(\"\\tDescendant population size\",\"A\",1,\"-A <integer>\"));\n  newVector.addElement(new Option(\"\\tNumber of runs\",\"U\",1,\"-U <integer>\"));\n  newVector.addElement(new Option(\"\\tUse mutation.\\n\\t(default true)\",\"M\",0,\"-M\"));\n  newVector.addElement(new Option(\"\\tUse cross-over.\\n\\t(default true)\",\"C\",0,\"-C\"));\n  newVector.addElement(new Option(\"\\tUse tournament selection (true) or maximum subpopulatin (false).\\n\\t(default false)\",\"O\",0,\"-O\"));\n  newVector.addElement(new Option(\"\\tRandom number seed\",\"R\",1,\"-R <seed>\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "81560", "raw_code": "public static String formatForUI(Calendar today,Calendar date){\n  if (today.get(Calendar.YEAR) == date.get(Calendar.YEAR)) {\n    if (today.get(Calendar.DAY_OF_YEAR) == date.get(Calendar.DAY_OF_YEAR)) {\n      return \"Today\";\n    }\n    return currentYearDateFormat(date.getTimeInMillis());\n  }\n else {\n    return format(date.getTimeInMillis());\n  }\n}"}
{"ids": "47678", "raw_code": "public OutputStreamWriter(OutputStream out,CharsetEncoder enc){\n  super(out);\n  if (enc == null)   throw new NullPointerException(\"charset encoder\");\n  se=StreamEncoder.forOutputStreamWriter(out,this,enc);\n}"}
{"ids": "63529", "raw_code": "public synchronized void free(long pos,int length){\n  int start=getBlock(pos);\n  int blocks=getBlockCount(length);\n  BlockRange x=new BlockRange(start,blocks);\n  BlockRange next=freeSpace.ceiling(x);\n  if (next == null) {\n    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,\"Free space sentinel is missing\");\n  }\n  BlockRange prev=freeSpace.lower(x);\n  if (prev != null) {\n    if (prev.start + prev.blocks == start) {\n      prev.blocks+=blocks;\n      if (prev.start + prev.blocks == next.start) {\n        prev.blocks+=next.blocks;\n        freeSpace.remove(next);\n      }\n      return;\n    }\n  }\n  if (start + blocks == next.start) {\n    next.start-=blocks;\n    next.blocks+=blocks;\n    return;\n  }\n  freeSpace.add(x);\n}"}
{"ids": "35563", "raw_code": "public URI csrfToken(){\n  URIBuilder builder=apiBuilder();\n  builder.setParameter(\"action\",\"query\");\n  builder.setParameter(\"meta\",\"tokens\");\n  builder.setParameter(\"continue\",\"\");\n  return build(builder);\n}"}
{"ids": "45126", "raw_code": "private static char[] zzUnpackCMap(String packed){\n  char[] map=new char[0x10000];\n  int i=0;\n  int j=0;\n  while (i < 184) {\n    int count=packed.charAt(i++);\n    char value=packed.charAt(i++);\n    do     map[j++]=value;\n while (--count > 0);\n  }\n  return map;\n}"}
{"ids": "44815", "raw_code": "public DistributedLogMultiStreamWriter build(){\n  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),\"No streams provided\");\n  Preconditions.checkNotNull(_client,\"No distributedlog client provided\");\n  Preconditions.checkNotNull(_codec,\"No compression codec provided\");\n  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,\"Invalid speculative timeout settings\");\n  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMs,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);\n}"}
{"ids": "85102", "raw_code": "private void writeChars(int number,char c) throws IOException {\n  for (; number > 0; number--) {\n    writer.write(c);\n  }\n}"}
{"ids": "12374", "raw_code": "@Override public void error(String msg,Throwable t){\n  if (logger.isLoggable(Level.SEVERE)) {\n    log(SELF,Level.SEVERE,msg,t);\n  }\n}"}
{"ids": "28671", "raw_code": "public int exit_signal(){\n  return Integer.parseInt(fields[37]);\n}"}
{"ids": "64508", "raw_code": "public Command(){\n  msgQueue=new LinkedList<Message>();\n  msgQueue.clear();\n}"}
{"ids": "44195", "raw_code": "public synchronized int indexOf(V item){\n  return items.indexOf(item);\n}"}
{"ids": "10617", "raw_code": "protected void createNode(DefaultMutableTreeNode top,String title,String info,String content,int lineCount){\n  DefaultMutableTreeNode threadInfo=null;\n  threadInfo=new DefaultMutableTreeNode(new ThreadInfo(title,info,content,lineCount,getThreadTokens(title)));\n  top.add(threadInfo);\n}"}
{"ids": "2368", "raw_code": "public Peer clone(){\n  Peer clone=new Peer(network.clone(),address);\n  return clone;\n}"}
{"ids": "21697", "raw_code": "public static String generateNativeGuid(String deviceType,String serialNumber,String fileShareNativeId){\n  return String.format(\"%s+%s+\" + FILESYSTEM + \"+%s\",_deviceTypeMap.get(deviceType),serialNumber,fileShareNativeId);\n}"}
{"ids": "84458", "raw_code": "public StrBuilder ensureCapacity(final int capacity){\n  if (capacity > buffer.length) {\n    final char[] old=buffer;\n    buffer=new char[capacity * 2];\n    System.arraycopy(old,0,buffer,0,size);\n  }\n  return this;\n}"}
{"ids": "29218", "raw_code": "private void onStartTrackingTouch(){\n  mIsDragging=true;\n}"}
{"ids": "8100", "raw_code": "private static void createSuperForwarder(ClassNode targetNode,MethodNode forwarder,final Map<String,ClassNode> genericsSpec){\n  List<ClassNode> interfaces=new ArrayList<ClassNode>(Traits.collectAllInterfacesReverseOrder(targetNode,new LinkedHashSet<ClassNode>()));\n  String name=forwarder.getName();\n  Parameter[] forwarderParameters=forwarder.getParameters();\n  LinkedHashSet<ClassNode> traits=new LinkedHashSet<ClassNode>();\n  List<MethodNode> superForwarders=new LinkedList<MethodNode>();\n  for (  ClassNode node : interfaces) {\n    if (Traits.isTrait(node)) {\n      MethodNode method=node.getDeclaredMethod(name,forwarderParameters);\n      if (method != null) {\n        traits.add(node);\n        superForwarders.add(method);\n      }\n    }\n  }\n  for (  MethodNode superForwarder : superForwarders) {\n    doCreateSuperForwarder(targetNode,superForwarder,traits.toArray(new ClassNode[traits.size()]),genericsSpec);\n  }\n}"}
{"ids": "22055", "raw_code": "public boolean isVirtualPoolAccessible(VirtualPool resource){\n  return _permissionsHelper.tenantHasUsageACL(URI.create(_user.getTenantId()),resource);\n}"}
{"ids": "32721", "raw_code": "private static boolean intersectsOneOf(final Rectangle2D r,final Collection<? extends Shape> shapes){\n  if (shapes.isEmpty()) {\n    return false;\n  }\n  for (  final Shape item : shapes) {\n    if (item.intersects(r)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "44288", "raw_code": "private void expectedByte(int position,int count) throws UTFDataFormatException {\n  throw new UTFDataFormatException(Localizer.getMessage(\"jsp.error.xml.expectedByte\",Integer.toString(position),Integer.toString(count)));\n}"}
{"ids": "22089", "raw_code": "private List<String> checkConfigList(Configuration config,String name){\n  String peerIPs=config.getConfig(name);\n  ArrayList<String> peers=new ArrayList<String>();\n  if (peerIPs != null) {\n    for (    String ip : StringUtils.split(peerIPs,\",\")) {\n      peers.add(ip);\n    }\n  }\n  return peers;\n}"}
{"ids": "17753", "raw_code": "public final ByteBuffer encode(CharBuffer in) throws CharacterCodingException {\n  int length=(int)(in.remaining() * averageBytesPerChar);\n  ByteBuffer out=ByteBuffer.allocate(length);\n  reset();\n  while (state != FLUSHED) {\n    CoderResult result=encode(in,out,true);\n    if (result == CoderResult.OVERFLOW) {\n      out=allocateMore(out);\n      continue;\n    }\n else {\n      checkCoderResult(result);\n    }\n    result=flush(out);\n    if (result == CoderResult.OVERFLOW) {\n      out=allocateMore(out);\n    }\n else {\n      checkCoderResult(result);\n    }\n  }\n  out.flip();\n  return out;\n}"}
{"ids": "15751", "raw_code": "private void loadExternal(){\n  Properties properties=new Properties();\n  try {\n    properties.loadFromXML(new FileInputStream(PROPERTIES_PATH));\n    for (    String key : properties.stringPropertyNames()) {\n      externalSupport.put(key,properties.getProperty(key));\n    }\n  }\n catch (  IOException ignore) {\n  }\n}"}
{"ids": "76334", "raw_code": "public static URI parseURI(String nuri,URI baseuri) throws URISyntaxException {\n  int colonLocation=nuri.indexOf(':');\n  int fragmentLocation=getFragmentLocation(nuri);\n  if (colonLocation == -1 || colonLocation > fragmentLocation) {\n    if (baseuri == null)     throw new URISyntaxException(\"No ':' in \\\"\" + nuri + \"\\\" and no base URI given,\"+ \" so no relative URIs allowed\",nuri);\n  }\n  String protocol=nuri.substring(0,colonLocation);\n  if (protocol.equals(\"urn\")) {\n    return parseURN(nuri,colonLocation,fragmentLocation);\n  }\n else   if (protocol.equals(\"http\")) {\n    return new URI(nuri);\n  }\n else   if (protocol.equals(\"file\")) {\n    return new URI(nuri);\n  }\n else   if (protocol.equals(\"res\")) {\n    return new URI(nuri);\n  }\n else {\n    return parseGeneralURI(nuri,colonLocation,fragmentLocation);\n  }\n}"}
{"ids": "38541", "raw_code": "protected void updateUs(){\n  try {\n    setText(m_Editor.getAsText());\n  }\n catch (  IllegalArgumentException ex) {\n  }\n}"}
{"ids": "71287", "raw_code": "public File makeDirty() throws IOException {\n  File f=File.createTempFile(\"dirty\",\".tmp\",repositoryLocation.getParentFile());\n  FileWriter fw=new FileWriter(f);\n  fw.write(\"\" + System.currentTimeMillis());\n  fw.flush();\n  fw.close();\n  return f;\n}"}
{"ids": "48729", "raw_code": "private static boolean isASCIISuperset(String encoding) throws Exception {\n  String chkS=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz-_.!~*'();/?:@&=+$,\";\n  byte[] chkB={48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,45,95,46,33,126,42,39,40,41,59,47,63,58,64,38,61,43,36,44};\n  byte[] b=chkS.getBytes(encoding);\n  return Arrays.equals(b,chkB);\n}"}
{"ids": "65587", "raw_code": "public static BigDecimal allocated(int p_C_Payment_ID,int p_C_Currency_ID) throws SQLException {\n  BigDecimal PayAmt=null;\n  int C_Charge_ID=0;\n  String sql=\"SELECT PayAmt, C_Charge_ID \" + \"FROM C_Payment_v \" + \"WHERE C_Payment_ID=?\";\n  PreparedStatement pstmt=Adempiere.prepareStatement(sql);\n  pstmt.setInt(1,p_C_Payment_ID);\n  ResultSet rs=pstmt.executeQuery();\n  if (rs.next()) {\n    PayAmt=rs.getBigDecimal(1);\n    C_Charge_ID=rs.getInt(2);\n  }\n  rs.close();\n  pstmt.close();\n  if (C_Charge_ID > 0)   return PayAmt;\n  int C_ConversionType_ID=0;\n  BigDecimal allocatedAmt=getAllocatedAmt(p_C_Payment_ID,p_C_Currency_ID,C_ConversionType_ID);\n  return Currency.round(allocatedAmt,p_C_Currency_ID,null);\n}"}
{"ids": "72814", "raw_code": "public static ByteBuffer processOutboundPackage(ByteBuffer roData,int exchangeId,boolean connectionOk){\n  roData.rewind();\n  if (BuildConfig.DEBUG) {\n    XposedBridge.log(\"Processing outbound package of size \" + Integer.toString(roData.remaining()));\n  }\n  try {\nsynchronized (sync) {\n    }\n  }\n catch (  Throwable e) {\n    XposedBridge.log(e);\n  }\n  return null;\n}"}
{"ids": "60546", "raw_code": "@NotNull private static TextRange processSpaces(@NotNull Helper helper,@NotNull TextRange range,int tabWidth){\n  CharSequence indent=helper.getCurrentLineIndent();\n  int start=Math.max(0,range.getStartOffset() - helper.getCurrentLineStartOffset());\n  int end=Math.min(indent.length(),range.getEndOffset() - helper.getCurrentLineStartOffset());\n  int tabsNumber=0;\n  int indentOffset=end;\n  for (int i=start; i < end; i++) {\n    char c=indent.charAt(i);\n    if (c == '\\t') {\n      tabsNumber++;\n    }\n else     if (c != ' ') {\n      indentOffset=i;\n      break;\n    }\n  }\n  if (tabsNumber > 0) {\n    helper.replace(start,indentOffset,StringUtil.repeat(\" \",indentOffset - start - tabsNumber + tabsNumber * tabWidth));\n    return TextRange.create(range.getStartOffset(),range.getEndOffset() - tabsNumber + tabsNumber * tabWidth);\n  }\n else {\n    return range;\n  }\n}"}
{"ids": "29981", "raw_code": "public void removeAlarm(final Alarm ALARM){\n  if (alarms.contains(ALARM))   alarms.remove(ALARM);\n}"}
{"ids": "82440", "raw_code": "public int read() throws java.io.IOException {\nsynchronized (lock) {\n    char charArray[]=new char[1];\n    if (read(charArray,0,1) != -1) {\n      return charArray[0];\n    }\n    return -1;\n  }\n}"}
{"ids": "63333", "raw_code": "protected void checkParameters(){\n  if (parameters != null) {\n    for (int i=0, size=parameters.size(); i < size; i++) {\n      Parameter param=parameters.get(i);\n      param.checkSet();\n    }\n  }\n}"}
{"ids": "24315", "raw_code": "private static Properties createProperties1(String conflation){\n  Properties props=new Properties();\n  props.setProperty(DELTA_PROPAGATION,\"false\");\n  props.setProperty(MCAST_PORT,\"0\");\n  props.setProperty(LOCATORS,\"\");\n  props.setProperty(CONFLATE_EVENTS,conflation);\n  return props;\n}"}
{"ids": "26795", "raw_code": "public static void CF3(double[] x,double[] f,double[] c,int nx){\n  int count1=0;\n  int count2=0;\n  double sum1=0.0;\n  double sum2=0.0;\n  double prod1=1.0;\n  double prod2=1.0;\n  double yj;\n  double pj;\n  double N=2.0;\n  double a=1.0;\n  for (int j=2; j <= nx; j++) {\n    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);\n    pj=Math.cos(20.0 * yj * PI / Math.sqrt(j + 0.0));\n    if (j % 2 == 0) {\n      sum2+=yj * yj;\n      prod2*=pj;\n      count2++;\n    }\n else {\n      sum1+=yj * yj;\n      prod1*=pj;\n      count1++;\n    }\n  }\n  f[0]=x[0] + 2.0 * (4.0 * sum1 - 2.0 * prod1 + 2.0) / (double)count1;\n  f[1]=1.0 - x[0] * x[0] + 2.0 * (4.0 * sum2 - 2.0 * prod2 + 2.0) / (double)count2;\n  c[0]=f[1] + f[0] * f[0] - a * Math.sin(N * PI * (f[0] * f[0] - f[1] + 1.0)) - 1.0;\n}"}
{"ids": "63200", "raw_code": "public static void closeSilently(ResultSet rs){\n  if (rs != null) {\n    try {\n      rs.close();\n    }\n catch (    SQLException e) {\n    }\n  }\n}"}
{"ids": "23996", "raw_code": "public static void execute(PoolImpl pool,Function function,Object args,MemberMappedArgument memberMappedArg,boolean allServers,byte hasResult,boolean isFnSerializationReqd,String[] groups){\n  List servers=null;\n  AbstractOp op=new ExecuteFunctionNoAckOpImpl(function,args,memberMappedArg,hasResult,isFnSerializationReqd,groups,allServers);\n  try {\n    if (allServers && groups.length == 0) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:\" + op.getMessage() + \" to all servers using pool: \"+ pool);\n      }\n      servers=pool.getCurrentServers();\n      Iterator i=servers.iterator();\n      while (i.hasNext()) {\n        pool.executeOn((ServerLocation)i.next(),op);\n      }\n    }\n else {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:\" + op.getMessage() + \" to server using pool: \"+ pool+ \" with groups:\"+ Arrays.toString(groups)+ \" all members:\"+ allServers);\n      }\n      pool.execute(op,0);\n    }\n  }\n catch (  Exception ex) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"ExecuteFunctionNoAckOp#execute : Exception occured while Sending Function Execution Message:\" + op.getMessage() + \" to server using pool: \"+ pool,ex);\n    }\n    if (ex.getMessage() != null)     throw new FunctionException(ex.getMessage(),ex);\n else     throw new FunctionException(\"Unexpected exception during function execution:\",ex);\n  }\n}"}
{"ids": "40183", "raw_code": "public static Script createMultiSigInputScript(TransactionSignature... signatures){\n  return createMultiSigInputScript(Arrays.asList(signatures));\n}"}
{"ids": "71387", "raw_code": "Object proxyIfReturnTypeIsJdbcInterface(Class<?> returnType,Object toProxy){\n  if (toProxy != null) {\n    if (Util.isJdbcInterface(returnType)) {\n      Class<?> toProxyClass=toProxy.getClass();\n      return Proxy.newProxyInstance(toProxyClass.getClassLoader(),Util.getImplementedInterfaces(toProxyClass),getNewJdbcInterfaceProxy(toProxy));\n    }\n  }\n  return toProxy;\n}"}
{"ids": "68573", "raw_code": "public final void empty(){\nsynchronized (buffer) {\n    buffer.clear();\n    bufferMap.clear();\n  }\n}"}
{"ids": "47559", "raw_code": "private ValueRange rangeByWeek(TemporalAccessor temporal,TemporalField field){\n  int dow=localizedDayOfWeek(temporal);\n  int offset=startOfWeekOffset(temporal.get(field),dow);\n  ValueRange fieldRange=temporal.range(field);\n  return ValueRange.of(computeWeek(offset,(int)fieldRange.getMinimum()),computeWeek(offset,(int)fieldRange.getMaximum()));\n}"}
{"ids": "2606", "raw_code": "public Object apply(Object in){\n  if (in instanceof HasWord) {\n    HasWord w=(HasWord)in;\n    String str=w.word();\n    String outStr=americanize(str,capitalizeTimex);\n    if (!outStr.equals(str)) {\n      w.setWord(outStr);\n    }\n    return w;\n  }\n else {\n    String str=(String)in;\n    return americanize(str,capitalizeTimex);\n  }\n}"}
{"ids": "53597", "raw_code": "public void addWayRef(MapWay way,int nodeIdx){\n  if (ways == null)   ways=new ArrayList<WayRef>(2);\n  if (ways.isEmpty() || ways.get(0) != way)   ways.add(new DefaultWayRef(way,(short)nodeIdx));\n}"}
{"ids": "524", "raw_code": "public EntireTextBuilder addBackground(@ColorInt int bgColor,int start,int end){\n  BackgroundHolder backgroundHolder=new BackgroundHolder(bgColor,start,end);\n  mBackgrounds.add(backgroundHolder);\n  return this;\n}"}
{"ids": "6230", "raw_code": "public void removeChangingListener(OnWheelChangedListener listener){\n  changingListeners.remove(listener);\n}"}
{"ids": "6685", "raw_code": "public boolean matches(String filename){\n  if (exts == null)   return true;\n  int j=filename.lastIndexOf(\".\");\n  if (j == -1 || j == filename.length())   return false;\n  String suffix=filename.substring(j + 1);\n  return exts.contains(suffix);\n}"}
{"ids": "51037", "raw_code": "public Rectangle[] computeGaps(){\n  ArrayList<Rectangle> ret=new ArrayList<>();\n  Rectangle gap=new Rectangle();\n  for (int i=0; i < mRectList.length; i++) {\n    Rectangle rectangleA=mRectList[i];\n    for (int j=i + 1; j < mRectList.length; j++) {\n      Rectangle rectangleB=mRectList[j];\n      boolean viable=calculateGap(rectangleA,rectangleB,gap);\n      if (viable) {\n        for (int k=0; k < mRectList.length; k++) {\n          if (k != j && k != i) {\n            if (gap.intersects(mRectList[k])) {\n              viable=false;\n              break;\n            }\n          }\n        }\n      }\n      if (viable) {\n        ret.add(new Rectangle(gap));\n      }\n    }\n  }\n  return ret.toArray(new Rectangle[ret.size()]);\n}"}
{"ids": "42533", "raw_code": "public synchronized MethodCountSet collectHotMethods(int optLevel,double threshold){\n  if (DEBUG)   validityCheck();\n  ArrayList<HotMethodRecompilationEvent> collect=new ArrayList<HotMethodRecompilationEvent>();\n  collectHotOptMethodsInternal(1,collect,hotnessToCounts(threshold),optLevel);\n  int numHotMethods=collect.size();\n  double[] numCounts=new double[numHotMethods];\n  CompiledMethod[] hotMethods=new CompiledMethod[numHotMethods];\n  for (int i=0; i < numHotMethods; i++) {\n    HotMethodEvent event=collect.get(i);\n    hotMethods[i]=event.getCompiledMethod();\n    numCounts[i]=event.getNumSamples();\n  }\n  return new MethodCountSet(hotMethods,numCounts);\n}"}
{"ids": "55221", "raw_code": "public synchronized void addBan(long duration,String reason,String id){\n  addLine(new BanMessage(System.currentTimeMillis(),duration,reason,id));\n}"}
{"ids": "78203", "raw_code": "private void writeHeader() throws OpenStegoException {\n  DCTDataHeader header=null;\n  try {\n    header=new DCTDataHeader(this.dataLength,this.fileName,this.config);\n    if (((header.getHeaderSize() + this.dataLength) * 8) > (this.imgWidth * this.imgHeight / (DCT.NJPEG * DCT.NJPEG))) {\n      throw new OpenStegoException(null,DctLSBPlugin.NAMESPACE,DctLSBErrors.IMAGE_SIZE_INSUFFICIENT);\n    }\n    this.coord=new Coordinates((header.getHeaderSize() + this.dataLength) * 8);\n    write(header.getHeaderData());\n  }\n catch (  IOException ioEx) {\n    throw new OpenStegoException(ioEx);\n  }\n}"}
{"ids": "75572", "raw_code": "public int decrementSubscriberCount(){\n  if (isAvailable()) {\n    return jmdnsSubscriberCount.decrementAndGet();\n  }\n  return 0;\n}"}
{"ids": "25089", "raw_code": "public static boolean addShapelessEnchantingRecipe(ItemStack aResult,Enchantment[] aEnchantmentsAdded,int[] aEnchantmentLevelsAdded,Object[] aRecipe){\n  return addShapelessCraftingRecipe(aResult,aEnchantmentsAdded,aEnchantmentLevelsAdded,true,false,false,false,aRecipe);\n}"}
{"ids": "74647", "raw_code": "public void start() throws TomcatException {\n  if (cat == null)   init();\n  cat.start();\n}"}
{"ids": "41316", "raw_code": "@Override public synchronized void initialize(){\n  if (!mRootDirectory.exists()) {\n    if (!mRootDirectory.mkdirs()) {\n      VolleyLog.e(\"Unable to create cache dir %s\",mRootDirectory.getAbsolutePath());\n    }\n    return;\n  }\n  File[] files=mRootDirectory.listFiles();\n  if (files == null) {\n    return;\n  }\n  for (  File file : files) {\n    BufferedInputStream fis=null;\n    try {\n      fis=new BufferedInputStream(new FileInputStream(file));\n      CacheHeader entry=CacheHeader.readHeader(fis);\n      entry.size=file.length();\n      putEntry(entry.key,entry);\n    }\n catch (    IOException e) {\n      if (file != null) {\n        file.delete();\n      }\n    }\n finally {\n      try {\n        if (fis != null) {\n          fis.close();\n        }\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n}"}
{"ids": "37682", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(1);\n  newVector.addElement(new Option(\"\\tInitial count (alpha)\\n\",\"A\",1,\"-A <alpha>\"));\n  return newVector.elements();\n}"}
{"ids": "20274", "raw_code": "private boolean imageOutline(DefaultMutableTreeNode node){\n  boolean isOutline=false;\n  if (node != null) {\n    DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)node.getParent();\n    if (parentNode != null) {\n      if (parentNode.getUserObject() instanceof RasterSymbolizer) {\n        isOutline=true;\n      }\n    }\n  }\n  return isOutline;\n}"}
{"ids": "48580", "raw_code": "private short addEntry(Entry entry){\n  pool.add(entry);\n  if (pool.size() >= 65535) {\n    throw new IllegalArgumentException(\"constant pool size limit exceeded\");\n  }\n  return (short)pool.size();\n}"}
{"ids": "74667", "raw_code": "private boolean loadNextPage(){\n  result=pageable.getPage(query,skip,pageSize);\n  index=0;\n  if (result == null || result.isEmpty()) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "61308", "raw_code": "public boolean contains(Node s){\n  runTo(-1);\n  if (null == m_map)   return false;\n  for (int i=0; i < m_firstFree; i++) {\n    Node node=m_map[i];\n    if ((null != node) && node.equals(s))     return true;\n  }\n  return false;\n}"}
{"ids": "34900", "raw_code": "public void close() throws IOException {\n  if (!closed) {\n    if (usesDefaultInflater)     inf.end();\n    in.close();\n    closed=true;\n  }\n}"}
{"ids": "77302", "raw_code": "public FieldAnalysisRequest addFieldType(String fieldTypeName){\n  if (fieldTypes == null) {\n    fieldTypes=new LinkedList<>();\n  }\n  fieldTypes.add(fieldTypeName);\n  return this;\n}"}
{"ids": "80670", "raw_code": "public static BigFraction parseEditRate(String editRate){\n  editRate=editRate.contains(\"/\") ? rFrameRateToEditRate(editRate) : editRate;\n  String[] parts=editRate.split(\" \");\n  try {\n    if (parts.length == 2) {\n      return new BigFraction(Long.parseLong(parts[0]),Long.parseLong(parts[1]));\n    }\n else     if (parts.length == 1) {\n      return new BigFraction(Long.parseLong(parts[0]));\n    }\n  }\n catch (  NumberFormatException e) {\n    throw new ConversionHelperException(\"Incorrect edit rate! Edit rate must consist of two numbers.\",e);\n  }\n  throw new ConversionHelperException(\"Incorrect edit rate! Edit rate must consist of two values.\");\n}"}
{"ids": "77037", "raw_code": "public FST<T> finish() throws IOException {\n  final UnCompiledNode<T> root=frontier[0];\n  freezeTail(0);\n  if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n    if (fst.emptyOutput == null) {\n      return null;\n    }\n else     if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n      return null;\n    }\n  }\n else {\n    if (minSuffixCount2 != 0) {\n      compileAllTargets(root,lastInput.length());\n    }\n  }\n  fst.finish(compileNode(root,lastInput.length()).node);\n  if (doPackFST) {\n    return fst.pack(this,3,Math.max(10,(int)(getNodeCount() / 4)),acceptableOverheadRatio);\n  }\n else {\n    return fst;\n  }\n}"}
{"ids": "62840", "raw_code": "public void onConfiguration(ContactsOps.View view,boolean firstTimeIn){\n  mContactsView=new WeakReference<>(view);\n  if (firstTimeIn) {\n    initializeAccount();\n    mCursorAdapter=new SimpleCursorAdapter(view.getApplicationContext(),R.layout.list_layout,null,sColumnsToDisplay,sColumnResIds,1);\n  }\n}"}
{"ids": "77603", "raw_code": "public static final int randomUnsetBit(Random r,BitSet bits,final int max){\n  if (bits.cardinality() == max + 1) {\n    return -1;\n  }\n  final int candidate=TestUtil.nextInt(r,0,max);\n  if (bits.get(candidate)) {\n    final int lo=bits.previousClearBit(candidate);\n    final int hi=bits.nextClearBit(candidate);\n    if (lo < 0 && max < hi) {\n      fail(\"how the hell did we not short circut out? card=\" + bits.cardinality() + \"/size=\"+ bits.size());\n    }\n else     if (lo < 0) {\n      return hi;\n    }\n else     if (max < hi) {\n      return lo;\n    }\n    return ((candidate - lo) < (hi - candidate)) ? lo : hi;\n  }\n  return candidate;\n}"}
{"ids": "51459", "raw_code": "@Override public void flush() throws IOException {\nsynchronized (lock) {\n    out.flush();\n  }\n}"}
{"ids": "4867", "raw_code": "public double std(){\n  if (min == max || num == 0) {\n    return 0;\n  }\n  double m=mean();\n  return Math.sqrt(sigmax2 / num - m * m);\n}"}
{"ids": "29036", "raw_code": "public boolean containsInstruction(InstructionHandle handle){\n  Iterator<InstructionHandle> i=instructionIterator();\n  while (i.hasNext()) {\n    if (i.next() == handle) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "79302", "raw_code": "public static String sendFedexRequest(String xmlString,Delegator delegator,String shipmentGatewayConfigId,String resource,Locale locale) throws FedexConnectException {\n  String url=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,\"connectUrl\",resource,\"shipment.fedex.connect.url\");\n  if (UtilValidate.isEmpty(url)) {\n    throw new FedexConnectException(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexConnectUrlIncomplete\",locale));\n  }\n  if (!xmlString.matches(\"^(?s)<\\\\?xml\\\\s+version=\\\"1\\\\.0\\\"\\\\s+encoding=\\\"UTF-8\\\"\\\\s*\\\\?>.*\")) {\n    throw new FedexConnectException(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexXmlHeaderMalformed\",locale));\n  }\n  url=url.trim();\n  String timeOutStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,\"connectTimeout\",resource,\"shipment.fedex.connect.timeout\",\"60\");\n  int timeout=60;\n  try {\n    timeout=Integer.parseInt(timeOutStr);\n  }\n catch (  NumberFormatException e) {\n    Debug.logError(e,\"Unable to set timeout to \" + timeOutStr + \" using default \"+ timeout);\n  }\n  if (Debug.verboseOn()) {\n    Debug.logVerbose(\"Fedex Connect URL : \" + url,module);\n    Debug.logVerbose(\"Fedex XML String : \" + xmlString,module);\n  }\n  HttpClient http=new HttpClient(url);\n  http.setTimeout(timeout * 1000);\n  String response=null;\n  try {\n    response=http.post(xmlString);\n  }\n catch (  HttpClientException e) {\n    Debug.logError(e,\"Problem connecting to Fedex server\",module);\n    throw new FedexConnectException(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexConnectUrlProblem\",UtilMisc.toMap(\"errorString\",e.toString()),locale));\n  }\n  if (response == null) {\n    throw new FedexConnectException(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexReceivedNullResponse\",locale));\n  }\n  if (Debug.verboseOn()) {\n    Debug.logVerbose(\"Fedex Response : \" + response,module);\n  }\n  return response;\n}"}
{"ids": "59485", "raw_code": "public String trimToSize(String str,int maxStringLength){\n  if (str == null)   return null;\n  if (str.length() > maxStringLength) {\n    StringBuilder sb=new StringBuilder(str);\n    sb.setLength(maxStringLength);\n    str=sb.toString();\n  }\n  return str;\n}"}
{"ids": "23545", "raw_code": "public Subject login(String username,String password){\n  if (StringUtils.isBlank(username) || StringUtils.isBlank(password))   return null;\n  Properties credentials=new Properties();\n  credentials.setProperty(ResourceConstants.USER_NAME,username);\n  credentials.setProperty(ResourceConstants.PASSWORD,password);\n  return login(credentials);\n}"}
{"ids": "39791", "raw_code": "@Timed @ExceptionMetered @Path(\"/v2\") @GET @Produces(APPLICATION_JSON) public Iterable<SanitizedSecret> secretListingV2(@Auth AutomationClient automationClient,@QueryParam(\"idx\") Integer idx,@QueryParam(\"num\") Integer num,@DefaultValue(\"true\") @QueryParam(\"newestFirst\") boolean newestFirst){\n  if (idx != null && num != null) {\n    if (idx < 0 || num < 0) {\n      throw new BadRequestException(\"Index and num must both be positive when retrieving batched secrets!\");\n    }\n    return secretController.getSecretsBatched(idx,num,newestFirst);\n  }\n  return secretController.getSanitizedSecrets(null,null);\n}"}
{"ids": "52320", "raw_code": "public void deselect(Iterable<Integer> positions){\n  Iterator<Integer> entries=positions.iterator();\n  while (entries.hasNext()) {\n    deselect(entries.next(),entries);\n  }\n}"}
{"ids": "57407", "raw_code": "public static String map2OID(String algName){\n  checkCacheVersion();\n  String result=alg2OidMap.get(algName.toUpperCase(Locale.US));\n  if (result != null) {\n    return result;\n  }\n  AlgNameMapperSource s=source;\n  if (s != null) {\n    return s.mapNameToOid(algName);\n  }\n  return null;\n}"}
{"ids": "49736", "raw_code": "private void endList(boolean orderedList){\n  if (!mParagraphStyles.isEmpty()) {\n    AccumulatedParagraphStyle style=mParagraphStyles.peek();\n    ParagraphType type=style.getType();\n    if ((orderedList && (type.isNumbering() || type == ParagraphType.INDENTATION_OL)) || (!orderedList && (type.isBullet() || type == ParagraphType.INDENTATION_UL))) {\n      int indent=style.getRelativeIndent();\n      if (indent > 1) {\n        style.setRelativeIndent(indent - 1);\n        style.setAbsoluteIndent(style.getAbsoluteIndent() - 1);\n      }\n else {\n        mParagraphStyles.pop();\n      }\n    }\n else {\n      mParagraphStyles.pop();\n      endList(orderedList);\n    }\n  }\n}"}
{"ids": "78495", "raw_code": "private boolean processKeyUp(int keyCode){\n  if (keyCode == KeyEvent.KEYCODE_ESCAPE || keyCode == KeyEvent.KEYCODE_BACK) {\n    dismiss();\n    return true;\n  }\n else   if (keyCode == KeyEvent.KEYCODE_TAB) {\n    if (mInKbMode) {\n      if (isTypedTimeFullyLegal()) {\n        finishKbMode(true);\n      }\n      return true;\n    }\n  }\n else   if (keyCode == KeyEvent.KEYCODE_ENTER) {\n    if (mInKbMode) {\n      if (!isTypedTimeFullyLegal()) {\n        return true;\n      }\n      finishKbMode(false);\n    }\n    if (mCallback != null) {\n      mCallback.onTimeSet(mTimePicker,mTimePicker.getHours(),mTimePicker.getMinutes());\n    }\n    dismiss();\n    return true;\n  }\n else   if (keyCode == KeyEvent.KEYCODE_DEL) {\n    if (mInKbMode) {\n      if (!mTypedTimes.isEmpty()) {\n        int deleted=deleteLastTypedKey();\n        String deletedKeyStr;\n        if (deleted == getAmOrPmKeyCode(AM)) {\n          deletedKeyStr=mAmText;\n        }\n else         if (deleted == getAmOrPmKeyCode(PM)) {\n          deletedKeyStr=mPmText;\n        }\n else {\n          deletedKeyStr=String.format(\"%d\",getValFromKeyCode(deleted));\n        }\n        Utils.tryAccessibilityAnnounce(mTimePicker,String.format(mDeletedKeyFormat,deletedKeyStr));\n        updateDisplay(true);\n      }\n    }\n  }\n else   if (keyCode == KeyEvent.KEYCODE_0 || keyCode == KeyEvent.KEYCODE_1 || keyCode == KeyEvent.KEYCODE_2 || keyCode == KeyEvent.KEYCODE_3 || keyCode == KeyEvent.KEYCODE_4 || keyCode == KeyEvent.KEYCODE_5 || keyCode == KeyEvent.KEYCODE_6 || keyCode == KeyEvent.KEYCODE_7 || keyCode == KeyEvent.KEYCODE_8 || keyCode == KeyEvent.KEYCODE_9 || (!mIs24HourMode && (keyCode == getAmOrPmKeyCode(AM) || keyCode == getAmOrPmKeyCode(PM)))) {\n    if (!mInKbMode) {\n      if (mTimePicker == null) {\n        Log.e(TAG,\"Unable to initiate keyboard mode, TimePicker was null.\");\n        return true;\n      }\n      mTypedTimes.clear();\n      tryStartingKbMode(keyCode);\n      return true;\n    }\n    if (addKeyIfLegal(keyCode)) {\n      updateDisplay(false);\n    }\n    return true;\n  }\n  return false;\n}"}
{"ids": "63443", "raw_code": "public boolean isNaturalJoinColumn(Column c){\n  return naturalJoinColumns != null && naturalJoinColumns.contains(c);\n}"}
{"ids": "47313", "raw_code": "public int read(byte[] b,int off,int len) throws IOException {\n  ensureOpen();\n  if (b == null) {\n    throw new NullPointerException(\"Null buffer for read\");\n  }\n else   if (off < 0 || len < 0 || len > b.length - off) {\n    throw new IndexOutOfBoundsException();\n  }\n else   if (len == 0) {\n    return 0;\n  }\n  int cnt=0;\n  while (len > 0 && !def.finished()) {\n    int n;\n    if (def.needsInput()) {\n      n=in.read(buf,0,buf.length);\n      if (n < 0) {\n        def.finish();\n      }\n else       if (n > 0) {\n        def.setInput(buf,0,n);\n      }\n    }\n    n=def.deflate(b,off,len);\n    cnt+=n;\n    off+=n;\n    len-=n;\n  }\n  if (cnt == 0 && def.finished()) {\n    reachEOF=true;\n    cnt=-1;\n  }\n  return cnt;\n}"}
{"ids": "33625", "raw_code": "@Override public void passivate(){\n  cleanupUserTransaction();\n  super.passivate();\n}"}
{"ids": "52450", "raw_code": "public Builder delay(long duration,TimeUnit timeUnit){\n  this.delay=timeUnit.toSeconds(duration);\n  return this;\n}"}
{"ids": "32365", "raw_code": "private boolean contains(int part){\n  return parts.contains(part);\n}"}
{"ids": "65253", "raw_code": "int keyCount(Class clazz){\n  Map map=get(clazz);\n  int count=map.size();\n  if (map.containsKey(CONSTRUCTORS_KEY))   count--;\n  if (map.containsKey(GENERIC_GET_KEY))   count--;\n  if (map.containsKey(ARGTYPES_KEY))   count--;\n  return count;\n}"}
{"ids": "62427", "raw_code": "public Mp4StcoBox(Mp4BoxHeader header,ByteBuffer originalDataBuffer,int adjustment){\n  this.header=header;\n  this.dataBuffer=originalDataBuffer.slice();\n  dataBuffer.position(dataBuffer.position() + VERSION_FLAG_LENGTH + OTHER_FLAG_LENGTH);\n  this.noOfOffSets=Utils.getIntBE(dataBuffer,dataBuffer.position(),(dataBuffer.position() + NO_OF_OFFSETS_LENGTH - 1));\n  dataBuffer.position(dataBuffer.position() + NO_OF_OFFSETS_LENGTH);\n  for (int i=0; i < noOfOffSets; i++) {\n    int offset=Utils.getIntBE(dataBuffer,dataBuffer.position(),(dataBuffer.position() + NO_OF_OFFSETS_LENGTH - 1));\n    offset=offset + adjustment;\n    dataBuffer.put(Utils.getSizeBEInt32(offset));\n  }\n}"}
{"ids": "83393", "raw_code": "public static void createOPUSDirectories(Config config){\n  log.info(\"Creating temp directories\");\n  UrbanSimParameterConfigModuleV3 module=M4UConfigUtils.getUrbanSimParameterConfigAndPossiblyConvert(config);\n  File tempFile=new File(module.getOpusHome());\n  tempFile.mkdirs();\n  tempFile=new File(module.getMATSim4Opus());\n  tempFile.mkdirs();\n  tempFile=new File(module.getMATSim4OpusOutput());\n  tempFile.mkdirs();\n  tempFile=new File(module.getMATSim4OpusTemp());\n  tempFile.mkdirs();\n  tempFile=new File(module.getMATSim4OpusConfig());\n  tempFile.mkdirs();\n  log.info(\"Finished creating temp directories\");\n}"}
{"ids": "41378", "raw_code": "public static String lcfirst(String input){\n  return withFirst(input,null);\n}"}
{"ids": "63288", "raw_code": "void compress(int page,byte[] old){\n  byte[][] array=data;\n  if (page >= array.length) {\n    return;\n  }\n  byte[] d=array[page];\n  if (d != old) {\n    return;\n  }\nsynchronized (LZF) {\n    int len=LZF.compress(d,BLOCK_SIZE,BUFFER,0);\n    if (len <= BLOCK_SIZE) {\n      d=new byte[len];\n      System.arraycopy(BUFFER,0,d,0,len);\n      byte[] o=array[page];\n      if (o != old) {\n        return;\n      }\n      array[page]=d;\n    }\n  }\n}"}
{"ids": "31702", "raw_code": "public HadoopProcessDescriptor localProcessDescriptor(){\n  return locProcDesc;\n}"}
{"ids": "80615", "raw_code": "private Pair<String,Boolean> describeRain(Calendar calendar,int temperatureMod){\n  int month=calendar.get(Calendar.MONTH);\n  month=10 * Math.abs(month - 6);\n  int hour=calendar.get(Calendar.HOUR_OF_DAY);\n  hour=Math.abs((hour + 21) % 24 - 12) / 2;\n  int temp=temperature.getValue() - hour - month + (temperatureMod * 10);\n  LOGGER.debug(\"Modified temp: \" + temp + \" zone modifier: \"+ temperatureMod);\n  if (temp <= -30) {\n    return new Pair<String,Boolean>(\"snow\",Boolean.FALSE);\n  }\n  return new Pair<String,Boolean>(\"rain\",temp >= -5 && thunder.getDescription(0) != null);\n}"}
{"ids": "56078", "raw_code": "@VisibleForTesting @CalledByNativeUnchecked(\"BookmarkNode\") public void addChild(BookmarkNode child){\n  mChildren.add(child);\n}"}
{"ids": "69159", "raw_code": "@Override public String read(String pattern){\n  return read(Pattern.compile(pattern,Pattern.DOTALL | Pattern.MULTILINE));\n}"}
{"ids": "54484", "raw_code": "protected void addSubKeysAndAggregator(Set<String> values,Set<String> keysOfCompositeAggregator,Set<String> subKeys,String aggregatorName,Map<Set<String>,Integer> keysToCombinationId){\n  if (keysOfCompositeAggregator == null || subKeys == null || keysOfCompositeAggregator.isEmpty() || subKeys.isEmpty()) {\n    throw new IllegalArgumentException(\"Both keys and subKeys can't be null or empty\");\n  }\n  Set<String> allKeys=Sets.newHashSet();\n  allKeys.addAll(keysOfCompositeAggregator);\n  allKeys.addAll(subKeys);\n  if (allKeys.size() != keysOfCompositeAggregator.size() + subKeys.size()) {\n    throw new IllegalArgumentException(\"Should NOT have overlap between keys \" + keysOfCompositeAggregator.toString() + \" and subKeys \"+ subKeys);\n  }\n  Integer combinationId=keysToCombinationId.get(allKeys);\n  if (combinationId == null) {\n    if (dimensionsDescriptorIDToKeys.add(new Fields(allKeys))) {\n      combinationId=dimensionsDescriptorIDToKeys.size() - 1;\n    }\n else {\n      throw new RuntimeException(\"The keys \" + allKeys + \" already existed.\");\n    }\n    keysToCombinationId.put(allKeys,combinationId);\n    addValueToAggregatorToCombination(values,allKeys,aggregatorName);\n  }\n else {\n    Set<String> incrementalAggregatorNames;\n    boolean isOTFAggregator=false;\n    if (!isIncrementalAggregator(aggregatorName)) {\n      incrementalAggregatorNames=getOTFDependedIncrementalAggregatorNames(aggregatorName);\n      isOTFAggregator=true;\n    }\n else {\n      incrementalAggregatorNames=Sets.newHashSet();\n      incrementalAggregatorNames.add(aggregatorName);\n    }\n    Map<String,Set<String>> newValueToIncrementalAggregators=Maps.newHashMap();\n    Map<String,Set<String>> newValueToOTFAggregators=Maps.newHashMap();\n    for (    String value : values) {\n      newValueToIncrementalAggregators.put(value,incrementalAggregatorNames);\n      if (isOTFAggregator) {\n        newValueToOTFAggregators.put(value,Sets.newHashSet(aggregatorName));\n      }\n    }\n    int ddid=combinationId * customTimeBucketsCombination.size();\n    for (int index=0; index < customTimeBucketsCombination.size(); ++index, ++ddid) {\n      mergeMaps(dimensionsDescriptorIDToValueToAggregator.get(ddid),newValueToIncrementalAggregators);\n      mergeMaps(dimensionsDescriptorIDToValueToOTFAggregator.get(ddid),newValueToOTFAggregators);\n    }\n  }\n}"}
{"ids": "70730", "raw_code": "protected boolean _findCanonicalLabelling(boolean tmpPreviouslyEqualToMin){\n  boolean foundNewMinimum=false;\n  IntArrayList underlyingVertexPosThatExtendTmp=getUnderlyingVertexPosThatExtendTmp();\n  IntCursor underlyingVertexPosThatExtendTmpCursor=underlyingVertexPosThatExtendTmp.cursor();\n  while (underlyingVertexPosThatExtendTmpCursor.moveNext()) {\n    int underlyingVertexPosToAdd=underlyingVertexPosThatExtendTmpCursor.elem();\n    int newTmpVertexPos=addTmpVertex(underlyingVertexPosToAdd);\n    int newTmpVertexLabel=underlyingPosToLabel.getUnchecked(underlyingVertexPosToAdd);\n    IntSet neighbourUnderlyingPositions=underlyingAdjacencyList.get(underlyingVertexPosToAdd);\n    IntCursor neighbourUnderlyingPositionsCursor=neighbourUnderlyingPositions.cursor();\n    PatternEdgeArrayList edgesToAdd=createPatternEdgeArrayList();\n    while (neighbourUnderlyingPositionsCursor.moveNext()) {\n      int neighbourUnderlyingPos=neighbourUnderlyingPositionsCursor.elem();\n      int neighbourTmpPos=tmpLabelling.get(neighbourUnderlyingPos);\n      if (neighbourTmpPos == -1) {\n        continue;\n      }\n      addCandidatePatternEdges(edgesToAdd,neighbourUnderlyingPos,neighbourTmpPos,underlyingVertexPosToAdd,newTmpVertexPos);\n    }\n    if (edgesToAdd.size() > 0 || newTmpVertexPos == 0) {\n      edgesToAdd.sort();\n      boolean promisingTmpPattern=true;\n      boolean equalToMinTmpPattern=tmpPreviouslyEqualToMin;\n      if (foundMinimum) {\n        int comparisonResult;\n        if (newTmpVertexPos > 0) {\n          PatternEdgeArrayList minEquivalentEdges=minEdges.get(newTmpVertexPos);\n          comparisonResult=edgesToAdd.compareTo(minEquivalentEdges);\n        }\n else {\n          int minFirstUnderlyingVertexPos=minInverseLabelling.get(newTmpVertexPos);\n          int minFirstUnderylingVertexLabel=underlyingPosToLabel.getUnchecked(minFirstUnderlyingVertexPos);\n          comparisonResult=Integer.compare(newTmpVertexLabel,minFirstUnderylingVertexLabel);\n        }\n        equalToMinTmpPattern=equalToMinTmpPattern && comparisonResult == 0;\n        if (tmpPreviouslyEqualToMin && !equalToMinTmpPattern) {\n          if (comparisonResult > 0) {\n            promisingTmpPattern=false;\n          }\n        }\n      }\n      if (promisingTmpPattern) {\n        addTmpEdges(edgesToAdd);\n        if (tmpLabelling.size() == getNumberOfVertices()) {\n          if (!equalToMinTmpPattern || !foundMinimum) {\n            copyTmpToMin();\n            foundNewMinimum=true;\n            vertexPositionEquivalences.clear();\n          }\n          IntIntCursor tmpLabellingCursor=tmpLabelling.cursor();\n          while (tmpLabellingCursor.moveNext()) {\n            int underlyingPos=tmpLabellingCursor.key();\n            int tmpEquivalentPos=tmpLabellingCursor.value();\n            int underlyingPosAccordingToMin=minInverseLabelling.get(tmpEquivalentPos);\n            vertexPositionEquivalences.addEquivalence(underlyingPos,underlyingPosAccordingToMin);\n          }\n        }\n else {\n          boolean foundNewMinimumInChild=_findCanonicalLabelling(equalToMinTmpPattern);\n          if (foundNewMinimumInChild) {\n            tmpPreviouslyEqualToMin=true;\n            foundNewMinimum=true;\n          }\n        }\n        removeLastTmpEdges();\n      }\n else {\n        edgesToAdd.reclaim();\n      }\n    }\n    removeLastTmpVertex();\n  }\n  underlyingVertexPosThatExtendTmp.reclaim();\n  return foundNewMinimum;\n}"}
{"ids": "22507", "raw_code": "private String constructISCSINamesQuery(String systemId,List<HostStorageDomain> hsdList,String model){\n  Map<String,Object> attributeMap=new HashMap<String,Object>();\n  StorageArray array=new StorageArray(systemId);\n  Add addOp=new Add(HDSConstants.ISCSI_NAME_FOR_HSD_TARGET);\n  attributeMap.put(HDSConstants.STORAGEARRAY,array);\n  attributeMap.put(HDSConstants.ADD,addOp);\n  attributeMap.put(HDSConstants.MODEL,model);\n  attributeMap.put(HDSConstants.HOSTGROUP_LIST,hsdList);\n  String addWWNQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.BATCH_ADD_WWN_TO_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);\n  return addWWNQuery;\n}"}
{"ids": "70951", "raw_code": "public static void tryClaim(Publication publication,BufferFiller fillBuffer,int length,int timeout,TimeUnit timeUnit){\n  if (publication.isClosed()) {\n    throw new NotConnectedException();\n  }\n  final BufferClaim bufferClaim=bufferClaims.get();\n  final long start=System.nanoTime();\n  do {\n    final long current=System.nanoTime();\n    if ((current - start) > timeUnit.toNanos(timeout)) {\n      throw new TimedOutException();\n    }\n    final long offer=publication.tryClaim(length,bufferClaim);\n    if (offer >= 0) {\n      try {\n        final MutableDirectBuffer buffer=bufferClaim.buffer();\n        final int offset=bufferClaim.offset();\n        fillBuffer.fill(offset,buffer);\n        break;\n      }\n  finally {\n        bufferClaim.commit();\n      }\n    }\n else     if (Publication.NOT_CONNECTED == offer) {\n      throw new NotConnectedException();\n    }\n  }\n while (true);\n}"}
{"ids": "34503", "raw_code": "Builder addLenient(String line){\n  int index=line.indexOf(\":\",1);\n  if (index != -1) {\n    return addLenient(line.substring(0,index),line.substring(index + 1));\n  }\n else   if (line.startsWith(\":\")) {\n    return addLenient(\"\",line.substring(1));\n  }\n else {\n    return addLenient(\"\",line);\n  }\n}"}
{"ids": "19895", "raw_code": "protected boolean tableExists(Table t) throws SQLException {\n  String sql=\"SELECT * FROM pg_tables WHERE \" + (t.isTemporary() ? \"\" : (\"schemaname='\" + t.getSchema() + \"' AND \")) + \"tablename='\"+ (t.isTemporary() ? (t.getSchema() + \"_\") : \"\")+ t.getName()+ \"'\";\n  Statement stmt=dbConn.createStatement();\n  try {\n    ResultSet rs=stmt.executeQuery(sql);\n    return rs.next();\n  }\n  finally {\n    if (stmt != null) {\n      try {\n        stmt.close();\n      }\n catch (      SQLException e) {\n      }\n    }\n  }\n}"}
{"ids": "27372", "raw_code": "private void readUnlockedThread(){\n  final long thisThreadId=Thread.currentThread().getId();\n  final Integer entry=threadLockMap.get(thisThreadId);\n  assert entry != null;\n  if (entry.intValue() == 1) {\n    threadLockMap.remove(thisThreadId);\n  }\n else {\n    threadLockMap.put(thisThreadId,entry.intValue() - 1);\n  }\n}"}
{"ids": "49372", "raw_code": "boolean isSingleWindowStandardOffset(){\n  return windowEnd.equals(LocalDateTime.MAX) && timeDefinition == TimeDefinition.WALL && fixedSavingAmountSecs == null && lastRuleList.isEmpty() && ruleList.isEmpty();\n}"}
{"ids": "51565", "raw_code": "public void add(Character ok){\n  add(ok.charValue());\n}"}
{"ids": "21628", "raw_code": "private Workflow.Method deleteVolumesMethod(URI systemURI,List<URI> volumeURIs){\n  return new Workflow.Method(\"deleteVolumes\",systemURI,volumeURIs);\n}"}
{"ids": "46743", "raw_code": "public boolean remove(AccessibleState state){\n  if (states == null) {\n    return false;\n  }\n else {\n    return states.removeElement(state);\n  }\n}"}
{"ids": "84764", "raw_code": "public void outputExampleXML(PrintWriter writer,AttributeRule rule){\n  writer.print(\" \" + rule.getName() + \"=\\\"\");\n  if (rule.hasExample()) {\n    writer.print(rule.getExample());\n  }\n else {\n    outputAttributeValue(writer,rule.getAttributeClass());\n  }\n  writer.print(\"\\\"\");\n}"}
{"ids": "75199", "raw_code": "private void beforeValue() throws JSONException {\n  if (stack.isEmpty()) {\n    return;\n  }\n  Scope context=peek();\n  if (context == Scope.EMPTY_ARRAY) {\n    replaceTop(Scope.NONEMPTY_ARRAY);\n    newline();\n  }\n else   if (context == Scope.NONEMPTY_ARRAY) {\n    out.append(',');\n    newline();\n  }\n else   if (context == Scope.DANGLING_KEY) {\n    out.append(indent == null ? \":\" : \": \");\n    replaceTop(Scope.NONEMPTY_OBJECT);\n  }\n else   if (context != Scope.NULL) {\n    throw new JSONException(\"Nesting problem\");\n  }\n}"}
{"ids": "11765", "raw_code": "public static double calculateJulianDate(GregorianCalendar cal){\n  int year=cal.get(Calendar.YEAR);\n  int month=cal.get(Calendar.MONTH);\n  int day=cal.get(Calendar.DAY_OF_MONTH);\n  month++;\n  if ((month == 1) || (month == 2)) {\n    year-=1;\n    month+=12;\n  }\n  int A=year / 100;\n  int B=(int)(2 - A + (A / 4));\n  int C=(int)(365.25 * (float)year);\n  int D=(int)(30.6001 * (float)(month + 1));\n  double julianDate=(double)(B + C + D+ day) + 1720994.5;\n  return julianDate;\n}"}
{"ids": "59522", "raw_code": "public boolean isUploadInProgress(){\n  return mUploadStarted.get();\n}"}
{"ids": "34726", "raw_code": "private int indexOf(int tabId){\n  return mTabIdList.indexOf(tabId);\n}"}
{"ids": "41465", "raw_code": "public NdefMessage(NdefRecord record,NdefRecord... records){\n  if (record == null)   throw new NullPointerException(\"record cannot be null\");\n  for (  NdefRecord r : records) {\n    if (r == null) {\n      throw new NullPointerException(\"record cannot be null\");\n    }\n  }\n  mRecords=new NdefRecord[1 + records.length];\n  mRecords[0]=record;\n  System.arraycopy(records,0,mRecords,1,records.length);\n}"}
{"ids": "78655", "raw_code": "private int findCheckpointPosition(int[] cids){\n  if (checkpointPeriod < 1) {\n    return -1;\n  }\n  if (cids.length == 0) {\n    throw new IllegalArgumentException();\n  }\n  int firstCID=cids[0];\n  if ((firstCID + 1) % checkpointPeriod == 0) {\n    return cidPosition(cids,firstCID);\n  }\n else {\n    int nextCkpIndex=(((firstCID / checkpointPeriod) + 1) * checkpointPeriod) - 1;\n    if (nextCkpIndex <= cids[cids.length - 1]) {\n      return cidPosition(cids,nextCkpIndex);\n    }\n  }\n  return -1;\n}"}
{"ids": "44522", "raw_code": "private boolean readNextLine() throws IOException {\n  if (headerLines.hasMoreElements()) {\n    try {\n      pos=0;\n      String line=(headerLines.nextElement() + LINE_SEPERATOR);\n      if (!headerLines.hasMoreElements()) {\n        line+=LINE_SEPERATOR;\n      }\n      currLine=line.getBytes(\"US-ASCII\");\n      return true;\n    }\n catch (    UnsupportedEncodingException e) {\n      throw new IOException(\"US-ASCII encoding not supported by this platform ?!\");\n    }\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "32224", "raw_code": "private boolean pause(){\n  try {\n    U.await(pauseLatch,REMAP_PAUSE,MILLISECONDS);\n    return true;\n  }\n catch (  IgniteInterruptedCheckedException e) {\n    onDone(e);\n    return false;\n  }\n}"}
{"ids": "25220", "raw_code": "public static InputStream toInputStream(final CharSequence input){\n  return IOUtils.toInputStream(input,Charset.defaultCharset());\n}"}
{"ids": "22003", "raw_code": "private static ITLRestRep createInitiatorTargetRefRep(ExportGroup exportGroup,BlockObject blockObject,String hlu,Initiator initiator,StoragePort port,FCZoneReference fcZoneReference){\n  ITLRestRep rep=new ITLRestRep();\n  rep.setHlu(Integer.parseInt(hlu));\n  ITLRestRep.ITLBlockObjectRestRep blockObjectRestRep=new ITLRestRep.ITLBlockObjectRestRep();\n  blockObjectRestRep.setId(blockObject.getId());\n  blockObjectRestRep.setLink(new RestLinkRep(\"self\",RestLinkFactory.newLink(blockObject)));\n  blockObjectRestRep.setWwn(getBlockObjectFormattedWWN(blockObject));\n  rep.setBlockObject(blockObjectRestRep);\n  ITLRestRep.ITLInitiatorRestRep initiatorRestRep=new ITLRestRep.ITLInitiatorRestRep();\n  initiatorRestRep.setId(initiator.getId());\n  initiatorRestRep.setLink(new RestLinkRep(\"self\",RestLinkFactory.newLink(initiator)));\n  initiatorRestRep.setPort(initiator.getInitiatorPort());\n  rep.setInitiator(initiatorRestRep);\n  ITLRestRep.ITLStoragePortRestRep storagePortRestRep=new ITLRestRep.ITLStoragePortRestRep();\n  if (port != null) {\n    storagePortRestRep.setId(port.getId());\n    storagePortRestRep.setLink(new RestLinkRep(\"self\",RestLinkFactory.newLink(port)));\n    storagePortRestRep.setPort(port.getPortNetworkId());\n    if (port.getIpAddress() != null) {\n      storagePortRestRep.setIpAddress(port.getIpAddress());\n      storagePortRestRep.setTcpPort(String.valueOf(port.getTcpPortNumber()));\n    }\n  }\n  rep.setStoragePort(storagePortRestRep);\n  rep.setExport(toNamedRelatedResource(exportGroup,exportGroup.getLabel()));\n  if (fcZoneReference != null) {\n    rep.setSanZoneName(fcZoneReference.getZoneName());\n  }\n  return rep;\n}"}
{"ids": "18200", "raw_code": "public void write(final int c) throws IOException {\n  if (m_writer != null)   m_writer.write(c);\n  if (count >= buf_length)   flushBuffer();\n  if (c < 0x80) {\n    buf[count++]=(byte)(c);\n  }\n else   if (c < 0x800) {\n    buf[count++]=(byte)(0xc0 + (c >> 6));\n    buf[count++]=(byte)(0x80 + (c & 0x3f));\n  }\n else {\n    buf[count++]=(byte)(0xe0 + (c >> 12));\n    buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));\n    buf[count++]=(byte)(0x80 + (c & 0x3f));\n  }\n}"}
{"ids": "36889", "raw_code": "private static List<COperandTree> convert(final INaviModule module,final List<Operand> operands){\n  final List<COperandTree> convertedOperands=new ArrayList<COperandTree>();\n  for (  final Operand operand : operands) {\n    convertedOperands.add(module.createOperand(convert(module,operand.getRootNode(),null)));\n  }\n  return convertedOperands;\n}"}
{"ids": "67702", "raw_code": "public static String xmlEscape(String s){\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < s.length(); i++) {\n    char ch=s.charAt(i);\nswitch (ch) {\ncase '\"':\n      sb.append(\"&quot;\");\n    break;\ncase '&':\n  sb.append(\"&amp;\");\nbreak;\ncase '\\'':\nsb.append(\"&apos;\");\nbreak;\ncase '<':\nsb.append(\"&lt;\");\nbreak;\ncase '>':\nsb.append(\"&gt;\");\nbreak;\ncase '\\n':\nsb.append(\"&#xA;\");\nbreak;\ncase '\\r':\nsb.append(\"&#xD;\");\nbreak;\ncase '\\t':\nsb.append(\"&#x9;\");\nbreak;\ncase '\\0':\nbreak;\ndefault :\nsb.append(ch);\nbreak;\n}\n}\nreturn sb.toString();\n}"}
{"ids": "59393", "raw_code": "public boolean writeHeader(OutputStream os){\n  try {\n    writeInt(os,CACHE_MAGIC);\n    writeString(os,key);\n    writeString(os,etag == null ? \"\" : etag);\n    writeLong(os,serverDate);\n    writeLong(os,ttl);\n    writeLong(os,softTtl);\n    writeStringStringMap(responseHeaders,os);\n    os.flush();\n    return true;\n  }\n catch (  IOException e) {\n    VolleyLog.d(\"%s\",e.toString());\n    return false;\n  }\n}"}
{"ids": "34640", "raw_code": "@VisibleForTesting public Bitmap ensureNormalizedIcon(Bitmap icon,String origin){\n  if (icon == null || icon.getWidth() == 0) {\n    if (mIconGenerator == null) {\n      int cornerRadiusPx=Math.min(mLargeIconWidthPx,mLargeIconHeightPx) / 2;\n      mIconGenerator=new RoundedIconGenerator(mLargeIconWidthPx,mLargeIconHeightPx,cornerRadiusPx,NOTIFICATION_ICON_BG_COLOR,NOTIFICATION_TEXT_SIZE_DP * mDensity);\n    }\n    return mIconGenerator.generateIconForUrl(origin,true);\n  }\n  if (icon.getWidth() > mLargeIconWidthPx || icon.getHeight() > mLargeIconHeightPx) {\n    return icon.createScaledBitmap(icon,mLargeIconWidthPx,mLargeIconHeightPx,false);\n  }\n  return icon;\n}"}
{"ids": "38138", "raw_code": "protected boolean[] canHandleZeroTraining(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){\n  print(\"handle zero training instances\");\n  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);\n  print(\"...\");\n  ArrayList<String> accepts=new ArrayList<String>();\n  accepts.add(\"train\");\n  accepts.add(\"value\");\n  int numTrain=0, numClasses=2, missingLevel=0;\n  boolean predictorMissing=false, classMissing=false;\n  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);\n}"}
{"ids": "30565", "raw_code": "public SQLQuery(String typeName,String sqlExpression){\n  this(sqlExpression,typeName,null,DEFAULT_QUERY_RESULT_TYPE,null);\n}"}
{"ids": "55159", "raw_code": "private static void checkOffset(String value,int offset,char expected) throws IndexOutOfBoundsException {\n  char found=value.charAt(offset);\n  if (found != expected) {\n    throw new IndexOutOfBoundsException(\"Expected '\" + expected + \"' character but found '\"+ found+ \"'\");\n  }\n}"}
{"ids": "42869", "raw_code": "public boolean isInNet(String host,String pattern,String mask){\n  host=dnsResolve(host);\n  if (host == null || host.length() == 0) {\n    return false;\n  }\n  long lhost=parseIpAddressToLong(host);\n  long lpattern=parseIpAddressToLong(pattern);\n  long lmask=parseIpAddressToLong(mask);\n  return (lhost & lmask) == lpattern;\n}"}
{"ids": "17848", "raw_code": "public int enumerate(Thread[] threads){\n  return enumerate(threads,true);\n}"}
{"ids": "21132", "raw_code": "public void start(){\n  log.info(\"Start DR health monitor {} with frequency {}\",this.name,this.frequencyInSecs);\n  stopped=false;\n  Thread drHealthMonitorThread=new Thread(this);\n  drHealthMonitorThread.setName(this.name);\n  drHealthMonitorThread.start();\n}"}
{"ids": "65219", "raw_code": "public void connect(String eventSourceUrl) throws IOException {\n  LOG.entering(CLASS_NAME,\"connect\",eventSourceUrl);\n  if (stream != null) {\n    LOG.warning(\"Reusing the same event source for a differnt URL, please create a new EventSource object\");\n    throw new IllegalArgumentException(\"Reusing the same event source for a differnt URL, please create a new EventSource object\");\n  }\n  stream=new SseEventStream(eventSourceUrl);\n  stream.setListener(eventStreamListener);\n  stream.connect();\n}"}
{"ids": "60274", "raw_code": "private static String methodName(@NonNls final String method){\n  return GitSSHHandler.HANDLER_NAME + \".\" + method;\n}"}
{"ids": "36248", "raw_code": "public DataRow removeDataRow(int index){\n  return dataList.remove(index);\n}"}
{"ids": "13058", "raw_code": "public void put(Object key,Object value){\n  int bucket=(key.hashCode() & 0x7FFFFFFF) % fTableSize;\n  Entry entry=search(key,bucket);\n  if (entry != null) {\n    entry.value=value;\n  }\n else {\n    entry=new Entry(key,value,fBuckets[bucket]);\n    fBuckets[bucket]=entry;\n    fNum++;\n  }\n}"}
{"ids": "74392", "raw_code": "public void valueChanged(ListSelectionEvent e){\n  if (_table == null) {\n    return;\n  }\n  int row=_table.getSelectedRow();\n  if (log.isDebugEnabled()) {\n    log.debug(\"Table valueChanged: row= \" + row);\n  }\n  if (row >= 0) {\n    _addButton.setEnabled(true);\n    _addButton.setToolTipText(null);\n    if (_type != null && _type.equals(\"SignalHead\")) {\n      makeIconMap(_pickListModel.getBeanAt(row));\n      clearIconPanel();\n      doIconPanel();\n    }\n  }\n else {\n    _addButton.setEnabled(false);\n    _addButton.setToolTipText(Bundle.getMessage(\"ToolTipPickFromTable\"));\n  }\n  validate();\n}"}
{"ids": "57690", "raw_code": "private int processPollFds() throws IOException {\n  if (pollFds.get(0).revents == POLLIN) {\n    byte[] buffer=new byte[8];\n    while (IoBridge.read(wakeupIn,buffer,0,1) > 0) {\n    }\n  }\n  int readyKeyCount=0;\n  for (int i=1; i < pollFds.size(); ++i) {\n    StructPollfd pollFd=pollFds.get(i);\n    if (pollFd.revents == 0) {\n      continue;\n    }\n    if (pollFd.fd == null) {\n      break;\n    }\n    SelectionKeyImpl key=(SelectionKeyImpl)pollFd.userData;\n    pollFd.fd=null;\n    pollFd.userData=null;\n    int ops=key.interestOpsNoCheck();\n    int selectedOps=0;\n    if ((pollFd.revents & POLLHUP) != 0) {\n      selectedOps|=ops;\n    }\n    if ((pollFd.revents & POLLIN) != 0) {\n      selectedOps|=ops & (OP_ACCEPT | OP_READ);\n    }\n    if ((pollFd.revents & POLLOUT) != 0) {\n      if (key.isConnected()) {\n        selectedOps|=ops & OP_WRITE;\n      }\n else {\n        selectedOps|=ops & OP_CONNECT;\n      }\n    }\n    if (selectedOps != 0) {\n      boolean wasSelected=mutableSelectedKeys.contains(key);\n      if (wasSelected && key.readyOps() != selectedOps) {\n        key.setReadyOps(key.readyOps() | selectedOps);\n        ++readyKeyCount;\n      }\n else       if (!wasSelected) {\n        key.setReadyOps(selectedOps);\n        mutableSelectedKeys.add(key);\n        ++readyKeyCount;\n      }\n    }\n  }\n  return readyKeyCount;\n}"}
{"ids": "59644", "raw_code": "public static boolean isIntermediateTable(String tableName,SQLiteDatabase db){\n  if (!TextUtils.isEmpty(tableName)) {\n    if (tableName.matches(\"[0-9a-zA-Z]+_[0-9a-zA-Z]+\")) {\n      Cursor cursor=null;\n      try {\n        cursor=db.query(Const.TableSchema.TABLE_NAME,null,null,null,null,null,null);\n        if (cursor.moveToFirst()) {\n          do {\n            String tableNameDB=cursor.getString(cursor.getColumnIndexOrThrow(Const.TableSchema.COLUMN_NAME));\n            if (tableName.equalsIgnoreCase(tableNameDB)) {\n              int tableType=cursor.getInt(cursor.getColumnIndexOrThrow(Const.TableSchema.COLUMN_TYPE));\n              if (tableType == Const.TableSchema.INTERMEDIATE_JOIN_TABLE) {\n                return true;\n              }\n              break;\n            }\n          }\n while (cursor.moveToNext());\n        }\n      }\n catch (      Exception e) {\n        e.printStackTrace();\n      }\n finally {\n        if (cursor != null) {\n          cursor.close();\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "26695", "raw_code": "public RealMatrix create(){\n  RealMatrix rotation=newIdentityMatrix();\n  for (  Plane plane : planes) {\n    double theta=plane.getTheta();\n    if (Double.isNaN(theta)) {\n      continue;\n    }\n    rotation=rotation.multiply(newRotationMatrix(plane.getFirstAxis(),plane.getSecondAxis(),theta));\n  }\n  return rotation;\n}"}
{"ids": "87043", "raw_code": "public static String toUpperCase(String str){\n  return str.toUpperCase(Locale.ENGLISH);\n}"}
{"ids": "56956", "raw_code": "protected static void init(){\n  String notificationfactoryClassName=null;\n  try {\n    notificationfactoryClassName=System.getProperty(NOTIFICATION_FACTORY_NAME);\n  }\n catch (  SecurityException e) {\n    throw new RuntimeException(e);\n  }\n  if (notificationfactoryClassName != null) {\n    Class<?> nfc;\n    try {\n      nfc=Class.forName(notificationfactoryClassName);\n      factory=(INotificationManagerFactory)nfc.newInstance();\n    }\n catch (    ClassNotFoundException|InstantiationException|IllegalAccessException e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    factory=new SyslogNotificationFactory();\n  }\n}"}
{"ids": "13137", "raw_code": "public boolean isDeclaredEntity(String entityName){\n  Entity entity=(Entity)fEntities.get(entityName);\n  return entity != null;\n}"}
{"ids": "55447", "raw_code": "private void openContextMenu(MouseEvent e){\n  if (e.isPopupTrigger()) {\n    selectClicked(e,false);\n    List<RemovedListItem> selectedItems=list.getSelectedValuesList();\n    List<StreamInfo> selected=new ArrayList<>();\n    for (    RemovedListItem item : selectedItems) {\n      selected.add(item.getStreamInfo());\n    }\n    StreamInfosContextMenu m=new StreamInfosContextMenu(selected,false);\n    for (    ContextMenuListener cml : contextMenuListeners) {\n      m.addContextMenuListener(cml);\n    }\n    m.show(list,e.getX(),e.getY());\n  }\n}"}
{"ids": "29259", "raw_code": "private boolean put(boolean isRoot,Vector names,int len,Object value){\n  if (len == 0) {\n    if (isRoot) {\n      if (rootValue != null)       return false;\n      rootValue=value;\n    }\n else {\n      if (otherValue != null)       return false;\n      otherValue=value;\n    }\n    return true;\n  }\n else {\n    Object name=names.elementAt(len - 1);\n    ContextMap nestedMap=(ContextMap)nameTable.get(name);\n    if (nestedMap == null) {\n      nestedMap=new ContextMap();\n      nameTable.put(name,nestedMap);\n    }\n    return nestedMap.put(isRoot,names,len - 1,value);\n  }\n}"}
{"ids": "31499", "raw_code": "static String encodeHighLevel(String msg,Compaction compaction) throws WriterException {\n  byte[] bytes=null;\n  StringBuilder sb=new StringBuilder(msg.length());\n  int len=msg.length();\n  int p=0;\n  int textSubMode=SUBMODE_ALPHA;\n  if (compaction == Compaction.TEXT) {\n    encodeText(msg,p,len,sb,textSubMode);\n  }\n else   if (compaction == Compaction.BYTE) {\n    bytes=getBytesForMessage(msg);\n    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);\n  }\n else   if (compaction == Compaction.NUMERIC) {\n    sb.append((char)LATCH_TO_NUMERIC);\n    encodeNumeric(msg,p,len,sb);\n  }\n else {\n    int encodingMode=TEXT_COMPACTION;\n    while (p < len) {\n      int n=determineConsecutiveDigitCount(msg,p);\n      if (n >= 13) {\n        sb.append((char)LATCH_TO_NUMERIC);\n        encodingMode=NUMERIC_COMPACTION;\n        textSubMode=SUBMODE_ALPHA;\n        encodeNumeric(msg,p,n,sb);\n        p+=n;\n      }\n else {\n        int t=determineConsecutiveTextCount(msg,p);\n        if (t >= 5 || n == len) {\n          if (encodingMode != TEXT_COMPACTION) {\n            sb.append((char)LATCH_TO_TEXT);\n            encodingMode=TEXT_COMPACTION;\n            textSubMode=SUBMODE_ALPHA;\n          }\n          textSubMode=encodeText(msg,p,t,sb,textSubMode);\n          p+=t;\n        }\n else {\n          if (bytes == null) {\n            bytes=getBytesForMessage(msg);\n          }\n          int b=determineConsecutiveBinaryCount(msg,bytes,p);\n          if (b == 0) {\n            b=1;\n          }\n          if (b == 1 && encodingMode == TEXT_COMPACTION) {\n            encodeBinary(bytes,p,1,TEXT_COMPACTION,sb);\n          }\n else {\n            encodeBinary(bytes,p,b,encodingMode,sb);\n            encodingMode=BYTE_COMPACTION;\n            textSubMode=SUBMODE_ALPHA;\n          }\n          p+=b;\n        }\n      }\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "72736", "raw_code": "protected void queue(final Path file) throws InterruptedException {\n  if (null != base && file.startsWith(base)) {\n    queue.put(file.subpath(base.getNameCount(),file.getNameCount()));\n  }\n else {\n    queue.put(file);\n  }\n}"}
{"ids": "39789", "raw_code": "public InputStream openPath() throws IOException {\n  Path filePath=Paths.get(path());\n  if (Files.exists(filePath)) {\n    logger.info(\"Opening keystore at file path {}\",filePath);\n    return Files.newInputStream(filePath);\n  }\n  URL resourceUrl=Resources.getResource(path());\n  logger.info(\"Opening keystore at resource path {}\",resourceUrl);\n  return resourceUrl.openStream();\n}"}
{"ids": "42774", "raw_code": "public static String replaceCharacters(final ConversionMethod conversionMethod,final String input,final int fromCharacter,final int toCharacter,final String wrap){\n  String convertedText=input;\n  for (int i=fromCharacter; i <= toCharacter; i++) {\n    final String characterToReplace=new String(Character.toChars(i));\n    if (wrap != null) {\n      convertedText=convertedText.replace(characterToReplace,wrap + convertText(conversionMethod,characterToReplace) + wrap);\n    }\n else {\n      convertedText=convertedText.replace(characterToReplace,convertText(conversionMethod,characterToReplace));\n    }\n  }\n  return convertedText;\n}"}
{"ids": "42746", "raw_code": "public static byte[] hmac_sha1(byte[] keyBytes,byte[] text) throws NoSuchAlgorithmException, InvalidKeyException {\n  Mac hmacSha1;\n  try {\n    hmacSha1=Mac.getInstance(\"HmacSHA1\");\n  }\n catch (  final NoSuchAlgorithmException nsae) {\n    hmacSha1=Mac.getInstance(\"HMAC-SHA-1\");\n  }\n  final SecretKeySpec macKey=new SecretKeySpec(keyBytes,\"RAW\");\n  hmacSha1.init(macKey);\n  return hmacSha1.doFinal(text);\n}"}
{"ids": "63189", "raw_code": "public static byte[] readBytesAndClose(InputStream in,int length) throws IOException {\n  try {\n    if (length <= 0) {\n      length=Integer.MAX_VALUE;\n    }\n    int block=Math.min(Constants.IO_BUFFER_SIZE,length);\n    ByteArrayOutputStream out=new ByteArrayOutputStream(block);\n    copy(in,out,length);\n    return out.toByteArray();\n  }\n catch (  Exception e) {\n    throw DbException.convertToIOException(e);\n  }\n finally {\n    in.close();\n  }\n}"}
{"ids": "46189", "raw_code": "public javax.naming.Binding next() throws NamingException {\n  if (more && counter >= _bindingList.value.length) {\n    getMore();\n  }\n  if (more && counter < _bindingList.value.length) {\n    org.omg.CosNaming.Binding bndg=_bindingList.value[counter];\n    counter++;\n    return mapBinding(bndg);\n  }\n else {\n    throw new NoSuchElementException();\n  }\n}"}
{"ids": "33040", "raw_code": "protected <T extends ASTNode>T moveNode(T oldNode,ASTRewrite rewrite){\n  T movedNode;\n  if (ASTNodes.isExistingNode(oldNode))   movedNode=ASTNodes.createMoveTarget(rewrite,oldNode);\n else   movedNode=ASTNodes.copySubtree(rewrite.getAST(),oldNode);\n  return movedNode;\n}"}
{"ids": "68081", "raw_code": "@Ignore @Test public void shouldBeFasterWhenRunningProcessingInParallel() throws Exception {\n  testMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet();\n  final long begin=System.currentTimeMillis();\n  victim.setParallelProcessing(false);\n  testMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet();\n  final long endSerial=System.currentTimeMillis();\n  victim.setParallelProcessing(true);\n  testMojoWithConfigurableWroManagerFactoryWithValidConfigFileSet();\n  final long endParallel=System.currentTimeMillis();\n  final long serial=endSerial - begin;\n  final long parallel=endParallel - endSerial;\n  LOG.info(\"serial took: {}ms\",serial);\n  LOG.info(\"parallel took: {}ms\",parallel);\n  assertTrue(String.format(\"Serial (%s) > Parallel (%s)\",serial,parallel),serial > parallel);\n}"}
{"ids": "52132", "raw_code": "public static TetradMatrix incompleteCholeskyGramMatrix(List<Kernel> kernels,DataSet dataset,List<Node> nodes,double precision){\n  if (precision <= 0) {\n    throw new IllegalArgumentException(\"Precision must be > 0\");\n  }\n  int m=dataset.getNumRows();\n  TetradMatrix G=new TetradMatrix(m,m);\n  double[] Dadv=new double[m];\n  int[] p=new int[m];\n  for (int i=0; i < m; i++) {\n    Dadv[i]=evaluate(kernels,dataset,nodes,i,i);\n    p[i]=i;\n  }\n  int cols=m;\n  for (int k=0; k < m; k++) {\n    double best=Dadv[k];\n    int bestInd=k;\n    for (int j=(k + 1); j < m; j++) {\n      if (Dadv[j] > best / .99) {\n        best=Dadv[j];\n        bestInd=j;\n      }\n    }\n    if (best < precision) {\n      cols=k - 1;\n      break;\n    }\n    int pk=p[k];\n    p[k]=p[bestInd];\n    p[bestInd]=pk;\n    double dk=Dadv[k];\n    Dadv[k]=Dadv[bestInd];\n    Dadv[bestInd]=dk;\n    for (int j=0; j < k; j++) {\n      double gk=G.get(k,j);\n      G.set(k,j,G.get(bestInd,j));\n      G.set(bestInd,j,gk);\n    }\n    double diag=Math.sqrt(Dadv[k]);\n    G.set(k,k,diag);\n    for (int j=(k + 1); j < m; j++) {\n      double s=0.0;\n      for (int i=0; i < k; i++) {\n        s+=G.get(j,i) * G.get(k,i);\n      }\n      G.set(j,k,(evaluate(kernels,dataset,nodes,p[j],p[k]) - s) / diag);\n    }\n    for (int j=(k + 1); j < m; j++) {\n      Dadv[j]-=Math.pow(G.get(j,k),2);\n    }\n    Dadv[k]=0;\n  }\n  TetradMatrix Gm=new TetradMatrix(m,cols);\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < cols; j++) {\n      Gm.set(i,j,G.get(i,j));\n    }\n  }\n  return Gm;\n}"}
{"ids": "51287", "raw_code": "FormatSpecifierParser(String format){\n  this.format=format;\n  this.length=format.length();\n}"}
{"ids": "73574", "raw_code": "public void addConsumerType(AttributeType type){\n  if (!consumerTypes.contains(type)) {\n    consumerTypes.add(type);\n  }\n}"}
{"ids": "72104", "raw_code": "public final void printVerboseMessage(final LocalizableMessage msg){\n  if (isVerbose()) {\n    out.println(wrap(msg));\n  }\n}"}
{"ids": "33011", "raw_code": "private static void orderMatches(List<Variable> typeMatches,String paramName){\n  if (typeMatches != null)   Collections.sort(typeMatches,new MatchComparator(paramName));\n}"}
{"ids": "83064", "raw_code": "SortedSet<String> typesToImport(){\n  SortedSet<String> typesToImport=new TreeSet<String>();\n  for (  Map.Entry<String,Spelling> entry : imports.entrySet()) {\n    if (entry.getValue().importIt) {\n      typesToImport.add(entry.getKey());\n    }\n  }\n  return typesToImport;\n}"}
{"ids": "16843", "raw_code": "@Override public boolean isScraped(){\n  if (!scraped) {\n    if (!plot.isEmpty() && !(year.isEmpty() || year.equals(\"0\")) && !(genres == null || genres.size() == 0)&& !(actors == null || actors.size() == 0)) {\n      return true;\n    }\n  }\n  return scraped;\n}"}
{"ids": "53841", "raw_code": "public NoiseTagLdaModel(InputStream in) throws IOException {\n  GZIPInputStream zipin=new GZIPInputStream(in);\n  BufferedInputStream bin=new BufferedInputStream(zipin);\n  DataInputStream datain=new DataInputStream(bin);\n  numTopics=datain.readInt();\n  int numWords=datain.readInt();\n  alpha=datain.readDouble();\n  beta=datain.readDouble();\n  locked=datain.readBoolean();\n  wnz=new int[numTopics];\n  Arrays.fill(wnz,0);\n  for (int i=0; i < numWords; i++) {\n    String word=datain.readUTF();\n    int[] count=new int[numTopics];\n    for (int j=0; j < numTopics; j++) {\n      count[j]=datain.readInt();\n      wnz[j]+=count[j];\n      nw+=count[j];\n    }\n    nwz.put(word,count);\n  }\n  tnz=new int[numTopics + 1];\n  Arrays.fill(tnz,0);\n  int numTags=datain.readInt();\n  eta=datain.readDouble();\n  for (int i=0; i < numTags; i++) {\n    String word=datain.readUTF();\n    int[] count=new int[numTopics + 1];\n    for (int j=0; j < numTopics + 1; j++) {\n      count[j]=datain.readInt();\n      tnz[j]+=count[j];\n      nt+=count[j];\n    }\n    ntz.put(word,count);\n  }\n  noise=numTopics;\n}"}
{"ids": "35960", "raw_code": "public void check(final int api){\n  if (api == Opcodes.ASM4) {\n    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {\n      throw new RuntimeException();\n    }\n    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {\n      throw new RuntimeException();\n    }\n    for (    FieldNode f : fields) {\n      f.check(api);\n    }\n    for (    MethodNode m : methods) {\n      m.check(api);\n    }\n  }\n}"}
{"ids": "65266", "raw_code": "public static String RTFEnc(String s){\n  int ln=s.length();\n  int firstEscIdx=-1;\n  int lastEscIdx=0;\n  int plusOutLn=0;\n  for (int i=0; i < ln; i++) {\n    char c=s.charAt(i);\n    if (c == '{' || c == '}' || c == '\\\\') {\n      if (firstEscIdx == -1) {\n        firstEscIdx=i;\n      }\n      lastEscIdx=i;\n      plusOutLn++;\n    }\n  }\n  if (firstEscIdx == -1) {\n    return s;\n  }\n else {\n    char[] esced=new char[ln + plusOutLn];\n    if (firstEscIdx != 0) {\n      s.getChars(0,firstEscIdx,esced,0);\n    }\n    int dst=firstEscIdx;\n    for (int i=firstEscIdx; i <= lastEscIdx; i++) {\n      char c=s.charAt(i);\n      if (c == '{' || c == '}' || c == '\\\\') {\n        esced[dst++]='\\\\';\n      }\n      esced[dst++]=c;\n    }\n    if (lastEscIdx != ln - 1) {\n      s.getChars(lastEscIdx + 1,ln,esced,dst);\n    }\n    return String.valueOf(esced);\n  }\n}"}
{"ids": "3826", "raw_code": "public InetNetwork(InetAddress inetAddress,int subnetBits){\n  _inetAddress=inetAddress;\n  _address=inetAddress.getAddress();\n  if (subnetBits < 0)   subnetBits=8 * _address.length;\n  _subnetBits=subnetBits;\n  _subnetByte=subnetBits / 8;\n  _subnetMask=~((1 << (8 - subnetBits % 8)) - 1) & 0xff;\n}"}
{"ids": "60694", "raw_code": "public boolean equalArrayValue(Object otherValue){\n  if (value instanceof Object[] && otherValue instanceof Object[]) {\n    return Arrays.equals((Object[])value,(Object[])otherValue);\n  }\n  Class type=value.getClass();\n  if (type != otherValue.getClass()) {\n    return false;\n  }\n  if (type == int[].class) {\n    return Arrays.equals((int[])value,(int[])otherValue);\n  }\n else   if (type == byte[].class) {\n    return Arrays.equals((byte[])value,(byte[])otherValue);\n  }\n else   if (type == short[].class) {\n    return Arrays.equals((short[])value,(short[])otherValue);\n  }\n else   if (type == long[].class) {\n    return Arrays.equals((long[])value,(long[])otherValue);\n  }\n else   if (type == char[].class) {\n    return Arrays.equals((char[])value,(char[])otherValue);\n  }\n else   if (type == boolean[].class) {\n    return Arrays.equals((boolean[])value,(boolean[])otherValue);\n  }\n else   if (type == float[].class) {\n    return Arrays.equals((float[])value,(float[])otherValue);\n  }\n else   if (type == double[].class) {\n    return Arrays.equals((double[])value,(double[])otherValue);\n  }\n  return false;\n}"}
{"ids": "86458", "raw_code": "@Override public HierarchyWrapperOperation createSubOperation(){\n  return new ToStringOperation(builder,baseIndent);\n}"}
{"ids": "9145", "raw_code": "protected final boolean execute() throws AdeException {\n  logger.info(\"Starting execution: \" + m_requestType.name());\n  final long start=System.currentTimeMillis();\n  final boolean success=doControlLogic();\n  final long total=System.currentTimeMillis() - start;\n  logger.info(m_requestType.name() + (success ? \" done. \" : \" failed. \") + \"Total time elapsed: \"+ millisecondsToHumanTime(total));\n  return success;\n}"}
{"ids": "73681", "raw_code": "private boolean validConsist(){\n  int cN=validConsist(consistTextField.getText());\n  if (cN == -1) {\n    consistStatus.setText(rb.getString(\"EditStateERROR\"));\n    JOptionPane.showMessageDialog(this,rb.getString(\"ToolTipConsist\"),rb.getString(\"DIALOG_NceConsist\"),JOptionPane.ERROR_MESSAGE);\n    return false;\n  }\n  return true;\n}"}
{"ids": "55379", "raw_code": "private void activity(){\n  connectionCheckedCount=0;\n}"}
{"ids": "7332", "raw_code": "public static ScheduleSpec computeValues(Object[] args) throws ScheduleParameterException {\n  if (args.length <= 4 || args.length >= 8) {\n    throw new ScheduleParameterException(\"Invalid number of crontab parameters, expecting between 5 and 7 parameters, received \" + args.length);\n  }\n  EnumMap<ScheduleUnit,SortedSet<Integer>> unitMap=new EnumMap<ScheduleUnit,SortedSet<Integer>>(ScheduleUnit.class);\n  Object minutes=args[0];\n  Object hours=args[1];\n  Object daysOfMonth=args[2];\n  Object months=args[3];\n  Object daysOfWeek=args[4];\n  unitMap.put(ScheduleUnit.MINUTES,computeValues(minutes,ScheduleUnit.MINUTES));\n  unitMap.put(ScheduleUnit.HOURS,computeValues(hours,ScheduleUnit.HOURS));\n  SortedSet<Integer> resultMonths=computeValues(months,ScheduleUnit.MONTHS);\n  if (daysOfWeek instanceof CronParameter && daysOfMonth instanceof CronParameter) {\n    throw new ScheduleParameterException(\"Invalid combination between days of week and days of month fields for timer:at\");\n  }\n  if (resultMonths != null && resultMonths.size() == 1 && (resultMonths.first() instanceof Integer)) {\n    CronParameter parameter=null;\n    if (daysOfMonth instanceof CronParameter) {\n      parameter=((CronParameter)daysOfMonth);\n    }\n else     if (daysOfWeek instanceof CronParameter) {\n      parameter=((CronParameter)daysOfWeek);\n    }\n    if (parameter != null) {\n      parameter.setMonth(resultMonths.first());\n    }\n  }\n  SortedSet<Integer> resultDaysOfWeek=computeValues(daysOfWeek,ScheduleUnit.DAYS_OF_WEEK);\n  SortedSet<Integer> resultDaysOfMonth=computeValues(daysOfMonth,ScheduleUnit.DAYS_OF_MONTH);\n  if (resultDaysOfWeek != null && resultDaysOfWeek.size() == 1 && (resultDaysOfWeek.first() instanceof Integer)) {\n    if (resultDaysOfWeek.first() > 6) {\n      if (resultDaysOfMonth != null) {\n        throw new ScheduleParameterException(\"Invalid combination between days of week and days of month fields for timer:at\");\n      }\n      resultDaysOfMonth=resultDaysOfWeek;\n      resultDaysOfWeek=null;\n    }\n  }\n  if (resultDaysOfMonth != null && resultDaysOfMonth.size() == 1 && (resultDaysOfMonth.first() instanceof Integer)) {\n    if (resultDaysOfWeek != null) {\n      throw new ScheduleParameterException(\"Invalid combination between days of week and days of month fields for timer:at\");\n    }\n  }\n  unitMap.put(ScheduleUnit.DAYS_OF_WEEK,resultDaysOfWeek);\n  unitMap.put(ScheduleUnit.DAYS_OF_MONTH,resultDaysOfMonth);\n  unitMap.put(ScheduleUnit.MONTHS,resultMonths);\n  if (args.length > 5) {\n    unitMap.put(ScheduleUnit.SECONDS,computeValues(args[5],ScheduleUnit.SECONDS));\n  }\n  String timezone=null;\n  if (args.length > 6) {\n    if (!(args[6] instanceof WildcardParameter)) {\n      if (!(args[6] instanceof String)) {\n        throw new ScheduleParameterException(\"Invalid timezone parameter '\" + args[6] + \"' for timer:at, expected a string-type value\");\n      }\n      timezone=(String)args[6];\n    }\n  }\n  CronParameter optionalDayOfMonthOp=getOptionalSpecialOp(daysOfMonth);\n  CronParameter optionalDayOfWeekOp=getOptionalSpecialOp(daysOfWeek);\n  return new ScheduleSpec(unitMap,timezone,optionalDayOfMonthOp,optionalDayOfWeekOp);\n}"}
{"ids": "5801", "raw_code": "public void remove(int position){\n  mData.remove(position);\n  notifyItemRemoved(position + getHeaderLayoutCount());\n}"}
{"ids": "84005", "raw_code": "public AsyncBufferedOutputStream(OutputStream out,int bufSize,int maxBuffers){\n  super(out);\n  buffers=new ConcurrentLinkedDeque<>();\n  buf=new byte[bufSize];\n  flusherThread.start();\n}"}
{"ids": "50294", "raw_code": "public boolean startlistContains(String x){\n  if (startwords == null)   return true;\n  return startwords.contains(x);\n}"}
{"ids": "16905", "raw_code": "private void closeMediaInfo(){\n  if (mediaInfo != null) {\n    mediaInfo.close();\n    mediaInfo=null;\n  }\n  miSnapshot=null;\n}"}
{"ids": "4687", "raw_code": "public void addHeader(final Header header){\n  headers.add(header);\n}"}
{"ids": "31347", "raw_code": "private void readVersion(InputNode node,Object source,Label label) throws Exception {\n  Object value=readInstance(node,source,label);\n  Class expect=type.getType();\n  if (value != null) {\n    Version version=context.getVersion(expect);\n    Double actual=version.revision();\n    if (!value.equals(revision)) {\n      revision.compare(actual,value);\n    }\n  }\n}"}
{"ids": "31750", "raw_code": "protected Ignite startGridWithIgfs(String gridName,String igfsName,IgfsMode mode,@Nullable IgfsSecondaryFileSystem secondaryFs,@Nullable IgfsIpcEndpointConfiguration restCfg) throws Exception {\n  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();\n  igfsCfg.setDataCacheName(\"dataCache\");\n  igfsCfg.setMetaCacheName(\"metaCache\");\n  igfsCfg.setName(igfsName);\n  igfsCfg.setBlockSize(IGFS_BLOCK_SIZE);\n  igfsCfg.setDefaultMode(mode);\n  igfsCfg.setIpcEndpointConfiguration(restCfg);\n  igfsCfg.setSecondaryFileSystem(secondaryFs);\n  igfsCfg.setPrefetchBlocks(PREFETCH_BLOCKS);\n  igfsCfg.setSequentialReadsBeforePrefetch(SEQ_READS_BEFORE_PREFETCH);\n  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();\n  dataCacheCfg.setName(\"dataCache\");\n  dataCacheCfg.setCacheMode(PARTITIONED);\n  dataCacheCfg.setNearConfiguration(null);\n  dataCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);\n  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(2));\n  dataCacheCfg.setBackups(0);\n  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);\n  dataCacheCfg.setOffHeapMaxMemory(0);\n  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();\n  metaCacheCfg.setName(\"metaCache\");\n  metaCacheCfg.setCacheMode(REPLICATED);\n  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);\n  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);\n  IgniteConfiguration cfg=new IgniteConfiguration();\n  cfg.setGridName(gridName);\n  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();\n  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));\n  cfg.setDiscoverySpi(discoSpi);\n  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);\n  cfg.setFileSystemConfiguration(igfsCfg);\n  cfg.setLocalHost(\"127.0.0.1\");\n  cfg.setConnectorConfiguration(null);\n  return G.start(cfg);\n}"}
{"ids": "83063", "raw_code": "TypeSimplifier(Types typeUtils,String packageName,Set<TypeMirror> types,TypeMirror base){\n  this.typeUtils=typeUtils;\n  Set<TypeMirror> typesPlusBase=new TypeMirrorSet(types);\n  if (base != null) {\n    typesPlusBase.add(base);\n  }\n  Set<TypeMirror> referenced=referencedClassTypes(typeUtils,typesPlusBase);\n  Set<TypeMirror> defined=nonPrivateDeclaredTypes(typeUtils,base);\n  this.imports=findImports(typeUtils,packageName,referenced,defined);\n}"}
{"ids": "20487", "raw_code": "private List<Statistics> removeFailed(List<Statistics> statistics){\n  List<Statistics> result=new ArrayList<>();\n  for (  Statistics statistic : statistics) {\n    if (statistic.getSucceeded())     result.add(statistic);\n  }\n  return result;\n}"}
{"ids": "78473", "raw_code": "public void addAssociatedGefahr(GefaehrdungsUmsetzung gefaehrdung){\n  if (!associatedGefaehrdungen.contains(gefaehrdung)) {\n    associatedGefaehrdungen.add(gefaehrdung);\n  }\n}"}
{"ids": "79087", "raw_code": "public static byte[] packByteBufferIntoSingleByteArray(ByteBuffer[] byteBufferArr){\n  if (null == byteBufferArr || byteBufferArr.length == 0) {\n    return null;\n  }\n  int noOfCol=byteBufferArr.length;\n  short toDetermineLengthOfByteArr=2;\n  short offsetLen=(short)(noOfCol * 2 + toDetermineLengthOfByteArr);\n  int totalBytes=calculateTotalBytes(byteBufferArr) + offsetLen;\n  ByteBuffer buffer=ByteBuffer.allocate(totalBytes);\n  buffer.putShort((short)(totalBytes - toDetermineLengthOfByteArr));\n  buffer.putShort(offsetLen);\n  for (int index=0; index < byteBufferArr.length - 1; index++) {\n    ByteBuffer individualCol=byteBufferArr[index];\n    int noOfBytes=individualCol.capacity();\n    buffer.putShort((short)(offsetLen + noOfBytes));\n    offsetLen+=noOfBytes;\n    individualCol.rewind();\n  }\n  for (int index=0; index < byteBufferArr.length; index++) {\n    ByteBuffer individualCol=byteBufferArr[index];\n    buffer.put(individualCol.array());\n  }\n  buffer.rewind();\n  return buffer.array();\n}"}
{"ids": "34917", "raw_code": "public void connect(SocketAddress endpoint,int timeout) throws IOException {\n  if (endpoint == null)   throw new IllegalArgumentException(\"connect: The address can't be null\");\n  if (timeout < 0)   throw new IllegalArgumentException(\"connect: timeout can't be negative\");\n  if (isClosed())   throw new SocketException(\"Socket is closed\");\n  if (!oldImpl && isConnected())   throw new SocketException(\"already connected\");\n  if (!(endpoint instanceof InetSocketAddress))   throw new IllegalArgumentException(\"Unsupported address type\");\n  InetSocketAddress epoint=(InetSocketAddress)endpoint;\n  InetAddress addr=epoint.getAddress();\n  int port=epoint.getPort();\n  checkAddress(addr,\"connect\");\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    if (epoint.isUnresolved())     security.checkConnect(epoint.getHostName(),port);\n else     security.checkConnect(addr.getHostAddress(),port);\n  }\n  if (!created)   createImpl(true);\n  if (!oldImpl)   impl.connect(epoint,timeout);\n else   if (timeout == 0) {\n    if (epoint.isUnresolved())     impl.connect(addr.getHostName(),port);\n else     impl.connect(addr,port);\n  }\n else   throw new UnsupportedOperationException(\"SocketImpl.connect(addr, timeout)\");\n  connected=true;\n  bound=true;\n}"}
{"ids": "29631", "raw_code": "private Pair<HashStepType,HashChainType> fetchHashStep(String uri,HashChainType currentChain) throws Exception {\n  int hashIndex=uri.indexOf('#');\n  if (hashIndex < 0) {\n    throw new CodedException(X_MALFORMED_HASH_CHAIN,\"Invalid hash step URI: %s\",uri);\n  }\n  String baseUri=uri.substring(0,hashIndex);\n  String fragment=uri.substring(hashIndex + 1);\n  if (fragment.isEmpty()) {\n    throw new CodedException(X_MALFORMED_HASH_CHAIN,\"Invalid hash step URI: %s\",uri);\n  }\n  HashChainType hashChain;\n  if (baseUri.isEmpty()) {\n    hashChain=currentChain;\n  }\n else {\n    hashChain=getHashChain(baseUri);\n  }\n  for (  HashStepType step : hashChain.getHashStep()) {\n    if (fragment.equals(step.getId())) {\n      return new ImmutablePair<>(step,hashChain);\n    }\n  }\n  throw new CodedException(X_MALFORMED_HASH_CHAIN,\"Invalid hash step URI: %s\",uri);\n}"}
{"ids": "32167", "raw_code": "@SuppressWarnings(\"RedundantIfStatement\") public static boolean loadByCurrentClassloader(String clsName){\n  if (clsName.startsWith(\"org.apache.ignite.internal.processors.hadoop.impl\"))   return true;\n  if (clsName.startsWith(\"org.apache.ignite.hadoop\")) {\n    if (clsName.contains(\"org.apache.ignite.hadoop.fs.v1.IgniteHadoopFileSystem\") || clsName.contains(\"org.apache.ignite.hadoop.fs.v2.IgniteHadoopFileSystem\") || clsName.contains(\"org.apache.ignite.hadoop.mapreduce.IgniteHadoopClientProtocolProvider\"))     return true;\n  }\n  return false;\n}"}
{"ids": "67426", "raw_code": "public void decrementTargetsCountAll(){\n  final long decrementAndGet=targetsCountAll.decrementAndGet();\n  if (decrementAndGet < 0) {\n    targetsCountAll.set(0);\n  }\n}"}
{"ids": "56762", "raw_code": "private void addNotAvailableBusinessObjectDataStatuses(List<BusinessObjectDataStatus> notAvailableStatuses,List<StorageUnitEntity> storageUnitEntities,Set<BusinessObjectDataEntity> archivedBusinessObjectDataEntities){\n  for (  StorageUnitEntity storageUnitEntity : storageUnitEntities) {\n    notAvailableStatuses.add(createNotAvailableBusinessObjectDataStatus(storageUnitEntity,archivedBusinessObjectDataEntities));\n  }\n}"}
{"ids": "56857", "raw_code": "private List<JdbcStatement> createDefaultQueryJdbcStatements(){\n  List<JdbcStatement> jdbcStatements=new ArrayList<>();\n{\n    JdbcStatement jdbcStatement=new JdbcStatement();\n    jdbcStatement.setType(JdbcStatementType.QUERY);\n    jdbcStatement.setSql(MockJdbcOperations.CASE_1_SQL);\n    jdbcStatements.add(jdbcStatement);\n  }\n  return jdbcStatements;\n}"}
{"ids": "41323", "raw_code": "public static boolean isValid(Date expirationDate){\n  Date currentDate=new Date();\n  String formattedDate=dateFormat.format(currentDate);\n  currentDate=convertDate(formattedDate);\n  boolean isExpired=currentDate.after(expirationDate);\n  boolean isEqual=currentDate.equals(expirationDate);\n  if (isExpired == true || isEqual == true) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "25262", "raw_code": "public long contentLength(){\n  long size;\n  try {\n    size=Long.parseLong(request.getHeader(FileUpload.CONTENT_LENGTH));\n  }\n catch (  NumberFormatException e) {\n    size=request.getContentLength();\n  }\n  return size;\n}"}
{"ids": "44180", "raw_code": "public CheckBox addListener(Listener listener){\n  if (listener != null && !listeners.contains(listener)) {\n    listeners.add(listener);\n  }\n  return this;\n}"}
{"ids": "64460", "raw_code": "private void takePicture(){\n  Log.d(TAG,\"takePicture: \");\n  lockFocus();\n}"}
{"ids": "46305", "raw_code": "private static int[][] parse(String members){\n  Vector theRanges=new Vector();\n  int n=(members == null ? 0 : members.length());\n  int i=0;\n  int state=0;\n  int lb=0;\n  int ub=0;\n  char c;\n  int digit;\n  while (i < n) {\n    c=members.charAt(i++);\nswitch (state) {\ncase 0:\n      if (Character.isWhitespace(c)) {\n        state=0;\n      }\n else       if ((digit=Character.digit(c,10)) != -1) {\n        lb=digit;\n        state=1;\n      }\n else {\n        throw new IllegalArgumentException();\n      }\n    break;\ncase 1:\n  if (Character.isWhitespace(c)) {\n    state=2;\n  }\n else   if ((digit=Character.digit(c,10)) != -1) {\n    lb=10 * lb + digit;\n    state=1;\n  }\n else   if (c == '-' || c == ':') {\n    state=3;\n  }\n else   if (c == ',') {\n    accumulate(theRanges,lb,lb);\n    state=6;\n  }\n else {\n    throw new IllegalArgumentException();\n  }\nbreak;\ncase 2:\nif (Character.isWhitespace(c)) {\nstate=2;\n}\n else if (c == '-' || c == ':') {\nstate=3;\n}\n else if (c == ',') {\naccumulate(theRanges,lb,lb);\nstate=6;\n}\n else {\nthrow new IllegalArgumentException();\n}\nbreak;\ncase 3:\nif (Character.isWhitespace(c)) {\nstate=3;\n}\n else if ((digit=Character.digit(c,10)) != -1) {\nub=digit;\nstate=4;\n}\n else {\nthrow new IllegalArgumentException();\n}\nbreak;\ncase 4:\nif (Character.isWhitespace(c)) {\nstate=5;\n}\n else if ((digit=Character.digit(c,10)) != -1) {\nub=10 * ub + digit;\nstate=4;\n}\n else if (c == ',') {\naccumulate(theRanges,lb,ub);\nstate=6;\n}\n else {\nthrow new IllegalArgumentException();\n}\nbreak;\ncase 5:\nif (Character.isWhitespace(c)) {\nstate=5;\n}\n else if (c == ',') {\naccumulate(theRanges,lb,ub);\nstate=6;\n}\n else {\nthrow new IllegalArgumentException();\n}\nbreak;\ncase 6:\nif (Character.isWhitespace(c)) {\nstate=6;\n}\n else if ((digit=Character.digit(c,10)) != -1) {\nlb=digit;\nstate=1;\n}\n else {\nthrow new IllegalArgumentException();\n}\nbreak;\n}\n}\nswitch (state) {\ncase 0:\nbreak;\ncase 1:\ncase 2:\naccumulate(theRanges,lb,lb);\nbreak;\ncase 4:\ncase 5:\naccumulate(theRanges,lb,ub);\nbreak;\ncase 3:\ncase 6:\nthrow new IllegalArgumentException();\n}\nreturn canonicalArrayForm(theRanges);\n}"}
{"ids": "32698", "raw_code": "public static String showDialog(final Component component,final String title,final Object message,final String... buttons){\n  return showDialog(JOptionPane.getFrameForComponent(component),title,message,JOptionPane.PLAIN_MESSAGE,buttons);\n}"}
{"ids": "85593", "raw_code": "protected void sendMessage(String handler,List<?> arguments){\n  ownerMessage.addEvent(Type.CLIENT_SEND_MESSAGE,handler,arguments);\n  syncEvents.add(new SharedObjectEvent(Type.CLIENT_SEND_MESSAGE,handler,arguments));\n  sendStats.incrementAndGet();\n}"}
{"ids": "83995", "raw_code": "public void taskNow(final Runnable r,boolean async){\n  if (async) {\n    async(r);\n  }\n else   if (r != null) {\n    r.run();\n  }\n}"}
{"ids": "68801", "raw_code": "public void reset(){\n  cur.reset();\n  line.reset();\n  inuse=true;\n  word.setLength(0);\n}"}
{"ids": "46125", "raw_code": "protected void engineSetMode(String mode) throws NoSuchAlgorithmException {\n  if ((mode != null) && (!mode.equalsIgnoreCase(\"CBC\"))) {\n    throw new NoSuchAlgorithmException(\"Invalid cipher mode: \" + mode);\n  }\n}"}
{"ids": "2319", "raw_code": "private void movePos(float deltaY){\n  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {\n    if (DEBUG) {\n      PtrCLog.e(LOG_TAG,String.format(\"has reached the top\"));\n    }\n    return;\n  }\n  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;\n  if (mPtrIndicator.willOverTop(to)) {\n    if (DEBUG) {\n      PtrCLog.e(LOG_TAG,String.format(\"over top\"));\n    }\n    to=PtrIndicator.POS_START;\n  }\n  mPtrIndicator.setCurrentPos(to);\n  int change=to - mPtrIndicator.getLastPosY();\n  updatePos(change);\n}"}
{"ids": "79365", "raw_code": "public static List<? extends Element> childElementList(DocumentFragment fragment){\n  if (fragment == null)   return null;\n  List<Element> elements=new LinkedList<Element>();\n  Node node=fragment.getFirstChild();\n  if (node != null) {\n    do {\n      if (node.getNodeType() == Node.ELEMENT_NODE) {\n        Element childElement=(Element)node;\n        elements.add(childElement);\n      }\n    }\n while ((node=node.getNextSibling()) != null);\n  }\n  return elements;\n}"}
{"ids": "61635", "raw_code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n  if (subSignature.equals(\"void set(java.lang.Object,java.lang.Object)\")) {\n    java_lang_reflect_Field_set(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"java.lang.Object get(java.lang.Object)\")) {\n    java_lang_reflect_Field_get(method,thisVar,returnVar,params);\n    return;\n  }\n else {\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}"}
{"ids": "56220", "raw_code": "public FloatArray resize(FloatArray array,long size){\n  if (array instanceof BigFloatArray) {\n    return resizeInPlace((BigFloatArray)array,size);\n  }\n else {\n    AbstractArray arr=(AbstractArray)array;\n    final FloatArray newArray=newFloatArray(size,arr.clearOnResize);\n    for (long i=0, end=Math.min(size,array.size()); i < end; ++i) {\n      newArray.set(i,array.get(i));\n    }\n    arr.close();\n    return newArray;\n  }\n}"}
{"ids": "4717", "raw_code": "@Override public boolean domainMatch(final String host,String domain){\n  if (host.equals(domain)) {\n    return true;\n  }\n  if (!domain.startsWith(\".\")) {\n    domain=\".\" + domain;\n  }\n  return host.endsWith(domain) || host.equals(domain.substring(1));\n}"}
{"ids": "62145", "raw_code": "public boolean isDirty(String key){\n  return dirtyKeys.contains(key);\n}"}
{"ids": "3660", "raw_code": "final public void println(float v){\n  Writer out=this.out;\n  if (out == null)   return;\n  String s=String.valueOf(v);\n  try {\n    out.write(s,0,s.length());\n    out.write(_newline,0,_newline.length);\n  }\n catch (  IOException e) {\n    log.log(Level.FINE,e.toString(),e);\n  }\n}"}
{"ids": "64444", "raw_code": "public static BigInteger sizeOfDirectoryAsBigInteger(File directory){\n  checkDirectory(directory);\n  final File[] files=directory.listFiles();\n  if (files == null) {\n    return BigInteger.ZERO;\n  }\n  BigInteger size=BigInteger.ZERO;\n  for (  final File file : files) {\n    try {\n      if (!isSymlink(file)) {\n        size=size.add(BigInteger.valueOf(sizeOf(file)));\n      }\n    }\n catch (    IOException ioe) {\n    }\n  }\n  return size;\n}"}
{"ids": "38046", "raw_code": "public double logDensityForInstance(Instance instance) throws Exception {\n  double[] a=logJointDensitiesForInstance(instance);\n  double max=a[Utils.maxIndex(a)];\n  double sum=0.0;\n  for (int i=0; i < a.length; i++) {\n    sum+=Math.exp(a[i] - max);\n  }\n  return max + Math.log(sum);\n}"}
{"ids": "74683", "raw_code": "public static Angle greatCircleDistance(LatLon p1,LatLon p2){\n  if ((p1 == null) || (p2 == null)) {\n    throw new IllegalArgumentException(\"Lat Lon Is Null\");\n  }\n  double lat1=p1.getLatitude().radians;\n  double lon1=p1.getLongitude().radians;\n  double lat2=p2.getLatitude().radians;\n  double lon2=p2.getLongitude().radians;\n  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;\n  double a=Math.sin((lat2 - lat1) / 2.0);\n  double b=Math.sin((lon2 - lon1) / 2.0);\n  double c=a * a + +Math.cos(lat1) * Math.cos(lat2) * b* b;\n  double distanceRadians=2.0 * Math.asin(Math.sqrt(c));\n  return Double.isNaN(distanceRadians) ? Angle.ZERO : Angle.fromRadians(distanceRadians);\n}"}
{"ids": "82551", "raw_code": "public int indexOf(java.lang.String subString,int start){\n  if (start < 0) {\n    start=0;\n  }\n  int subCount=subString.count;\n  int _count=count;\n  if (subCount > 0) {\n    if (subCount + start > _count) {\n      return -1;\n    }\n    char[] target=subString.value;\n    int subOffset=subString.offset;\n    char firstChar=target[subOffset];\n    int end=subOffset + subCount;\n    while (true) {\n      int i=indexOf(firstChar,start);\n      if (i == -1 || subCount + i > _count) {\n        return -1;\n      }\n      int o1=offset + i, o2=subOffset;\n      char[] _value=value;\n      while (++o2 < end && _value[++o1] == target[o2]) {\n      }\n      if (o2 == end) {\n        return i;\n      }\n      start=i + 1;\n    }\n  }\n  return start < _count ? start : _count;\n}"}
{"ids": "77197", "raw_code": "@Override public Query rewrite(IndexReader reader) throws IOException {\n  if (disjuncts.length == 1) {\n    return disjuncts[0];\n  }\n  boolean actuallyRewritten=false;\n  List<Query> rewrittenDisjuncts=new ArrayList<>();\n  for (  Query sub : disjuncts) {\n    Query rewrittenSub=sub.rewrite(reader);\n    actuallyRewritten|=rewrittenSub != sub;\n    rewrittenDisjuncts.add(rewrittenSub);\n  }\n  if (actuallyRewritten) {\n    return new DisjunctionMaxQuery(rewrittenDisjuncts,tieBreakerMultiplier);\n  }\n  return super.rewrite(reader);\n}"}
{"ids": "42248", "raw_code": "public static String valueOf(long value){\n  return Long.toString(value);\n}"}
{"ids": "66737", "raw_code": "public static <T>boolean areSetsIdentical(final Set<T> set1,final Set<T> set2){\n  if (set1 == set2)   return true;\n  if (CollectionUtil.size(set1) != CollectionUtil.size(set2))   return false;\n  if (CollectionUtil.isEmpty(set1))   return true;\n  for (  final T t : set1)   if (!set2.contains(t))   return false;\n  return true;\n}"}
{"ids": "61945", "raw_code": "@Override public int compareTo(Value o){\n  return hashCode() - o.hashCode();\n}"}
{"ids": "34971", "raw_code": "private static void addOptions(final List<String> cmd,Map<CheckerProp,Object> props){\n  for (  CheckerProp cp : CheckerProp.values()) {\n    cmd.addAll(cp.getCmdLine(props));\n  }\n}"}
{"ids": "31845", "raw_code": "public boolean obsolete(){\n  int[] stamp=new int[1];\n  boolean undeployed=usage.get(stamp);\n  return undeployed && stamp[0] == 0;\n}"}
{"ids": "18223", "raw_code": "boolean popNamespace(String prefix){\n  if (prefix.startsWith(XML_PREFIX)) {\n    return false;\n  }\n  Stack stack;\n  if ((stack=getPrefixStack(prefix)) != null) {\n    stack.pop();\n    return true;\n  }\n  return false;\n}"}
{"ids": "45076", "raw_code": "public void redoLastAction(){\n  try {\n    if (undoManager.canRedo())     undoManager.redo();\n  }\n catch (  CannotRedoException cre) {\n    cre.printStackTrace();\n  }\n}"}
{"ids": "74095", "raw_code": "protected void continueWrite(){\n  if (log.isDebugEnabled()) {\n    log.debug(\"Start continueWrite\");\n  }\n  Iterator<VariableValue> i=variables.iterator();\n  while (i.hasNext()) {\n    VariableValue v=i.next();\n    if (v.isToWrite() && (!writingChanges || v.isChanged())) {\n      amWriting=true;\n      setBusy(true);\n      log.debug(\"request write of \" + v.label() + \" writing changes \"+ writingChanges);\n      if (writingChanges) {\n        v.writeChanges();\n      }\n else {\n        v.writeAll();\n      }\n      log.debug(\"return from starting write request\");\n      return;\n    }\n  }\n  amWriting=false;\n  super.setState(STORED);\n  setBusy(false);\n  log.debug(\"End continueWrite, nothing to do\");\n}"}
{"ids": "67334", "raw_code": "private void startGame(GameLaunchMessage gameLaunchMessage,Faction faction,RatingMode ratingMode,Integer localRelayPort){\n  if (isRunning()) {\n    logger.warn(\"Forged Alliance is already running, not starting game\");\n    return;\n  }\n  stopSearchRanked1v1();\n  List<String> args=fixMalformedArgs(gameLaunchMessage.getArgs());\n  try {\n    localRelayServer.getPort();\n    process=forgedAllianceService.startGame(gameLaunchMessage.getUid(),gameLaunchMessage.getMod(),faction,args,ratingMode,localRelayPort,rehostRequested);\n    setGameRunning(true);\n    this.ratingMode=ratingMode;\n    spawnTerminationListener(process);\n  }\n catch (  IOException e) {\n    logger.warn(\"Game could not be started\",e);\n    notificationService.addNotification(new ImmediateNotification(i18n.get(\"errorTitle\"),i18n.get(\"game.start.couldNotStart\"),Severity.ERROR,e,Arrays.asList(new ReportAction(i18n,reportingService,e),new DismissAction(i18n))));\n  }\n}"}
{"ids": "31432", "raw_code": "public void addLine(String line){\n  int index=line.indexOf(\":\",1);\n  if (index != -1) {\n    addLenient(line.substring(0,index),line.substring(index + 1));\n  }\n else   if (line.startsWith(\":\")) {\n    addLenient(\"\",line.substring(1));\n  }\n else {\n    addLenient(\"\",line);\n  }\n}"}
{"ids": "54940", "raw_code": "private synchronized void addEntries(Hashtable entries){\n  entryDirectory.putAll(entries);\n}"}
{"ids": "45677", "raw_code": "@RequestMapping(value={\"/admin/update/\",\"/admin/update\"},method=RequestMethod.POST) @ResponseBody public RestWrapper updateOneRecord(@ModelAttribute(\"generalConfig\") @Valid GeneralConfig generalConfig,BindingResult bindingResult,Principal principal){\n  RestWrapper restWrapper=null;\n  if (bindingResult.hasErrors()) {\n    BindingResultError bindingResultError=new BindingResultError();\n    return bindingResultError.errorMessage(bindingResult);\n  }\n  try {\n    if (generalConfig.getRequired() <= 1) {\n      com.wipro.ats.bdre.md.dao.jpa.GeneralConfig jpaGeneralConfigUpdate=new com.wipro.ats.bdre.md.dao.jpa.GeneralConfig();\n      GeneralConfigId jpaGeneralConfigId=new GeneralConfigId();\n      jpaGeneralConfigId.setConfigGroup(generalConfig.getConfigGroup());\n      jpaGeneralConfigId.setGcKey(generalConfig.getKey());\n      jpaGeneralConfigUpdate.setId(jpaGeneralConfigId);\n      jpaGeneralConfigUpdate.setDefaultVal(generalConfig.getDefaultVal());\n      jpaGeneralConfigUpdate.setDescription(generalConfig.getDescription());\n      jpaGeneralConfigUpdate.setEnabled(generalConfig.isEnabled());\n      jpaGeneralConfigUpdate.setGcValue(generalConfig.getValue());\n      if (generalConfig.getRequired() == 1)       jpaGeneralConfigUpdate.setRequired(true);\n else       jpaGeneralConfigUpdate.setRequired(false);\n      jpaGeneralConfigUpdate.setType(generalConfig.getType());\n      LOGGER.info(generalConfig);\n      generalConfigDAO.update(jpaGeneralConfigUpdate);\n      restWrapper=new RestWrapper(generalConfig,RestWrapper.OK);\n      LOGGER.info(\" Record with key:\" + jpaGeneralConfigId.getGcKey() + \" and config group:\"+ jpaGeneralConfigId.getConfigGroup()+ \" updated in general_config by User:\"+ principal.getName());\n    }\n else {\n      LOGGER.error(\"Invalid required field's data\");\n      restWrapper=new RestWrapper(\"Required field does not accest value other than 0 or 1\",RestWrapper.ERROR);\n    }\n  }\n catch (  MetadataException e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\n  return restWrapper;\n}"}
{"ids": "37050", "raw_code": "public static void loadProject(final JTree tree,final INaviProject project){\n  Preconditions.checkNotNull(tree,\"IE01435: Tree argument can not be null\");\n  Preconditions.checkNotNull(project,\"IE01436: Project argument can not be null\");\n  loadProjectThreaded(SwingUtilities.getWindowAncestor(tree),project,tree);\n}"}
{"ids": "75649", "raw_code": "public Enumeration listOptions(){\n  Vector newVector=new Vector(2);\n  newVector.addElement(new Option(\"\\tChange generalization parameter Rho\\n\",\"P\",0,\"-P\"));\n  newVector.addElement(new Option(\"\\tUse ranking to class function special dev. for ARAM.\\n\",\"K\",0,\"-K\"));\n  newVector.addElement(new Option(\"\\tUse report file to output debug specific information of ARAM.\\n\",\"Rt\",0,\"-Rt\"));\n  return newVector.elements();\n}"}
{"ids": "24002", "raw_code": "public static DataPolicy fromOrdinal(byte ordinal){\n  return VALUES[ordinal];\n}"}
{"ids": "56101", "raw_code": "public static boolean isInstalled(PackageManager packageManager,String packageName){\n  List<PackageInfo> packs=packageManager.getInstalledPackages(0);\n  for (int i=0; i < packs.size(); i++) {\n    if (TextUtils.equals(packs.get(i).packageName,packageName))     return true;\n  }\n  return false;\n}"}
{"ids": "42097", "raw_code": "public void addSetAttribute(final SetAttribute setAttribute){\n  setAttributes.add(setAttribute);\n}"}
{"ids": "72168", "raw_code": "static String applyTemplate(final String template,final Map<String,Object> map){\n  configuration=getConfiguration();\n  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream();Writer writer=new OutputStreamWriter(outputStream)){\n    Template configurationTemplate=configuration.getTemplate(template);\n    configurationTemplate.process(map,writer);\n    return outputStream.toString();\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e.getMessage(),e);\n  }\n}"}
{"ids": "48720", "raw_code": "final void putShort(int offset,short value){\n  unsafe.putShort(offset + address,value);\n}"}
{"ids": "1247", "raw_code": "public static Clob toClob(Object value) throws PageException {\n  if (value instanceof Clob)   return (Clob)value;\n else   if (value instanceof char[])   return toClob(new String((char[])value));\n else   if (value instanceof Reader) {\n    StringWriter sw=new StringWriter();\n    try {\n      IOUtil.copy((Reader)value,sw,false,true);\n    }\n catch (    IOException e) {\n      throw ExpressionException.newInstance(e);\n    }\n    return toClob(sw.toString());\n  }\n  return toClob(Caster.toString(value));\n}"}
{"ids": "36487", "raw_code": "private JFreeChart createHistogramChart(ExampleSet exampleSet){\n  JFreeChart chart=ChartFactory.createHistogram(null,null,null,createHistogramDataset(exampleSet),PlotOrientation.VERTICAL,false,false,false);\n  AbstractAttributeStatisticsModel.setDefaultChartFonts(chart);\n  chart.setBackgroundPaint(null);\n  chart.setBackgroundImageAlpha(0.0f);\n  XYPlot plot=(XYPlot)chart.getPlot();\n  plot.setRangeGridlinesVisible(false);\n  plot.setDomainGridlinesVisible(false);\n  plot.setOutlineVisible(false);\n  plot.setRangeZeroBaselineVisible(false);\n  plot.setDomainZeroBaselineVisible(false);\n  plot.setBackgroundPaint(COLOR_INVISIBLE);\n  plot.setBackgroundImageAlpha(0.0f);\n  XYBarRenderer renderer=(XYBarRenderer)plot.getRenderer();\n  renderer.setSeriesPaint(0,AttributeGuiTools.getColorForValueType(Ontology.NUMERICAL));\n  renderer.setBarPainter(new StandardXYBarPainter());\n  renderer.setDrawBarOutline(true);\n  renderer.setShadowVisible(false);\n  return chart;\n}"}
{"ids": "84423", "raw_code": "List<Type> save(){\n  ListBuffer<Type> buf=new ListBuffer<>();\n  for (  Type t : undetvars) {\n    UndetVar uv=(UndetVar)t;\n    UndetVar uv2=new UndetVar((TypeVar)uv.qtype,types);\n    for (    InferenceBound ib : InferenceBound.values()) {\n      for (      Type b : uv.getBounds(ib)) {\n        uv2.addBound(ib,b,types);\n      }\n    }\n    uv2.inst=uv.inst;\n    buf.add(uv2);\n  }\n  return buf.toList();\n}"}
{"ids": "69162", "raw_code": "public int executeProcess(){\n  final List<String> processStrings=tokenizeString(execCommand);\n  processStrings.addAll(tokenizeString(script));\n  logger.info(MessageFormat.format(\"Executing {0} ...\",processStrings));\n  final ProcessBuilder processBuilder=new ProcessBuilder(processStrings);\n  if (workingDirectory != null) {\n    final Path dir=Paths.get(workingDirectory);\n    if (Files.notExists(dir)) {\n      try {\n        Files.createDirectories(dir);\n      }\n catch (      IOException e) {\n        logger.warning(\"Could not create working directory: \" + workingDirectory);\n        return -3;\n      }\n    }\n else     if (!Files.isDirectory(dir)) {\n      logger.warning(workingDirectory + \" already exists but is not a directory.\");\n      return -4;\n    }\n    final File directory=dir.toFile();\n    processBuilder.directory(directory);\n  }\n  processBuilder.redirectErrorStream(true);\n  Integer exitValue;\n  try {\n    logger.info(\"Starting external process ...\");\n    final Process process=processBuilder.start();\n    sendInputStringToProcess(process);\n    handleProcessOutput(process);\n    try {\n      exitValue=process.waitFor();\n    }\n catch (    InterruptedException e) {\n      logger.warning(\"Interrupted while waiting, killing external process ...\");\n      process.destroy();\n      exitValue=-2;\n    }\n    logger.info(\"External process exit value \" + exitValue + \".\");\n  }\n catch (  IOException e) {\n    logger.log(SEVERE,\"Failed to start external Process: \",e.getCause());\n    exitValue=-1;\n  }\n  return exitValue;\n}"}
{"ids": "54236", "raw_code": "static void checkMethodDesc(final String desc){\n  if (desc == null || desc.length() == 0) {\n    throw new IllegalArgumentException(\"Invalid method descriptor (must not be null or empty)\");\n  }\n  if (desc.charAt(0) != '(' || desc.length() < 3) {\n    throw new IllegalArgumentException(\"Invalid descriptor: \" + desc);\n  }\n  int start=1;\n  if (desc.charAt(start) != ')') {\n    do {\n      if (desc.charAt(start) == 'V') {\n        throw new IllegalArgumentException(\"Invalid descriptor: \" + desc);\n      }\n      start=checkDesc(desc,start,false);\n    }\n while (start < desc.length() && desc.charAt(start) != ')');\n  }\n  start=checkDesc(desc,start + 1,true);\n  if (start != desc.length()) {\n    throw new IllegalArgumentException(\"Invalid descriptor: \" + desc);\n  }\n}"}
{"ids": "85212", "raw_code": "protected Rectangle applyMargins(Rectangle rect,float[] margins,boolean reverse){\n  if (isPositioned())   return rect;\n  return rect.<Rectangle>applyMargins(margins[0],margins[1],margins[2],margins[3],reverse);\n}"}
{"ids": "32684", "raw_code": "private void resetAttempts(){\n  for (  final PoliticalActionAttachment paa : PoliticalActionAttachment.getPoliticalActionAttachments(m_player)) {\n    paa.resetAttempts(getBridge());\n  }\n}"}
{"ids": "8210", "raw_code": "public static Number minus(Character left,Character right){\n  return minus(Integer.valueOf(left),right);\n}"}
{"ids": "11558", "raw_code": "public void findAndInit(Object someObj){\n  if (someObj instanceof MouseDelegator) {\n    Debug.message(\"mousemodepanel\",\"MouseModePanel found a MouseDelegator.\");\n    setMouseDelegator((MouseDelegator)someObj);\n  }\n}"}
{"ids": "4768", "raw_code": "public static int toInt(final String value){\n  return Integer.parseInt(value);\n}"}
{"ids": "81789", "raw_code": "protected Object evaluateLeftLessRight(List elements,String lvalue,String rvalue){\n  List array;\n  if (elements instanceof java.util.Vector) {\n    array=new java.util.Vector();\n  }\n else {\n    array=new ArrayList();\n  }\n  for (Iterator e=elements.iterator(); e.hasNext(); ) {\n    Object o=e.next();\n    if (o instanceof StructuredContent) {\n      if ((o=evaluateLeftLessRight((StructuredContent)o,lvalue,rvalue)) != null) {\n        array.add(o);\n      }\n    }\n  }\n  if (array.size() == 1) {\n    return (StructuredContent)array.get(0);\n  }\n  return array;\n}"}
{"ids": "6726", "raw_code": "public void removeCatchable(CatchablePokemon pokemon){\n  if (cachedCatchable.size() > 0) {\n    cachedCatchable.remove(pokemon);\n  }\n}"}
{"ids": "35312", "raw_code": "@SuppressWarnings(\"unchecked\") @Override protected void fillBuffer(){\n  int oldP=p;\n  int index=tokens.size();\n  Token t=tokenSource.nextToken();\n  while (t != null && t.getType() != CharStream.EOF) {\n    int type=t.getType();\n    if (type == InternalN4JSLexer.Solidus || type == InternalN4JSLexer.SolidusEqualsSign || type == InternalN4JSLexer.RightCurlyBracket) {\n      t.setTokenIndex(index);\n      tokens.add(t);\n      index++;\n      break;\n    }\n    boolean discard=false;\n    if (channelOverrideMap != null) {\n      Integer channelI=(Integer)channelOverrideMap.get(Integer.valueOf(type));\n      if (channelI != null) {\n        t.setChannel(channelI.intValue());\n      }\n    }\n    if (discardSet != null && discardSet.contains(Integer.valueOf(type))) {\n      discard=true;\n    }\n else     if (discardOffChannelTokens && t.getChannel() != this.channel) {\n      discard=true;\n    }\n    if (!discard) {\n      t.setTokenIndex(index);\n      tokens.add(t);\n      index++;\n    }\n    t=tokenSource.nextToken();\n  }\n  p=oldP == -1 ? 0 : oldP;\n  p=skipOffTokenChannels(p);\n}"}
{"ids": "83261", "raw_code": "public void writeCountsComparisonList(final String filename,final String format){\n  if (format.compareToIgnoreCase(\"kml\") == 0) {\n    CountSimComparisonKMLWriter kmlWriter=new CountSimComparisonKMLWriter(countsComparisonList,this.network,TransformationFactory.getCoordinateTransformation(this.coordinateSystem,TransformationFactory.WGS84));\n    kmlWriter.writeFile(filename);\n  }\n else   if (format.compareToIgnoreCase(\"txt\") == 0) {\n    CountSimComparisonTableWriter writer=new CountSimComparisonTableWriter(countsComparisonList,Locale.US);\n    writer.writeFile(filename);\n  }\n else {\n    throw new IllegalArgumentException(\"Output format must be txt or kml\");\n  }\n  ComparisonErrorStatsCalculator errorStats=new ComparisonErrorStatsCalculator(countsComparisonList);\n  double[] hours=new double[24];\n  for (int i=1; i < 25; i++) {\n    hours[i - 1]=i;\n  }\n  DoubleArrayTableWriter tableWriter=new DoubleArrayTableWriter();\n  tableWriter.addColumn(hours);\n  tableWriter.addColumn(errorStats.getMeanRelError());\n  tableWriter.writeFile(filename + \"errortable.txt\");\n}"}
{"ids": "13218", "raw_code": "public void putGrammar(DTDGrammar grammar){\n  XMLDTDDescription desc=(XMLDTDDescription)grammar.getGrammarDescription();\n  fGrammars.put(desc,grammar);\n}"}
{"ids": "7091", "raw_code": "public ServiceCall<TranslationResult> translate(final String text,final Language source,final Language target){\n  return translate(Collections.singletonList(text),source,target);\n}"}
{"ids": "74892", "raw_code": "@Override public int execute(final FormObject form,final int type,final String code,final int eventType,final char keyPressed){\n  int messageCode;\n  final String js=code;\n  final String[] args=JSFunction.convertToArray(js);\n  final String command=args[0];\n  if (command.startsWith(\"AF\")) {\n    messageCode=handleAFCommands(form,command,js,args,eventType,keyPressed);\n  }\n else {\n    executeFunctions(js,form,acro);\n    messageCode=ActionHandler.VALUESCHANGED;\n  }\n  if (type == PdfDictionary.F) {\n    calcualteEvent();\n    messageCode=ActionHandler.VALUESCHANGED;\n  }\n  return messageCode;\n}"}
{"ids": "57660", "raw_code": "private Object readResolve(){\nsynchronized (levels) {\n    for (    Level level : levels) {\n      if (value != level.value) {\n        continue;\n      }\n      if (!name.equals(level.name)) {\n        continue;\n      }\n      if (Objects.equal(resourceBundleName,level.resourceBundleName)) {\n        return level;\n      }\n    }\n    levels.add(this);\n    return this;\n  }\n}"}
{"ids": "27134", "raw_code": "private static void repeat(String pattern,int count,Appendable out) throws IOException {\n  while (count >= pattern.length()) {\n    out.append(pattern);\n    count-=pattern.length();\n  }\n  if (count > 0) {\n    out.append(pattern,0,count);\n  }\n}"}
{"ids": "34881", "raw_code": "private void cleanUp(Reference<?> reference) throws ShutDown {\n  Method finalizeReferentMethod=getFinalizeReferentMethod();\n  do {\n    reference.clear();\n    if (reference == frqReference) {\n      throw new ShutDown();\n    }\n    try {\n      finalizeReferentMethod.invoke(reference);\n    }\n catch (    Throwable t) {\n      logger.log(Level.SEVERE,\"Error cleaning up after reference.\",t);\n    }\n  }\n while ((reference=queue.poll()) != null);\n}"}
{"ids": "83983", "raw_code": "private boolean isMineshafterPresent(){\n  try {\n    Class.forName(\"mineshafter.MineServer\");\n    return true;\n  }\n catch (  Exception e) {\n    return false;\n  }\n}"}
{"ids": "26631", "raw_code": "public @CheckForNull Queue.Item run2(@Nonnull String replacementMainScript,@Nonnull Map<String,String> replacementLoadedScripts){\n  List<Action> actions=new ArrayList<Action>();\n  CpsFlowExecution execution=getExecution();\n  if (execution == null) {\n    return null;\n  }\n  actions.add(new ReplayFlowFactoryAction(replacementMainScript,replacementLoadedScripts,execution.isSandbox()));\n  actions.add(new CauseAction(new Cause.UserIdCause(),new ReplayCause(run)));\n  for (  Class<? extends Action> c : COPIED_ACTIONS) {\n    actions.addAll(run.getActions(c));\n  }\n  return ParameterizedJobMixIn.scheduleBuild2(run.getParent(),0,actions.toArray(new Action[actions.size()]));\n}"}
{"ids": "40940", "raw_code": "public static SecretKeys keys(String keysStr) throws InvalidKeyException {\n  String[] keysArr=keysStr.split(\":\");\n  if (keysArr.length != 2) {\n    throw new IllegalArgumentException(\"Cannot parse aesKey:hmacKey\");\n  }\n else {\n    byte[] confidentialityKey=Base64.decode(keysArr[0],BASE64_FLAGS);\n    if (confidentialityKey.length != AES_KEY_LENGTH_BITS / 8) {\n      throw new InvalidKeyException(\"Base64 decoded key is not \" + AES_KEY_LENGTH_BITS + \" bytes\");\n    }\n    byte[] integrityKey=Base64.decode(keysArr[1],BASE64_FLAGS);\n    if (integrityKey.length != HMAC_KEY_LENGTH_BITS / 8) {\n      throw new InvalidKeyException(\"Base64 decoded key is not \" + HMAC_KEY_LENGTH_BITS + \" bytes\");\n    }\n    SecretKeys secretKeys=new SecretKeys();\n    SecretKeySpec secretKeySpec=new SecretKeySpec();\n    secretKeySpec.generate(confidentialityKey,0,confidentialityKey.length,CIPHER);\n    SecretKeySpec secretKeySpec1=new SecretKeySpec();\n    secretKeySpec1.generate(integrityKey,HMAC_ALGORITHM);\n    secretKeys.setConfidentialityKey(secretKeySpec);\n    secretKeys.setIntegrityKey(secretKeySpec1);\n    return secretKeys;\n  }\n}"}
{"ids": "27469", "raw_code": "public Path[] chooseStartingPaths(final int nedges,final Path[] paths){\n  final List<Path> tmp=new LinkedList<Path>();\n  Arrays.sort(paths,0,paths.length,EstimatedCardinalityComparator.INSTANCE);\n  for (int i=0; i < paths.length && i < nedges; i++) {\n    tmp.add(paths[i]);\n  }\n  return tmp.toArray(new Path[tmp.size()]);\n}"}
{"ids": "29168", "raw_code": "private void safeBottomView(){\n  Status status=getOpenStatus();\n  ViewGroup bottom=getBottomView();\n  if (status == Status.Close) {\n    if (bottom.getVisibility() != INVISIBLE)     bottom.setVisibility(INVISIBLE);\n  }\n else {\n    if (bottom.getVisibility() != VISIBLE)     bottom.setVisibility(VISIBLE);\n  }\n}"}
{"ids": "74607", "raw_code": "public static int uniform(int n){\n  if (n <= 0)   throw new IllegalArgumentException(\"Parameter N must be positive\");\n  return random.nextInt(n);\n}"}
{"ids": "13485", "raw_code": "private void viewDelta(final Item item){\n  final DeltaFragment fragment=DeltaFragment.newInstance(item);\n  navigateToFragment(fragment);\n}"}
{"ids": "64382", "raw_code": "public Message(String type,double value){\n  if (!VALID_TYPES.contains(type)) {\n    throw new IllegalArgumentException(type + \" is not a valid message type.\\n\" + \"Valid message types are \\\"FAST\\\", \\\"MEDIUM\\\", and \\\"SLOW\\\".\");\n  }\n  this.type=type;\n  this.value=value;\n}"}
{"ids": "32674", "raw_code": "public void addAll(final CasualtyList casualtyList){\n  m_damaged.addAll(casualtyList.getDamaged());\n  m_killed.addAll(casualtyList.getKilled());\n}"}
{"ids": "62261", "raw_code": "public static String importResultSet(ResultSet source,Database db,String name,ImportFilter filter,boolean useExistingTable) throws SQLException, IOException {\n  ResultSetMetaData md=source.getMetaData();\n  name=TableBuilder.escapeIdentifier(name);\n  Table table=null;\n  if (!useExistingTable || ((table=db.getTable(name)) == null)) {\n    List<ColumnBuilder> columns=toColumns(md);\n    table=createUniqueTable(db,name,columns,md,filter);\n  }\n  List<Object[]> rows=new ArrayList<Object[]>(COPY_TABLE_BATCH_SIZE);\n  int numColumns=md.getColumnCount();\n  while (source.next()) {\n    Object[] row=new Object[numColumns];\n    for (int i=0; i < row.length; i++) {\n      row[i]=source.getObject(i + 1);\n    }\n    row=filter.filterRow(row);\n    if (row == null) {\n      continue;\n    }\n    rows.add(row);\n    if (rows.size() == COPY_TABLE_BATCH_SIZE) {\n      table.addRows(rows);\n      rows.clear();\n    }\n  }\n  if (rows.size() > 0) {\n    table.addRows(rows);\n  }\n  return table.getName();\n}"}
{"ids": "78133", "raw_code": "public static long[] hashToLongs(double datum,long seed){\n  double d=(datum == 0.0) ? 0.0 : datum;\n  long[] data={Double.doubleToLongBits(d)};\n  return hash(data,seed);\n}"}
{"ids": "56083", "raw_code": "private boolean allowUploadCrashDump(){\n  if (isCellularExperimentEnabled())   return isUsageAndCrashReportingEnabled();\n  if (isMobileNetworkCapable()) {\n    String option=mSharedPreferences.getString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpNeverUpload);\n    return option.equals(mCrashDumpAlwaysUpload) || (option.equals(mCrashDumpWifiOnlyUpload) && isWiFiOrEthernetNetwork());\n  }\n  return mSharedPreferences.getBoolean(PREF_CRASH_DUMP_UPLOAD_NO_CELLULAR,false);\n}"}
{"ids": "7953", "raw_code": "private int[] joinMap(int[] a,int[] b){\n  if (a == null) {\n    return b;\n  }\n  if (b == null) {\n    return a;\n  }\n  int[] result=new int[a.length + b.length];\n  System.arraycopy(a,0,result,0,a.length);\n  System.arraycopy(b,0,result,a.length,b.length);\n  return result;\n}"}
{"ids": "31872", "raw_code": "private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {\n  in.defaultReadObject();\n  iter=col.iterator();\n}"}
{"ids": "75799", "raw_code": "public LabelSet(int indices[],boolean sort){\n  this.indices=indices;\n  if (sort == true)   Arrays.sort(this.indices);\n}"}
{"ids": "12503", "raw_code": "public void diffEquals(){\n  double[] col=null;\n  for (int i=0; i < A.length; i++) {\n    col=new double[A[i].length - 1];\n    for (int j=1; j < A[i].length; j++)     col[j - 1]=Math.abs(A[i][j] - A[i][j - 1]);\n    A[i]=col;\n  }\n  n--;\n}"}
{"ids": "3872", "raw_code": "private static void printStackTraceElement(StackTraceElement trace,PrintWriter out,ClassLoader loader){\n  try {\n    LineMap map=getScriptLineMap(trace.getClassName(),loader);\n    if (map != null) {\n      LineMap.Line line=map.getLine(trace.getLineNumber());\n      if (line != null) {\n        out.print(trace.getClassName() + \".\" + trace.getMethodName());\n        out.print(\"(\" + line.getSourceFilename() + \":\");\n        out.println(line.getSourceLine(trace.getLineNumber()) + \")\");\n        return;\n      }\n    }\n  }\n catch (  Throwable e) {\n  }\n  out.println(trace);\n}"}
{"ids": "74878", "raw_code": "public void readInformationObject(final PdfObject infoObj,final ObjectDecoder objectDecoder){\n  try {\n    objectDecoder.checkResolved(infoObj);\n  }\n catch (  final Exception e) {\n    LogWriter.writeLog(\"Exception: \" + e.getMessage());\n  }\n  String newValue;\n  int id;\n  byte[] data;\n  final int count=PdfFileInformation.information_field_IDs.length;\n  for (int i=0; i < count; i++) {\n    id=PdfFileInformation.information_field_IDs[i];\n    if (id == PdfDictionary.Trapped) {\n      newValue=infoObj.getName(id);\n      if (newValue == null) {\n        newValue=\"\";\n      }\n    }\n else {\n      data=infoObj.getTextStreamValueAsByte(id);\n      if (data == null) {\n        newValue=\"\";\n      }\n else {\n        newValue=StringUtils.getTextString(data,false);\n      }\n    }\n    setFieldValue(i,newValue);\n  }\n}"}
{"ids": "65722", "raw_code": "private void cmd_calculateDifference(){\n  BigDecimal previousValue, actualValue;\n  Timestamp today=TimeUtil.getDay(System.currentTimeMillis());\n  MCash cash=MCash.get(p_pos.getCtx(),p_pos.getC_CashBook_ID(),today,null);\n  v_previousBalance.setValue(cash.getEndingBalance());\n  previousValue=cash.getEndingBalance();\n  actualValue=(BigDecimal)v_ActualBalance.getValue();\n  v_difference.setValue(actualValue.subtract(previousValue));\n}"}
{"ids": "59518", "raw_code": "private void requestForUpload(OCFile file){\n  FileUploader.UploadRequester requester=new FileUploader.UploadRequester();\n  requester.uploadUpdate(mContext,mAccount,file,FileUploader.LOCAL_BEHAVIOUR_MOVE,true);\n  mTransferWasRequested=true;\n}"}
{"ids": "33553", "raw_code": "protected void decodeImageData(){\n  int NullCode=-1;\n  int npix=iw * ih;\n  int available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi;\n  if ((pixels == null) || (pixels.length < npix)) {\n    pixels=new byte[npix];\n  }\n  if (prefix == null)   prefix=new short[MaxStackSize];\n  if (suffix == null)   suffix=new byte[MaxStackSize];\n  if (pixelStack == null)   pixelStack=new byte[MaxStackSize + 1];\n  data_size=read();\n  clear=1 << data_size;\n  end_of_information=clear + 1;\n  available=clear + 2;\n  old_code=NullCode;\n  code_size=data_size + 1;\n  code_mask=(1 << code_size) - 1;\n  for (code=0; code < clear; code++) {\n    prefix[code]=0;\n    suffix[code]=(byte)code;\n  }\n  datum=bits=count=first=top=pi=bi=0;\n  for (i=0; i < npix; ) {\n    if (top == 0) {\n      if (bits < code_size) {\n        if (count == 0) {\n          count=readBlock();\n          if (count <= 0)           break;\n          bi=0;\n        }\n        datum+=(((int)block[bi]) & 0xff) << bits;\n        bits+=8;\n        bi++;\n        count--;\n        continue;\n      }\n      code=datum & code_mask;\n      datum>>=code_size;\n      bits-=code_size;\n      if ((code > available) || (code == end_of_information))       break;\n      if (code == clear) {\n        code_size=data_size + 1;\n        code_mask=(1 << code_size) - 1;\n        available=clear + 2;\n        old_code=NullCode;\n        continue;\n      }\n      if (old_code == NullCode) {\n        pixelStack[top++]=suffix[code];\n        old_code=code;\n        first=code;\n        continue;\n      }\n      in_code=code;\n      if (code == available) {\n        pixelStack[top++]=(byte)first;\n        code=old_code;\n      }\n      while (code > clear) {\n        pixelStack[top++]=suffix[code];\n        code=prefix[code];\n      }\n      first=((int)suffix[code]) & 0xff;\n      if (available >= MaxStackSize)       break;\n      pixelStack[top++]=(byte)first;\n      prefix[available]=(short)old_code;\n      suffix[available]=(byte)first;\n      available++;\n      if (((available & code_mask) == 0) && (available < MaxStackSize)) {\n        code_size++;\n        code_mask+=available;\n      }\n      old_code=in_code;\n    }\n    top--;\n    pixels[pi++]=pixelStack[top];\n    i++;\n  }\n  for (i=pi; i < npix; i++) {\n    pixels[i]=0;\n  }\n}"}
{"ids": "86370", "raw_code": "void refreshCustomMasterList(){\n  if (customMasterCountries == null || customMasterCountries.length() == 0) {\n    customMasterCountriesList=null;\n  }\n else {\n    List<Country> localCountryList=new ArrayList<>();\n    for (    String nameCode : customMasterCountries.split(\",\")) {\n      Country country=Country.getCountryForNameCodeFromLibraryMasterList(customLanguage,nameCode);\n      if (country != null) {\n        if (!isAlreadyInList(country,localCountryList)) {\n          localCountryList.add(country);\n        }\n      }\n    }\n    if (localCountryList.size() == 0) {\n      customMasterCountriesList=null;\n    }\n else {\n      customMasterCountriesList=localCountryList;\n    }\n  }\n  if (customMasterCountriesList != null) {\n    for (    Country country : customMasterCountriesList) {\n      country.log();\n    }\n  }\n else {\n  }\n}"}
{"ids": "33341", "raw_code": "protected boolean isDtoGetter(Method method){\n  if (method.isAnnotationPresent(DelegateTo.class)) {\n    return false;\n  }\n  String methodName=method.getName();\n  if ((methodName.startsWith(\"get\") || methodName.startsWith(\"is\")) && method.getParameterTypes().length == 0) {\n    if (methodName.length() > 2 && methodName.startsWith(\"is\")) {\n      return method.getReturnType() == Boolean.class || method.getReturnType() == boolean.class;\n    }\n    return methodName.length() > 3;\n  }\n  return false;\n}"}
{"ids": "2595", "raw_code": "private static char[] yy_unpack_cmap(String packed){\n  char[] map=new char[0x10000];\n  int i=0;\n  int j=0;\n  while (i < 86) {\n    int count=packed.charAt(i++);\n    char value=packed.charAt(i++);\n    do     map[j++]=value;\n while (--count > 0);\n  }\n  return map;\n}"}
{"ids": "10608", "raw_code": "public StatusBar(boolean showMemory){\n  super(new BorderLayout());\n  add(createInfoPanel(),BorderLayout.WEST);\n  if (showMemory) {\n    add(createMemoryStatus(),BorderLayout.CENTER);\n    JPanel iconPanel=new JPanel(new BorderLayout());\n    iconPanel.add(new JLabel(new AngledLinesWindowsCornerIcon()),BorderLayout.SOUTH);\n    add(iconPanel,BorderLayout.EAST);\n  }\n else {\n    setBackground(Color.WHITE);\n  }\n}"}
{"ids": "72744", "raw_code": "public void execute(final Runnable task){\n  String name=metadata.get(Metadata.RESOURCE_NAME_KEY);\n  if (name != null) {\n    name=\"ICIJ Extract: \" + name;\n  }\n else {\n    name=\"ICIJ Extract\";\n  }\n  final Thread thread=new Thread(task,name);\n  thread.setDaemon(true);\n  thread.start();\n}"}
{"ids": "81444", "raw_code": "static int stringSize(String string){\n  int size=0;\n  if (string != null) {\n    size+=HEADERS + 4 * 4;\n    size+=HEADERS + 2 * string.length();\n  }\n  return size;\n}"}
{"ids": "87124", "raw_code": "public static GraphRequest newPostOpenGraphObjectRequest(AccessToken accessToken,JSONObject openGraphObject,Callback callback){\n  if (openGraphObject == null) {\n    throw new FacebookException(\"openGraphObject cannot be null\");\n  }\n  if (Utility.isNullOrEmpty(openGraphObject.optString(\"type\"))) {\n    throw new FacebookException(\"openGraphObject must have non-null 'type' property\");\n  }\n  if (Utility.isNullOrEmpty(openGraphObject.optString(\"title\"))) {\n    throw new FacebookException(\"openGraphObject must have non-null 'title' property\");\n  }\n  String path=String.format(MY_OBJECTS_FORMAT,openGraphObject.optString(\"type\"));\n  Bundle bundle=new Bundle();\n  bundle.putString(OBJECT_PARAM,openGraphObject.toString());\n  return new GraphRequest(accessToken,path,bundle,HttpMethod.POST,callback);\n}"}
{"ids": "52127", "raw_code": "public void addGraph(Graph g){\n  graphs.add(g);\n}"}
{"ids": "57227", "raw_code": "protected void addToQuarantineQueue(NodePortTuple npt){\n  if (quarantineQueue.contains(npt) == false) {\n    quarantineQueue.add(npt);\n  }\n}"}
{"ids": "73706", "raw_code": "private MrcMessage loadChars() throws java.io.IOException {\n  int nchars;\n  byte[] rcvBuffer=new byte[32];\n  nchars=inpipe.read(rcvBuffer,0,32);\n  MrcMessage msg=new MrcMessage(nchars);\n  for (int i=0; i < nchars; i++) {\n    msg.setElement(i,rcvBuffer[i] & 0xFF);\n  }\n  return msg;\n}"}
{"ids": "35888", "raw_code": "@SuppressWarnings(\"unused\") @Override protected Money handleTransactionThatIsALateRepaymentOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final List<LoanRepaymentScheduleInstallment> installments,final LoanTransaction loanTransaction,final Money transactionAmountUnprocessed,List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){\n  return handleTransactionThatIsOnTimePaymentOfInstallment(currentInstallment,loanTransaction,transactionAmountUnprocessed,transactionMappings);\n}"}
{"ids": "63647", "raw_code": "protected void fireTupleEvent(Table t,int start,int end,int type){\n  if (m_tupleListeners != null && m_tupleListeners.size() > 0) {\n    Object[] lstnrs=m_tupleListeners.getArray();\n    Tuple[] tuples=new Tuple[end - start + 1];\n    for (int i=0, r=start; r <= end; ++r, ++i) {\n      tuples[i]=t.getTuple(r);\n    }\n    for (int i=0; i < lstnrs.length; ++i) {\n      TupleSetListener tsl=(TupleSetListener)lstnrs[i];\n      if (type == EventConstants.INSERT) {\n        tsl.tupleSetChanged(this,tuples,EMPTY_ARRAY);\n      }\n else {\n        tsl.tupleSetChanged(this,EMPTY_ARRAY,tuples);\n      }\n    }\n  }\n}"}
{"ids": "64994", "raw_code": "public String buildQuery(String[] projectionIn,String selection,String groupBy,String having,String sortOrder,String limit){\n  String[] projection=computeProjection(projectionIn);\n  StringBuilder where=new StringBuilder();\n  boolean hasBaseWhereClause=mWhereClause != null && mWhereClause.length() > 0;\n  if (hasBaseWhereClause) {\n    where.append(mWhereClause.toString());\n    where.append(')');\n  }\n  if (selection != null && selection.length() > 0) {\n    if (hasBaseWhereClause) {\n      where.append(\" AND \");\n    }\n    where.append('(');\n    where.append(selection);\n    where.append(')');\n  }\n  return buildQueryString(mDistinct,mTables,projection,where.toString(),groupBy,having,sortOrder,limit);\n}"}
{"ids": "21326", "raw_code": "public static boolean isExceptionTime(Calendar scheduleTime,ScheduleInfo scheduleInfo) throws Exception {\n  if (scheduleInfo.getDateExceptions() != null) {\n    for (    String dateException : scheduleInfo.getDateExceptions()) {\n      DateFormat formatter=new SimpleDateFormat(ScheduleInfo.FULL_DAYTIME_FORMAT);\n      Date date=formatter.parse(scheduleInfo.getStartDate());\n      Calendar exceptionTime=Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n      exceptionTime.setTime(date);\n      if (exceptionTime.equals(scheduleTime)) {\n        log.info(\"The scheduled time {} is in exception list\",scheduleTime.toString());\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "44385", "raw_code": "protected void initPort(){\n  String portParam=getInitParameter(\"port\");\n  setPort((portParam == null) ? DEFAULT_PORT : Integer.parseInt(portParam));\n  if (isDebug()) {\n    log(\"port: \" + getPort());\n  }\n}"}
{"ids": "46723", "raw_code": "public JPEGQTable(int[] table){\n  if (table == null) {\n    throw new IllegalArgumentException(\"table must not be null.\");\n  }\n  if (table.length != 64) {\n    throw new IllegalArgumentException(\"table.length != 64\");\n  }\n  qTable=Arrays.copyOf(table,table.length);\n}"}
{"ids": "22586", "raw_code": "public VNXeNfsShare findSnapNfsShare(String snapId,String shareName,String softwareVersion){\n  StringBuilder queryFilter=new StringBuilder(VNXeConstants.NAME_FILTER);\n  if (!VNXeUtils.isHigherVersion(softwareVersion,VNXeConstants.VNXE_BASE_SOFT_VER)) {\n    queryFilter.append(shareName);\n    queryFilter.append(VNXeConstants.AND);\n    queryFilter.append(VNXeConstants.SNAP_FILTER);\n    queryFilter.append(snapId);\n  }\n else {\n    queryFilter.append(\"\\\"\" + shareName + \"\\\"\");\n    queryFilter.append(VNXeConstants.AND);\n    queryFilter.append(VNXeConstants.SNAP_FILTER_V31);\n    queryFilter.append(\"\\\"\" + snapId + \"\\\"\");\n  }\n  setFilter(queryFilter.toString());\n  VNXeNfsShare result=null;\n  List<VNXeNfsShare> shareList=getDataForObjects(VNXeNfsShare.class);\n  if (shareList != null && !shareList.isEmpty()) {\n    result=shareList.get(0);\n    _logger.info(\"Snapshot : {} NFS share named : {} found\",snapId,shareName);\n  }\n else {\n    _logger.info(\"No snapshot share found using the snapId : {}, nfsShare name: {} \",snapId,shareName);\n  }\n  return result;\n}"}
{"ids": "23657", "raw_code": "@Override public final int read() throws IOException {\n  ByteBuffer bb=waitForAvailableData();\n  return (bb.get() & 0xff);\n}"}
{"ids": "35393", "raw_code": "protected TokenPosition(TokenPosition other){\n  Objects.requireNonNull(other);\n  this.line=other.line;\n  this.column=other.column;\n  this.offset=other.offset;\n}"}
{"ids": "36543", "raw_code": "private JComponent createDetailPanel(Throwable error){\n  StackTraceList stl=new StackTraceList(error);\n  JScrollPane detailPane=new ExtendedJScrollPane(stl);\n  detailPane.setPreferredSize(new Dimension(getWidth(),200));\n  detailPane.setBorder(null);\n  return detailPane;\n}"}
{"ids": "22208", "raw_code": "private JMXConnector connect(String host,int port){\n  try {\n    if (!isNodeAvailable(host)) {\n      log.info(\"Node({}) is unavailable\",host);\n      throw new IllegalStateException(\"Node is unavailable\");\n    }\n    log.debug(\"Connecting to JMX Server {}:{}\",host,port);\n    String connectorAddress=String.format(serviceUrl,host,port);\n    JMXServiceURL jmxUrl=new JMXServiceURL(connectorAddress);\n    return JMXConnectorFactory.connect(jmxUrl);\n  }\n catch (  MalformedURLException e) {\n    log.error(String.format(\"Failed to construct jmx url for %s:%d\",host,port),e);\n    throw new IllegalStateException(\"Failed to construct jmx url\");\n  }\ncatch (  IOException e) {\n    log.error(String.format(\"Failed to connect %s:%d\",host,port),e);\n    throw new IllegalStateException(\"Failed to connect \" + host);\n  }\n}"}
{"ids": "10717", "raw_code": "public TagHandler processObjectValue(Object value) throws JspException {\n  if (value instanceof AttributeDefinition) {\n    return processTypedAttribute((AttributeDefinition)value);\n  }\n else   if (value instanceof ComponentDefinition) {\n    return processDefinition((ComponentDefinition)value);\n  }\n  return processAsDefinitionOrURL(value.toString());\n}"}
{"ids": "26906", "raw_code": "public List<Integer> emit(String streamId,Tuple anchor,List<Object> tuple){\n  return emit(streamId,Arrays.asList(anchor),tuple);\n}"}
{"ids": "24553", "raw_code": "private synchronized void writeToOutputStream(int oneByte){\n  if (mClosed) {\n    return;\n  }\n  try {\n    mOutputStream.write(oneByte);\n    reportDecodedSizeIfApplicable();\n  }\n catch (  IOException e) {\n    handleIOExceptionWritingToStream(e);\n  }\n}"}
{"ids": "61590", "raw_code": "public int difference(String s1,String s2) throws EncoderException {\n  return SoundexUtils.difference(this,s1,s2);\n}"}
{"ids": "79518", "raw_code": "protected List<ModelEntity> makeEntityModelToUseList() throws GenericEntityException {\n  List<GenericValue> entitySyncIncludes=entitySync.getRelated(\"EntitySyncInclude\",null,null,false);\n  List<GenericValue> entitySyncGroupIncludes=entitySync.getRelated(\"EntitySyncInclGrpDetailView\",null,null,false);\n  entitySyncIncludes.addAll(entitySyncGroupIncludes);\n  List<ModelEntity> entityModelToUseList=EntityGroupUtil.getModelEntitiesFromRecords(entitySyncIncludes,delegator,true);\n  if (Debug.infoOn())   Debug.logInfo(\"In makeEntityModelToUseList for EntitySync with ID [\" + entitySync.get(\"entitySyncId\") + \"] syncing \"+ entityModelToUseList.size()+ \" entities\",module);\n  return entityModelToUseList;\n}"}
{"ids": "16847", "raw_code": "private static String lz(int num){\n  return String.format(\"%02d\",num);\n}"}
{"ids": "22090", "raw_code": "private StartupMode checkStartupMode(Configuration config) throws IOException {\n  StartupMode bootMode=checkStartupModeOnDisk(config);\n  if (bootMode != null) {\n    return bootMode;\n  }\n  if (checkConfigBool(config,Constants.STARTUPMODE_RESTORE_REINIT)) {\n    _log.info(\"Found geodbrestore config: {}\",Constants.STARTUPMODE_RESTORE_REINIT);\n    GeodbRestoreMode mode=new GeodbRestoreMode(config);\n    mode.setCoordinator(_coordinator);\n    mode.setSchemaUtil(_schemaUtil);\n    mode.setDbDir(dbDir);\n    return mode;\n  }\n  if (checkConfigBool(config,Constants.REINIT_DB)) {\n    _log.info(\"Found reinit config: {}\",Constants.REINIT_DB);\n    DbReinitMode mode=new DbReinitMode(config);\n    mode.setCoordinator(_coordinator);\n    mode.setSchemaUtil(_schemaUtil);\n    mode.setDbDir(dbDir);\n    return mode;\n  }\n  List<String> obsoletePeers=checkConfigList(config,Constants.OBSOLETE_CASSANDRA_PEERS);\n  if (!obsoletePeers.isEmpty()) {\n    ObsoletePeersCleanupMode mode=new ObsoletePeersCleanupMode(config);\n    mode.setCoordinator(_coordinator);\n    mode.setSchemaUtil(_schemaUtil);\n    mode.setObsoletePeers(obsoletePeers);\n    return mode;\n  }\n else {\n    NormalMode mode=new NormalMode(config);\n    mode.setCoordinator(_coordinator);\n    mode.setSchemaUtil(_schemaUtil);\n    return mode;\n  }\n}"}
{"ids": "17672", "raw_code": "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n  lock.lock();\n  try {\n    q=new PriorityQueue<E>(Math.max(size,1),comparator);\n    q.addAll(this);\n    s.defaultWriteObject();\n  }\n  finally {\n    q=null;\n    lock.unlock();\n  }\n}"}
{"ids": "21218", "raw_code": "private void run(){\n  try {\n    Thread current=Thread.currentThread();\n    byte[] buf=new byte[1024];\n    for (int len=in.read(buf); len != -1; len=in.read(buf)) {\n      buffer.write(buf,0,len);\n      if (current != thread) {\n        break;\n      }\n    }\n    buffer.flush();\n    buffer.close();\n  }\n catch (  IOException e) {\n    log.error(e.getMessage(),e);\n  }\n}"}
{"ids": "56402", "raw_code": "protected boolean shardAvailable(@Nullable IndexShard shard){\n  return shard != null && shard.canIndex() && CAN_UPDATE_INDEX_BUFFER_STATES.contains(shard.state());\n}"}
{"ids": "14537", "raw_code": "synchronized void updateAuthConfigGlobals(ServiceSchemaManager scm) throws SMSException {\n  ServiceSchema schema=scm.getOrganizationSchema();\n  schema=schema.getSubSchema(\"Configurations\");\n  schema=schema.getSubSchema(\"NamedConfiguration\");\n  Map attrs=schema.getAttributeDefaults();\n  if (attrs != null) {\n    defaultServiceSuccessURLSet=(Set)attrs.get(ISAuthConstants.LOGIN_SUCCESS_URL);\n    defaultServiceFailureURLSet=(Set)attrs.get(ISAuthConstants.LOGIN_FAILURE_URL);\n  }\n  if (debug.messageEnabled()) {\n    debug.message(\"Default Service Success URL Set = \" + defaultServiceSuccessURLSet);\n    debug.message(\"Default Service Failure URL Set = \" + defaultServiceFailureURLSet);\n  }\n}"}
{"ids": "14311", "raw_code": "public void increment(){\n  count.incrementAndGet();\n  rateWindow.incrementForTimestamp(timerGetter.now());\n}"}
{"ids": "48460", "raw_code": "@Override public int preceding(int offset){\n  CharacterIterator text=getText();\n  checkOffset(offset,text);\n  text.setIndex(offset);\n  return previous();\n}"}
{"ids": "52077", "raw_code": "public void log(String event,String message){\n  boolean eventActive=isEventActive(event);\n  if ((this.logging && eventActive && !writers.isEmpty())) {\n    try {\n      for (      Writer writer : writers.values()) {\n        writer.write(message);\n        writer.write(\"\\n\");\n        writer.flush();\n      }\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"ids": "52403", "raw_code": "public int write(final ByteBuffer byteBuffer) throws IOException {\n  ensureOpen();\n  final int remaining=byteBuffer.remaining();\n  if (inspectable < buffer.length) {\n    final int toBuffer=Math.min(buffer.length - inspectable,remaining);\n    byteBuffer.get(buffer,inspectable,toBuffer);\n    inspectable+=toBuffer;\n  }\n  if (byteBuffer.hasRemaining()) {\n    fileChannel.position(writePosition);\n    writePosition+=fileChannel.write(byteBuffer);\n  }\n  return remaining;\n}"}
{"ids": "31542", "raw_code": "public void copyInto(int strOffset,byte[] bytes,int arrayOffset,int len){\n  System.arraycopy(m_bytes,m_offset + strOffset,bytes,arrayOffset,len);\n}"}
{"ids": "8113", "raw_code": "public static String repeatString(String pattern,int repeats){\n  StringBuilder buffer=new StringBuilder(pattern.length() * repeats);\n  for (int i=0; i < repeats; i++) {\n    buffer.append(pattern);\n  }\n  return new String(buffer);\n}"}
{"ids": "9311", "raw_code": "private boolean isMusicPlayer(){\n  return playerSetting != null && playerSetting.equalsIgnoreCase(\"musicPlayer\");\n}"}
{"ids": "18372", "raw_code": "public final static VersionInfo[] loadVersionInfo(String[] pckgs,ClassLoader clsldr){\n  if (pckgs == null) {\n    throw new IllegalArgumentException(\"Package identifier list must not be null.\");\n  }\n  ArrayList vil=new ArrayList(pckgs.length);\n  for (int i=0; i < pckgs.length; i++) {\n    VersionInfo vi=loadVersionInfo(pckgs[i],clsldr);\n    if (vi != null)     vil.add(vi);\n  }\n  return (VersionInfo[])vil.toArray(new VersionInfo[vil.size()]);\n}"}
{"ids": "77310", "raw_code": "public static Collection<ContentStream> toContentStreams(final String str,final String contentType){\n  if (str == null)   return null;\n  ArrayList<ContentStream> streams=new ArrayList<>(1);\n  ContentStreamBase ccc=new ContentStreamBase.StringStream(str);\n  ccc.setContentType(contentType);\n  streams.add(ccc);\n  return streams;\n}"}
{"ids": "71247", "raw_code": "void writeRepeatedSqrt(DD xdd){\n  int count=0;\n  while (xdd.doubleValue() > 1e-300) {\n    count++;\n    double x=xdd.doubleValue();\n    DD xSqrt=xdd.sqrt();\n    String s=xSqrt.toString();\n    DD xSqrt2=DD.parse(s);\n    DD xx=xSqrt2.multiply(xSqrt2);\n    double err=Math.abs(xx.doubleValue() - x);\n    xdd=xSqrt;\n    DD distFrom1DD=xSqrt.subtract(DD.valueOf(1.0));\n    double distFrom1=distFrom1DD.doubleValue();\n    if (Math.abs(distFrom1) < 1.0e-40)     break;\n  }\n}"}
{"ids": "47525", "raw_code": "@Override public String format(DateTimeFormatter formatter){\n  Objects.requireNonNull(formatter,\"formatter\");\n  return formatter.format(this);\n}"}
{"ids": "57009", "raw_code": "void verifyUniqueXids(List<OFMessage> msgs){\n  if (seenXids == null)   seenXids=new HashSet<Long>();\n  for (  OFMessage m : msgs) {\n    long xid=m.getXid();\n    assertTrue(\"Xid in messags is 0\",xid != 0);\n    assertFalse(\"Xid \" + xid + \" has already been used\",seenXids.contains(xid));\n    seenXids.add(xid);\n  }\n}"}
{"ids": "17506", "raw_code": "public static boolean hasExtension(String extension){\n  if (extension == null || extension.isEmpty()) {\n    return false;\n  }\n  return extensionToMimeTypeMap.containsKey(extension);\n}"}
{"ids": "71495", "raw_code": "private float applyFriction(float velocity,float simulationRate){\n  if (isZero(velocity)) {\n    velocity=0.0f;\n  }\n else   if (velocity > 0) {\n    velocity=Math.max(0.0f,velocity - (FRICTION * simulationRate));\n  }\n else {\n    velocity=Math.min(0.0f,velocity + (FRICTION * simulationRate));\n  }\n  return velocity;\n}"}
{"ids": "8308", "raw_code": "static Boolean realIsJUnit4Test(Class scriptClass,GroovyClassLoader loader){\n  boolean isTest=false;\n  try {\n    try {\n      Class runWithAnnotationClass=loader.loadClass(\"org.junit.runner.RunWith\");\n      Annotation annotation=scriptClass.getAnnotation(runWithAnnotationClass);\n      if (annotation != null) {\n        isTest=true;\n      }\n else {\n        Class testAnnotationClass=loader.loadClass(\"org.junit.Test\");\n        Method[] methods=scriptClass.getMethods();\n        for (int i=0; i < methods.length; i++) {\n          Method method=methods[i];\n          annotation=method.getAnnotation(testAnnotationClass);\n          if (annotation != null) {\n            isTest=true;\n            break;\n          }\n        }\n      }\n    }\n catch (    ClassNotFoundException e) {\n    }\n  }\n catch (  Throwable e) {\n  }\n  return isTest ? Boolean.TRUE : Boolean.FALSE;\n}"}
{"ids": "16833", "raw_code": "private Dimension layoutSize(Container target,boolean preferred){\nsynchronized (target.getTreeLock()) {\n    int targetWidth=target.getSize().width;\n    if (targetWidth == 0) {\n      targetWidth=Integer.MAX_VALUE;\n    }\n    int hgap=getHgap();\n    int vgap=getVgap();\n    Insets insets=target.getInsets();\n    int horizontalInsetsAndGap=insets.left + insets.right + (hgap * 2);\n    int maxWidth=targetWidth - horizontalInsetsAndGap;\n    Dimension dim=new Dimension(0,0);\n    int rowWidth=0;\n    int rowHeight=0;\n    int nmembers=target.getComponentCount();\n    for (int i=0; i < nmembers; i++) {\n      Component m=target.getComponent(i);\n      if (m.isVisible()) {\n        Dimension d=preferred ? m.getPreferredSize() : m.getMinimumSize();\n        if (rowWidth + d.width > maxWidth) {\n          addRow(dim,rowWidth,rowHeight);\n          rowWidth=0;\n          rowHeight=0;\n        }\n        if (rowWidth != 0) {\n          rowWidth+=hgap;\n        }\n        rowWidth+=d.width;\n        rowHeight=Math.max(rowHeight,d.height);\n      }\n    }\n    addRow(dim,rowWidth,rowHeight);\n    dim.width+=horizontalInsetsAndGap;\n    dim.height+=insets.top + insets.bottom + vgap * 2;\n    Container scrollPane=SwingUtilities.getAncestorOfClass(JScrollPane.class,target);\n    if (scrollPane != null) {\n      dim.width-=(hgap + 1);\n    }\n    return dim;\n  }\n}"}
{"ids": "64419", "raw_code": "private static String doGetPath(String filename,int separatorAdd){\n  if (filename == null) {\n    return null;\n  }\n  int prefix=getPrefixLength(filename);\n  if (prefix < 0) {\n    return null;\n  }\n  int index=indexOfLastSeparator(filename);\n  int endIndex=index + separatorAdd;\n  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {\n    return \"\";\n  }\n  return filename.substring(prefix,endIndex);\n}"}
{"ids": "81298", "raw_code": "protected void reduceParseTree(CompilationUnitDeclaration unit){\n  TypeDeclaration[] types=unit.types;\n  for (int i=0, l=types.length; i < l; i++)   purgeMethodStatements(types[i],true);\n}"}
{"ids": "2756", "raw_code": "public synchronized void writeTo(OutputStream out) throws IOException {\n  int remaining=count;\n  for (  byte[] buf : buffers) {\n    int c=Math.min(buf.length,remaining);\n    out.write(buf,0,c);\n    remaining-=c;\n    if (remaining == 0) {\n      break;\n    }\n  }\n}"}
{"ids": "32958", "raw_code": "public static long findRevision(final List<String> output,final Pattern pattern){\n  long revision=-1;\n  for (  final String line : output) {\n    final Matcher matcher=pattern.matcher(line);\n    if (matcher.find()) {\n      revision=Long.parseLong(matcher.group(1));\n      break;\n    }\n  }\n  return revision;\n}"}
{"ids": "63775", "raw_code": "protected int chooseHighWaterMark(int capacity,double maxLoad){\n  return Math.min(capacity - 2,(int)(capacity * maxLoad));\n}"}
{"ids": "33725", "raw_code": "private AccessGrant createAccessGrant(Map<String,String> params){\n  AccessGrant accessGrant=new AccessGrant();\n  if (params.get(\"access_token\") != null) {\n    String accessToken=params.get(\"access_token\");\n    Integer expires=null;\n    if (params.get(\"expires\") != null) {\n      expires=Integer.valueOf(params.get(\"expires\"));\n    }\n    accessGrant.setKey(accessToken);\n    accessGrant.setAttribute(\"expires\",expires);\n  }\n  accessGrant.setProviderId(mProviderName.toString());\n  return accessGrant;\n}"}
{"ids": "10537", "raw_code": "protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {\n  if (_inputStream == null) {\n    return false;\n  }\n  int amount=_inputEnd - _inputPtr;\n  if (amount > 0 && _inputPtr > 0) {\n    _currInputProcessed+=_inputPtr;\n    _currInputRowStart-=_inputPtr;\n    System.arraycopy(_inputBuffer,_inputPtr,_inputBuffer,0,amount);\n    _inputEnd=amount;\n  }\n else {\n    _inputEnd=0;\n  }\n  _inputPtr=0;\n  while (_inputEnd < minAvailable) {\n    int count=_inputStream.read(_inputBuffer,_inputEnd,_inputBuffer.length - _inputEnd);\n    if (count < 1) {\n      _closeInput();\n      if (count == 0) {\n        throw new IOException(\"InputStream.read() returned 0 characters when trying to read \" + amount + \" bytes\");\n      }\n      return false;\n    }\n    _inputEnd+=count;\n  }\n  return true;\n}"}
{"ids": "84783", "raw_code": "public double logPdf(double x){\n  return Math.log(pdf(x));\n}"}
{"ids": "55876", "raw_code": "private void selectFile(int titleMsg,int buttonMsg,String settingsName,String defaultDir,int dialog,int result){\n  setAutoMode(AutoMode.OFF);\n  String action=\"org.openintents.action.PICK_FILE\";\n  Intent i=new Intent(action);\n  String currentFile=settings.getString(settingsName,\"\");\n  String sep=File.separator;\n  if (!currentFile.contains(sep))   currentFile=Environment.getExternalStorageDirectory() + sep + defaultDir+ sep+ currentFile;\n  i.setData(Uri.fromFile(new File(currentFile)));\n  i.putExtra(\"org.openintents.extra.TITLE\",getString(titleMsg));\n  i.putExtra(\"org.openintents.extra.BUTTON_TEXT\",getString(buttonMsg));\n  try {\n    startActivityForResult(i,result);\n  }\n catch (  ActivityNotFoundException e) {\n    removeDialog(dialog);\n    showDialog(dialog);\n  }\n}"}
{"ids": "26452", "raw_code": "public String timerString(int level,String message){\n  StringBuilder retStringBuf=new StringBuilder();\n  for (int i=0; i < level; i++) {\n    retStringBuf.append(\"| \");\n  }\n  retStringBuf.append(\"(\");\n  String timeSinceStartStr=String.valueOf(timeSinceStart());\n  retStringBuf.append(timeSinceStartStr + \",\");\n  String timeSinceLastStr=String.valueOf(timeSinceLast());\n  retStringBuf.append(timeSinceLastStr);\n  retStringBuf.append(\")\");\n  int spacecount=12 + (2 * level) - retStringBuf.length();\n  for (int i=0; i < spacecount; i++) {\n    retStringBuf.append(' ');\n  }\n  retStringBuf.append(message);\n  lastMessageTime=System.currentTimeMillis();\n  String retString=retStringBuf.toString();\n  if (log && Debug.timingOn())   Debug.logTiming(retString,module);\n  return retString;\n}"}
{"ids": "42285", "raw_code": "public static int recompileWithOpt(NormalMethod method){\n  if (VM.BuildForOptCompiler) {\n    CompilationPlan plan=new CompilationPlan(method,(OptimizationPlanElement[])optimizationPlan,null,(OptOptions)options);\n    return recompileWithOpt(plan);\n  }\n else {\n    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);\n    return -1;\n  }\n}"}
{"ids": "21213", "raw_code": "public String findMatch(Pattern pattern,String text){\n  return findMatch(pattern,text,1);\n}"}
{"ids": "53386", "raw_code": "private void addHit(String cname,Class<?> c){\n  if (len == names.length) {\n    final int nl=(len << 1) + 1;\n    names=Arrays.copyOf(names,nl);\n    clazzes=Arrays.copyOf(clazzes,nl);\n  }\n  names[len]=cname;\n  clazzes[len]=c;\n  ++len;\n}"}
{"ids": "4628", "raw_code": "private Object queryCommandValue(final String commandIdentifier){\n  Check.notNull(commandIdentifier,\"command\");\n  final StringBuffer cmd=new StringBuffer();\n  cmd.append(\"return editor.queryCommandValue(\\\"\");\n  cmd.append(commandIdentifier);\n  cmd.append(\"\\\") || ''\");\n  return browser.evaluate(cmd.toString());\n}"}
{"ids": "41683", "raw_code": "public void line(double x,double y){\n  Line line=new Line(x,y);\n  if (x < minX) {\n    minX=x;\n  }\n  if (y < minY) {\n    minY=y;\n  }\n  if (x > maxX) {\n    maxX=x;\n  }\n  if (y > maxY) {\n    maxY=y;\n  }\n  elements.add(line);\n}"}
{"ids": "72566", "raw_code": "@Override public List<Cluster<T>> cluster(final Collection<T> points) throws NullArgumentException {\n  MathUtils.checkNotNull(points);\n  final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();\n  final Map<Clusterable,PointStatus> visited=new HashMap<Clusterable,PointStatus>();\n  for (  final T point : points) {\n    if (visited.get(point) != null) {\n      continue;\n    }\n    final List<T> neighbors=getNeighbors(point,points);\n    if (neighbors.size() >= minPts) {\n      final Cluster<T> cluster=new Cluster<T>();\n      clusters.add(expandCluster(cluster,point,neighbors,points,visited));\n    }\n else {\n      visited.put(point,PointStatus.NOISE);\n    }\n  }\n  return clusters;\n}"}
{"ids": "53855", "raw_code": "private static void mat4_util_inplace_rotate(float[] inOutMatrix,float eulerRadiansX,float eulerRadiansY,float eulerRadiansZ){\n  float cos_rx=(float)Math.cos(eulerRadiansX);\n  float cos_ry=(float)Math.cos(eulerRadiansY);\n  float cos_rz=(float)Math.cos(eulerRadiansZ);\n  float sin_rx=(float)Math.sin(eulerRadiansX);\n  float sin_ry=(float)Math.sin(eulerRadiansY);\n  float sin_rz=(float)Math.sin(eulerRadiansZ);\n  float b00=cos_rz * cos_ry;\n  float b10=sin_rz * cos_ry;\n  float b20=-sin_ry;\n  float b30=0.0f;\n  float b01=-sin_rz * cos_rx + cos_rz * sin_ry * sin_rx;\n  float b11=cos_rz * cos_rx + sin_rz * sin_ry * sin_rx;\n  float b21=cos_ry * sin_rx;\n  float b31=0.0f;\n  float b02=sin_rz * sin_rx + cos_rz * sin_ry * cos_rx;\n  float b12=-cos_rz * sin_rx + sin_rz * sin_ry * cos_rx;\n  float b22=cos_ry * cos_rx;\n  float b32=0.0f;\n  float b03=0.0f;\n  float b13=0.0f;\n  float b23=0.0f;\n  float b33=1.0f;\n  float a00=inOutMatrix[0];\n  float a10=inOutMatrix[1];\n  float a20=inOutMatrix[2];\n  float a30=inOutMatrix[3];\n  float a01=inOutMatrix[4];\n  float a11=inOutMatrix[5];\n  float a21=inOutMatrix[6];\n  float a31=inOutMatrix[7];\n  float a02=inOutMatrix[8];\n  float a12=inOutMatrix[9];\n  float a22=inOutMatrix[10];\n  float a32=inOutMatrix[11];\n  float a03=inOutMatrix[12];\n  float a13=inOutMatrix[13];\n  float a23=inOutMatrix[14];\n  float a33=inOutMatrix[15];\n  inOutMatrix[0]=a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;\n  inOutMatrix[1]=a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;\n  inOutMatrix[2]=a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;\n  inOutMatrix[3]=a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;\n  inOutMatrix[4]=a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;\n  inOutMatrix[5]=a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;\n  inOutMatrix[6]=a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;\n  inOutMatrix[7]=a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;\n  inOutMatrix[8]=a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;\n  inOutMatrix[9]=a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;\n  inOutMatrix[10]=a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;\n  inOutMatrix[11]=a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;\n  inOutMatrix[12]=a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;\n  inOutMatrix[13]=a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;\n  inOutMatrix[14]=a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;\n  inOutMatrix[15]=a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;\n}"}
{"ids": "73966", "raw_code": "@Override public void mousePressed(MouseEvent evt){\n  int pos=(slider.getOrientation() == JSlider.HORIZONTAL) ? evt.getX() : evt.getY();\n  int loc=getLocationForValue(getSnappedValue(evt));\n  this.offset=(loc < 0) ? 0 : pos - loc;\n}"}
{"ids": "74864", "raw_code": "private String printDFormat(final long x){\n  return printDFormat(Long.toString(x));\n}"}
{"ids": "84209", "raw_code": "public void write(int ch) throws IOException {\n  OutputStream os=getOutputStream();\n  os.write('D');\n  os.write(0);\n  os.write(1);\n  os.write(ch);\n}"}
{"ids": "17734", "raw_code": "public static <S>ServiceLoader<S> loadInstalled(Class<S> service){\n  ClassLoader cl=ClassLoader.getSystemClassLoader();\n  if (cl != null) {\n    while (cl.getParent() != null) {\n      cl=cl.getParent();\n    }\n  }\n  return ServiceLoader.load(service,cl);\n}"}
{"ids": "1577", "raw_code": "public static Pattern glob2Pattern(String... globs){\n  final StringBuilder regex=new StringBuilder();\n  boolean needOr=false;\n  for (  String glob : globs) {\n    if (needOr) {\n      regex.append('|');\n    }\n    int i=0, len=glob.length();\n    while (i < len) {\n      char c=glob.charAt(i++);\nswitch (c) {\ncase '*':\n        if (i < len && glob.charAt(i) == '*') {\n          regex.append(\".*\");\n          i++;\n        }\n else {\n          regex.append(\"[^.]*\");\n        }\n      break;\ncase '?':\n    regex.append(\"[^.]\");\n  break;\ndefault :\nif (isRegexMeta(c)) {\n  regex.append('\\\\');\n}\nregex.append(c);\n}\n}\nneedOr=true;\n}\nreturn Pattern.compile(regex.toString(),0);\n}"}
{"ids": "80986", "raw_code": "public static boolean containsTraceExplorerModuleConflict(String rootModuleName){\n  String rootModuleFileName=rootModuleName;\n  if (!rootModuleName.endsWith(ResourceHelper.TLA_EXTENSION)) {\n    rootModuleFileName=ResourceHelper.getModuleFileName(rootModuleName);\n  }\n  List<String> extendedModuleNames=ToolboxHandle.getExtendedModules(rootModuleFileName);\n  Iterator<String> it=extendedModuleNames.iterator();\n  while (it.hasNext()) {\n    String moduleName=it.next();\n    if (moduleName.equals(TE_FILE_TLA)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "5919", "raw_code": "private String buildFullMessage(String msg,Object arg0,Object arg1,Object arg2,Object[] argArray){\n  StringBuilder sb=null;\n  int lastIndex=0;\n  int argC=0;\n  while (true) {\n    int argIndex=msg.indexOf(ARG_STRING,lastIndex);\n    if (argIndex == -1) {\n      break;\n    }\n    if (sb == null) {\n      sb=new StringBuilder(128);\n    }\n    sb.append(msg,lastIndex,argIndex);\n    lastIndex=argIndex + ARG_STRING_LENGTH;\n    if (argArray == null) {\n      if (argC == 0) {\n        appendArg(sb,arg0);\n      }\n else       if (argC == 1) {\n        appendArg(sb,arg1);\n      }\n else       if (argC == 2) {\n        appendArg(sb,arg2);\n      }\n else {\n      }\n    }\n else     if (argC < argArray.length) {\n      appendArg(sb,argArray[argC]);\n    }\n else {\n    }\n    argC++;\n  }\n  if (sb == null) {\n    return msg;\n  }\n else {\n    sb.append(msg,lastIndex,msg.length());\n    return sb.toString();\n  }\n}"}
{"ids": "81273", "raw_code": "protected void removeFromParentInfo(Openable child){\n  Openable parent=(Openable)child.getParent();\n  if (parent != null && parent.isOpen()) {\n    try {\n      OpenableElementInfo info=(OpenableElementInfo)parent.getElementInfo();\n      info.removeChild(child);\n    }\n catch (    JavaModelException e) {\n    }\n  }\n}"}
{"ids": "28765", "raw_code": "public void removeAllUpdateListeners(){\n  if (mUpdateListeners == null) {\n    return;\n  }\n  mUpdateListeners.clear();\n  mUpdateListeners=null;\n}"}
{"ids": "21881", "raw_code": "public void executePlan(TaskCompleter completer,String successMessage,WorkflowCallbackHandler callbackHandler,Object[] callbackHandlerArgs,WorkflowRollbackHandler rollbackHandler,Object[] rollbackHandlerArgs) throws WorkflowException {\n  this._callbackHandler=callbackHandler;\n  if (callbackHandlerArgs != null) {\n    this._callbackHandlerArgs=callbackHandlerArgs.clone();\n  }\n  this._rollbackHandler=rollbackHandler;\n  if (rollbackHandlerArgs != null) {\n    this._rollbackHandlerArgs=rollbackHandlerArgs.clone();\n  }\n  this._taskCompleter=completer;\n  this._successMessage=successMessage;\n  _service.executePlan(this);\n}"}
{"ids": "14003", "raw_code": "public boolean isMutable(){\n  return mutable;\n}"}
{"ids": "15447", "raw_code": "public void handleRequest(RequestContext rc) throws CLIException {\n  super.handleRequest(rc);\n  ldapLogin();\n  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);\n  String subConfigName=getStringOptionValue(IArgument.SUB_CONFIGURATION_NAME);\n  String realmName=getStringOptionValue(IArgument.REALM_NAME);\n  if ((realmName == null) || (realmName.length() == 0)) {\n    deleteSubConfigToRoot(serviceName,subConfigName);\n  }\n else {\n    deleteSubConfigFromRealm(realmName,serviceName,subConfigName);\n  }\n}"}
{"ids": "43828", "raw_code": "public void enforceContext(Resource... contexts){\n  OpenRDFUtil.verifyContextNotNull(contexts);\n  this.contexts=Arrays.copyOf(contexts,contexts.length);\n}"}
{"ids": "56732", "raw_code": "protected void runUpload(Integer numOfThreads,HashMap<String,String> attributes,Boolean createNewVersion,Boolean force) throws Exception {\n  runUpload(numOfThreads,attributes,createNewVersion,force,null,null);\n}"}
{"ids": "13519", "raw_code": "public final Collection<Component> components(){\n  return new HashSet<>(components.values());\n}"}
{"ids": "37959", "raw_code": "protected boolean[] canPredict(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){\n  print(\"basic predict\");\n  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);\n  print(\"...\");\n  ArrayList<String> accepts=new ArrayList<String>();\n  accepts.add(\"unary\");\n  accepts.add(\"binary\");\n  accepts.add(\"nominal\");\n  accepts.add(\"numeric\");\n  accepts.add(\"string\");\n  accepts.add(\"date\");\n  accepts.add(\"relational\");\n  accepts.add(\"multi-instance\");\n  accepts.add(\"not in classpath\");\n  int numTrain=getNumInstances(), numClasses=2, missingLevel=0;\n  boolean predictorMissing=false, classMissing=false;\n  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);\n}"}
{"ids": "52322", "raw_code": "public void collapse(){\n  collapse(true);\n}"}
{"ids": "39130", "raw_code": "public int numInstances(){\n  return m_Instances.size();\n}"}
{"ids": "13276", "raw_code": "@Override public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {\n  fNamespaceContext=namespaceContext;\n  try {\n    if (fDocumentHandler != null) {\n      if (locator != null) {\n        fDocumentHandler.setDocumentLocator(new LocatorProxy(locator));\n      }\n      if (fDocumentHandler != null) {\n        fDocumentHandler.startDocument();\n      }\n    }\n    if (fContentHandler != null) {\n      if (locator != null) {\n        fContentHandler.setDocumentLocator(new LocatorProxy(locator));\n      }\n      if (fContentHandler != null) {\n        fContentHandler.startDocument();\n      }\n    }\n  }\n catch (  SAXException e) {\n    throw new XNIException(e);\n  }\n}"}
{"ids": "54826", "raw_code": "public static double parseNumberPercentWithSeparateRange(FXGNode node,String value,String name,double minNumber,double maxNumber,double minPercent,double maxPercent,double defaultValue){\n  if (value.length() != 0 && value.charAt(value.length() - 1) == '%') {\n    String doubleValue=value.substring(0,value.length() - 1);\n    try {\n      return parseDouble(node,doubleValue,name,minPercent,maxPercent,defaultValue);\n    }\n catch (    FXGException e) {\n      throw new FXGException(node.getStartLine(),node.getStartColumn(),\"InvalidPercentValue\",name,value);\n    }\n  }\n else {\n    return parseDouble(node,value,name,minNumber,maxNumber,defaultValue);\n  }\n}"}
{"ids": "35186", "raw_code": "private void checkDownloadCanProceed() throws StopRequestException {\n  if (clock.intervalLessThan(Clock.Interval.ONE_SECOND)) {\n    return;\n  }\n  clock.startInterval();\n  checkIsPausedOrCanceled();\n  checkClientRules();\n}"}
{"ids": "12348", "raw_code": "private void calculateColor(int coord){\n  coord=coord - mBarPointerHaloRadius;\n  if (coord < 0) {\n    coord=0;\n  }\n else   if (coord > mBarLength) {\n    coord=mBarLength;\n  }\n  mColor=Color.HSVToColor(Math.round(mPosToOpacFactor * coord),mHSVColor);\n  if (Color.alpha(mColor) > 250) {\n    mColor=Color.HSVToColor(mHSVColor);\n  }\n else   if (Color.alpha(mColor) < 5) {\n    mColor=Color.TRANSPARENT;\n  }\n}"}
{"ids": "30791", "raw_code": "private void deleteEvent(EventRegKeyExpiration regExpiration,EventReg reg){\n  listeners.dec();\nsynchronized (reg) {\n    EntryRep[] tmpls=reg.tmpl.attributeSetTemplates;\n    if (tmpls != null) {\n      for (int i=tmpls.length; --i >= 0; ) {\n        EntryClass eclass=tmpls[i].eclass;\n        eclass.setNumTemplates(eclass.getNumTemplates() - 1);\n      }\n    }\n    Long id=reg.eventID;\n    eventByID.remove(id);\n    if (regExpiration != null) {\n      eventByTime.remove(regExpiration);\n    }\n else {\n      eventByTime.remove(new EventRegKeyExpiration(reg,reg.leaseExpiration));\n    }\n    if (reg.tmpl.serviceID != null) {\n      Object val=subEventByService.get(reg.tmpl.serviceID);\n      if (val == reg) {\n        subEventByService.remove(reg.tmpl.serviceID);\n      }\n else {\n        Object[] array=(EventReg[])val;\n        array=arrayDel(array,indexOf(array,reg));\n        if (array.length == 1)         val=array[0];\n else         val=array;\n        subEventByService.put(reg.tmpl.serviceID,val);\n      }\n    }\n else {\n      subEventByID.remove(id);\n    }\n    computeMaxLeases();\n  }\n}"}
{"ids": "54111", "raw_code": "public String gtidSet(){\n  return this.gtidSet != null ? this.gtidSet : null;\n}"}
{"ids": "28865", "raw_code": "public static Peer createMapPeer(Map map) throws MessageException {\n  if (!map.containsKey(PORT) || !map.containsKey(ADDRESS))   throw new MessageException(\"Invalid address map\");\n  int port=(int)(long)map.get(PORT);\n  String address=(String)map.get(ADDRESS);\n  String peerId=null;\n  if (map.containsKey(PEER_ID))   peerId=(String)map.get(PEER_ID);\n  return new Peer(peerId,new InetSocketAddress(address,port));\n}"}
{"ids": "32015", "raw_code": "public static void putDoubleField(Object obj,long fieldOff,double val){\n  UNSAFE.putDouble(obj,fieldOff,val);\n}"}
{"ids": "60642", "raw_code": "public String toOIDString(){\n  if (sOID == null) {\n    sOID=\"OID.\" + toString();\n  }\n  return sOID;\n}"}
{"ids": "26884", "raw_code": "public void emitDirect(int taskId,String streamId,Tuple anchor,List<Object> tuple){\n  emitDirect(taskId,streamId,Arrays.asList(anchor),tuple);\n}"}
{"ids": "6417", "raw_code": "protected void loadValue(String sValue){\n  sValue=sValue.trim();\n  try {\n    int r=Integer.parseInt(sValue.substring(1,3),16);\n    int g=Integer.parseInt(sValue.substring(3,5),16);\n    int b=Integer.parseInt(sValue.substring(5,7),16);\n    value=new Color(r,g,b);\n  }\n catch (  NumberFormatException nfe) {\n    revertToDefault();\n  }\ncatch (  StringIndexOutOfBoundsException sioobe) {\n    revertToDefault();\n  }\n}"}
{"ids": "13851", "raw_code": "public void schemaChanged(String serviceName,String version){\n  updateStatus();\n}"}
{"ids": "29810", "raw_code": "private static int byteCompaction(int mode,int[] codewords,int codeIndex,StringBuilder result){\n  if (mode == BYTE_COMPACTION_MODE_LATCH) {\n    int count=0;\n    long value=0;\n    char[] decodedData=new char[6];\n    int[] byteCompactedCodewords=new int[6];\n    boolean end=false;\n    int nextCode=codewords[codeIndex++];\n    while ((codeIndex < codewords[0]) && !end) {\n      byteCompactedCodewords[count++]=nextCode;\n      value=900 * value + nextCode;\n      nextCode=codewords[codeIndex++];\n      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {\n        codeIndex--;\n        end=true;\n      }\n else {\n        if ((count % 5 == 0) && (count > 0)) {\n          for (int j=0; j < 6; ++j) {\n            decodedData[5 - j]=(char)(value % 256);\n            value>>=8;\n          }\n          result.append(decodedData);\n          count=0;\n        }\n      }\n    }\n    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {\n      byteCompactedCodewords[count++]=nextCode;\n    }\n    for (int i=0; i < count; i++) {\n      result.append((char)byteCompactedCodewords[i]);\n    }\n  }\n else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {\n    int count=0;\n    long value=0;\n    boolean end=false;\n    while (codeIndex < codewords[0] && !end) {\n      int code=codewords[codeIndex++];\n      if (code < TEXT_COMPACTION_MODE_LATCH) {\n        count++;\n        value=900 * value + code;\n      }\n else {\n        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {\n          codeIndex--;\n          end=true;\n        }\n      }\n      if ((count % 5 == 0) && (count > 0)) {\n        char[] decodedData=new char[6];\n        for (int j=0; j < 6; ++j) {\n          decodedData[5 - j]=(char)(value & 0xFF);\n          value>>=8;\n        }\n        result.append(decodedData);\n        count=0;\n      }\n    }\n  }\n  return codeIndex;\n}"}
{"ids": "57586", "raw_code": "public int addAndGet(T obj,int delta){\n  for (; ; ) {\n    int current=get(obj);\n    int next=current + delta;\n    if (compareAndSet(obj,current,next))     return next;\n  }\n}"}
{"ids": "29549", "raw_code": "public KCResponse serve(String uri,String method,Properties header,Properties parms,Properties files){\n  return serveFile(uri,header,myRootDir,true);\n}"}
{"ids": "25668", "raw_code": "protected void fillMemData(Object data,int[] posits,int length,Object output,int outputOffset,int dim){\n  if (data instanceof Object[]) {\n    Object[] xo=(Object[])data;\n    fillMemData(xo[posits[dim]],posits,length,output,outputOffset,dim + 1);\n  }\n else {\n    int startFrom=posits[dim];\n    int startTo=outputOffset;\n    int copyLength=length;\n    if (posits[dim] < 0) {\n      startFrom-=posits[dim];\n      startTo-=posits[dim];\n      copyLength+=posits[dim];\n    }\n    if (posits[dim] + length > this.dims[dim]) {\n      copyLength-=posits[dim] + length - this.dims[dim];\n    }\n    System.arraycopy(data,startFrom,output,startTo,copyLength);\n  }\n}"}
{"ids": "8531", "raw_code": "public Optional<String> startAsyncJob(String jobType){\n  try {\n    final JobRunnable jobRunnable=findJobRunnable(jobType);\n    JobInfo jobInfo=createJobInfo(jobType);\n    repository.markJobAsRunningIfPossible(jobInfo,mutexJobTypesFor(jobType));\n    repository.createOrUpdate(jobInfo);\n    return Optional.of(startAsync(metered(jobRunnable),jobInfo.getJobId()));\n  }\n catch (  JobBlockedException e) {\n    LOG.info(e.getMessage());\n    return Optional.empty();\n  }\n}"}
{"ids": "17754", "raw_code": "public boolean isLegalReplacement(byte[] replacement){\n  if (decoder == null) {\n    decoder=charset.newDecoder();\n    decoder.onMalformedInput(CodingErrorAction.REPORT);\n    decoder.onUnmappableCharacter(CodingErrorAction.REPORT);\n  }\n  ByteBuffer in=ByteBuffer.wrap(replacement);\n  CharBuffer out=CharBuffer.allocate((int)(replacement.length * decoder.maxCharsPerByte()));\n  CoderResult result=decoder.decode(in,out,true);\n  return !result.isError();\n}"}
{"ids": "51058", "raw_code": "public static void adaptTable(ConstraintTableLayout table){\n  int width=table.getWidth();\n  int height=table.getHeight();\n  ConstraintWidget.DimensionBehaviour horizontalBehaviour=table.getHorizontalDimensionBehaviour();\n  ConstraintWidget.DimensionBehaviour verticalBehaviour=table.getVerticalDimensionBehaviour();\n  table.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n  table.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n  table.layout();\n  table.layout();\n  table.setMinWidth(table.getWidth());\n  table.setMinHeight(table.getHeight());\n  table.computeGuidelinesPercentPositions();\n  table.setHorizontalDimensionBehaviour(horizontalBehaviour);\n  table.setVerticalDimensionBehaviour(verticalBehaviour);\n  table.setWidth(width < table.getMinWidth() ? table.getMinWidth() : width);\n  table.setHeight(height < table.getMinHeight() ? table.getMinHeight() : height);\n  table.layout();\n}"}
{"ids": "31946", "raw_code": "public static <V,C extends Collection<? super V>>C addAll(C c,V... vals){\n  Collections.addAll(c,vals);\n  return c;\n}"}
{"ids": "63868", "raw_code": "public static void addStrut(JComponent b,int layout,int size){\n  if (size < 1)   return;\n  b.add(getAxis(b,layout) == BoxLayout.X_AXIS ? Box.createHorizontalStrut(size) : Box.createVerticalStrut(size));\n}"}
{"ids": "35486", "raw_code": "public void elementType(String name,int model,int memberOf,int flags){\n  ElementType e=new ElementType(name,model,memberOf,flags,this);\n  theElementTypes.put(name.toLowerCase(),e);\n  if (memberOf == M_ROOT)   theRoot=e;\n}"}
{"ids": "61032", "raw_code": "public int arrayIndexScale(Class clazz){\n  if (!clazz.isArray()) {\n    throw new IllegalArgumentException(\"valid for array classes only\");\n  }\n  return arrayIndexScale0(clazz);\n}"}
{"ids": "35235", "raw_code": "public static StringPool readStringPool(ByteBuffer buffer,StringPoolHeader stringPoolHeader){\n  long beginPos=buffer.position();\n  long[] offsets=new long[(int)stringPoolHeader.getStringCount()];\n  if (stringPoolHeader.getStringCount() > 0) {\n    for (int idx=0; idx < stringPoolHeader.getStringCount(); idx++) {\n      offsets[idx]=Buffers.readUInt(buffer);\n    }\n  }\n  boolean utf8=(stringPoolHeader.getFlags() & StringPoolHeader.UTF8_FLAG) != 0;\n  long stringPos=beginPos + stringPoolHeader.getStringsStart() - stringPoolHeader.getHeaderSize();\n  buffer.position((int)stringPos);\n  StringPoolEntry[] entries=new StringPoolEntry[offsets.length];\n  for (int i=0; i < offsets.length; i++) {\n    entries[i]=new StringPoolEntry(i,stringPos + offsets[i]);\n  }\n  String lastStr=null;\n  long lastOffset=-1;\n  StringPool stringPool=new StringPool((int)stringPoolHeader.getStringCount());\n  for (  StringPoolEntry entry : entries) {\n    if (entry.offset == lastOffset) {\n      stringPool.set(entry.index,lastStr);\n      continue;\n    }\n    buffer.position((int)entry.offset);\n    lastOffset=entry.offset;\n    String str=ParseUtils.readString(buffer,utf8);\n    lastStr=str;\n    stringPool.set(entry.index,str);\n  }\n  buffer.position((int)(beginPos + stringPoolHeader.getBodySize()));\n  return stringPool;\n}"}
{"ids": "40834", "raw_code": "public String strRep(){\n  return \"#\" + rankTeamPollScore + \" \"+ abbr+ \" (\"+ wins+ \"-\"+ losses+ \")\";\n}"}
{"ids": "9338", "raw_code": "public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){\n  if (sourceList == null || isEmpty(entryList)) {\n    return 0;\n  }\n  int sourceCount=sourceList.size();\n  for (  V entry : entryList) {\n    if (!sourceList.contains(entry)) {\n      sourceList.add(entry);\n    }\n  }\n  return sourceList.size() - sourceCount;\n}"}
{"ids": "21616", "raw_code": "private void recordRPOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){\n  try {\n    boolean opStatus=(Operation.Status.ready == status) ? true : false;\n    String evType;\n    evType=opType.getEvType(opStatus);\n    String evDesc=opType.getDescription();\n    String opStage=AuditLogManager.AUDITOP_END;\n    _log.info(\"opType: {} detail: {}\",opType.toString(),evType.toString() + ':' + evDesc);\n    recordBourneRPEvent(dbClient,getId(),evType,status,evDesc);\nswitch (opType) {\ncase START_RP_LINK:\ncase STOP_RP_LINK:\ncase PAUSE_RP_LINK:\ncase RESUME_RP_LINK:\ncase FAILOVER_RP_LINK:\ncase FAILOVER_CANCEL_RP_LINK:\ncase CHANGE_RP_IMAGE_ACCESS_MODE:\ncase SWAP_RP_VOLUME:\n      AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);\n    break;\ndefault :\n  _log.error(\"Unrecognized RP operation type\");\n}\n}\n catch (Exception e) {\n_log.error(\"Failed to record RP operation {}, err: {}\",opType.toString(),e);\n}\n}"}
{"ids": "46227", "raw_code": "void autoClosingClipOpened(AutoClosingClip clip){\n  if (Printer.debug)   Printer.debug(\"> EventDispatcher.autoClosingClipOpened \");\n  int index=0;\nsynchronized (autoClosingClips) {\n    index=getAutoClosingClipIndex(clip);\n    if (index == -1) {\n      if (Printer.debug)       Printer.debug(\"EventDispatcher: adding auto-closing clip \" + clip);\n      autoClosingClips.add(new ClipInfo(clip));\n    }\n  }\n  if (index == -1) {\nsynchronized (this) {\n      notifyAll();\n    }\n  }\n  if (Printer.debug)   Printer.debug(\"< EventDispatcher.autoClosingClipOpened finished(\" + autoClosingClips.size() + \" clips)\");\n}"}
{"ids": "46289", "raw_code": "public boolean implies(Permission permission){\n  if (!(permission instanceof ExecOptionPermission))   return false;\n  ExecOptionPermission p=(ExecOptionPermission)permission;\n  if (all_allowed)   return true;\n  String pname=p.getName();\n  Permission x=permissions.get(pname);\n  if (x != null)   return x.implies(permission);\n  int last, offset;\n  offset=pname.length() - 1;\n  while ((last=pname.lastIndexOf(\".\",offset)) != -1) {\n    pname=pname.substring(0,last + 1) + \"*\";\n    x=permissions.get(pname);\n    if (x != null) {\n      return x.implies(permission);\n    }\n    offset=last - 1;\n  }\n  pname=p.getName();\n  offset=pname.length() - 1;\n  while ((last=pname.lastIndexOf(\"=\",offset)) != -1) {\n    pname=pname.substring(0,last + 1) + \"*\";\n    x=permissions.get(pname);\n    if (x != null) {\n      return x.implies(permission);\n    }\n    offset=last - 1;\n  }\n  return false;\n}"}
{"ids": "3857", "raw_code": "public void addTailArg(String arg){\n  _tailArgs.add(arg);\n}"}
{"ids": "34180", "raw_code": "private static byte[] save(Bitmap src,Bitmap.CompressFormat format,int quality){\n  ByteArrayOutputStream outputStream=null;\n  try {\n    outputStream=new ByteArrayOutputStream();\n    src.compress(format,quality,outputStream);\n    return outputStream.toByteArray();\n  }\n  finally {\n    if (outputStream != null) {\n      try {\n        outputStream.close();\n      }\n catch (      IOException e1) {\n        e1.printStackTrace();\n      }\n    }\n  }\n}"}
{"ids": "35375", "raw_code": "public boolean isExternal(Resource input){\n  return externalResources.contains(input);\n}"}
{"ids": "64259", "raw_code": "protected final void writeD(ByteBuffer buf,int value){\n  buf.putInt(value);\n}"}
{"ids": "79006", "raw_code": "@Override public AbstractScannedResult scanBlocklet(BlocksChunkHolder blocksChunkHolder) throws QueryExecutionException {\n  try {\n    fillScannedResult(blocksChunkHolder);\n  }\n catch (  FilterUnsupportedException e) {\n    throw new QueryExecutionException(e.getMessage());\n  }\n  return scannedResult;\n}"}
{"ids": "79245", "raw_code": "public List<ShoppingCartItem> items(){\n  List<ShoppingCartItem> result=FastList.newInstance();\n  result.addAll(cartLines);\n  return result;\n}"}
{"ids": "47943", "raw_code": "MutableBigInteger(BigInteger b){\n  intLen=b.mag.length;\n  value=Arrays.copyOf(b.mag,intLen);\n}"}
{"ids": "79794", "raw_code": "public boolean isHttp11(){\n  if (mVersion.equalsIgnoreCase(HTTP11)) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "68836", "raw_code": "private int readNext(boolean charstring){\n  num=(int)(data[pos++]) & 0xff;\n  if (num == 30 && !charstring) {\n    readFNum();\n    return type=FLT;\n  }\n else   if (num == 28) {\n    num=(((int)data[pos]) << 8) + (((int)data[pos + 1]) & 0xff);\n    pos+=2;\n    return type=NUM;\n  }\n else   if (num == 29 && !charstring) {\n    num=(((int)data[pos] & 0xff) << 24) | (((int)data[pos + 1] & 0xff) << 16) | (((int)data[pos + 2] & 0xff) << 8)| (((int)data[pos + 3] & 0xff));\n    pos+=4;\n    return type=NUM;\n  }\n else   if (num == 12) {\n    num=1000 + ((int)(data[pos++]) & 0xff);\n    return type=CMD;\n  }\n else   if (num < 32) {\n    return type=CMD;\n  }\n else   if (num < 247) {\n    num-=139;\n    return type=NUM;\n  }\n else   if (num < 251) {\n    num=(num - 247) * 256 + (((int)data[pos++]) & 0xff) + 108;\n    return type=NUM;\n  }\n else   if (num < 255) {\n    num=-(num - 251) * 256 - (((int)data[pos++]) & 0xff) - 108;\n    return type=NUM;\n  }\n else   if (!charstring) {\n    printData();\n    throw new RuntimeException(\"Got a 255 code while reading dict\");\n  }\n else {\n    fnum=((((int)data[pos] & 0xff) << 24) | (((int)data[pos + 1] & 0xff) << 16) | (((int)data[pos + 2] & 0xff) << 8)| (((int)data[pos + 3] & 0xff))) / 65536f;\n    pos+=4;\n    return type=FLT;\n  }\n}"}
{"ids": "74371", "raw_code": "protected void deleteIcon(){\n  if (_selectedIcon == null) {\n    return;\n  }\n  if (_iconMap.remove(_selectedIcon.getName()) != null) {\n    removeIconFamiliesPanel();\n    addIconsToPanel(_iconMap);\n    deleteIconButton.setEnabled(false);\n    validate();\n  }\n}"}
{"ids": "47414", "raw_code": "public boolean equals(Object obj){\n  if (obj == null)   return false;\n  if (this == obj)   return true;\n  if (getClass() != obj.getClass())   return false;\n  ChoiceFormat other=(ChoiceFormat)obj;\n  return (Arrays.equals(choiceLimits,other.choiceLimits) && Arrays.equals(choiceFormats,other.choiceFormats));\n}"}
{"ids": "78601", "raw_code": "private static File createReserveDiskCacheDir(Context context){\n  File cacheDir=StorageUtils.getCacheDirectory(context,false);\n  File individualDir=new File(cacheDir,\"uil-images\");\n  if (individualDir.exists() || individualDir.mkdir()) {\n    cacheDir=individualDir;\n  }\n  return cacheDir;\n}"}
{"ids": "8271", "raw_code": "public static Date updated(Date self,Map<Object,Integer> updates){\n  Calendar cal=Calendar.getInstance();\n  cal.setTime(self);\n  set(cal,updates);\n  return cal.getTime();\n}"}
{"ids": "20038", "raw_code": "public boolean displayTopic(String name){\n  String topic=null;\n  if (name == null)   topic=DEFAULT + FILE_TYPE;\n else   topic=name.toLowerCase() + FILE_TYPE;\n  File helpFile=new File(helpDir,topic);\n  return display(helpFile);\n}"}
{"ids": "12661", "raw_code": "private void dashToWords(String tokenVal){\n  int index=tokenVal.indexOf('-');\n  String aaa=tokenVal.substring(0,index);\n  String bbb=tokenVal.substring(index + 1,tokenVal.length());\n  if (matches(digitsPattern,aaa) && matches(digitsPattern,bbb)) {\n    FeatureSet featureSet=tokenItem.getFeatures();\n    featureSet.setString(\"name\",aaa);\n    tokenToWords(aaa);\n    wordRelation.addWord(\"to\");\n    featureSet.setString(\"name\",bbb);\n    tokenToWords(bbb);\n    featureSet.setString(\"name\",\"\");\n  }\n else {\n    tokenToWords(aaa);\n    tokenToWords(bbb);\n  }\n}"}
{"ids": "53289", "raw_code": "public static int numberOfTrailingZerosSigned(long[] v){\n  for (int p=0; ; p++) {\n    if (p == v.length) {\n      return -1;\n    }\n    if (v[p] != 0) {\n      return Long.numberOfTrailingZeros(v[p]) + p * Long.SIZE;\n    }\n  }\n}"}
{"ids": "66594", "raw_code": "public static void applyWMRule(Collection<MWMInOutBound> lines,String boundType){\n  for (  MWMInOutBound line : lines) {\n    for (    MWMDefinition definition : MWMDefinition.getAll(line.getCtx(),line.get_TrxName())) {\n      WMRuleEngine.validateDefinition(line,definition,boundType);\n    }\n  }\n}"}
{"ids": "4486", "raw_code": "public static float readFloat(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {\n  if (required) {\n    return (float)jsonArray.getDouble(index);\n  }\n  if (notNull && jsonArray.isNull(index)) {\n    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));\n  }\n  float value=0.0f;\n  if (!jsonArray.isNull(index)) {\n    value=(float)jsonArray.getDouble(index);\n  }\n  return value;\n}"}
{"ids": "86542", "raw_code": "public final Flux<T> onErrorResumeWith(Predicate<? super Throwable> predicate,Function<? super Throwable,? extends Publisher<? extends T>> fallback){\n  Objects.requireNonNull(predicate,\"predicate\");\n  return onErrorResumeWith(null);\n}"}
{"ids": "38078", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tnumber of clusters. (default = 2).\",\"N\",1,\"-N <num>\"));\n  result.addAll(Collections.list(super.listOptions()));\n  return result.elements();\n}"}
{"ids": "9037", "raw_code": "private Set<String> findResourceNames(String path,String prefix,String suffix) throws IOException {\n  Set<String> resourceNames=findResourceNamesFromFileSystem(path,new File(path));\n  return filterResourceNames(resourceNames,prefix,suffix);\n}"}
{"ids": "22874", "raw_code": "public boolean add(K key,V item){\n  Set<V> values=map.get(key);\n  if (values == null) {\n    values=(sorted ? new TreeSet<V>() : new HashSet<V>());\n    map.put(key,values);\n  }\n  if (item == null)   return false;\n  return values.add(item);\n}"}
{"ids": "70299", "raw_code": "public void addECM(ECMInfo info){\n  ecmEffects.add(info);\n}"}
{"ids": "11759", "raw_code": "protected void loadImage(String filePath,OMGraphicList ret){\n  File file=new File(filePath);\n  if (file.exists() && file.isDirectory()) {\n    String[] files=file.list();\n    for (int i=0; i < files.length; i++) {\n      loadImage(filePath + \"/\" + files[i],ret);\n    }\n  }\n else {\n    fireStatusUpdate(LayerStatusEvent.START_WORKING);\n    try {\n      URL fileURL=PropUtils.getResourceOrFileOrURL(filePath);\n      if (fileURL != null) {\n        if (imageReaderLoaders != null) {\n          ImageTile imageTile=null;\n          for (          ImageReaderLoader idl : imageReaderLoaders) {\n            if (idl.isLoadable(filePath)) {\n              ImageReader id=idl.getImageReader(fileURL);\n              ImageTile tmpImageTile=id.getImageTile(imageCache);\n              if (imageTile == null) {\n                imageTile=tmpImageTile;\n              }\n else               if (tmpImageTile != null && imageTile instanceof ErrImageTile) {\n                imageTile=tmpImageTile;\n              }\n              if (imageTile != null && !(imageTile instanceof ErrImageTile)) {\n                break;\n              }\n            }\n          }\n          if (imageTile != null) {\n            addImageToLists(imageTile,ret,fileURL);\n          }\n        }\n else {\n          logger.warning(\"ImageReaders not configured in \" + getName() + \" ImageTileLayer.\");\n        }\n      }\n else {\n        logger.warning(\"Can't get URL from \" + filePath);\n      }\n    }\n catch (    MalformedURLException murle) {\n    }\n  }\n}"}
{"ids": "21722", "raw_code": "public static ExportMask createExportMask(DbClient dbClient,ExportGroup exportGroup,URI sdUri,String maskName) throws DatabaseException {\n  ExportMask exportMask=new ExportMask();\n  exportMask.setId(URIUtil.createId(ExportMask.class));\n  exportMask.setMaskName(maskName);\n  exportMask.setStorageDevice(sdUri);\n  dbClient.createObject(exportMask);\n  exportGroup.addExportMask(exportMask.getId());\n  dbClient.updateObject(exportGroup);\n  return exportMask;\n}"}
{"ids": "23920", "raw_code": "public LogEntry(String timestamp,String contents){\n  this.timestamp=timestamp;\n  this.contents=contents;\n}"}
{"ids": "2379", "raw_code": "public static boolean cancelPotentialWork(Object data,ImageView imageView){\n  final BitmapWorkerTask bitmapWorkerTask=getBitmapWorkerTask(imageView);\n  if (bitmapWorkerTask != null) {\n    final Object bitmapData=bitmapWorkerTask.mData;\n    if (bitmapData == null || !bitmapData.equals(data)) {\n      bitmapWorkerTask.cancel(true);\n      if (BuildConfig.DEBUG) {\n        Log.d(TAG,\"cancelPotentialWork - cancelled work for \" + data);\n      }\n    }\n else {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "14634", "raw_code": "void replacePolicyInResourceTree(Policy oldPolicy,Policy newPolicy) throws PolicyException, SSOException {\n  removePolicyFromResourceTree(oldPolicy);\n  addPolicyToResourceTree(newPolicy);\n}"}
{"ids": "7658", "raw_code": "private Shape[] createHorizontalBlock(double x0,double width,double y0,double y1,boolean inverted){\n  Shape[] result=new Shape[6];\n  Point2D p00=new Point2D.Double(y0,x0);\n  Point2D p01=new Point2D.Double(y0,x0 + width);\n  Point2D p02=new Point2D.Double(p01.getX() + getXOffset(),p01.getY() - getYOffset());\n  Point2D p03=new Point2D.Double(p00.getX() + getXOffset(),p00.getY() - getYOffset());\n  Point2D p0=new Point2D.Double(y1,x0);\n  Point2D p1=new Point2D.Double(y1,x0 + width);\n  Point2D p2=new Point2D.Double(p1.getX() + getXOffset(),p1.getY() - getYOffset());\n  Point2D p3=new Point2D.Double(p0.getX() + getXOffset(),p0.getY() - getYOffset());\n  GeneralPath bottom=new GeneralPath();\n  bottom.moveTo((float)p1.getX(),(float)p1.getY());\n  bottom.lineTo((float)p01.getX(),(float)p01.getY());\n  bottom.lineTo((float)p02.getX(),(float)p02.getY());\n  bottom.lineTo((float)p2.getX(),(float)p2.getY());\n  bottom.closePath();\n  GeneralPath top=new GeneralPath();\n  top.moveTo((float)p0.getX(),(float)p0.getY());\n  top.lineTo((float)p00.getX(),(float)p00.getY());\n  top.lineTo((float)p03.getX(),(float)p03.getY());\n  top.lineTo((float)p3.getX(),(float)p3.getY());\n  top.closePath();\n  GeneralPath back=new GeneralPath();\n  back.moveTo((float)p2.getX(),(float)p2.getY());\n  back.lineTo((float)p02.getX(),(float)p02.getY());\n  back.lineTo((float)p03.getX(),(float)p03.getY());\n  back.lineTo((float)p3.getX(),(float)p3.getY());\n  back.closePath();\n  GeneralPath front=new GeneralPath();\n  front.moveTo((float)p0.getX(),(float)p0.getY());\n  front.lineTo((float)p1.getX(),(float)p1.getY());\n  front.lineTo((float)p01.getX(),(float)p01.getY());\n  front.lineTo((float)p00.getX(),(float)p00.getY());\n  front.closePath();\n  GeneralPath left=new GeneralPath();\n  left.moveTo((float)p0.getX(),(float)p0.getY());\n  left.lineTo((float)p1.getX(),(float)p1.getY());\n  left.lineTo((float)p2.getX(),(float)p2.getY());\n  left.lineTo((float)p3.getX(),(float)p3.getY());\n  left.closePath();\n  GeneralPath right=new GeneralPath();\n  right.moveTo((float)p00.getX(),(float)p00.getY());\n  right.lineTo((float)p01.getX(),(float)p01.getY());\n  right.lineTo((float)p02.getX(),(float)p02.getY());\n  right.lineTo((float)p03.getX(),(float)p03.getY());\n  right.closePath();\n  result[0]=bottom;\n  result[1]=back;\n  if (inverted) {\n    result[2]=right;\n    result[3]=left;\n  }\n else {\n    result[2]=left;\n    result[3]=right;\n  }\n  result[4]=top;\n  result[5]=front;\n  return result;\n}"}
{"ids": "9949", "raw_code": "public OIDCTokens acquireTokensBySecurID(String username,String passcode,SecurIDRetriever securIdRetriever,TokenSpec tokenSpec) throws OIDCClientException, OIDCServerException, TokenValidationException, SSLConnectionException {\n  Validate.notEmpty(username,\"username\");\n  Validate.notEmpty(passcode,\"passcode\");\n  Validate.notNull(securIdRetriever,\"securIdRetriever\");\n  Validate.notNull(tokenSpec,\"tokenSpec\");\n  HttpResponse httpResponse=OIDCClientUtils.handleSecurIDMultiLeggedGrant(username,passcode,securIdRetriever,tokenSpec,getTokenEndpointURI(),this.clientId,this.holderOfKeyConfig,this.keyStore);\n  return OIDCClientUtils.parseTokenResponse(httpResponse,this.providerPublicKey,this.issuer,this.clientId,this.clockToleranceInSeconds);\n}"}
{"ids": "48689", "raw_code": "public void loadNested(Environment env){\n  loadNested(env,0);\n}"}
{"ids": "31400", "raw_code": "private JSONArray requestAllFileSystems() throws IOException, JSONException {\n  JSONArray ret=new JSONArray();\n  for (  Filesystem fs : filesystems) {\n    ret.put(fs.getRootEntry());\n  }\n  return ret;\n}"}
{"ids": "15363", "raw_code": "private Promise<ActionResponse,ResourceException> internalHandleAction(String tokenId,Context context,ActionRequest request){\n  final String action=request.getAction();\n  final ActionHandler actionHandler=actionHandlers.get(action);\n  if (actionHandler != null) {\n    return actionHandler.handle(tokenId,context,request);\n  }\n else {\n    String message=String.format(\"Action %s not implemented for this resource\",action);\n    NotSupportedException e=new NotSupportedException(message);\n    if (LOGGER.messageEnabled()) {\n      LOGGER.message(\"SessionResource.actionInstance :: \" + message,e);\n    }\n    return e.asPromise();\n  }\n}"}
{"ids": "44994", "raw_code": "public int compareTo(Object obj){\n  int diff=-1;\n  if (obj instanceof ParserNotice) {\n    ParserNotice p2=(ParserNotice)obj;\n    diff=level - p2.getLevel();\n    if (diff == 0) {\n      diff=line - p2.getLine();\n      if (diff == 0) {\n        diff=message.compareTo(p2.getMessage());\n      }\n    }\n  }\n  return diff;\n}"}
{"ids": "40617", "raw_code": "@Override @SuppressWarnings(\"unchecked\") public NamedList<Object> doHighlighting(DocList docs,Query query,SolrQueryRequest req,String[] defaultFields) throws IOException {\n  SolrParams params=req.getParams();\n  if (!isHighlightingEnabled(params))   return null;\n  SolrIndexSearcher searcher=req.getSearcher();\n  IndexSchema schema=searcher.getSchema();\n  NamedList fragments=new SimpleOrderedMap();\n  String[] fieldNames=getHighlightFields(query,req,defaultFields);\n  Set<String> fset=new HashSet<>();\n{\n    for (    String f : fieldNames) {\n      fset.add(f);\n    }\n    SchemaField keyField=schema.getUniqueKeyField();\n    if (null != keyField)     fset.add(keyField.getName());\n  }\n  FastVectorHighlighter fvh=new FastVectorHighlighter(params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER,true),params.getBool(HighlightParams.FIELD_MATCH,false));\n  fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT,SolrHighlighter.DEFAULT_PHRASE_LIMIT));\n  FieldQuery fieldQuery=fvh.getFieldQuery(query,searcher.getIndexReader());\n  DocIterator iterator=docs.iterator();\n  for (int i=0; i < docs.size(); i++) {\n    int docId=iterator.nextDoc();\n    Document doc=searcher.doc(docId,fset);\n    NamedList docSummaries=new SimpleOrderedMap();\n    for (    String fieldName : fieldNames) {\n      fieldName=fieldName.trim();\n      if (useFastVectorHighlighter(params,schema,fieldName))       doHighlightingByFastVectorHighlighter(fvh,fieldQuery,req,docSummaries,docId,doc,fieldName);\n else       doHighlightingByHighlighter(query,req,docSummaries,docId,doc,fieldName);\n    }\n    String printId=schema.printableUniqueKey(doc);\n    fragments.add(printId == null ? null : printId,docSummaries);\n  }\n  return fragments;\n}"}
{"ids": "27494", "raw_code": "private IBindingSet aggregate(final Iterable<IBindingSet> solutions){\n  final IBindingSet aggregates=new ContextBindingSet(context,new ListBindingSet());\n  if (groupBy != null) {\n    final IBindingSet aSolution=solutions.iterator().next();\n    for (    IValueExpression<?> expr : groupBy) {\n      if (expr instanceof IVariable<?>) {\n        final IVariable<?> var=(IVariable<?>)expr;\n        final Object varValue=var.get(aSolution);\n        final Constant<?> val;\n        if (varValue == null) {\n          val=Constant.errorValue();\n        }\n else {\n          val=new Constant(varValue.getClass().cast(varValue));\n        }\n        ;\n        aggregates.set(var,val);\n      }\n else       if (expr instanceof IBind<?>) {\n        final IBind<?> bindExpr=(IBind<?>)expr;\n        final Constant<?> val;\n        final Object exprValue=bindExpr.get(aSolution);\n        if (exprValue == null) {\n          val=Constant.errorValue();\n        }\n else {\n          val=new Constant(exprValue.getClass().cast(exprValue));\n        }\n        final IVariable<?> ovar=((IBind<?>)expr).getVar();\n        aggregates.set(ovar,val);\n      }\n    }\n  }\n{\n    final boolean nestedAggregates=groupByState.isNestedAggregates();\n    final Iterator<Map.Entry<IAggregate<?>,IVariable<?>>> itr=rewrite.getAggExpr().entrySet().iterator();\n    while (itr.hasNext()) {\n      final Map.Entry<IAggregate<?>,IVariable<?>> e=itr.next();\n      doAggregate(e.getKey(),e.getValue(),nestedAggregates,aggregates,solutions,stats);\n    }\n    if (log.isTraceEnabled())     log.trace(\"aggregates: \" + aggregates);\n  }\n  for (  IValueExpression<?> expr : rewrite.getSelect2()) {\n    try {\n      expr.get(aggregates);\n    }\n catch (    SparqlTypeErrorException ex) {\n      TypeErrorLog.handleTypeError(ex,expr,stats);\n      continue;\n    }\ncatch (    IllegalArgumentException ex) {\n      TypeErrorLog.handleTypeError(ex,expr,stats);\n      continue;\n    }\n  }\n{\n    final boolean drop;\n    final IConstraint[] having2=rewrite.getHaving2();\n    if (having2 != null && !BOpUtility.isConsistent(having2,aggregates)) {\n      drop=true;\n    }\n else {\n      drop=false;\n    }\n    if (log.isInfoEnabled())     log.info((drop ? \"drop\" : \"keep\") + \" : \" + aggregates);\n    if (drop) {\n      return null;\n    }\n  }\n  final IBindingSet out;\n  if (groupBy == null) {\n    assert !aggregates.containsErrorValues();\n    out=aggregates.copy(groupByState.getSelectVars().toArray(new IVariable[0]));\n  }\n else {\n    out=aggregates.copyMinusErrors(groupByState.getSelectVars().toArray(new IVariable[0]));\n  }\n  return out;\n}"}
{"ids": "35145", "raw_code": "public static void deleteCollection(String host,String collection) throws Exception {\n  String deleteCollectionTemplate=\"http://%s:%s/solr/admin/collections?action=DELETE&name=%s\";\n  String deleteCollectionCommand=String.format(deleteCollectionTemplate,host,DEFAULT_SOLR_PORT,collection);\n  executeSolrCommand(deleteCollectionCommand);\n}"}
{"ids": "60559", "raw_code": "@Nullable public static HKey psiKey(@NotNull PsiMethod psiMethod,@NotNull Direction direction,@NotNull MessageDigest md){\n  final PsiClass psiClass=PsiTreeUtil.getParentOfType(psiMethod,PsiClass.class,false);\n  if (psiClass == null) {\n    return null;\n  }\n  byte[] classDigest=psiClassDigest(psiClass,md);\n  if (classDigest == null) {\n    return null;\n  }\n  byte[] sigDigest=methodDigest(psiMethod,md);\n  if (sigDigest == null) {\n    return null;\n  }\n  byte[] digest=new byte[HASH_SIZE];\n  System.arraycopy(classDigest,0,digest,0,CLASS_HASH_SIZE);\n  System.arraycopy(sigDigest,0,digest,CLASS_HASH_SIZE,SIGNATURE_HASH_SIZE);\n  return new HKey(digest,mkDirectionKey(direction),true);\n}"}
{"ids": "34120", "raw_code": "public static boolean isSdCardMounted(){\n  String status=Environment.getExternalStorageState();\n  if (status.equals(Environment.MEDIA_MOUNTED))   return true;\n  return false;\n}"}
{"ids": "68130", "raw_code": "private void parseResource(final Element resourceElement,final Collection<Resource> resources){\n  final String tagName=resourceElement.getTagName();\n  final String uri=resourceElement.getTextContent();\n  if (TAG_GROUP_REF.equals(tagName)) {\n    resources.addAll(getResourcesForGroup(uri));\n  }\n  if (getResourceType(resourceElement) != null) {\n    final Resource resource=createResource(resourceElement);\n    LOG.debug(\"\\t\\tadding resource: {}\",resource);\n    resources.add(resource);\n  }\n}"}
{"ids": "34424", "raw_code": "@Override public void licenceFile(String textToShow,File licenceFile) throws CancelException {\n  try {\n    final FileInputStream content=new FileInputStream(licenceFile);\n    final StringWriter writer=new StringWriter();\n    IOUtils.copy(content,writer,\"UTF-8\");\n    content.close();\n    licence(textToShow,writer.toString());\n  }\n catch (  IOException e) {\n    throw new ScriptFailureException(\"Cannot acces the licence file\",e);\n  }\n}"}
{"ids": "1167", "raw_code": "public static void convolveAndTranspose(Kernel kernel,int[] inPixels,int[] outPixels,int width,int height,boolean alpha,boolean premultiply,boolean unpremultiply,int edgeAction){\n  float[] matrix=kernel.getKernelData(null);\n  int cols=kernel.getWidth();\n  int cols2=cols / 2;\n  for (int y=0; y < height; y++) {\n    int index=y;\n    int ioffset=y * width;\n    for (int x=0; x < width; x++) {\n      float r=0, g=0, b=0, a=0;\n      int moffset=cols2;\n      for (int col=-cols2; col <= cols2; col++) {\n        float f=matrix[moffset + col];\n        if (f != 0) {\n          int ix=x + col;\n          if (ix < 0) {\n            if (edgeAction == CLAMP_EDGES)             ix=0;\n else             if (edgeAction == WRAP_EDGES)             ix=(x + width) % width;\n          }\n else           if (ix >= width) {\n            if (edgeAction == CLAMP_EDGES)             ix=width - 1;\n else             if (edgeAction == WRAP_EDGES)             ix=(x + width) % width;\n          }\n          int rgb=inPixels[ioffset + ix];\n          int pa=(rgb >> 24) & 0xff;\n          int pr=(rgb >> 16) & 0xff;\n          int pg=(rgb >> 8) & 0xff;\n          int pb=rgb & 0xff;\n          if (premultiply) {\n            float a255=pa * (1.0f / 255.0f);\n            pr*=a255;\n            pg*=a255;\n            pb*=a255;\n          }\n          a+=f * pa;\n          r+=f * pr;\n          g+=f * pg;\n          b+=f * pb;\n        }\n      }\n      if (unpremultiply && a != 0 && a != 255) {\n        float f=255.0f / a;\n        r*=f;\n        g*=f;\n        b*=f;\n      }\n      int ia=alpha ? PixelUtils.clamp((int)(a + 0.5)) : 0xff;\n      int ir=PixelUtils.clamp((int)(r + 0.5));\n      int ig=PixelUtils.clamp((int)(g + 0.5));\n      int ib=PixelUtils.clamp((int)(b + 0.5));\n      outPixels[index]=(ia << 24) | (ir << 16) | (ig << 8)| ib;\n      index+=height;\n    }\n  }\n}"}
{"ids": "28431", "raw_code": "public void animateProgressFill(int animateTo){\n  mAnimationHandler.removeMessages(0);\n  if (animateTo > mMax || animateTo < 0) {\n    throw new IllegalArgumentException(String.format(\"Animation progress (%d) is greater than the max progress (%d) or lower than 0 \",animateTo,mMax));\n  }\n  mAnimationHandler.setAnimateTo(animateTo);\n  mAnimationHandler.sendEmptyMessage(0);\n  invalidate();\n}"}
{"ids": "71489", "raw_code": "static boolean isRegistered(ObjectName objectName){\n  Set<ObjectName> registeredObjectNames=mBeanServer.queryNames(objectName,null);\n  return !registeredObjectNames.isEmpty();\n}"}
{"ids": "56634", "raw_code": "public <T>PushableLazyFutureStream<T> futureStream(final LazyReact s){\n  final Queue<T> q=createQueue();\n  return new PushableLazyFutureStream<T>(q,s.fromStream(q.stream()));\n}"}
{"ids": "1836", "raw_code": "public byte[] convertHexStringToBinary(String hexString) throws IllegalArgumentException {\n  int length=hexString.length();\n  if (length % 2 != 0) {\n    throw new IllegalArgumentException(\"The provided hex String must be an even length, but was of length \" + length + \": \"+ hexString);\n  }\n  byte[] binary=new byte[length / 2];\n  for (int i=0; i < length; i+=2) {\n    char highBitsChar=hexString.charAt(i);\n    char lowBitsChar=hexString.charAt(i + 1);\n    int highBits=hexCharToInt(highBitsChar,hexString) << 4;\n    int lowBits=hexCharToInt(lowBitsChar,hexString);\n    binary[i / 2]=(byte)(highBits + lowBits);\n  }\n  return binary;\n}"}
{"ids": "32591", "raw_code": "public void writeField(final String name,final short value) throws java.io.IOException {\n  writeField(name,Short.toString(value));\n}"}
{"ids": "63498", "raw_code": "public static ResultSet select(Connection conn,String sql) throws SQLException {\n  Statement stat=conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);\n  return stat.executeQuery(sql);\n}"}
{"ids": "23590", "raw_code": "public static void writeSetOfLongs(Set set,boolean hasLongIDs,DataOutput out) throws IOException {\n  if (set == null) {\n    out.writeInt(-1);\n  }\n else {\n    out.writeInt(set.size());\n    out.writeBoolean(hasLongIDs);\n    for (Iterator it=set.iterator(); it.hasNext(); ) {\n      Long l=(Long)it.next();\n      if (hasLongIDs) {\n        out.writeLong(l.longValue());\n      }\n else {\n        out.writeInt((int)l.longValue());\n      }\n    }\n  }\n}"}
{"ids": "75332", "raw_code": "private void restoreWidget(Key key,byte[] buffer,int dataSize) throws IOException {\n  if (VERBOSE)   Log.v(TAG,\"unpacking widget \" + key.id);\n  if (DEBUG)   Log.d(TAG,\"read (\" + buffer.length + \"): \"+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));\n  Widget widget=unpackProto(new Widget(),buffer,dataSize);\n  if (DEBUG)   Log.d(TAG,\"unpacked \" + widget.provider);\n  if (widget.icon.data != null) {\n    Bitmap icon=BitmapFactory.decodeByteArray(widget.icon.data,0,widget.icon.data.length);\n    if (icon == null) {\n      Log.w(TAG,\"failed to unpack widget icon for \" + key.name);\n    }\n else {\n      mIconCache.preloadIcon(ComponentName.unflattenFromString(widget.provider),icon,widget.icon.dpi,widget.label,mUserSerial,mIdp);\n    }\n  }\n  widgetSizes.add(widget.provider + \"#\" + 1+ \",\"+ 1);\n}"}
{"ids": "79600", "raw_code": "private static boolean hasResponseBody(int requestMethod,int responseCode){\n  return requestMethod != Request.Method.HEAD && !(HttpStatus.SC_CONTINUE <= responseCode && responseCode < HttpStatus.SC_OK) && responseCode != HttpStatus.SC_NO_CONTENT && responseCode != HttpStatus.SC_NOT_MODIFIED;\n}"}
{"ids": "10994", "raw_code": "public void considerRegionXRegion(GeoRegion r,GeoRegion region){\n  GeoArray rBoundary=r.getPoints();\n  Geo rPoint=rBoundary.get(0,new Geo());\n  GeoArray regionBoundary=region.getPoints();\n  Geo regionPoint=regionBoundary.get(0,new Geo());\n  if (Intersection.isPointInPolygon(rPoint,regionBoundary) || Intersection.isPointInPolygon(regionPoint,rBoundary)) {\n    collector.collect(r,region);\n  }\n else {\n    for (GeoPath.SegmentIterator pit=r.segmentIterator(); pit.hasNext(); ) {\n      GeoSegment seg=pit.nextSegment();\n      if (filter.preConsider(seg,region) && considerSegmentXRegion(seg,region)) {\n        collector.collect(seg,region);\n        return;\n      }\n    }\n  }\n}"}
{"ids": "82556", "raw_code": "private char foldCase(char ch){\n  if (ch < 128) {\n    if ('A' <= ch && ch <= 'Z') {\n      return (char)(ch + ('a' - 'A'));\n    }\n    return ch;\n  }\n  return Character.toLowerCase(Character.toUpperCase(ch));\n}"}
{"ids": "48824", "raw_code": "public WritableRaster createCompatibleWritableRaster(int w,int h){\n  if (w <= 0 || h <= 0) {\n    throw new RasterFormatException(\"negative \" + ((w <= 0) ? \"width\" : \"height\"));\n  }\n  SampleModel sm=sampleModel.createCompatibleSampleModel(w,h);\n  return new ByteBandedRaster(sm,new Point(0,0));\n}"}
{"ids": "25769", "raw_code": "@TargetApi(VERSION_CODES.LOLLIPOP) public static void reveal(final View view,int cx,int cy){\n  if (!hasLollipop()) {\n    view.setVisibility(View.VISIBLE);\n    return;\n  }\n  int finalRadius=Math.max(view.getWidth(),view.getHeight());\n  Animator animator=ViewAnimationUtils.createCircularReveal(view,cx,cy,0,finalRadius);\n  view.setVisibility(View.VISIBLE);\n  animator.start();\n}"}
{"ids": "52514", "raw_code": "public TopNMetric(TopNMetricType type,String previousStop,SortDirection order){\n  this(type,previousStop);\n  if (order == SortDirection.ASC) {\n    this.type=TopNMetricType.INVERTED;\n    this.nested=Optional.of(new TopNMetric(type,previousStop));\n    this.previousStop=Optional.empty();\n  }\n}"}
{"ids": "84341", "raw_code": "public void removeSupportedOptions(Set<String> unmatchedProcessorOptions){\n  unmatchedProcessorOptions.removeAll(supportedOptionNames);\n}"}
{"ids": "49508", "raw_code": "protected void subscribe(){\n  if (sampleClientSub == null) {\n    try {\n      sampleClientSub=new SampleAsyncCallback(url,clientIdSub,cleanSession,quietMode,userName,password);\n    }\n catch (    MqttException e) {\n      e.printStackTrace();\n    }\n  }\n  if (sampleClientSub != null) {\n    String topic=\"Sample/#\";\n    int qos=2;\n    try {\n      sampleClientSub.subscribe(topic,qos);\n    }\n catch (    Throwable e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"ids": "70841", "raw_code": "private boolean shouldCrop(int width,int height){\n  int pixelError=1;\n  pixelError+=Math.round(Math.max(width,height) / 1000f);\n  return (mMaxResultImageSizeX > 0 && mMaxResultImageSizeY > 0) || Math.abs(mCropRect.left - mCurrentImageRect.left) > pixelError || Math.abs(mCropRect.top - mCurrentImageRect.top) > pixelError || Math.abs(mCropRect.bottom - mCurrentImageRect.bottom) > pixelError || Math.abs(mCropRect.right - mCurrentImageRect.right) > pixelError;\n}"}
{"ids": "60987", "raw_code": "public boolean exists(){\n  return doAccess(F_OK);\n}"}
{"ids": "16317", "raw_code": "@Deprecated public boolean isFillBelowLine(){\n  return mFillBelowLine.size() > 0;\n}"}
{"ids": "5050", "raw_code": "public ShapeTileBox bounding_box(){\n  if (bounding_box != null)   return bounding_box;\n  PlaPointFloat start_corner=start_point_approx();\n  PlaPointFloat end_corner=end_point_approx();\n  double llx=Math.min(start_corner.v_x,end_corner.v_x);\n  double lly=Math.min(start_corner.v_y,end_corner.v_y);\n  double urx=Math.max(start_corner.v_x,end_corner.v_x);\n  double ury=Math.max(start_corner.v_y,end_corner.v_y);\n  PlaPointInt lower_left=new PlaPointInt(Math.floor(llx),Math.floor(lly));\n  PlaPointInt upper_right=new PlaPointInt(Math.ceil(urx),Math.ceil(ury));\n  bounding_box=new ShapeTileBox(lower_left,upper_right);\n  return bounding_box;\n}"}
{"ids": "56952", "raw_code": "public boolean isValidAttachmentPoint(DatapathId switchDPID,OFPort switchPort){\n  if (topology.isAttachmentPointPort(switchDPID,switchPort) == false)   return false;\n  if (suppressAPs.contains(new SwitchPort(switchDPID,switchPort)))   return false;\n  return true;\n}"}
{"ids": "52943", "raw_code": "@Override public P readPage(int pageID){\n  try {\n    countRead();\n    long offset=((long)(header.getReservedPages() + pageID)) * (long)pageSize;\n    byte[] buffer=new byte[pageSize];\n    file.seek(offset);\n    file.read(buffer);\n    return byteArrayToPage(buffer);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"IOException occurred during reading of page \" + pageID + \"\\n\",e);\n  }\n}"}
{"ids": "11517", "raw_code": "public void addActionListener(ActionListener listener){\n  forwardProjectionButton.addActionListener(listener);\n  backProjectionButton.addActionListener(listener);\n}"}
{"ids": "8868", "raw_code": "void writeDataToFileLocked(RandomAccessFile file,boolean addMayo,boolean addTomato,int whichFilling) throws IOException {\n  file.setLength(0L);\n  file.writeInt(whichFilling);\n  file.writeBoolean(addMayo);\n  file.writeBoolean(addTomato);\n  Log.v(TAG,\"NEW STATE: mayo=\" + addMayo + \" tomato=\"+ addTomato+ \" filling=\"+ whichFilling);\n}"}
{"ids": "75464", "raw_code": "static Type[] mapKeyAndValueTypes(Type context,Class<?> contextRawType){\n  if (context == Properties.class)   return new Type[]{String.class,String.class};\n  Type mapType=getSupertype(context,contextRawType,Map.class);\n  if (mapType instanceof ParameterizedType) {\n    ParameterizedType mapParameterizedType=(ParameterizedType)mapType;\n    return mapParameterizedType.getActualTypeArguments();\n  }\n  return new Type[]{Object.class,Object.class};\n}"}
{"ids": "29722", "raw_code": "static AggregatedHttpMessage of(HttpHeaders headers,HttpData content,HttpHeaders trailingHeaders){\n  return of(Collections.emptyList(),headers,content,trailingHeaders);\n}"}
{"ids": "79417", "raw_code": "public static boolean isLetter(char c){\n  return Character.isLetter(c);\n}"}
{"ids": "71646", "raw_code": "protected List<TreeNode> createChildList(){\n  Branch branch=getXmlBranch();\n  int size=branch.nodeCount();\n  List<TreeNode> childList=new ArrayList<TreeNode>(size);\n  for (int i=0; i < size; i++) {\n    Node node=branch.node(i);\n    if (node instanceof CharacterData) {\n      String text=node.getText();\n      if (text == null) {\n        continue;\n      }\n      text=text.trim();\n      if (text.length() <= 0) {\n        continue;\n      }\n    }\n    childList.add(createChildTreeNode(node));\n  }\n  return childList;\n}"}
{"ids": "66983", "raw_code": "public Set<Value> mayAliases(Value v,Unit u){\n  Set<Value> res=new HashSet<Value>();\n  Set<Set<Value>> flow=getFlowBefore(u);\n  for (  Set<Value> set : flow) {\n    if (set.contains(v))     res.addAll(set);\n  }\n  return res;\n}"}
{"ids": "68267", "raw_code": "@Nullable private static String read(@NonNull SocketChannel socket,@NonNull byte[] buffer) throws IOException {\n  ByteBuffer buf=ByteBuffer.wrap(buffer,0,buffer.length);\n  while (buf.position() != buf.limit()) {\n    int count;\n    count=socket.read(buf);\n    if (count < 0) {\n      throw new IOException(\"EOF\");\n    }\n  }\n  try {\n    return new String(buffer,0,buf.position(),AdbHelper.DEFAULT_ENCODING);\n  }\n catch (  UnsupportedEncodingException e) {\n    return null;\n  }\n}"}
{"ids": "4388", "raw_code": "public static DateTimeUnit createLocalDateUnitInstance(Date date,org.hisp.dhis.calendar.Calendar calendar){\n  return calendar.fromIso(DateTimeUnit.fromJdkDate(date));\n}"}
{"ids": "59735", "raw_code": "public static boolean equal(double a,double b){\n  return (Math.abs(a - b) < EPSILON);\n}"}
{"ids": "3548", "raw_code": "@Override public void addClassAnnotation(char[] buffer,int offset,int length){\n  String annType=new String(buffer,offset,length);\n  if (_annTypes.contains(annType)) {\n    addClass(_className);\n  }\n}"}
{"ids": "61002", "raw_code": "public Process exec(String[] taintedCommand,String[] taintedEnvironment,File workingDirectory,boolean redirectErrorStream) throws IOException {\n  if (taintedCommand == null) {\n    throw new NullPointerException(\"taintedCommand == null\");\n  }\n  if (taintedCommand.length == 0) {\n    throw new IndexOutOfBoundsException(\"taintedCommand.length == 0\");\n  }\n  String[] command=taintedCommand.clone();\n  String[] environment=taintedEnvironment != null ? taintedEnvironment.clone() : null;\n  for (int i=0; i < command.length; i++) {\n    if (command[i] == null) {\n      throw new NullPointerException(\"taintedCommand[\" + i + \"] == null\");\n    }\n  }\n  if (environment != null) {\n    for (int i=0; i < environment.length; i++) {\n      if (environment[i] == null) {\n        throw new NullPointerException(\"taintedEnvironment[\" + i + \"] == null\");\n      }\n    }\n  }\n  FileDescriptor in=new FileDescriptor();\n  FileDescriptor out=new FileDescriptor();\n  FileDescriptor err=new FileDescriptor();\n  String workingPath=(workingDirectory == null) ? null : workingDirectory.getPath();\nsynchronized (processReferences) {\n    int pid;\n    try {\n      pid=exec(command,environment,workingPath,in,out,err,redirectErrorStream);\n    }\n catch (    IOException e) {\n      IOException wrapper=new IOException(\"Error running exec().\" + \" Command: \" + Arrays.toString(command) + \" Working Directory: \"+ workingDirectory+ \" Environment: \"+ Arrays.toString(environment));\n      wrapper.initCause(e);\n      throw wrapper;\n    }\n    ProcessImpl process=new ProcessImpl(pid,in,out,err);\n    ProcessReference processReference=new ProcessReference(process,referenceQueue);\n    processReferences.put(pid,processReference);\n    processReferences.notifyAll();\n    return process;\n  }\n}"}
{"ids": "62776", "raw_code": "static PathPart makeAbsolute(PathPart oldPart){\n  @SuppressWarnings(\"StringEquality\") boolean encodedCached=oldPart.encoded != NOT_CACHED;\n  String oldPath=encodedCached ? oldPart.encoded : oldPart.decoded;\n  if (oldPath == null || oldPath.length() == 0 || oldPath.startsWith(\"/\")) {\n    return oldPart;\n  }\n  String newEncoded=encodedCached ? \"/\" + oldPart.encoded : NOT_CACHED;\n  @SuppressWarnings(\"StringEquality\") boolean decodedCached=oldPart.decoded != NOT_CACHED;\n  String newDecoded=decodedCached ? \"/\" + oldPart.decoded : NOT_CACHED;\n  return new PathPart(newEncoded,newDecoded);\n}"}
{"ids": "86790", "raw_code": "public static int[] splitGt(String gt){\n  final int gtlen=gt.length();\n  if (gtlen == 1) {\n    return new int[]{alleleId(gt.charAt(0))};\n  }\n else {\n    int[] result=new int[2];\n    int ploid=0;\n    int allelestart=0;\n    for (int i=0; i < gtlen; i++) {\n      final char c=gt.charAt(i);\n      if (c == PHASED_SEPARATOR || c == UNPHASED_SEPARATOR) {\n        if (ploid == result.length) {\n          result=Arrays.copyOf(result,result.length + 1);\n        }\n        result[ploid++]=alleleId(gt,allelestart,i - allelestart);\n        allelestart=i + 1;\n      }\n    }\n    if (allelestart < gtlen) {\n      if (ploid == result.length) {\n        result=Arrays.copyOf(result,result.length + 1);\n      }\n      result[ploid++]=alleleId(gt,allelestart,gtlen - allelestart);\n    }\n    if (ploid < result.length) {\n      result=Arrays.copyOf(result,ploid);\n    }\n    if (ploid == 0) {\n      throw new NumberFormatException(\"Malformed GT '\" + gt + \"'\");\n    }\n    return result;\n  }\n}"}
{"ids": "74241", "raw_code": "public void deleteKernel(String name){\n  Kernel kernel=getKernelByName(name);\n  if (kernel != null) {\n    kernel.dispose();\n    Integer oldSize=Integer.valueOf(_kernelHashTable.size());\n    _kernelHashTable.remove(name);\n    setDirtyAndFirePropertyChange(KERNEL_LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_kernelHashTable.size()));\n  }\n}"}
{"ids": "81966", "raw_code": "protected boolean shouldStop(){\n  return isPaused() || isKilled();\n}"}
{"ids": "76776", "raw_code": "public Builder addTokenFilter(String name,Map<String,String> params) throws IOException {\n  Objects.requireNonNull(name,\"TokenFilter name may not be null\");\n  tokenFilters.add(applyResourceLoader(TokenFilterFactory.forName(name,applyDefaultParams(params))));\n  componentsAdded=true;\n  return this;\n}"}
{"ids": "80248", "raw_code": "public StyledToolTipUI(Style style){\n  this.style=style;\n  border=BorderFactory.createLineBorder(style.getShadowColor());\n}"}
{"ids": "18302", "raw_code": "public final void addElements(Object value,int numberOfElements){\n  if ((m_firstFree + numberOfElements) >= m_mapSize) {\n    m_mapSize+=(m_blocksize + numberOfElements);\n    Object newMap[]=new Object[m_mapSize];\n    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);\n    m_map=newMap;\n  }\n  for (int i=0; i < numberOfElements; i++) {\n    m_map[m_firstFree]=value;\n    m_firstFree++;\n  }\n}"}
{"ids": "11682", "raw_code": "public void actionPerformed(ActionEvent e){\n  super.actionPerformed(e);\n  String cmd=e.getActionCommand();\n  if (cmd == showMapsCommand) {\n    JCheckBox mapCheck=(JCheckBox)e.getSource();\n    viewAttributes.showMaps=mapCheck.isSelected();\n    repaint();\n  }\n else   if (cmd == showInfoCommand) {\n    JCheckBox infoCheck=(JCheckBox)e.getSource();\n    boolean showInfo=infoCheck.isSelected();\n    viewAttributes.showInfo=showInfo;\n    showSubframes(showInfo);\n    doPrepare();\n  }\n else   if (cmd == lockSeriesCommand) {\n    JCheckBox lockCheck=(JCheckBox)e.getSource();\n    boolean locked=lockCheck.isSelected();\n    if (locked) {\n      List<RpfCoverageBox> coverageBoxes=getCoverageBoxes();\n      String seriesName;\n      if (coverageBoxes == null || coverageBoxes.isEmpty()) {\n        seriesName=RpfViewAttributes.ANY;\n      }\n else {\n        seriesName=coverageBoxes.get(0).chartCode;\n      }\n      if (seriesName == null) {\n        seriesName=RpfViewAttributes.ANY;\n        fireRequestMessage(\"The \" + getName() + \" Layer is having trouble determining what kind\\nof charts are being displayed.  Can't establish lock for charts\\ncurrently being viewed.\");\n      }\n      lockCheck.setText(lockedButtonTitle + \" - \" + seriesName);\n      viewAttributes.chartSeries=seriesName;\n    }\n else {\n      lockCheck.setText(unlockedButtonTitle);\n      viewAttributes.chartSeries=RpfViewAttributes.ANY;\n    }\n  }\n else   if (cmd == showCoverageCommand) {\n    if (coverage != null) {\n      JCheckBox coverageCheck=(JCheckBox)e.getSource();\n      coverage.setInUse(coverageCheck.isSelected());\n      doPrepare();\n    }\n  }\n else {\n    doPrepare();\n  }\n}"}
{"ids": "69787", "raw_code": "@Override public void run(){\n  if (mDelay > 0) {\n    try {\n      Thread.sleep(mDelay);\n    }\n catch (    InterruptedException e) {\n      LogImpl.w(TAG,getName() + \": \" + e.getMessage());\n    }\n  }\n  if (mParentTask != null) {\nsynchronized (this) {\n      try {\n        wait();\n      }\n catch (      InterruptedException e) {\n        LogImpl.w(TAG,getName() + \": \" + e.getMessage());\n      }\n    }\n  }\n  mStatus=Status.STATUS_EXECUTING;\n  long startTime=System.currentTimeMillis();\n  start();\n  long endTime=System.currentTimeMillis();\n  LogImpl.i(TAG,getName() + \" runs \" + (endTime - startTime));\n  if (mDoneSignal != null) {\n    mDoneSignal.countDown();\n  }\n  if (mChildTask != null) {\nsynchronized (mChildTask) {\n      mChildTask.notify();\n    }\n  }\n  mStatus=Status.STATUS_DONE;\n}"}
{"ids": "80458", "raw_code": "public boolean has(final String name){\n  return contents.containsKey(name.toLowerCase());\n}"}
{"ids": "54406", "raw_code": "public void stop(){\n  isAlive.set(false);\n  for (  KafkaConsumer<byte[],byte[]> c : consumers.values()) {\n    c.wakeup();\n  }\n  kafkaConsumerExecutor.shutdownNow();\n  holdingBuffer.clear();\n  IOUtils.closeQuietly(this);\n}"}
{"ids": "24633", "raw_code": "public String consumeElementSelector(){\n  int start=pos;\n  while (!isEmpty() && (matchesWord() || matchesAny('|','_','-')))   pos++;\n  return queue.substring(start,pos);\n}"}
{"ids": "61608", "raw_code": "@SuppressWarnings(\"unchecked\") public LongMap(int initialCapacity,float loadFactor){\n  if (initialCapacity < 0)   throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n  if (initialCapacity > 1 << 30)   throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n  capacity=nextPowerOfTwo(initialCapacity);\n  if (loadFactor <= 0)   throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\n  this.loadFactor=loadFactor;\n  threshold=(int)(capacity * loadFactor);\n  mask=capacity - 1;\n  hashShift=63 - Long.numberOfTrailingZeros(capacity);\n  stashCapacity=Math.max(3,(int)Math.ceil(Math.log(capacity)) * 2);\n  pushIterations=Math.max(Math.min(capacity,8),(int)Math.sqrt(capacity) / 8);\n  keyTable=new long[capacity + stashCapacity];\n  valueTable=(V[])new Object[keyTable.length];\n}"}
{"ids": "15088", "raw_code": "public void endAttributes() throws SAXException {\n  String uri=getCurrentElementUri();\n  String local=getCurrentElementLocal();\n  String prefix=nsContext.getPrefix(uri);\n  _assert(prefix != null);\n  String qname;\n  if (prefix.length() != 0)   qname=prefix + ':' + local;\n else   qname=local;\n  nsContext.iterateDeclaredPrefixes(startPrefixCallback);\n  writer.startElement(uri,local,qname,attributes);\n  attributes.clear();\n  textBuf.setLength(0);\n}"}
{"ids": "9048", "raw_code": "private String abbreviateScript(String script){\n  if (script == null) {\n    return null;\n  }\n  if (script.length() <= 1000) {\n    return script;\n  }\n  return \"...\" + script.substring(3,1000);\n}"}
{"ids": "12972", "raw_code": "public static void expandID(String numberString,WordRelation wordRelation,Item tokenItem){\n  int numberDigits=numberString.length();\n  if ((numberDigits == 4) && (numberString.charAt(2) == '0') && (numberString.charAt(3) == '0')) {\n    if (numberString.charAt(1) == '0') {\n      expandNumber(numberString,wordRelation,tokenItem);\n    }\n else {\n      expandNumber(numberString.substring(0,2),wordRelation,tokenItem);\n      wordRelation.addWord(tokenItem,\"hundred\");\n    }\n  }\n else   if ((numberDigits == 2) && (numberString.charAt(0) == '0')) {\n    wordRelation.addWord(tokenItem,\"oh\");\n    expandDigits(numberString.substring(1,2),wordRelation,tokenItem);\n  }\n else   if ((numberDigits == 4 && numberString.charAt(1) == '0') || numberDigits < 3) {\n    expandNumber(numberString,wordRelation,tokenItem);\n  }\n else   if (numberDigits % 2 == 1) {\n    String firstDigit=digit2num[numberString.charAt(0) - '0'];\n    wordRelation.addWord(tokenItem,firstDigit);\n    expandID(numberString.substring(1,numberDigits),wordRelation,tokenItem);\n  }\n else {\n    expandNumber(numberString.substring(0,2),wordRelation,tokenItem);\n    expandID(numberString.substring(2,numberDigits),wordRelation,tokenItem);\n  }\n}"}
{"ids": "81114", "raw_code": "private static void unregisterMbeansFromPropsFile(MBeanServer mBeanServer) throws Exception {\n  JamonPropertiesLoader loader=new JamonPropertiesLoader();\n  List<String> jamonJmxBeanProperties=loader.getMxBeans();\n  Iterator<String> iter=jamonJmxBeanProperties.iterator();\n  while (iter.hasNext()) {\n    String beanInfo=iter.next();\n    MonitorMXBean mXbean=MonitorMXBeanFactory.create(beanInfo);\n    mBeanServer.unregisterMBean(MonitorMXBeanFactory.getObjectName(mXbean));\n    MonitorMXBean mXbeanDelta=MonitorMXBeanFactory.createDelta(beanInfo);\n    mBeanServer.unregisterMBean(MonitorMXBeanFactory.getDeltaObjectName(mXbeanDelta));\n  }\n}"}
{"ids": "58028", "raw_code": "Source popImportSource(){\n  return (Source)m_importSourceStack.pop();\n}"}
{"ids": "7047", "raw_code": "public static Date zeroTimeDate(Date date){\n  final GregorianCalendar gregorianCalendar=new GregorianCalendar();\n  gregorianCalendar.setTime(date);\n  gregorianCalendar.set(Calendar.HOUR_OF_DAY,0);\n  gregorianCalendar.set(Calendar.MINUTE,0);\n  gregorianCalendar.set(Calendar.SECOND,0);\n  gregorianCalendar.set(Calendar.MILLISECOND,0);\n  return gregorianCalendar.getTime();\n}"}
{"ids": "35476", "raw_code": "public static final void writeMapXml(Map val,String name,XmlSerializer out) throws XmlPullParserException, IOException {\n  if (val == null) {\n    out.startTag(null,\"null\");\n    out.endTag(null,\"null\");\n    return;\n  }\n  Set s=val.entrySet();\n  Iterator i=s.iterator();\n  out.startTag(null,\"map\");\n  if (name != null) {\n    out.attribute(null,\"name\",name);\n  }\n  while (i.hasNext()) {\n    Map.Entry e=(Map.Entry)i.next();\n    writeValueXml(e.getValue(),(String)e.getKey(),out);\n  }\n  out.endTag(null,\"map\");\n}"}
{"ids": "75661", "raw_code": "protected void export(){\n  int retVal;\n  File file;\n  AbstractFileSaver saver;\n  if (m_FileChooser == null)   m_FileChooser=GUIHelper.newConverterFileChooser();\n  retVal=m_FileChooser.showSaveDialog(this);\n  if (retVal != ConverterFileChooser.APPROVE_OPTION)   return;\n  file=m_FileChooser.getSelectedFile();\n  saver=m_FileChooser.getSaver();\n  try {\n    saver.setInstances(m_DataPanel.getInstances());\n    saver.writeBatch();\n  }\n catch (  Exception e) {\n    JOptionPane.showMessageDialog(this,\"Failed to save dataset to '\" + file + \"':\\n\"+ Utils.throwableToString(e),\"Error saving\",JOptionPane.ERROR_MESSAGE);\n  }\n}"}
{"ids": "4861", "raw_code": "public void sort(int i){\n  Arrays.sort(vector[i],0,sizes.get(i));\n}"}
{"ids": "79356", "raw_code": "private void createMapWhenNeeded(){\n  if (isMapInitialized) {\n    return;\n  }\n  if (resourceBundle != null) {\n    Set<String> set=resourceBundle.keySet();\n    topLevelMap=new HashMap<String,Object>(set.size());\n    for (    String key : set) {\n      Object value=resourceBundle.getObject(key);\n      topLevelMap.put(key,value);\n    }\n  }\n else {\n    topLevelMap=new HashMap<String,Object>(1);\n  }\n  topLevelMap.put(\"_RESOURCE_BUNDLE_\",resourceBundle);\n  isMapInitialized=true;\n}"}
{"ids": "57081", "raw_code": "public static VectorClock increment(VectorClock clock,int... nodes){\n  for (  int n : nodes)   clock=clock.incremented((short)n,System.currentTimeMillis());\n  return clock;\n}"}
{"ids": "42356", "raw_code": "void createHeapPhiInstruction(BasicBlock bb,HeapVariable<Object> H){\n  Instruction s=makePhiInstruction(H,bb);\n  ArrayList<Instruction> heapPhis=heapPhi.get(bb);\n  if (heapPhis == null) {\n    heapPhis=new ArrayList<Instruction>(2);\n    heapPhi.put(bb,heapPhis);\n  }\n  heapPhis.add(s);\n  registerInstruction(s,bb);\n}"}
{"ids": "63576", "raw_code": "protected void printTime(String s){\n  SimpleDateFormat dateFormat=new SimpleDateFormat(\"HH:mm:ss\");\n  println(dateFormat.format(new java.util.Date()) + \" \" + s);\n}"}
{"ids": "82649", "raw_code": "public static int determineSampleSize(ImageRequest imageRequest,EncodedImage encodedImage){\n  if (!EncodedImage.isMetaDataAvailable(encodedImage)) {\n    return DEFAULT_SAMPLE_SIZE;\n  }\n  float ratio=determineDownsampleRatio(imageRequest,encodedImage);\n  int sampleSize;\n  if (encodedImage.getImageFormat() == ImageFormat.JPEG) {\n    sampleSize=ratioToSampleSizeJPEG(ratio);\n  }\n else {\n    sampleSize=ratioToSampleSize(ratio);\n  }\n  int maxDimension=Math.max(encodedImage.getHeight(),encodedImage.getWidth());\n  while (maxDimension / sampleSize > MAX_BITMAP_SIZE) {\n    if (encodedImage.getImageFormat() == ImageFormat.JPEG) {\n      sampleSize*=2;\n    }\n else {\n      sampleSize++;\n    }\n  }\n  return sampleSize;\n}"}
{"ids": "55689", "raw_code": "public Skeleton(PrintWriter out){\n  this.out=out;\n}"}
{"ids": "19697", "raw_code": "public void disconnect(){\n  if (conn != null) {\n    try {\n      conn.close();\n    }\n catch (    SQLException e) {\n      logger.warn(\"Unable to close connection\",e);\n    }\n  }\n  try {\n    closeBinlog();\n  }\n catch (  IOException e) {\n    logger.warn(\"Unable to close binlog\",e);\n  }\n}"}
{"ids": "3051", "raw_code": "@Override public int read(byte[] b,int off,int len) throws IOException {\n  int n=in.read(b,off,len);\n  if (n == -1) {\n    throwIfFalseEOF();\n  }\n else {\n    bytesRead+=n;\n  }\n  return n;\n}"}
{"ids": "5458", "raw_code": "@Override public Generator<ILineSegment> construct(String[] args){\n  return new IntegerGenerator(Integer.valueOf(args[0]),Integer.valueOf(args[1]));\n}"}
{"ids": "76712", "raw_code": "public SpatialStrategy(SpatialContext ctx,String fieldName){\n  if (ctx == null)   throw new IllegalArgumentException(\"ctx is required\");\n  this.ctx=ctx;\n  if (fieldName == null || fieldName.length() == 0)   throw new IllegalArgumentException(\"fieldName is required\");\n  this.fieldName=fieldName;\n}"}
{"ids": "65729", "raw_code": "public void dispose(){\n  if (keys != null) {\n    keys.clear();\n    keys=null;\n  }\n  super.dispose();\n}"}
{"ids": "35753", "raw_code": "public boolean isFixedDisk(String letter){\n  if (letter.length() != 1)   throw new IllegalArgumentException(\"Supply 1 letter, not: \" + letter);\n  char drive=Character.toUpperCase(letter.charAt(0));\n  if (drive < 'A' || drive > 'Z')   throw new IllegalArgumentException(\"A drive is indicated by a letter, so A-Z inclusive. Not \" + drive);\n  return getDriveType(drive + \":\\\\\") == 3L;\n}"}
{"ids": "12606", "raw_code": "private Object[] compile(String path){\n  List list=new ArrayList();\n  if (path == null) {\n    return list.toArray();\n  }\n  StringTokenizer tok=new StringTokenizer(path,\":.\");\n  while (tok.hasMoreTokens()) {\n    String token=tok.nextToken();\n    OpEnum op=OpEnum.getInstance(token);\n    if (op == null) {\n      throw new Error(\"Bad path compiled \" + path);\n    }\n    list.add(op);\n    if (op == OpEnum.RELATION) {\n      list.add(tok.nextToken());\n    }\n  }\n  return list.toArray();\n}"}
{"ids": "37442", "raw_code": "private void splitChunk(final MemoryChunk chunk,final long address){\n  final byte[] oldData=chunk.getBytes();\n  final byte[] newData1=new byte[(int)(address - chunk.getAddress())];\n  final byte[] newData2=new byte[(chunk.getLength() - newData1.length)];\n  System.arraycopy(oldData,0,newData1,0,newData1.length);\n  System.arraycopy(oldData,oldData.length - newData2.length,newData2,0,newData2.length);\n  final MemoryChunk newChunk1=new MemoryChunk(chunk.getAddress(),newData1);\n  final MemoryChunk newChunk2=new MemoryChunk((chunk.getAddress() + chunk.getLength()) - newData2.length,newData2);\n  removeChunk(chunk);\n  insertChunk(newChunk1);\n  insertChunk(newChunk2);\n}"}
{"ids": "74558", "raw_code": "public boolean isDirty(){\n  return dirty;\n}"}
{"ids": "82159", "raw_code": "private Vector showTextFixedWidth(String text,int align){\n  Vector comps=new Vector();\n  if ((text == null) || (text.equals(\"\"))) {\n    return comps;\n  }\n  int spaceW=width - x;\n  Vector words=getWords(text,align,false);\n  if (words.size() > 0) {\n    int w=0;\n    String wordStr=\"\";\n    if ((CSSParser.isWhiteSpace(text.charAt(0))) && (curLine.getComponentCount() != 0)) {\n      wordStr=\" \";\n    }\n    while (w < words.size()) {\n      String nextWord=(String)words.elementAt(w);\n      String space=\"\";\n      if ((!wordStr.equals(\"\")) && (!wordStr.equals(\" \"))) {\n        space=\" \";\n      }\n      if (font.stringWidth(wordStr + space + nextWord) > spaceW - 2) {\n        comps.addElement(addString(wordStr,align));\n        newLineIfNotEmpty(align);\n        spaceW=width - x;\n        wordStr=nextWord;\n      }\n else {\n        wordStr+=space + nextWord;\n      }\n      w++;\n    }\n    if (CSSParser.isWhiteSpace(text.charAt(text.length() - 1))) {\n      wordStr+=\" \";\n    }\n    comps.addElement(addString(wordStr,align));\n  }\n  return comps;\n}"}
{"ids": "5544", "raw_code": "private void calculateSlotUsage(){\n  numEntries=0;\n  for (int i=0; i < table.table.length; i++) {\n    LinkedList<V> list=(LinkedList<V>)table.table[i];\n    if (list != null) {\n      numEntries+=list.size();\n      intHashTable[i]+=list.size();\n    }\n  }\n}"}
{"ids": "65021", "raw_code": "public Insert defaultValues(){\n  defaultValues=true;\n  columns.clear();\n  valuesToInsert.clear();\n  query=null;\n  invalidateCompileCache();\n  return this;\n}"}
{"ids": "37479", "raw_code": "public CFilenameFormatter(final File directory){\n  Preconditions.checkArgument(directory.exists(),\"Error: Direcctory must exist.\");\n  m_directory=directory;\n}"}
{"ids": "54216", "raw_code": "public T pop(){\n  return list.removeLast();\n}"}
{"ids": "79285", "raw_code": "public Timestamp recalculateEstimatedCompletionDate(Long priority,Timestamp startDate){\n  if (exist()) {\n    getProductionRunRoutingTasks();\n    if (quantity == null)     getQuantity();\n    Timestamp endDate=null;\n    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {\n      GenericValue routingTask=iter.next();\n      if (priority.compareTo(routingTask.getLong(\"priority\")) <= 0) {\n        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);\n        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);\n        routingTask.set(\"estimatedStartDate\",startDate);\n        routingTask.set(\"estimatedCompletionDate\",endDate);\n        startDate=endDate;\n      }\n    }\n    return endDate;\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "29516", "raw_code": "public static String nodeListToString(List<? extends Node> list){\n  StringBuffer buf=new StringBuffer();\n  buf.append(\"{\");\n  if (list.size() > 0) {\n    buf.append(\"\\n  0 : [\" + domToString(list.get(0)) + \"]\");\n    for (int i=1; i < list.size(); ++i) {\n      buf.append(\"\\n  \" + i + \" : [\"+ domToString(list.get(0))+ \"]\");\n    }\n    buf.append(\"\\n\");\n  }\n  buf.append(\"}\");\n  return buf.toString();\n}"}
{"ids": "67626", "raw_code": "protected Element adapt(Element source,ElementMetadata<?,?> sourceMeta,String kind){\n  ElementKey<?,?> adaptorKey=sourceMeta.adapt(kind);\n  if (adaptorKey != null) {\n    try {\n      return adapt(adaptorKey,source);\n    }\n catch (    ContentCreationException e) {\n      LOGGER.log(Level.SEVERE,\"Unable to adapt \" + source.getClass() + \" to \"+ adaptorKey.getElementType(),e);\n    }\n  }\n  return source;\n}"}
{"ids": "70725", "raw_code": "public String convertAliasToNumber(String aliasName){\n  if (!aliasName.contains(\"'\") && AliasDatabase.containsAlias(aliasName)) {\n    String[] res=AliasDatabase.getAlias(aliasName);\n    return res[1];\n  }\n  return aliasName;\n}"}
{"ids": "78739", "raw_code": "public Attr(String name,@Nullable Format format){\n  this.name=name;\n  if (format != null) {\n    formats=Collections.singletonList(format);\n  }\n}"}
{"ids": "40345", "raw_code": "static StreamTokenizer makeTokenizer(String tagValue){\n  StreamTokenizer tokenizer=new StreamTokenizer(new StringReader(tagValue));\n  tokenizer.resetSyntax();\n  tokenizer.wordChars('A','Z');\n  tokenizer.wordChars('a','z');\n  tokenizer.wordChars('0','9');\n  tokenizer.wordChars('-','-');\n  tokenizer.wordChars('_','_');\n  tokenizer.wordChars('.','.');\n  tokenizer.wordChars('<','<');\n  tokenizer.wordChars('>','>');\n  tokenizer.quoteChar('\\'');\n  tokenizer.quoteChar('\"');\n  tokenizer.whitespaceChars(' ',' ');\n  tokenizer.whitespaceChars('\\t','\\t');\n  tokenizer.whitespaceChars('\\n','\\n');\n  tokenizer.whitespaceChars('\\r','\\r');\n  tokenizer.eolIsSignificant(false);\n  return tokenizer;\n}"}
{"ids": "73723", "raw_code": "private void sendRequest(){\n  int i=tabPane.getSelectedIndex();\n  String prompt=rb.getString(\"CS\" + i + \"PromptChar\");\n  if (log.isDebugEnabled()) {\n    log.debug(\"send \" + prompt + \" for pane \"+ i);\n  }\n  if (source == null) {\n    log.error(\"DataSource should not be null in sendRequest\");\n    timer.stop();\n    return;\n  }\n  source.sendBytes(prompt.getBytes());\n}"}
{"ids": "63702", "raw_code": "public void remove(Predicate filter){\n  for (IntIterator ii=rows(filter); ii.hasNext(); )   removeRow(ii.nextInt());\n}"}
{"ids": "5162", "raw_code": "private void calculateTrimArea(Rect bounds){\n  float size=Math.min(bounds.height(),bounds.width());\n  float yOffset=(bounds.height() - size) / 2f;\n  float xOffset=(bounds.width() - size) / 2f;\n  float padding=mPadding + (bounds.height() - 2f * mPadding) * 1f / 6f;\n  mInternalBounds.set(bounds.left + padding + xOffset,bounds.top + padding + yOffset,bounds.right - padding - xOffset,bounds.bottom - padding - yOffset);\n  mCenter=mInternalBounds.centerX();\n  mSize=mInternalBounds.width();\n  mPlayTipOffset=1f / 6f * mSize;\n  mPlayBaseOffset=0.07735f * mSize;\n  setTransitionState(0f,0f);\n}"}
{"ids": "43194", "raw_code": "protected void initInstances(Operation post,ServiceDocument... states){\n  initInstances(post,true,true,states);\n}"}
{"ids": "38233", "raw_code": "protected Instance mergeInstances(Instance source,Instance dest){\n  Instances outputFormat=outputFormatPeek();\n  double[] vals=new double[outputFormat.numAttributes()];\n  for (int i=0; i < vals.length; i++) {\n    if ((i != outputFormat.classIndex()) && (m_SelectedCols.isInRange(i))) {\n      if ((source != null) && !source.isMissing(i) && !dest.isMissing(i)) {\n        vals[i]=dest.value(i) - source.value(i);\n      }\n else {\n        vals[i]=Utils.missingValue();\n      }\n    }\n else {\n      vals[i]=dest.value(i);\n    }\n  }\n  Instance inst=null;\n  if (dest instanceof SparseInstance) {\n    inst=new SparseInstance(dest.weight(),vals);\n  }\n else {\n    inst=new DenseInstance(dest.weight(),vals);\n  }\n  inst.setDataset(dest.dataset());\n  return inst;\n}"}
{"ids": "66868", "raw_code": "public SourceCallChainBuilder(int timeout,boolean process_callbacks){\n  this.timeout=timeout;\n  this.process_callbacks=process_callbacks;\n}"}
{"ids": "56400", "raw_code": "public synchronized float recoveredBytesPercent(){\n  long total=0;\n  long recovered=0;\n  for (  File file : fileDetails.values()) {\n    if (file.reused() == false) {\n      total+=file.length();\n      recovered+=file.recovered();\n    }\n  }\n  if (total == 0 && fileDetails.size() == 0) {\n    return 0.0f;\n  }\n  if (total == recovered) {\n    return 100.0f;\n  }\n else {\n    return 100.0f * recovered / total;\n  }\n}"}
{"ids": "13522", "raw_code": "public <E extends T>EventBinder<E> on(){\n  return new EventBinder<>(Optional.empty());\n}"}
{"ids": "12528", "raw_code": "private boolean isValueSupported(Object value){\n  for (int i=0; i < values.length; i++) {\n    if (value.equals(values[i])) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "52295", "raw_code": "public static BitSet fromByteArray(byte[] bytes){\n  BitSet bits=new BitSet();\n  for (int i=0; i < bytes.length * 8; i++) {\n    if ((bytes[bytes.length - i / 8 - 1] & (1 << (i % 8))) > 0) {\n      bits.set(i);\n    }\n  }\n  return bits;\n}"}
{"ids": "86971", "raw_code": "public RepeatTime createRepeatTime(int repeatInterval,int activeDuration,int[] offsets){\n  RepeatField repeatTimeField=new RepeatField();\n  try {\n    repeatTimeField.setRepeatInterval(repeatInterval);\n    repeatTimeField.setActiveDuration(activeDuration);\n    repeatTimeField.setOffsetArray(offsets);\n  }\n catch (  SdpException s) {\n    s.printStackTrace();\n  }\n  return repeatTimeField;\n}"}
{"ids": "69642", "raw_code": "public void remove(int i){\n  if ((i >= array.length) || (i < 0))   throw new ArrayIndexOutOfBoundsException(\"invalid index:\" + i + \";the array length is \"+ array.length);\n  NSObject[] newArray=new NSObject[array.length - 1];\n  System.arraycopy(array,0,newArray,0,i);\n  System.arraycopy(array,i + 1,newArray,i,array.length - i - 1);\n  array=newArray;\n}"}
{"ids": "83467", "raw_code": "private Time parseTime(String timeString) throws ParseException {\n  java.util.Date parsedDate=TimeField.parse(timeString);\n  if (parsedDate == null)   return null;\n  return new Time(parsedDate.getTime());\n}"}
{"ids": "81646", "raw_code": "public synchronized void deleteObservers(){\n  observers.clear();\n}"}
{"ids": "77385", "raw_code": "private void decrementCopyFieldTargetCount(SchemaField dest){\n  Integer count=copyFieldTargetCounts.get(dest);\n  assert count != null;\n  if (count <= 1) {\n    copyFieldTargetCounts.remove(dest);\n  }\n else {\n    copyFieldTargetCounts.put(dest,count - 1);\n  }\n}"}
{"ids": "64538", "raw_code": "public synchronized int updatePurchase(String orderId,String productId,PurchaseState purchaseState,long purchaseTime,String developerPayload){\n  insertOrder(orderId,productId,purchaseState,purchaseTime,developerPayload);\n  Cursor cursor=mDb.query(PURCHASE_HISTORY_TABLE_NAME,HISTORY_COLUMNS,HISTORY_PRODUCT_ID_COL + \"=?\",new String[]{productId},null,null,null,null);\n  if (cursor == null) {\n    return 0;\n  }\n  int quantity=0;\n  try {\n    while (cursor.moveToNext()) {\n      int stateIndex=cursor.getInt(2);\n      PurchaseState state=PurchaseState.valueOf(stateIndex);\n      if (state == PurchaseState.PURCHASED || state == PurchaseState.REFUNDED) {\n        quantity+=1;\n      }\n    }\n    updatePurchasedItem(productId,quantity);\n  }\n  finally {\n    if (cursor != null) {\n      cursor.close();\n    }\n  }\n  return quantity;\n}"}
{"ids": "15223", "raw_code": "public static Calendar fromUnixTime(long unixTime,TimeUnit timeUnit){\n  Calendar calendar=getCalendarInstance();\n  calendar.setTimeZone(TimeZone.getDefault());\n  long millis=timeUnit.toMillis(unixTime);\n  calendar.setTimeInMillis(millis);\n  return calendar;\n}"}
{"ids": "5015", "raw_code": "private void open_board_design_action(){\n  DesignFile design_file=open_dialog(stat,main_options.design_dir_name);\n  if (design_file == null) {\n    stat.userPrintln(resources.getString(\"message_3\"));\n    return;\n  }\n  String message=resources.getString(\"loading_design\") + \" \" + design_file.get_name();\n  stat.userPrintln(message);\n  BoardFrame board_frame=new BoardFrame(design_file,stat);\n  ImportDesign d_import=new ImportDesign(board_frame);\n  d_import.execute();\n}"}
{"ids": "48452", "raw_code": "public static String retrieveDisplayName(String id,boolean daylight,int style,Locale locale){\n  String[] names=retrieveDisplayNamesImpl(id,locale);\n  if (Objects.nonNull(names)) {\n    return names[(daylight ? 4 : 2) - style];\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "76670", "raw_code": "protected Query newFuzzyQuery(Term term,float minimumSimilarity,int prefixLength){\n  String text=term.text();\n  int numEdits=FuzzyQuery.floatToEdits(minimumSimilarity,text.codePointCount(0,text.length()));\n  return new FuzzyQuery(term,numEdits,prefixLength);\n}"}
{"ids": "2022", "raw_code": "@Override public void playVideo(Uri uri,String title){\n  CameraActivity activity=mActivity.get();\n  if (activity != null) {\n    CameraUtil.playVideo(activity,uri,title);\n  }\n}"}
{"ids": "29028", "raw_code": "public void copyFrom(Path other){\n  grow(other.length - 1);\n  System.arraycopy(other.blockIdList,0,this.blockIdList,0,other.length);\n  this.length=other.length;\n  this.cachedHashCode=other.cachedHashCode;\n}"}
{"ids": "30436", "raw_code": "void recoverMessages() throws RollbackFailedException {\n  if (m_isQueue) {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.log(Level.FINE,\"GSSessionImpl.recoverMessages(): Recovering messages of Queue\");\n    }\n    unackedMessages.clear();\n    if (!isAutoAck()) {\n      rollbackLocalTransaction();\n    }\n  }\n else {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.log(Level.FINE,\"GSSessionImpl.recoverMessages(): Recovering messages of Topic\");\n    }\n    unackedMessages.addAll(recoverMessages);\n    LinkedList<MessageQueueElement> temp=unackedMessages;\n    recoverMessages.clear();\n    unackedMessages=recoverMessages;\n    recoverMessages=temp;\n  }\n}"}
{"ids": "16740", "raw_code": "private void maybeSampleSyncParams(){\n  long playbackPositionUs=audioTrackUtil.getPlaybackHeadPositionUs();\n  if (playbackPositionUs == 0) {\n    return;\n  }\n  long systemClockUs=System.nanoTime() / 1000;\n  if (systemClockUs - lastPlayheadSampleTimeUs >= MIN_PLAYHEAD_OFFSET_SAMPLE_INTERVAL_US) {\n    playheadOffsets[nextPlayheadOffsetIndex]=playbackPositionUs - systemClockUs;\n    nextPlayheadOffsetIndex=(nextPlayheadOffsetIndex + 1) % MAX_PLAYHEAD_OFFSET_COUNT;\n    if (playheadOffsetCount < MAX_PLAYHEAD_OFFSET_COUNT) {\n      playheadOffsetCount++;\n    }\n    lastPlayheadSampleTimeUs=systemClockUs;\n    smoothedPlayheadOffsetUs=0;\n    for (int i=0; i < playheadOffsetCount; i++) {\n      smoothedPlayheadOffsetUs+=playheadOffsets[i] / playheadOffsetCount;\n    }\n  }\n  if (!isPassthrough() && systemClockUs - lastTimestampSampleTimeUs >= MIN_TIMESTAMP_SAMPLE_INTERVAL_US) {\n    audioTimestampSet=audioTrackUtil.updateTimestamp();\n    if (audioTimestampSet) {\n      long audioTimestampUs=audioTrackUtil.getTimestampNanoTime() / 1000;\n      long audioTimestampFramePosition=audioTrackUtil.getTimestampFramePosition();\n      if (audioTimestampUs < resumeSystemTimeUs) {\n        audioTimestampSet=false;\n      }\n else       if (Math.abs(audioTimestampUs - systemClockUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {\n        String message=\"Spurious audio timestamp (system clock mismatch): \" + audioTimestampFramePosition + \", \"+ audioTimestampUs+ \", \"+ systemClockUs+ \", \"+ playbackPositionUs;\n        if (failOnSpuriousAudioTimestamp) {\n          throw new InvalidAudioTrackTimestampException(message);\n        }\n        Log.w(TAG,message);\n        audioTimestampSet=false;\n      }\n else       if (Math.abs(framesToDurationUs(audioTimestampFramePosition) - playbackPositionUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {\n        String message=\"Spurious audio timestamp (frame position mismatch): \" + audioTimestampFramePosition + \", \"+ audioTimestampUs+ \", \"+ systemClockUs+ \", \"+ playbackPositionUs;\n        if (failOnSpuriousAudioTimestamp) {\n          throw new InvalidAudioTrackTimestampException(message);\n        }\n        Log.w(TAG,message);\n        audioTimestampSet=false;\n      }\n    }\n    if (getLatencyMethod != null) {\n      try {\n        latencyUs=(Integer)getLatencyMethod.invoke(audioTrack,(Object[])null) * 1000L - framesToDurationUs(bytesToFrames(bufferSize));\n        latencyUs=Math.max(latencyUs,0);\n        if (latencyUs > MAX_LATENCY_US) {\n          Log.w(TAG,\"Ignoring impossibly large audio latency: \" + latencyUs);\n          latencyUs=0;\n        }\n      }\n catch (      Exception e) {\n        getLatencyMethod=null;\n      }\n    }\n    lastTimestampSampleTimeUs=systemClockUs;\n  }\n}"}
{"ids": "1225", "raw_code": "private Map<Key,Array> store(Class clazz){\n  Method[] methods=clazz.getMethods();\n  Map<Key,Array> methodsMap=new ConcurrentHashMap<Key,Array>();\n  for (int i=0; i < methods.length; i++) {\n    storeMethod(methods[i],methodsMap);\n  }\n  map.put(clazz,methodsMap);\n  return methodsMap;\n}"}
{"ids": "17701", "raw_code": "private void readCentralDir() throws IOException {\n  long scanOffset=raf.length() - ENDHDR;\n  if (scanOffset < 0) {\n    throw new ZipException(\"File too short to be a zip file: \" + raf.length());\n  }\n  raf.seek(0);\n  final int headerMagic=Integer.reverseBytes(raf.readInt());\n  if (headerMagic != LOCSIG) {\n    throw new ZipException(\"Not a zip archive\");\n  }\n  long stopOffset=scanOffset - 65536;\n  if (stopOffset < 0) {\n    stopOffset=0;\n  }\n  while (true) {\n    raf.seek(scanOffset);\n    if (Integer.reverseBytes(raf.readInt()) == ENDSIG) {\n      break;\n    }\n    scanOffset--;\n    if (scanOffset < stopOffset) {\n      throw new ZipException(\"End Of Central Directory signature not found\");\n    }\n  }\n  byte[] eocd=new byte[ENDHDR - 4];\n  raf.readFully(eocd);\n  BufferIterator it=HeapBufferIterator.iterator(eocd,0,eocd.length,ByteOrder.LITTLE_ENDIAN);\n  int diskNumber=it.readShort() & 0xffff;\n  int diskWithCentralDir=it.readShort() & 0xffff;\n  int numEntries=it.readShort() & 0xffff;\n  int totalNumEntries=it.readShort() & 0xffff;\n  it.skip(4);\n  long centralDirOffset=((long)it.readInt()) & 0xffffffffL;\n  int commentLength=it.readShort() & 0xffff;\n  if (numEntries != totalNumEntries || diskNumber != 0 || diskWithCentralDir != 0) {\n    throw new ZipException(\"Spanned archives not supported\");\n  }\n  if (commentLength > 0) {\n    byte[] commentBytes=new byte[commentLength];\n    raf.readFully(commentBytes);\n    comment=new String(commentBytes,0,commentBytes.length,StandardCharsets.UTF_8);\n  }\n  RAFStream rafStream=new RAFStream(raf,centralDirOffset);\n  BufferedInputStream bufferedStream=new BufferedInputStream(rafStream,4096);\n  byte[] hdrBuf=new byte[CENHDR];\n  for (int i=0; i < numEntries; ++i) {\n    ZipEntry newEntry=new ZipEntry(hdrBuf,bufferedStream);\n    if (newEntry.localHeaderRelOffset >= centralDirOffset) {\n      throw new ZipException(\"Local file header offset is after central directory\");\n    }\n    String entryName=newEntry.getName();\n    if (entries.put(entryName,newEntry) != null) {\n      throw new ZipException(\"Duplicate entry name: \" + entryName);\n    }\n  }\n}"}
{"ids": "996", "raw_code": "protected int readFully(InputStream in,byte buffer[],int offset,int len) throws IOException {\n  for (int i=0; i < len; i++) {\n    int q=in.read();\n    if (q == -1)     return ((i == 0) ? -1 : i);\n    buffer[i + offset]=(byte)q;\n  }\n  return len;\n}"}
{"ids": "30855", "raw_code": "private long renewServiceLeaseDo(ServiceID serviceID,Uuid leaseID,long renewDuration) throws UnknownLeaseException {\n  long now=System.currentTimeMillis();\n  long renewExpiration=renewServiceLeaseInt(serviceID,leaseID,renewDuration,now);\n  addLogRecord(new ServiceLeaseRenewedLogObj(serviceID,leaseID,renewExpiration));\n  return renewExpiration - now;\n}"}
{"ids": "23393", "raw_code": "public BlockSwapper(World world,EntityPlayer player,ItemStack truncator,BlockPos origCoords,int range,boolean leaves){\n  this.world=world;\n  this.player=player;\n  this.truncator=truncator;\n  this.origin=origCoords;\n  this.range=range;\n  this.treatLeavesSpecial=leaves;\n  this.candidateQueue=new PriorityQueue<>();\n  this.completedCoords=new HashSet<>();\n  candidateQueue.offer(new SwapCandidate(this.origin,this.range));\n}"}
{"ids": "50384", "raw_code": "public static String[] toStringArray(Enumeration<String> enumeration){\n  if (enumeration == null) {\n    return null;\n  }\n  List<String> list=Collections.list(enumeration);\n  return list.toArray(new String[list.size()]);\n}"}
{"ids": "1969", "raw_code": "public boolean overlapSave(SphereCluster other){\n  double minDist=Math.sqrt(2) * (getRadius() + other.getRadius());\n  double diff=getCenterDistance(other) - minDist;\n  return diff > 0;\n}"}
{"ids": "21905", "raw_code": "@PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(\"/{id}/assign-matched-pools\") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public FileVirtualPoolRestRep updateFileVirtualPoolWithAssignedPools(@PathParam(\"id\") URI id,VirtualPoolPoolUpdateParam param){\n  VirtualPool vPool=updateVirtualPoolWithAssignedStoragePools(id,param);\n  return toFileVirtualPool(vPool,VirtualPool.getFileRemoteProtectionSettings(vPool,_dbClient));\n}"}
{"ids": "79428", "raw_code": "public static java.sql.Date toSqlDate(int month,int day,int year){\n  java.util.Date newDate=toDate(month,day,year,0,0,0);\n  if (newDate != null) {\n    return new java.sql.Date(newDate.getTime());\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "39384", "raw_code": "public Object readDefaultListModel(Element node) throws Exception {\n  DefaultListModel model;\n  Vector<Element> children;\n  Element child;\n  int i;\n  int index;\n  int currIndex;\n  if (DEBUG) {\n    trace(new Throwable(),node.getAttribute(ATT_NAME));\n  }\n  m_CurrentNode=node;\n  children=XMLDocument.getChildTags(node);\n  model=new DefaultListModel();\n  index=children.size() - 1;\n  for (i=0; i < children.size(); i++) {\n    child=children.get(i);\n    currIndex=Integer.parseInt(child.getAttribute(ATT_NAME));\n    if (currIndex > index) {\n      index=currIndex;\n    }\n  }\n  model.setSize(index + 1);\n  for (i=0; i < children.size(); i++) {\n    child=children.get(i);\n    model.set(Integer.parseInt(child.getAttribute(ATT_NAME)),invokeReadFromXML(child));\n  }\n  return model;\n}"}
{"ids": "34052", "raw_code": "private boolean resultsIdentical(String namedCurve,BigInteger badX,BigInteger badY,BigInteger secret,int iter) throws InvalidAlgorithmParameterException, NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException {\n  for (int i=0; i < iter; i++) {\n    secret=secret.add(BigInteger.ONE);\n    BigInteger resultCustom=computeSecretWithCustomAlgorithm(namedCurve,badX,badY,secret);\n    BigInteger resultSun=computeSecretWithSunAlgorithm(namedCurve,badX,badY,secret);\n    if (resultSun != null && !resultSun.equals(resultCustom)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "69102", "raw_code": "public void enableLayers(boolean enable){\n  TextureState textureState=(TextureState)getLocalRenderState(RenderState.StateType.Texture);\n  textureState.setEnabled(enable);\n  markDirty(DirtyType.RenderState);\n}"}
{"ids": "76234", "raw_code": "protected void starveRandomly(int limit){\n  while (population.size() > limit) {\n    int removePos=Randomness.nextInt() % population.size();\n    population.remove(removePos);\n  }\n}"}
{"ids": "79815", "raw_code": "public void saveParam() throws Exception {\n  Enumeration<AbstractParamPanel> en=tablePanel.elements();\n  AbstractParamPanel panel=null;\n  while (en.hasMoreElements()) {\n    panel=en.nextElement();\n    panel.saveParam(paramObject);\n  }\n}"}
{"ids": "82610", "raw_code": "@SuppressWarnings(\"SleepWhileInLoop\") public static LocalStreamingContainer waitForActivation(StramLocalCluster localCluster,PTOperator operator) throws InterruptedException {\n  LocalStreamingContainer container;\n  long startMillis=System.currentTimeMillis();\n  while (System.currentTimeMillis() < (startMillis + DEFAULT_TIMEOUT_MILLIS)) {\n    if (operator.getState() == PTOperator.State.ACTIVE) {\n      if ((container=localCluster.getContainer(operator)) != null) {\n        return container;\n      }\n    }\n    LOG.debug(\"Waiting for {}({}) in container {}\",new Object[]{operator,operator.getState(),operator.getContainer()});\n    Thread.sleep(500);\n  }\n  Assert.fail(\"timeout waiting for operator deployment \" + operator);\n  return null;\n}"}
{"ids": "51457", "raw_code": "protected String toExternalForm(URL url){\n  return toExternalForm(url,false);\n}"}
{"ids": "83174", "raw_code": "public ResultSet executeQuery(String query) throws SQLException, NoConnectionException {\n  if (connection != null) {\n    Statement st=connection.createStatement();\n    return st.executeQuery(query);\n  }\n  throw new NoConnectionException();\n}"}
{"ids": "15338", "raw_code": "private void rejectAccessAndTerminateProcess(RadiusResponse response,ContextHolder holder){\n  response.setResponsePacket(new AccessReject());\n  response.setUniversalId(holder.getUniversalId());\n  terminateAuthnProcess(holder);\n}"}
{"ids": "22549", "raw_code": "public ScVolume createViewVolume(String name,String instanceId) throws StorageCenterAPIException {\n  LOG.debug(\"Creating view volume of replay {}\",instanceId);\n  String errorMessage=\"\";\n  Parameters params=new Parameters();\n  params.add(\"Name\",name);\n  params.add(\"Notes\",NOTES_STRING);\n  try {\n    RestResult result=restClient.post(String.format(\"StorageCenter/ScReplay/%s/CreateView\",instanceId),params.toJson());\n    if (checkResults(result)) {\n      return gson.fromJson(result.getResult(),ScVolume.class);\n    }\n  }\n catch (  Exception e) {\n    errorMessage=String.format(\"Error creating view volume: %s\",e);\n    LOG.warn(errorMessage);\n  }\n  if (errorMessage.length() == 0) {\n    errorMessage=String.format(\"Unable to create view volume %s from replay %s\",name,instanceId);\n  }\n  throw new StorageCenterAPIException(errorMessage);\n}"}
{"ids": "51348", "raw_code": "@Override public boolean contains(Object object){\n  return indexOf(object,0) != -1;\n}"}
{"ids": "22265", "raw_code": "public void sync() throws StorageFault {\n  final String methodName=\"sync(): \";\n  log.debug(methodName + \"Entry\");\n  try {\n    log.trace(methodName + \"calling syncmanger syncAll()\");\n    _syncManager.syncAll();\n  }\n catch (  SOSFailure e) {\n    log.error(methodName + \"StorageOSFailure occured\",e);\n    throw FaultUtil.StorageFault(e);\n  }\n  log.debug(methodName + \"Exit\");\n}"}
{"ids": "65803", "raw_code": "private void addMenuItem(JPopupMenu menu,String title,MWFNodeNext line){\n  WFPopupItem item=new WFPopupItem(title,line);\n  menu.add(item);\n  item.addActionListener(this);\n}"}
{"ids": "35598", "raw_code": "public static Matcher<BindingSet> binds(String name,Class<?> value){\n  return new BindsMatcher<Object>(name,instanceOf(value));\n}"}
{"ids": "21866", "raw_code": "public void cancelTaskNoException(Task task){\n  try {\n    cancelTask(task);\n  }\n catch (  Exception e) {\n    _log.error(\"Error when cancelling VMware task\");\n  }\n}"}
{"ids": "30894", "raw_code": "public int read(byte b[],int off,int len) throws IOException, LogException {\n  if (length < len)   badRead(len);\n  len=in.read(b,off,len);\n  length-=len;\n  return len;\n}"}
{"ids": "40086", "raw_code": "public static void migrateFrom6To7(SQLiteDatabase db){\n  String selectQuery=\"SELECT * FROM \" + DatabaseHelper.TABLE_GRIDITEMRELATIONS;\n  Cursor c=db.rawQuery(selectQuery,null);\n  if (c.moveToFirst()) {\n    do {\n      try {\n        int gridItemid=c.getInt(c.getColumnIndex(DatabaseHelper.KEY_ID));\n        int pluginId=c.getInt(c.getColumnIndex(DatabaseHelper.KEY_GRIDITEMRELATIONS_PLUGIN));\n        String pluginpageUrlQuery=\"SELECT \" + DatabaseHelper.KEY_MUNINPLUGINS_PLUGINPAGEURL + \" FROM \"+ DatabaseHelper.TABLE_MUNINPLUGINS+ \" WHERE \"+ DatabaseHelper.KEY_ID+ \" = \"+ pluginId;\n        Cursor c2=db.rawQuery(pluginpageUrlQuery,null);\n        if (c2.moveToFirst()) {\n          String pluginpageUrl=c2.getString(c2.getColumnIndex(DatabaseHelper.KEY_MUNINPLUGINS_PLUGINPAGEURL));\n          ContentValues values=new ContentValues();\n          values.put(DatabaseHelper.KEY_GRIDITEMRELATIONS_PLUGINPAGEURL,pluginpageUrl);\n          db.update(DatabaseHelper.TABLE_GRIDITEMRELATIONS,values,DatabaseHelper.KEY_ID + \" = ?\",new String[]{String.valueOf(gridItemid)});\n        }\n        c2.close();\n      }\n catch (      Exception ex) {\n        ex.printStackTrace();\n      }\n    }\n while (c.moveToNext());\n  }\n  c.close();\n}"}
{"ids": "72279", "raw_code": "public static InputStream cropImage(InputStream inputStream,int imageWidth,int imageHeight,int outWidth,int outHeight) throws IllegalArgumentException {\n  if (inputStream == null) {\n    throw new IllegalArgumentException(\"inputStream cannot be null\");\n  }\n  if (imageWidth <= 0 || imageHeight <= 0) {\n    throw new IllegalArgumentException(String.format(\"imageWidth and imageHeight must be > 0: imageWidth=%d\" + \" imageHeight=%d\",imageWidth,imageHeight));\n  }\n  if (outWidth <= 0 || outHeight <= 0) {\n    throw new IllegalArgumentException(String.format(\"outWidth and outHeight must be > 0: outWidth=%d\" + \" outHeight=%d\",imageWidth,outHeight));\n  }\n  int scaleDownSampleSize=Math.min(imageWidth / outWidth,imageHeight / outHeight);\n  if (scaleDownSampleSize > 0) {\n    imageWidth/=scaleDownSampleSize;\n    imageHeight/=scaleDownSampleSize;\n  }\n else {\n    float ratio=(float)outWidth / outHeight;\n    if (imageWidth < imageHeight * ratio) {\n      outWidth=imageWidth;\n      outHeight=(int)(outWidth / ratio);\n    }\n else {\n      outHeight=imageHeight;\n      outWidth=(int)(outHeight * ratio);\n    }\n  }\n  int left=(imageWidth - outWidth) / 2;\n  int top=(imageHeight - outHeight) / 2;\n  InputStream compressed=null;\n  try {\n    BitmapFactory.Options options=new BitmapFactory.Options();\n    if (scaleDownSampleSize > 1) {\n      options.inSampleSize=scaleDownSampleSize;\n    }\n    Bitmap bitmap=BitmapFactory.decodeStream(inputStream,null,options);\n    if (bitmap == null) {\n      return null;\n    }\n    Bitmap cropped=Bitmap.createBitmap(bitmap,left,top,outWidth,outHeight);\n    ByteArrayOutputStream tmpOut=new ByteArrayOutputStream(2048);\n    if (cropped.compress(Bitmap.CompressFormat.PNG,DEFAULT_IMG_QUALITY,tmpOut)) {\n      byte[] outByteArray=tmpOut.toByteArray();\n      compressed=new ByteArrayInputStream(outByteArray);\n    }\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Exception \" + e);\n  }\n  return compressed;\n}"}
{"ids": "7963", "raw_code": "@Override public void datasetChanged(DatasetChangeEvent event){\n  fireDatasetChanged();\n}"}
{"ids": "11101", "raw_code": "public void drawingComplete(OMGraphic omg,OMAction action){\n  if (timerButton.isSelected()) {\n    timer.restart();\n  }\n  if (omg instanceof OMPoint) {\n    OMPoint p=(OMPoint)omg;\n    GLPoint mp=new GLPoint(p.getLat(),p.getLon(),p.getRadius(),true);\n    mp.setName(\"Added Node \" + (pointCount++));\n    mp.setStationary(true);\n    mp.showPalette();\n    points.put(mp.getName(),mp);\n    manageGraphics();\n  }\n else   if (omg instanceof OMPoly) {\n    OMPoly poly=(OMPoly)omg;\n    PathGLPoint pmp=new PathGLPoint(poly,5,true);\n    pmp.setName(\"Added Node \" + (pointCount++));\n    pmp.showPalette();\n    points.put(pmp.getName(),pmp);\n    manageGraphics();\n  }\n  addNodeButton.setEnabled(true);\n  addPathButton.setEnabled(true);\n}"}
{"ids": "30012", "raw_code": "public static String hashKeyForDisk(String key){\n  String cacheKey;\n  try {\n    final MessageDigest mDigest=MessageDigest.getInstance(\"MD5\");\n    mDigest.update(key.getBytes());\n    cacheKey=bytesToHexString(mDigest.digest());\n  }\n catch (  NoSuchAlgorithmException e) {\n    cacheKey=String.valueOf(key.hashCode());\n  }\n  return cacheKey;\n}"}
{"ids": "81765", "raw_code": "static int firstIllegalCharacter(String source){\n  for (int i=0; i < source.length(); i++) {\n    if (isLegal(source.charAt(i)) == false) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"ids": "29181", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return COOKIE;\ncase 2:\n  return USER_ID;\ndefault :\nreturn null;\n}\n}"}
{"ids": "31463", "raw_code": "public Charset charset(){\n  return charset != null ? Charset.forName(charset) : null;\n}"}
{"ids": "22532", "raw_code": "public DriverTask deleteVolumeMirror(VolumeMirror mirror){\n  LOG.info(\"Deleting volume mirror {}\",mirror);\n  DellSCDriverTask task=new DellSCDriverTask(\"deleteVolumeMirror\");\n  try {\n    StorageCenterAPI api=connectionManager.getConnection(mirror.getStorageSystemId());\n    ScCopyMirrorMigrate cmm=api.getMirror(mirror.getNativeId());\n    api.deleteMirror(cmm.instanceId);\n    api.deleteVolume(cmm.destinationVolume.instanceId);\n    task.setStatus(TaskStatus.READY);\n  }\n catch (  StorageCenterAPIException|DellSCDriverException dex) {\n    String error=String.format(\"Error deleting volume mirror %s: %s\",mirror.getNativeId(),dex);\n    LOG.error(error);\n    task.setFailed(error);\n  }\n  return task;\n}"}
{"ids": "85334", "raw_code": "public ByteArrayDataProvider(byte[] bytes){\n  this.bytes=Arrays.copyOf(bytes,bytes.length);\n}"}
{"ids": "21700", "raw_code": "public static String generateNativeGuidForPhysicalNAS(String systemNativeGuid,String pNasName){\n  return String.format(\"%s\" + PHYSICAL_NAS + \"+%s\",systemNativeGuid,pNasName);\n}"}
{"ids": "66255", "raw_code": "private void expire(){\n  if (m_expire != 0 && m_timeExp < System.currentTimeMillis()) {\n    reset();\n  }\n}"}
{"ids": "76023", "raw_code": "private static int determineConsecutiveBinaryCount(String msg,int startpos,Charset encoding) throws WriterException {\n  final CharsetEncoder encoder=encoding.newEncoder();\n  int len=msg.length();\n  int idx=startpos;\n  while (idx < len) {\n    char ch=msg.charAt(idx);\n    int numericCount=0;\n    while (numericCount < 13 && isDigit(ch)) {\n      numericCount++;\n      int i=idx + numericCount;\n      if (i >= len) {\n        break;\n      }\n      ch=msg.charAt(i);\n    }\n    if (numericCount >= 13) {\n      return idx - startpos;\n    }\n    ch=msg.charAt(idx);\n    if (!encoder.canEncode(ch)) {\n      throw new WriterException(\"Non-encodable character detected: \" + ch + \" (Unicode: \"+ (int)ch+ ')');\n    }\n    idx++;\n  }\n  return idx - startpos;\n}"}
{"ids": "32266", "raw_code": "private boolean apply(GridClientPredicate<N>[] p,N n){\n  if (p != null) {\n    for (    GridClientPredicate<? super N> r : p) {\n      if (r != null && !r.apply(n))       return false;\n    }\n  }\n  return true;\n}"}
{"ids": "71851", "raw_code": "public boolean hasName(final String name){\n  for (  final String n : names) {\n    if (n.equalsIgnoreCase(name)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "47892", "raw_code": "static MethodHandle makeSpreadArguments(MethodHandle target,Class<?> spreadArgType,int spreadArgPos,int spreadArgCount){\n  MethodType targetType=target.type();\n  for (int i=0; i < spreadArgCount; i++) {\n    Class<?> arg=VerifyType.spreadArgElementType(spreadArgType,i);\n    if (arg == null)     arg=Object.class;\n    targetType=targetType.changeParameterType(spreadArgPos + i,arg);\n  }\n  target=target.asType(targetType);\n  MethodType srcType=targetType.replaceParameterTypes(spreadArgPos,spreadArgPos + spreadArgCount,spreadArgType);\n  MethodType lambdaType=srcType.invokerType();\n  Name[] names=arguments(spreadArgCount + 2,lambdaType);\n  int nameCursor=lambdaType.parameterCount();\n  int[] indexes=new int[targetType.parameterCount()];\n  for (int i=0, argIndex=1; i < targetType.parameterCount() + 1; i++, argIndex++) {\n    Class<?> src=lambdaType.parameterType(i);\n    if (i == spreadArgPos) {\n      MethodHandle aload=MethodHandles.arrayElementGetter(spreadArgType);\n      Name array=names[argIndex];\n      names[nameCursor++]=new Name(Lazy.NF_checkSpreadArgument,array,spreadArgCount);\n      for (int j=0; j < spreadArgCount; i++, j++) {\n        indexes[i]=nameCursor;\n        names[nameCursor++]=new Name(aload,array,j);\n      }\n    }\n else     if (i < indexes.length) {\n      indexes[i]=argIndex;\n    }\n  }\n  assert (nameCursor == names.length - 1);\n  Name[] targetArgs=new Name[targetType.parameterCount()];\n  for (int i=0; i < targetType.parameterCount(); i++) {\n    int idx=indexes[i];\n    targetArgs[i]=names[idx];\n  }\n  names[names.length - 1]=new Name(target,(Object[])targetArgs);\n  LambdaForm form=new LambdaForm(\"spread\",lambdaType.parameterCount(),names);\n  return SimpleMethodHandle.make(srcType,form);\n}"}
{"ids": "46934", "raw_code": "public void dup2X2(){\n  mv.visitInsn(Opcodes.DUP2_X2);\n}"}
{"ids": "3812", "raw_code": "@Override public boolean contains(Object key){\n  if (key == null)   return _map._nullValue != null;\n  K1[] keys=_map._keys;\n  for (int i=keys.length - 1; i >= 0; i--) {\n    K1 testKey=keys[i];\n    if (key.equals(testKey))     return true;\n  }\n  return false;\n}"}
{"ids": "61312", "raw_code": "public Expression compile(int opPos) throws TransformerException {\n  int op=getOp(opPos);\n  Expression expr=null;\nswitch (op) {\ncase OpCodes.OP_XPATH:\n    expr=compile(opPos + 2);\n  break;\ncase OpCodes.OP_OR:\nexpr=or(opPos);\nbreak;\ncase OpCodes.OP_AND:\nexpr=and(opPos);\nbreak;\ncase OpCodes.OP_NOTEQUALS:\nexpr=notequals(opPos);\nbreak;\ncase OpCodes.OP_EQUALS:\nexpr=equals(opPos);\nbreak;\ncase OpCodes.OP_LTE:\nexpr=lte(opPos);\nbreak;\ncase OpCodes.OP_LT:\nexpr=lt(opPos);\nbreak;\ncase OpCodes.OP_GTE:\nexpr=gte(opPos);\nbreak;\ncase OpCodes.OP_GT:\nexpr=gt(opPos);\nbreak;\ncase OpCodes.OP_PLUS:\nexpr=plus(opPos);\nbreak;\ncase OpCodes.OP_MINUS:\nexpr=minus(opPos);\nbreak;\ncase OpCodes.OP_MULT:\nexpr=mult(opPos);\nbreak;\ncase OpCodes.OP_DIV:\nexpr=div(opPos);\nbreak;\ncase OpCodes.OP_MOD:\nexpr=mod(opPos);\nbreak;\ncase OpCodes.OP_NEG:\nexpr=neg(opPos);\nbreak;\ncase OpCodes.OP_STRING:\nexpr=string(opPos);\nbreak;\ncase OpCodes.OP_BOOL:\nexpr=bool(opPos);\nbreak;\ncase OpCodes.OP_NUMBER:\nexpr=number(opPos);\nbreak;\ncase OpCodes.OP_UNION:\nexpr=union(opPos);\nbreak;\ncase OpCodes.OP_LITERAL:\nexpr=literal(opPos);\nbreak;\ncase OpCodes.OP_VARIABLE:\nexpr=variable(opPos);\nbreak;\ncase OpCodes.OP_GROUP:\nexpr=group(opPos);\nbreak;\ncase OpCodes.OP_NUMBERLIT:\nexpr=numberlit(opPos);\nbreak;\ncase OpCodes.OP_ARGUMENT:\nexpr=arg(opPos);\nbreak;\ncase OpCodes.OP_EXTFUNCTION:\nexpr=compileExtension(opPos);\nbreak;\ncase OpCodes.OP_FUNCTION:\nexpr=compileFunction(opPos);\nbreak;\ncase OpCodes.OP_LOCATIONPATH:\nexpr=locationPath(opPos);\nbreak;\ncase OpCodes.OP_PREDICATE:\nexpr=null;\nbreak;\ncase OpCodes.OP_MATCHPATTERN:\nexpr=matchPattern(opPos + 2);\nbreak;\ncase OpCodes.OP_LOCATIONPATHPATTERN:\nexpr=locationPathPattern(opPos);\nbreak;\ncase OpCodes.OP_QUO:\nerror(XPATHErrorResources.ER_UNKNOWN_OPCODE,new Object[]{\"quo\"});\nbreak;\ndefault :\nerror(XPATHErrorResources.ER_UNKNOWN_OPCODE,new Object[]{Integer.toString(getOp(opPos))});\n}\nreturn expr;\n}"}
{"ids": "36216", "raw_code": "public static void replaceValue(ExampleSet exampleSet,Attribute attribute,String oldValue,String newValue){\n  if (!attribute.isNominal()) {\n    throw new RuntimeException(\"Example-Tools: replaceValue is only supported for nominal attributes.\");\n  }\n  NominalMapping mapping=attribute.getMapping();\n  if (oldValue.equals(\"?\")) {\n    for (    Example example : exampleSet) {\n      if (Double.isNaN(example.getValue(attribute))) {\n        example.setValue(attribute,mapping.mapString(newValue));\n      }\n    }\n  }\n else {\n    int oldIndex=mapping.getIndex(oldValue);\n    if (oldIndex < 0) {\n      throw new RuntimeException(\"Example-Tools: replaceValue cannot be performed since old value was not defined in the attribute.\");\n    }\n    if (newValue.equals(\"?\")) {\n      for (      Example example : exampleSet) {\n        int index=mapping.getIndex(example.getValueAsString(attribute));\n        if (index == oldIndex) {\n          example.setValue(attribute,Double.NaN);\n        }\n      }\n      return;\n    }\n    int newIndex=mapping.getIndex(newValue);\n    if (newIndex >= 0) {\n      for (      Example example : exampleSet) {\n        int index=mapping.getIndex(example.getValueAsString(attribute));\n        if (index == oldIndex) {\n          example.setValue(attribute,newIndex);\n        }\n      }\n    }\n else {\n      mapping.setMapping(newValue,oldIndex);\n    }\n  }\n}"}
{"ids": "77011", "raw_code": "protected void encode(ByteSequencesWriter writer,ByteArrayDataOutput output,byte[] buffer,BytesRef spare,BytesRef payload,Set<BytesRef> contexts,long weight) throws IOException {\n  int requiredLength=spare.length + 8 + ((hasPayloads) ? 2 + payload.length : 0);\n  if (hasContexts) {\n    for (    BytesRef ctx : contexts) {\n      requiredLength+=2 + ctx.length;\n    }\n    requiredLength+=2;\n  }\n  if (requiredLength >= buffer.length) {\n    buffer=ArrayUtil.grow(buffer,requiredLength);\n  }\n  output.reset(buffer);\n  output.writeBytes(spare.bytes,spare.offset,spare.length);\n  if (hasContexts) {\n    for (    BytesRef ctx : contexts) {\n      output.writeBytes(ctx.bytes,ctx.offset,ctx.length);\n      output.writeShort((short)ctx.length);\n    }\n    output.writeShort((short)contexts.size());\n  }\n  if (hasPayloads) {\n    output.writeBytes(payload.bytes,payload.offset,payload.length);\n    output.writeShort((short)payload.length);\n  }\n  output.writeLong(weight);\n  writer.write(buffer,0,output.getPosition());\n}"}
{"ids": "74202", "raw_code": "public void printEntryDetails(Writer w){\n  int linesadded=-1;\n  String title;\n  try {\n    HardcopyWriter ww=(HardcopyWriter)w;\n    int textSpace=ww.getCharactersPerLine() - indentWidth - 1;\n    title=\"   ID:                \";\n    if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {\n      linesadded=writeWrappedComment(w,_id,title,textSpaceWithIcon) + linesadded;\n    }\n else {\n      linesadded=writeWrappedComment(w,_id,title,textSpace) + linesadded;\n    }\n    title=\"   Filename:          \";\n    if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {\n      linesadded=writeWrappedComment(w,_fileName != null ? _fileName : \"<null>\",title,textSpaceWithIcon) + linesadded;\n    }\n else {\n      linesadded=writeWrappedComment(w,_fileName != null ? _fileName : \"<null>\",title,textSpace) + linesadded;\n    }\n    if (!(_roadName.isEmpty())) {\n      title=\"   Road name:         \";\n      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {\n        linesadded=writeWrappedComment(w,_roadName,title,textSpaceWithIcon) + linesadded;\n      }\n else {\n        linesadded=writeWrappedComment(w,_roadName,title,textSpace) + linesadded;\n      }\n    }\n    if (!(_roadNumber.isEmpty())) {\n      title=\"   Road number:       \";\n      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {\n        linesadded=writeWrappedComment(w,_roadNumber,title,textSpaceWithIcon) + linesadded;\n      }\n else {\n        linesadded=writeWrappedComment(w,_roadNumber,title,textSpace) + linesadded;\n      }\n    }\n    if (!(_mfg.isEmpty())) {\n      title=\"   Manufacturer:      \";\n      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {\n        linesadded=writeWrappedComment(w,_mfg,title,textSpaceWithIcon) + linesadded;\n      }\n else {\n        linesadded=writeWrappedComment(w,_mfg,title,textSpace) + linesadded;\n      }\n    }\n    if (!(_owner.isEmpty())) {\n      title=\"   Owner:             \";\n      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {\n        linesadded=writeWrappedComment(w,_owner,title,textSpaceWithIcon) + linesadded;\n      }\n else {\n        linesadded=writeWrappedComment(w,_owner,title,textSpace) + linesadded;\n      }\n    }\n    if (!(_model.isEmpty())) {\n      title=\"   Model:             \";\n      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {\n        linesadded=writeWrappedComment(w,_model,title,textSpaceWithIcon) + linesadded;\n      }\n else {\n        linesadded=writeWrappedComment(w,_model,title,textSpace) + linesadded;\n      }\n    }\n    if (!(_dccAddress.isEmpty())) {\n      w.write(newLine,0,1);\n      String s=\"   DCC Address:       \" + _dccAddress;\n      w.write(s,0,s.length());\n      linesadded++;\n    }\n    if (!(_comment.isEmpty())) {\n      for (int i=0; i < (blanks - linesadded); i++) {\n        w.write(newLine,0,1);\n      }\n      if (blanks != 0) {\n        blanks=0;\n      }\n      title=\"   Comment:           \";\n      linesadded=writeWrappedComment(w,_comment,title,textSpace) + linesadded;\n    }\n    if (!(_decoderModel.isEmpty())) {\n      title=\"   Decoder Model:     \";\n      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {\n        linesadded=writeWrappedComment(w,_decoderModel,title,textSpaceWithIcon) + linesadded;\n      }\n else {\n        linesadded=writeWrappedComment(w,_decoderModel,title,textSpace) + linesadded;\n      }\n    }\n    if (!(_decoderFamily.isEmpty())) {\n      title=\"   Decoder Family:    \";\n      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {\n        linesadded=writeWrappedComment(w,_decoderFamily,title,textSpaceWithIcon) + linesadded;\n      }\n else {\n        linesadded=writeWrappedComment(w,_decoderFamily,title,textSpace) + linesadded;\n      }\n    }\n    if (!(_decoderComment.isEmpty())) {\n      for (int i=0; i < (blanks - linesadded); i++) {\n        w.write(newLine,0,1);\n      }\n      if (blanks != 0) {\n        blanks=0;\n      }\n      title=\"   Decoder Comment:   \";\n      linesadded=writeWrappedComment(w,_decoderComment,title,textSpace) + linesadded;\n    }\n    w.write(newLine,0,1);\n    for (int i=-1; i < (blanks - linesadded); i++) {\n      w.write(newLine,0,1);\n    }\n  }\n catch (  IOException e) {\n    log.error(\"Error printing RosterEntry: \" + e);\n  }\n}"}
{"ids": "49631", "raw_code": "private int skipQuotedString(String str,int pos){\n  int n=str.length();\n  pos+=1;\n  while (pos < n) {\n    if (str.charAt(pos) == '\\'') {\n      if (pos + 1 < n && str.charAt(pos + 1) == '\\'') {\n        pos+=2;\n        continue;\n      }\n      return pos + 1;\n    }\n    pos+=1;\n  }\n  return n;\n}"}
{"ids": "40748", "raw_code": "private static void addNewSegment(LinkedList<DNASegment> segments,Event event,HashMap<Integer,DNAStrand> strands,int firstJulianDay,int minStart,int minMinutes){\n  if (event.startDay > event.endDay) {\n    Log.wtf(TAG,\"Event starts after it ends: \" + event.toString());\n  }\n  if (event.startDay != event.endDay) {\n    Event lhs=new Event();\n    lhs.color=event.color;\n    lhs.startDay=event.startDay;\n    lhs.startTime=event.startTime;\n    lhs.endDay=lhs.startDay;\n    lhs.endTime=DAY_IN_MINUTES - 1;\n    while (lhs.startDay != event.endDay) {\n      addNewSegment(segments,lhs,strands,firstJulianDay,minStart,minMinutes);\n      lhs.startDay++;\n      lhs.endDay=lhs.startDay;\n      lhs.startTime=0;\n      minStart=0;\n    }\n    lhs.endTime=event.endTime;\n    event=lhs;\n  }\n  DNASegment segment=new DNASegment();\n  int dayOffset=(event.startDay - firstJulianDay) * DAY_IN_MINUTES;\n  int endOfDay=dayOffset + DAY_IN_MINUTES - 1;\n  segment.startMinute=Math.max(dayOffset + event.startTime,minStart);\n  int minEnd=Math.min(segment.startMinute + minMinutes,endOfDay);\n  segment.endMinute=Math.max(dayOffset + event.endTime,minEnd);\n  if (segment.endMinute > endOfDay) {\n    segment.endMinute=endOfDay;\n  }\n  segment.color=event.color;\n  segment.day=event.startDay;\n  segments.add(segment);\n  DNAStrand strand=getOrCreateStrand(strands,segment.color);\n  strand.count++;\n}"}
{"ids": "30940", "raw_code": "private DatagramPacket[] encodeMulticastRequest(final MulticastRequest req) throws IOException {\n  final Discovery disco=getDiscovery(multicastRequestConstraints.chooseProtocolVersion());\n  final List packets=new ArrayList();\n  EncodeIterator ei=disco.encodeMulticastRequest(req,multicastRequestConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastRequestConstraints.getUnfulfilledConstraints());\n  while (ei.hasNext()) {\n    try {\n      packets.addAll(Arrays.asList(ei.next()));\n    }\n catch (    Exception e) {\n      logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,\"exception encoding multicast request\",e);\n    }\n  }\n  if (packets.isEmpty()) {\n    throw new DiscoveryProtocolException(\"no encoded requests\");\n  }\n  return (DatagramPacket[])packets.toArray(new DatagramPacket[packets.size()]);\n}"}
{"ids": "20223", "raw_code": "public FeatureTypeConstraintModel(FeatureTypeConstraintModelUpdateInterface parent){\n  this.parentObj=parent;\n  columnList.add(Localisation.getString(FieldConfigBase.class,\"FeatureTypeConstraintModel.name\"));\n  columnList.add(Localisation.getString(FieldConfigBase.class,\"FeatureTypeConstraintModel.filter\"));\n}"}
{"ids": "63577", "raw_code": "protected void deleteDb(String name){\n  deleteDb(getBaseDir(),name);\n}"}
{"ids": "20414", "raw_code": "public void removeAtRange(int index,int size){\n  final int end=Math.min(mSize,index + size);\n  for (int i=index; i < end; i++) {\n    removeAt(i);\n  }\n}"}
{"ids": "53694", "raw_code": "private void pullEvent(){\n  final int newScrollValue;\n  final int itemDimension;\n  final float initialMotionValue, lastMotionValue;\nswitch (getFilteredPullToRefreshScrollDirection()) {\ncase HORIZONTAL:\n    initialMotionValue=mInitialMotionX;\n  lastMotionValue=mLastMotionX;\nbreak;\ncase VERTICAL:\ndefault :\ninitialMotionValue=mInitialMotionY;\nlastMotionValue=mLastMotionY;\nbreak;\n}\nswitch (mCurrentMode) {\ncase PULL_FROM_END:\nnewScrollValue=Math.round(Math.max(initialMotionValue - lastMotionValue,0) / mFriction);\nitemDimension=getFooterSize();\nbreak;\ncase GOOGLE_STYLE:\nnewScrollValue=Math.round(Math.min(initialMotionValue - lastMotionValue,0) / mFriction);\nitemDimension=getGoogleStyleViewSize();\nbreak;\ncase PULL_FROM_START:\ndefault :\nnewScrollValue=Math.round(Math.min(initialMotionValue - lastMotionValue,0) / mFriction);\nitemDimension=getHeaderSize();\nbreak;\n}\nsetHeaderScroll(newScrollValue);\nif (newScrollValue != 0 && !isRefreshing()) {\nfloat scale=Math.abs(newScrollValue) / (float)itemDimension;\nswitch (mCurrentMode) {\ncase PULL_FROM_END:\nmFooterLayout.onPull(scale);\nbreak;\ncase GOOGLE_STYLE:\nmGoogleStyleViewLayout.onPull(scale);\nmGoogleStyleProgressLayout.onPull(scale);\nbreak;\ncase PULL_FROM_START:\ndefault :\nmHeaderLayout.onPull(scale);\nbreak;\n}\nif (mState != State.PULL_TO_REFRESH && itemDimension >= Math.abs(newScrollValue)) {\nsetState(State.PULL_TO_REFRESH);\n}\n else if (mState == State.PULL_TO_REFRESH && itemDimension < Math.abs(newScrollValue)) {\nsetState(State.RELEASE_TO_REFRESH);\n}\n}\n}"}
{"ids": "72369", "raw_code": "public void addElements(final double[] values){\n  final double[] tempArray=new double[numElements + values.length + 1];\n  System.arraycopy(internalArray,startIndex,tempArray,0,numElements);\n  System.arraycopy(values,0,tempArray,numElements,values.length);\n  internalArray=tempArray;\n  startIndex=0;\n  numElements+=values.length;\n}"}
{"ids": "57908", "raw_code": "public void registerUnregisteredNamespaces(){\n  for (int i=0; i < m_unregisteredExtensions.size(); i++) {\n    String ns=(String)m_unregisteredExtensions.get(i);\n    ExtensionNamespaceSupport extNsSpt=defineJavaNamespace(ns);\n    if (extNsSpt != null)     m_extensions.add(extNsSpt);\n  }\n}"}
{"ids": "38271", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tThe number of attributes to randomly select.\\n\" + \"\\tIf < 1 then percentage, >= 1 absolute number.\\n\" + \"\\t(default: 0.5)\",\"N\",1,\"-N <double>\"));\n  result.addElement(new Option(\"\\tInvert selection - i.e. randomly remove rather than select.\",\"V\",0,\"-V\"));\n  result.addElement(new Option(\"\\tThe seed value.\\n\" + \"\\t(default: 1)\",\"S\",1,\"-S <int>\"));\n  result.addAll(Collections.list(super.listOptions()));\n  return result.elements();\n}"}
{"ids": "21258", "raw_code": "public Map<URI,List<URI>> addSourceVolumeSnapshots(){\n  List<URI> blockSnapshots=Lists.newArrayList();\n  Map<URI,List<URI>> snapshotsMap=new HashMap<>();\n  for (  URI volumeId : uris(volumeIds)) {\n    List<URI> snapshots=getSnapshots(volumeId);\n    blockSnapshots.addAll(snapshots);\n    snapshotsMap.put(volumeId,snapshots);\n  }\n  if (!blockSnapshots.isEmpty()) {\n    BlockStorageUtils.addVolumesToConsistencyGroup(consistencyGroup,blockSnapshots);\n  }\n  return snapshotsMap;\n}"}
{"ids": "21786", "raw_code": "public static void logInitiator(Initiator initiator,NetworkLite network){\n  String networkName=(network != null ? network.getLabel() : \"<unknown network>\");\n  _log.info(String.format(\"Attempting to assign port(s) to initiator: %s (%s) in network: %s\",initiator.getInitiatorPort(),initiator.getHostName(),networkName));\n}"}
{"ids": "44416", "raw_code": "public static final Criterion and(Criterion one,Criterion two){\n  final List<Criterion> criteria=new ArrayList<Criterion>();\n  criteria.add(one);\n  criteria.add(two);\n  return new ConjunctionCriterion(Conjunction.AND,criteria);\n}"}
{"ids": "6943", "raw_code": "public CCMenuItem(Object rec,String cb){\n  targetCallback=rec;\n  selector=cb;\n  setAnchorPoint(CGPoint.make(0.5f,0.5f));\n  invocation=null;\n  if (rec != null && cb != null) {\n    Class<?> cls=rec.getClass();\n    try {\n      invocation=cls.getMethod(cb,Object.class);\n    }\n catch (    SecurityException e) {\n      e.printStackTrace();\n    }\ncatch (    NoSuchMethodException e) {\n      e.printStackTrace();\n    }\n  }\n  isEnabled_=true;\n  isSelected_=false;\n}"}
{"ids": "15421", "raw_code": "public void addChildElement(XMLElement child,boolean addAfterNewLine) throws Exception {\n  addChildElementAt(child,-1,addAfterNewLine);\n}"}
{"ids": "63743", "raw_code": "public void editText(VisualItem item,String attribute,Rectangle r){\n  if (m_editing) {\n    stopEditing();\n  }\n  String txt=item.getString(attribute);\n  m_editItem=item;\n  m_editAttribute=attribute;\n  Color tc=ColorLib.getColor(item.getTextColor());\n  Color fc=ColorLib.getColor(item.getFillColor());\n  m_editor.setForeground(tc);\n  m_editor.setBackground(fc);\n  editText(txt,r);\n}"}
{"ids": "72128", "raw_code": "public static Column column(final String id,final String title,final int width,final int doublePrecision){\n  return new Column(id,title,Math.max(width,title.length()),doublePrecision);\n}"}
{"ids": "84410", "raw_code": "public void printCount(String kind,int count){\n  if (count != 0) {\n    String key;\n    if (count == 1)     key=\"count.\" + kind;\n else     key=\"count.\" + kind + \".plural\";\n    log.printLines(WriterKind.ERROR,key,String.valueOf(count));\n    log.flush(Log.WriterKind.ERROR);\n  }\n}"}
{"ids": "52285", "raw_code": "public static byte[] decode(String str,int flags){\n  return decode(str.getBytes(),flags);\n}"}
{"ids": "34657", "raw_code": "public static float screenToScroll(float x,float warpSize){\n  if (x <= 0)   return 0;\n  if (x >= warpSize)   return x + warpSize;\n  return (float)Math.sqrt(x * warpSize) * 2;\n}"}
{"ids": "79086", "raw_code": "public synchronized void recordStatistics(QueryStatistic statistic){\n  queryStatistics.add(statistic);\n}"}
{"ids": "76720", "raw_code": "protected double[] randomSubRange(double boundStart,double boundLen){\n  if (boundLen >= 3 && usually()) {\n    int intBoundStart=(int)Math.ceil(boundStart);\n    int intBoundEnd=(int)(boundStart + boundLen);\n    int intBoundLen=intBoundEnd - intBoundStart;\n    int newLen=(int)randomGaussianMeanMax(intBoundLen / 16.0,intBoundLen);\n    int newStart=intBoundStart + randomInt(intBoundLen - newLen);\n    return new double[]{newStart,newLen};\n  }\n else {\n    double newLen=randomGaussianMeanMax(boundLen / 16,boundLen);\n    double newStart=boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n    return new double[]{newStart,newLen};\n  }\n}"}
{"ids": "52537", "raw_code": "private DateTimeZone generateTimeZone(String timeZoneId,DateTimeZone systemTimeZone){\n  if (timeZoneId == null) {\n    return systemTimeZone;\n  }\n  try {\n    return DateTimeZone.forID(timeZoneId);\n  }\n catch (  IllegalArgumentException ignored) {\n    LOG.debug(INVALID_TIME_ZONE.logFormat(timeZoneId));\n    throw new BadApiRequestException(INVALID_TIME_ZONE.format(timeZoneId));\n  }\n}"}
{"ids": "11795", "raw_code": "public void checkWarehouse(boolean sbf){\n  if (warehouse == null) {\n    logger.fine(\"need to create warehouse\");\n    warehouse=new VPFAutoFeatureGraphicWarehouse();\n  }\n}"}
{"ids": "53460", "raw_code": "public double maxDist(SpatialComparable mbr1,SpatialComparable mbr2){\n  final int dim1=mbr1.getDimensionality(), dim2=mbr2.getDimensionality();\n  final int mindim=(dim1 < dim2) ? dim1 : dim2;\n  double agg=0.;\n  for (int d=0; d < mindim; d++) {\n    double d1=mbr1.getMax(d) - mbr2.getMin(d);\n    double d2=mbr2.getMax(d) - mbr1.getMin(d);\n    double delta=d1 > d2 ? d1 : d2;\n    agg+=delta * delta;\n  }\n  for (int d=mindim; d < dim1; d++) {\n    double d1=Math.abs(mbr1.getMin(d)), d2=Math.abs(mbr1.getMax(d));\n    double delta=d1 > d2 ? d1 : d2;\n    agg+=delta * delta;\n  }\n  for (int d=mindim; d < dim2; d++) {\n    double d1=Math.abs(mbr2.getMin(d)), d2=Math.abs(mbr2.getMax(d));\n    double delta=d1 > d2 ? d1 : d2;\n    agg+=delta * delta;\n  }\n  return Math.sqrt(agg);\n}"}
{"ids": "60190", "raw_code": "public static void createLesson(@NotNull final Lesson lesson,@NotNull final VirtualFile courseDir,@NotNull final File resourceRoot,@NotNull final Project project) throws IOException {\n  String lessonDirName=EduNames.LESSON + Integer.toString(lesson.getIndex());\n  VirtualFile lessonDir=courseDir.createChildDirectory(project,lessonDirName);\n  final List<Task> taskList=lesson.getTaskList();\n  for (int i=1; i <= taskList.size(); i++) {\n    Task task=taskList.get(i - 1);\n    task.setIndex(i);\n    createTask(task,lessonDir,new File(resourceRoot,lessonDir.getName()),project);\n  }\n}"}
{"ids": "48556", "raw_code": "protected void rehash(){\n  int oldCapacity=table.length;\n  CacheEntry oldTable[]=table;\n  int newCapacity=oldCapacity * 2 + 1;\n  CacheEntry newTable[]=new CacheEntry[newCapacity];\n  threshold=(int)(newCapacity * loadFactor);\n  table=newTable;\n  for (int i=oldCapacity; i-- > 0; ) {\n    for (CacheEntry old=oldTable[i]; old != null; ) {\n      CacheEntry e=old;\n      old=old.next;\n      if (e.check() != null) {\n        int index=(e.hash & 0x7FFFFFFF) % newCapacity;\n        e.next=newTable[index];\n        newTable[index]=e;\n      }\n else       count--;\n    }\n  }\n}"}
{"ids": "62700", "raw_code": "public void append(byte[] utf8,int start,int len){\n  setCapacity(length + len,true);\n  System.arraycopy(utf8,start,bytes,length,len);\n  length+=len;\n}"}
{"ids": "17297", "raw_code": "private void handleError(GCPStatsDataHolder statsData,Throwable e){\n  logSevere(e);\n  statsData.error=e;\n  statsData.stage=StatsCollectionStage.ERROR;\n  handleStatsRequest(statsData);\n}"}
{"ids": "82472", "raw_code": "public java.lang.StringBuilder insert(int offset,double d){\n  return insert(offset,Double.toString(d));\n}"}
{"ids": "18158", "raw_code": "public Object castToType(int t,XPathContext support) throws javax.xml.transform.TransformerException {\n  Object result;\nswitch (t) {\ncase CLASS_STRING:\n    result=str();\n  break;\ncase CLASS_NUMBER:\nresult=new Double(num());\nbreak;\ncase CLASS_NODESET:\nresult=iter();\nbreak;\ncase CLASS_BOOLEAN:\nresult=new Boolean(bool());\nbreak;\ncase CLASS_UNKNOWN:\nresult=m_obj;\nbreak;\ndefault :\nerror(XPATHErrorResources.ER_CANT_CONVERT_TO_TYPE,new Object[]{getTypeString(),Integer.toString(t)});\nresult=null;\n}\nreturn result;\n}"}
{"ids": "29863", "raw_code": "public boolean isPassthroughSupported(String mimeType){\n  return audioCapabilities != null && audioCapabilities.supportsEncoding(getEncodingForMimeType(mimeType));\n}"}
{"ids": "74859", "raw_code": "String internalsprintf(final Object s){\n  final String s2;\n  if (conversionCharacter == 's' || conversionCharacter == 'S') {\n    s2=printSFormat(s.toString());\n  }\n else {\n    throw new IllegalArgumentException(\"Cannot format a String with a format using\" + \" a \" + conversionCharacter + \" conversion character.\");\n  }\n  return s2;\n}"}
{"ids": "20639", "raw_code": "public T firstItem(){\n  if (mDataList == null || mDataList.size() == 0) {\n    return null;\n  }\n  return mDataList.get(0);\n}"}
{"ids": "51454", "raw_code": "public void addRequestProperty(String field,String newValue){\n  checkNotConnected();\n  if (field == null) {\n    throw new NullPointerException(\"field == null\");\n  }\n}"}
{"ids": "84592", "raw_code": "public double doOperation() throws OperatorFailedException {\n  double[] mean=sccs.getMode();\n  double[] currentValue=parameter.getParameterValues();\n  double[] newValue=new double[dim];\n  Set<Integer> updateSet=new HashSet<Integer>();\n  if (setSizeMean != -1.0) {\n    final int listLength=Poisson.nextPoisson(setSizeMean);\n    while (updateSet.size() < listLength) {\n      int newInt=MathUtils.nextInt(parameter.getDimension());\n      if (!updateSet.contains(newInt)) {\n        updateSet.add(newInt);\n      }\n    }\n  }\n else {\n    for (int i=0; i < dim; ++i) {\n      updateSet.add(i);\n    }\n  }\n  double logq=0;\n  for (  Integer i : updateSet) {\n    newValue[i]=mean[i] + scaleFactor * MathUtils.nextGaussian();\n    if (UPDATE_ALL) {\n      parameter.setParameterValueQuietly(i,newValue[i]);\n    }\n else {\n      parameter.setParameterValue(i,newValue[i]);\n    }\n    logq+=(NormalDistribution.logPdf(currentValue[i],mean[i],scaleFactor) - NormalDistribution.logPdf(newValue[i],mean[i],scaleFactor));\n  }\n  if (UPDATE_ALL) {\n    parameter.setParameterValueNotifyChangedAll(0,parameter.getParameterValue(0));\n  }\n  return logq;\n}"}
{"ids": "17389", "raw_code": "public Object load(URI uri) throws IOException {\n  InputStreamReader src=null;\n  try {\n    src=new FileReader(new File(uri));\n    return xstream.fromXML(src);\n  }\n  finally {\n    if (null != src) {\n      src.close();\n    }\n  }\n}"}
{"ids": "86218", "raw_code": "private synchronized void sendPendingState(){\n  if (!mPendingClients.isEmpty()) {\n    final Message[] messages=new Message[]{SantaServiceMessages.getBeginFullStateMessage(),SantaServiceMessages.getSwitchOffMessage(mPreferences.getSwitchOff()),getTimeUpdateMessage(),SantaServiceMessages.getCastDisabledMessage(mPreferences.getCastDisabled()),SantaServiceMessages.getGamesMessage(mPreferences.getGumballDisabled(),mPreferences.getJetpackDisabled(),mPreferences.getMemoryDisabled(),mPreferences.getRocketDisabled(),mPreferences.getDancerDisabled(),mPreferences.getSnowdownDisabled()),SantaServiceMessages.getDestinationPhotoMessage(mPreferences.getDestinationPhotoDisabled()),SantaServiceMessages.getStateMessage(mState),SantaServiceMessages.getVideosMessage(mPreferences.getVideos())};\n    for (int i=0; i < mPendingClients.size(); i++) {\n      final Messenger messenger=mPendingClients.get(i);\n      try {\n        for (        Message msg : messages) {\n          messenger.send(msg);\n        }\n        mClients.add(messenger);\n      }\n catch (      RemoteException e) {\n      }\n      mPendingClients.remove(i);\n    }\n  }\n}"}
{"ids": "21296", "raw_code": "private void fetchChunk(BulkIdParam input,List<T> results){\n  List<T> items=getBulkResources(input);\n  for (  T item : items) {\n    results.add(item);\n  }\n}"}
{"ids": "6303", "raw_code": "public static void moveDirectoryToDirectory(File src,File destDir,boolean createDestDir) throws IOException {\n  if (src == null) {\n    throw new NullPointerException(\"Source must not be null\");\n  }\n  if (destDir == null) {\n    throw new NullPointerException(\"Destination directory must not be null\");\n  }\n  if (!destDir.exists() && createDestDir) {\n    destDir.mkdirs();\n  }\n  if (!destDir.exists()) {\n    throw new FileNotFoundException(\"Destination directory '\" + destDir + \"' does not exist [createDestDir=\"+ createDestDir+ \"]\");\n  }\n  if (!destDir.isDirectory()) {\n    throw new IOException(\"Destination '\" + destDir + \"' is not a directory\");\n  }\n  moveDirectory(src,new File(destDir,src.getName()));\n}"}
{"ids": "82737", "raw_code": "public Shape createCheckMark(final int x,final int y,final int w,final int h){\n  double xf=w / 12.0;\n  double hf=h / 12.0;\n  path.reset();\n  path.moveTo(x,y + 7.0 * hf);\n  path.lineTo(x + 2.0 * xf,y + 7.0 * hf);\n  path.lineTo(x + 4.75 * xf,y + 10.0 * hf);\n  path.lineTo(x + 9.0 * xf,y);\n  path.lineTo(x + 11.0 * xf,y);\n  path.lineTo(x + 5.0 * xf,y + 12.0 * hf);\n  path.closePath();\n  return path;\n}"}
{"ids": "64623", "raw_code": "public static ResponseData parse(String responseData){\n  int index=responseData.indexOf(':');\n  String mainData, extraData;\n  if (-1 == index) {\n    mainData=responseData;\n    extraData=\"\";\n  }\n else {\n    mainData=responseData.substring(0,index);\n    extraData=index >= responseData.length() ? \"\" : responseData.substring(index + 1);\n  }\n  String[] fields=TextUtils.split(mainData,Pattern.quote(\"|\"));\n  if (fields.length < 6) {\n    throw new IllegalArgumentException();\n  }\n  ResponseData data=new ResponseData();\n  data.extra=extraData;\n  data.responseCode=Integer.parseInt(fields[0]);\n  data.nonce=Integer.parseInt(fields[1]);\n  data.packageName=fields[2];\n  data.versionCode=fields[3];\n  data.userId=fields[4];\n  data.timestamp=Long.parseLong(fields[5]);\n  return data;\n}"}
{"ids": "65810", "raw_code": "public int noOfTabs(){\n  return m_curWinTab.getTabCount();\n}"}
{"ids": "25028", "raw_code": "private static void close(Closeable closeable){\n  if (closeable != null) {\n    try {\n      closeable.close();\n    }\n catch (    IOException e) {\n    }\n  }\n}"}
{"ids": "2349", "raw_code": "public static String convertTimestampToDateStringCompact(boolean useUTC,long milli){\n  Date date=new Date(milli);\n  SimpleDateFormat sourceFormat=new SimpleDateFormat(\"dd-MM-yyyy\");\n  sourceFormat.setTimeZone(useUTC ? TimeZone.getTimeZone(\"UTC\") : TimeZone.getDefault());\n  return sourceFormat.format(date);\n}"}
{"ids": "50282", "raw_code": "protected synchronized void superposeBitSet(FixedBitSet incomingBitSet,double weight){\n  weight=(int)Math.round(weight * Math.pow(10,BINARY_VECTOR_DECIMAL_PLACES));\n  if (weight == 0)   return;\n  totalNumberOfVotes.set(totalNumberOfVotes.get() + (int)weight);\n  int logFloorOfWeight=(int)(Math.floor(Math.log(weight) / Math.log(2)));\n  if (logFloorOfWeight < votingRecord.size() - 1) {\n    while (logFloorOfWeight > 0) {\n      superposeBitSetFromRowFloor(incomingBitSet,logFloorOfWeight);\n      weight=weight - (int)Math.pow(2,logFloorOfWeight);\n      logFloorOfWeight=(int)(Math.floor(Math.log(weight) / Math.log(2)));\n    }\n  }\n  for (int x=0; x < weight; x++)   superposeBitSetFromRowFloor(incomingBitSet,0);\n}"}
{"ids": "27014", "raw_code": "public final double tanHalfAngle(){\n  return Math.tan(0.5 * this.radians);\n}"}
{"ids": "1569", "raw_code": "public void parseSignaturesFile(URL url) throws IOException, ParseException {\n  parseSignaturesFile(url.openStream(),url.toString());\n}"}
{"ids": "70265", "raw_code": "public void addFlare(Flare flare){\n  flares.addElement(flare);\n  processGameEvent(new GameBoardChangeEvent(this));\n}"}
{"ids": "23631", "raw_code": "public static void objectStringNonRecursive(@Unretained Object obj,StringBuilder sb){\n  if (obj instanceof Object[]) {\n    sb.append('(');\n    boolean first=true;\n    for (    Object o : (Object[])obj) {\n      if (!first) {\n        sb.append(',');\n        sb.append(o);\n      }\n else {\n        first=false;\n        objectStringWithBytes(o,sb);\n      }\n    }\n    sb.append(')');\n  }\n else {\n    objectStringWithBytes(obj,sb);\n  }\n}"}
{"ids": "69768", "raw_code": "public void readOSM(File file){\n  if (file.exists()) {\n    streetLayer.openOSM(file);\n  }\n else {\n    LOG.info(\"osm.mapdb doesn't exist in graph folder. This means that street names won't be shown\");\n  }\n}"}
{"ids": "61267", "raw_code": "public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws SAXException {\n  String msg=\"\";\n  if (!(handler.getElemTemplateElement() instanceof Stylesheet)) {\n    msg=\"func:function element must be top level.\";\n    handler.error(msg,new SAXException(msg));\n  }\n  super.startElement(handler,uri,localName,rawName,attributes);\n  String val=attributes.getValue(\"name\");\n  int indexOfColon=val.indexOf(\":\");\n  if (indexOfColon > 0) {\n  }\n else {\n    msg=\"func:function name must have namespace\";\n    handler.error(msg,new SAXException(msg));\n  }\n}"}
{"ids": "3671", "raw_code": "public void write(byte[] buffer,int offset,int length) throws IOException {\n  _file.write(buffer,offset,length);\n}"}
{"ids": "7085", "raw_code": "public static boolean canInteract(Role issuer,Role target){\n  if (issuer.getGuild() != target.getGuild())   throw new IllegalArgumentException(\"The 2 Roles are not from same Guild!\");\n  return target.getPosition() < issuer.getPosition();\n}"}
{"ids": "31045", "raw_code": "public Webster() throws BindException {\n  this.port=Integer.getInteger(WEBSTER_PORT,0);\n  initialize();\n}"}
{"ids": "15303", "raw_code": "public boolean willThrowExceptionIfKeyWasNotFound(){\n  return throwex;\n}"}
{"ids": "87008", "raw_code": "public Response createResponse(String responseString) throws java.text.ParseException {\n  if (responseString == null)   return new SIPResponse();\n  StringMsgParser smp=new StringMsgParser();\n  SIPMessage sipMessage=smp.parseSIPMessage(responseString.getBytes(),true,false,null);\n  if (!(sipMessage instanceof SIPResponse))   throw new ParseException(responseString,0);\n  return (SIPResponse)sipMessage;\n}"}
{"ids": "72533", "raw_code": "private ODEStateAndDerivative state(double t){\n  return new ODEStateAndDerivative(t,new double[0],new double[0]);\n}"}
{"ids": "25596", "raw_code": "public static Class<?> findCommonElementType(Collection collection){\n  if (isEmpty(collection)) {\n    return null;\n  }\n  Class<?> candidate=null;\n  for (  Object val : collection) {\n    if (val != null) {\n      if (candidate == null) {\n        candidate=val.getClass();\n      }\n else       if (candidate != val.getClass()) {\n        return null;\n      }\n    }\n  }\n  return candidate;\n}"}
{"ids": "44387", "raw_code": "protected void initPingIntervalMilli(){\n  String pingIntervalMilliParam=getInitParameter(\"pingIntervalMilli\");\n  setPingIntervalMilli((pingIntervalMilliParam == null) ? DEFAULT_PING_INTERVAL_MILLI : Integer.parseInt(pingIntervalMilliParam));\n  if (isDebug()) {\n    log(\"pingIntervalMilli: \" + getPingIntervalMilli());\n  }\n}"}
{"ids": "28149", "raw_code": "public boolean ask(final String queryStr,String externalQueryId) throws Exception {\n  final RepositoryConnection cxn=cxn();\n  UUID queryId=null;\n  try {\n    final BooleanQuery query=(BooleanQuery)cxn.prepareBooleanQuery(QueryLanguage.SPARQL,queryStr);\n    setMaxQueryTime(query);\n    if (query instanceof BigdataSailBooleanQuery && cxn instanceof BigdataSailRepositoryConnection) {\n      final BigdataSailBooleanQuery bdtq=(BigdataSailBooleanQuery)query;\n      queryId=setupQuery((BigdataSailRepositoryConnection)cxn,bdtq.getASTContainer(),QueryType.ASK,externalQueryId);\n    }\n    final boolean result=query.evaluate();\n    return result;\n  }\n  finally {\n    if (queryId != null) {\n      finalizeQuery(queryId);\n    }\n  }\n}"}
{"ids": "81737", "raw_code": "@SuppressWarnings(\"unchecked\") private static int find(Object[] arr,net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable val,int bnd,int l,int r){\n  int m=l;\n  int d=1;\n  while (m <= r) {\n    if (val.compareTo(arr[m]) > bnd) {\n      l=m + 1;\n    }\n else {\n      r=m - 1;\n      break;\n    }\n    m+=d;\n    d<<=1;\n  }\n  while (l <= r) {\n    m=(l + r) >>> 1;\n    if (val.compareTo(arr[m]) > bnd) {\n      l=m + 1;\n    }\n else {\n      r=m - 1;\n    }\n  }\n  return l - 1;\n}"}
{"ids": "2914", "raw_code": "public static String asHex(byte[] bytes,String separator){\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < bytes.length; i++) {\n    String code=Integer.toHexString(bytes[i] & 0xFF);\n    if ((bytes[i] & 0xFF) < 16) {\n      sb.append('0');\n    }\n    sb.append(code);\n    if (separator != null && i < bytes.length - 1) {\n      sb.append(separator);\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "66300", "raw_code": "public static Connection createConnection(boolean autoCommit,int trxLevel){\n  Connection conn=s_cc.getConnection(autoCommit,trxLevel);\n  if (CLogMgt.isLevelFinest()) {\n  }\n  try {\n    if (conn != null && conn.getAutoCommit() != autoCommit) {\n      throw new IllegalStateException(\"Failed to set the requested auto commit mode on connection. [autoCommit=\" + autoCommit + \"]\");\n    }\n  }\n catch (  SQLException e) {\n  }\n  return conn;\n}"}
{"ids": "19785", "raw_code": "private boolean updateStatementData(StatementData sdata,Matcher matcher,String toRegex){\n  if (transformTables)   return true;\n  if (matcher == null)   return true;\n  String schema=sdata.getDefaultSchema();\n  if (schema == null)   return true;\n  matcher.reset(schema);\n  if (matcher.matches()) {\n    String oldSchema=schema;\n    sdata.setDefaultSchema(matcher.replaceAll(toRegex));\n    if (logger.isDebugEnabled())     logger.debug(\"Filtered event schema name: old=\" + oldSchema + \" new=\"+ sdata.getDefaultSchema());\n    return true;\n  }\n  return false;\n}"}
{"ids": "63358", "raw_code": "public void stopIfRequired(){\n  if (System.currentTimeMillis() > stopAt) {\n    throw new IllegalStateException();\n  }\n}"}
{"ids": "15145", "raw_code": "private void linkAccount(final String principalId,final NameID nameId) throws SAML2MetaException, AuthenticationException {\n  final String spEntityId=metaManager.getEntityByMetaAlias(metaAlias);\n  try {\n    NameIDInfo info=new NameIDInfo(spEntityId,entityName,nameId,SAML2Constants.SP_ROLE,false);\n    DEBUG.message(\"SAML2 :: Local User {} Linked to Federation Account - {}\",principalId,nameId.getValue());\n    if (shouldPersistNameID(spEntityId)) {\n      AccountUtils.setAccountFederation(info,principalId);\n    }\n    principal=new SAML2Principal(principalId);\n  }\n catch (  SAML2Exception e) {\n    throw new AuthenticationException(BUNDLE_NAME,\"localLinkError\",new Object[0]);\n  }\n}"}
{"ids": "82715", "raw_code": "private void enableActions(){\n  restoreAction.setEnabled(frame.isMaximum() || frame.isIcon());\n  maximizeAction.setEnabled((frame.isMaximizable() && !frame.isMaximum() && !frame.isIcon()) || (frame.isMaximizable() && frame.isIcon()));\n  iconifyAction.setEnabled(frame.isIconifiable() && !frame.isIcon());\n  closeAction.setEnabled(frame.isClosable());\n  sizeAction.setEnabled(false);\n  moveAction.setEnabled(false);\n}"}
{"ids": "67390", "raw_code": "private List<String> addRules(int filterId,List<String> rules,boolean useCosmetics){\n  InputStream inputStream=null;\n  InputStreamReader inputStreamReader=null;\n  BufferedReader reader=null;\n  try {\n    String fileName=getOrCreateFilterFile(filterId);\n    inputStream=context.openFileInput(fileName);\n    inputStreamReader=new InputStreamReader(inputStream);\n    reader=new BufferedReader(inputStreamReader);\n    String line=reader.readLine();\n    while (line != null) {\n      if (useCosmetics || !FilterRule.isCosmeticRule(line)) {\n        rules.add(line);\n      }\n      line=reader.readLine();\n    }\n    return rules;\n  }\n catch (  Exception ex) {\n    log.error(\"Cannot select rules for filter {}\",filterId,ex);\n    throw new RuntimeException(\"Cannot select rules for filter \" + filterId,ex);\n  }\n finally {\n    IOUtils.closeQuietly(inputStream);\n    IOUtils.closeQuietly(inputStreamReader);\n    IOUtils.closeQuietly(reader);\n  }\n}"}
{"ids": "66319", "raw_code": "public static String convertToHexString(byte[] bytes){\n  int size=bytes.length;\n  StringBuffer buffer=new StringBuffer(size * 2);\n  for (int i=0; i < size; i++) {\n    int x=bytes[i];\n    if (x < 0)     x+=256;\n    String tmp=Integer.toHexString(x);\n    if (tmp.length() == 1)     buffer.append(\"0\");\n    buffer.append(tmp);\n  }\n  return buffer.toString();\n}"}
{"ids": "75069", "raw_code": "public OrderedTask(String identifier,Step... steps){\n  this(identifier,Arrays.asList(steps));\n}"}
{"ids": "73504", "raw_code": "public void randomize(List<CellIndex> cellIndices){\n  Random rand=new Random();\n  int range=getUpperBound() - getLowerBound();\n  for (  CellIndex cellIndex : cellIndices) {\n    int row=cellIndex.row;\n    int col=cellIndex.col;\n    double value=(rand.nextDouble() * range) + getLowerBound();\n    setLogicalValue(row,col,value,false);\n  }\n  fireTableDataChanged();\n}"}
{"ids": "64582", "raw_code": "private void readResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {\n  Header header=response.getFirstHeader(\"Content-Disposition\");\n  if (header != null) {\n    innerState.mHeaderContentDisposition=header.getValue();\n  }\n  header=response.getFirstHeader(\"Content-Location\");\n  if (header != null) {\n    innerState.mHeaderContentLocation=header.getValue();\n  }\n  header=response.getFirstHeader(\"ETag\");\n  if (header != null) {\n    innerState.mHeaderETag=header.getValue();\n  }\n  String headerTransferEncoding=null;\n  header=response.getFirstHeader(\"Transfer-Encoding\");\n  if (header != null) {\n    headerTransferEncoding=header.getValue();\n  }\n  String headerContentType=null;\n  header=response.getFirstHeader(\"Content-Type\");\n  if (header != null) {\n    headerContentType=header.getValue();\n    if (!headerContentType.equals(\"application/vnd.android.obb\")) {\n      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,\"file delivered with incorrect Mime type\");\n    }\n  }\n  if (headerTransferEncoding == null) {\n    header=response.getFirstHeader(\"Content-Length\");\n    if (header != null) {\n      innerState.mHeaderContentLength=header.getValue();\n      long contentLength=Long.parseLong(innerState.mHeaderContentLength);\n      if (contentLength != -1 && contentLength != mInfo.mTotalBytes) {\n        Log.e(Constants.TAG,\"Incorrect file size delivered.\");\n      }\n    }\n  }\n else {\n    if (Constants.LOGVV) {\n      Log.v(Constants.TAG,\"ignoring content-length because of xfer-encoding\");\n    }\n  }\n  if (Constants.LOGVV) {\n    Log.v(Constants.TAG,\"Content-Disposition: \" + innerState.mHeaderContentDisposition);\n    Log.v(Constants.TAG,\"Content-Length: \" + innerState.mHeaderContentLength);\n    Log.v(Constants.TAG,\"Content-Location: \" + innerState.mHeaderContentLocation);\n    Log.v(Constants.TAG,\"ETag: \" + innerState.mHeaderETag);\n    Log.v(Constants.TAG,\"Transfer-Encoding: \" + headerTransferEncoding);\n  }\n  boolean noSizeInfo=innerState.mHeaderContentLength == null && (headerTransferEncoding == null || !headerTransferEncoding.equalsIgnoreCase(\"chunked\"));\n  if (noSizeInfo) {\n    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,\"can't know size of download, giving up\");\n  }\n}"}
{"ids": "86384", "raw_code": "public void addAuditory(int id){\n  mAuditoryFeedback.add(id);\n}"}
{"ids": "75997", "raw_code": "public String wrap(String path){\n  return uriPrefix + path;\n}"}
{"ids": "79328", "raw_code": "public static void constantAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {\n  for (  String name : attributeNames) {\n    String attributeValue=element.getAttribute(name);\n    if (!MiniLangUtil.isConstantAttribute(attributeValue)) {\n      handleError(\"Constant attribute \\\"\" + name + \"\\\" cannot contain an expression.\",method,element);\n    }\n  }\n}"}
{"ids": "51644", "raw_code": "private void bindViewType(WXComponent component){\n  int id=generateViewType(component);\n  if (mViewTypes == null) {\n    mViewTypes=new SparseArray<>();\n  }\n  ArrayList<WXComponent> mTypes=mViewTypes.get(id);\n  if (mTypes == null) {\n    mTypes=new ArrayList<>();\n    mViewTypes.put(id,mTypes);\n  }\n  mTypes.add(component);\n}"}
{"ids": "39849", "raw_code": "protected boolean isEmptyValue(Object rawValue){\n  return rawValue == null || StringUtils.isBlank(String.valueOf(rawValue));\n}"}
{"ids": "86941", "raw_code": "public CipherTextIvMac(byte[] c,byte[] i,byte[] h){\n  cipherText=new byte[c.length];\n  System.arraycopy(c,0,cipherText,0,c.length);\n  iv=new byte[i.length];\n  System.arraycopy(i,0,iv,0,i.length);\n  mac=new byte[h.length];\n  System.arraycopy(h,0,mac,0,h.length);\n}"}
{"ids": "83765", "raw_code": "public static MasterPrivateKey createFromEncryptedSeed(String passphrase,byte[] encryptedSeed) throws HyperLedgerException {\n  try {\n    byte[] key=SCrypt.generate(passphrase.getBytes(\"UTF-8\"),BITCOIN_SEED,16384,8,8,32);\n    SecretKeySpec keyspec=new SecretKeySpec(key,\"AES\");\n    if (encryptedSeed.length != 32) {\n      throw new HyperLedgerException(\"Incorrect encrypted seed length\");\n    }\n    Cipher cipher=Cipher.getInstance(\"AES/ECB/NoPadding\",\"BC\");\n    cipher.init(Cipher.DECRYPT_MODE,keyspec);\n    return create(cipher.doFinal(encryptedSeed));\n  }\n catch (  UnsupportedEncodingException|NoSuchPaddingException|NoSuchProviderException|NoSuchAlgorithmException|InvalidKeyException|BadPaddingException|IllegalBlockSizeException e) {\n    throw new HyperLedgerException(e);\n  }\n}"}
{"ids": "71985", "raw_code": "public static List<JsonPointer> filter(final String... fields){\n  final List<JsonPointer> result=new ArrayList<>(fields.length);\n  for (  final String field : fields) {\n    result.add(new JsonPointer(field));\n  }\n  return result;\n}"}
{"ids": "40255", "raw_code": "public boolean applyFtProxy(){\n  return method.isAnnotationPresent(AstrixFaultToleranceProxy.class);\n}"}
{"ids": "81167", "raw_code": "private void notifyChange(int previous,int current){\n  mSoundPlayer.play(mSoundId,1,1,0,0,1);\n  if (mOnValueChangeListener != null) {\n    mOnValueChangeListener.onValueChange(this,previous,mValue);\n  }\n}"}
{"ids": "72390", "raw_code": "public static double atan2(double y,double x){\n  if (Double.isNaN(x) || Double.isNaN(y)) {\n    return Double.NaN;\n  }\n  if (y == 0) {\n    final double result=x * y;\n    final double invx=1d / x;\n    final double invy=1d / y;\n    if (invx == 0) {\n      if (x > 0) {\n        return y;\n      }\n else {\n        return copySign(Math.PI,y);\n      }\n    }\n    if (x < 0 || invx < 0) {\n      if (y < 0 || invy < 0) {\n        return -Math.PI;\n      }\n else {\n        return Math.PI;\n      }\n    }\n else {\n      return result;\n    }\n  }\n  if (y == Double.POSITIVE_INFINITY) {\n    if (x == Double.POSITIVE_INFINITY) {\n      return Math.PI * F_1_4;\n    }\n    if (x == Double.NEGATIVE_INFINITY) {\n      return Math.PI * F_3_4;\n    }\n    return Math.PI * F_1_2;\n  }\n  if (y == Double.NEGATIVE_INFINITY) {\n    if (x == Double.POSITIVE_INFINITY) {\n      return -Math.PI * F_1_4;\n    }\n    if (x == Double.NEGATIVE_INFINITY) {\n      return -Math.PI * F_3_4;\n    }\n    return -Math.PI * F_1_2;\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (y > 0 || 1 / y > 0) {\n      return 0d;\n    }\n    if (y < 0 || 1 / y < 0) {\n      return -0d;\n    }\n  }\n  if (x == Double.NEGATIVE_INFINITY) {\n    if (y > 0.0 || 1 / y > 0.0) {\n      return Math.PI;\n    }\n    if (y < 0 || 1 / y < 0) {\n      return -Math.PI;\n    }\n  }\n  if (x == 0) {\n    if (y > 0 || 1 / y > 0) {\n      return Math.PI * F_1_2;\n    }\n    if (y < 0 || 1 / y < 0) {\n      return -Math.PI * F_1_2;\n    }\n  }\n  final double r=y / x;\n  if (Double.isInfinite(r)) {\n    return atan(r,0,x < 0);\n  }\n  double ra=doubleHighPart(r);\n  double rb=r - ra;\n  final double xa=doubleHighPart(x);\n  final double xb=x - xa;\n  rb+=(y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n  final double temp=ra + rb;\n  rb=-(temp - ra - rb);\n  ra=temp;\n  if (ra == 0) {\n    ra=copySign(0d,y);\n  }\n  final double result=atan(ra,rb,x < 0);\n  return result;\n}"}
{"ids": "22964", "raw_code": "public int count(){\n  return comments == null ? 0 : comments.size();\n}"}
{"ids": "65471", "raw_code": "private boolean isAnyPackageFromListInstalled(List<String> packages){\n  boolean result=false;\n  PackageManager pm=mContext.getPackageManager();\n  for (  String packageName : packages) {\n    try {\n      pm.getPackageInfo(packageName,0);\n      QLog.e(packageName + \" ROOT management app detected!\");\n      result=true;\n    }\n catch (    PackageManager.NameNotFoundException e) {\n      continue;\n    }\n  }\n  return result;\n}"}
{"ids": "73735", "raw_code": "public static String makeSystemName(String type,int bitNum){\n  String nName=\"\";\n  if ((!type.equals(\"S\")) && (!type.equals(\"L\")) && (!type.equals(\"T\"))) {\n    log.error(\"illegal type character proposed for system name - \" + type);\n    return (nName);\n  }\n  if ((bitNum < 1) || ((type.equals(\"S\")) && (bitNum > 1000)) || (bitNum > 8000)) {\n    log.error(\"illegal address range proposed for system name - \" + bitNum);\n    return (nName);\n  }\n  nName=\"K\" + type + Integer.toString(bitNum);\n  return (nName);\n}"}
{"ids": "136", "raw_code": "public static void remove(){\n  AUTH_TOKEN.remove();\n}"}
{"ids": "31030", "raw_code": "public void fill(int fromIndex,int toIndex,short val){\n  if (toIndex > _pos) {\n    ensureCapacity(toIndex);\n    _pos=toIndex;\n  }\n  Arrays.fill(_data,fromIndex,toIndex,val);\n}"}
{"ids": "64591", "raw_code": "private void runPendingRequests(){\n  int maxStartId=-1;\n  BillingRequest request;\n  while ((request=mPendingRequests.peek()) != null) {\n    if (request.runIfConnected()) {\n      mPendingRequests.remove();\n      if (maxStartId < request.getStartId()) {\n        maxStartId=request.getStartId();\n      }\n    }\n else {\n      bindToMarketBillingService();\n      return;\n    }\n  }\n  if (maxStartId >= 0) {\n    if (Consts.DEBUG) {\n      Log.i(TAG,\"stopping service, startId: \" + maxStartId);\n    }\n    stopSelf(maxStartId);\n  }\n}"}
{"ids": "14275", "raw_code": "public static void removeAttributeDefaultValues(String serviceName,String schemaType,String attrName,Set defaultValues,boolean isOrgAttrSchema) throws UpgradeException {\n  String classMethod=\"UpgradeUtils:removeAttributeDefaultValues : \";\n  ServiceSchema ss=null;\n  if (debug.messageEnabled()) {\n    debug.message(classMethod + \"serviceName : \" + serviceName);\n    debug.message(classMethod + \"schemaTpe :\" + schemaType);\n    debug.message(classMethod + \"attrName : \" + attrName);\n    debug.message(classMethod + \"defaltValues :\" + defaultValues);\n    debug.message(classMethod + \"isOrgAttrSchema :\" + isOrgAttrSchema);\n  }\n  try {\n    if (isOrgAttrSchema) {\n      ServiceSchemaManager sm=getServiceSchemaManager(serviceName);\n      ss=sm.getOrganizationCreationSchema();\n    }\n else {\n      ss=getServiceSchema(serviceName,null,schemaType);\n    }\n    if (ss != null) {\n      AttributeSchema attrSchema=ss.getAttributeSchema(attrName);\n      for (Iterator i=defaultValues.iterator(); i.hasNext(); ) {\n        String defaultValue=(String)i.next();\n        attrSchema.removeDefaultValue(defaultValue);\n      }\n    }\n  }\n catch (  SMSException sme) {\n    debug.error(classMethod + \"Error removing default values \",sme);\n  }\ncatch (  SSOException ssoe) {\n    debug.error(classMethod + \"Invalid SSO Token\",ssoe);\n  }\n}"}
{"ids": "27397", "raw_code": "public void unlock(final T tx){\n  if (DEBUG)   log.debug(\"enter\");\n  lock.lock();\n  if (DEBUG)   log.debug(\"have private lock\");\n  try {\n    assertNotDead();\n    assertOwnsLock(tx);\n    if (queue.remove() != tx) {\n      throw new AssertionError();\n    }\n    if (waitsFor != null) {\n      final Iterator<T> itr=queue.iterator();\nsynchronized (waitsFor) {\n        while (itr.hasNext()) {\n          final T pendingTx=itr.next();\n          try {\n            waitsFor.removeEdge(pendingTx,tx);\n          }\n catch (          Throwable t) {\n            log.warn(t.getMessage(),t);\n          }\n        }\n      }\n    }\n    if (queue.isEmpty()) {\n      if (INFO)       log.info(\"Nothing pending\");\n      return;\n    }\n    if (INFO)     log.info(\"Signaling blocked requestors\");\n    available.signalAll();\n  }\n  finally {\n    lock.unlock();\n    if (DEBUG)     log.debug(\"released private lock\");\n  }\n}"}
{"ids": "12864", "raw_code": "public boolean isUpdateAvailable(){\n  return availableUpdate != null;\n}"}
{"ids": "37544", "raw_code": "@Override public String toStringSummary(){\n  String result;\n  String titles;\n  int resultsetLength;\n  int i;\n  int j;\n  if (m_NonSigWins == null) {\n    return \"-summary data not set-\";\n  }\n  result=\"\";\n  titles=\"\";\n  resultsetLength=1 + Math.max((int)(Math.log(getColCount()) / Math.log(10)),(int)(Math.log(getRowCount()) / Math.log(10)));\n  for (i=0; i < getColCount(); i++) {\n    if (getColHidden(i)) {\n      continue;\n    }\n    titles+=\" \" + Utils.padLeft(\"\" + getSummaryTitle(i),resultsetLength * 2 + 3);\n  }\n  result+=titles + \"  (No. of datasets where [col] >> [row])\\n\";\n  for (i=0; i < getColCount(); i++) {\n    if (getColHidden(i)) {\n      continue;\n    }\n    for (j=0; j < getColCount(); j++) {\n      if (getColHidden(j)) {\n        continue;\n      }\n      result+=\" \";\n      if (j == i) {\n        result+=Utils.padLeft(\"-\",resultsetLength * 2 + 3);\n      }\n else {\n        result+=Utils.padLeft(\"\" + m_NonSigWins[i][j] + \" (\"+ m_Wins[i][j]+ \")\",resultsetLength * 2 + 3);\n      }\n    }\n    result+=\" | \" + getSummaryTitle(i) + \" = \"+ getColName(i)+ '\\n';\n  }\n  return result;\n}"}
{"ids": "33551", "raw_code": "public int read(BufferedInputStream is){\n  init();\n  if (is != null) {\n    in=is;\n    readHeader();\n    if (!err()) {\n      readContents();\n      if (frameCount < 0) {\n        status=STATUS_FORMAT_ERROR;\n      }\n    }\n  }\n else {\n    status=STATUS_OPEN_ERROR;\n  }\n  try {\n    is.close();\n  }\n catch (  IOException e) {\n  }\n  return status;\n}"}
{"ids": "35801", "raw_code": "private static int determineType(byte[] bytes){\n  int offset=0;\n  if (bytes.length >= 3 && (bytes[0] & 0xFF) == 0xEF && (bytes[1] & 0xFF) == 0xBB && (bytes[2] & 0xFF) == 0xBF) {\n    offset+=3;\n  }\n  while (offset < bytes.length && bytes[offset] == ' ' || bytes[offset] == '\\t' || bytes[offset] == '\\r' || bytes[offset] == '\\n' || bytes[offset] == '\\f') {\n    offset++;\n  }\n  return determineType(new String(bytes,offset,Math.min(8,bytes.length - offset)));\n}"}
{"ids": "5857", "raw_code": "public void fixHttpsURLConnection(){\n  HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());\n}"}
{"ids": "36043", "raw_code": "@Override public DataTable sample(int newSize){\n  int rowCount=getRowNumber();\n  if (rowCount <= newSize) {\n    return this;\n  }\n  int[] sampledSelectedIndices=new int[rowCount];\n  for (int i=0; i < rowCount; ++i) {\n    sampledSelectedIndices[i]=i;\n  }\n  Random rng=new Random(0);\n  int swapIdx;\n  int tmpValue;\n  for (int i=0; i < rowCount; ++i) {\n    swapIdx=rng.nextInt(rowCount);\n    tmpValue=sampledSelectedIndices[swapIdx];\n    sampledSelectedIndices[swapIdx]=sampledSelectedIndices[i];\n    sampledSelectedIndices[i]=tmpValue;\n  }\n  DataTableView sampledDataTable=new DataTableView(this);\n  Vector<Integer> sampledSelectedIndicesVector=new Vector<Integer>(newSize);\n  for (int i=0; i < newSize; ++i) {\n    sampledSelectedIndicesVector.add(sampledSelectedIndices[i]);\n  }\n  sampledDataTable.setSelectedIndices(sampledSelectedIndicesVector);\n  return sampledDataTable;\n}"}
{"ids": "38714", "raw_code": "private synchronized void block(boolean tf){\n  if (tf) {\n    try {\n      if (m_filterThread.isAlive() && m_state != IDLE) {\n        wait();\n      }\n    }\n catch (    InterruptedException ex) {\n    }\n  }\n else {\n    notifyAll();\n  }\n}"}
{"ids": "59521", "raw_code": "public void cancel(){\n  if (mUploadOperation == null) {\n    if (mUploadStarted.get()) {\n      Log_OC.d(TAG,\"Cancelling upload during upload preparations.\");\n      mCancellationRequested.set(true);\n    }\n else {\n      Log_OC.e(TAG,\"No upload in progress. This should not happen.\");\n    }\n  }\n else {\n    Log_OC.d(TAG,\"Cancelling upload during actual upload operation.\");\n    mUploadOperation.cancel();\n  }\n}"}
{"ids": "78791", "raw_code": "public static void mergeFiles(final File file1,final File file2,final File outputFile){\n  if (!isReadable(file1) || !isReadable(file2) || !outputFile.exists() && !makeDirsForFile(outputFile)) {\n    return;\n  }\n  try {\n    FileInputStream fis1=new FileInputStream(file1);\n    FileInputStream fis2=new FileInputStream(file2);\n    SequenceInputStream sis=new SequenceInputStream(fis1,fis2);\n    FileOutputStream fos=new FileOutputStream(outputFile);\n    int count;\n    byte[] temp=new byte[4096];\n    while ((count=sis.read(temp)) != -1) {\n      fos.write(temp,0,count);\n    }\n    FileUtils.sync(fos);\n    fos.close();\n    sis.close();\n    fis1.close();\n    fis2.close();\n  }\n catch (  FileNotFoundException e) {\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "67502", "raw_code": "public static SnippetSet parse(final File file) throws ParseException {\n  return parse(fileInputSupplier(file.getParentFile()),file.getName());\n}"}
{"ids": "67308", "raw_code": "public static String readFile(Class<?> context,String name) throws IOException {\n  try (InputStream in=context.getResourceAsStream(name)){\n    if (in == null) {\n      return null;\n    }\n    return new String(ByteStreams.toByteArray(in),ENC);\n  }\n catch (  IOException e) {\n    throw new IOException(\"Error reading \" + name,e);\n  }\n}"}
{"ids": "70532", "raw_code": "long ptsToTimeUs(long pts){\n  if (lastPts != Long.MIN_VALUE) {\n    long closestWrapCount=(lastPts + (MAX_PTS / 2)) / MAX_PTS;\n    long ptsWrapBelow=pts + (MAX_PTS * (closestWrapCount - 1));\n    long ptsWrapAbove=pts + (MAX_PTS * closestWrapCount);\n    pts=Math.abs(ptsWrapBelow - lastPts) < Math.abs(ptsWrapAbove - lastPts) ? ptsWrapBelow : ptsWrapAbove;\n  }\n  long timeUs=(pts * C.MICROS_PER_SECOND) / 90000;\n  if (lastPts == Long.MIN_VALUE) {\n    timestampOffsetUs=firstSampleTimestamp - timeUs;\n  }\n  lastPts=pts;\n  return timeUs + timestampOffsetUs;\n}"}
{"ids": "24023", "raw_code": "public int remove(Object key){\n  Entry e=removeEntryForKey(key);\n  return (e == null ? 0 : e.value);\n}"}
{"ids": "79199", "raw_code": "public boolean verifyChallengeToken(InetSocketAddress address,int token){\n  return Objects.equals(challengeTokens.get(address),token);\n}"}
{"ids": "73600", "raw_code": "@Override public void handleKey(int virtualKeyCode,int transitionState,char keyChar){\n  switchControlKeys(virtualKeyCode,transitionState);\n  inputBuffer.add(new GlobalKeyEvent(this,virtualKeyCode,transitionState,keyChar,menuPressed,shiftPressed,controlPressed,extendedKey));\n}"}
{"ids": "36714", "raw_code": "protected void drawTriangle(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow,String direction){\n  Polygon triangle=new Polygon();\n  if (direction.equals(mxConstants.DIRECTION_NORTH)) {\n    triangle.addPoint(x,y + h);\n    triangle.addPoint(x + w / 2,y);\n    triangle.addPoint(x + w,y + h);\n  }\n else   if (direction.equals(mxConstants.DIRECTION_SOUTH)) {\n    triangle.addPoint(x,y);\n    triangle.addPoint(x + w / 2,y + h);\n    triangle.addPoint(x + w,y);\n  }\n else   if (direction.equals(mxConstants.DIRECTION_WEST)) {\n    triangle.addPoint(x + w,y);\n    triangle.addPoint(x,y + h / 2);\n    triangle.addPoint(x + w,y + h);\n  }\n else {\n    triangle.addPoint(x,y);\n    triangle.addPoint(x + w,y + h / 2);\n    triangle.addPoint(x,y + h);\n  }\n  drawPolygon(triangle,fillColor,fillPaint,penColor,shadow);\n}"}
{"ids": "75245", "raw_code": "private static Map<String,String> resourceBundleMap(ResourceBundle bundle){\n  final HashMap<String,String> map=new HashMap<String,String>();\n  final Enumeration<String> e=bundle.getKeys();\n  while (e.hasMoreElements()) {\n    final String key=e.nextElement();\n    map.put(key,(String)bundle.getObject(key));\n  }\n  return Collections.unmodifiableMap(map);\n}"}
{"ids": "51427", "raw_code": "public int compareTo(IntBuffer otherBuffer){\n  int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();\n  int thisPos=position;\n  int otherPos=otherBuffer.position;\n  int thisInt, otherInt;\n  while (compareRemaining > 0) {\n    thisInt=get(thisPos);\n    otherInt=otherBuffer.get(otherPos);\n    if (thisInt != otherInt) {\n      return thisInt < otherInt ? -1 : 1;\n    }\n    thisPos++;\n    otherPos++;\n    compareRemaining--;\n  }\n  return remaining() - otherBuffer.remaining();\n}"}
{"ids": "71528", "raw_code": "private static SizePair selectSizePair(Camera camera,int desiredWidth,int desiredHeight){\n  List<SizePair> validPreviewSizes=generateValidPreviewSizeList(camera);\n  SizePair selectedPair=null;\n  int minDiff=Integer.MAX_VALUE;\n  for (  SizePair sizePair : validPreviewSizes) {\n    Size size=sizePair.previewSize();\n    int diff=Math.abs(size.getWidth() - desiredWidth) + Math.abs(size.getHeight() - desiredHeight);\n    if (diff < minDiff) {\n      selectedPair=sizePair;\n      minDiff=diff;\n    }\n  }\n  return selectedPair;\n}"}
{"ids": "32715", "raw_code": "private boolean isBlack(final int x,final int y){\n  if (!inBounds(x,y)) {\n    return false;\n  }\n  return (m_bufferedImage.getRGB(x,y) & 0x00FFFFFF) == 0;\n}"}
{"ids": "20538", "raw_code": "public void addJob(Runnable job){\n  mJobs.add(job);\n}"}
{"ids": "61111", "raw_code": "public PKCS10CertificationRequest(String signatureAlgorithm,X509Name subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {\n  String algorithmName=Strings.toUpperCase(signatureAlgorithm);\n  DERObjectIdentifier sigOID=(DERObjectIdentifier)algorithms.get(algorithmName);\n  if (sigOID == null) {\n    try {\n      sigOID=new DERObjectIdentifier(algorithmName);\n    }\n catch (    Exception e) {\n      throw new IllegalArgumentException(\"Unknown signature type requested\");\n    }\n  }\n  if (subject == null) {\n    throw new IllegalArgumentException(\"subject must not be null\");\n  }\n  if (key == null) {\n    throw new IllegalArgumentException(\"public key must not be null\");\n  }\n  if (noParams.contains(sigOID)) {\n    this.sigAlgId=new AlgorithmIdentifier(sigOID);\n  }\n else   if (params.containsKey(algorithmName)) {\n    this.sigAlgId=new AlgorithmIdentifier(sigOID,(ASN1Encodable)params.get(algorithmName));\n  }\n else {\n    this.sigAlgId=new AlgorithmIdentifier(sigOID,DERNull.INSTANCE);\n  }\n  try {\n    ASN1Sequence seq=(ASN1Sequence)ASN1Primitive.fromByteArray(key.getEncoded());\n    this.reqInfo=new CertificationRequestInfo(subject,new SubjectPublicKeyInfo(seq),attributes);\n  }\n catch (  IOException e) {\n    throw new IllegalArgumentException(\"can't encode public key\");\n  }\n  Signature sig;\n  if (provider == null) {\n    sig=Signature.getInstance(signatureAlgorithm);\n  }\n else {\n    sig=Signature.getInstance(signatureAlgorithm,provider);\n  }\n  sig.initSign(signingKey);\n  try {\n    sig.update(reqInfo.getEncoded(ASN1Encoding.DER));\n  }\n catch (  Exception e) {\n    throw new IllegalArgumentException(\"exception encoding TBS cert request - \" + e);\n  }\n  this.sigBits=new DERBitString(sig.sign());\n}"}
{"ids": "82425", "raw_code": "@Override public void close() throws IOException {\n  if (in != null) {\n    in.close();\n    in=null;\n    buf=null;\n  }\n}"}
{"ids": "72556", "raw_code": "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points){\n  int size=0;\n  Vector2D minX=null;\n  Vector2D maxX=null;\n  Vector2D minY=null;\n  Vector2D maxY=null;\n  for (  Vector2D p : points) {\n    if (minX == null || p.getX() < minX.getX()) {\n      minX=p;\n    }\n    if (maxX == null || p.getX() > maxX.getX()) {\n      maxX=p;\n    }\n    if (minY == null || p.getY() < minY.getY()) {\n      minY=p;\n    }\n    if (maxY == null || p.getY() > maxY.getY()) {\n      maxY=p;\n    }\n    size++;\n  }\n  if (size < 4) {\n    return points;\n  }\n  final List<Vector2D> quadrilateral=buildQuadrilateral(minY,maxX,maxY,minX);\n  if (quadrilateral.size() < 3) {\n    return points;\n  }\n  final List<Vector2D> reducedPoints=new ArrayList<Vector2D>(quadrilateral);\n  for (  final Vector2D p : points) {\n    if (!insideQuadrilateral(p,quadrilateral)) {\n      reducedPoints.add(p);\n    }\n  }\n  return reducedPoints;\n}"}
{"ids": "73016", "raw_code": "int updateBookmarksInTransaction(ContentValues values,String selection,String[] selectionArgs,boolean callerIsSyncAdapter){\n  int count=0;\n  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();\n  final String[] bookmarksProjection=new String[]{Bookmarks._ID,Bookmarks.VERSION,Bookmarks.URL,Bookmarks.TITLE,Bookmarks.IS_FOLDER,Bookmarks.ACCOUNT_NAME,Bookmarks.ACCOUNT_TYPE};\n  Cursor cursor=db.query(TABLE_BOOKMARKS,bookmarksProjection,selection,selectionArgs,null,null,null);\n  boolean updatingParent=values.containsKey(Bookmarks.PARENT);\n  String parentAccountName=null;\n  String parentAccountType=null;\n  if (updatingParent) {\n    long parent=values.getAsLong(Bookmarks.PARENT);\n    Cursor c=db.query(TABLE_BOOKMARKS,new String[]{Bookmarks.ACCOUNT_NAME,Bookmarks.ACCOUNT_TYPE},\"_id = ?\",new String[]{Long.toString(parent)},null,null,null);\n    if (c.moveToFirst()) {\n      parentAccountName=c.getString(0);\n      parentAccountType=c.getString(1);\n    }\n    c.close();\n  }\n else   if (values.containsKey(Bookmarks.ACCOUNT_NAME) || values.containsKey(Bookmarks.ACCOUNT_TYPE)) {\n  }\n  try {\n    String[] args=new String[1];\n    if (!callerIsSyncAdapter) {\n      values.put(Bookmarks.DATE_MODIFIED,System.currentTimeMillis());\n      values.put(Bookmarks.DIRTY,1);\n    }\n    boolean updatingUrl=values.containsKey(Bookmarks.URL);\n    String url=null;\n    if (updatingUrl) {\n      url=values.getAsString(Bookmarks.URL);\n    }\n    ContentValues imageValues=extractImageValues(values,url);\n    while (cursor.moveToNext()) {\n      long id=cursor.getLong(0);\n      args[0]=Long.toString(id);\n      String accountName=cursor.getString(5);\n      String accountType=cursor.getString(6);\n      if (updatingParent && (!TextUtils.equals(accountName,parentAccountName) || !TextUtils.equals(accountType,parentAccountType))) {\n        ContentValues newValues=valuesFromCursor(cursor);\n        newValues.putAll(values);\n        newValues.remove(Bookmarks._ID);\n        newValues.remove(Bookmarks.VERSION);\n        newValues.put(Bookmarks.ACCOUNT_NAME,parentAccountName);\n        newValues.put(Bookmarks.ACCOUNT_TYPE,parentAccountType);\n        Uri insertUri=insertInTransaction(Bookmarks.CONTENT_URI,newValues,callerIsSyncAdapter);\n        long newId=ContentUris.parseId(insertUri);\n        if (cursor.getInt(4) != 0) {\n          ContentValues updateChildren=new ContentValues(1);\n          updateChildren.put(Bookmarks.PARENT,newId);\n          count+=updateBookmarksInTransaction(updateChildren,Bookmarks.PARENT + \"=?\",new String[]{Long.toString(id)},callerIsSyncAdapter);\n        }\n        Uri uri=ContentUris.withAppendedId(Bookmarks.CONTENT_URI,id);\n        deleteInTransaction(uri,null,null,callerIsSyncAdapter);\n        count+=1;\n      }\n else {\n        if (!callerIsSyncAdapter) {\n          values.put(Bookmarks.VERSION,cursor.getLong(1) + 1);\n        }\n        count+=db.update(TABLE_BOOKMARKS,values,\"_id=?\",args);\n      }\n      if (imageValues != null) {\n        if (!updatingUrl) {\n          url=cursor.getString(2);\n          imageValues.put(Images.URL,url);\n        }\n        if (!TextUtils.isEmpty(url)) {\n          args[0]=url;\n          if (db.update(TABLE_IMAGES,imageValues,Images.URL + \"=?\",args) == 0) {\n            db.insert(TABLE_IMAGES,Images.FAVICON,imageValues);\n          }\n        }\n      }\n    }\n  }\n  finally {\n    if (cursor != null)     cursor.close();\n  }\n  return count;\n}"}
{"ids": "31725", "raw_code": "private IgniteBiTuple<String,Integer> hostPort(String connStr,String hostPortStr) throws IgniteCheckedException {\n  String[] tokens=hostPortStr.split(\":\",-1);\n  String host=tokens[0];\n  if (F.isEmpty(host))   host=LOCALHOST;\n  int port;\n  if (tokens.length == 1)   port=IgfsIpcEndpointConfiguration.DFLT_PORT;\n else   if (tokens.length == 2) {\n    String portStr=tokens[1];\n    try {\n      port=Integer.valueOf(portStr);\n      if (port < 0 || port > 65535)       throw new IgniteCheckedException(\"Invalid port number: \" + connStr);\n    }\n catch (    NumberFormatException e) {\n      throw new IgniteCheckedException(\"Invalid port number: \" + connStr);\n    }\n  }\n else   throw new IgniteCheckedException(\"Invalid connection string format: \" + connStr);\n  return F.t(host,port);\n}"}
{"ids": "63593", "raw_code": "public boolean isMissileGoingToHit(EntityMissile missile){\n  if (missile == null || missile.targetVector == null) {\n    return false;\n  }\n  return (Vector2.distance(new Vector2(new Pos3D(missile)),new Vector2(xCoord,zCoord)) < alarmRange && Vector2.distance(new Vector2(missile.targetVector),new Vector2(xCoord,zCoord)) < safetyRange);\n}"}
{"ids": "55304", "raw_code": "public static Usericon parseModIcon(String json){\n  try {\n    JSONParser parser=new JSONParser();\n    JSONObject o=(JSONObject)parser.parse(json);\n    JSONObject room=(JSONObject)o.get(\"room\");\n    String roomId=(String)room.get(\"id\");\n    String modBadgeUrl=(String)room.get(\"moderator_badge\");\n    if (modBadgeUrl == null) {\n      return null;\n    }\n    return UsericonFactory.createTwitchLikeIcon(Usericon.Type.MOD,roomId,modBadgeUrl,Usericon.SOURCE_FFZ,\"Moderator (FFZ Icon)\");\n  }\n catch (  ParseException|ClassCastException|NullPointerException ex) {\n  }\n  return null;\n}"}
{"ids": "1093", "raw_code": "public static long length(URL url) throws IOException {\n  HTTPResponse http=HTTPEngine.head(url,null,null,-1,true,null,Constants.NAME,null,null);\n  return http.getContentLength();\n}"}
{"ids": "72834", "raw_code": "@Override public Request<List<Workspace>> all(){\n  List<Workspace> workspacesToReturn=new ArrayList<>();\n  for (  Workspace dummyWorkspace : workspaces.values()) {\n    workspacesToReturn.add(dummyWorkspace);\n  }\n  return new DummyRequest<>(workspacesToReturn);\n}"}
{"ids": "12097", "raw_code": "public void subscribe(EventSubscriber<?> subscriber){\n  final Class<?> eventType=getEventType(subscriber);\n  doSubscribe(subscriber,eventType);\n}"}
{"ids": "86757", "raw_code": "public static String readerToString(final Reader fileReader) throws IOException {\n  final StringBuilder sb=new StringBuilder();\n  try (BufferedReader br=new BufferedReader(fileReader)){\n    final char[] buffer=FileUtils.makeBuffer();\n    final int eof=-1;\n    for (int len=br.read(buffer); len > eof; len=br.read(buffer)) {\n      for (int i=0; i < len; i++) {\n        sb.append(buffer[i]);\n      }\n    }\n  }\n   return sb.toString();\n}"}
{"ids": "77997", "raw_code": "public static String bytesToHex(byte[] bytes,boolean withSpaces){\n  StringBuilder sb=new StringBuilder();\n  for (  byte hashByte : bytes) {\n    int intVal=0xff & hashByte;\n    if (intVal < 0x10) {\n      sb.append('0');\n    }\n    sb.append(Integer.toHexString(intVal));\n    if (withSpaces) {\n      sb.append(' ');\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "41117", "raw_code": "public static byte[] stringToUtf8Bytes(String string){\n  int len=string.length();\n  byte[] bytes=new byte[len * 3];\n  int outAt=0;\n  for (int i=0; i < len; i++) {\n    char c=string.charAt(i);\n    if ((c != 0) && (c < 0x80)) {\n      bytes[outAt]=(byte)c;\n      outAt++;\n    }\n else     if (c < 0x800) {\n      bytes[outAt]=(byte)(((c >> 6) & 0x1f) | 0xc0);\n      bytes[outAt + 1]=(byte)((c & 0x3f) | 0x80);\n      outAt+=2;\n    }\n else {\n      bytes[outAt]=(byte)(((c >> 12) & 0x0f) | 0xe0);\n      bytes[outAt + 1]=(byte)(((c >> 6) & 0x3f) | 0x80);\n      bytes[outAt + 2]=(byte)((c & 0x3f) | 0x80);\n      outAt+=3;\n    }\n  }\n  byte[] result=new byte[outAt];\n  System.arraycopy(bytes,0,result,0,outAt);\n  return result;\n}"}
{"ids": "48841", "raw_code": "private boolean isInterleaved(ComponentSampleModel sm){\n  int numBands=sampleModel.getNumBands();\n  if (numBands == 1) {\n    return true;\n  }\n  int[] bankIndices=sm.getBankIndices();\n  for (int i=0; i < numBands; i++) {\n    if (bankIndices[i] != 0) {\n      return false;\n    }\n  }\n  int[] bandOffsets=sm.getBandOffsets();\n  int minOffset=bandOffsets[0];\n  int maxOffset=minOffset;\n  for (int i=1; i < numBands; i++) {\n    int offset=bandOffsets[i];\n    if (offset < minOffset) {\n      minOffset=offset;\n    }\n    if (offset > maxOffset) {\n      maxOffset=offset;\n    }\n  }\n  if (maxOffset - minOffset >= sm.getPixelStride()) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "62522", "raw_code": "private int decodeSize(byte[] buffer){\n  BigInteger bi=new BigInteger(buffer);\n  int tmpSize=bi.intValue();\n  if (tmpSize < 0) {\n    logger.warning(\"Invalid Frame Size of:\" + tmpSize + \"Decoded from bin:\"+ Integer.toBinaryString(tmpSize)+ \"Decoded from hex:\"+ Integer.toHexString(tmpSize));\n  }\n  return tmpSize;\n}"}
{"ids": "48238", "raw_code": "public CertificateIssuerExtension(Boolean critical,Object value) throws IOException {\n  this.extensionId=PKIXExtensions.CertificateIssuer_Id;\n  this.critical=critical.booleanValue();\n  this.extensionValue=(byte[])value;\n  DerValue val=new DerValue(this.extensionValue);\n  this.names=new GeneralNames(val);\n}"}
{"ids": "68582", "raw_code": "public String toXML(){\n  StringBuffer str=new StringBuffer();\n  str.append(\"<\");\n  str.append(XML_ROOT_ELEMENT);\n  str.append(\">\");\n  str.append(\"<\");\n  str.append(XML_ELEMENT_QUALITY_CODE);\n  str.append(\">\");\n  str.append(qualityCode);\n  str.append(\"</\");\n  str.append(XML_ELEMENT_QUALITY_CODE);\n  str.append(\">\");\n  if (description != null) {\n    str.append(\"<\");\n    str.append(XML_ELEMENT_QUALITY_DESC);\n    str.append(\"><![CDATA[\");\n    str.append(description);\n    str.append(\"]]></\");\n    str.append(XML_ELEMENT_QUALITY_DESC);\n    str.append(\">\");\n  }\n  str.append(\"</\");\n  str.append(XML_ROOT_ELEMENT);\n  str.append(\">\\n\");\n  return str.toString();\n}"}
{"ids": "15552", "raw_code": "public byte[] decrypt(FacesContext context,byte[] securedata){\n  try {\n    byte[] macBytes=new byte[macLength];\n    System.arraycopy(securedata,0,macBytes,0,macBytes.length);\n    byte[] iv=new byte[ivLength];\n    System.arraycopy(securedata,macBytes.length,iv,0,iv.length);\n    byte[] encdata=new byte[securedata.length - macBytes.length - iv.length];\n    System.arraycopy(securedata,macBytes.length + iv.length,encdata,0,encdata.length);\n    byte[] rawKey=convertPasswordToKey(getPasswordToSecureState(context));\n    Mac mac=getMac(rawKey);\n    mac.update(iv);\n    mac.update(encdata);\n    byte[] macBytesCalculated=mac.doFinal();\n    if (Arrays.equals(macBytes,macBytesCalculated)) {\n      Cipher cipher=getBlockCipherForDecryption(rawKey,iv);\n      byte[] plaindata=cipher.doFinal(encdata);\n      return plaindata;\n    }\n else {\n      if (logger.isLoggable(Level.WARNING)) {\n        logger.warning(\"ERROR: MAC did not verify!\");\n      }\n      return null;\n    }\n  }\n catch (  Exception e) {\n    if (logger.isLoggable(Level.SEVERE)) {\n      logger.log(Level.SEVERE,e.getMessage(),e.getCause());\n    }\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "56260", "raw_code": "public static Set<String> commaDelimitedListToSet(String str){\n  Set<String> set=new TreeSet<>();\n  String[] tokens=commaDelimitedListToStringArray(str);\n  set.addAll(Arrays.asList(tokens));\n  return set;\n}"}
{"ids": "46330", "raw_code": "public int hashCode(){\n  return Objects.hash(file,princ,bound);\n}"}
{"ids": "37943", "raw_code": "public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(4);\n  newVector.addElement(new Option(\"\\tThe number of iterations to be performed.\\n\" + \"\\t(default 1)\",\"I\",1,\"-I <int>\"));\n  newVector.addElement(new Option(\"\\tThe exponent for the polynomial kernel.\\n\" + \"\\t(default 1)\",\"E\",1,\"-E <double>\"));\n  newVector.addElement(new Option(\"\\tThe seed for the random number generation.\\n\" + \"\\t(default 1)\",\"S\",1,\"-S <int>\"));\n  newVector.addElement(new Option(\"\\tThe maximum number of alterations allowed.\\n\" + \"\\t(default 10000)\",\"M\",1,\"-M <int>\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "63851", "raw_code": "protected void tag(String tag,String name,String value,boolean close){\n  spacing();\n  m_out.print('<');\n  m_out.print(tag);\n  m_out.print(' ');\n  m_out.print(name);\n  m_out.print('=');\n  m_out.print('\\\"');\n  escapeString(value);\n  m_out.print('\\\"');\n  if (close)   m_out.print('/');\n  m_out.print('>');\n  println();\n  if (!close) {\n    m_tagStack.add(tag);\n  }\n}"}
{"ids": "60854", "raw_code": "public V remove(Object key){\n  int hash=hash(key.hashCode());\n  Segment<K,V> s=segmentForHash(hash);\n  return s == null ? null : s.remove(key,hash,null);\n}"}
{"ids": "75625", "raw_code": "public static Result evaluateModel(MultiLabelClassifier h,Instances D) throws Exception {\n  return evaluateModelPrequentialBasic(h,D,20,1.0,\"PCut1\",\"3\");\n}"}
{"ids": "36653", "raw_code": "protected boolean isValidState(mxCellState state){\n  return true;\n}"}
{"ids": "72344", "raw_code": "public static boolean deleteDir(File dir){\n  if (dir == null) {\n    return false;\n  }\n  if (dir.isDirectory()) {\n    String[] children=dir.list();\n    for (    String child : children) {\n      boolean success=deleteDir(new File(dir,child));\n      if (!success) {\n        return false;\n      }\n    }\n  }\n  return dir.delete();\n}"}
{"ids": "22489", "raw_code": "private CIMObjectPath createFilter(CimManagedFilterInfo filterInfo) throws WBEMException {\n  StringBuilder filterNameBuilder=new StringBuilder();\n  filterNameBuilder.append(_subscriptionsIdentifier);\n  filterNameBuilder.append(CimConstants.PATH_NAME_DELIMITER);\n  filterNameBuilder.append(filterInfo.getName());\n  String filterName=filterNameBuilder.toString();\n  String implNS=_connection.getImplNamespace();\n  CIMProperty<?> nameProperty=new CIMProperty<String>(CimConstants.NAME_KEY,CIMDataType.STRING_T,filterName);\n  CIMProperty<?> srcNamespaceProp=new CIMProperty<String>(CimConstants.FILTER_PROP_SRC_NAMESPACE,CIMDataType.STRING_T,implNS);\n  CIMProperty<?> srcNamespacesProp=new CIMProperty<String[]>(CimConstants.FILTER_PROP_SRC_NAMESPACES,CIMDataType.STRING_ARRAY_T,new String[]{implNS});\n  CIMProperty<?> queryLangProp=new CIMProperty<String>(CimConstants.FILTER_PROP_QUERY_LANGUAGE,CIMDataType.STRING_T,filterInfo.getQueryLanguage());\n  CIMProperty<?> queryProp=new CIMProperty<String>(CimConstants.FILTER_PROP_QUERY,CIMDataType.STRING_T,filterInfo.getQuery());\n  CIMProperty<?>[] filterProperties=new CIMProperty[]{nameProperty,srcNamespaceProp,srcNamespacesProp,queryLangProp,queryProp};\n  CIMObjectPath filterPath=createInstance(CimConstants.CIM_FILTER_NAME,filterName,filterProperties);\n  _filterPaths.add(filterPath);\n  return filterPath;\n}"}
{"ids": "49014", "raw_code": "public ActivationGroupImpl(ActivationGroupID id,MarshalledObject<?> data) throws RemoteException {\n  super(id);\n  groupID=id;\n  unexportObject(this,true);\n  RMIServerSocketFactory ssf=new ServerSocketFactoryImpl();\n  UnicastRemoteObject.exportObject(this,0,null,ssf);\n  if (System.getSecurityManager() == null) {\n    try {\n      System.setSecurityManager(new SecurityManager());\n    }\n catch (    Exception e) {\n      throw new RemoteException(\"unable to set security manager\",e);\n    }\n  }\n}"}
{"ids": "15970", "raw_code": "static byte[] hash_df(Digest digest,byte[] seedMaterial,int seedLength){\n  byte[] temp=new byte[(seedLength + 7) / 8];\n  int len=temp.length / digest.getDigestSize();\n  int counter=1;\n  byte[] dig=new byte[digest.getDigestSize()];\n  for (int i=0; i <= len; i++) {\n    digest.update((byte)counter);\n    digest.update((byte)(seedLength >> 24));\n    digest.update((byte)(seedLength >> 16));\n    digest.update((byte)(seedLength >> 8));\n    digest.update((byte)seedLength);\n    digest.update(seedMaterial,0,seedMaterial.length);\n    digest.doFinal(dig,0);\n    int bytesToCopy=((temp.length - i * dig.length) > dig.length) ? dig.length : (temp.length - i * dig.length);\n    System.arraycopy(dig,0,temp,i * dig.length,bytesToCopy);\n    counter++;\n  }\n  if (seedLength % 8 != 0) {\n    int shift=8 - (seedLength % 8);\n    int carry=0;\n    for (int i=0; i != temp.length; i++) {\n      int b=temp[i] & 0xff;\n      temp[i]=(byte)((b >>> shift) | (carry << (8 - shift)));\n      carry=b;\n    }\n  }\n  return temp;\n}"}
{"ids": "85616", "raw_code": "protected boolean dropMessage(RTMP rtmp,int channelId,IRTMPEvent message){\n  boolean drop=false;\n  if (rtmp.getMode() == RTMP.MODE_SERVER) {\n    boolean isVideo=false;\n    if (message instanceof Ping) {\n      final Ping pingMessage=(Ping)message;\n      if (pingMessage.getEventType() == Ping.STREAM_PLAYBUFFER_CLEAR) {\n        final int channel=(4 + ((pingMessage.getValue2() - 1) * 5));\n        rtmp.setLastTimestampMapping(channel,null);\n        rtmp.setLastTimestampMapping(channel + 1,null);\n        rtmp.setLastTimestampMapping(channel + 2,null);\n      }\n      return false;\n    }\n    if ((isVideo=message instanceof VideoData) || message instanceof AudioData) {\n      if (message.getTimestamp() == 0) {\n        return false;\n      }\n      boolean isLive=message.getSourceType() == Constants.SOURCE_TYPE_LIVE;\n      long timestamp=(message.getTimestamp() & 0xFFFFFFFFL);\n      LiveTimestampMapping mapping=rtmp.getLastTimestampMapping(channelId);\n      long now=System.currentTimeMillis();\n      if (mapping == null || timestamp < mapping.getLastStreamTime()) {\n        log.debug(\"Resetting clock time ({}) to stream time ({})\",now,timestamp);\n        mapping=new LiveTimestampMapping(now,timestamp);\n        rtmp.setLastTimestampMapping(channelId,mapping);\n      }\n      mapping.setLastStreamTime(timestamp);\n      long clockTimeOfMessage=mapping.getClockStartTime() + timestamp - mapping.getStreamStartTime();\n      long tardiness=clockTimeOfMessage - now;\n      if (isLive && dropLiveFuture) {\n        tardiness=Math.abs(tardiness);\n      }\n      IConnection conn=Red5.getConnectionLocal();\n      if (conn != null) {\n        tardiness-=conn.getLastPingTime();\n      }\n else {\n        log.debug(\"Connection is null\");\n      }\n      if (tardiness < baseTolerance) {\n      }\n else       if (tardiness > highestTolerance) {\n        log.debug(\"Dropping late message: {}\",message);\n        if (isVideo) {\n          mapping.setKeyFrameNeeded(true);\n        }\n        drop=true;\n      }\n else {\n        if (isVideo) {\n          VideoData video=(VideoData)message;\n          if (video.getFrameType() == FrameType.KEYFRAME) {\n            mapping.setKeyFrameNeeded(false);\n          }\n else           if (tardiness >= baseTolerance && tardiness < midTolerance) {\n            if (video.getFrameType() == FrameType.DISPOSABLE_INTERFRAME) {\n              log.debug(\"Dropping disposible frame; message: {}\",message);\n              drop=true;\n            }\n          }\n else           if (tardiness >= midTolerance && tardiness <= highestTolerance) {\n            log.debug(\"Dropping disposible or inter frame; message: {}\",message);\n            drop=true;\n          }\n        }\n      }\n    }\n    log.debug(\"Drop data: {}\",drop);\n  }\n  return drop;\n}"}
{"ids": "62650", "raw_code": "public static double vectorLength(double[] vector){\n  double ret=0;\n  if (vector == null)   return ret;\n else {\n    for (    double aVector : vector) {\n      ret+=Math.pow(aVector,2);\n    }\n  }\n  return ret;\n}"}
{"ids": "2675", "raw_code": "public static String encodeQuery(String url){\n  Uri uri=Uri.parse(url);\n  try {\n    String query=uri.getQuery();\n    String encodedQuery=query != null ? URLEncoder.encode(query,\"UTF-8\") : null;\n    URI tmp=new URI(uri.getScheme(),uri.getAuthority(),uri.getPath(),null,uri.getFragment());\n    return tmp + (encodedQuery != null && encodedQuery.length() > 0 ? \"?\" + encodedQuery : \"\");\n  }\n catch (  UnsupportedEncodingException ignore) {\n  }\ncatch (  URISyntaxException ignore) {\n  }\n  return uri.toString();\n}"}
{"ids": "2066", "raw_code": "private static long writeFile(String path,byte[] data){\n  FileOutputStream out=null;\n  try {\n    out=new FileOutputStream(path);\n    out.write(data);\n    return data.length;\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to write data\",e);\n  }\n finally {\n    try {\n      out.close();\n    }\n catch (    Exception e) {\n      Log.e(TAG,\"Failed to close file after write\",e);\n    }\n  }\n  return -1;\n}"}
{"ids": "11273", "raw_code": "public void firePaletteEvent(ComponentEvent event){\n  if (localHackList == null) {\n    return;\n  }\n  palette=(Container)event.getSource();\n  int eventType=event.getID();\n  for (  ComponentListener listener : localHackList) {\n    if (eventType == ComponentEvent.COMPONENT_HIDDEN) {\n      listener.componentHidden(event);\n    }\n else     if (eventType == ComponentEvent.COMPONENT_SHOWN) {\n      listener.componentShown(event);\n    }\n  }\n  if (eventType == ComponentEvent.COMPONENT_HIDDEN) {\n    palette=null;\n  }\n}"}
{"ids": "74195", "raw_code": "public void removeEntry(RosterEntry e){\n  log.debug(\"Remove entry {}\",e);\n  _list.remove(e);\n  e.removePropertyChangeListener(this);\n  setDirty(true);\n  firePropertyChange(REMOVE,e,null);\n}"}
{"ids": "58360", "raw_code": "protected void logDiagnostic(String msg){\n  if (isDiagnosticsEnabled()) {\n    logRawDiagnostic(diagnosticPrefix + msg);\n  }\n}"}
{"ids": "4656", "raw_code": "public void addURL(final String url){\n  while (currentIndex < history.size() - 1) {\n    history.remove(currentIndex + 1);\n  }\n  history.add(url);\n  currentIndex=history.size() - 1;\n}"}
{"ids": "63145", "raw_code": "public static ValueTimestamp convertTimestamp(Timestamp x,Calendar calendar){\n  if (calendar == null) {\n    throw DbException.getInvalidValueException(\"calendar\",null);\n  }\n  Calendar cal=(Calendar)calendar.clone();\n  cal.setTimeInMillis(x.getTime());\n  long dateValue=dateValueFromCalendar(cal);\n  long nanos=nanosFromCalendar(cal);\n  nanos+=x.getNanos() % 1000000;\n  return ValueTimestamp.fromDateValueAndNanos(dateValue,nanos);\n}"}
{"ids": "74930", "raw_code": "private void process(){\n  ArrayList<Point2D> pList=new ArrayList<Point2D>();\n  ArrayList<Color> cList=new ArrayList<Color>();\n  while (reader.getPointer() < reader.getTotalBitLen()) {\n    Point2D p=getPointCoords();\n    pList.add(p);\n    float[] cc={1f,1f,1f,1f};\n    for (int z=0; z < colCompCount; z++) {\n      cc[z]=reader.getFloat(bitsPerComponent);\n    }\n    Color c=new Color(cc[0],cc[1],cc[2],cc[3]);\n    cList.add(c);\n  }\n  int totalRows=pList.size() / verticesPerRow;\n  for (int mm=0; mm < (totalRows - 1); mm++) {\n    int mRows=mm * totalRows;\n    for (int nn=0; nn < (verticesPerRow - 1); nn++) {\n      int nm=nn + mRows;\n      int[] t=new int[6];\n      t[0]=nm;\n      t[1]=t[3]=nm + 1;\n      t[2]=t[4]=nm + verticesPerRow;\n      t[5]=nm + verticesPerRow + 1;\n      for (int z=0; z < t.length; z++) {\n        triangles.add(pList.get(t[z]));\n        triColors.add(cList.get(t[z]));\n      }\n    }\n  }\n}"}
{"ids": "31345", "raw_code": "private void element(String segment){\n  int index=segment.indexOf(':');\n  String prefix=null;\n  if (index > 0) {\n    prefix=segment.substring(0,index);\n    segment=segment.substring(index + 1);\n  }\n  String element=style.getElement(segment);\n  prefixes.add(prefix);\n  names.add(element);\n}"}
{"ids": "29269", "raw_code": "private void cleanupHandler(ContentHandler vh) throws SAXException {\n  for (PrefixMapping pm=prefixMapping; pm != null; pm=pm.parent)   vh.endPrefixMapping(pm.prefix);\n  vh.endDocument();\n}"}
{"ids": "54265", "raw_code": "public InputStream openClassfile(String classname){\n  try {\n    URLConnection con=openClassfile0(classname);\n    if (con != null)     return con.getInputStream();\n  }\n catch (  IOException e) {\n  }\n  return null;\n}"}
{"ids": "83848", "raw_code": "public void removeIgnoredView(View v){\n  mIgnoredViews.remove(v);\n}"}
{"ids": "26780", "raw_code": "private double fitness(Solution solution,double[] weights){\n  double max=Double.NEGATIVE_INFINITY;\n  for (int i=0; i < solution.getNumberOfObjectives(); i++) {\n    max=Math.max(max,Math.max(weights[i],0.0001) * Math.abs(solution.getObjective(i) - idealPoint[i]));\n  }\n  if (solution.violatesConstraints()) {\n    max+=10000.0;\n  }\n  return max;\n}"}
{"ids": "78451", "raw_code": "private boolean selectItemByName(CCombo combo,String name,String[] cString){\n  for (int i=0; i < cString.length; i++) {\n    String propName=cString[i];\n    if (name.equalsIgnoreCase(propName)) {\n      combo.select(i);\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "34447", "raw_code": "public void addFile(String path) throws IOException {\n  File newFile=new File(path);\n  if (!newFile.exists()) {\n    throw new IOException(\"Could not add file to project: \" + newFile.getAbsolutePath());\n  }\n  if (DelphiUtils.acceptFile(newFile.getAbsolutePath())) {\n    files.add(newFile);\n  }\n}"}
{"ids": "55814", "raw_code": "public void removeLimitLine(LimitLine l){\n  mLimitLines.remove(l);\n}"}
{"ids": "42818", "raw_code": "public boolean isContent(){\n  return state.equals(CONTENT);\n}"}
{"ids": "71624", "raw_code": "protected boolean columnsDiffer(Column currentColumn,Column desiredColumn){\n  String desiredDefault=desiredColumn.getDefaultValue();\n  String currentDefault=currentColumn.getDefaultValue();\n  boolean defaultsEqual=(desiredDefault == null) || desiredDefault.equals(currentDefault);\n  boolean sizeMatters=databaseInfo.hasSize(currentColumn.getMappedTypeCode()) && (desiredColumn.getSize() != null);\n  if ((databaseInfo.getTargetJdbcType(desiredColumn.getMappedTypeCode()) != currentColumn.getMappedTypeCode()) || (desiredColumn.isRequired() != currentColumn.isRequired()) || (sizeMatters && !StringUtils.equals(desiredColumn.getSize(),currentColumn.getSize()))|| !defaultsEqual) {\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "62461", "raw_code": "public static int readUINT16(InputStream stream) throws IOException {\n  int result=stream.read();\n  result|=stream.read() << 8;\n  return result;\n}"}
{"ids": "19703", "raw_code": "private void prepareMetadataConnection() throws SQLException, ReplicatorException {\n  if (metadataConnection == null)   metadataConnection=dataSourceImpl.getConnection();\n  long currentTime=System.currentTimeMillis();\n  if (lastConnectionTime == 0) {\n    lastConnectionTime=currentTime;\n  }\n else   if (reconnectTimeoutInSeconds > 0 && currentTime - lastConnectionTime > reconnectTimeoutInSeconds * 1000) {\n    dataSourceImpl.releaseConnection(metadataConnection);\n    metadataConnection=dataSourceImpl.getConnection();\n  }\n}"}
{"ids": "34425", "raw_code": "public static String identifyLineDelimiter(String fileContent){\n  if (fileContent.matches(\"(?s).*(\\\\r\\\\n).*\")) {\n    return \"\\r\\n\";\n  }\n else   if (fileContent.matches(\"(?s).*(\\\\n).*\")) {\n    return \"\\n\";\n  }\n else   if (fileContent.matches(\"(?s).*(\\\\r).*\")) {\n    return \"\\r\";\n  }\n else {\n    return \"\\n\";\n  }\n}"}
{"ids": "668", "raw_code": "public void addItem(ForceItem item){\n  items.add(item);\n}"}
{"ids": "57036", "raw_code": "public boolean deleteAttachmentPoint(DatapathId sw,OFPort port){\n  AttachmentPoint ap=new AttachmentPoint(sw,port,new Date(0));\n  if (this.oldAPs != null) {\n    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();\n    apList.addAll(this.oldAPs);\n    int index=apList.indexOf(ap);\n    if (index > 0) {\n      apList.remove(index);\n      this.oldAPs=apList;\n    }\n  }\n  if (this.attachmentPoints != null) {\n    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();\n    apList.addAll(this.attachmentPoints);\n    int index=apList.indexOf(ap);\n    if (index > 0) {\n      apList.remove(index);\n      this.attachmentPoints=apList;\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "85817", "raw_code": "protected void parseContainerAndScreen(XmlResourceParser parser,long[] out){\n  if (HOTSEAT_CONTAINER_NAME.equals(getAttributeValue(parser,ATTR_CONTAINER))) {\n    out[0]=LauncherSettings.Favorites.CONTAINER_HOTSEAT;\n    long rank=Long.parseLong(getAttributeValue(parser,ATTR_RANK));\n    out[1]=(rank < mHotseatAllAppsRank) ? rank : (rank + 1);\n  }\n else {\n    out[0]=LauncherSettings.Favorites.CONTAINER_DESKTOP;\n    out[1]=Long.parseLong(getAttributeValue(parser,ATTR_SCREEN));\n  }\n}"}
{"ids": "84617", "raw_code": "public DefaultTreeColouring sampleTreeColouring(Tree tree,ColourChangeMatrix colourChangeMatrix,MetaPopulation mp){\n  DefaultTreeColouring colouring=new DefaultTreeColouring(2,tree);\n  double[] N=mp.getPopulationSizes(0);\n  double[] rootPartials=prune(tree,tree.getRoot(),colourChangeMatrix,N);\n  double normalization=0.0;\n  for (int i=0; i < rootPartials.length; i++) {\n    normalization+=colourChangeMatrix.getEquilibrium(i) * rootPartials[i];\n  }\n  sampleInternalNodes(tree,tree.getRoot(),colourChangeMatrix);\n  sampleBranchColourings(colouring,tree,tree.getRoot(),colourChangeMatrix);\n  double logP=calculateLogProbabilityDensity(colouring,tree,tree.getRoot(),colourChangeMatrix,N) - Math.log(normalization);\n  colouring.setLogProbabilityDensity(logP);\n  return colouring;\n}"}
{"ids": "30513", "raw_code": "public StoredListIterator<T> establishListScan(boolean random_scan){\n  if (isEmpty())   return null;\n  StoredListIterator<T> slh=_SLHolderPool.get();\n  StoredListIterator<T> res=establishPos(random_scan,slh);\n  if (res == null)   slh.release();\n  return res;\n}"}
{"ids": "56011", "raw_code": "public void drag(long time,float x,float y,float deltaX,float deltaY,float totalX,float totalY){\n  resetResizeTimeout(false);\n  deltaX=MathUtils.flipSignIf(deltaX,LocalizationUtils.isLayoutRtl());\n  mNewTabButton.drag(x,y);\n  if (mLastPressedCloseButton != null) {\n    if (!mLastPressedCloseButton.drag(x,y))     mLastPressedCloseButton=null;\n  }\n  if (mInReorderMode) {\n    float accumulatedDeltaX=x - mLastReorderX;\n    if (Math.abs(accumulatedDeltaX) >= 1.f) {\n      if (!LocalizationUtils.isLayoutRtl()) {\n        if (deltaX >= 1.f) {\n          mReorderState|=REORDER_SCROLL_RIGHT;\n        }\n else         if (deltaX <= -1.f) {\n          mReorderState|=REORDER_SCROLL_LEFT;\n        }\n      }\n else {\n        if (deltaX >= 1.f) {\n          mReorderState|=REORDER_SCROLL_LEFT;\n        }\n else         if (deltaX <= -1.f) {\n          mReorderState|=REORDER_SCROLL_RIGHT;\n        }\n      }\n      mLastReorderX=x;\n      updateReorderPosition(accumulatedDeltaX);\n    }\n  }\n else   if (!mScroller.isFinished()) {\n    mScroller.setFinalX((int)(mScroller.getFinalX() + deltaX));\n  }\n else {\n    float fastExpandDelta=calculateOffsetToMakeTabVisible(mInteractingTab,true,true,true);\n    if (mInteractingTab != null && fastExpandDelta != 0.f) {\n      if ((fastExpandDelta > 0 && deltaX > 0) || (fastExpandDelta < 0 && deltaX < 0)) {\n        mScroller.startScroll(mScrollOffset,0,(int)fastExpandDelta,0,time,EXPAND_DURATION_MS);\n      }\n    }\n else {\n      updateScrollOffsetPosition((int)(mScrollOffset + deltaX));\n    }\n  }\n  if (!mInReorderMode) {\n    final float absTotalX=Math.abs(totalX);\n    final float absTotalY=Math.abs(totalY);\n    if (totalY > mReorderMoveStartThreshold && absTotalX < mReorderMoveStartThreshold * 2.f && (absTotalX > EPSILON && (absTotalY / absTotalX) > TAN_OF_REORDER_ANGLE_START_THRESHOLD)) {\n      startReorderMode(time,x,x - totalX);\n    }\n  }\n  if (!mInReorderMode)   mInteractingTab=null;\n  mUpdateHost.requestUpdate();\n}"}
{"ids": "83551", "raw_code": "public static String decode(final String str,final String charsetName) throws UnsupportedEncodingException {\n  return decode(new String(str.getBytes(charsetName),\"UTF-8\"));\n}"}
{"ids": "65343", "raw_code": "public ServerCommit acquire(OperationEntry entry,ServerSessionContext session,long timestamp){\n  ServerCommit commit=pool.poll();\n  if (commit == null) {\n    commit=new ServerCommit(this,log);\n  }\n  commit.reset(entry,session,timestamp);\n  return commit;\n}"}
{"ids": "2354", "raw_code": "public static synchronized double makeNoise(double mean,double standardDiviation){\n  return random.nextGaussian() * Math.sqrt(standardDiviation) + mean;\n}"}
{"ids": "31976", "raw_code": "void shutdown(){\n  try {\n    sslEngine.closeInbound();\n  }\n catch (  SSLException e) {\n    if (log.isDebugEnabled())     log.debug(\"Unable to correctly close inbound data stream (will ignore) [msg=\" + e.getMessage() + \", ses=\"+ ses+ ']');\n  }\n}"}
{"ids": "38631", "raw_code": "@Override public synchronized void removeInstanceListener(InstanceListener tsl){\n  m_instanceListeners.remove(tsl);\n}"}
{"ids": "30256", "raw_code": "public Map<String,Map<String,Flt>> retrieveTerms(int docNum) throws IOException {\n  return retrieveTerms(docNum,null);\n}"}
{"ids": "77564", "raw_code": "boolean alias(String src,String target){\n  if (src == null)   return false;\n  PluginHolder<T> a=registry.get(src);\n  if (a == null)   return false;\n  PluginHolder<T> b=registry.get(target);\n  if (b != null)   return false;\n  registry.put(target,a);\n  return true;\n}"}
{"ids": "8131", "raw_code": "public static <T extends CharSequence>T eachMatch(T self,Pattern pattern,@ClosureParams(value=FromString.class,options={\"List<String>\",\"String[]\"}) Closure closure){\n  eachMatch(self.toString(),pattern,closure);\n  return self;\n}"}
{"ids": "65743", "raw_code": "public void switchSingleRow(){\n  if (m_onlyMultiRow)   return;\n  cardLayout.first(cardPanel);\n  m_singleRow=true;\n  dynamicDisplay(0);\n}"}
{"ids": "81368", "raw_code": "private boolean isStringContinuation(int offset){\n  int nextNonWSCharPosition=fScanner.findNonWhitespaceBackwardInAnyPartition(offset - 1,JavaHeuristicScanner.UNBOUND);\n  try {\n    if (nextNonWSCharPosition != JavaHeuristicScanner.NOT_FOUND && fDocument.getChar(nextNonWSCharPosition) == '\"')     return true;\n else     return false;\n  }\n catch (  BadLocationException e) {\n    Log.error(JavaIndenter.class,e);\n    return false;\n  }\n}"}
{"ids": "51223", "raw_code": "final void push(final Object object){\n  stack.add(object);\n}"}
{"ids": "14178", "raw_code": "public void makeImmutable(){\n  mutable=false;\n}"}
{"ids": "50154", "raw_code": "public static <K,V>V atomicGetOrCreate(ConcurrentMap<K,V> map,K key,Callable<V> ctor){\n  V value=map.get(key);\n  if (value == null) {\n    try {\n      value=ctor.call();\n    }\n catch (    Exception e) {\n      throw new RuntimeException(\"Element constructor should now throw an exception\",e);\n    }\n    V existing=map.putIfAbsent(key,value);\n    if (existing != null) {\n      return existing;\n    }\n  }\n  return value;\n}"}
{"ids": "28329", "raw_code": "private void createMetricChartPanel(int metric,DatasetGenerator datasetGenerator,List<GCStatsChartPanel> list){\n  ChangingCategoryDatasetWithTTG dataset=datasetGenerator.newCategoryDatasetWithTTG(metric,false);\n  GCStatsChartPanel panel=new MetricChartPanel(CHART_PREFIX + DatasetGenerator.getMetricName(metric),DatasetGenerator.getUnitName(metric),dataset,locker);\n  list.add(panel);\n}"}
{"ids": "34314", "raw_code": "public DefaultClientWebRequestBuilder cookie(String name,String value){\n  return cookie(new HttpCookie(name,value));\n}"}
{"ids": "80348", "raw_code": "private void addNewTilesets(Map map) throws IOException {\n  for (  TileSet set : map.getTileSets()) {\n    setByName.put(set.getTilebmpFile(),set);\n  }\n  for (  String name : mapping.getNewSets()) {\n    if (name.equals(\"\")) {\n      continue;\n    }\n    if (!setByName.containsKey(name)) {\n      TileSet set=new TileSet();\n      set.setName(constructTilesetName(name));\n      BasicTileCutter cutter=new BasicTileCutter(32,32,0,0);\n      set.importTileBitmap(name,cutter);\n      setByName.put(name,set);\n      map.addTileset(set);\n    }\n  }\n}"}
{"ids": "75835", "raw_code": "public static List<CssMetaData<? extends Styleable,?>> createCssMetaDataList(List<CssMetaData<? extends Styleable,?>> baseList,CssMetaData<? extends Styleable,?>... metaData){\n  List<CssMetaData<? extends Styleable,?>> styleables=new ArrayList<>(baseList);\n  styleables.addAll(Arrays.asList(metaData));\n  return Collections.unmodifiableList(styleables);\n}"}
{"ids": "15846", "raw_code": "public void addExtension(ASN1ObjectIdentifier oid,boolean critical,byte[] value){\n  if (extensions.containsKey(oid)) {\n    throw new IllegalArgumentException(\"extension \" + oid + \" already added\");\n  }\n  extOrdering.addElement(oid);\n  extensions.put(oid,new Extension(oid,critical,new DEROctetString(value)));\n}"}
{"ids": "1305", "raw_code": "public void updateClientCookies(Boolean clientCookies) throws SecurityException {\n  checkWriteAccess();\n  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);\n  if (!hasAccess)   throw new SecurityException(\"no access to update scope setting\");\n  Element scope=_getRootElement(\"scope\");\n  scope.setAttribute(\"setclientcookies\",Caster.toString(clientCookies,\"\"));\n}"}
{"ids": "29475", "raw_code": "public double[] subseriesByCopy(double[] series,int start,int end) throws IndexOutOfBoundsException {\n  if ((start > end) || (start < 0) || (end > series.length)) {\n    throw new IndexOutOfBoundsException(\"Unable to extract subseries, series length: \" + series.length + \", start: \"+ start+ \", end: \"+ String.valueOf(end - start));\n  }\n  return Arrays.copyOfRange(series,start,end);\n}"}
{"ids": "71971", "raw_code": "public static String createTempFile(final String... lines) throws Exception {\n  final File f=File.createTempFile(\"LDIFBasedTestCase\",\".txt\");\n  f.deleteOnExit();\n  try (final FileWriter w=new FileWriter(f)){\n    for (    final String s : lines) {\n      w.write(s + System.getProperty(\"line.separator\"));\n    }\n  }\n   return f.getAbsolutePath();\n}"}
{"ids": "60519", "raw_code": "public static void readSkel(BufferedReader reader) throws IOException {\n  Vector lines=new Vector();\n  StringBuffer section=new StringBuffer();\n  String ln;\n  while ((ln=reader.readLine()) != null) {\n    if (ln.startsWith(\"---\")) {\n      lines.addElement(section.toString());\n      section.setLength(0);\n    }\n else {\n      section.append(ln);\n      section.append(NL);\n    }\n  }\n  if (section.length() > 0)   lines.addElement(section.toString());\n  if (lines.size() != size) {\n    Out.error(ErrorMessages.WRONG_SKELETON);\n    throw new GeneratorException();\n  }\n  line=new String[size];\n  for (int i=0; i < size; i++)   line[i]=(String)lines.elementAt(i);\n}"}
{"ids": "79043", "raw_code": "@Override public long readDouble(String filePath,long offset){\n  FileChannel fileChannel=updateCache(filePath);\n  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.LONG_SIZE_IN_BYTE,offset);\n  return byteBffer.getLong();\n}"}
{"ids": "53815", "raw_code": "public LuaCompiler(CompilerSettings settings){\n  this.settings=Objects.requireNonNull(settings);\n}"}
{"ids": "33694", "raw_code": "public static void showAddressOnMap(Context mContext,String address){\n  address=address.replace(' ','+');\n  Intent geoIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(\"geo:0,0?q=\" + address));\n  mContext.startActivity(geoIntent);\n}"}
{"ids": "30319", "raw_code": "private void findBouncedInstrument(){\n  for (  final ReceiptInstrumentInfo instrumentInfo : instrumentDetails)   if (instrumentInfo.isBounced())   bouncedInstruments.add(instrumentInfo);\n}"}
{"ids": "30649", "raw_code": "public static Set<String> convertArrayToSet(String[] array){\n  Set<String> resultSet=new HashSet<String>(array.length);\n  Collections.addAll(resultSet,array);\n  return resultSet;\n}"}
{"ids": "25994", "raw_code": "public ParseFile(byte[] data){\n  this(null,data,null);\n}"}
{"ids": "56796", "raw_code": "private StoragePolicyEntity createStoragePolicyEntity(NamespaceEntity namespaceEntity,String storagePolicyName,StorageEntity storageEntity,StorageEntity destinationStorageEntity,StoragePolicyRuleTypeEntity storagePolicyRuleTypeEntity,Integer storagePolicyRuleValue,BusinessObjectDefinitionEntity businessObjectDefinitionEntity,String businessObjectFormatUsage,FileTypeEntity fileTypeEntity,StoragePolicyStatusEntity storagePolicyStatusEntity,Integer storagePolicyVersion,Boolean storagePolicyLatestVersion){\n  StoragePolicyEntity storagePolicyEntity=new StoragePolicyEntity();\n  storagePolicyEntity.setNamespace(namespaceEntity);\n  storagePolicyEntity.setName(storagePolicyName);\n  storagePolicyEntity.setStorage(storageEntity);\n  storagePolicyEntity.setDestinationStorage(destinationStorageEntity);\n  storagePolicyEntity.setStoragePolicyRuleType(storagePolicyRuleTypeEntity);\n  storagePolicyEntity.setStoragePolicyRuleValue(storagePolicyRuleValue);\n  storagePolicyEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);\n  if (StringUtils.isNotBlank(businessObjectFormatUsage)) {\n    storagePolicyEntity.setUsage(businessObjectFormatUsage);\n  }\n  storagePolicyEntity.setFileType(fileTypeEntity);\n  storagePolicyEntity.setStatus(storagePolicyStatusEntity);\n  storagePolicyEntity.setVersion(storagePolicyVersion);\n  storagePolicyEntity.setLatestVersion(storagePolicyLatestVersion);\n  return storagePolicyDao.saveAndRefresh(storagePolicyEntity);\n}"}
{"ids": "63626", "raw_code": "public void drawStdDevLine(Graphics2D g2d,Long stdDevVal,long yMaxMark,Color color){\n  float stdDevPerc=stdDevVal / (float)yMaxMark;\n  g2d.setColor(color);\n  int yPosOfLine=this.graphBottom - Math.round(this.graphHeight * stdDevPerc);\n  g2d.drawLine(this.graphLeft,yPosOfLine,this.graphRight,yPosOfLine);\n}"}
{"ids": "52169", "raw_code": "public SampleVcpc(IndependenceTest independenceTest){\n  if (independenceTest == null) {\n    throw new NullPointerException();\n  }\n  if (!(independenceTest instanceof IndTestFisherZ)) {\n    throw new IllegalArgumentException(\"Need Fisher Z test to proceed with algorithm\");\n  }\n  this.independenceTest=independenceTest;\n  this.dataSet=(DataSet)independenceTest.getData();\n  this.variables=dataSet.getVariables();\n  this.covMatrix=new CovarianceMatrix(dataSet);\n  List<Node> nodes=covMatrix.getVariables();\n  this.indexMap=indexMap(variables);\n  this.nameMap=mapNames(variables);\n  this.nodesToVariables=new HashMap<>();\n  this.variablesToNodes=new HashMap<>();\n}"}
{"ids": "32491", "raw_code": "private int nextAvailableIdx(Collection<Integer> startedGrids,int maxTopSize,Random rnd){\n  while (true) {\n    int idx=rnd.nextInt(maxTopSize);\n    if (!startedGrids.contains(idx))     return idx;\n  }\n}"}
{"ids": "80039", "raw_code": "public boolean hasColor(){\n  return typeString.contains(COLOR);\n}"}
{"ids": "4983", "raw_code": "public ClearanceMatrix(int p_class_count,BrdLayerStructure p_layer_structure,String[] p_name_arr){\n  class_count=Math.max(p_class_count,1);\n  layer_structure=p_layer_structure;\n  clearance_rows=new ClearanceMatrixRow[class_count];\n  for (int index=0; index < class_count; ++index) {\n    clearance_rows[index]=new ClearanceMatrixRow(this,p_name_arr[index]);\n  }\n  max_value_on_layer=new int[layer_structure.size()];\n}"}
{"ids": "43506", "raw_code": "public static char[] concat(char[] base,char[] other,int appendCount){\n  final int length=base.length;\n  char[] newArray=copyFrom(base,base.length + appendCount);\n  System.arraycopy(other,0,newArray,length,appendCount);\n  return newArray;\n}"}
{"ids": "72439", "raw_code": "public ArrayRealVector(ArrayRealVector v1,ArrayRealVector v2){\n  data=new double[v1.data.length + v2.data.length];\n  System.arraycopy(v1.data,0,data,0,v1.data.length);\n  System.arraycopy(v2.data,0,data,v1.data.length,v2.data.length);\n}"}
{"ids": "33947", "raw_code": "void addClassList(String classListFilename){\n  if (classListFilename.length() > 0) {\n    setOption(\"classlist\",classListFilename);\n    loadClassNames(classListFilename);\n  }\n else {\n    throw new IllegalArgumentException(\"class list name may not be empty string\");\n  }\n}"}
{"ids": "31300", "raw_code": "private Start build(Start event){\n  NamedNodeMap list=event.getAttributes();\n  int length=list.getLength();\n  for (int i=0; i < length; i++) {\n    Node node=list.item(i);\n    Attribute value=attribute(node);\n    if (!value.isReserved()) {\n      event.add(value);\n    }\n  }\n  return event;\n}"}
{"ids": "10528", "raw_code": "public BytesToNameCanonicalizer makeChild(boolean canonicalize,boolean intern){\n  return new BytesToNameCanonicalizer(this,intern,_hashSeed,_tableInfo.get());\n}"}
{"ids": "37568", "raw_code": "public Instances retrieveInstances() throws Exception {\n  return retrieveInstances(m_Query);\n}"}
{"ids": "48656", "raw_code": "void extract(InputStream in,String files[]) throws IOException {\n  ZipInputStream zis=new ZipInputStream(in);\n  ZipEntry e;\n  Set<ZipEntry> dirs=newDirSet();\n  while ((e=zis.getNextEntry()) != null) {\n    if (files == null) {\n      dirs.add(extractFile(zis,e));\n    }\n else {\n      String name=e.getName();\n      for (      String file : files) {\n        if (name.startsWith(file)) {\n          dirs.add(extractFile(zis,e));\n          break;\n        }\n      }\n    }\n  }\n  updateLastModifiedTime(dirs);\n}"}
{"ids": "46399", "raw_code": "private static void drawChunk(Image image,Graphics g,boolean stretch,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,boolean xDirection){\n  if (dx2 - dx1 <= 0 || dy2 - dy1 <= 0 || sx2 - sx1 <= 0 || sy2 - sy1 <= 0) {\n    return;\n  }\n  if (stretch) {\n    g.drawImage(image,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,null);\n  }\n else {\n    int xSize=sx2 - sx1;\n    int ySize=sy2 - sy1;\n    int deltaX;\n    int deltaY;\n    if (xDirection) {\n      deltaX=xSize;\n      deltaY=0;\n    }\n else {\n      deltaX=0;\n      deltaY=ySize;\n    }\n    while (dx1 < dx2 && dy1 < dy2) {\n      int newDX2=Math.min(dx2,dx1 + xSize);\n      int newDY2=Math.min(dy2,dy1 + ySize);\n      g.drawImage(image,dx1,dy1,newDX2,newDY2,sx1,sy1,sx1 + newDX2 - dx1,sy1 + newDY2 - dy1,null);\n      dx1+=deltaX;\n      dy1+=deltaY;\n    }\n  }\n}"}
{"ids": "15866", "raw_code": "private void initSign(){\n  messDigestTrees.reset();\n  GMSSPrivateKeyParameters gmssPrivateKey=(GMSSPrivateKeyParameters)key;\n  if (gmssPrivateKey.isUsed()) {\n    throw new IllegalStateException(\"Private key already used\");\n  }\n  if (gmssPrivateKey.getIndex(0) >= gmssPrivateKey.getNumLeafs(0)) {\n    throw new IllegalStateException(\"No more signatures can be generated\");\n  }\n  this.gmssPS=gmssPrivateKey.getParameters();\n  this.numLayer=gmssPS.getNumOfLayers();\n  byte[] seed=gmssPrivateKey.getCurrentSeeds()[numLayer - 1];\n  byte[] OTSSeed=new byte[mdLength];\n  byte[] dummy=new byte[mdLength];\n  System.arraycopy(seed,0,dummy,0,mdLength);\n  OTSSeed=gmssRandom.nextSeed(dummy);\n  this.ots=new WinternitzOTSignature(OTSSeed,digestProvider.get(),gmssPS.getWinternitzParameter()[numLayer - 1]);\n  byte[][][] helpCurrentAuthPaths=gmssPrivateKey.getCurrentAuthPaths();\n  currentAuthPaths=new byte[numLayer][][];\n  for (int j=0; j < numLayer; j++) {\n    currentAuthPaths[j]=new byte[helpCurrentAuthPaths[j].length][mdLength];\n    for (int i=0; i < helpCurrentAuthPaths[j].length; i++) {\n      System.arraycopy(helpCurrentAuthPaths[j][i],0,currentAuthPaths[j][i],0,mdLength);\n    }\n  }\n  index=new int[numLayer];\n  System.arraycopy(gmssPrivateKey.getIndex(),0,index,0,numLayer);\n  byte[] helpSubtreeRootSig;\n  subtreeRootSig=new byte[numLayer - 1][];\n  for (int i=0; i < numLayer - 1; i++) {\n    helpSubtreeRootSig=gmssPrivateKey.getSubtreeRootSig(i);\n    subtreeRootSig[i]=new byte[helpSubtreeRootSig.length];\n    System.arraycopy(helpSubtreeRootSig,0,subtreeRootSig[i],0,helpSubtreeRootSig.length);\n  }\n  gmssPrivateKey.markUsed();\n}"}
{"ids": "14427", "raw_code": "public void write(byte[] b,int offset,int length) throws IOException {\n  out.write(b,offset,length);\n}"}
{"ids": "12561", "raw_code": "public SampleSet(DataInputStream is) throws IOException {\n  int numSamples;\n  sampleInfo=new SampleInfo(is);\n  numSamples=is.readInt();\n  this.samples=new Sample[numSamples];\n  for (int i=0; i < numSamples; i++) {\n    samples[i]=Sample.loadBinary(is);\n  }\n}"}
{"ids": "49542", "raw_code": "public void close(){\n  running=false;\nsynchronized (histData) {\n    histData.notify();\n  }\n}"}
{"ids": "78558", "raw_code": "public SQLiteDatabaseConfiguration(String path,@SQLiteDatabase.OpenFlags int openFlags){\n  if (path == null) {\n    throw new IllegalArgumentException(\"path must not be null.\");\n  }\n  this.path=path;\n  label=stripPathForLogs(path);\n  this.openFlags=openFlags;\n  maxSqlCacheSize=25;\n  locale=Locale.getDefault();\n}"}
{"ids": "42994", "raw_code": "private void printProperties(Properties properties) throws IOException {\n  StringWriter stringBuffer=new StringWriter();\n  BufferedReader reader=null;\n  properties.store(stringBuffer,null);\n  try {\n    reader=new BufferedReader(new StringReader(stringBuffer.toString()));\n    reader.readLine();\n    String line=null;\n    while ((line=reader.readLine()) != null) {\n      writer.print(\"//\");\n      writer.println(line);\n    }\n  }\n  finally {\n    if (reader != null) {\n      reader.close();\n    }\n  }\n}"}
{"ids": "69617", "raw_code": "public static <T>Range<T> valueOf(String s,Class<T> clazz){\n  char lbm=s.charAt(0);\n  if (lbm != '[' && lbm != '(')   throw new IllegalArgumentException(s);\n  char ubm=s.charAt(s.length() - 1);\n  if (ubm != ']' && ubm != ')')   throw new IllegalArgumentException(s);\n  BoundType lbt=lbm == '[' ? BoundType.CLOSED : BoundType.OPEN;\n  BoundType ubt=ubm == ']' ? BoundType.CLOSED : BoundType.OPEN;\n  s=s.substring(1,s.length() - 1);\n  String[] parts=s.split(\"\\\\.\\\\.\");\n  String lbs=parts[0];\n  String ubs=parts[1];\n  T lowerBound=lbs.equals(\"*\") ? null : boundValue(lbs,clazz);\n  T upperBound=ubs.equals(\"*\") ? null : boundValue(ubs,clazz);\n  return range(lowerBound,lbt,upperBound,ubt);\n}"}
{"ids": "39231", "raw_code": "public static DoubleVector dchisq(double x,DoubleVector ncp){\n  int n=ncp.size();\n  DoubleVector d=new DoubleVector(n);\n  double xh=Math.sqrt(x);\n  double mean;\n  for (int i=0; i < n; i++) {\n    mean=Math.sqrt(ncp.get(i));\n    if (ncp.get(i) == 0.0)     d.set(i,dchisq(x));\n else     d.set(i,(dnorm(xh - mean) + dnorm(-xh - mean)) / (2 * xh));\n  }\n  return d;\n}"}
{"ids": "74545", "raw_code": "@Override public void addPropertyChangeListener(PropertyChangeListener listener){\n  propertyChangeSupport.addPropertyChangeListener(listener);\n}"}
{"ids": "76655", "raw_code": "public void removeAllBaudRateQueryCallbacks(){\n  baudRateQueryCallbacks.clear();\n}"}
{"ids": "29526", "raw_code": "public void add(AbstractOption option){\n  add(options.size(),option);\n}"}
{"ids": "78420", "raw_code": "private void loadVerticesAndRelatives(){\n  List<CnATreeElement> elementList=new LinkedList<CnATreeElement>();\n  for (  IGraphElementLoader loader : getLoaderList()) {\n    loader.setCnaTreeElementDao(getCnaTreeElementDao());\n    elementList.addAll(loader.loadElements());\n  }\n  for (  CnATreeElement element : elementList) {\n    graph.addVertex(element);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Vertex added: \" + element.getTitle());\n    }\n    uuidMap.put(element.getUuid(),element);\n  }\n  for (  CnATreeElement parent : elementList) {\n    Set<CnATreeElement> children=parent.getChildren();\n    for (    CnATreeElement child : children) {\n      createParentChildEdge(parent,child);\n    }\n  }\n}"}
{"ids": "76440", "raw_code": "private boolean hasNonSpecialAttribute(Collection<String> keys){\n  for (  String attr : keys) {\n    if (!attr.startsWith(\"_\")) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "635", "raw_code": "public static final void shuffle(double[] a,int start,int len,Random r){\n  for (int i=start + len; i > 1; --i) {\n    double t=a[i];\n    int j=r.nextInt(i);\n    a[i]=a[j];\n    a[j]=t;\n  }\n}"}
{"ids": "13681", "raw_code": "public boolean isParityCorrect(byte[][] shards,int firstByte,int byteCount,byte[] tempBuffer){\n  checkBuffersAndSizes(shards,firstByte,byteCount);\n  if (tempBuffer.length < firstByte + byteCount) {\n    throw new IllegalArgumentException(\"tempBuffer is not big enough\");\n  }\n  byte[][] toCheck=new byte[parityShardCount][];\n  System.arraycopy(shards,dataShardCount,toCheck,0,parityShardCount);\n  return codingLoop.checkSomeShards(parityRows,shards,dataShardCount,toCheck,parityShardCount,firstByte,byteCount,tempBuffer);\n}"}
{"ids": "43888", "raw_code": "public static void writeStream(InputStream in,File file) throws IOException {\n  FileOutputStream out=new FileOutputStream(file);\n  try {\n    transfer(in,out);\n  }\n  finally {\n    try {\n      out.flush();\n    }\n  finally {\n      out.close();\n    }\n  }\n}"}
{"ids": "47729", "raw_code": "public void firePropertyChange(String propertyName,byte oldValue,byte newValue){\n  if (changeSupport == null || oldValue == newValue) {\n    return;\n  }\n  firePropertyChange(propertyName,Byte.valueOf(oldValue),Byte.valueOf(newValue));\n}"}
{"ids": "54801", "raw_code": "private int adjustOffsetForUnitTests(int offset){\n  if (System.getProperty(\"fdbunit\") == null)   return offset;\n else   return 0;\n}"}
{"ids": "11193", "raw_code": "public boolean supportsSQL(){\n  return false;\n}"}
{"ids": "21900", "raw_code": "private static Boolean isValidIPV4(final String ipAddress){\n  boolean status=false;\n  if (StringUtils.isNotEmpty(ipAddress)) {\n    status=InetAddressUtils.isIPv4Address(ipAddress);\n  }\n  return status;\n}"}
{"ids": "15957", "raw_code": "private int decryptBlockWithIV(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {\n  if ((inOff + blockSize) > in.length) {\n    throw new DataLengthException(\"input buffer too short\");\n  }\n  if ((outOff + blockSize) > out.length) {\n    throw new DataLengthException(\"output buffer too short\");\n  }\n  if (count == 0) {\n    for (int n=0; n < blockSize; n++) {\n      FR[n]=in[inOff + n];\n    }\n    cipher.processBlock(FR,0,FRE,0);\n    count+=blockSize;\n    return 0;\n  }\n else   if (count == blockSize) {\n    System.arraycopy(in,inOff,tmp,0,blockSize);\n    System.arraycopy(FR,2,FR,0,blockSize - 2);\n    FR[blockSize - 2]=tmp[0];\n    FR[blockSize - 1]=tmp[1];\n    cipher.processBlock(FR,0,FRE,0);\n    for (int n=0; n < blockSize - 2; n++) {\n      out[outOff + n]=encryptByte(tmp[n + 2],n);\n    }\n    System.arraycopy(tmp,2,FR,0,blockSize - 2);\n    count+=2;\n    return blockSize - 2;\n  }\n else   if (count >= blockSize + 2) {\n    System.arraycopy(in,inOff,tmp,0,blockSize);\n    out[outOff + 0]=encryptByte(tmp[0],blockSize - 2);\n    out[outOff + 1]=encryptByte(tmp[1],blockSize - 1);\n    System.arraycopy(tmp,0,FR,blockSize - 2,2);\n    cipher.processBlock(FR,0,FRE,0);\n    for (int n=0; n < blockSize - 2; n++) {\n      out[outOff + n + 2]=encryptByte(tmp[n + 2],n);\n    }\n    System.arraycopy(tmp,2,FR,0,blockSize - 2);\n  }\n  return blockSize;\n}"}
{"ids": "66873", "raw_code": "public static PTABridge v(){\n  return v;\n}"}
{"ids": "68167", "raw_code": "public void registerCacheUpdatePeriodChangeListener(final PropertyChangeListener listener){\n  cacheUpdatePeriodListeners.add(listener);\n}"}
{"ids": "17241", "raw_code": "public String encode(){\n  StringBuffer sb=new StringBuffer();\n  encode(sb);\n  return sb.toString();\n}"}
{"ids": "12089", "raw_code": "public static Document readDocument(String fileName) throws SAXException, IOException {\n  DocumentBuilder docBuilder;\n  Document result=null;\n  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();\n  docBuilderFactory.setIgnoringElementContentWhitespace(true);\n  try {\n    docBuilder=docBuilderFactory.newDocumentBuilder();\n  }\n catch (  ParserConfigurationException e) {\n    throw new Error(e);\n  }\n  File sourceFile=new File(fileName);\n  result=docBuilder.parse(sourceFile);\n  return result;\n}"}
{"ids": "12918", "raw_code": "@Override public double[] analyse(double[] aFrame){\n  if (aFrame.length != frameLength)   throw new IllegalArgumentException(\"Expected frame of length \" + frameLength + \", got \"+ aFrame.length);\n  double[] real=new double[fftSize];\n  double[] imag=new double[fftSize];\n  System.arraycopy(aFrame,0,real,0,aFrame.length);\n  FFT.transform(real,imag,false);\n  MathUtils.toPolarCoordinates(real,imag);\n  real=MathUtils.log(real);\n  Arrays.fill(imag,0.);\n  double b=5000;\n  int bIndex=(int)(b / frequencyResolution);\n  double[] invReal;\n  double[] invImag;\n  if (invFftSize == fftSize) {\n    invReal=real;\n    invImag=imag;\n  }\n else {\n    invReal=new double[invFftSize];\n    System.arraycopy(real,0,invReal,0,bIndex + 1);\n    invImag=new double[invFftSize];\n  }\n  for (int i=bIndex + 1; i < invFftSize / 2; i++) {\n    invReal[i]=invReal[bIndex];\n  }\n  for (int i=0; i < invFftSize / 2; i++) {\n    invReal[invFftSize - i - 1]=invReal[i];\n  }\n  FFT.transform(invReal,invImag,true);\n  return invReal;\n}"}
{"ids": "56484", "raw_code": "public SearchSourceBuilder scriptField(String name,Script script){\n  if (scriptFields == null) {\n    scriptFields=new ArrayList<>();\n  }\n  scriptFields.add(new ScriptField(name,script));\n  return this;\n}"}
{"ids": "59815", "raw_code": "public void fixedAspectResizeInner(RectF newInner){\n  Matrix m=getRotMatrix();\n  Matrix m0=getInverseRotMatrix();\n  float aspectW=inner.width();\n  float aspectH=inner.height();\n  float aspRatio=aspectW / aspectH;\n  float[] corners=CropMath.getCornersFromRect(outer);\n  m.mapPoints(corners);\n  float[] oldInnerCorners=CropMath.getCornersFromRect(inner);\n  float[] newInnerCorners=CropMath.getCornersFromRect(newInner);\n  int fixed=-1;\n  if (inner.top == newInner.top) {\n    if (inner.left == newInner.left)     fixed=0;\n else     if (inner.right == newInner.right)     fixed=2;\n  }\n else   if (inner.bottom == newInner.bottom) {\n    if (inner.right == newInner.right)     fixed=4;\n else     if (inner.left == newInner.left)     fixed=6;\n  }\n  if (fixed == -1)   return;\n  float widthSoFar=newInner.width();\n  int moved=-1;\n  for (int i=0; i < newInnerCorners.length; i+=2) {\n    float[] c={newInnerCorners[i],newInnerCorners[i + 1]};\n    float[] c0=Arrays.copyOf(c,2);\n    m0.mapPoints(c0);\n    if (!CropMath.inclusiveContains(outer,c0[0],c0[1])) {\n      moved=i;\n      if (moved == fixed)       continue;\n      float[] l2=CropMath.closestSide(c,corners);\n      float[] l1={newInnerCorners[i],newInnerCorners[i + 1],oldInnerCorners[i],oldInnerCorners[i + 1]};\n      float[] p=GeometryMathUtils.lineIntersect(l1,l2);\n      if (p == null) {\n        p=new float[2];\n        p[0]=oldInnerCorners[i];\n        p[1]=oldInnerCorners[i + 1];\n      }\n      float fixed_x=oldInnerCorners[fixed];\n      float fixed_y=oldInnerCorners[fixed + 1];\n      float newWidth=Math.abs(fixed_x - p[0]);\n      float newHeight=Math.abs(fixed_y - p[1]);\n      newWidth=Math.max(newWidth,aspRatio * newHeight);\n      if (newWidth < widthSoFar)       widthSoFar=newWidth;\n    }\n  }\n  float heightSoFar=widthSoFar / aspRatio;\n  RectF ret=new RectF(inner);\n  if (fixed == 0) {\n    ret.right=ret.left + widthSoFar;\n    ret.bottom=ret.top + heightSoFar;\n  }\n else   if (fixed == 2) {\n    ret.left=ret.right - widthSoFar;\n    ret.bottom=ret.top + heightSoFar;\n  }\n else   if (fixed == 4) {\n    ret.left=ret.right - widthSoFar;\n    ret.top=ret.bottom - heightSoFar;\n  }\n else   if (fixed == 6) {\n    ret.right=ret.left + widthSoFar;\n    ret.top=ret.bottom - heightSoFar;\n  }\n  float[] retCorners=CropMath.getCornersFromRect(ret);\n  m0.mapPoints(retCorners);\n  innerRotated=retCorners;\n  reconstrain();\n}"}
{"ids": "8265", "raw_code": "public static <T>T withObjectStreams(Socket socket,@ClosureParams(value=SimpleType.class,options={\"java.io.ObjectInputStream\",\"java.io.ObjectOutputStream\"}) Closure<T> closure) throws IOException {\n  InputStream input=socket.getInputStream();\n  OutputStream output=socket.getOutputStream();\n  ObjectOutputStream oos=new ObjectOutputStream(output);\n  ObjectInputStream ois=new ObjectInputStream(input);\n  try {\n    T result=closure.call(new Object[]{ois,oos});\n    InputStream temp1=ois;\n    ois=null;\n    temp1.close();\n    temp1=input;\n    input=null;\n    temp1.close();\n    OutputStream temp2=oos;\n    oos=null;\n    temp2.close();\n    temp2=output;\n    output=null;\n    temp2.close();\n    return result;\n  }\n  finally {\n    closeWithWarning(ois);\n    closeWithWarning(input);\n    closeWithWarning(oos);\n    closeWithWarning(output);\n  }\n}"}
{"ids": "75013", "raw_code": "public JFileDataStoreChooser(Shell parent,int style,final String[] extensions){\n  this(parent,style,associations(Arrays.asList(extensions)));\n}"}
{"ids": "82162", "raw_code": "private void adjustAlignment(int align,int curAlign){\n  if ((!FIXED_WIDTH) && (align != curAlign)) {\n    if (curLine.getComponentCount() == 0) {\n      curLine.setLayout(new FlowLayout(curAlign));\n    }\n  }\n}"}
{"ids": "3109", "raw_code": "public void removeListener(TrackingListener listener){\n  listeners.remove(listener);\n}"}
{"ids": "34915", "raw_code": "void createImpl(boolean stream) throws SocketException {\n  if (impl == null)   setImpl();\n  try {\n    impl.create(stream);\n    created=true;\n  }\n catch (  IOException e) {\n    throw new SocketException(e.getMessage());\n  }\n}"}
{"ids": "25639", "raw_code": "public synchronized byte[] toByteArray(){\n  int remaining=count;\n  if (remaining == 0) {\n    return EMPTY_BYTE_ARRAY;\n  }\n  byte newbuf[]=new byte[remaining];\n  int pos=0;\n  for (  byte[] buf : buffers) {\n    int c=Math.min(buf.length,remaining);\n    System.arraycopy(buf,0,newbuf,pos,c);\n    pos+=c;\n    remaining-=c;\n    if (remaining == 0) {\n      break;\n    }\n  }\n  return newbuf;\n}"}
{"ids": "42873", "raw_code": "public boolean shExpMatch(String str,String shexp){\n  StringTokenizer tokenizer=new StringTokenizer(shexp,\"*\");\n  int startPos=0;\n  while (tokenizer.hasMoreTokens()) {\n    String token=tokenizer.nextToken();\n    int temp=str.indexOf(token,startPos);\n    if (startPos == 0 && !shexp.startsWith(\"*\") && temp != 0) {\n      return false;\n    }\n    if (!tokenizer.hasMoreTokens() && !shexp.endsWith(\"*\") && !str.endsWith(token)) {\n      return false;\n    }\n    if (temp == -1) {\n      return false;\n    }\n else {\n      startPos=temp + token.length();\n    }\n  }\n  return true;\n}"}
{"ids": "24617", "raw_code": "public char peek(){\n  return isEmpty() ? 0 : queue.charAt(pos);\n}"}
{"ids": "65490", "raw_code": "private String[] parentKey(String name,int idx){\n  String[] parts=name.split(\"\\\\.\");\n  if (idx > parts.length)   return null;\n  String parent=\"\";\n  String key=null;\n  if (idx < parts.length)   key=parts[idx];\n  for (int i=0; i < idx; i++) {\n    parent=parent.length() > 0 ? parent + \".\" + parts[i] : parts[i];\n  }\n  return new String[]{parent,key};\n}"}
{"ids": "12668", "raw_code": "public DiphoneUnitDatabase(URL url,boolean isBinary) throws IOException {\n  if (!useIndexing || useCache) {\n    diphoneMap=new LinkedHashMap();\n  }\n  InputStream is=Utilities.getInputStream(url);\n  indexName=getIndexName(url.toString());\n  if (isBinary) {\n    loadBinary(is);\n  }\n else {\n    loadText(is);\n  }\n  is.close();\n  sampleInfo=new SampleInfo(sampleRate,numChannels,residualFold,lpcMin,lpcRange,0.0f);\n}"}
{"ids": "82913", "raw_code": "public static List<NotificationDto> transformToDto(List<Notification> notifications){\n  if (notifications == null) {\n    throw new WebApplicationException(\"Null entity object cannot be converted to Dto object.\",Status.INTERNAL_SERVER_ERROR);\n  }\n  List<NotificationDto> result=new ArrayList<NotificationDto>();\n  for (  Notification notification : notifications) {\n    result.add(transformToDto(notification));\n  }\n  return result;\n}"}
{"ids": "51161", "raw_code": "public void writeTo(final PacketOutputStream os){\n  os.write(ParameterWriter.QUOTE);\n  os.write(dateToByte());\n  ParameterWriter.formatMicroseconds(os,ts.getNanos() / 1000,fractionalSeconds);\n  os.write(ParameterWriter.QUOTE);\n}"}
{"ids": "30895", "raw_code": "public long skip(long n) throws IOException, LogException {\n  if (length < n)   badRead((int)n);\n  n=in.skip(n);\n  length-=(int)n;\n  return n;\n}"}
{"ids": "22523", "raw_code": "public DriverTask discoverStorageProvider(StorageProvider storageProvider,List<StorageSystem> storageSystems){\n  DellSCDriverTask task=new DellSCDriverTask(\"discover\");\n  try {\n    LOG.info(\"Getting information for storage provider [{}:{}] as user {}\",storageProvider.getProviderHost(),storageProvider.getPortNumber(),storageProvider.getUsername());\n    StorageCenterAPI api=connectionManager.getConnection(storageProvider.getProviderHost(),storageProvider.getPortNumber(),storageProvider.getUsername(),storageProvider.getPassword(),true);\n    LOG.info(\"Connected to DSM {} as user {}\",storageProvider.getProviderHost(),storageProvider.getUsername());\n    storageProvider.setAccessStatus(AccessStatus.READ_WRITE);\n    storageProvider.setManufacturer(\"Dell\");\n    storageProvider.setProviderVersion(driverVersion);\n    storageProvider.setIsSupportedVersion(true);\n    EmDataCollector em=api.getDSMInfo();\n    if (em != null) {\n      LOG.info(\"Connected to {} DSM version {}, Java version {}\",em.type,em.version,em.javaVersion);\n      storageProvider.setProviderVersion(em.version);\n    }\n    StorageCenter[] scs=api.getStorageCenterInfo();\n    for (    StorageCenter sc : scs) {\n      StorageSystem storageSystem=util.getStorageSystemFromStorageCenter(api,sc,null);\n      storageSystem.setSystemType(driverName);\n      storageSystems.add(storageSystem);\n    }\n    task.setStatus(DriverTask.TaskStatus.READY);\n  }\n catch (  Exception e) {\n    String msg=String.format(\"Exception encountered getting storage provider information: %s\",e);\n    LOG.error(msg);\n    task.setFailed(msg);\n  }\n  return task;\n}"}
{"ids": "36628", "raw_code": "public void zoomIn(){\n  zoomIn(null);\n}"}
{"ids": "81842", "raw_code": "public void removeResponseCodeListener(ActionListener a){\n  responseCodeListeners.removeElement(a);\n}"}
{"ids": "6607", "raw_code": "public InputFieldDialog(final String CAPTION_KEY,final String LABEL_KEY){\n  String caption=I18n.tr(CAPTION_KEY);\n  Frame frame=GUIMediator.getAppFrame();\n  _dialog=new JDialog(frame,caption,true);\n  _dialog.setSize(340,180);\n  LabeledComponent component=new LabeledComponent(LABEL_KEY,TEXT_FIELD,LabeledComponent.LEFT_GLUE);\n  String[] buttonLabelKeys={I18n.tr(\"OK\"),I18n.tr(\"Cancel\")};\n  String[] buttonLabelTips={I18n.tr(\"Apply Operation\"),I18n.tr(\"Cancel Operation\")};\n  ActionListener[] buttonListeners={new OKListener(),new CancelListener()};\n  ButtonRow buttons=new ButtonRow(buttonLabelKeys,buttonLabelTips,buttonListeners,ButtonRow.X_AXIS,ButtonRow.LEFT_GLUE);\n  Container contentPane=_dialog.getContentPane();\n  BoxPanel componentPanel=new BoxPanel(BoxPanel.Y_AXIS);\n  componentPanel.add(Box.createVerticalGlue());\n  componentPanel.add(component.getComponent());\n  componentPanel.add(Box.createVerticalGlue());\n  MAIN_PANEL.add(componentPanel);\n  MAIN_PANEL.add(Box.createVerticalGlue());\n  MAIN_PANEL.add(buttons);\n  contentPane.add(MAIN_PANEL);\n}"}
{"ids": "83027", "raw_code": "public EntityLoadInfo create(Entity entity){\n  return create(entity,null);\n}"}
{"ids": "11456", "raw_code": "public Float(Point2D pt2D){\n  setLatLon(pt2D.getY(),pt2D.getX(),false);\n}"}
{"ids": "81466", "raw_code": "public final static boolean isPotentialZipArchive(String name){\n  int lastDot=name.lastIndexOf('.');\n  if (lastDot == -1)   return false;\n  if (name.lastIndexOf(File.separatorChar) > lastDot)   return false;\n  int length=name.length();\n  int extensionLength=length - lastDot - 1;\n  if (extensionLength == EXTENSION_java.length()) {\n    for (int i=extensionLength - 1; i >= 0; i--) {\n      if (Character.toLowerCase(name.charAt(length - extensionLength + i)) != EXTENSION_java.charAt(i)) {\n        break;\n      }\n      if (i == 0) {\n        return false;\n      }\n    }\n  }\n  if (extensionLength == EXTENSION_class.length()) {\n    for (int i=extensionLength - 1; i >= 0; i--) {\n      if (Character.toLowerCase(name.charAt(length - extensionLength + i)) != EXTENSION_class.charAt(i)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  return true;\n}"}
{"ids": "23197", "raw_code": "public void open() throws IOException {\n  connection=new DatagramSocket();\n  connection.setSoTimeout(timeout);\n}"}
{"ids": "75980", "raw_code": "@Override protected int sizeOf(String key,BitmapDrawable value){\n  final int bitmapSize=getBitmapSize(value) / 1024;\n  return bitmapSize == 0 ? 1 : bitmapSize;\n}"}
{"ids": "47255", "raw_code": "default void forEachRemaining(IntConsumer action){\n  Objects.requireNonNull(action);\n  while (hasNext())   action.accept(nextInt());\n}"}
{"ids": "27205", "raw_code": "private boolean isCI(){\n  return Objects.equals(System.getenv(\"CI\"),\"true\");\n}"}
{"ids": "30016", "raw_code": "public DockNode(Node contents,String title){\n  this(contents,title,null);\n}"}
{"ids": "7974", "raw_code": "public void test2033092(){\n  RelativeDateFormat rdf=new RelativeDateFormat();\n  rdf.setShowZeroDays(false);\n  rdf.setShowZeroHours(false);\n  rdf.setMinuteSuffix(\":\");\n  rdf.setHourSuffix(\":\");\n  rdf.setSecondSuffix(\"\");\n  DecimalFormat hoursFormatter=new DecimalFormat();\n  hoursFormatter.setMaximumFractionDigits(0);\n  hoursFormatter.setMaximumIntegerDigits(2);\n  hoursFormatter.setMinimumIntegerDigits(2);\n  rdf.setHourFormatter(hoursFormatter);\n  DecimalFormat minsFormatter=new DecimalFormat();\n  minsFormatter.setMaximumFractionDigits(0);\n  minsFormatter.setMaximumIntegerDigits(2);\n  minsFormatter.setMinimumIntegerDigits(2);\n  rdf.setMinuteFormatter(minsFormatter);\n  DecimalFormat secondsFormatter=new DecimalFormat();\n  secondsFormatter.setMaximumFractionDigits(0);\n  secondsFormatter.setMaximumIntegerDigits(2);\n  secondsFormatter.setMinimumIntegerDigits(2);\n  rdf.setSecondFormatter(secondsFormatter);\n  String s=rdf.format(new Date(2 * 60L * 60L* 1000L + 122500L));\n  assertEquals(\"02:02:02\",s);\n}"}
{"ids": "6128", "raw_code": "public static int readSingleByte(InputStream in) throws IOException {\n  byte[] buffer=new byte[1];\n  int result=in.read(buffer,0,1);\n  return (result != -1) ? buffer[0] & 0xff : -1;\n}"}
{"ids": "131", "raw_code": "public static long parseId(Uri contentUri){\n  String last=contentUri.getLastPathSegment();\n  return last == null ? -1 : Long.parseLong(last);\n}"}
{"ids": "57295", "raw_code": "public void disableVM(String hostname,long durationMillis) throws IllegalStateException {\n  logger.info(\"Disable VM \" + hostname + \" for \"+ durationMillis+ \" millis\");\n  assignableVMs.disableUntil(hostname,System.currentTimeMillis() + durationMillis);\n}"}
{"ids": "6110", "raw_code": "protected final void endOfInput() throws IOException {\n  if (cacheRequest != null) {\n    cacheBody.close();\n  }\n  httpEngine.release(false);\n}"}
{"ids": "45788", "raw_code": "public int left(){\n  return data.length() - pos;\n}"}
{"ids": "35199", "raw_code": "public FeatureSet combine(final FeatureSet other){\n  final Set<Feature> enabled=new HashSet<>(this.enabled);\n  enabled.addAll(other.enabled);\n  final Set<Feature> disabled=new HashSet<>(this.disabled);\n  disabled.addAll(other.disabled);\n  return new FeatureSet(enabled,disabled);\n}"}
{"ids": "13603", "raw_code": "public void removeInterval(final BatchWriter writer,final TemporalInterval interval,final Statement statement) throws MutationsRejectedException {\n  final Text cf=new Text(StatementSerializer.writeContext(statement));\n  final Text cqBegin=new Text(KeyParts.CQ_BEGIN);\n  final Text cqEnd=new Text(KeyParts.CQ_END);\n  Text keyText=new Text(interval.getAsKeyBeginning());\n  KeyParts.appendUniqueness(statement,keyText);\n  Mutation m=new Mutation(keyText);\n  m.putDelete(cf,cqBegin);\n  writer.addMutation(m);\n  keyText=new Text(interval.getAsKeyEnd());\n  KeyParts.appendUniqueness(statement,keyText);\n  m=new Mutation(keyText);\n  m.putDelete(cf,cqEnd);\n  writer.addMutation(m);\n}"}
{"ids": "59530", "raw_code": "public static final String removeDataFolderPath(String fullPath){\n  File sdCard=Environment.getExternalStorageDirectory();\n  String dataFolderPath=sdCard.getAbsolutePath() + \"/\" + MainApp.getDataFolder()+ \"/\";\n  if (fullPath.indexOf(dataFolderPath) == 0) {\n    return fullPath.substring(dataFolderPath.length());\n  }\n  return fullPath;\n}"}
{"ids": "61401", "raw_code": "protected Character isWFXMLChar(String chardata){\n  Character refInvalidChar;\n  if (chardata == null || (chardata.length() == 0)) {\n    return null;\n  }\n  char[] dataarray=chardata.toCharArray();\n  int datalength=dataarray.length;\n  if (fIsXMLVersion11) {\n    int i=0;\n    while (i < datalength) {\n      if (XML11Char.isXML11Invalid(dataarray[i++])) {\n        char ch=dataarray[i - 1];\n        if (XMLChar.isHighSurrogate(ch) && i < datalength) {\n          char ch2=dataarray[i++];\n          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {\n            continue;\n          }\n        }\n        refInvalidChar=new Character(ch);\n        return refInvalidChar;\n      }\n    }\n  }\n else {\n    int i=0;\n    while (i < datalength) {\n      if (XMLChar.isInvalid(dataarray[i++])) {\n        char ch=dataarray[i - 1];\n        if (XMLChar.isHighSurrogate(ch) && i < datalength) {\n          char ch2=dataarray[i++];\n          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {\n            continue;\n          }\n        }\n        refInvalidChar=new Character(ch);\n        return refInvalidChar;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "56581", "raw_code": "default CompletableFuture<Optional<R>> matchAsync(final Executor executor,final T value){\n  return CompletableFuture.supplyAsync(null,executor);\n}"}
{"ids": "11805", "raw_code": "public static void main(String[] args) throws FormatException {\n  Debug.init();\n  if (args.length == 0) {\n    Debug.output(\"Usage: java com.bbn.openmap.layer.vpf.GenerateVPFProperties <path to vpf database directory> <path to vpf database directory> ...\");\n    System.exit(0);\n  }\n  for (int argsi=0; argsi < args.length; argsi++) {\n    rootpath=args[argsi];\n    LibrarySelectionTable lst=new LibrarySelectionTable(rootpath);\n    if (Debug.debugging(\"vpf\")) {\n      Debug.output(\"Path to database: \" + rootpath);\n      Debug.output(\"Database Name: \" + lst.getDatabaseName());\n    }\n    println(\"### Generated openmap.properties for\");\n    println(\"# VPF Data at: \" + rootpath);\n    println(\"# Description: \" + lst.getDatabaseDescription());\n    List<String> libraries=lst.getLibraryNames();\n    if (Debug.debugging(\"vpf\")) {\n      print(\"Database Libraries: \");\n      for (      String libraryName : libraries) {\n        print(libraryName,\" \");\n      }\n      println();\n      println();\n    }\n    for (    String libraryName : libraries) {\n      String prefix=lst.getDatabaseName() + \"_\" + libraryName;\n      println(\"# Library: \" + prefix);\n      printLibrary(prefix,lst.getCAT(libraryName));\n      println();\n    }\n  }\n}"}
{"ids": "67388", "raw_code": "private static String wildcardToRegex(String pattern){\n  return \"^\" + StringUtils.replaceEach(escapeRegexp(pattern),new String[]{\"\\\\*\",\"\\\\?\"},new String[]{\".*\",\".\"}) + \"$\";\n}"}
{"ids": "50035", "raw_code": "protected void clearCache(){\n  if (_cache != null) {\n    _cache.clear();\n    _cache=null;\n  }\n}"}
{"ids": "66559", "raw_code": "public String sqlAD_getCustomEntityTypes(String vendorName,String catalogName,String schemaName){\n  String tableName=\"AD_EntityType\";\n  ArrayList<String> columnNames=new ArrayList<String>();\n  columnNames.add(\"EntityType\");\n  ArrayList<String> aliasNames=new ArrayList<String>();\n  aliasNames.add(\"ENTITYTYPE\");\n  ArrayList<String> conditions=new ArrayList<String>();\n  conditions.add(\"EntityType NOT IN ('C', 'D')\");\n  ArrayList<String> sortColumns=new ArrayList<String>();\n  sortColumns.add(\"1\");\n  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);\n}"}
{"ids": "71786", "raw_code": "public void paintComponent(Graphics g){\n  int x=PADDING;\n  int y=PADDING;\n  g.drawImage(picture,x,y,scaleW,scaleH,null);\n  x+=scaleW + PADDING;\n  g.drawImage(picture,x,y,x + scaleW,y + scaleH,0,0,picture.getWidth(),picture.getHeight(),null);\n  x+=scaleW + PADDING;\n  Graphics2D g2d=(Graphics2D)g.create();\n  g2d.translate(x,y);\n  g2d.scale(SCALE_FACTOR,SCALE_FACTOR);\n  g2d.drawImage(picture,0,0,null);\n  g2d.dispose();\n  x+=scaleW + PADDING;\n  g2d=(Graphics2D)g.create();\n  AffineTransform at=new AffineTransform();\n  at.translate(x,y);\n  at.scale(SCALE_FACTOR,SCALE_FACTOR);\n  g2d.drawImage(picture,at,null);\n  g2d.dispose();\n  x+=scaleW + PADDING;\n  Image scaledImg=picture.getScaledInstance(scaleW,scaleH,Image.SCALE_DEFAULT);\n  g.drawImage(scaledImg,x,y,null);\n}"}
{"ids": "14600", "raw_code": "public int hashCode(){\n  return idType.hashCode();\n}"}
{"ids": "7007", "raw_code": "private static void backupAudioConfig(){\n  if (null != mRestoreAudioConfigTimer) {\n    mRestoreAudioConfigTimer.cancel();\n    mRestoreAudioConfigTimer=null;\n    mRestoreAudioConfigTimerMask=null;\n  }\n else   if (null == mAudioMode) {\n    AudioManager audioManager=getAudioManager();\n    mAudioMode=audioManager.getMode();\n    mIsSpeakerOn=audioManager.isSpeakerphoneOn();\n  }\n}"}
{"ids": "23308", "raw_code": "public static String buildImdnDeliveryReport(String msgId,ImdnDocument.DeliveryStatus status,long timestamp){\n  String method;\nswitch (status) {\ncase DISPLAYED:\n    method=\"display-notification\";\n  break;\ncase DELIVERED:\nmethod=\"delivery-notification\";\nbreak;\ndefault :\nmethod=\"processing-notification\";\nbreak;\n}\nreturn \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + UTF8_STR + \"\\\"?>\"+ CRLF+ \"<imdn xmlns=\\\"urn:ietf:params:xml:ns:imdn\\\">\"+ CRLF+ \"<message-id>\"+ msgId+ \"</message-id>\"+ CRLF+ \"<datetime>\"+ DateUtils.encodeDate(timestamp)+ \"</datetime>\"+ CRLF+ \"<\"+ method+ \"><status><\"+ status+ \"/></status></\"+ method+ \">\"+ CRLF+ \"</imdn>\";\n}"}
{"ids": "55318", "raw_code": "private SpeedrunsLiveRequest(){\n  super(URL);\n}"}
{"ids": "59813", "raw_code": "public static Bitmap decodeResourceWithBackouts(Resources res,BitmapFactory.Options options,int id){\n  boolean noBitmap=true;\n  int num_tries=0;\n  if (options.inSampleSize < 1) {\n    options.inSampleSize=1;\n  }\n  Bitmap bmap=null;\n  while (noBitmap) {\n    try {\n      bmap=BitmapFactory.decodeResource(res,id,options);\n      noBitmap=false;\n    }\n catch (    java.lang.OutOfMemoryError e) {\n      if (++num_tries >= BITMAP_LOAD_BACKOUT_ATTEMPTS) {\n        throw e;\n      }\n      bmap=null;\n      System.gc();\n      options.inSampleSize*=2;\n    }\n  }\n  return bmap;\n}"}
{"ids": "26519", "raw_code": "public void readDataFile(String content) throws DataFileException {\n  if (content == null || content.length() <= 0)   throw new IllegalStateException(\"Content is empty, can't read file\");\n  ByteArrayInputStream bis=new ByteArrayInputStream(content.getBytes());\n  readDataFile(bis,null);\n}"}
{"ids": "49147", "raw_code": "protected Object lazilyLoadDesktopProperty(String name){\n  if (name.startsWith(\"gtk.icon.\")) {\n    return lazilyLoadGTKIcon(name);\n  }\n  return super.lazilyLoadDesktopProperty(name);\n}"}
{"ids": "67778", "raw_code": "public OAuthRsaSha1Signer(String privateKeyString) throws OAuthException {\n  if (privateKeyString == null) {\n    throw new OAuthException(\"Private key string cannot be null\");\n  }\n else   if (privateKeyString.length() == 0) {\n    throw new OAuthException(\"Private key string cannot be empty\");\n  }\n  try {\n    setPrivateKey(RsaSha1PrivateKeyHelper.getPrivateKey(privateKeyString));\n  }\n catch (  Base64DecoderException e) {\n    throw new OAuthException(\"Invalid private key\",e);\n  }\ncatch (  NoSuchAlgorithmException e) {\n    throw new OAuthException(\"Invalid private key\",e);\n  }\ncatch (  InvalidKeySpecException e) {\n    throw new OAuthException(\"Invalid private key\",e);\n  }\n}"}
{"ids": "21964", "raw_code": "private Map<String,Volume> groupVolumesByReplicationGroup(List<Volume> volumeList){\n  Map<String,Volume> repGroupToVolumeMap=new HashMap<String,Volume>();\n  for (  Volume volume : volumeList) {\n    String repGroupName=volume.getReplicationGroupInstance();\n    if (volume.isVPlexVolume(_dbClient)) {\n      Volume backedVol=VPlexUtil.getVPLEXBackendVolume(volume,true,_dbClient);\n      if (backedVol != null) {\n        repGroupName=backedVol.getReplicationGroupInstance();\n      }\n    }\n    repGroupToVolumeMap.put(repGroupName,volume);\n  }\n  return repGroupToVolumeMap;\n}"}
{"ids": "66653", "raw_code": "public DefaultFileFilter(String extension,String description){\n  ext=extension.toLowerCase();\n  desc=description;\n}"}
{"ids": "72136", "raw_code": "public void appendCell(boolean value){\n  appendCell(String.valueOf(value));\n}"}
{"ids": "7365", "raw_code": "public String name(){\n  return System.getProperty(\"java.vm.name\");\n}"}
{"ids": "17786", "raw_code": "protected void addURL(URL url){\n  try {\n    originalUrls.add(url);\n    searchList.add(createSearchURL(url));\n  }\n catch (  MalformedURLException e) {\n  }\n}"}
{"ids": "37655", "raw_code": "public void initStructure() throws Exception {\n  int nAttribute=0;\n  for (int iOrder=1; iOrder < m_Instances.numAttributes(); iOrder++) {\n    if (nAttribute == m_Instances.classIndex()) {\n      nAttribute++;\n    }\n  }\n  m_ParentSets=new ParentSet[m_Instances.numAttributes()];\n  for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {\n    m_ParentSets[iAttribute]=new ParentSet(m_Instances.numAttributes());\n  }\n}"}
{"ids": "1861", "raw_code": "@Override public synchronized CompletableFuture<Void> disconnect(){\n  closeFuture=new CompletableFuture<>();\n  if (!consumers.isEmpty()) {\n    consumers.forEach(null);\n    if (havePendingRead && cursor.cancelPendingReadRequest()) {\n      havePendingRead=false;\n    }\n  }\n else {\n    closeFuture.complete(null);\n  }\n  return closeFuture;\n}"}
{"ids": "51963", "raw_code": "public static String readAsciiLine(InputStream in) throws IOException {\n  StringBuilder result=new StringBuilder(80);\n  while (true) {\n    int c=in.read();\n    if (c == -1) {\n      throw new EOFException();\n    }\n else     if (c == '\\n') {\n      break;\n    }\n    result.append((char)c);\n  }\n  int length=result.length();\n  if (length > 0 && result.charAt(length - 1) == '\\r') {\n    result.setLength(length - 1);\n  }\n  return result.toString();\n}"}
{"ids": "57125", "raw_code": "protected boolean IPIsBroadcast(int IPAddress){\n  int inv_subnet_mask=~this.subnet_mask;\n  return ((IPAddress & inv_subnet_mask) == inv_subnet_mask);\n}"}
{"ids": "42313", "raw_code": "public void addCellAppearancesToWorkList(DF_LatticeCell cell){\n  for (Enumeration<DF_Equation> e=getEquations(); e.hasMoreElements(); ) {\n    DF_Equation eq=e.nextElement();\n    if (eq.hasCell(cell)) {\n      addToWorkList(eq);\n    }\n  }\n}"}
{"ids": "51068", "raw_code": "public void remove(ConstraintWidget widget){\n  Element toUnselect=null;\n  for (  Element selection : mSelectedWidgets) {\n    if (selection.widget == widget) {\n      toUnselect=selection;\n      break;\n    }\n  }\n  if (toUnselect != null) {\n    mSelectedWidgets.remove(toUnselect);\n  }\n  selectionHasChanged();\n}"}
{"ids": "37434", "raw_code": "public static long hexStringToLong(final String hexString){\n  Preconditions.checkNotNull(hexString,\"Error: Unicode string can't be null\");\n  Preconditions.checkArgument(isHexString(hexString),String.format(\"Error: Hex string '%s' is not a vaild hex string\",hexString));\n  if ((hexString.length() == 16) && (hexString.charAt(0) >= 8)) {\n    final String strAddr1=hexString.substring(0,hexString.length() - 8);\n    final String strAddr2=hexString.substring(hexString.length() - 8);\n    return (Long.parseLong(strAddr1,16) << 32) + Long.parseLong(strAddr2,16);\n  }\n  return Long.parseLong(hexString,16);\n}"}
{"ids": "50847", "raw_code": "public static boolean containsFile(@NotNull SourceProvider provider,@NotNull File file){\n  Collection<File> srcDirectories=getAllSourceFolders(provider);\n  if (filesEqual(provider.getManifestFile(),file)) {\n    return true;\n  }\n  for (  File container : srcDirectories) {\n    File parent=container.getParentFile();\n    if (parent != null && parent.isDirectory() && filesEqual(parent,file)) {\n      return true;\n    }\n    if (!container.exists()) {\n      continue;\n    }\n    if (isAncestor(container,file,false)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "16760", "raw_code": "public static String checkNotEmpty(String string,Object errorMessage){\n  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && TextUtils.isEmpty(string)) {\n    throw new IllegalArgumentException(String.valueOf(errorMessage));\n  }\n  return string;\n}"}
{"ids": "2877", "raw_code": "private SSLEngineResult unwrap() throws SSLException {\n  if (appBuffer == null) {\n    appBuffer=IoBuffer.allocate(inNetBuffer.remaining());\n  }\n else {\n    appBuffer.expand(inNetBuffer.remaining());\n  }\n  SSLEngineResult res;\n  Status status=null;\n  HandshakeStatus handshakeStatus=null;\n  do {\n    res=sslEngine.unwrap(inNetBuffer.buf(),appBuffer.buf());\n    status=res.getStatus();\n    handshakeStatus=res.getHandshakeStatus();\n    if (status == SSLEngineResult.Status.BUFFER_OVERFLOW) {\n      appBuffer.capacity(appBuffer.capacity() << 1);\n      appBuffer.limit(appBuffer.capacity());\n      continue;\n    }\n  }\n while (((status == SSLEngineResult.Status.OK) || (status == SSLEngineResult.Status.BUFFER_OVERFLOW)) && ((handshakeStatus == SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) || (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_UNWRAP)));\n  return res;\n}"}
{"ids": "28849", "raw_code": "public Certificate requestCertificate(byte[] csr) throws AcmeException {\n  return requestCertificate(csr,null,null);\n}"}
{"ids": "78764", "raw_code": "public void clear(){\n  mStrings.clear();\n  notifyDataSetChanged();\n}"}
{"ids": "31786", "raw_code": "@SuppressWarnings({\"ClassLoader2Instantiation\"}) private static GridUriDeploymentFileProcessorResult processWithDescriptorFile(GridUriDeploymentSpringDocument doc,File file,String uri,IgniteLogger log) throws IgniteSpiException {\n  ClassLoader clsLdr=GridUriDeploymentClassLoaderFactory.create(U.gridClassLoader(),file,log);\n  List<Class<? extends ComputeTask<?,?>>> tasks=doc.getTasks(clsLdr);\n  List<Class<? extends ComputeTask<?,?>>> validTasks=null;\n  if (!F.isEmpty(tasks)) {\n    validTasks=new ArrayList<>();\n    for (    Class<? extends ComputeTask<?,?>> task : tasks) {\n      if (!isAllowedTaskClass(task)) {\n        U.warn(log,\"Failed to load task. Task should be public none-abstract class \" + \"(might be inner static one) that implements ComputeTask interface [taskCls=\" + task + ']');\n      }\n else {\n        if (log.isDebugEnabled())         log.debug(\"Found grid deployment task: \" + task.getName());\n        validTasks.add(task);\n      }\n    }\n  }\n  GridUriDeploymentFileProcessorResult res=new GridUriDeploymentFileProcessorResult();\n  res.setFile(file);\n  res.setClassLoader(clsLdr);\n  if (!F.isEmpty(validTasks))   res.setTaskClasses(validTasks);\n else   if (log.isDebugEnabled())   log.debug(\"No tasks loaded from file [file=\" + file.getAbsolutePath() + \", uri=\"+ U.hidePassword(uri)+ ']');\n  return res;\n}"}
{"ids": "43028", "raw_code": "public void truncate(){\n  calculateIdealPoint();\n  translateByIdealPoint();\n  List<List<Solution>> members=associateToReferencePoint(this);\n  clear();\n  for (int i=0; i < members.size(); i++) {\n    List<Solution> associations=members.get(i);\n    if (associations.size() > 0) {\n      add(select(associations,i));\n    }\n  }\n}"}
{"ids": "15658", "raw_code": "protected void onDownloading(){\n  if (LogConfiguration.loggingIsEnabled()) {\n    logger.log(Level.INFO,messages.downloadingResources());\n  }\n  updating=true;\n  fireApplicationCacheEvent(CacheEvent.onDownloading);\n}"}
{"ids": "69957", "raw_code": "protected synchronized void addTransitionListener(Hashtable<TxState,Hashtable<TxState,Set<EventListener>>> listeners,EventListener lstnr,TxState from,TxState to){\n  Hashtable<TxState,Set<EventListener>> lstnrs=listeners.get(from);\n  if (lstnrs == null)   lstnrs=new Hashtable<TxState,Set<EventListener>>();\n  Set<EventListener> tolstnrs=lstnrs.get(to);\n  if (tolstnrs == null)   tolstnrs=new HashSet<EventListener>();\n  if (!tolstnrs.contains(lstnr))   tolstnrs.add(lstnr);\n  lstnrs.put(to,tolstnrs);\n  listeners.put(from,lstnrs);\n}"}
{"ids": "45347", "raw_code": "public boolean hasExclusion(){\n  return !mExcludedClasses.isEmpty() || !mExcludedTests.isEmpty();\n}"}
{"ids": "76506", "raw_code": "private int ensureBaselineOnGrid(){\n  float baseline=getBaseline();\n  float gridAlign=baseline % FOUR_DIP;\n  if (gridAlign != 0) {\n    extraTopPadding=(int)(FOUR_DIP - Math.ceil(gridAlign));\n  }\n  return extraTopPadding;\n}"}
{"ids": "47340", "raw_code": "@Override public void compute(){\n  Spliterator<P_IN> rs=spliterator, ls;\n  long sizeEstimate=rs.estimateSize();\n  long sizeThreshold=getTargetSize(sizeEstimate);\n  boolean forkRight=false;\n  @SuppressWarnings(\"unchecked\") K task=(K)this;\n  AtomicReference<R> sr=sharedResult;\n  R result;\n  while ((result=sr.get()) == null) {\n    if (task.taskCanceled()) {\n      result=task.getEmptyResult();\n      break;\n    }\n    if (sizeEstimate <= sizeThreshold || (ls=rs.trySplit()) == null) {\n      result=task.doLeaf();\n      break;\n    }\n    K leftChild, rightChild, taskToFork;\n    task.leftChild=leftChild=task.makeChild(ls);\n    task.rightChild=rightChild=task.makeChild(rs);\n    task.setPendingCount(1);\n    if (forkRight) {\n      forkRight=false;\n      rs=ls;\n      task=leftChild;\n      taskToFork=rightChild;\n    }\n else {\n      forkRight=true;\n      task=rightChild;\n      taskToFork=leftChild;\n    }\n    taskToFork.fork();\n    sizeEstimate=rs.estimateSize();\n  }\n  task.setLocalResult(result);\n  task.tryComplete();\n}"}
{"ids": "79317", "raw_code": "public static Map<String,Object> createContentAssoc(DispatchContext dctx,Map<String,? extends Object> rcontext){\n  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);\n  context.put(\"entityOperation\",\"_CREATE\");\n  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,\"_CREATE\");\n  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);\n  context.put(\"targetOperationList\",targetOperationList);\n  context.put(\"contentPurposeList\",contentPurposeList);\n  context.put(\"skipPermissionCheck\",null);\n  Map<String,Object> result=null;\n  try {\n    result=createContentAssocMethod(dctx,context);\n  }\n catch (  GenericServiceException e) {\n    return ServiceUtil.returnError(e.getMessage());\n  }\ncatch (  GenericEntityException e2) {\n    return ServiceUtil.returnError(e2.getMessage());\n  }\ncatch (  Exception e3) {\n    return ServiceUtil.returnError(e3.getMessage());\n  }\n  return result;\n}"}
{"ids": "53490", "raw_code": "public String formatWithLocale(Locale locale,String... args){\n  return String.format(locale,this.content,(Object[])args);\n}"}
{"ids": "24524", "raw_code": "private static <T extends AbstractBlockBase<T>>T addPathToLinearScanOrder(T block,List<T> order,PriorityQueue<T> worklist,BitSet visitedBlocks){\n  block.setLinearScanNumber(order.size());\n  order.add(block);\n  T mostLikelySuccessor=findAndMarkMostLikelySuccessor(block,visitedBlocks);\n  enqueueSuccessors(block,worklist,visitedBlocks);\n  if (mostLikelySuccessor != null) {\n    if (!mostLikelySuccessor.isLoopHeader() && mostLikelySuccessor.getPredecessorCount() > 1) {\n      double unscheduledSum=0.0;\n      for (      T pred : mostLikelySuccessor.getPredecessors()) {\n        if (pred.getLinearScanNumber() == -1) {\n          unscheduledSum+=pred.probability();\n        }\n      }\n      if (unscheduledSum > block.probability() / PENALTY_VERSUS_UNSCHEDULED) {\n        visitedBlocks.clear(mostLikelySuccessor.getId());\n        return null;\n      }\n    }\n    return mostLikelySuccessor;\n  }\n  return null;\n}"}
{"ids": "79112", "raw_code": "private static Dimension createThumbDimension(final BufferedImage image,final int maxWidth,final int maxHeight){\n  Dimension dimension=new Dimension();\n  if (image.getWidth() >= image.getHeight()) {\n    if (image.getWidth() >= maxWidth) {\n      dimension.width=maxWidth;\n      dimension.height=Math.round(((float)maxWidth / image.getWidth()) * image.getHeight());\n    }\n else {\n      dimension.height=image.getHeight();\n      dimension.width=image.getWidth();\n    }\n  }\n else {\n    if (image.getHeight() >= maxHeight) {\n      dimension.height=maxHeight;\n      dimension.width=Math.round((((float)maxHeight / image.getHeight()) * image.getWidth()));\n    }\n else {\n      dimension.height=image.getHeight();\n      dimension.width=image.getWidth();\n    }\n  }\n  return dimension;\n}"}
{"ids": "59557", "raw_code": "private boolean hasCurrentAccountChanged(){\n  Account account=AccountUtils.getCurrentOwnCloudAccount(this);\n  if (account == null) {\n    return true;\n  }\n else {\n    return !mOriginalCurrentAccount.equals(account.name);\n  }\n}"}
{"ids": "77451", "raw_code": "public int nextClearBit(int index){\n  int i=index >> 6;\n  if (i >= wlen)   return -1;\n  int subIndex=index & 0x3f;\n  long word=~bits.get(i) >> subIndex;\n  if (word != 0) {\n    return (i << 6) + subIndex + Long.numberOfTrailingZeros(word);\n  }\n  while (++i < wlen) {\n    word=~bits.get(i);\n    if (word != 0) {\n      return (i << 6) + Long.numberOfTrailingZeros(word);\n    }\n  }\n  return -1;\n}"}
{"ids": "13646", "raw_code": "private static synchronized void appendMessage(Context c,final String msg){\n  if (msg.length() == 0)   return;\n  String out=msg;\n  boolean timestamp=PrefStore.isTimestamp(c);\n  int maxLines=PrefStore.getMaxLines(c);\n  int protocolSize=protocol.size();\n  if (protocolSize > 0 && lastChar != '\\n') {\n    protocol.remove(protocolSize - 1);\n    out=lastLine + out;\n  }\n  lastChar=out.charAt(out.length() - 1);\n  String[] lines=out.split(\"\\\\n\");\n  for (int i=0, l=lines.length; i < l; i++) {\n    lastLine=lines[i];\n    if (timestamp)     protocol.add(getTimeStamp() + lastLine);\n else     protocol.add(lastLine);\n    if (protocolSize + i >= maxLines) {\n      protocol.remove(0);\n    }\n  }\n  show();\n  if (PrefStore.isLogger(c))   write(c,msg);\n}"}
{"ids": "66651", "raw_code": "public Object[] importCells(Object[] cells,double dx,double dy,Object target,Point location){\n  if (target == null && cells.length == 1 && location != null) {\n    target=getCellAt(location.x,location.y);\n    if (target instanceof mxICell && cells[0] instanceof mxICell) {\n      mxICell targetCell=(mxICell)target;\n      mxICell dropCell=(mxICell)cells[0];\n      if (targetCell.isVertex() == dropCell.isVertex() || targetCell.isEdge() == dropCell.isEdge()) {\n        mxIGraphModel model=graph.getModel();\n        model.setStyle(target,model.getStyle(cells[0]));\n        graph.setSelectionCell(target);\n        return null;\n      }\n    }\n  }\n  return super.importCells(cells,dx,dy,target,location);\n}"}
{"ids": "55491", "raw_code": "private void cancelSearch(){\n  entrantToSearch=null;\n}"}
{"ids": "49444", "raw_code": "public void onPrepared(MediaPlayer player){\n  mState=State.PLAYING;\n  updateNotification(String.format(getString(R.string.media_state_playing),mFile.getFileName()));\n  if (mMediaController != null) {\n    mMediaController.setEnabled(true);\n  }\n  player.seekTo(mStartPosition);\n  configAndStartMediaPlayer();\n  if (!mPlayOnPrepared) {\n    processPauseRequest();\n  }\n  if (mMediaController != null) {\n    mMediaController.updatePausePlay();\n  }\n}"}
{"ids": "63477", "raw_code": "public static ResultSet polar2Cartesian(Double r,Double alpha){\n  SimpleResultSet rs=new SimpleResultSet();\n  rs.addColumn(\"X\",Types.DOUBLE,0,0);\n  rs.addColumn(\"Y\",Types.DOUBLE,0,0);\n  if (r != null && alpha != null) {\n    double x=r.doubleValue() * Math.cos(alpha.doubleValue());\n    double y=r.doubleValue() * Math.sin(alpha.doubleValue());\n    rs.addRow(x,y);\n  }\n  return rs;\n}"}
{"ids": "2271", "raw_code": "public void threadFail(String reason){\n  try {\n    fail(reason);\n  }\n catch (  AssertionFailedError t) {\n    threadRecordFailure(t);\n    throw t;\n  }\n}"}
{"ids": "35509", "raw_code": "@Override public void connectionLost(Throwable cause){\n  onDisconnect(false);\n}"}
{"ids": "16929", "raw_code": "private boolean isTypedTimeFullyLegal(){\n  if (mIs24HourMode) {\n    int[] values=getEnteredTime(null);\n    return (values[0] >= 0 && values[1] >= 0 && values[1] < 60 && values[2] >= 0 && values[2] < 60);\n  }\n else {\n    return (mTypedTimes.contains(getAmOrPmKeyCode(AM)) || mTypedTimes.contains(getAmOrPmKeyCode(PM)));\n  }\n}"}
{"ids": "70482", "raw_code": "public synchronized void clearAnnotations(){\n  mAnnotations.clear();\n  mStringXY.clear();\n}"}
{"ids": "34107", "raw_code": "public Table sample(double proportion){\n  int tableCount=(int)Math.round(rowCount() * proportion);\n  Selection table1Selection=new BitmapBackedSelection();\n  int[] selectedRecords=generateUniformBitmap(tableCount,rowCount());\n  for (  int selectedRecord : selectedRecords) {\n    table1Selection.add(selectedRecord);\n  }\n  return selectWhere(table1Selection);\n}"}
{"ids": "40224", "raw_code": "public static MessageDigest newDigest(){\n  try {\n    return MessageDigest.getInstance(\"SHA-256\");\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "64068", "raw_code": "public Container addChildAt(int location,@NonNull DisplayObject DisplayObject){\n  if (mFps != DEFAULT_FPS) {\n    DisplayObject.setUp(mFps);\n  }\n  mDisplayList.add(location,DisplayObject);\n  return this;\n}"}
{"ids": "1962", "raw_code": "private void add(DimensionIndex index){\n  flatten.add(index);\n  lookup.put(index.getAxis(),index);\n}"}
{"ids": "23379", "raw_code": "public static RecipePetals registerPetalRecipe(ItemStack output,Object... inputs){\n  Preconditions.checkArgument(inputs.length <= 16);\n  RecipePetals recipe=new RecipePetals(output,inputs);\n  petalRecipes.add(recipe);\n  return recipe;\n}"}
{"ids": "9533", "raw_code": "private void buildFirstLine(LinePath path,Rect r){\n  int[] range=new int[]{-r.left,-r.top,r.right,r.bottom};\n  int max=-1;\n  int maxId=0;\n  for (int i=0; i < 4; i++) {\n    if (range[i] > max) {\n      max=range[i];\n      maxId=i;\n    }\n  }\nswitch (maxId) {\ncase 0:\n    path.setEndPoint(r.left,Utils.nextInt(r.height()) + r.top);\n  break;\ncase 1:\npath.setEndPoint(Utils.nextInt(r.width()) + r.left,r.top);\nbreak;\ncase 2:\npath.setEndPoint(r.right,Utils.nextInt(r.height()) + r.top);\nbreak;\ncase 3:\npath.setEndPoint(Utils.nextInt(r.width()) + r.left,r.bottom);\nbreak;\n}\npath.lineToEnd();\n}"}
{"ids": "6272", "raw_code": "public static boolean isExtension(String filename,String extension){\n  if (filename == null) {\n    return false;\n  }\n  if (extension == null || extension.length() == 0) {\n    return indexOfExtension(filename) == -1;\n  }\n  String fileExt=getExtension(filename);\n  return fileExt.equals(extension);\n}"}
{"ids": "25838", "raw_code": "private String[] combineResultsFromMultipleReads(String[] buffer,String[] lastRead){\n  String[] t=new String[buffer.length + lastRead.length];\n  System.arraycopy(buffer,0,t,0,buffer.length);\n  System.arraycopy(lastRead,0,t,buffer.length,lastRead.length);\n  return t;\n}"}
{"ids": "83082", "raw_code": "public double calcDistance(final double x,final double y){\n  double distanceX;\n  double distanceY;\n  if (this.minX <= x && x <= this.maxX) {\n    distanceX=0;\n  }\n else {\n    distanceX=Math.min(Math.abs(this.minX - x),Math.abs(this.maxX - x));\n  }\n  if (this.minY <= y && y <= this.maxY) {\n    distanceY=0;\n  }\n else {\n    distanceY=Math.min(Math.abs(this.minY - y),Math.abs(this.maxY - y));\n  }\n  return Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n}"}
{"ids": "4202", "raw_code": "@Override public MatchesType marshal(Set<Match> matches){\n  Set<RPSBlastMatch> rpsBlastMatches=new LinkedHashSet<RPSBlastMatch>();\n  Set<Hmmer2Match> hmmer2Matches=new LinkedHashSet<Hmmer2Match>();\n  Set<Hmmer3Match> hmmer3Matches=new LinkedHashSet<Hmmer3Match>();\n  Set<SuperFamilyHmmer3Match> superFamilyHmmer3Matches=new LinkedHashSet<SuperFamilyHmmer3Match>();\n  Set<FingerPrintsMatch> fingerPrintsMatches=new LinkedHashSet<FingerPrintsMatch>();\n  Set<BlastProDomMatch> proDomMatches=new LinkedHashSet<BlastProDomMatch>();\n  Set<PatternScanMatch> patternScanMatches=new LinkedHashSet<PatternScanMatch>();\n  Set<ProfileScanMatch> profileScanMatches=new LinkedHashSet<ProfileScanMatch>();\n  Set<PhobiusMatch> phobiusMatches=new LinkedHashSet<PhobiusMatch>();\n  Set<CoilsMatch> coilsMatches=new LinkedHashSet<CoilsMatch>();\n  Set<PantherMatch> pantherMatches=new LinkedHashSet<PantherMatch>();\n  Set<SignalPMatch> signalPMatches=new LinkedHashSet<SignalPMatch>();\n  Set<TMHMMMatch> tmhmmPMatches=new LinkedHashSet<TMHMMMatch>();\n  for (  Match m : matches) {\n    if (m instanceof RPSBlastMatch) {\n      rpsBlastMatches.add((RPSBlastMatch)m);\n    }\n else     if (m instanceof Hmmer2Match) {\n      hmmer2Matches.add((Hmmer2Match)m);\n    }\n else     if (m instanceof Hmmer3Match) {\n      hmmer3Matches.add((Hmmer3Match)m);\n    }\n else     if (m instanceof SuperFamilyHmmer3Match) {\n      superFamilyHmmer3Matches.add((SuperFamilyHmmer3Match)m);\n    }\n else     if (m instanceof FingerPrintsMatch) {\n      fingerPrintsMatches.add((FingerPrintsMatch)m);\n    }\n else     if (m instanceof BlastProDomMatch) {\n      proDomMatches.add((BlastProDomMatch)m);\n    }\n else     if (m instanceof PatternScanMatch) {\n      patternScanMatches.add((PatternScanMatch)m);\n    }\n else     if (m instanceof ProfileScanMatch) {\n      profileScanMatches.add((ProfileScanMatch)m);\n    }\n else     if (m instanceof PhobiusMatch) {\n      phobiusMatches.add((PhobiusMatch)m);\n    }\n else     if (m instanceof CoilsMatch) {\n      coilsMatches.add((CoilsMatch)m);\n    }\n else     if (m instanceof PantherMatch) {\n      pantherMatches.add((PantherMatch)m);\n    }\n else     if (m instanceof SignalPMatch) {\n      signalPMatches.add((SignalPMatch)m);\n    }\n else     if (m instanceof TMHMMMatch) {\n      tmhmmPMatches.add((TMHMMMatch)m);\n    }\n else {\n      throw new IllegalArgumentException(\"Unrecognised Match class: \" + m);\n    }\n  }\n  return new MatchesType(rpsBlastMatches,hmmer2Matches,hmmer3Matches,superFamilyHmmer3Matches,fingerPrintsMatches,proDomMatches,patternScanMatches,profileScanMatches,phobiusMatches,coilsMatches,pantherMatches,signalPMatches,tmhmmPMatches);\n}"}
{"ids": "81671", "raw_code": "public synchronized void ensureCapacity(int minimumCapacity){\n  if (elementData.length < minimumCapacity) {\n    int next=(capacityIncrement <= 0 ? elementData.length : capacityIncrement) + elementData.length;\n    grow(minimumCapacity > next ? minimumCapacity : next);\n  }\n}"}
{"ids": "77449", "raw_code": "public static void reverse(final char[] buffer,final int start,final int len){\n  if (len < 2)   return;\n  int end=(start + len) - 1;\n  char frontHigh=buffer[start];\n  char endLow=buffer[end];\n  boolean allowFrontSur=true, allowEndSur=true;\n  final int mid=start + (len >> 1);\n  for (int i=start; i < mid; ++i, --end) {\n    final char frontLow=buffer[i + 1];\n    final char endHigh=buffer[end - 1];\n    final boolean surAtFront=allowFrontSur && Character.isSurrogatePair(frontHigh,frontLow);\n    if (surAtFront && (len < 3)) {\n      return;\n    }\n    final boolean surAtEnd=allowEndSur && Character.isSurrogatePair(endHigh,endLow);\n    allowFrontSur=allowEndSur=true;\n    if (surAtFront == surAtEnd) {\n      if (surAtFront) {\n        buffer[end]=frontLow;\n        buffer[--end]=frontHigh;\n        buffer[i]=endHigh;\n        buffer[++i]=endLow;\n        frontHigh=buffer[i + 1];\n        endLow=buffer[end - 1];\n      }\n else {\n        buffer[end]=frontHigh;\n        buffer[i]=endLow;\n        frontHigh=frontLow;\n        endLow=endHigh;\n      }\n    }\n else {\n      if (surAtFront) {\n        buffer[end]=frontLow;\n        buffer[i]=endLow;\n        endLow=endHigh;\n        allowFrontSur=false;\n      }\n else {\n        buffer[end]=frontHigh;\n        buffer[i]=endHigh;\n        frontHigh=frontLow;\n        allowEndSur=false;\n      }\n    }\n  }\n  if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n    buffer[end]=allowFrontSur ? endLow : frontHigh;\n  }\n}"}
{"ids": "15299", "raw_code": "public void trigger(Date time){\n  taskList.remove(time);\n}"}
{"ids": "46747", "raw_code": "Cipher(CipherSpi cipherSpi,String transformation){\n  this.spi=cipherSpi;\n  this.transformation=transformation;\n  this.cryptoPerm=CryptoAllPermission.INSTANCE;\n  this.lock=null;\n}"}
{"ids": "179", "raw_code": "private void writeObject(ObjectOutputStream aOutputStream) throws IOException {\n  aOutputStream.defaultWriteObject();\n}"}
{"ids": "20234", "raw_code": "@Override public boolean isPanelEnabled(){\n  return multiOptionGroupEnabled;\n}"}
{"ids": "79593", "raw_code": "public synchronized void add(String name,long threadId){\n  if (mFinished) {\n    throw new IllegalStateException(\"Marker added to finished log\");\n  }\n  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));\n}"}
{"ids": "341", "raw_code": "public static String toUnixNewline(String input){\n  return input.replace(\"\\r\\n\",\"\\n\");\n}"}
{"ids": "80721", "raw_code": "private void outputIndentation(){\n  for (int i=0; i < m_indent; i++) {\n    m_out.print(m_basicIndent);\n  }\n}"}
{"ids": "54458", "raw_code": "protected Bucket<T> createBucket(long bucketKey){\n  return new Bucket<T>(bucketKey);\n}"}
{"ids": "30001", "raw_code": "public AbstractSiteMap parseSiteMap(byte[] content,URL url) throws UnknownFormatException, IOException {\n  if (url == null) {\n    return null;\n  }\n  String filename=FilenameUtils.getName(url.getPath());\n  String contentType=TIKA.detect(content,filename);\n  return parseSiteMap(contentType,content,url);\n}"}
{"ids": "10773", "raw_code": "public ApplicationMetaData(final Deserializer deserializer){\n  this.appName=deserializer.readString(\"application\");\n  this.version=deserializer.readString(\"version\");\n  this.certificateSigner=deserializer.readOptionalString(\"signer\");\n  this.startTime=TimeInstant.readFrom(deserializer,\"startTime\");\n  this.currentTime=TimeInstant.readFrom(deserializer,\"currentTime\");\n  this.timeProvider=null;\n}"}
{"ids": "34205", "raw_code": "public static ConstraintsParameters loadPolicyData(InputStream policyDataStream){\n  if (policyDataStream != null) {\n    return load(policyDataStream);\n  }\n  if ((defaultPolicyConstraintsLocation != null) && !defaultPolicyConstraintsLocation.isEmpty()) {\n    return load(defaultPolicyConstraintsLocation);\n  }\n  return null;\n}"}
{"ids": "10676", "raw_code": "public static void close(OutputStream out){\n  try {\n    if (out != null) {\n      out.close();\n    }\n  }\n catch (  IOException ioE) {\n  }\n}"}
{"ids": "20151", "raw_code": "@Override public boolean isCellEditable(int row,int col){\n  if (isConnectedToDataSource) {\n    if (col != FIELD_COLUMN_ID) {\n      return true;\n    }\n else {\n      return false;\n    }\n  }\n else {\n    return true;\n  }\n}"}
{"ids": "86463", "raw_code": "private void saveSortedPomFile(final String sortedXml){\n  fileUtil.savePomFile(sortedXml);\n  log.info(\"Saved sorted pom file to \" + pomFile.getAbsolutePath());\n}"}
{"ids": "1902", "raw_code": "private void appendStatements(PolicyType policy,String prefix){\n  List<Statement> appendStatements=newStatements(policy,prefix);\n  for (  Statement statement : appendStatements) {\n    appendStatement(statement);\n  }\n}"}
{"ids": "15171", "raw_code": "private void validateTOTPParameters() throws AuthLoginException {\n  StringBuilder errorMessages=new StringBuilder();\n  if (StringUtils.isEmpty(loginTimeAttrName)) {\n    errorMessages.append(\"Login time attribute name is empty \\n\");\n  }\n  if (clockDriftCheckEnabled && StringUtils.isEmpty(observedClockDriftAttrName)) {\n    errorMessages.append(\"Observed time drift attribute name is empty \\n\");\n  }\n  if (totpTimeStep <= 0) {\n    errorMessages.append(\"Invalid TOTP time step interval: \" + totpTimeStep + \" \\n\");\n  }\n  if (totpStepsInWindow < 0) {\n    errorMessages.append(\"Invalid TOTP steps in window value: \" + totpStepsInWindow);\n  }\n  if (errorMessages.length() > 0) {\n    debug.error(\"OATH.validateTOTPParameters(): Invalid settings : \" + errorMessages.toString());\n    throw new AuthLoginException(amAuthOATH,\"authFailed\",null);\n  }\n}"}
{"ids": "34128", "raw_code": "public static String removeUriFragment(String url){\n  if (url == null || url.length() == 0) {\n    return null;\n  }\n  String[] arr=url.split(\"#\");\n  if (arr.length == 2) {\n    return arr[0];\n  }\n else {\n    return url;\n  }\n}"}
{"ids": "49831", "raw_code": "public static void writeReceiptsToFiles(List<byte[]> printedReceipts,String prefix,File baseDir){\n  try {\n    int index=1;\n    for (    byte[] printedReceipt : printedReceipts) {\n      ByteArrayInputStream bIn=new ByteArrayInputStream(printedReceipt);\n      File receiptFile=new File(baseDir,prefix + \"Receipt \" + index+ \".pdf\");\n      BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(receiptFile));\n      IOUtils.copy(bIn,bufferedOutputStream);\n      bufferedOutputStream.close();\n      index++;\n    }\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "11757", "raw_code": "public synchronized void renderDataForProjection(Projection proj,java.awt.Graphics g){\n  fireStatusUpdate(LayerStatusEvent.FINISH_WORKING);\n  if (proj == null) {\n    logger.info(\"null projection!\");\n    return;\n  }\n else {\n    setTargetIndex(proj.getScale());\n    Layer layer=getAppropriateLayer();\n    layer.renderDataForProjection(proj,g);\n  }\n}"}
{"ids": "8650", "raw_code": "public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException {\n  if (jpegStream == null || exifOutStream == null) {\n    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);\n  }\n  OutputStream s=getExifWriterStream(exifOutStream);\n  doExifStreamIO(jpegStream,s);\n  s.flush();\n}"}
{"ids": "80311", "raw_code": "private ContainerPanel createContainerPanel(){\n  ContainerPanel containerPanel=new ContainerPanel();\n  containerPanel.setAnimated(false);\n  containerPanel.setMinimumSize(new Dimension(0,0));\n  character=new Character();\n  containerPanel.addRepaintable(character);\n  inventory=new SlotWindow(\"bag\",3,4);\n  inventory.setAcceptedTypes(EntityMap.getClass(\"item\",null,null));\n  inventory.setCloseable(false);\n  containerPanel.addRepaintable(inventory);\n  keyring=new KeyRing();\n  keyring.setAcceptedTypes(EntityMap.getClass(\"item\",null,null));\n  containerPanel.addRepaintable(keyring);\n  userContext.addFeatureChangeListener(keyring);\n  spells=new Spells();\n  spells.setAcceptedTypes(EntityMap.getClass(\"spell\",null,null));\n  containerPanel.addRepaintable(spells);\n  userContext.addFeatureChangeListener(spells);\n  return containerPanel;\n}"}
{"ids": "1533", "raw_code": "public void copyFromGeometry3D(Geometry3D geom){\n  this.mNumIndices=geom.getNumIndices();\n  this.mNumVertices=geom.getNumVertices();\n  this.mVertexBufferInfo=geom.getVertexBufferInfo();\n  this.mIndexBufferInfo=geom.getIndexBufferInfo();\n  this.mTexCoordBufferInfo=geom.getTexCoordBufferInfo();\n  this.mOnlyShortBufferSupported=geom.areOnlyShortBuffersSupported();\n  if (mColors == null)   this.mColorBufferInfo=geom.getColorBufferInfo();\n  this.mNormalBufferInfo=geom.getNormalBufferInfo();\n  this.mOriginalGeometry=geom;\n  this.mHasNormals=geom.hasNormals();\n  this.mHasTextureCoordinates=geom.hasTextureCoordinates();\n}"}
{"ids": "38749", "raw_code": "@Override public void addPropertyChangeListener(PropertyChangeListener pcl){\n  m_pcSupport.addPropertyChangeListener(pcl);\n}"}
{"ids": "61710", "raw_code": "public static Intent implicit2ExplicitIntent(Context context,Intent implicitIntent){\n  PackageManager pm=context.getPackageManager();\n  List<ResolveInfo> resolveInfo=pm.queryIntentServices(implicitIntent,0);\n  if (resolveInfo == null || resolveInfo.size() != 1) {\n    return null;\n  }\n  ResolveInfo serviceInfo=resolveInfo.get(0);\n  String packageName=serviceInfo.serviceInfo.packageName;\n  String className=serviceInfo.serviceInfo.name;\n  ComponentName component=new ComponentName(packageName,className);\n  Intent explicitIntent=new Intent(implicitIntent);\n  explicitIntent.setComponent(component);\n  return explicitIntent;\n}"}
{"ids": "2361", "raw_code": "private synchronized void garbageCollectPeer(Peer peer){\n  log.debug(\"Garbage collected peer \" + peer);\n  mCurrentPeers.remove(peer);\n}"}
{"ids": "78571", "raw_code": "public void reset(){\nsynchronized (this) {\n    queue.clear();\n    setBridgeMode(-1);\n  }\n}"}
{"ids": "35023", "raw_code": "private void indent(){\n  out.print(currentIndention);\n}"}
{"ids": "42382", "raw_code": "private void computeImplicitForwardDependencesUse(Register r,DepGraphNode destNode){\n  DepGraphNode sourceNode=getDepGraphNode(r);\n  if (sourceNode != null) {\n    for (Enumeration<Register> e=GenericPhysicalDefUse.enumerate(GenericPhysicalDefUse.getMaskTSPDefs(),ir); e.hasMoreElements(); ) {\n      Register r2=e.nextElement();\n      if (r == r2) {\n        sourceNode.insertOutEdge(destNode,REG_MAY_DEF);\n        return;\n      }\n    }\n    sourceNode.insertOutEdge(destNode,REG_TRUE);\n  }\n}"}
{"ids": "49231", "raw_code": "public String description(){\nsynchronized (this) {\n    if (messages == null) {\n      messages=ResourceBundle.getBundle(\"com.sun.tools.jdi.resources.jdi\");\n    }\n  }\n  return messages.getString(\"memory_transportservice.description\");\n}"}
{"ids": "15019", "raw_code": "Set findRemovableAciList(Set aciList) throws AMException, SSOException {\n  Set resultSet=new HashSet();\n  if (aciList == null) {\n    return resultSet;\n  }\n  Iterator iter=aciList.iterator();\n  while (iter.hasNext()) {\n    String aci=(String)iter.next();\n    Set objs=dsServices.search(token,AMStoreConnection.getAMSdkBaseDN(),\"(&\" + AMSearchFilterManager.getGlobalSearchFilter(AMObject.GROUP) + \"(iplanet-am-role-aci-list=\"+ aci+ \"))\",AMConstants.SCOPE_SUB);\n    if (objs.size() < 2) {\n      resultSet.add(aci);\n    }\n  }\n  return resultSet;\n}"}
{"ids": "17047", "raw_code": "protected final void unregisterDataSource(DataSource removed){\n  unregisterDataSources(Collections.singleton(removed));\n}"}
{"ids": "9550", "raw_code": "public String dump(byte[] der) throws Asn1Exception, IOException {\n  try {\n    ASN1Primitive derObject=ASN1Primitive.fromByteArray(der);\n    if (derObject.getEncoded().length < der.length) {\n      throw new Asn1Exception(res.getString(\"NoAsn1DumpObject.exception.message\"));\n    }\n    return dump(derObject);\n  }\n catch (  IOException ex) {\n    throw new Asn1Exception(res.getString(\"NoAsn1DumpObject.exception.message\"),ex);\n  }\n}"}
{"ids": "57287", "raw_code": "private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){\n  String inputDesc=String.format(\"earlyEvents=%s, lateEvents=%s, \" + \"anytimeEvents=%s, actualEvents=%s\",earlyEvents.toString(),lateEvents.toString(),anytimeEvents.toString(),actualEvents.toString());\n  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);\n  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);\n  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);\n  for (  PortChangeEvent ev : early) {\n    assertFalse(\"Test setup error. Early and late overlap\",late.contains(ev));\n    assertFalse(\"Test setup error. Early and anytime overlap\",any.contains(ev));\n  }\n  for (  PortChangeEvent ev : late) {\n    assertFalse(\"Test setup error. Late and early overlap\",early.contains(ev));\n    assertFalse(\"Test setup error. Late and any overlap\",any.contains(ev));\n  }\n  for (  PortChangeEvent ev : any) {\n    assertFalse(\"Test setup error. Anytime and early overlap\",early.contains(ev));\n    assertFalse(\"Test setup error. Anytime and late overlap\",late.contains(ev));\n  }\n  for (  PortChangeEvent a : actualEvents) {\n    if (early.remove(a)) {\n      continue;\n    }\n    if (any.remove(a)) {\n      continue;\n    }\n    if (late.remove(a)) {\n      if (!early.isEmpty()) {\n        fail(a + \" is in late list, but haven't seen all required \" + \"early events. \"+ inputDesc);\n      }\n else {\n        continue;\n      }\n    }\n    fail(a + \" was not expected. \" + inputDesc);\n  }\n  if (!early.isEmpty())   fail(\"Elements left in early: \" + early + \". \"+ inputDesc);\n  if (!late.isEmpty())   fail(\"Elements left in late: \" + late + \". \"+ inputDesc);\n  if (!any.isEmpty())   fail(\"Elements left in any: \" + any + \". \"+ inputDesc);\n}"}
{"ids": "12943", "raw_code": "public static Class needClass(String property) throws NoSuchPropertyException {\n  String value=needProperty(property);\n  Class c=null;\n  try {\n    c=Class.forName(value);\n  }\n catch (  ClassNotFoundException e) {\n    throw new NoSuchPropertyException(\"Cannot find class `\" + value + \"'. Check property `\"+ property+ \"' in configuration files\");\n  }\n  return c;\n}"}
{"ids": "85581", "raw_code": "DependencySpec createModuleDependency(ArtifactResult i,boolean forceExport){\n  if (JDK_MODULE_NAMES.contains(i.name()))   return JDK_DEPENDENCY;\n  final ModuleIdentifier mi=createModuleIdentifier(i);\n  final boolean export=forceExport || (i.importType() == ImportType.EXPORT);\n  return DependencySpec.createModuleDependencySpec(PathFilters.getMetaInfSubdirectoriesWithoutMetaInfFilter(),(export ? PathFilters.acceptAll() : PathFilters.rejectAll()),this,mi,i.importType() == ImportType.OPTIONAL);\n}"}
{"ids": "58070", "raw_code": "public void appendNodes(NodeSet nodes){\n  int nNodes=nodes.size();\n  if (null == m_map) {\n    m_mapSize=nNodes + m_blocksize;\n    m_map=new Node[m_mapSize];\n  }\n else   if ((m_firstFree + nNodes) >= m_mapSize) {\n    m_mapSize+=(nNodes + m_blocksize);\n    Node newMap[]=new Node[m_mapSize];\n    System.arraycopy(m_map,0,newMap,0,m_firstFree + nNodes);\n    m_map=newMap;\n  }\n  System.arraycopy(nodes.m_map,0,m_map,m_firstFree,nNodes);\n  m_firstFree+=nNodes;\n}"}
{"ids": "14122", "raw_code": "public void makeImmutable(){\n  if (isMutable) {\n    isMutable=false;\n  }\n}"}
{"ids": "22205", "raw_code": "private int readEpoch(File epochFile){\n  int epoch=-1;\n  if (!epochFile.exists()) {\n    return epoch;\n  }\n  try {\n    Scanner scanner=new Scanner(epochFile);\n    epoch=scanner.nextInt();\n    log.debug(\"Got epoch {} from file {}\",epoch,epochFile.getName());\n  }\n catch (  IOException e) {\n    log.error(\"read epoch from file({}) failed. e=\",epochFile.getName(),e);\n  }\n  return epoch;\n}"}
{"ids": "6644", "raw_code": "private int fastMatch(String sha1){\n  Integer idx=_indexes.get(sha1);\n  if (idx == null)   return -1;\n else   return idx.intValue();\n}"}
{"ids": "22784", "raw_code": "public static void format(String format,Object... args){\n  if (!isDisabled()) {\n    print(String.format(format,args));\n  }\n}"}
{"ids": "87068", "raw_code": "public void concatenate(SIPObjectList otherList){\n  super.concatenate(otherList);\n}"}
{"ids": "4227", "raw_code": "@Override @Transactional protected void persist(Collection<RawProtein<PrintsRawMatch>> filteredProteins,Map<String,Signature> modelIdToSignatureMap,Map<String,Protein> proteinIdToProteinMap){\n  for (  RawProtein<PrintsRawMatch> rawProtein : filteredProteins) {\n    Protein protein=proteinIdToProteinMap.get(rawProtein.getProteinIdentifier());\n    if (protein == null) {\n      throw new IllegalStateException(\"Cannot store match to a protein that is not in database \" + \"[protein ID= \" + rawProtein.getProteinIdentifier() + \"]\");\n    }\n    Set<FingerPrintsMatch.FingerPrintsLocation> locations=null;\n    String currentSignatureAc=null;\n    Signature currentSignature=null;\n    PrintsRawMatch lastRawMatch=null;\n    final TreeSet<PrintsRawMatch> sortedMatches=new TreeSet<PrintsRawMatch>(PRINTS_RAW_MATCH_COMPARATOR);\n    sortedMatches.addAll(rawProtein.getMatches());\n    FingerPrintsMatch match=null;\n    for (    PrintsRawMatch rawMatch : sortedMatches) {\n      if (rawMatch == null) {\n        continue;\n      }\n      if (currentSignatureAc == null || !currentSignatureAc.equals(rawMatch.getModelId())) {\n        if (currentSignatureAc != null) {\n          if (match != null) {\n            entityManager.persist(match);\n          }\n          match=new FingerPrintsMatch(currentSignature,lastRawMatch.getEvalue(),lastRawMatch.getGraphscan(),locations);\n          protein.addMatch(match);\n        }\n        locations=new HashSet<FingerPrintsMatch.FingerPrintsLocation>();\n        currentSignatureAc=rawMatch.getModelId();\n        currentSignature=modelIdToSignatureMap.get(currentSignatureAc);\n        if (currentSignature == null) {\n          throw new IllegalStateException(\"Cannot find PRINTS signature \" + currentSignatureAc + \" in the database.\");\n        }\n      }\n      locations.add(new FingerPrintsMatch.FingerPrintsLocation(rawMatch.getLocationStart(),boundedLocationEnd(protein,rawMatch),rawMatch.getPvalue(),rawMatch.getScore(),rawMatch.getMotifNumber()));\n      lastRawMatch=rawMatch;\n    }\n    if (lastRawMatch != null) {\n      match=new FingerPrintsMatch(currentSignature,lastRawMatch.getEvalue(),lastRawMatch.getGraphscan(),locations);\n      protein.addMatch(match);\n      entityManager.persist(match);\n    }\n  }\n}"}
{"ids": "70046", "raw_code": "public Builder withKeyStorePassword(String trustStorePassword){\n  properties.setProperty(NettyOptions.SSL_KEY_STORE_PASSWORD,Assert.notNull(trustStorePassword,\"trustStorePassword\"));\n  return this;\n}"}
{"ids": "10257", "raw_code": "public static String suffix(String string,String suffix){\n  if (string.endsWith(suffix) == false) {\n    string+=suffix;\n  }\n  return string;\n}"}
{"ids": "32901", "raw_code": "public Point2D(double x,double y){\n  if (Double.isInfinite(x) || Double.isInfinite(y))   throw new IllegalArgumentException(\"Coordinates must be finite\");\n  if (Double.isNaN(x) || Double.isNaN(y))   throw new IllegalArgumentException(\"Coordinates cannot be NaN\");\n  if (x == 0.0)   this.x=0.0;\n else   this.x=x;\n  if (y == 0.0)   this.y=0.0;\n else   this.y=y;\n}"}
{"ids": "14586", "raw_code": "public static void serverFailed(String serviceName){\n  if (serviceName.startsWith(validRemoteURL)) {\n    serverFailed=true;\n  }\n else {\n    remoteStubs.remove(serviceName);\n  }\n}"}
{"ids": "6767", "raw_code": "public RequestHandler(PokemonGo api,OkHttpClient client){\n  this.api=api;\n  this.client=client;\n  apiEndpoint=ApiSettings.API_ENDPOINT;\n  asyncHttpThread=new Thread(this,\"Async HTTP Thread\");\n  asyncHttpThread.setDaemon(true);\n  asyncHttpThread.start();\n}"}
{"ids": "22577", "raw_code": "public VNXeCommandResult removeLunsFromConsistencyGroup(String cgId,List<String> luns){\n  LunGroupModifyParam param=new LunGroupModifyParam();\n  List<LunAddParam> lunRemoves=new ArrayList<LunAddParam>();\n  for (  String lunId : luns) {\n    VNXeBase lun=new VNXeBase(lunId);\n    LunAddParam lunAdd=new LunAddParam();\n    lunAdd.setLun(lun);\n    lunRemoves.add(lunAdd);\n  }\n  param.setLunRemove(lunRemoves);\n  ConsistencyGroupRequests req=new ConsistencyGroupRequests(_khClient);\n  return req.modifyConsistencyGroupSync(cgId,param);\n}"}
{"ids": "74931", "raw_code": "private static boolean notInstanceAvailable(){\n  if (sInstance == null) {\n    if (!sTrainingTaskFuture.isDone()) {\n      try {\n        sInstance=sTrainingTaskFuture.get();\n        return false;\n      }\n catch (      InterruptedException|ExecutionException e) {\n        e.printStackTrace();\n        return true;\n      }\n    }\n else {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "83729", "raw_code": "public void readData(DataInput din) throws IOException {\n  status=din.readUnsignedShort();\n  events=din.readUnsignedShort();\n}"}
{"ids": "83456", "raw_code": "public void remove(String identifier,ActiveConnectionRecord record){\nsynchronized (records) {\n    Set<ActiveConnectionRecord> connections=records.get(identifier);\n    assert (connections != null);\n    connections.remove(record);\n    if (connections.isEmpty())     records.remove(identifier);\n  }\n}"}
{"ids": "22062", "raw_code": "private String buildMetroProintPlacementStatusString(){\n  StringBuffer placementStatusBuf=new StringBuffer();\n  if (placementStatus != null) {\n    placementStatusBuf.append(String.format(\"%nPrimary Cluster\"));\n    placementStatusBuf.append(placementStatus.toString(dbClient));\n  }\n  if (secondaryPlacementStatus != null) {\n    placementStatusBuf.append(String.format(\"%nSecondary Cluster\"));\n    placementStatusBuf.append(secondaryPlacementStatus.toString(dbClient));\n  }\n  return placementStatusBuf.toString();\n}"}
{"ids": "71203", "raw_code": "private boolean hasSequence(Subgraph graph){\n  int oddDegreeCount=0;\n  for (Iterator i=graph.nodeIterator(); i.hasNext(); ) {\n    Node node=(Node)i.next();\n    if (node.getDegree() % 2 == 1)     oddDegreeCount++;\n  }\n  return oddDegreeCount <= 2;\n}"}
{"ids": "71805", "raw_code": "public void ensureAdditionalCapacity(final int size){\n  final int newCount=visible.position() + size;\n  if (newCount > visible.capacity()) {\n    final ByteBuffer newByteBuffer=ByteBuffer.allocate(Math.max(visible.capacity() << 1,newCount));\n    visible.flip();\n    visible=newByteBuffer.put(visible);\n  }\n}"}
{"ids": "66790", "raw_code": "public void forceReload(File file){\n  fFilesToReoad.add(file);\n}"}
{"ids": "47961", "raw_code": "private static long longMultiplyPowerTen(long val,int n){\n  if (val == 0 || n <= 0)   return val;\n  long[] tab=LONG_TEN_POWERS_TABLE;\n  long[] bounds=THRESHOLDS_TABLE;\n  if (n < tab.length && n < bounds.length) {\n    long tenpower=tab[n];\n    if (val == 1)     return tenpower;\n    if (Math.abs(val) <= bounds[n])     return val * tenpower;\n  }\n  return INFLATED;\n}"}
{"ids": "71371", "raw_code": "public static int wildCompare(String searchIn,String searchForWildcard){\n  if ((searchIn == null) || (searchForWildcard == null)) {\n    return WILD_COMPARE_NO_MATCH;\n  }\n  if (searchForWildcard.equals(\"%\")) {\n    return WILD_COMPARE_MATCH_WITH_WILD;\n  }\n  int result=WILD_COMPARE_NO_MATCH;\n  char wildcardMany='%';\n  char wildcardOne='_';\n  char wildcardEscape='\\\\';\n  int searchForPos=0;\n  int searchForEnd=searchForWildcard.length();\n  int searchInPos=0;\n  int searchInEnd=searchIn.length();\n  while (searchForPos != searchForEnd) {\n    char wildstrChar=searchForWildcard.charAt(searchForPos);\n    while ((searchForWildcard.charAt(searchForPos) != wildcardMany) && (wildstrChar != wildcardOne)) {\n      if ((searchForWildcard.charAt(searchForPos) == wildcardEscape) && ((searchForPos + 1) != searchForEnd)) {\n        searchForPos++;\n      }\n      if ((searchInPos == searchInEnd) || (Character.toUpperCase(searchForWildcard.charAt(searchForPos++)) != Character.toUpperCase(searchIn.charAt(searchInPos++)))) {\n        return WILD_COMPARE_MATCH_WITH_WILD;\n      }\n      if (searchForPos == searchForEnd) {\n        return ((searchInPos != searchInEnd) ? WILD_COMPARE_MATCH_WITH_WILD : WILD_COMPARE_MATCH_NO_WILD);\n      }\n      result=WILD_COMPARE_MATCH_WITH_WILD;\n    }\n    if (searchForWildcard.charAt(searchForPos) == wildcardOne) {\n      do {\n        if (searchInPos == searchInEnd) {\n          return (result);\n        }\n        searchInPos++;\n      }\n while ((++searchForPos < searchForEnd) && (searchForWildcard.charAt(searchForPos) == wildcardOne));\n      if (searchForPos == searchForEnd) {\n        break;\n      }\n    }\n    if (searchForWildcard.charAt(searchForPos) == wildcardMany) {\n      char cmp;\n      searchForPos++;\n      for (; searchForPos != searchForEnd; searchForPos++) {\n        if (searchForWildcard.charAt(searchForPos) == wildcardMany) {\n          continue;\n        }\n        if (searchForWildcard.charAt(searchForPos) == wildcardOne) {\n          if (searchInPos == searchInEnd) {\n            return (WILD_COMPARE_NO_MATCH);\n          }\n          searchInPos++;\n          continue;\n        }\n        break;\n      }\n      if (searchForPos == searchForEnd) {\n        return WILD_COMPARE_MATCH_NO_WILD;\n      }\n      if (searchInPos == searchInEnd) {\n        return WILD_COMPARE_NO_MATCH;\n      }\n      if (((cmp=searchForWildcard.charAt(searchForPos)) == wildcardEscape) && ((searchForPos + 1) != searchForEnd)) {\n        cmp=searchForWildcard.charAt(++searchForPos);\n      }\n      searchForPos++;\n      do {\n        while ((searchInPos != searchInEnd) && (Character.toUpperCase(searchIn.charAt(searchInPos)) != Character.toUpperCase(cmp))) {\n          searchInPos++;\n        }\n        if (searchInPos++ == searchInEnd) {\n          return WILD_COMPARE_NO_MATCH;\n        }\n{\n          int tmp=wildCompare(searchIn,searchForWildcard);\n          if (tmp <= 0) {\n            return (tmp);\n          }\n        }\n      }\n while ((searchInPos != searchInEnd) && (searchForWildcard.charAt(0) != wildcardMany));\n      return WILD_COMPARE_NO_MATCH;\n    }\n  }\n  return ((searchInPos != searchInEnd) ? WILD_COMPARE_MATCH_WITH_WILD : WILD_COMPARE_MATCH_NO_WILD);\n}"}
{"ids": "34918", "raw_code": "boolean compareMethods(@Nullable Method a,@Nullable Method b){\n  if ((a == null) != (b == null)) {\n    return false;\n  }\n  if (a != null && b != null) {\n    if (!a.equals(b)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "11017", "raw_code": "public Object remove(String markername){\n  return prefixLibrarian.remove(markername);\n}"}
{"ids": "63041", "raw_code": "String formatLastModified(String fileName){\nsynchronized (dateFormat) {\n    return dateFormat.format(new Date(FileUtils.lastModified(fileName)));\n  }\n}"}
{"ids": "49084", "raw_code": "public TrueTypeFont(String platname,Object nativeNames,int fIndex,boolean javaRasterizer,boolean useFilePool) throws FontFormatException {\n  super(platname,nativeNames);\n  useJavaRasterizer=javaRasterizer;\n  fontRank=Font2D.TTF_RANK;\n  try {\n    verify(useFilePool);\n    init(fIndex);\n    if (!useFilePool) {\n      close();\n    }\n  }\n catch (  Throwable t) {\n    close();\n    if (t instanceof FontFormatException) {\n      throw (FontFormatException)t;\n    }\n else {\n      throw new FontFormatException(\"Unexpected runtime exception.\");\n    }\n  }\n  Disposer.addObjectRecord(this,disposerRecord);\n}"}
{"ids": "55775", "raw_code": "public void calcMinMax(){\n  if (mDataSets == null)   return;\n  mYMax=-Float.MAX_VALUE;\n  mYMin=Float.MAX_VALUE;\n  mXMax=-Float.MAX_VALUE;\n  mXMin=Float.MAX_VALUE;\n  for (int i=0, size=mDataSets.size(); i < size; i++) {\n    T set=mDataSets.get(i);\n    calcMinMax(set);\n  }\n  mLeftAxisMax=-Float.MAX_VALUE;\n  mLeftAxisMin=Float.MAX_VALUE;\n  mRightAxisMax=-Float.MAX_VALUE;\n  mRightAxisMin=Float.MAX_VALUE;\n  T firstLeft=getFirstLeft(mDataSets);\n  if (firstLeft != null) {\n    mLeftAxisMax=firstLeft.getYMax();\n    mLeftAxisMin=firstLeft.getYMin();\n    for (int i=0; i < mDataSets.size(); i++) {\n      T dataSet=mDataSets.get(i);\n      if (dataSet.getAxisDependency() == AxisDependency.LEFT) {\n        if (dataSet.getYMin() < mLeftAxisMin)         mLeftAxisMin=dataSet.getYMin();\n        if (dataSet.getYMax() > mLeftAxisMax)         mLeftAxisMax=dataSet.getYMax();\n      }\n    }\n  }\n  T firstRight=getFirstRight(mDataSets);\n  if (firstRight != null) {\n    mRightAxisMax=firstRight.getYMax();\n    mRightAxisMin=firstRight.getYMin();\n    for (int i=0; i < mDataSets.size(); i++) {\n      T dataSet=mDataSets.get(i);\n      if (dataSet.getAxisDependency() == AxisDependency.RIGHT) {\n        if (dataSet.getYMin() < mRightAxisMin)         mRightAxisMin=dataSet.getYMin();\n        if (dataSet.getYMax() > mRightAxisMax)         mRightAxisMax=dataSet.getYMax();\n      }\n    }\n  }\n}"}
{"ids": "7802", "raw_code": "public LogarithmicAxis(String label){\n  super(label);\n  setupNumberFmtObj();\n}"}
{"ids": "4951", "raw_code": "protected final boolean has_cycle_recu(Set<BrdItem> p_visited_items,BrdItem p_search_item,BrdItem p_come_from_item,boolean p_ignore_areas){\n  if (p_ignore_areas && (this instanceof BrdAreaConduction))   return false;\n  Collection<BrdItem> contact_list=get_normal_contacts();\n  if (contact_list == null)   return false;\n  for (  BrdItem curr_contact : contact_list) {\n    if (curr_contact == p_come_from_item)     continue;\n    if (curr_contact == p_search_item)     return true;\n    if (!p_visited_items.add(curr_contact))     continue;\n    if (curr_contact.has_cycle_recu(p_visited_items,p_search_item,this,p_ignore_areas))     return true;\n  }\n  return false;\n}"}
{"ids": "8101", "raw_code": "public static boolean isCallingClassReflectionAvailable(){\n  return true;\n}"}
{"ids": "77000", "raw_code": "private static String[] formGrams(String text,int ng){\n  int len=text.length();\n  String[] res=new String[len - ng + 1];\n  for (int i=0; i < len - ng + 1; i++) {\n    res[i]=text.substring(i,i + ng);\n  }\n  return res;\n}"}
{"ids": "55325", "raw_code": "public void loadSettingsFromJson(){\nsynchronized (LOCK) {\n    loadSettingsFromJson(defaultFile);\n    for (    String fileName : files) {\n      loadSettingsFromJson(fileName);\n    }\n  }\n}"}
{"ids": "74294", "raw_code": "public void loadTrainIcons(){\n  for (  Train train : getTrainsByIdList()) {\n    train.loadTrainIcon();\n  }\n}"}
{"ids": "49737", "raw_code": "public final String translate(final CharSequence input){\n  if (input == null) {\n    return null;\n  }\n  try {\n    final StringWriter writer=new StringWriter(input.length() * 2);\n    translate(input,writer);\n    return writer.toString();\n  }\n catch (  final IOException ioe) {\n    throw new RuntimeException(ioe);\n  }\n}"}
{"ids": "39025", "raw_code": "public void insertReverseSorted(final int idx,final double distance){\n  int i=0;\n  for (  ListNode temp : m_List) {\n    if (temp.distance < distance) {\n      break;\n    }\n    i++;\n  }\n  m_List.add(i,new ListNode(idx,distance));\n}"}
{"ids": "76890", "raw_code": "public double normalDistance(final double x,final double y,final double z,final Membership... bounds){\n  final double dist=evaluate(x,y,z);\n  final double perpX=x - dist * this.x;\n  final double perpY=y - dist * this.y;\n  final double perpZ=z - dist * this.z;\n  if (!meetsAllBounds(perpX,perpY,perpZ,bounds)) {\n    return Double.POSITIVE_INFINITY;\n  }\n  return Math.abs(dist);\n}"}
{"ids": "33489", "raw_code": "private void generateVectorDrawableResult(VectorDrawable vector,String nextVectorName,boolean isLast,boolean isFirst) throws IOException {\n  CustomLogger.logError(\"generateVectorDrawableResult\" + vector.getFileName() + \" islast==\"+ isLast);\n  if (!vectorAlreadyDefined.contains(vector.getFileName())) {\n    currentVectorFileName=vector.getFileName();\n    CustomLogger.logError(\"Generating the following file \" + currentVectorFileName);\n    File vectorFile=new File(drawableFolder,currentVectorFileName + \".xml\");\n    BufferedWriter vectorBW=createIt(vectorFile);\n    CustomLogger.log(\"Generating the following file \" + vectorFile.getAbsolutePath());\n    generateVectorDrawable(vector,vectorBW,isLast);\n    vectorAlreadyDefined.add(vector.getFileName());\n    vectorBW.flush();\n    vectorBW.close();\n  }\n  if (!isLast) {\n    File animatedVectorFile=new File(drawableFolder,animatedVector.replace(\"#fileName\",currentVectorFileName));\n    BufferedWriter animatedVectorBW=createIt(animatedVectorFile);\n    CustomLogger.log(\"Generating the following file \" + animatedVectorFile.getAbsolutePath());\n    CustomLogger.logError(\"----------->Generating the following file \" + animatedVectorFile.getAbsolutePath() + \", next VectorName=\"+ nextVectorName);\n    generateAnimatedVector(vector,animatedVectorBW,nextVectorName,false);\n    generateAnimatorSet(vector,false);\n    animatedVectorBW.flush();\n    animatedVectorBW.close();\n  }\n  if (!isLast) {\n    File animatedVectorFile=new File(drawableFolder,animatedVector.replace(\"#fileName\",currentVectorFileName + reverse));\n    BufferedWriter animatedVectorBW=createIt(animatedVectorFile);\n    CustomLogger.log(\"Generating the following file \" + animatedVectorFile.getAbsolutePath());\n    CustomLogger.logError(\"----------->Generating the following file \" + animatedVectorFile.getAbsolutePath() + \", next VectorName=\"+ nextVectorName);\n    generateAnimatedVector(vector,animatedVectorBW,nextVectorName,true);\n    generateAnimatorSet(vector,true);\n    animatedVectorBW.flush();\n    animatedVectorBW.close();\n  }\n}"}
{"ids": "83479", "raw_code": "public void access(){\n  lastAccessedTime=System.currentTimeMillis();\n}"}
{"ids": "82266", "raw_code": "public void writeToObject(Object object){\n  try {\n    Method method=BeanUtils.getWriteMethod(object.getClass(),getName(),getType());\n    if (method != null) {\n      method.invoke(object,new Object[]{getValue()});\n    }\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "24707", "raw_code": "private HttpURLConnection doHTTPPostRequest(String location,String clientSessionId,Map<String,String> metadata,String postBody) throws CommunicationException {\n  OutputStreamWriter writer=null;\n  try {\n    URL url=new URL(location);\n    HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(\"POST\");\n    connection.addRequestProperty(\"Content-Type\",\"application/json\");\n    if (clientSessionId != null) {\n      connection.addRequestProperty(HTTP_HEADER_SESSION_ID,\"GCS v1Client:\" + clientSessionId);\n    }\n    if (metadata != null) {\n      connection.addRequestProperty(HTTP_HEADER_METADATA,GcUtil.getBase64EncodedMetadata(metadata));\n    }\n    if (Constants.ENABLE_REQUEST_LOGGING) {\n      logRequest(connection,postBody);\n    }\n    connection.setDoOutput(true);\n    writer=new OutputStreamWriter(connection.getOutputStream(),\"UTF-8\");\n    writer.write(postBody);\n    writer.flush();\n    if (connection.getResponseCode() != 200) {\n      throw new CommunicationException(\"No status 200 received, status is :\" + connection.getResponseCode());\n    }\n    return connection;\n  }\n catch (  MalformedURLException e) {\n    Log.e(TAG,\"doHTTPPostRequest, Unable to parse url \" + location);\n    throw new CommunicationException(\"Unable to parse url \" + location);\n  }\ncatch (  IOException e) {\n    Log.e(TAG,\"doHTTPPostRequest, IOException while opening connection \" + e.getMessage());\n    throw new CommunicationException(\"IOException while opening connection \" + e.getMessage(),e);\n  }\n finally {\n    if (writer != null) {\n      try {\n        writer.close();\n      }\n catch (      IOException e) {\n        Log.i(TAG,\"doHTTPPostRequest, IOException while closing connection \" + e.getMessage());\n      }\n    }\n  }\n}"}
{"ids": "85551", "raw_code": "void ioMessage(Throwable ex){\n  log.printLines(PrefixKind.JAVAC,\"msg.io\");\n  ex.printStackTrace(log.getWriter(WriterKind.NOTICE));\n}"}
{"ids": "32089", "raw_code": "public static Collection<UUID> nodeIds(@Nullable Collection<? extends ClusterNode> nodes){\n  if (nodes == null || nodes.isEmpty())   return Collections.emptyList();\n  return F.viewReadOnly(nodes,node2id());\n}"}
{"ids": "25221", "raw_code": "public static InputStream toInputStream(final CharSequence input,final Charset encoding){\n  return IOUtils.toInputStream(input.toString(),encoding);\n}"}
{"ids": "29230", "raw_code": "public static boolean matchesXMLString(char[] buf,int off,int end,String str){\n  int len=str.length();\n  if (len != end - off)   return false;\n  for (int i=0; i < len; off+=1, i++) {\n    if (buf[off] != str.charAt(i))     return false;\n  }\n  return true;\n}"}
{"ids": "40379", "raw_code": "public double r(){\n  return Math.sqrt(x * x + y * y);\n}"}
{"ids": "28846", "raw_code": "public void sign(KeyPair keypair) throws IOException {\n  if (namelist.isEmpty()) {\n    throw new IllegalStateException(\"No domain was set\");\n  }\n  if (keypair == null) {\n    throw new IllegalArgumentException(\"keypair must not be null\");\n  }\n  try {\n    GeneralName[] gns=new GeneralName[namelist.size()];\n    for (int ix=0; ix < namelist.size(); ix++) {\n      gns[ix]=new GeneralName(GeneralName.dNSName,namelist.get(ix));\n    }\n    GeneralNames subjectAltName=new GeneralNames(gns);\n    PKCS10CertificationRequestBuilder p10Builder=new JcaPKCS10CertificationRequestBuilder(namebuilder.build(),keypair.getPublic());\n    ExtensionsGenerator extensionsGenerator=new ExtensionsGenerator();\n    extensionsGenerator.addExtension(Extension.subjectAlternativeName,false,subjectAltName);\n    p10Builder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_extensionRequest,extensionsGenerator.generate());\n    PrivateKey pk=keypair.getPrivate();\n    JcaContentSignerBuilder csBuilder=new JcaContentSignerBuilder(pk instanceof ECKey ? EC_SIGNATURE_ALG : SIGNATURE_ALG);\n    ContentSigner signer=csBuilder.build(pk);\n    csr=p10Builder.build(signer);\n  }\n catch (  OperatorCreationException ex) {\n    throw new IOException(\"Could not generate CSR\",ex);\n  }\n}"}
{"ids": "30286", "raw_code": "void removeEmptyRows(final List list){\n  for (final Iterator<ReceiptDetailInfo> detail=list.iterator(); detail.hasNext(); )   if (detail.next() == null)   detail.remove();\n}"}
{"ids": "68425", "raw_code": "private void add(String text,Text textNode){\n  int startIndex=builder.length();\n  builder.append(text);\n  int endIndex=builder.length();\n  textRuns.add(new TextRun(textNode,startIndex,endIndex));\n}"}
{"ids": "9739", "raw_code": "public DNetscapeBaseUrl(JDialog parent){\n  super(parent);\n  setTitle(res.getString(\"DNetscapeBaseUrl.Title\"));\n  initComponents();\n}"}
{"ids": "46998", "raw_code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  init(getName());\n}"}
{"ids": "16552", "raw_code": "public void appendRow(RowSpec rowSpec){\n  checkNotNull(rowSpec,\"The row spec must not be null.\");\n  rowSpecs.add(rowSpec);\n}"}
{"ids": "56663", "raw_code": "public static <T>ReactiveSeq<T> fromPublisher(final Publisher<? extends T> publisher){\n  Objects.requireNonNull(publisher);\n  final SeqSubscriber<T> sub=SeqSubscriber.subscriber();\n  publisher.subscribe(sub);\n  return sub.stream();\n}"}
{"ids": "32577", "raw_code": "public void multiplyAllValuesBy(final double multiplyBy,final int RoundType){\n  for (  final T t : keySet()) {\n    double val=m_values.get(t);\nswitch (RoundType) {\ncase 1:\n      val=Math.floor(val * multiplyBy);\n    break;\ncase 2:\n  val=Math.round(val * multiplyBy);\nbreak;\ncase 3:\nval=Math.ceil(val * multiplyBy);\nbreak;\ndefault :\nval=val * multiplyBy;\nbreak;\n}\nput(t,(int)val);\n}\n}"}
{"ids": "66233", "raw_code": "protected void paintContentBorderBottomEdge(Graphics g,int tabPlacement,int selectedIndex,int x,int y,int w,int h){\n  boolean leftToRight=CompiereUtils.isLeftToRight(tabPane);\n  int bottom=y + h - 1;\n  int right=x + w - 1;\n  Rectangle selRect=selectedIndex < 0 ? null : getTabBounds(selectedIndex,calcRect);\n  g.setColor(shadow);\n  if (tabPlacement != BOTTOM || selectedIndex < 0 || (selRect.x < x || selRect.x > x + w)) {\n    g.setColor(darkShadow);\n    g.drawLine(x,y + h - 1,x + w - 1,y + h - 1);\n  }\n else {\n    boolean lastInRun=isLastInRun(selectedIndex);\n    g.setColor(darkShadow);\n    if (leftToRight || lastInRun)     g.drawLine(x,bottom,selRect.x,bottom);\n else     g.drawLine(x,bottom,selRect.x - 1,bottom);\n    if (selRect.x + selRect.width < x + w - 2) {\n      if (leftToRight && !lastInRun)       g.drawLine(selRect.x + selRect.width,bottom,right,bottom);\n else       g.drawLine(selRect.x + selRect.width - 1,bottom,right,bottom);\n    }\n  }\n}"}
{"ids": "8226", "raw_code": "public static void upto(double self,Number to,@ClosureParams(FirstParam.class) Closure closure){\n  double to1=to.doubleValue();\n  if (self <= to1) {\n    for (double i=self; i <= to1; i++) {\n      closure.call(i);\n    }\n  }\n else   throw new GroovyRuntimeException(\"The argument (\" + to + \") to upto() cannot be less than the value (\"+ self+ \") it's called on.\");\n}"}
{"ids": "24651", "raw_code": "public void save(String type,List<ElasticSearchDoc> docs){\n  if (docs != null && !docs.isEmpty()) {\n    List<List<ElasticSearchDoc>> partitionedDocs=Lists.partition(docs,100);\n    partitionedDocs.forEach(null);\n  }\n}"}
{"ids": "57933", "raw_code": "public void error(SourceLocator srcLctr,String msg) throws TransformerException {\n  error(srcLctr,null,null,msg,null);\n}"}
{"ids": "14788", "raw_code": "void removeListener(String listenerID){\n  if (listenerObjects != null) {\nsynchronized (listenerObjects) {\n      listenerObjects.remove(listenerID);\n      if (listenerObjects.isEmpty()) {\n        deregisterListener();\n      }\n    }\n    if (debug.messageEnabled()) {\n      debug.message(\"ServiceConfigManagerImpl(\" + serviceName + \"):removeListener ListenerId: \"+ listenerID);\n    }\n  }\n}"}
{"ids": "36405", "raw_code": "@Deprecated public void registerCredentials(UserCredential authentication){\n  wallet.put(authentication.getURL(),authentication);\n}"}
{"ids": "64801", "raw_code": "public boolean isAGCEnabled(){\n  return mAGCEnabled.get();\n}"}
{"ids": "12902", "raw_code": "protected LinkedList<String> splitIntoAllophones(String phoneString){\n  LinkedList<String> phoneList=new LinkedList<String>();\n  for (int i=0; i < phoneString.length(); i++) {\n    String name=null;\n    for (int j=3; j >= 1; j--) {\n      if (i + j <= phoneString.length()) {\n        String candidate=phoneString.substring(i,i + j);\n        if (getAllophone(candidate) != null) {\n          name=candidate;\n          i+=j - 1;\n          break;\n        }\n      }\n    }\n    if (name != null) {\n      phoneList.add(name);\n    }\n  }\n  return phoneList;\n}"}
{"ids": "57229", "raw_code": "protected void addToMaintenanceQueue(NodePortTuple npt){\n  if (maintenanceQueue.contains(npt) == false) {\n    maintenanceQueue.add(npt);\n  }\n}"}
{"ids": "6122", "raw_code": "private boolean execute(boolean readResponse) throws IOException {\n  try {\n    httpEngine.sendRequest();\n    if (readResponse) {\n      httpEngine.readResponse();\n    }\n    return true;\n  }\n catch (  IOException e) {\n    if (handleFailure(e)) {\n      return false;\n    }\n else {\n      throw e;\n    }\n  }\n}"}
{"ids": "27254", "raw_code": "public BigdataSail(final Properties properties){\n  this(properties.getProperty(Options.NAMESPACE,Options.DEFAULT_NAMESPACE),new Journal(properties));\n  closeOnShutdown=true;\n  if (!exists()) {\n    try {\n      create(properties);\n    }\n catch (    InterruptedException|ExecutionException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}"}
{"ids": "61665", "raw_code": "public float convert(){\n  return Float.intBitsToFloat((int)bytes);\n}"}
{"ids": "18353", "raw_code": "protected int addNode(Node node,int parentIndex,int previousSibling,int forceNodeType){\n  int nodeIndex=m_nodes.size();\n  if (m_dtmIdent.size() == (nodeIndex >>> DTMManager.IDENT_DTM_NODE_BITS)) {\n    try {\n      if (m_mgr == null)       throw new ClassCastException();\n      DTMManagerDefault mgrD=(DTMManagerDefault)m_mgr;\n      int id=mgrD.getFirstFreeDTMID();\n      mgrD.addDTM(this,id,nodeIndex);\n      m_dtmIdent.addElement(id << DTMManager.IDENT_DTM_NODE_BITS);\n    }\n catch (    ClassCastException e) {\n      error(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DTMIDS_AVAIL,null));\n    }\n  }\n  m_size++;\n  int type;\n  if (NULL == forceNodeType)   type=node.getNodeType();\n else   type=forceNodeType;\n  if (Node.ATTRIBUTE_NODE == type) {\n    String name=node.getNodeName();\n    if (name.startsWith(\"xmlns:\") || name.equals(\"xmlns\")) {\n      type=DTM.NAMESPACE_NODE;\n    }\n  }\n  m_nodes.addElement(node);\n  m_firstch.setElementAt(NOTPROCESSED,nodeIndex);\n  m_nextsib.setElementAt(NOTPROCESSED,nodeIndex);\n  m_prevsib.setElementAt(previousSibling,nodeIndex);\n  m_parent.setElementAt(parentIndex,nodeIndex);\n  if (DTM.NULL != parentIndex && type != DTM.ATTRIBUTE_NODE && type != DTM.NAMESPACE_NODE) {\n    if (NOTPROCESSED == m_firstch.elementAt(parentIndex))     m_firstch.setElementAt(nodeIndex,parentIndex);\n  }\n  String nsURI=node.getNamespaceURI();\n  String localName=(type == Node.PROCESSING_INSTRUCTION_NODE) ? node.getNodeName() : node.getLocalName();\n  if (((type == Node.ELEMENT_NODE) || (type == Node.ATTRIBUTE_NODE)) && null == localName)   localName=node.getNodeName();\n  ExpandedNameTable exnt=m_expandedNameTable;\n  if (node.getLocalName() == null && (type == Node.ELEMENT_NODE || type == Node.ATTRIBUTE_NODE)) {\n  }\n  int expandedNameID=(null != localName) ? exnt.getExpandedTypeID(nsURI,localName,type) : exnt.getExpandedTypeID(type);\n  m_exptype.setElementAt(expandedNameID,nodeIndex);\n  indexNode(expandedNameID,nodeIndex);\n  if (DTM.NULL != previousSibling)   m_nextsib.setElementAt(nodeIndex,previousSibling);\n  if (type == DTM.NAMESPACE_NODE)   declareNamespaceInContext(parentIndex,nodeIndex);\n  return nodeIndex;\n}"}
{"ids": "23948", "raw_code": "public FileProcessController(final FileControllerParameters arguments,final int pid){\n  this(arguments,pid,Long.getLong(STATUS_TIMEOUT_PROPERTY,60 * 1000),TimeUnit.MILLISECONDS);\n}"}
{"ids": "15499", "raw_code": "protected Set<Future<Void>> send(String channelId,Object message){\n  Collection<Session> sessions=(channelId != null) ? socketSessions.get(channelId) : null;\n  if (sessions != null && !sessions.isEmpty()) {\n    Set<Future<Void>> results=new HashSet<>(sessions.size());\n    String json=Json.encode(message);\n    for (    Session session : sessions) {\n      if (session.isOpen()) {\n        send(session,json,results);\n      }\n    }\n    return results;\n  }\n  return emptySet();\n}"}
{"ids": "8337", "raw_code": "public Object attribute(Object key){\n  return (attributes != null) ? attributes.get(key) : null;\n}"}
{"ids": "67225", "raw_code": "public Response doPut(String url){\n  return doPut(url,null);\n}"}
{"ids": "78728", "raw_code": "public void unregisterDropControllers(){\n  dropControllerList.clear();\n}"}
{"ids": "33099", "raw_code": "public static String createLink(String uri,String label){\n  return \"<a href='\" + uri + \"'>\"+ label+ \"</a>\";\n}"}
{"ids": "43601", "raw_code": "public int size(){\n  return segments.size();\n}"}
{"ids": "84914", "raw_code": "public void addOperand(int startTick,int endTick,String text,Lifeline constraintLifeline) throws SequenceDiagramCheckedException {\n  if (operands.size() == 0 && this.startTick != startTick) {\n    throw new IllegalArgumentException(\"The start tick of the first operand must be equal to the start tick of the combined fragment\");\n  }\n  operands.add(new Operand(startTick,endTick,text,constraintLifeline));\n}"}
{"ids": "26711", "raw_code": "public static Number asin(Number a){\n  return Math.asin(a.doubleValue());\n}"}
{"ids": "49279", "raw_code": "private void createAndAttachEvent(long ov) throws WindowsException {\n  long hEvent=CreateEvent(false,false);\n  UNSAFE.putAddress(ov + OFFSETOF_HEVENT,hEvent);\n}"}
{"ids": "39059", "raw_code": "@Override public int compareTo(String o){\n  int result;\n  int major;\n  int minor;\n  int revision;\n  int pnt;\n  int[] maj=new int[1];\n  int[] min=new int[1];\n  int[] rev=new int[1];\n  int[] point=new int[1];\n  parseVersion(o,maj,min,rev,point);\n  major=maj[0];\n  minor=min[0];\n  revision=rev[0];\n  pnt=point[0];\n  if (MAJOR < major) {\n    result=-1;\n  }\n else   if (MAJOR == major) {\n    if (MINOR < minor) {\n      result=-1;\n    }\n else     if (MINOR == minor) {\n      if (REVISION < revision) {\n        result=-1;\n      }\n else       if (REVISION == revision) {\n        if (POINT < pnt) {\n          result=-1;\n        }\n else         if (POINT == pnt) {\n          result=0;\n        }\n else {\n          result=1;\n        }\n      }\n else {\n        result=1;\n      }\n    }\n else {\n      result=1;\n    }\n  }\n else {\n    result=1;\n  }\n  return result;\n}"}
{"ids": "46042", "raw_code": "private void generateIntegrityKeyPair(boolean clientMode) throws UnsupportedEncodingException, IOException, NoSuchAlgorithmException {\n  byte[] cimagic=CLIENT_INT_MAGIC.getBytes(encoding);\n  byte[] simagic=SVR_INT_MAGIC.getBytes(encoding);\n  MessageDigest md5=MessageDigest.getInstance(\"MD5\");\n  byte[] keyBuffer=new byte[H_A1.length + cimagic.length];\n  System.arraycopy(H_A1,0,keyBuffer,0,H_A1.length);\n  System.arraycopy(cimagic,0,keyBuffer,H_A1.length,cimagic.length);\n  md5.update(keyBuffer);\n  byte[] Kic=md5.digest();\n  System.arraycopy(simagic,0,keyBuffer,H_A1.length,simagic.length);\n  md5.update(keyBuffer);\n  byte[] Kis=md5.digest();\n  if (logger.isLoggable(Level.FINER)) {\n    traceOutput(DI_CLASS_NAME,\"generateIntegrityKeyPair\",\"DIGEST12:Kic: \",Kic);\n    traceOutput(DI_CLASS_NAME,\"generateIntegrityKeyPair\",\"DIGEST13:Kis: \",Kis);\n  }\n  if (clientMode) {\n    myKi=Kic;\n    peerKi=Kis;\n  }\n else {\n    myKi=Kis;\n    peerKi=Kic;\n  }\n}"}
{"ids": "52304", "raw_code": "public static boolean isLocalFileUri(Uri uri){\n  final String scheme=getSchemeOrNull(uri);\n  return LOCAL_FILE_SCHEME.equals(scheme);\n}"}
{"ids": "6178", "raw_code": "public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){\n  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;\n}"}
{"ids": "73734", "raw_code": "public static boolean validSystemNameConfig(String systemName,char type){\n  if (!validSystemNameFormat(systemName,type)) {\n    return false;\n  }\n  int bit=getBitFromSystemName(systemName);\n  if ((type == 'T') || (type == 'L')) {\n    if ((bit <= 0) || (bit > OutputBits.getNumOutputBits())) {\n      return false;\n    }\n  }\n else   if (type == 'S') {\n    if ((bit <= 0) || (bit > InputBits.getNumInputBits())) {\n      return false;\n    }\n  }\n else {\n    log.error(\"Invalid type specification in validSystemNameConfig call\");\n    return false;\n  }\n  return true;\n}"}
{"ids": "11125", "raw_code": "public boolean mouseMoved(MouseEvent e){\n  EsriGraphicList list=getEsriGraphicList();\n  boolean ret=false;\n  if (list != null) {\n    OMGraphic omg=list.findClosest(e.getX(),e.getY(),4);\n    if (omg != null) {\n      int index;\n      Integer I=((Integer)omg.getAttribute(SHAPE_INDEX_ATTRIBUTE));\n      if (I != null) {\n        index=I.intValue();\n      }\n else {\n        index=list.indexOf(omg);\n      }\n      if (parentLayer == null) {\n        Component comp=getComponent();\n        if (comp instanceof Layer) {\n          parentLayer=(Layer)comp;\n        }\n      }\n      if (parentLayer != null) {\n        parentLayer.fireRequestToolTip(getDescription(index));\n      }\n      ret=true;\n    }\n else     if (parentLayer != null) {\n      parentLayer.fireHideToolTip();\n    }\n  }\n  return ret;\n}"}
{"ids": "24596", "raw_code": "private void push(final int type){\n  if (outputStack == null) {\n    outputStack=new int[10];\n  }\n  int n=outputStack.length;\n  if (outputStackTop >= n) {\n    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];\n    System.arraycopy(outputStack,0,t,0,n);\n    outputStack=t;\n  }\n  outputStack[outputStackTop++]=type;\n  int top=owner.inputStackTop + outputStackTop;\n  if (top > owner.outputStackMax) {\n    owner.outputStackMax=top;\n  }\n}"}
{"ids": "56836", "raw_code": "public void createDatabaseEntitiesForBusinessObjectDataNotificationRegistrationTesting(String namespace,List<String> notificationEventTypes,String businessObjectDefinitionNamespace,String businessObjectDefinitionName,List<String> fileTypes,List<String> storageNames,List<String> businessObjectDataStatuses,List<JobAction> jobActions){\n  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(namespace);\n  if (namespaceEntity == null) {\n    namespaceDaoTestHelper.createNamespaceEntity(namespace);\n  }\n  if (!CollectionUtils.isEmpty(notificationEventTypes)) {\n    for (    String notificationEventType : notificationEventTypes) {\n      NotificationEventTypeEntity notificationEventTypeEntity=notificationEventTypeDao.getNotificationEventTypeByCode(notificationEventType);\n      if (notificationEventTypeEntity == null) {\n        notificationRegistrationDaoTestHelper.createNotificationEventTypeEntity(notificationEventType);\n      }\n    }\n  }\n  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(new BusinessObjectDefinitionKey(businessObjectDefinitionNamespace,businessObjectDefinitionName));\n  if (businessObjectDefinitionEntity == null) {\n    businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(businessObjectDefinitionNamespace,businessObjectDefinitionName,AbstractServiceTest.DATA_PROVIDER_NAME,AbstractServiceTest.BDEF_DESCRIPTION);\n  }\n  if (!CollectionUtils.isEmpty(fileTypes)) {\n    for (    String businessObjectFormatFileType : fileTypes) {\n      fileTypeDaoTestHelper.createFileTypeEntity(businessObjectFormatFileType);\n    }\n  }\n  if (!CollectionUtils.isEmpty(storageNames)) {\n    for (    String storageName : storageNames) {\n      storageDaoTestHelper.createStorageEntity(storageName,StoragePlatformEntity.S3);\n    }\n  }\n  if (!CollectionUtils.isEmpty(businessObjectDataStatuses)) {\n    for (    String businessObjectDataStatus : businessObjectDataStatuses) {\n      BusinessObjectDataStatusEntity businessObjectDataStatusEntity=businessObjectDataStatusDao.getBusinessObjectDataStatusByCode(businessObjectDataStatus);\n      if (businessObjectDataStatusEntity == null) {\n        businessObjectDataStatusDaoTestHelper.createBusinessObjectDataStatusEntity(businessObjectDataStatus);\n      }\n    }\n  }\n  if (!CollectionUtils.isEmpty(jobActions)) {\n    for (    JobAction jobAction : jobActions) {\n      jobDefinitionDaoTestHelper.createJobDefinitionEntity(jobAction.getNamespace(),jobAction.getJobName(),String.format(\"Description of \\\"%s.%s\\\" job definition.\",jobAction.getNamespace(),jobAction.getJobName()),String.format(\"%s.%s.%s\",jobAction.getNamespace(),jobAction.getJobName(),AbstractServiceTest.ACTIVITI_ID));\n    }\n  }\n}"}
{"ids": "77439", "raw_code": "public boolean postData(InputStream data,Long length,OutputStream output,String type,URL url){\n  if (mockMode)   return true;\n  boolean success=true;\n  if (type == null)   type=DEFAULT_CONTENT_TYPE;\n  HttpURLConnection urlc=null;\n  try {\n    try {\n      urlc=(HttpURLConnection)url.openConnection();\n      try {\n        urlc.setRequestMethod(\"POST\");\n      }\n catch (      ProtocolException e) {\n        fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\" + e);\n      }\n      urlc.setDoOutput(true);\n      urlc.setDoInput(true);\n      urlc.setUseCaches(false);\n      urlc.setAllowUserInteraction(false);\n      urlc.setRequestProperty(\"Content-type\",type);\n      basicAuth(urlc);\n      if (null != length) {\n        urlc.setFixedLengthStreamingMode(length);\n      }\n else {\n        urlc.setChunkedStreamingMode(-1);\n      }\n      urlc.connect();\n    }\n catch (    IOException e) {\n      fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \"+ e);\n      success=false;\n    }\ncatch (    Exception e) {\n      fatal(\"POST failed with error \" + e.getMessage());\n    }\n    try (final OutputStream out=urlc.getOutputStream()){\n      pipe(data,out);\n    }\n catch (    IOException e) {\n      fatal(\"IOException while posting data: \" + e);\n    }\n    try {\n      success&=checkResponseCode(urlc);\n      try (final InputStream in=urlc.getInputStream()){\n        pipe(in,output);\n      }\n     }\n catch (    IOException e) {\n      warn(\"IOException while reading response: \" + e);\n      success=false;\n    }\ncatch (    GeneralSecurityException e) {\n      fatal(\"Looks like Solr is secured and would not let us in. Try with another user in '-u' parameter\");\n    }\n  }\n  finally {\n    if (urlc != null)     urlc.disconnect();\n  }\n  return success;\n}"}
{"ids": "11484", "raw_code": "public FormatException(String s,Throwable rootCause){\n  super(s + \": \" + rootCause.getLocalizedMessage());\n  this.rootCause=rootCause;\n}"}
{"ids": "39838", "raw_code": "private Pair<BigDecimal,BigDecimal> fillPayment(final CustomerOrder order,final CustomerOrderDelivery delivery,final Payment payment,final boolean singlePay,final BigDecimal runningTotal,final BigDecimal runningTotalTax,final boolean lastDelivery){\n  if (payment.getTransactionReferenceId() == null) {\n    payment.setTransactionReferenceId(delivery.getDeliveryNum());\n  }\n  payment.setOrderShipment(singlePay ? order.getOrdernum() : delivery.getDeliveryNum());\n  fillPaymentItems(delivery,payment);\n  fillPaymentShipment(order,delivery,payment);\n  return fillPaymentAmount(order,delivery,payment,singlePay,runningTotal,runningTotalTax,lastDelivery);\n}"}
{"ids": "53442", "raw_code": "public static double angle(NumberVector v1,NumberVector v2,NumberVector o){\n  final int dim1=v1.getDimensionality(), dim2=v2.getDimensionality(), dimo=o.getDimensionality();\n  final int mindim=(dim1 <= dim2) ? dim1 : dim2;\n  double cross=0, l1=0, l2=0;\n  for (int k=0; k < mindim; k++) {\n    final double ok=k < dimo ? o.doubleValue(k) : 0.;\n    final double r1=v1.doubleValue(k) - ok;\n    final double r2=v2.doubleValue(k) - ok;\n    cross+=r1 * r2;\n    l1+=r1 * r1;\n    l2+=r2 * r2;\n  }\n  for (int k=mindim; k < dim1; k++) {\n    final double ok=k < dimo ? o.doubleValue(k) : 0.;\n    final double r1=v1.doubleValue(k) - ok;\n    l1+=r1 * r1;\n  }\n  for (int k=mindim; k < dim2; k++) {\n    final double ok=k < dimo ? o.doubleValue(k) : 0.;\n    final double r2=v2.doubleValue(k) - ok;\n    l2+=r2 * r2;\n  }\n  final double a=(cross == 0.) ? 0. : (l1 == 0. || l2 == 0.) ? 1. : Math.sqrt((cross / l1) * (cross / l2));\n  return (a < 1.) ? a : 1.;\n}"}
{"ids": "52957", "raw_code": "void materialize(){\n  if (cachefill < 0) {\n    return;\n  }\n  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;\n  for (int i=0; i < cachefill; i++) {\n    min=Math.min(min,cachec[i]);\n    max=Math.max(max,cachec[i]);\n  }\n  LinearScale scale=new LinearScale(min,max);\n  min=scale.getMin();\n  max=scale.getMax();\n  this.base=min;\n  this.max=max;\n  this.binsize=(max - min) / this.destsize;\n  this.data=new float[this.destsize << 1];\n  size=destsize;\n  final int end=cachefill;\n  cachefill=-1;\n  for (int i=0; i < end; i++) {\n    increment(cachec[i],cachev[i]);\n  }\n  cachec=null;\n  cachev=null;\n}"}
{"ids": "26334", "raw_code": "public boolean buildHostPart(Appendable buffer,String url,Boolean useSSL) throws WebAppConfigurationException, IOException {\n  return buildHostPart(buffer,url,useSSL,true);\n}"}
{"ids": "32571", "raw_code": "public static <T>List<T> shiftElementsToEnd(final List<T> source,final int count){\n  final ArrayList<T> rVal=new ArrayList<>(source.size());\n  for (int i=count; i < source.size(); i++) {\n    rVal.add(source.get(i));\n  }\n  for (int i=0; i < count; i++) {\n    rVal.add(source.get(i));\n  }\n  if (source.size() != rVal.size()) {\n    throw new IllegalStateException(\"Didnt work for: \" + count + \" \"+ source+ \" : \"+ rVal);\n  }\n  return rVal;\n}"}
{"ids": "62294", "raw_code": "private boolean isLeafPage(ByteBuffer buffer) throws IOException {\n  byte pageType=buffer.get(0);\n  if (pageType == PageTypes.INDEX_LEAF) {\n    return true;\n  }\n else   if (pageType == PageTypes.INDEX_NODE) {\n    return false;\n  }\n  throw new IOException(withErrorContext(\"Unexpected page type \" + pageType));\n}"}
{"ids": "33403", "raw_code": "public void addJsLibFiles(File... files){\n  jsLibFiles.addAll(Arrays.asList(files));\n}"}
{"ids": "46689", "raw_code": "private void initPropertiesIfNecessary(){\n  if (timer == null) {\n    Toolkit t=Toolkit.getDefaultToolkit();\n    Integer prop;\n    prop=(Integer)t.getDesktopProperty(\"DnD.Autoscroll.interval\");\n    timer=new Timer(prop == null ? 100 : prop.intValue(),this);\n    prop=(Integer)t.getDesktopProperty(\"DnD.Autoscroll.initialDelay\");\n    timer.setInitialDelay(prop == null ? 100 : prop.intValue());\n    prop=(Integer)t.getDesktopProperty(\"DnD.Autoscroll.cursorHysteresis\");\n    if (prop != null) {\n      hysteresis=prop.intValue();\n    }\n  }\n}"}
{"ids": "51578", "raw_code": "public EObject loadModel(String filename,String cwd){\n  URI fileURI=normalizeURI(URI.createURI(filename));\n  URI cwdURI=normalizeURI(URI.createURI(cwd));\n  return loadModel(fileURI,cwdURI);\n}"}
{"ids": "24256", "raw_code": "static boolean pathIsWindows(String path){\n  if (path != null && path.length() > 1) {\n    return (Character.isLetter(path.charAt(0)) && path.charAt(1) == ':') || (path.startsWith(\"//\") || path.startsWith(\"\\\\\\\\\"));\n  }\n  return false;\n}"}
{"ids": "30663", "raw_code": "public void notifyReturned(NotifyContext notifyContext,ITemplateHolder template){\n  if (notifyContext == null)   return;\n  if (_filterManager._isFilter[FilterOperationCodes.AFTER_NOTIFY_TRIGGER]) {\n    Object[] entries=new Object[2];\n    entries[0]=notifyContext.getEntry();\n    entries[1]=template;\n    try {\n      _filterManager.invokeFilters(FilterOperationCodes.AFTER_NOTIFY_TRIGGER,null,entries);\n    }\n catch (    Exception e) {\n      if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,\"Exception was thrown by filter on AFTER_NOTIFY_TRIGGER.\",e);\n    }\n  }\n  decreaseCounter(notifyContext);\n}"}
{"ids": "2541", "raw_code": "public static String normalizeSlashes(String path){\n  return path.replaceAll(\"\\\\\\\\\",\"/\");\n}"}
{"ids": "63914", "raw_code": "protected Point2D correct(Point2D anchor,Rectangle2D bounds){\n  if (anchor == null)   return anchor;\n  double x=anchor.getX(), y=anchor.getY();\n  double x1=bounds.getMinX(), y1=bounds.getMinY();\n  double x2=bounds.getMaxX(), y2=bounds.getMaxY();\n  x=(x < x1 ? x1 : (x > x2 ? x2 : x));\n  y=(y < y1 ? y1 : (y > y2 ? y2 : y));\n  m_tmp.setLocation(x,y);\n  return m_tmp;\n}"}
{"ids": "14099", "raw_code": "private String saveParameters(Set userSession,String userID,boolean isSOAPInitiated,boolean isIDPInitiated,String protocol,String realm,String idpEntityID,String spEntityID,String relayState,String singleLogoutRequestXML,String singleLogoutResponseXML,int currentStatus){\n  String tmpRelayState=SAML2Utils.generateIDWithServerID();\n  relayStateMap.put(tmpRelayState,relayState);\n  if (debug.messageEnabled()) {\n    debug.message(\"SingleLogoutManager.saveParameters: \" + \"userID=\" + userID + \", session=\"+ userSession+ \", orig relayState=\"+ relayState+ \", new=\"+ tmpRelayState+ \", isSOAInitiated=\"+ isSOAPInitiated+ \", isIDPInitiated=\"+ isIDPInitiated+ \", protocol=\"+ protocol+ \", relam=\"+ realm+ \", idpEntityID=\"+ idpEntityID+ \", spEntityID=\"+ spEntityID+ \", status=\"+ currentStatus+ \"\\nlogout Request XML=\"+ singleLogoutRequestXML+ \"\\nlogout response XML=\"+ singleLogoutResponseXML);\n  }\n  if (userSession != null) {\n    userSessionMap.put(tmpRelayState,userSession);\n  }\n  if (userID != null) {\n    userIDMap.put(tmpRelayState,userID);\n  }\n  if (isSOAPInitiated) {\n    isSOAPInitiatedMap.put(tmpRelayState,Boolean.TRUE);\n  }\n else {\n    isSOAPInitiatedMap.put(tmpRelayState,Boolean.FALSE);\n  }\n  if (isIDPInitiated) {\n    isIDPInitiatedMap.put(tmpRelayState,Boolean.TRUE);\n  }\n else {\n    isIDPInitiatedMap.put(tmpRelayState,Boolean.FALSE);\n  }\n  if (protocol != null) {\n    origProtocolMap.put(tmpRelayState,protocol);\n    int listSize=protocolList.size();\n    List list=new ArrayList(listSize - 1);\n    for (int i=0; i < listSize; i++) {\n      String proto=(String)protocolList.get(i);\n      if (!proto.equals(protocol)) {\n        list.add(proto);\n      }\n    }\n    protocolListMap.put(tmpRelayState,list);\n  }\n  if (realm != null) {\n    realmMap.put(tmpRelayState,realm);\n  }\n  if (idpEntityID != null) {\n    idpEntityIDMap.put(tmpRelayState,idpEntityID);\n  }\n  if (spEntityID != null) {\n    spEntityIDMap.put(tmpRelayState,spEntityID);\n  }\n  if (singleLogoutRequestXML != null) {\n    sloRequestXMLMap.put(tmpRelayState,singleLogoutRequestXML);\n  }\n  if (singleLogoutResponseXML != null) {\n    sloResponseXMLMap.put(tmpRelayState,singleLogoutResponseXML);\n  }\n  currentStatusMap.put(tmpRelayState,new Integer(currentStatus));\n  return tmpRelayState;\n}"}
{"ids": "51137", "raw_code": "private void nextPacket() throws IOException {\n  int off=0;\n  int remaining=7;\n  do {\n    int count=baseStream.read(header,off,remaining);\n    if (count <= 0) {\n      throw new EOFException(\"unexpected end of stream, read \" + (7 - remaining) + \" bytes from \"+ 7);\n    }\n    remaining-=count;\n    off+=count;\n  }\n while (remaining > 0);\n  int compressedLength=(header[0] & 0xff) + ((header[1] & 0xff) << 8) + ((header[2] & 0xff) << 16);\n  lastPacketSeq=header[3] & 0xff;\n  int decompressedLength=(header[4] & 0xff) + ((header[5] & 0xff) << 8) + ((header[6] & 0xff) << 16);\n  if (decompressedLength != 0) {\n    doDecompress=true;\n    remainingBytes+=decompressedLength;\n    byte[] compressedBuffer=new byte[compressedLength];\n    byte[] decompressedBuffer=new byte[decompressedLength];\n    off=0;\n    remaining=compressedBuffer.length;\n    do {\n      int count=baseStream.read(compressedBuffer,off,remaining);\n      if (count <= 0) {\n        throw new EOFException(\"unexpected end of stream, read \" + (7 - remaining) + \" bytes from \"+ 7);\n      }\n      remaining-=count;\n      off+=count;\n    }\n while (remaining > 0);\n    Inflater inflater=new Inflater();\n    inflater.setInput(compressedBuffer);\n    try {\n      int actualUncompressBytes=inflater.inflate(decompressedBuffer);\n      if (actualUncompressBytes != decompressedLength) {\n        throw new IOException(\"Invalid stream length after decompression \" + actualUncompressBytes + \",expected \"+ decompressedLength);\n      }\n    }\n catch (    DataFormatException dfe) {\n      throw new IOException(dfe);\n    }\n    inflater.end();\n    decompressedByteStream=new ByteArrayInputStream(decompressedBuffer);\n  }\n else {\n    doDecompress=false;\n    remainingBytes+=compressedLength;\n    decompressedByteStream=null;\n  }\n  logger.trace(\"read compress packet seq:\" + lastPacketSeq + \" length:\"+ remainingBytes);\n}"}
{"ids": "10914", "raw_code": "protected boolean loadField(DDFRecord record,String tagName,int fieldIndex){\n  if (fields.get(tagName) == null) {\n    DDFField ddf=record.findField(tagName,fieldIndex);\n    if (ddf != null) {\n      fields.put(tagName,ddf);\n      ddf.toString();\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "22731", "raw_code": "public HttpRequest(final CharSequence url,final String method) throws HttpRequestException {\n  try {\n    this.url=new URL(url.toString());\n  }\n catch (  MalformedURLException e) {\n    throw new HttpRequestException(e);\n  }\n  this.requestMethod=method;\n}"}
{"ids": "33061", "raw_code": "private boolean isError(IProblem problem,Type type){\n  return true;\n}"}
{"ids": "65914", "raw_code": "private static void addProcessParameters(int AD_PInstance_ID,Map<String,Object> params,String trxName){\n  final String sql=\"SELECT \" + \" \" + X_AD_PInstance_Para.COLUMNNAME_ParameterName + \",\"+ X_AD_PInstance_Para.COLUMNNAME_P_String+ \",\"+ X_AD_PInstance_Para.COLUMNNAME_P_String_To+ \",\"+ X_AD_PInstance_Para.COLUMNNAME_P_Number+ \",\"+ X_AD_PInstance_Para.COLUMNNAME_P_Number_To+ \",\"+ X_AD_PInstance_Para.COLUMNNAME_P_Date+ \",\"+ X_AD_PInstance_Para.COLUMNNAME_P_Date_To+ \",\"+ X_AD_PInstance_Para.COLUMNNAME_Info+ \",\"+ X_AD_PInstance_Para.COLUMNNAME_Info_To+ \" FROM \"+ X_AD_PInstance_Para.Table_Name+ \" WHERE \"+ X_AD_PInstance_Para.COLUMNNAME_AD_PInstance_ID+ \"=?\";\n  PreparedStatement pstmt=null;\n  ResultSet rs=null;\n  try {\n    pstmt=DB.prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY,trxName);\n    pstmt.setInt(1,AD_PInstance_ID);\n    rs=pstmt.executeQuery();\n    while (rs.next()) {\n      String name=rs.getString(1);\n      String pStr=rs.getString(2);\n      String pStrTo=rs.getString(3);\n      BigDecimal pNum=rs.getBigDecimal(4);\n      BigDecimal pNumTo=rs.getBigDecimal(5);\n      Timestamp pDate=rs.getTimestamp(6);\n      Timestamp pDateTo=rs.getTimestamp(7);\n      if (pStr != null) {\n        if (pStrTo != null) {\n          params.put(name + \"1\",pStr);\n          params.put(name + \"2\",pStrTo);\n        }\n else {\n          params.put(name,pStr);\n        }\n      }\n else       if (pDate != null) {\n        if (pDateTo != null) {\n          params.put(name + \"1\",pDate);\n          params.put(name + \"2\",pDateTo);\n        }\n else {\n          params.put(name,pDate);\n        }\n      }\n else       if (pNum != null) {\n        if (pNumTo != null) {\n          params.put(name + \"1\",pNum);\n          params.put(name + \"2\",pNumTo);\n        }\n else {\n          params.put(name,pNum);\n        }\n      }\n      String info=rs.getString(8);\n      String infoTo=rs.getString(9);\n      params.put(name + \"_Info1\",(info != null ? info : \"\"));\n      params.put(name + \"_Info2\",(infoTo != null ? infoTo : \"\"));\n    }\n  }\n catch (  SQLException e) {\n    throw new DBException(e,sql);\n  }\n finally {\n    DB.close(rs,pstmt);\n    rs=null;\n    pstmt=null;\n  }\n}"}
{"ids": "85670", "raw_code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public RecordSetPage(Input input){\n  Deserializer deserizalizer=new Deserializer();\n  Map mapResult=deserizalizer.deserialize(input,Map.class);\n  cursor=(Integer)mapResult.get(\"Cursor\");\n  data=(List<List<Object>>)mapResult.get(\"Page\");\n}"}
{"ids": "83429", "raw_code": "public Optional<String> endpoint(){\n  return Optional.ofNullable(endpointArg);\n}"}
{"ids": "57006", "raw_code": "void sendMessageToHandlerWithControllerReset(List<OFMessage> messages) throws Exception {\n  sendMessageToHandlerNoControllerReset(messages);\n}"}
{"ids": "22181", "raw_code": "public boolean isRedeployMode(){\n  return scenario.equals(PropertyConstants.REDEPLOY_MODE) ? true : false;\n}"}
{"ids": "12067", "raw_code": "public static RSAPrivateKey loadFromKeyStore(URL keystoreUrl,String password) throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, UnrecoverableKeyException {\n  logger.debug(\"loadFromKeyStore: keystoreUrl={}\",keystoreUrl);\n  URLConnection connection=keystoreUrl.openConnection();\n  InputStream is=connection.getInputStream();\n  try {\n    if (logger.isDebugEnabled())     logger.debug(\"getproviders={}\",Arrays.toString(Security.getProviders()));\n    KeyStore keyStore;\n    try {\n      try {\n        keyStore=KeyStore.getInstance(\"PKCS12\",\"SunJSSE\");\n      }\n catch (      NoSuchProviderException e) {\n        keyStore=KeyStore.getInstance(\"PKCS12\",CryptoUtil.getSecurityProviderName(KeyStore.class));\n      }\n    }\n catch (    NoSuchProviderException e) {\n      keyStore=KeyStore.getInstance(\"PKCS12\");\n    }\n    logger.debug(\"loadFromKeyStore: keyStore Provider={}\",keyStore.getProvider());\n    keyStore.load(is,password == null ? null : password.toCharArray());\n    Enumeration<String> aliases=keyStore.aliases();\n    Key key=null;\n    while (aliases.hasMoreElements()) {\n      String a=(String)aliases.nextElement();\n      key=keyStore.getKey(a,password == null ? null : password.toCharArray());\n    }\n    return (RSAPrivateKey)key;\n  }\n  finally {\n    is.close();\n  }\n}"}
{"ids": "36143", "raw_code": "@Override public double confSmallM(double totalExampleWeight,double delta){\n  double term=Math.log(4 / delta) / (2 * totalExampleWeight);\n  return Math.sqrt(term) + Math.pow(term,0.25) + Math.pow(term,0.75);\n}"}
{"ids": "30639", "raw_code": "public static <T>boolean contains(Iterator<T> iterator,T element){\n  if (iterator != null) {\n    while (iterator.hasNext()) {\n      T candidate=iterator.next();\n      if (ObjectUtils.nullSafeEquals(candidate,element))       return true;\n    }\n  }\n  return false;\n}"}
{"ids": "7622", "raw_code": "@Override public void drawDomainGridline(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea,double value){\n  Line2D line=null;\n  PlotOrientation orientation=plot.getOrientation();\n  if (orientation == PlotOrientation.HORIZONTAL) {\n    line=new Line2D.Double(dataArea.getMinX(),value,dataArea.getMaxX(),value);\n  }\n else   if (orientation == PlotOrientation.VERTICAL) {\n    line=new Line2D.Double(value,dataArea.getMinY(),value,dataArea.getMaxY());\n  }\n  Paint paint=plot.getDomainGridlinePaint();\n  if (paint == null) {\n    paint=CategoryPlot.DEFAULT_GRIDLINE_PAINT;\n  }\n  g2.setPaint(paint);\n  Stroke stroke=plot.getDomainGridlineStroke();\n  if (stroke == null) {\n    stroke=CategoryPlot.DEFAULT_GRIDLINE_STROKE;\n  }\n  g2.setStroke(stroke);\n  g2.draw(line);\n}"}
{"ids": "38018", "raw_code": "public void addPreBuiltClassifier(Classifier c){\n  m_preBuiltClassifiers.add(c);\n}"}
{"ids": "34335", "raw_code": "@Override public InsnList generate(){\n  return merge(generatedInstructions.toArray());\n}"}
{"ids": "41205", "raw_code": "public static void putJavaVariablesIntoEngine(final ScriptEngine engine,final Map<String,Object> variables){\n  final Bindings bindings=new SimpleBindings();\n  for (  String key : variables.keySet()) {\n    bindings.put(key,variables.get(key));\n  }\n  engine.setBindings(bindings,ScriptContext.ENGINE_SCOPE);\n}"}
{"ids": "7581", "raw_code": "private Point2D calculateLabelPoint(Line2D line,RectangleAnchor anchor,double deltaX,double deltaY){\n  double x, y;\n  boolean left=(anchor == RectangleAnchor.BOTTOM_LEFT || anchor == RectangleAnchor.LEFT || anchor == RectangleAnchor.TOP_LEFT);\n  boolean right=(anchor == RectangleAnchor.BOTTOM_RIGHT || anchor == RectangleAnchor.RIGHT || anchor == RectangleAnchor.TOP_RIGHT);\n  boolean top=(anchor == RectangleAnchor.TOP_LEFT || anchor == RectangleAnchor.TOP || anchor == RectangleAnchor.TOP_RIGHT);\n  boolean bottom=(anchor == RectangleAnchor.BOTTOM_LEFT || anchor == RectangleAnchor.BOTTOM || anchor == RectangleAnchor.BOTTOM_RIGHT);\n  Rectangle rect=line.getBounds();\n  if (line.getX1() == line.getX2()) {\n    x=line.getX1();\n    y=(line.getY1() + line.getY2()) / 2.0;\n    if (left) {\n      x=x - deltaX;\n    }\n    if (right) {\n      x=x + deltaX;\n    }\n    if (top) {\n      y=Math.min(line.getY1(),line.getY2()) + deltaY;\n    }\n    if (bottom) {\n      y=Math.max(line.getY1(),line.getY2()) - deltaY;\n    }\n  }\n else {\n    x=(line.getX1() + line.getX2()) / 2.0;\n    y=line.getY1();\n    if (left) {\n      x=Math.min(line.getX1(),line.getX2()) + deltaX;\n    }\n    if (right) {\n      x=Math.max(line.getX1(),line.getX2()) - deltaX;\n    }\n    if (top) {\n      y=y - deltaY;\n    }\n    if (bottom) {\n      y=y + deltaY;\n    }\n  }\n  return new Point2D.Double(x,y);\n}"}
{"ids": "85796", "raw_code": "public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){\n  if (mFlywheel && !mFinished) {\n    float oldVel=getCurrVelocity();\n    float dx=(float)(mFinalX - mStartX);\n    float dy=(float)(mFinalY - mStartY);\n    float hyp=(float)Math.hypot(dx,dy);\n    float ndx=dx / hyp;\n    float ndy=dy / hyp;\n    float oldVelocityX=ndx * oldVel;\n    float oldVelocityY=ndy * oldVel;\n    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {\n      velocityX+=oldVelocityX;\n      velocityY+=oldVelocityY;\n    }\n  }\n  mMode=FLING_MODE;\n  mFinished=false;\n  float velocity=(float)Math.hypot(velocityX,velocityY);\n  mVelocity=velocity;\n  mDuration=getSplineFlingDuration(velocity);\n  mStartTime=AnimationUtils.currentAnimationTimeMillis();\n  mStartX=startX;\n  mStartY=startY;\n  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;\n  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;\n  double totalDistance=getSplineFlingDistance(velocity);\n  mDistance=(int)(totalDistance * Math.signum(velocity));\n  mMinX=minX;\n  mMaxX=maxX;\n  mMinY=minY;\n  mMaxY=maxY;\n  mFinalX=startX + (int)Math.round(totalDistance * coeffX);\n  mFinalX=Math.min(mFinalX,mMaxX);\n  mFinalX=Math.max(mFinalX,mMinX);\n  mFinalY=startY + (int)Math.round(totalDistance * coeffY);\n  mFinalY=Math.min(mFinalY,mMaxY);\n  mFinalY=Math.max(mFinalY,mMinY);\n}"}
{"ids": "39124", "raw_code": "public void deleteWithMissing(Attribute att){\n  deleteWithMissing(att.index());\n}"}
{"ids": "23164", "raw_code": "protected void sprint(String a){\n  if (a == null) {\n    stringRepresentation+=getIndentation();\n    stringRepresentation+=\"<null>\\n\";\n    return;\n  }\n  if (a.compareTo(\"}\") == 0 || a.compareTo(\"]\") == 0) {\n    indentation--;\n  }\n  stringRepresentation+=getIndentation();\n  stringRepresentation+=a;\n  stringRepresentation+=\"\\n\";\n  if (a.compareTo(\"{\") == 0 || a.compareTo(\"[\") == 0) {\n    indentation++;\n  }\n}"}
{"ids": "52233", "raw_code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  if (semIms == null) {\n    throw new NullPointerException();\n  }\n}"}
{"ids": "86815", "raw_code": "private static Pair<Long,Long> load(ByteArray a,InputStream stream,long memoryOffset,long count,CommonIndex positions,CRC32 checksum,ByteArray checksums,PrereadHashFunction hf,boolean checksumsLoaded,long currentSeq) throws IOException {\n  long tmpCurrentSeq=currentSeq;\n  final byte[] buffer=new byte[1024 * 1024];\n  long totalRead=0;\n  int bytesRead;\n  long pos=memoryOffset;\n  while (totalRead < count && (bytesRead=stream.read(buffer,0,(int)Math.min(count - totalRead,buffer.length))) != -1) {\n    a.set(pos,buffer,bytesRead);\n    pos+=bytesRead;\n    int j=0;\n    while (j < bytesRead) {\n      if (positions.get(tmpCurrentSeq + 1) == positions.get(tmpCurrentSeq)) {\n        hf.irvineHash(0L);\n        tmpCurrentSeq++;\n        continue;\n      }\n      final int len=(int)(positions.get(tmpCurrentSeq + 1) - (memoryOffset + totalRead + j));\n      if (j + len <= bytesRead) {\n        checksum.update(buffer,j,len);\n        hf.irvineHash(buffer,j,len);\n        hf.irvineHash(positions.get(tmpCurrentSeq + 1) - positions.get(tmpCurrentSeq));\n        if (checksumsLoaded) {\n          if ((byte)checksum.getValue() != checksums.get(tmpCurrentSeq)) {\n            throw new CorruptSdfException(\"Sequence: \" + tmpCurrentSeq + \" failed checksum\");\n          }\n        }\n else {\n          checksums.set(tmpCurrentSeq,(byte)checksum.getValue());\n        }\n        tmpCurrentSeq++;\n        checksum.reset();\n      }\n else {\n        hf.irvineHash(buffer,j,bytesRead - j);\n        checksum.update(buffer,j,bytesRead - j);\n      }\n      j+=len;\n    }\n    totalRead+=bytesRead;\n  }\n  return new Pair<>(totalRead,tmpCurrentSeq);\n}"}
{"ids": "79427", "raw_code": "public static java.sql.Date toSqlDate(String monthStr,String dayStr,String yearStr){\n  java.util.Date newDate=toDate(monthStr,dayStr,yearStr,\"0\",\"0\",\"0\");\n  if (newDate != null) {\n    return new java.sql.Date(newDate.getTime());\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "80365", "raw_code": "protected void savePNGImage(String filename,BufferedImage image) throws IOException {\n  File file=new File(filename);\n  ImageIO.write(image,\"png\",file);\n}"}
{"ids": "9292", "raw_code": "public void unsetPermission(String name){\n  permissions.remove(name.toLowerCase(java.util.Locale.ENGLISH));\n  permissible.recalculatePermissions();\n}"}
{"ids": "28013", "raw_code": "public void beforeInsert(int index,byte element){\n  if (index > size || index < 0)   throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \"+ size);\n  ensureCapacity(size + 1);\n  System.arraycopy(elements,index,elements,index + 1,size - index);\n  elements[index]=element;\n  size++;\n}"}
{"ids": "11832", "raw_code": "public OMGraphicList readCachedGraphics(URL url) throws java.io.IOException {\n  if (Debug.debugging(\"areas\")) {\n    Debug.output(\"Reading cached graphics\");\n  }\n  OMGraphicList omgraphics=new OMGraphicList();\n  if (url != null) {\n    omgraphics.readGraphics(url);\n  }\n  return omgraphics;\n}"}
{"ids": "68933", "raw_code": "int size(){\n  return noxItems.size();\n}"}
{"ids": "25748", "raw_code": "public <V>Future<V> invoke(String method,String path,Map<String,?> arguments,ResultHandler<V> resultHandler){\n  if (method == null) {\n    throw new IllegalArgumentException();\n  }\n  if (path == null) {\n    throw new IllegalArgumentException();\n  }\n  if (arguments == null) {\n    throw new IllegalArgumentException();\n  }\n  return executorService.submit(new InvocationCallback<>(method,path,arguments,resultHandler));\n}"}
{"ids": "4265", "raw_code": "@Override public String replacePath(String inputURI){\n  if (inputURI.contains(TemporaryDirectoryManager.DIRECTORY_TEMPLATE)) {\n    return inputURI.replace(TemporaryDirectoryManager.DIRECTORY_TEMPLATE,TEMPLATE_DIRECTORY_NAME);\n  }\n  return inputURI;\n}"}
{"ids": "27637", "raw_code": "@Override public void create(){\n  assertWritable();\n  final String name=getNamespace() + \".\" + NAME_SEARCH;\n  final IIndexManager indexManager=getIndexManager();\n  final Properties p=getProperties();\n  final IndexMetadata indexMetadata=new IndexMetadata(indexManager,p,name,UUID.randomUUID(),IndexTypeEnum.BTree);\n  final IKeyBuilderFactory keyBuilderFactory;\n{\n    final Properties tmp=new Properties(p);\n    tmp.setProperty(KeyBuilder.Options.STRENGTH,p.getProperty(Options.INDEXER_COLLATOR_STRENGTH,Options.DEFAULT_INDEXER_COLLATOR_STRENGTH));\n    keyBuilderFactory=new DefaultKeyBuilderFactory(tmp);\n  }\n  final boolean fieldsEnabled=Boolean.parseBoolean(p.getProperty(Options.FIELDS_ENABLED,Options.DEFAULT_FIELDS_ENABLED));\n  if (log.isInfoEnabled())   log.info(Options.FIELDS_ENABLED + \"=\" + fieldsEnabled);\n  indexMetadata.setTupleSerializer(new FullTextIndexTupleSerializer<V>(keyBuilderFactory,DefaultTupleSerializer.getDefaultLeafKeysCoder(),EmptyRabaValueCoder.INSTANCE,fieldsEnabled));\n  indexManager.registerIndex(indexMetadata);\n  if (log.isInfoEnabled())   log.info(\"Registered new text index: name=\" + name);\n}"}
{"ids": "10625", "raw_code": "public static PGPPublicKey mergeSignatures(PGPPublicKey targetKey,PGPPublicKey sourceKey) throws PGPException {\n  if (!Objects.deepEquals(targetKey.getFingerprint(),sourceKey.getFingerprint())) {\n    throw new IllegalArgumentException(\"Signature merge can be done for different instances of the same public key only\");\n  }\n  return copySignatures(targetKey,sourceKey);\n}"}
{"ids": "11427", "raw_code": "public void drawBackground(Graphics g){\n  g.fillRect(0,0,getWidth(),getHeight());\n}"}
{"ids": "1990", "raw_code": "public static double info(int counts[]){\n  int total=0;\n  double x=0;\n  for (int j=0; j < counts.length; j++) {\n    x-=xlogx(counts[j]);\n    total+=counts[j];\n  }\n  return x + xlogx(total);\n}"}
{"ids": "32355", "raw_code": "public ComputeJobFailoverException(Throwable cause){\n  this(cause.getMessage(),cause);\n}"}
{"ids": "43136", "raw_code": "public boolean hasNewerVersion(){\n  return latestStable.compareTo(currentVersion) > 0;\n}"}
{"ids": "42843", "raw_code": "@Override public void readNBT(NBTTagCompound compound){\n  super.readNBT(compound);\n  if (compound.hasKey(\"foodExhaustionTimer\")) {\n    this.exhaustionTimer=compound.getInteger(\"foodExhaustionTimer\");\n  }\n  if (!compound.hasKey(\"bwmAdjustedFoodStats\")) {\n    setFoodLevel(getFoodLevel() * 3);\n    setSaturation(0);\n  }\n  if (getFoodLevel() > 60)   setFoodLevel(60);\n  if (getSaturationLevel() > 20)   setSaturation(20);\n}"}
{"ids": "66971", "raw_code": "private static boolean verifyXML(String fileName){\n  SchemaFactory sf=SchemaFactory.newInstance(W3C_XML_SCHEMA);\n  Source xsdFile=new StreamSource(new File(XSD_FILE_PATH));\n  Source xmlFile=new StreamSource(new File(fileName));\n  boolean validXML=false;\n  try {\n    Schema schema=sf.newSchema(xsdFile);\n    Validator validator=schema.newValidator();\n    try {\n      validator.validate(xmlFile);\n      validXML=true;\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n    if (!validXML) {\n      new IOException(\"File isn't  valid against the xsd\");\n    }\n  }\n catch (  SAXException e) {\n    e.printStackTrace();\n  }\n  return validXML;\n}"}
{"ids": "64205", "raw_code": "private void needNewBuffer(int newcount){\n  if (currentBufferIndex < buffers.size() - 1) {\n    filledBufferSum+=currentBuffer.length;\n    currentBufferIndex++;\n    currentBuffer=buffers.get(currentBufferIndex);\n  }\n else {\n    int newBufferSize;\n    if (currentBuffer == null) {\n      newBufferSize=newcount;\n      filledBufferSum=0;\n    }\n else {\n      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);\n      filledBufferSum+=currentBuffer.length;\n    }\n    currentBufferIndex++;\n    currentBuffer=new byte[newBufferSize];\n    buffers.add(currentBuffer);\n  }\n}"}
{"ids": "51407", "raw_code": "private static void dualPivotQuicksort(byte[] a,int left,int right){\n  int sixth=(right - left + 1) / 6;\n  int e1=left + sixth;\n  int e5=right - sixth;\n  int e3=(left + right) >>> 1;\n  int e4=e3 + sixth;\n  int e2=e3 - sixth;\n  byte ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];\n  if (ae1 > ae2) {\n    byte t=ae1;\n    ae1=ae2;\n    ae2=t;\n  }\n  if (ae4 > ae5) {\n    byte t=ae4;\n    ae4=ae5;\n    ae5=t;\n  }\n  if (ae1 > ae3) {\n    byte t=ae1;\n    ae1=ae3;\n    ae3=t;\n  }\n  if (ae2 > ae3) {\n    byte t=ae2;\n    ae2=ae3;\n    ae3=t;\n  }\n  if (ae1 > ae4) {\n    byte t=ae1;\n    ae1=ae4;\n    ae4=t;\n  }\n  if (ae3 > ae4) {\n    byte t=ae3;\n    ae3=ae4;\n    ae4=t;\n  }\n  if (ae2 > ae5) {\n    byte t=ae2;\n    ae2=ae5;\n    ae5=t;\n  }\n  if (ae2 > ae3) {\n    byte t=ae2;\n    ae2=ae3;\n    ae3=t;\n  }\n  if (ae4 > ae5) {\n    byte t=ae4;\n    ae4=ae5;\n    ae5=t;\n  }\n  a[e1]=ae1;\n  a[e3]=ae3;\n  a[e5]=ae5;\n  byte pivot1=ae2;\n  a[e2]=a[left];\n  byte pivot2=ae4;\n  a[e4]=a[right];\n  int less=left + 1;\n  int great=right - 1;\n  boolean pivotsDiffer=(pivot1 != pivot2);\n  if (pivotsDiffer) {\n    outer:     for (int k=less; k <= great; k++) {\n      byte ak=a[k];\n      if (ak < pivot1) {\n        if (k != less) {\n          a[k]=a[less];\n          a[less]=ak;\n        }\n        less++;\n      }\n else       if (ak > pivot2) {\n        while (a[great] > pivot2) {\n          if (great-- == k) {\n            break outer;\n          }\n        }\n        if (a[great] < pivot1) {\n          a[k]=a[less];\n          a[less++]=a[great];\n          a[great--]=ak;\n        }\n else {\n          a[k]=a[great];\n          a[great--]=ak;\n        }\n      }\n    }\n  }\n else {\n    for (int k=less; k <= great; k++) {\n      byte ak=a[k];\n      if (ak == pivot1) {\n        continue;\n      }\n      if (ak < pivot1) {\n        if (k != less) {\n          a[k]=a[less];\n          a[less]=ak;\n        }\n        less++;\n      }\n else {\n        while (a[great] > pivot1) {\n          great--;\n        }\n        if (a[great] < pivot1) {\n          a[k]=a[less];\n          a[less++]=a[great];\n          a[great--]=ak;\n        }\n else {\n          a[k]=pivot1;\n          a[great--]=ak;\n        }\n      }\n    }\n  }\n  a[left]=a[less - 1];\n  a[less - 1]=pivot1;\n  a[right]=a[great + 1];\n  a[great + 1]=pivot2;\n  doSort(a,left,less - 2);\n  doSort(a,great + 2,right);\n  if (!pivotsDiffer) {\n    return;\n  }\n  if (less < e1 && great > e5) {\n    while (a[less] == pivot1) {\n      less++;\n    }\n    while (a[great] == pivot2) {\n      great--;\n    }\n    outer:     for (int k=less; k <= great; k++) {\n      byte ak=a[k];\n      if (ak == pivot2) {\n        while (a[great] == pivot2) {\n          if (great-- == k) {\n            break outer;\n          }\n        }\n        if (a[great] == pivot1) {\n          a[k]=a[less];\n          a[less++]=pivot1;\n        }\n else {\n          a[k]=a[great];\n        }\n        a[great--]=pivot2;\n      }\n else       if (ak == pivot1) {\n        a[k]=a[less];\n        a[less++]=pivot1;\n      }\n    }\n  }\n  doSort(a,less,great);\n}"}
{"ids": "32000", "raw_code": "@Nullable public N node(@Nullable Object key,@Nullable Collection<N> inc){\n  return node(key,inc,null);\n}"}
{"ids": "75563", "raw_code": "public void increment(){\n  counter.getAndIncrement();\n}"}
{"ids": "77878", "raw_code": "public DefaultDeploymentCache(){\n  this.cache=Collections.synchronizedMap(new HashMap<String,T>());\n}"}
{"ids": "6465", "raw_code": "private int findInsertionPoint(SortedListEntry entry){\n  int insertionPoint=sortedModel.size();\n  if (sortOrder != SortOrder.UNORDERED) {\n    insertionPoint=Collections.binarySearch((List)sortedModel,entry);\n    if (insertionPoint < 0) {\n      insertionPoint=-(insertionPoint + 1);\n    }\n  }\n  return insertionPoint;\n}"}
{"ids": "6450", "raw_code": "private boolean haveShownMessageBefore(UpdateMessage msg){\n  if (!msg.isShownOnce())   return false;\n  loadSeenMessages();\n  if (_seenMessages == null || _seenMessages.size() == 0 || !_seenMessages.contains(msg)) {\n    if (_seenMessages == null)     _seenMessages=new HashSet<>();\n    _seenMessages.add(msg);\n    saveSeenMessages();\n    return false;\n  }\n  return true;\n}"}
{"ids": "73140", "raw_code": "public void dataSourceAdded(int index){\n  update();\n  updateCoordinateProjectionComboBoxes();\n}"}
{"ids": "65188", "raw_code": "public boolean fieldIsStatic(){\n  return Modifier.isStatic(field.getModifiers());\n}"}
{"ids": "42311", "raw_code": "void newEquation(DF_LatticeCell lhs,DF_Operator operator,DF_LatticeCell op1,DF_LatticeCell op2,DF_LatticeCell op3){\n  DF_Equation eq=new DF_Equation(lhs,operator,op1,op2,op3);\n  equations.addGraphNode(eq);\n  equations.addGraphNode(lhs);\n  equations.addGraphNode(op1);\n  equations.addGraphNode(op2);\n  equations.addGraphNode(op3);\n  newEquations.add(eq);\n  op1.addUse(eq);\n  op2.addUse(eq);\n  op3.addUse(eq);\n  lhs.addDef(eq);\n  if (EAGER && eq.evaluate())   changedCell(lhs);\n}"}
{"ids": "32194", "raw_code": "@Override public void stop(){\n  if (stopping.compareAndSet(false,true)) {\n    if (log.isDebugEnabled())     log.debug(\"Stopping write-behind store for cache '\" + cacheName + '\\'');\n    wakeUp();\n    boolean graceful=true;\n    for (    GridWorker worker : flushThreads)     graceful&=U.join(worker,log);\n    if (!graceful)     log.warning(\"Shutdown was aborted\");\n  }\n}"}
{"ids": "21775", "raw_code": "private Set<StoragePort> andStoragePortSets(Set<StoragePort> a,Set<StoragePort> b){\n  Set<StoragePort> result=new HashSet<StoragePort>();\n  for (  StoragePort port : a) {\n    if (b.contains(port)) {\n      result.add(port);\n    }\n  }\n  return result;\n}"}
{"ids": "14264", "raw_code": "public static void addAttributeToSchema(String serviceName,String subSchemaName,String schemaType,Node attributeSchemaNode,SSOToken adminToken) throws UpgradeException {\n  ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType,adminToken);\n  addAttributeToSchema(ss,attributeSchemaNode);\n}"}
{"ids": "29544", "raw_code": "public int next(int current){\n  for (int i=current + 1; i < (arguments != null ? arguments.size() : 0); i++) {\n    if (getArgument(i) instanceof MathContainer) {\n      return i;\n    }\n  }\n  throw new ArrayIndexOutOfBoundsException(\"Index out of array bounds.\");\n}"}
{"ids": "14248", "raw_code": "@Override public boolean supportsAuthentication(){\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"supportsAuthentication invoked\");\n  }\n  return true;\n}"}
{"ids": "5357", "raw_code": "protected void reorderAppDeploymentsAfterConfigurationVersion(Element domain){\n  List<Element> appDeployments=xmlTool.selectElementsMatchingXPath(\"weblogic:app-deployment\",domain);\n  for (  Element appDeployment : appDeployments) {\n    domain.removeChild(appDeployment);\n  }\n  Element configurationVersion=xmlTool.selectElementMatchingXPath(\"weblogic:configuration-version\",domain);\n  Node before=null;\n  NodeList children=domain.getChildNodes();\n  for (int i=0; i < children.getLength(); i++) {\n    if (configurationVersion.equals(children.item(i)) && i < children.getLength() - 1) {\n      before=children.item(i + 1);\n    }\n  }\n  if (before != null) {\n    for (    Element appDeployment : appDeployments) {\n      domain.insertBefore(appDeployment,before);\n    }\n  }\n else {\n    for (    Element appDeployment : appDeployments) {\n      domain.appendChild(appDeployment);\n    }\n  }\n}"}
{"ids": "60933", "raw_code": "public URI(String scheme,String schemeSpecificPart,String fragment) throws URISyntaxException {\n  StringBuilder uri=new StringBuilder();\n  if (scheme != null) {\n    uri.append(scheme);\n    uri.append(':');\n  }\n  if (schemeSpecificPart != null) {\n    ALL_LEGAL_ENCODER.appendEncoded(uri,schemeSpecificPart);\n  }\n  if (fragment != null) {\n    uri.append('#');\n    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);\n  }\n  parseURI(uri.toString(),false);\n}"}
{"ids": "77410", "raw_code": "static FacetMethod selectFacetMethod(SchemaField field,FacetMethod method,Integer mincount){\n  FieldType type=field.getType();\n  if (method == null) {\n    if (type instanceof BoolField && (field.indexed() == true || field.hasDocValues() == false)) {\n      method=FacetMethod.ENUM;\n    }\n else     if (type.getNumericType() != null && !field.multiValued()) {\n      method=FacetMethod.FCS;\n    }\n else {\n      method=FacetMethod.FC;\n    }\n  }\n  if (method == FacetMethod.FC && type.getNumericType() != null && !field.multiValued()) {\n    method=FacetMethod.FCS;\n  }\n  if (method == FacetMethod.UIF && !field.hasDocValues() && mincount == 0) {\n    method=field.multiValued() ? FacetMethod.FC : FacetMethod.FCS;\n  }\n  if (method == FacetMethod.ENUM && TrieField.getMainValuePrefix(type) != null) {\n    method=field.multiValued() ? FacetMethod.FC : FacetMethod.FCS;\n  }\n  final boolean multiToken=field.multiValued() || type.multiValuedFieldCache();\n  if (method == FacetMethod.FCS && multiToken) {\n    method=FacetMethod.FC;\n  }\n  return method;\n}"}
{"ids": "42592", "raw_code": "public List<HashMap<String,Object>> clearOverallChat(){\n  try {\n    List<HashMap<String,Object>> myChatList=myChats.get(overallChatRoomName);\n    myChatList=new LinkedList<HashMap<String,Object>>();\n    myChats.put(overallChatRoomName,myChatList);\n    Map<Integer,String> newMessage=new HashMap<Integer,String>();\n    newMessage.put(0,\"clearOverallChatHistory\");\n    scopeApplicationAdapter.sendMessageToMembers(newMessage);\n    return myChatList;\n  }\n catch (  Exception err) {\n    log.error(\"[clearChat] \",err);\n    return null;\n  }\n}"}
{"ids": "8846", "raw_code": "void animateChallengeTo(int y,int velocity){\n  if (mChallengeView == null) {\n    return;\n  }\n  cancelTransitionsInProgress();\n  mChallengeInteractiveInternal=false;\n  mChallengeView.setLayerType(LAYER_TYPE_HARDWARE,null);\n  final int sy=mChallengeView.getBottom();\n  final int dy=y - sy;\n  if (dy == 0) {\n    completeChallengeScroll();\n    return;\n  }\n  setScrollState(SCROLL_STATE_SETTLING);\n  final int childHeight=mChallengeView.getHeight();\n  final int halfHeight=childHeight / 2;\n  final float distanceRatio=Math.min(1f,1.0f * Math.abs(dy) / childHeight);\n  final float distance=halfHeight + halfHeight * distanceInfluenceForSnapDuration(distanceRatio);\n  int duration=0;\n  velocity=Math.abs(velocity);\n  if (velocity > 0) {\n    duration=4 * Math.round(1000 * Math.abs(distance / velocity));\n  }\n else {\n    final float childDelta=(float)Math.abs(dy) / childHeight;\n    duration=(int)((childDelta + 1) * 100);\n  }\n  duration=Math.min(duration,MAX_SETTLE_DURATION);\n  mScroller.startScroll(0,sy,0,dy,duration);\n  postInvalidateOnAnimation();\n}"}
{"ids": "23079", "raw_code": "public JcaX509v3CertificateBuilder(X500Principal issuer,BigInteger serial,Date notBefore,Date notAfter,X500Principal subject,PublicKey publicKey){\n  super(X500Name.getInstance(issuer.getEncoded()),serial,notBefore,notAfter,X500Name.getInstance(subject.getEncoded()),SubjectPublicKeyInfo.getInstance(publicKey.getEncoded()));\n}"}
{"ids": "62308", "raw_code": "private void writeGUIDValue(ByteBuffer buffer,Object value) throws IOException {\n  Matcher m=GUID_PATTERN.matcher(toCharSequence(value));\n  if (!m.matches()) {\n    throw new IOException(withErrorContext(\"Invalid GUID: \" + value));\n  }\n  ByteBuffer origBuffer=null;\n  byte[] tmpBuf=null;\n  if (buffer.order() != ByteOrder.BIG_ENDIAN) {\n    origBuffer=buffer;\n    tmpBuf=new byte[16];\n    buffer=ByteBuffer.wrap(tmpBuf);\n  }\n  ByteUtil.writeHexString(buffer,m.group(1));\n  ByteUtil.writeHexString(buffer,m.group(2));\n  ByteUtil.writeHexString(buffer,m.group(3));\n  ByteUtil.writeHexString(buffer,m.group(4));\n  ByteUtil.writeHexString(buffer,m.group(5));\n  if (tmpBuf != null) {\n    ByteUtil.swap4Bytes(tmpBuf,0);\n    ByteUtil.swap2Bytes(tmpBuf,4);\n    ByteUtil.swap2Bytes(tmpBuf,6);\n    origBuffer.put(tmpBuf);\n  }\n}"}
{"ids": "73276", "raw_code": "public NeuronGroup(final Network net,final List<Neuron> neurons){\n  super(net);\n  neuronList=new ArrayList<Neuron>(neurons.size());\n  for (  Neuron neuron : neurons) {\n    addNeuron(neuron);\n  }\n  neuronList=new CopyOnWriteArrayList<Neuron>(neuronList);\n  updateRule=getNeuronType();\n  resetSubsamplingIndices();\n}"}
{"ids": "56964", "raw_code": "@LogMessageDoc(level=\"ERROR\",message=\"Error reading link discovery update.\",explanation=\"Unable to process link discovery update\",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public List<LDUpdate> applyUpdates(){\n  List<LDUpdate> appliedUpdates=new ArrayList<LDUpdate>();\n  LDUpdate update=null;\n  while (ldUpdates.peek() != null) {\n    try {\n      update=ldUpdates.take();\n    }\n catch (    Exception e) {\n      log.error(\"Error reading link discovery update.\",e);\n    }\n    if (log.isTraceEnabled()) {\n      log.trace(\"Applying update: {}\",update);\n    }\nswitch (update.getOperation()) {\ncase LINK_UPDATED:\n      addOrUpdateLink(update.getSrc(),update.getSrcPort(),update.getDst(),update.getDstPort(),update.getType());\n    break;\ncase LINK_REMOVED:\n  removeLink(update.getSrc(),update.getSrcPort(),update.getDst(),update.getDstPort());\nbreak;\ncase SWITCH_UPDATED:\naddOrUpdateSwitch(update.getSrc());\nbreak;\ncase SWITCH_REMOVED:\nremoveSwitch(update.getSrc());\nbreak;\ncase TUNNEL_PORT_ADDED:\naddTunnelPort(update.getSrc(),update.getSrcPort());\nbreak;\ncase TUNNEL_PORT_REMOVED:\nremoveTunnelPort(update.getSrc(),update.getSrcPort());\nbreak;\ncase PORT_UP:\ncase PORT_DOWN:\nbreak;\n}\nappliedUpdates.add(update);\n}\nreturn (Collections.unmodifiableList(appliedUpdates));\n}"}
{"ids": "56132", "raw_code": "boolean isEmpty(){\n  return mDescription.isEmpty() && mTypes.isEmpty();\n}"}
{"ids": "17350", "raw_code": "public Star(int points,float rotation,float insideness){\n  float x=0;\n  float y=0;\n  float radius=0.5f;\n  points=points < 3 ? 3 : points;\n  rotation=rotation + (float)(Math.PI / 2.0);\n  boolean flat=insideness >= 1.0f;\n  setControlPointSize(flat ? points : 2 * points);\n  final float pi2=2 * (float)Math.PI;\n  float insideRadius=radius * insideness;\n  Point2D.Float pt;\n  for (int p=0; p < points; ++p) {\n    double vertex=p;\n    double angle=vertex * pi2 / points + rotation;\n    pt=new Point2D.Float((float)(x + Math.cos(angle) * radius),(float)(y + Math.sin(angle) * radius));\n    pushPoint(pt);\n    if (!flat) {\n      double angle2=(vertex + 0.5) * pi2 / points + rotation;\n      pt=new Point2D.Float((float)(x + Math.cos(angle2) * insideRadius),(float)(y + Math.sin(angle2) * insideRadius));\n      pushPoint(pt);\n    }\n  }\n}"}
{"ids": "8307", "raw_code": "private static boolean isStatic(Method m){\n  int mods=m.getModifiers();\n  return (mods & Modifier.STATIC) != 0;\n}"}
{"ids": "63314", "raw_code": "public synchronized boolean tryLock(){\n  try {\n    lock=file.tryLock();\n    return lock != null;\n  }\n catch (  Exception e) {\n    return false;\n  }\n}"}
{"ids": "1677", "raw_code": "@Override public void nodeDown(Topology topology,long eventUID,String nodeID){\n  if (targetServerID.equals(nodeID)) {\n    decideOnAction(topology);\n  }\n}"}
{"ids": "46830", "raw_code": "public boolean isValid(){\n  return true;\n}"}
{"ids": "3437", "raw_code": "private void rolloverLogTask(){\n  try {\n    if (_isInit) {\n      flush();\n    }\n  }\n catch (  Exception e) {\n    log.log(Level.WARNING,e.toString(),e);\n  }\n  _isRollingOver=true;\n  try {\n    if (!_isInit)     return;\n    Path savedPath=null;\n    long now=CurrentTime.currentTime();\n    long lastPeriodEnd=_nextPeriodEnd;\n    _nextPeriodEnd=nextRolloverTime(now);\n    Path path=getPath();\nsynchronized (_logLock) {\n      flushTempStream();\n      long length=Files.size(path);\n      if (lastPeriodEnd <= now && lastPeriodEnd > 0) {\n        closeLogStream();\n        savedPath=getSavedPath(lastPeriodEnd - 1);\n      }\n else       if (path != null && getRolloverSize() <= length) {\n        closeLogStream();\n        savedPath=getSavedPath(now);\n      }\n    }\n    if (savedPath != null) {\n      movePathToArchive(savedPath);\n    }\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n finally {\nsynchronized (_logLock) {\n      _isRollingOver=false;\n      flushTempStream();\n    }\n    _rolloverListener.requeue(_rolloverAlarm);\n  }\n}"}
{"ids": "75311", "raw_code": "@Override public void onUpdateScrollbar(int dy){\n  List<AlphabeticalAppsList.AdapterItem> items=mApps.getAdapterItems();\n  if (items.isEmpty() || mNumAppsPerRow == 0) {\n    mScrollbar.setThumbOffset(-1,-1);\n    return;\n  }\n  int rowCount=mApps.getNumAppRows();\n  getCurScrollState(mScrollPosState,-1);\n  if (mScrollPosState.rowIndex < 0) {\n    mScrollbar.setThumbOffset(-1,-1);\n    return;\n  }\n  int availableScrollBarHeight=getAvailableScrollBarHeight();\n  int availableScrollHeight=getAvailableScrollHeight(mApps.getNumAppRows());\n  if (availableScrollHeight <= 0) {\n    mScrollbar.setThumbOffset(-1,-1);\n    return;\n  }\n  int scrollY=getScrollTop(mScrollPosState);\n  int scrollBarY=mBackgroundPadding.top + (int)(((float)scrollY / availableScrollHeight) * availableScrollBarHeight);\n  if (mScrollbar.isThumbDetached()) {\n    int scrollBarX;\n    if (Utilities.isRtl(getResources())) {\n      scrollBarX=mBackgroundPadding.left;\n    }\n else {\n      scrollBarX=getWidth() - mBackgroundPadding.right - mScrollbar.getThumbWidth();\n    }\n    if (mScrollbar.isDraggingThumb()) {\n      mScrollbar.setThumbOffset(scrollBarX,(int)mScrollbar.getLastTouchY());\n    }\n else {\n      int thumbScrollY=mScrollbar.getThumbOffset().y;\n      int diffScrollY=scrollBarY - thumbScrollY;\n      if (diffScrollY * dy > 0f) {\n        if (dy < 0) {\n          int offset=(int)((dy * thumbScrollY) / (float)scrollBarY);\n          thumbScrollY+=Math.max(offset,diffScrollY);\n        }\n else {\n          int offset=(int)((dy * (availableScrollBarHeight - thumbScrollY)) / (float)(availableScrollBarHeight - scrollBarY));\n          thumbScrollY+=Math.min(offset,diffScrollY);\n        }\n        thumbScrollY=Math.max(0,Math.min(availableScrollBarHeight,thumbScrollY));\n        mScrollbar.setThumbOffset(scrollBarX,thumbScrollY);\n        if (scrollBarY == thumbScrollY) {\n          mScrollbar.reattachThumbToScroll();\n        }\n      }\n else {\n        mScrollbar.setThumbOffset(scrollBarX,thumbScrollY);\n      }\n    }\n  }\n else {\n    synchronizeScrollBarThumbOffsetToViewScroll(mScrollPosState,rowCount);\n  }\n}"}
{"ids": "12121", "raw_code": "private void emitListAdd(Method method,String fieldName,StringBuilder builder){\n  builder.append(\"    public void \");\n  builder.append(getListAdderName(fieldName));\n  builder.append(\"(\");\n  builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),0));\n  builder.append(\" v) {\\n      \");\n  builder.append(getEnsureName(fieldName));\n  builder.append(\"();\\n      \");\n  builder.append(fieldName);\n  builder.append(\".add(v);\\n\");\n  builder.append(\"    }\\n\\n\");\n}"}
{"ids": "3265", "raw_code": "public boolean onScrollChanged(int scrollY){\n  boolean isPullingDownNow=scrollY < lastScrollY;\n  latestPullingDown.offer(isPullingDownNow);\n  if (latestPullingDown.size() > PULLING_DOWN_TIME_MAX) {\n    latestPullingDown.poll();\n  }\n  lastScrollY=scrollY;\n  return getPullingDownTime() >= PULLING_DOWN_TIME_THRESHOLD;\n}"}
{"ids": "1040", "raw_code": "@ExceptionHandler(ConstraintViolationException.class) @ResponseStatus(value=HttpStatus.BAD_REQUEST) public Map<String,Object> handleConstraintViolationException(ConstraintViolationException ex){\n  Collection<FieldError> errors=FieldError.getErrors(ex.getConstraintViolations());\n  log.warn(\"ConstraintViolationException: \" + errors.toString());\n  return LemonUtil.mapOf(\"exception\",\"ConstraintViolationException\",\"errors\",errors);\n}"}
{"ids": "52893", "raw_code": "@Override public void readExternal(ObjectInput in) throws IOException {\n  b=new double[in.readInt()];\n  for (int p=0; p < b.length; p++) {\n    b[p]=in.readDouble();\n  }\n}"}
{"ids": "64112", "raw_code": "private synchronized void addTracker(String path,Object marker,FileDeleteStrategy deleteStrategy){\n  if (exitWhenFinished) {\n    throw new IllegalStateException(\"No new trackers can be added once exitWhenFinished() is called\");\n  }\n  if (reaper == null) {\n    reaper=new Reaper();\n    reaper.start();\n  }\n  trackers.add(new Tracker(path,deleteStrategy,marker,q));\n}"}
{"ids": "67504", "raw_code": "List<Issue> errors(){\n  return errors;\n}"}
{"ids": "33501", "raw_code": "public AudioWife addOnCompletionListener(OnCompletionListener listener){\n  mCompletionListeners.add(0,listener);\n  return this;\n}"}
{"ids": "22545", "raw_code": "public void addVolumeToConsistencyGroup(String instanceId,String cgID) throws StorageCenterAPIException {\n  RestResult rr=restClient.get(String.format(\"StorageCenter/ScVolumeConfiguration/%s\",instanceId));\n  if (!checkResults(rr)) {\n    throw new StorageCenterAPIException(String.format(\"Error getting volume configuration: %s\",rr.getErrorMsg()));\n  }\n  ScVolumeConfiguration volConfig=gson.fromJson(rr.getResult(),ScVolumeConfiguration.class);\n  List<String> profiles=new ArrayList<>();\n  for (  ScObject profile : volConfig.replayProfileList) {\n    if (!cgID.equals(profile.instanceId)) {\n      profiles.add(profile.instanceId);\n    }\n  }\n  profiles.add(cgID);\n  Parameters params=new Parameters();\n  params.add(\"ReplayProfileList\",profiles.toArray(new String[0]));\n  rr=restClient.put(String.format(\"StorageCenter/ScVolumeConfiguration/%s\",instanceId),params.toJson());\n  if (!checkResults(rr)) {\n    throw new StorageCenterAPIException(String.format(\"Error updating volume replay profile membership: %s\",rr.getErrorMsg()));\n  }\n}"}
{"ids": "7191", "raw_code": "public static boolean isImplementsInterface(Class clazz,Class interfaceClass){\n  if (!(interfaceClass.isInterface())) {\n    throw new IllegalArgumentException(\"Interface class passed in is not an interface\");\n  }\n  boolean resultThisClass=recursiveIsImplementsInterface(clazz,interfaceClass);\n  if (resultThisClass) {\n    return true;\n  }\n  return recursiveSuperclassImplementsInterface(clazz,interfaceClass);\n}"}
{"ids": "58186", "raw_code": "private static String replaceChars(String str){\n  StringBuffer buf=new StringBuffer(str);\n  int length=buf.length();\n  for (int i=0; i < length; i++) {\n    char currentChar=buf.charAt(i);\n    if (currentChar == ' ') {\n      buf.setCharAt(i,'%');\n      buf.insert(i + 1,\"20\");\n      length=length + 2;\n      i=i + 2;\n    }\n else     if (currentChar == '\\\\') {\n      buf.setCharAt(i,'/');\n    }\n  }\n  return buf.toString();\n}"}
{"ids": "37282", "raw_code": "private void addBinding(final String key,final Object value){\n  m_bindings.put(key,value);\n}"}
{"ids": "52505", "raw_code": "public static <T extends Enum<T>>T forKey(String key,Map<String,T> mapping,Class<T> enumeration){\n  T t=mapping.get(key);\n  if (t != null) {\n    return t;\n  }\n  throw new IllegalArgumentException(\"Not an alternate key for \" + enumeration.toString() + \": \"+ key);\n}"}
{"ids": "68669", "raw_code": "private ExchangeRate directLookup(final Currency source,final Currency target,final Date date){\n  if (System.getProperty(\"EXPERIMENTAL\") == null)   throw new UnsupportedOperationException(\"Work in progress\");\n  ExchangeRate rate=null;\n  QL.require(((rate=fetch(source,target,date)) != null),\"no direct conversion available\");\n  return rate;\n}"}
{"ids": "55191", "raw_code": "protected static int findNextNewLineChar(CharSequence s,int start){\n  for (int i=start; i < s.length(); i++) {\n    if (s.charAt(i) == '\\n') {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"ids": "5674", "raw_code": "public SkypeBuilder withChat(String id){\n  if (!id.startsWith(\"19:\"))   throw new IllegalArgumentException(\"Invalid chat id\");\n  if (password != null)   throw new IllegalArgumentException(\"Not guest account\");\n  this.chatId=id;\n  return this;\n}"}
{"ids": "8280", "raw_code": "public static int compareTo(Object left,Object right){\n  return compareToWithEqualityCheck(left,right,false);\n}"}
{"ids": "48302", "raw_code": "public static X509CRLImpl toImpl(X509CRL crl) throws CRLException {\n  if (crl instanceof X509CRLImpl) {\n    return (X509CRLImpl)crl;\n  }\n else {\n    return X509Factory.intern(crl);\n  }\n}"}
{"ids": "78212", "raw_code": "public final synchronized void closeAll(){\n  if (onCloseAll()) {\n    Log.w(TAG,\"Windows close all cancelled by implementation.\");\n    return;\n  }\n  LinkedList<Integer> ids=new LinkedList<Integer>();\n  for (  int id : getExistingIds()) {\n    ids.add(id);\n  }\n  for (  int id : ids) {\n    close(id);\n  }\n}"}
{"ids": "4833", "raw_code": "private static Pair<Character,Integer> normalizeCodepoint(String origString_,Charset encoding_,int offset_){\n  char normalizedChar='?';\n  boolean isOk=false;\n  final int codepoint=origString_.codePointAt(offset_);\n  if (encoding_.equals(Charset.forName(\"US-ASCII\"))) {\n    if (codepoint < 128)     isOk=true;\n  }\n else   if (encoding_.equals(Charset.forName(\"ISO-8859-1\"))) {\n    if (codepoint < 256)     isOk=true;\n  }\n else   if (encoding_.equals(Charset.forName(\"UTF-8\"))) {\n    if (codepoint < 1114111)     isOk=true;\n  }\n  if (isOk) {\n    normalizedChar=(char)codepoint;\n  }\n else {\n    isOk=true;\n    final int type=Character.getType(codepoint);\n    if (type == Character.CURRENCY_SYMBOL)     normalizedChar='$';\n else     if (type == Character.DASH_PUNCTUATION)     normalizedChar='-';\n else     if (type == Character.FINAL_QUOTE_PUNCTUATION) {\n      normalizedChar='\"';\n    }\n else     if (type == Character.INITIAL_QUOTE_PUNCTUATION) {\n      normalizedChar='\"';\n    }\n else     if (type == Character.END_PUNCTUATION)     normalizedChar='.';\n else     if (type == Character.DASH_PUNCTUATION)     normalizedChar='-';\n else     if (type == Character.OTHER_LETTER)     normalizedChar='a';\n else     if (type == Character.OTHER_NUMBER)     normalizedChar='0';\n else     if (type == Character.OTHER_PUNCTUATION)     normalizedChar='-';\n else     if (type == Character.OTHER_SYMBOL)     normalizedChar=' ';\n else     isOk=false;\n  }\n  Character newChar=null;\n  if (isOk)   newChar=normalizedChar;\n  return new Pair<>(newChar,codepoint);\n}"}
{"ids": "86207", "raw_code": "private boolean startRandomGame(){\n  AbstractLaunch[] pins=mCardAdapter.getLaunchers();\n  List<AbstractLaunch> games=new ArrayList<AbstractLaunch>(pins.length);\n  for (  AbstractLaunch pin : pins) {\n    if (pin.isGame()) {\n      if (pin.mState == AbstractLaunch.STATE_READY) {\n        games.add(pin);\n      }\n    }\n  }\n  if (games.size() > 0) {\n    Random r=new Random();\n    int index=r.nextInt(games.size());\n    AbstractLaunch game=games.get(index);\n    Log.d(TAG,String.format(\"Picked a game at random [%s]\",game.mContentDescription));\n    game.onClick(game.getClickTarget());\n    MeasurementManager.recordCustomEvent(mMeasurement,getString(R.string.analytics_event_category_launch),getString(R.string.analytics_launch_action_voice),game.mContentDescription);\n    AnalyticsManager.sendEvent(R.string.analytics_event_category_launch,R.string.analytics_launch_action_voice,game.mContentDescription);\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "2381", "raw_code": "public void initDiskCache(){\nsynchronized (mDiskCacheLock) {\n    if (mDiskLruCache == null || mDiskLruCache.isClosed()) {\n      File diskCacheDir=mCacheParams.diskCacheDir;\n      if (mCacheParams.diskCacheEnabled && diskCacheDir != null) {\n        if (!diskCacheDir.exists()) {\n          diskCacheDir.mkdirs();\n        }\n        if (getUsableSpace(diskCacheDir) > mCacheParams.diskCacheSize) {\n          try {\n            mDiskLruCache=DiskLruCache.open(diskCacheDir,1,1,mCacheParams.diskCacheSize);\n            if (BuildConfig.DEBUG) {\n              Log.d(TAG,\"Disk cache initialized\");\n            }\n          }\n catch (          final IOException e) {\n            mCacheParams.diskCacheDir=null;\n            Log.e(TAG,\"initDiskCache - \" + e);\n          }\n        }\n      }\n    }\n    mDiskCacheStarting=false;\n    mDiskCacheLock.notifyAll();\n  }\n}"}
{"ids": "1746", "raw_code": "public static int compare(String id1,String id2){\n  int result=-1;\n  String seed1=IdGenerator.getSeedFromId(id1);\n  String seed2=IdGenerator.getSeedFromId(id2);\n  if (seed1 != null && seed2 != null) {\n    result=seed1.compareTo(seed2);\n    if (result == 0) {\n      long count1=IdGenerator.getSequenceFromId(id1);\n      long count2=IdGenerator.getSequenceFromId(id2);\n      result=(int)(count1 - count2);\n    }\n  }\n  return result;\n}"}
{"ids": "79359", "raw_code": "public static Element addChildElementNSElement(Element element,String childElementName,Document document,String nameSpaceUrl){\n  Element newElement=document.createElementNS(nameSpaceUrl,childElementName);\n  element.appendChild(newElement);\n  return element;\n}"}
{"ids": "22593", "raw_code": "public VNXeCommandResult modifyConsistencyGroupSync(String id,LunGroupModifyParam param){\n  StringBuilder urlBld=new StringBuilder(URL_MODIFY1);\n  urlBld.append(id);\n  urlBld.append(URL_MODIFY2);\n  _url=urlBld.toString();\n  return postRequestSync(param);\n}"}
{"ids": "77003", "raw_code": "protected Query finishQuery(BooleanQuery.Builder in,boolean allTermsRequired){\n  return in.build();\n}"}
{"ids": "78732", "raw_code": "public long sum(){\n  long sum=0L;\n  for (  AtomicLong value : map.values()) {\n    sum=sum + value.get();\n  }\n  return sum;\n}"}
{"ids": "35986", "raw_code": "public static String extractFullStackTrace(Throwable e){\n  StringWriter stringWriter=new StringWriter();\n  PrintWriter printWriter=new PrintWriter(stringWriter);\n  e.printStackTrace(printWriter);\n  return stringWriter.toString();\n}"}
{"ids": "64751", "raw_code": "public EmptyTileFactory(TileFactoryInfo info){\n  super(info);\n  int tileSize=info.getTileSize(info.getMinimumZoomLevel());\n  emptyTile=new BufferedImage(tileSize,tileSize,BufferedImage.TYPE_INT_ARGB);\n  Graphics2D g=emptyTile.createGraphics();\n  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n  g.setColor(Color.GRAY);\n  g.fillRect(0,0,tileSize,tileSize);\n  g.setColor(Color.WHITE);\n  g.drawOval(10,10,tileSize - 20,tileSize - 20);\n  g.fillOval(70,50,20,20);\n  g.fillOval(tileSize - 90,50,20,20);\n  g.fillOval(tileSize / 2 - 10,tileSize / 2 - 10,20,20);\n  g.dispose();\n}"}
{"ids": "51863", "raw_code": "public static void i(String tag,String msg,Object... args){\n  if (sLevel > LEVEL_INFO) {\n    return;\n  }\n  if (args.length > 0) {\n    msg=String.format(msg,args);\n  }\n  Log.i(tag,msg);\n}"}
{"ids": "17700", "raw_code": "public void close() throws IOException {\n  guard.close();\n  RandomAccessFile localRaf=raf;\n  if (localRaf != null) {\nsynchronized (localRaf) {\n      raf=null;\n      localRaf.close();\n    }\n    if (fileToDeleteOnClose != null) {\n      fileToDeleteOnClose.delete();\n      fileToDeleteOnClose=null;\n    }\n  }\n}"}
{"ids": "7038", "raw_code": "public boolean matchWithRegEx(String aRegEx){\n  if (TextUtils.isEmpty(aRegEx)) {\n    return false;\n  }\n  boolean matched=false;\n  if (!TextUtils.isEmpty(mDisplayName)) {\n    matched=mDisplayName.matches(aRegEx);\n  }\n  if (!matched) {\n    for (    String email : mEmails) {\n      matched|=email.matches(aRegEx);\n    }\n  }\n  return matched;\n}"}
{"ids": "39314", "raw_code": "public String stemString(String str){\n  StringBuffer result=new StringBuffer();\n  int start=-1;\n  for (int j=0; j < str.length(); j++) {\n    char c=str.charAt(j);\n    if (Character.isLetterOrDigit(c)) {\n      if (start == -1) {\n        start=j;\n      }\n    }\n else     if (c == '\\'') {\n      if (start == -1) {\n        result.append(c);\n      }\n    }\n else {\n      if (start != -1) {\n        result.append(stem(str.substring(start,j)));\n        start=-1;\n      }\n      result.append(c);\n    }\n  }\n  if (start != -1) {\n    result.append(stem(str.substring(start,str.length())));\n  }\n  return result.toString();\n}"}
{"ids": "63956", "raw_code": "public static List<Integer> parseNumericList(String string){\n  ArrayList<Integer> list=new ArrayList<>();\n  Pattern ranges=Pattern.compile(\"(?<Range>(\\\\d+\\\\s*-\\\\s*\\\\d+))\");\n  Matcher m=ranges.matcher(string);\n  while (m.find()) {\n    String range=m.group(\"Range\");\n    string=string.replace(range,\"\");\n    parseNumericRange(range,list);\n  }\n  String[] numbers=string.split(\"\\\\D+\");\n  for (int i=0; i < numbers.length; ++i) {\n    String number=numbers[i];\n    if (!number.isEmpty()) {\n      list.add(Integer.valueOf(number));\n    }\n  }\n  Collections.sort(list);\n  return list;\n}"}
{"ids": "49453", "raw_code": "protected void savePassCodeAndExit(){\n  Intent resultIntent=new Intent();\n  resultIntent.putExtra(KEY_PASSCODE,mPassCodeDigits[0] + mPassCodeDigits[1] + mPassCodeDigits[2]+ mPassCodeDigits[3]);\n  setResult(RESULT_OK,resultIntent);\n  finish();\n}"}
{"ids": "63231", "raw_code": "public static void readFully(FileChannel file,long pos,ByteBuffer dst){\n  try {\n    do {\n      int len=file.read(dst,pos);\n      if (len < 0) {\n        throw new EOFException();\n      }\n      pos+=len;\n    }\n while (dst.remaining() > 0);\n    dst.rewind();\n  }\n catch (  IOException e) {\n    long size;\n    try {\n      size=file.size();\n    }\n catch (    IOException e2) {\n      size=-1;\n    }\n    throw newIllegalStateException(ERROR_READING_FAILED,\"Reading from {0} failed; file length {1} \" + \"read length {2} at {3}\",file,size,dst.remaining(),pos,e);\n  }\n}"}
{"ids": "42138", "raw_code": "public void triggerCycle(){\n  lock.lock();\n  triggerCount++;\n  contextsParked=0;\n  lock.broadcast();\n  lock.unlock();\n}"}
{"ids": "53267", "raw_code": "protected boolean heapifyDownComparator(final int ipos,Object cur){\n  int pos=ipos;\n  final int half=size >>> 1;\n  while (pos < half) {\n    int min=pos;\n    Object best=cur;\n    final int lchild=(pos << 1) + 1;\n    Object left=queue[lchild];\n    if (comparator.compare(best,left) > 0) {\n      min=lchild;\n      best=left;\n    }\n    final int rchild=lchild + 1;\n    if (rchild < size) {\n      Object right=queue[rchild];\n      if (comparator.compare(best,right) > 0) {\n        min=rchild;\n        best=right;\n      }\n    }\n    if (min == pos) {\n      break;\n    }\n    queue[pos]=best;\n    pos=min;\n  }\n  queue[pos]=cur;\n  return (pos != ipos);\n}"}
{"ids": "27125", "raw_code": "public static boolean isString(String str){\n  return ((str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\")) || (str.startsWith(\"'\") && str.endsWith(\"'\"))) && str.length() > 1;\n}"}
{"ids": "10460", "raw_code": "static public boolean hasPhoto(Tweet tweet){\n  return getPhotoEntity(tweet) != null;\n}"}
{"ids": "53361", "raw_code": "public static StringBuilder formatTo(StringBuilder buf,long[] d,String sep){\n  if (d == null) {\n    return buf.append(\"null\");\n  }\n  if (d.length == 0) {\n    return buf;\n  }\n  buf.append(d[0]);\n  for (int i=1; i < d.length; i++) {\n    buf.append(sep);\n    buf.append(d[i]);\n  }\n  return buf;\n}"}
{"ids": "68674", "raw_code": "public static <T>int upperBound(final List<T> valueList,int fromIdx,int toIdx,final Comparable<T> value){\n  int len=toIdx - fromIdx + (toIdx > fromIdx ? 1 : 0);\n  int from=fromIdx;\n  int half;\n  int middle;\n  while (len > 0) {\n    half=len >> 1;\n    middle=from;\n    middle=middle + half;\n    if (value.compareTo(valueList.get(middle)) == -1) {\n      len=half;\n    }\n else {\n      from=middle;\n      from++;\n      len=len - half - 1;\n    }\n  }\n  return from;\n}"}
{"ids": "42925", "raw_code": "public int size(){\n  return data.size();\n}"}
{"ids": "85197", "raw_code": "public static synchronized void registerAdditionalHyphenationFileDirectory(String directory){\n  if (additionalHyphenationFileDirectories == null) {\n    additionalHyphenationFileDirectories=new ArrayList<>();\n  }\n  additionalHyphenationFileDirectories.add(directory);\n}"}
{"ids": "69351", "raw_code": "private void insertNewDriveFiles() throws IOException {\n  Cursor cursor=null;\n  try {\n    cursor=myTracksProviderUtils.getTrackCursor(SyncUtils.NO_DRIVE_ID_TRACKS_QUERY,null,null);\n    long recordingTrackId=PreferencesUtils.getLong(context,R.string.recording_track_id_key);\n    if (cursor != null && cursor.moveToFirst()) {\n      do {\n        Track track=myTracksProviderUtils.createTrack(cursor);\n        if (track.getId() == recordingTrackId) {\n          continue;\n        }\n        SyncUtils.insertDriveFile(drive,folderId,context,myTracksProviderUtils,track,true,true);\n      }\n while (cursor.moveToNext());\n    }\n  }\n  finally {\n    if (cursor != null) {\n      cursor.close();\n    }\n  }\n}"}
{"ids": "553", "raw_code": "private static String unescape(String s){\n  int len=s.length(), base=0, idx;\n  String escapes=\"tnrbf\\\\\\\"'\";\n  String chars=\"\\t\\n\\r\\b\\f\\\\\\\"'\";\n  StringBuffer sbuf=null;\n  while ((idx=s.indexOf('\\\\',base)) != -1) {\n    if (sbuf != null)     sbuf.append(s.substring(base,idx));\n    if (idx + 1 == len)     break;\n    char c=s.charAt(idx + 1);\n    int cidx=escapes.indexOf(c);\n    if (cidx == -1) {\n      sbuf.append('\\\\');\n      sbuf.append(c);\n    }\n else {\n      if (sbuf == null)       sbuf=new StringBuffer(s.substring(base,idx));\n      sbuf.append(chars.charAt(cidx));\n    }\n    base=idx + 2;\n  }\n  if (sbuf != null && base < len)   sbuf.append(s.substring(base));\n  return (sbuf == null ? s : sbuf.toString());\n}"}
{"ids": "11029", "raw_code": "public static void put(String dbgToken){\n  dbgTable.put(dbgToken,Boolean.TRUE);\n}"}
{"ids": "20528", "raw_code": "public boolean removeDataSet(T d){\n  if (d == null)   return false;\n  boolean removed=mDataSets.remove(d);\n  if (removed) {\n    mYValCount-=d.getEntryCount();\n    mYValueSum-=d.getYValueSum();\n    calcMinMax(mDataSets);\n  }\n  return removed;\n}"}
{"ids": "63364", "raw_code": "public Transfer writeString(String s) throws IOException {\n  if (s == null) {\n    out.writeInt(-1);\n  }\n else {\n    int len=s.length();\n    out.writeInt(len);\n    for (int i=0; i < len; i++) {\n      out.writeChar(s.charAt(i));\n    }\n  }\n  return this;\n}"}
{"ids": "71780", "raw_code": "private void fillInsideDraw(Graphics g,int x,int y,int w,int h){\n  g.setColor(Color.BLACK);\n  g.drawRect(x,y,w,h);\n  g.setColor(Color.LIGHT_GRAY);\n  g.fillRect(x + 1,y + 1,w - 1,h - 1);\n}"}
{"ids": "2131", "raw_code": "public DrawerBuilder addStickyDrawerItems(@NonNull IDrawerItem... stickyDrawerItems){\n  if (this.mStickyDrawerItems == null) {\n    this.mStickyDrawerItems=new ArrayList<>();\n  }\n  Collections.addAll(this.mStickyDrawerItems,stickyDrawerItems);\n  return this;\n}"}
{"ids": "53394", "raw_code": "public void appendToBuffer(StringBuilder buf){\n  Iterator<Polygon> iter=polygons.iterator();\n  while (iter.hasNext()) {\n    Polygon poly=iter.next();\n    poly.appendToBuffer(buf);\n    if (iter.hasNext()) {\n      buf.append(\" -- \");\n    }\n  }\n}"}
{"ids": "34464", "raw_code": "public void addFunction(FunctionInterface activeFunction){\n  functions.add(activeFunction);\n}"}
{"ids": "64122", "raw_code": "public static Charset toCharset(Charset charset){\n  return charset == null ? Charset.defaultCharset() : charset;\n}"}
{"ids": "21089", "raw_code": "public <T extends DataObject>Joiner join(Class<T> clazz,String alias){\n  if (!jClasses.isEmpty()) {\n    throw new JoinerException(\"Illegal use of Joiner; starting a new join in the middle of a join chain\");\n  }\n  JClass jc=new JClass(clazz,alias,jClasses.size());\n  jClasses.add(jc);\n  lastJClass=jc;\n  aliasMap.put(alias,jc);\n  return this;\n}"}
{"ids": "17165", "raw_code": "public ByteVector putByteArray(final byte[] b,final int off,final int len){\n  if (length + len > data.length) {\n    enlarge(len);\n  }\n  if (b != null) {\n    System.arraycopy(b,off,data,length,len);\n  }\n  length+=len;\n  return this;\n}"}
{"ids": "72919", "raw_code": "public static void showProgressBar(int status,int i){\n  if (mRootView != null) {\n    ProgressBar pb=(ProgressBar)mRootView.findViewById(R.id.progress_slice);\n    TextView tv=(TextView)mRootView.findViewById(R.id.viewer_text_progress_slice);\n    TextView tve=(TextView)mRootView.findViewById(R.id.viewer_text_estimated_time);\n    TextView tve_title=(TextView)mRootView.findViewById(R.id.viewer_estimated_time_textview);\n    if (mSlicingHandler.getLastReference() != null) {\n      tve_title.setVisibility(View.VISIBLE);\n      pb.setVisibility(View.VISIBLE);\nswitch (status) {\ncase StateUtils.SLICER_HIDE:\n        if (i < 0) {\n          tv.setText(R.string.error);\n        }\n else {\n          tv.setText(R.string.viewer_text_downloaded);\n        }\n      pb.setVisibility(View.INVISIBLE);\n    break;\ncase StateUtils.SLICER_UPLOAD:\n  String uploadText=mContext.getString(R.string.viewer_text_uploading);\nif (i == 0) pb.setIndeterminate(true);\n else {\n  pb.setProgress(i);\n  pb.setIndeterminate(false);\n  uploadText+=\" (\" + i + \"%)\";\n}\ntv.setText(uploadText);\ntve.setText(null);\nbreak;\ncase StateUtils.SLICER_SLICE:\nString slicingText=mContext.getString(R.string.viewer_text_slicing);\nif (i == 0) {\npb.setIndeterminate(true);\n}\n else if (i == 100) {\npb.setIndeterminate(false);\npb.setProgress(100);\nslicingText+=\"  \" + mContext.getString(R.string.viewer_text_done);\n}\n else {\npb.setProgress(i);\npb.setIndeterminate(false);\nslicingText+=\"  (\" + i + \"%)\";\n}\ntv.setText(slicingText);\ntve.setText(null);\nmRootView.invalidate();\nbreak;\ncase StateUtils.SLICER_DOWNLOAD:\nif (i > 0) {\ntve.setText(OctoprintConnection.ConvertSecondToHHMMString(String.valueOf(i)));\n}\ntv.setText(R.string.viewer_text_downloading);\npb.setIndeterminate(true);\nbreak;\ndefault :\nbreak;\n}\n}\n else {\npb.setVisibility(View.INVISIBLE);\ntve_title.setVisibility(View.INVISIBLE);\ntv.setText(null);\ntve.setText(null);\nmRootView.invalidate();\n}\n}\n}"}
{"ids": "33447", "raw_code": "public LaunchOption(Version version,Authenticator authenticator,MinecraftDirectory minecraftDir){\n  Objects.requireNonNull(version);\n  Objects.requireNonNull(authenticator);\n  Objects.requireNonNull(minecraftDir);\n  this.version=version;\n  this.authenticator=authenticator;\n  this.minecraftDirectory=minecraftDir;\n  this.runtimeDirectory=minecraftDir;\n  this.javaEnvironment=JavaEnvironment.current();\n}"}
{"ids": "24126", "raw_code": "protected boolean isStoppable(){\n  return (isRunning() && getLocator() != null);\n}"}
{"ids": "38888", "raw_code": "public void load(String fileName) throws Exception {\n  if (!fileName.endsWith(\".kf\") && !fileName.endsWith(\".kfml\")) {\n    throw new Exception(\"Can only load and run binary or xml serialized KnowledgeFlows \" + \"(*.kf | *.kfml)\");\n  }\n  if (fileName.endsWith(\".kf\")) {\n    loadBinary(fileName);\n  }\n else   if (fileName.endsWith(\".kfml\")) {\n    loadXML(fileName);\n  }\n}"}
{"ids": "70429", "raw_code": "public Bindings addOptComponent(String property,Class clazz,JToggleButton c,boolean enabledByDefault){\n  Binding b=new OptComponentBinding(this,property,clazz,c,enabledByDefault);\n  if (_optComponents.containsKey(property)) {\n    throw new BindingException(Messages.getString(\"Bindings.duplicate.binding\"));\n  }\n  _optComponents.put(property,b);\n  return this;\n}"}
{"ids": "17040", "raw_code": "public static boolean copyFile(File file,File copy){\n  if (file == null || copy == null)   throw new NullPointerException(\"File cannot be null\");\n  if (!file.isFile() || copy.isDirectory())   throw new IllegalArgumentException(\"Not a valid file\");\n  FileInputStream fis=null;\n  FileOutputStream fos=null;\n  try {\n    fis=new FileInputStream(file);\n    fos=new FileOutputStream(copy);\n    int bytes;\n    byte[] packet=new byte[COPY_PACKET_SIZE];\n    while ((bytes=fis.read(packet,0,COPY_PACKET_SIZE)) != -1)     fos.write(packet,0,bytes);\n    return true;\n  }\n catch (  Exception e) {\n    LOGGER.log(Level.SEVERE,\"Error copying file\",e);\n    return false;\n  }\n finally {\n    try {\n      if (fos != null)       fos.close();\n    }\n catch (    Exception e) {\n      LOGGER.log(Level.SEVERE,\"Problem closing target stream\",e);\n    }\n    try {\n      if (fis != null)       fis.close();\n    }\n catch (    Exception e) {\n      LOGGER.log(Level.SEVERE,\"Problem closing source stream\",e);\n    }\n  }\n}"}
{"ids": "19978", "raw_code": "public static byte[] encryptMySQLPassword(String password,byte[] seed){\n  if (password == null || password.equals(\"\")) {\n    return new byte[0];\n  }\n  MessageDigest digest=null;\n  try {\n    digest=MessageDigest.getInstance(\"SHA-1\");\n  }\n catch (  NoSuchAlgorithmException e) {\n    logger.error(\"Cannot encrypt password\",e);\n    return new byte[0];\n  }\n  byte[] stage1_hash=digest.digest(password.getBytes());\n  digest.reset();\n  byte[] sha1_stage1=digest.digest(stage1_hash);\n  digest.reset();\n  digest.update(seed);\n  digest.update(sha1_stage1);\n  byte[] finalSha1=digest.digest();\n  byte[] token=new byte[finalSha1.length];\n  for (int i=0; i < finalSha1.length; i++) {\n    token[i]=(byte)(stage1_hash[i] ^ finalSha1[i]);\n  }\n  return token;\n}"}
{"ids": "85229", "raw_code": "protected void addUrl(URL url){\n  if (urls.contains(url)) {\n    LOGGER.info(\"Skipped CRL url (duplicate): \" + url);\n    return;\n  }\n  urls.add(url);\n  LOGGER.info(\"Added CRL url: \" + url);\n}"}
{"ids": "38947", "raw_code": "private int[] defineNumeric(Random random){\n  int[] num=new int[getNumAttributes()];\n  for (int i=0; i < num.length; i++) {\n    num[i]=Attribute.NOMINAL;\n  }\n  int numNum=0;\n  for (int i=0; (numNum < getNumNumeric()) && (i < getNumAttributes() * 5); i++) {\n    int maybeNext=(int)(random.nextDouble() * num.length);\n    if (num[maybeNext] != Attribute.NUMERIC) {\n      num[maybeNext]=Attribute.NUMERIC;\n      numNum++;\n    }\n  }\n  return num;\n}"}
{"ids": "41000", "raw_code": "public static boolean isFavoriteStation(Context context,int iStation){\n  return isStationExist(context,iStation,STATION_TYPE_FAVORITE);\n}"}
{"ids": "49170", "raw_code": "protected void paintCaption(Graphics g,Rectangle rect){\n  String s=getTargetLabel();\n  if (s.equals(\"\")) {\n    return;\n  }\n  g.setFont(getTargetFont());\n  FontMetrics fm=g.getFontMetrics();\n  String str=getTargetLabel();\n  int width=fm.stringWidth(str);\n  int textx=rect.x + (rect.width - width) / 2;\n  int texty=rect.y + CAPTION_MARGIN_TOP + fm.getAscent();\n  int sepy=rect.y + rect.height - CAPTION_SEPARATOR_HEIGHT / 2;\n  g.setColor(isTargetEnabled() ? getForegroundColor() : getDisabledColor());\n  g.drawString(s,textx,texty);\n  draw3DRect(g,rect.x,sepy,rect.width,2,false);\n}"}
{"ids": "446", "raw_code": "public void putFloat(float x){\n  bb.putFloat(space-=4,x);\n}"}
{"ids": "48722", "raw_code": "final void putInt(int offset,int value){\n  unsafe.putInt(offset + address,value);\n}"}
{"ids": "18251", "raw_code": "private static boolean isUnreservedCharacter(char p_char){\n  return (isAlphanum(p_char) || MARK_CHARACTERS.indexOf(p_char) != -1);\n}"}
{"ids": "44817", "raw_code": "public static InetSocketAddress parseSocketAddress(String addr){\n  String[] parts=addr.split(COLON);\n  Preconditions.checkArgument(parts.length == 2);\n  String hostname=parts[0];\n  int port=Integer.parseInt(parts[1]);\n  return new InetSocketAddress(hostname,port);\n}"}
{"ids": "52897", "raw_code": "@Override public void writeExternal(ObjectOutput out) throws IOException {\n  super.writeExternal(out);\n  out.writeObject(approximation);\n}"}
{"ids": "60772", "raw_code": "public Object[] toArray(){\n  final Object[] items=this.items;\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    final int count=this.count;\n    Object[] a=new Object[count];\n    int n=items.length - takeIndex;\n    if (count <= n) {\n      System.arraycopy(items,takeIndex,a,0,count);\n    }\n else {\n      System.arraycopy(items,takeIndex,a,0,n);\n      System.arraycopy(items,0,a,n,count - n);\n    }\n    return a;\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "49576", "raw_code": "public void messageArrived(MqttPublish sendMessage){\n  final String methodName=\"messageArrived\";\n  if (mqttCallback != null || callbacks.size() > 0) {\nsynchronized (spaceAvailable) {\n      while (running && !quiescing && messageQueue.size() >= INBOUND_QUEUE_SIZE) {\n        try {\n          log.fine(CLASS_NAME,methodName,\"709\");\n          spaceAvailable.wait(200);\n        }\n catch (        InterruptedException ex) {\n        }\n      }\n    }\n    if (!quiescing) {\n      messageQueue.addElement(sendMessage);\nsynchronized (workAvailable) {\n        log.fine(CLASS_NAME,methodName,\"710\");\n        workAvailable.notifyAll();\n      }\n    }\n  }\n}"}
{"ids": "20008", "raw_code": "private void findHome(){\n  String home=System.getProperty(\"replicator.home.dir\");\n  if (home == null)   home=System.getProperty(\"manager.home\");\n  if (home == null)   home=System.getProperty(\"cluster.home\");\n  if (home == null)   home=System.getProperty(\"user.dir\");\n  if (home != null)   manifestPath=home + File.separator + \"..\"+ File.separator+ manifestFileName;\n else   manifestPath=manifestFileName;\n}"}
{"ids": "59623", "raw_code": "private List<String> checkAllColumnsInCube(CubeInstance cube,TableDesc table,Map<String,HiveTableMeta.HiveTableColumnMeta> fieldsMap){\n  Set<ColumnDesc> usedColumns=Sets.newHashSet();\n  for (  TblColRef col : cube.getAllColumns()) {\n    usedColumns.add(col.getColumnDesc());\n  }\n  List<String> violateColumns=Lists.newArrayList();\n  for (  ColumnDesc column : table.getColumns()) {\n    if (usedColumns.contains(column)) {\n      HiveTableMeta.HiveTableColumnMeta field=fieldsMap.get(column.getName());\n      if (field == null || !isColumnCompatible(column,field)) {\n        violateColumns.add(column.getName());\n      }\n    }\n  }\n  return violateColumns;\n}"}
{"ids": "81050", "raw_code": "public static String makeUnifiedLineFeeds(String query){\n  if (query.indexOf('\\r') == -1) {\n    return query;\n  }\n  StringBuilder result=new StringBuilder(query.length());\n  for (int i=0; i < query.length(); i++) {\n    char c=query.charAt(i);\n    if (c == '\\r') {\n      continue;\n    }\n    result.append(c);\n  }\n  return result.toString();\n}"}
{"ids": "31372", "raw_code": "private void reflectMemberVariablesInLeftButton(){\n  final boolean lastPageReached=(viewPager.getCurrentItem() + 1) == pages.size();\n  final boolean buttonShouldBeInvisible=(lastPageReached && disableLeftButtonOnLastPage) || leftButtonDisabled;\n  final boolean buttonIsCurrentlyInvisible=leftButton.getVisibility() == View.INVISIBLE;\n  final boolean shouldUpdateButton=buttonShouldBeInvisible != buttonIsCurrentlyInvisible;\n  if (shouldUpdateButton) {\n    final Animator buttonAnimator=buttonShouldBeInvisible ? buttonAnimatorFactory.newLeftButtonDisappearAnimator(leftButton) : buttonAnimatorFactory.newLeftButtonAppearAnimator(leftButton);\n    if (buttonShouldBeInvisible) {\n      disableButton(buttonAnimator,leftButton);\n    }\n else {\n      enableButton(buttonAnimator,leftButton);\n    }\n  }\n}"}
{"ids": "23376", "raw_code": "public static void registerSemiDisposableBlock(String oreDictName){\n  semiDisposableBlocks.add(oreDictName);\n}"}
{"ids": "74300", "raw_code": "public boolean acceptsTypeName(String type){\n  return _typeList.contains(type);\n}"}
{"ids": "59911", "raw_code": "public void deleteAsync(final String id,final FutureCallback<Task> responseCallback) throws IOException {\n  deleteObjectAsync(id,responseCallback);\n}"}
{"ids": "48974", "raw_code": "private boolean continueAfterAcceptFailure(Throwable t){\n  RMIFailureHandler fh=RMISocketFactory.getFailureHandler();\n  if (fh != null) {\n    return fh.failure(t instanceof Exception ? (Exception)t : new InvocationTargetException(t));\n  }\n else {\n    throttleLoopOnException();\n    return true;\n  }\n}"}
{"ids": "66742", "raw_code": "private static void processPackage(String tbName,Packages pkg){\n  String classNamePrefix=StringUtil.parseHumpName(tbName,true,isHumpModelClass);\n  pkg.setDao(packagePrefix + (StringUtil.isEmpty(packagePrefix) || StringUtil.isEmpty(packageDao) ? \"\" : \".\") + packageDao);\n  pkg.setDaoName(classNamePrefix + daoSuffix);\n  pkg.setModel(packagePrefix + (StringUtil.isEmpty(packagePrefix) || StringUtil.isEmpty(packageModel) ? \"\" : \".\") + packageModel);\n  pkg.setModelName(classNamePrefix + modelSuffix);\n  pkg.setMapperXml(packagePrefix + (StringUtil.isEmpty(packagePrefix) || StringUtil.isEmpty(packageMapperXml) ? \"\" : \".\") + packageMapperXml);\n  pkg.setMapperXmlName(classNamePrefix + mapperXmlSuffix);\n  pkg.setModelNameLowerFirst(StringUtil.lowerFirst(pkg.getModelName()));\n}"}
{"ids": "76275", "raw_code": "public boolean addCall(String sourceClass,String sourceMethod,String targetClass,String targetMethod){\n  CallGraphEntry from=new CallGraphEntry(targetClass,targetMethod);\n  CallGraphEntry to=new CallGraphEntry(sourceClass,sourceMethod);\n  if (sourceClass.equals(className))   cutNodes.add(to);\n  if (!graph.containsEdge(from,to)) {\n    graph.addEdge(from,to);\n    callGraphClasses.add(targetClass.replaceAll(\"/\",\".\"));\n    return true;\n  }\n  return false;\n}"}
{"ids": "27243", "raw_code": "private static void doThreadDump(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {\n  resp.setStatus(HTTP_OK);\n  resp.addHeader(\"Cache-Control\",\"no-cache\");\n  resp.setContentType(MIME_TEXT_PLAIN);\n  final PrintWriter w=resp.getWriter();\n  try {\n    BigdataStatics.threadDump(w);\n    w.flush();\n  }\n catch (  Throwable t) {\n    launderThrowable(t,resp,\"\");\n  }\n finally {\n    w.close();\n  }\n}"}
{"ids": "13076", "raw_code": "public static boolean isValidNmtoken(String nmtoken){\n  final int length=nmtoken.length();\n  if (length == 0) {\n    return false;\n  }\n  for (int i=0; i < length; ++i) {\n    char ch=nmtoken.charAt(i);\n    if (!isName(ch)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "70234", "raw_code": "public MMRoll(MMRandom rng){\n  super(6,1);\n  this.total=rng.randomInt(this.faces) + this.min;\n  all.addElement(this.total);\n}"}
{"ids": "13892", "raw_code": "public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException {\n  returnToHomePage();\n}"}
{"ids": "27085", "raw_code": "static <T>UnixStream<T> unixify(final Stream<T> stream){\n  Objects.requireNonNull(stream,\"The input stream must not be null\");\n  return new UnixStreamImpl<>(stream);\n}"}
{"ids": "16901", "raw_code": "@Deprecated public MediaFile(File f){\n  this(f.toPath(),null);\n}"}
{"ids": "9600", "raw_code": "public static KeyStore load(File keyStoreFile,Password password,KeyStoreType keyStoreType) throws CryptoException, FileNotFoundException {\n  if (!keyStoreType.isFileBased()) {\n    throw new CryptoException(MessageFormat.format(res.getString(\"NoLoadKeyStoreNotFile.exception.message\"),keyStoreType.jce()));\n  }\n  FileInputStream fis=new FileInputStream(keyStoreFile);\n  KeyStore keyStore=getKeyStoreInstance(keyStoreType);\n  try {\n    keyStore.load(fis,password.toCharArray());\n  }\n catch (  CertificateException ex) {\n    throw new KeyStoreLoadException(MessageFormat.format(res.getString(\"NoLoadKeyStoreType.exception.message\"),keyStoreType),ex,keyStoreType);\n  }\ncatch (  NoSuchAlgorithmException ex) {\n    throw new KeyStoreLoadException(MessageFormat.format(res.getString(\"NoLoadKeyStoreType.exception.message\"),keyStoreType),ex,keyStoreType);\n  }\ncatch (  FileNotFoundException ex) {\n    throw ex;\n  }\ncatch (  IOException ex) {\n    throw new KeyStoreLoadException(MessageFormat.format(res.getString(\"NoLoadKeyStoreType.exception.message\"),keyStoreType),ex,keyStoreType);\n  }\n finally {\n    IOUtils.closeQuietly(fis);\n  }\n  return keyStore;\n}"}
{"ids": "79254", "raw_code": "public static String addToCartBulk(HttpServletRequest request,HttpServletResponse response){\n  String categoryId=request.getParameter(\"category_id\");\n  ShoppingCart cart=getCartObject(request);\n  Delegator delegator=(Delegator)request.getAttribute(\"delegator\");\n  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute(\"dispatcher\");\n  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);\n  String controlDirective;\n  Map<String,Object> result;\n  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);\n  String catalogId=CatalogWorker.getCurrentCatalogId(request);\n  result=cartHelper.addToCartBulk(catalogId,categoryId,paramMap);\n  controlDirective=processResult(result,request);\n  if (controlDirective.equals(ERROR)) {\n    return \"error\";\n  }\n else {\n    return \"success\";\n  }\n}"}
{"ids": "56519", "raw_code": "public void dumpLog(String containerId,File logFile) throws DockerException, InterruptedException {\n  LogStream errorStream=null;\n  FileChannel fileChannel=null;\n  FileOutputStream fileOutputStream=null;\n  try {\n    if (logFile.exists()) {\n      logFile.delete();\n    }\n    logFile.createNewFile();\n    fileOutputStream=new FileOutputStream(logFile);\n    fileChannel=fileOutputStream.getChannel();\n    errorStream=dockerClient.logs(containerId,LogsParam.stderr());\n    while (errorStream.hasNext()) {\n      LogMessage message=errorStream.next();\n      ByteBuffer buffer=message.content();\n      fileChannel.write(buffer);\n    }\n  }\n catch (  FileNotFoundException e) {\n    throw new DockerException(\"File \" + logFile + \" not found\");\n  }\ncatch (  IOException e) {\n    throw new DockerException(e);\n  }\n finally {\n    if (errorStream != null) {\n      errorStream.close();\n    }\n    if (fileChannel != null) {\n      try {\n        fileChannel.close();\n      }\n catch (      IOException e) {\n        logger.error(\"Failed to close file channel\",e);\n      }\n    }\n    if (fileOutputStream != null) {\n      try {\n        fileOutputStream.close();\n      }\n catch (      IOException e) {\n        logger.error(\"Failed to close file output stream\",e);\n      }\n    }\n  }\n}"}
{"ids": "53122", "raw_code": "public static final void warning(String message,Throwable e){\n  if (message == null && e != null) {\n    message=e.getMessage();\n  }\n  logExpensive(Level.WARNING,message,e);\n}"}
{"ids": "82228", "raw_code": "public static IndexedImage pack(int[] rgb,int width,int height){\n  int arrayLength=width * height;\n  int[] tempPalette=new int[256];\n  int paletteLocation=0;\n  for (int iter=0; iter < arrayLength; iter++) {\n    int current=rgb[iter];\n    if (!contains(tempPalette,paletteLocation,current)) {\n      if (paletteLocation > 255) {\n        return null;\n      }\n      tempPalette[paletteLocation]=current;\n      paletteLocation++;\n    }\n  }\n  if (paletteLocation != tempPalette.length) {\n    int[] newArray=new int[paletteLocation];\n    System.arraycopy(tempPalette,0,newArray,0,paletteLocation);\n    tempPalette=newArray;\n  }\n  IndexedImage i=new IndexedImage(width,height,tempPalette,rgb);\n  return i;\n}"}
{"ids": "82081", "raw_code": "public void addHint(Component hintComponent,Component destinationComponent,String position){\n  hintComponent.putClientProperty(POS,position);\n  hintComponent.putClientProperty(DEST,destinationComponent);\n  vec.addElement(hintComponent);\n}"}
{"ids": "48506", "raw_code": "public static int convertSRGBtoLinearRGB(int color){\n  float input, output;\n  input=color / 255.0f;\n  if (input <= 0.04045f) {\n    output=input / 12.92f;\n  }\n else {\n    output=(float)Math.pow((input + 0.055) / 1.055,2.4);\n  }\n  return Math.round(output * 255.0f);\n}"}
{"ids": "15774", "raw_code": "public void finish() throws SQLException {\n  Statement statement=connection.createStatement();\n  statement.execute(\"CREATE INDEX articleIdx on revisions(ArticleID);\");\n  statement.close();\n  statement=connection.createStatement();\n  statement.execute(\"ALTER TABLE index_articleID_rc_ts ENABLE KEYS;\");\n  statement.close();\n  statement=connection.createStatement();\n  statement.execute(\"ALTER TABLE index_revisionID ENABLE KEYS;\");\n  statement.close();\n  statement=connection.createStatement();\n  statement.execute(\"ALTER TABLE index_chronological ENABLE KEYS;\");\n  statement.close();\n}"}
{"ids": "13927", "raw_code": "public AuthorizationCode(String code,String resourceOwnerId,String clientId,String redirectUri,Set<String> scope,String claims,long expiryTime,String nonce,String realm,String authModules,String acr,String ssoTokenId,String codeChallenge,String codeChallengeMethod,String authGrantId,String auditId){\n  super(new HashMap<String,Object>());\n  setStringProperty(ID,code);\n  setStringProperty(USERNAME,resourceOwnerId);\n  setStringProperty(CLIENT_ID,clientId);\n  setStringProperty(REDIRECT_URI,redirectUri);\n  setStringProperty(EXPIRE_TIME,String.valueOf(expiryTime));\n  put(SCOPE,newList(scope));\n  setStringProperty(TOKEN_TYPE,\"Bearer\");\n  setStringProperty(TOKEN_NAME,OAUTH_CODE_TYPE);\n  setStringProperty(NONCE,nonce);\n  setStringProperty(AUTH_MODULES,authModules);\n  setStringProperty(ACR,acr);\n  setStringProperty(CODE_CHALLENGE,codeChallenge);\n  setStringProperty(CODE_CHALLENGE_METHOD,codeChallengeMethod);\n  setStringProperty(AUTH_GRANT_ID,authGrantId);\n  setStringProperty(REALM,realm == null || realm.isEmpty() ? \"/\" : realm);\n  setStringProperty(SSO_TOKEN_ID,ssoTokenId);\n  put(CLAIMS,CollectionUtils.asList(claims));\n  setStringProperty(AUDIT_TRACKING_ID,auditId);\n}"}
{"ids": "7414", "raw_code": "@Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){\n  draw(g2,area);\n  return null;\n}"}
{"ids": "6572", "raw_code": "public boolean isRowVisible(int row){\n  if (row != -1) {\n    Rectangle cellRect=getCellRect(row,0,false);\n    Rectangle visibleRect=getVisibleRect();\n    return visibleRect.intersects(cellRect);\n  }\n else   return false;\n}"}
{"ids": "28540", "raw_code": "public void signalEvent(){\n  Collection<Semaphore> semaphores=_semaphores.values();\n  for (  Semaphore semaphore : semaphores) {\n    semaphore.release();\n    semaphores.remove(semaphore);\n  }\n}"}
{"ids": "21149", "raw_code": "public static int fileInTimeRange(File f,Date start,Date end){\n  long time=getFileTime(f);\n  if (start != null && time < start.getTime()) {\n    return -1;\n  }\n  if (end != null && time > end.getTime()) {\n    return 1;\n  }\n  return 0;\n}"}
{"ids": "17984", "raw_code": "public Object extFunction(String ns,String funcName,Vector argVec,Object methodKey,ExpressionContext exprContext) throws javax.xml.transform.TransformerException {\n  Object result=null;\n  if (null != ns) {\n    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);\n    if (null != extNS) {\n      try {\n        result=extNS.callFunction(funcName,argVec,methodKey,exprContext);\n      }\n catch (      javax.xml.transform.TransformerException e) {\n        throw e;\n      }\ncatch (      Exception e) {\n        throw new javax.xml.transform.TransformerException(e);\n      }\n    }\n else {\n      throw new XPathProcessorException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_FUNC_UNKNOWN,new Object[]{ns,funcName}));\n    }\n  }\n  return result;\n}"}
{"ids": "38794", "raw_code": "private synchronized void block(boolean tf){\n  if (tf) {\n    try {\n      if (m_buildThread.isAlive() && m_state != IDLE) {\n        wait();\n      }\n    }\n catch (    InterruptedException ex) {\n    }\n  }\n else {\n    notifyAll();\n  }\n}"}
{"ids": "13583", "raw_code": "public Set<Resource> onClass(){\n  Set<Resource> targets=new HashSet<>();\n  for (  OwlClass c : qcClasses) {\n    targets.add(c.getURI());\n  }\n  return targets;\n}"}
{"ids": "67681", "raw_code": "public static int indexOfChars(String str,String chars,int fromIndex){\n  final int len=str.length();\n  for (int pos=fromIndex; pos < len; pos++) {\n    if (chars.indexOf(str.charAt(pos)) >= 0) {\n      return pos;\n    }\n  }\n  return -1;\n}"}
{"ids": "16315", "raw_code": "private synchronized void notifyZoomListeners(ZoomEvent e){\n  for (  ZoomListener listener : mZoomListeners) {\n    listener.zoomApplied(e);\n  }\n}"}
{"ids": "16195", "raw_code": "public static String buildStringFromLines(String... lines){\n  int numChars=lines.length;\n  for (  String line : lines) {\n    numChars+=line.length();\n  }\n  StringBuilder builder=new StringBuilder(numChars);\n  for (  String line : lines) {\n    builder.append(line);\n    builder.append('\\n');\n  }\n  return builder.toString();\n}"}
{"ids": "41391", "raw_code": "public void init(){\n  if (mContext == null) {\n    return;\n  }\n  if (mName.isEmpty()) {\n    mName=mContext.getPackageName();\n  }\n  if (mMode == INVALID_VALUE || (mMode != MODE_PRIVATE && mMode != MODE_WORLD_READABLE && mMode != MODE_WORLD_WRITEABLE)) {\n    mMode=MODE_PRIVATE;\n  }\n  mSharedPreferences=mContext.getSharedPreferences(mName,mMode);\n}"}
{"ids": "49990", "raw_code": "@Override public void mergeAndOutputTransformationMetadata(Iterator<DistinctValue> values,String outputDir,int colID,FileSystem fs,TfUtils agents) throws IOException {\n  double min=Double.MAX_VALUE;\n  double max=-Double.MAX_VALUE;\n  int nbins=0;\n  DistinctValue val=new DistinctValue();\n  String w=null;\n  double d;\n  while (values.hasNext()) {\n    val.reset();\n    val=values.next();\n    w=val.getWord();\n    if (w.startsWith(MIN_PREFIX)) {\n      d=UtilFunctions.parseToDouble(w.substring(MIN_PREFIX.length()));\n      if (d < min)       min=d;\n    }\n else     if (w.startsWith(MAX_PREFIX)) {\n      d=UtilFunctions.parseToDouble(w.substring(MAX_PREFIX.length()));\n      if (d > max)       max=d;\n    }\n else     if (w.startsWith(NBINS_PREFIX)) {\n      nbins=(int)UtilFunctions.parseToLong(w.substring(NBINS_PREFIX.length()));\n    }\n else     throw new RuntimeException(\"MVImputeAgent: Invalid prefix while merging map output: \" + w);\n  }\n  double binwidth=(max - min) / nbins;\n  writeTfMtd(colID,Double.toString(min),Double.toString(max),Double.toString(binwidth),Integer.toString(nbins),outputDir,fs,agents);\n}"}
{"ids": "71416", "raw_code": "static SQLWarning convertShowWarningsToSQLWarnings(Connection connection) throws SQLException {\n  return convertShowWarningsToSQLWarnings(connection,0,false);\n}"}
{"ids": "38828", "raw_code": "public boolean hasEmptyRow(){\n  if (m_dataVector.size() == 0) {\n    return false;\n  }\n  List<String> dataRow=m_dataVector.get(m_dataVector.size() - 1);\n  for (  String s : dataRow) {\n    if (s.length() != 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "58044", "raw_code": "public Node selectSingleNode(Node contextNode,String str,Node namespaceNode) throws TransformerException {\n  NodeIterator nl=selectNodeIterator(contextNode,str,namespaceNode);\n  return nl.nextNode();\n}"}
{"ids": "67695", "raw_code": "private static String javaScriptEscapeHelper(String s,boolean escapeToAscii){\n  StringBuilder sb=new StringBuilder(s.length() * 9 / 8);\n  for (int i=0; i < s.length(); i++) {\n    char c=s.charAt(i);\nswitch (c) {\ncase '\\n':\n      sb.append(\"\\\\n\");\n    break;\ncase '\\r':\n  sb.append(\"\\\\r\");\nbreak;\ncase '\\t':\nsb.append(\"\\\\t\");\nbreak;\ncase '\\\\':\nsb.append(\"\\\\\\\\\");\nbreak;\ncase '\\\"':\nsb.append(\"\\\\\\\"\");\nbreak;\ncase '\\'':\nsb.append(\"\\\\\\'\");\nbreak;\ncase '=':\nappendHexJavaScriptRepresentation(sb,c);\nbreak;\ncase '<':\ncase '/':\nboolean isUnsafe=false;\nfor (String tag : UNSAFE_TAGS) {\nif (s.regionMatches(true,i + 1,tag,0,tag.length())) {\nisUnsafe=true;\nbreak;\n}\n}\nif (isUnsafe) {\nappendHexJavaScriptRepresentation(sb,c);\n}\n else {\nsb.append(c);\n}\nbreak;\ncase '>':\nif (sb.length() > 0 && sb.charAt(sb.length() - 1) == '-') {\nsb.append('\\\\');\n}\nsb.append(c);\nbreak;\ncase '\\u2028':\nsb.append(\"\\\\u2028\");\nbreak;\ncase '\\u2029':\nsb.append(\"\\\\u2029\");\nbreak;\ndefault :\nif (c >= 128 && escapeToAscii) {\nappendHexJavaScriptRepresentation(sb,c);\n}\n else {\nsb.append(c);\n}\n}\n}\nreturn sb.toString();\n}"}
{"ids": "70459", "raw_code": "public synchronized void add(String category,double value){\n  mCategories.add(category);\n  mValues.add(value);\n}"}
{"ids": "80834", "raw_code": "public final void walkGraph(Hashtable semNodesTable){\n  Integer uid=new Integer(myUID);\n  if (semNodesTable.get(uid) != null)   return;\n  semNodesTable.put(uid,this);\n  if (assumeExpr != null) {\n    assumeExpr.walkGraph(semNodesTable);\n  }\n  ;\n}"}
{"ids": "20213", "raw_code": "private List<ValueComboBoxDataGroup> populateSymbolList(Class<?> panelDetails){\n  List<ValueComboBoxDataGroup> combinedSymbolList=new ArrayList<ValueComboBoxDataGroup>();\n  for (  FieldState panel : symbolTypeFieldList) {\n    panel.populateSymbolList(panelDetails,combinedSymbolList);\n  }\n  return combinedSymbolList;\n}"}
{"ids": "6736", "raw_code": "@Override public int hashCode(){\n  long value=17;\n  value+=37 * value + Double.doubleToLongBits(Math.abs(x));\n  value+=37 * value + Double.doubleToLongBits(Math.abs(y));\n  return (int)(value ^ (value >>> 32));\n}"}
{"ids": "35510", "raw_code": "public void disconnect(){\n  socket.disconnect();\n}"}
{"ids": "66226", "raw_code": "protected void initComponentDefaults(UIDefaults table){\n  super.initComponentDefaults(table);\n  Color c=table.getColor(\"TextField.background\");\n  table.put(\"ComboBox.background\",c);\n  table.put(\"ComboBox.listBackground\",c);\n}"}
{"ids": "69812", "raw_code": "public int indexOfColumnName(String columnName){\n  return columnNameList.indexOf(columnName.toLowerCase());\n}"}
{"ids": "23638", "raw_code": "public boolean clear(T expect,boolean allowReset){\n  sync.lock();\n  try {\n    if (expect != value) {\n      return false;\n    }\n    ValueState prev=state;\n    clear(allowReset);\n    return prev == ValueState.SET;\n  }\n  finally {\n    sync.unlock();\n  }\n}"}
{"ids": "27517", "raw_code": "public void copyStream(InputStream is) throws IOException {\n  super.setContentEncoding(null);\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  while (true) {\n    int b=is.read();\n    if (b == -1) {\n      content=baos.toByteArray();\n      is.close();\n      return;\n    }\n  }\n}"}
{"ids": "10609", "raw_code": "public void interrupt(){\n  Thread t=threadVar.get();\n  if (t != null) {\n    t.interrupt();\n  }\n  threadVar.clear();\n}"}
{"ids": "61560", "raw_code": "public final boolean isSecure(Socket sock) throws IllegalArgumentException {\n  if (sock == null) {\n    throw new IllegalArgumentException(\"Socket may not be null.\");\n  }\n  if (sock.getClass() != Socket.class) {\n    throw new IllegalArgumentException(\"Socket not created by this factory.\");\n  }\n  if (sock.isClosed()) {\n    throw new IllegalArgumentException(\"Socket is closed.\");\n  }\n  return false;\n}"}
{"ids": "12898", "raw_code": "protected boolean checkList(String currentVal,String tokenValue){\n  if (currentVal == null || tokenValue == null) {\n    throw new NullPointerException(\"Received null argument\");\n  }\n  if (!currentVal.startsWith(\"INLIST\") && !currentVal.startsWith(\"!INLIST\")) {\n    throw new IllegalArgumentException(\"currentVal does not start with INLIST or !INLIST\");\n  }\n  boolean negation=currentVal.startsWith(\"!\");\n  String listName=currentVal.substring(currentVal.indexOf(\":\") + 1);\n  Object listObj=listMap.get(listName);\n  if (listObj == null)   return false;\n  boolean contains;\n  if (listObj instanceof Set) {\n    Set<String> set=(Set)listObj;\n    contains=set.contains(tokenValue);\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown list representation: \" + listObj);\n  }\n  return !(contains && negation || !contains && !negation);\n}"}
{"ids": "81150", "raw_code": "public static synchronized void addNativeLibraryDependencies(String name,String... dependencyNames){\n  List<String> list=libraryDependencies.get(name);\n  if (list == null) {\n    libraryDependencies.put(name,list=new ArrayList<String>());\n  }\n  for (  String dependencyName : dependencyNames) {\n    if (!list.contains(dependencyName)) {\n      list.add(dependencyName);\n    }\n  }\n}"}
{"ids": "53090", "raw_code": "@Override protected boolean hasOverflow(FlatRStarTreeNode node){\n  if (node.isLeaf()) {\n    return node.getNumEntries() == leafCapacity;\n  }\n else   if (node.getNumEntries() == node.getCapacity()) {\n    node.increaseEntries();\n  }\n  return false;\n}"}
{"ids": "21560", "raw_code": "public void processVolumeExpansion(StorageSystem storageSystem,URI storagePoolURI,URI volumeId,CIMArgument[] outArgs) throws Exception {\n  StringBuilder logMsgBuilder=new StringBuilder(String.format(\"Processing volume expansion - \"));\n  CimConnection connection=_cimConnection.getConnection(storageSystem);\n  WBEMClient client=connection.getCimClient();\n  StoragePool storagePool=_dbClient.queryObject(StoragePool.class,storagePoolURI);\n  StringMap reservationMap=storagePool.getReservedCapacityMap();\n  reservationMap.remove(volumeId.toString());\n  updateStoragePoolCapacity(client,storagePool);\n  _dbClient.persistObject(storagePool);\n  Volume volume=_dbClient.queryObject(Volume.class,volumeId);\n  CIMObjectPath volumePath=(CIMObjectPath)_cimPath.getFromOutputArgs(outArgs,IBMSmisConstants.CP_THE_ELEMENT);\n  boolean isSuccess=false;\n  if (volumePath != null) {\n    CIMInstance volumeInstance=client.getInstance(volumePath,true,false,null);\n    if (volumeInstance != null) {\n      isSuccess=true;\n      volume.setProvisionedCapacity(getProvisionedCapacityInformation(volumeInstance));\n      volume.setAllocatedCapacity(getAllocatedCapacityInformation(client,volumeInstance));\n      _dbClient.persistObject(volume);\n      logMsgBuilder.append(String.format(\"%n   Capacity: %s, Provisioned capacity: %s, Allocated Capacity: %s\",volume.getCapacity(),volume.getProvisionedCapacity(),volume.getAllocatedCapacity()));\n    }\n  }\n  if (!isSuccess) {\n    UnsignedInteger32 returnCoede=(UnsignedInteger32)_cimPath.getFromOutputArgs(outArgs,IBMSmisConstants.CP_RETURN_CODE);\n    logMsgBuilder.append(\"\\n\");\n    logMsgBuilder.append(String.format(\"Failed to expand volume: %s with return code: %s\",volume.getId(),returnCoede.toString()));\n  }\n  _log.info(logMsgBuilder.toString());\n}"}
{"ids": "46056", "raw_code": "void updateFromNativeNode(Node node,boolean fromScratch) throws IIOInvalidTreeException {\n  NamedNodeMap attrs=node.getAttributes();\n  if (attrs.getLength() > 0) {\n    int value=getAttributeValue(node,attrs,\"majorVersion\",0,255,false);\n    majorVersion=(value != -1) ? value : majorVersion;\n    value=getAttributeValue(node,attrs,\"minorVersion\",0,255,false);\n    minorVersion=(value != -1) ? value : minorVersion;\n    value=getAttributeValue(node,attrs,\"resUnits\",0,2,false);\n    resUnits=(value != -1) ? value : resUnits;\n    value=getAttributeValue(node,attrs,\"Xdensity\",1,65535,false);\n    Xdensity=(value != -1) ? value : Xdensity;\n    value=getAttributeValue(node,attrs,\"Ydensity\",1,65535,false);\n    Ydensity=(value != -1) ? value : Ydensity;\n    value=getAttributeValue(node,attrs,\"thumbWidth\",0,255,false);\n    thumbWidth=(value != -1) ? value : thumbWidth;\n    value=getAttributeValue(node,attrs,\"thumbHeight\",0,255,false);\n    thumbHeight=(value != -1) ? value : thumbHeight;\n  }\n  if (node.hasChildNodes()) {\n    NodeList children=node.getChildNodes();\n    int count=children.getLength();\n    if (count > 2) {\n      throw new IIOInvalidTreeException(\"app0JFIF node cannot have > 2 children\",node);\n    }\n    for (int i=0; i < count; i++) {\n      Node child=children.item(i);\n      String name=child.getNodeName();\n      if (name.equals(\"JFXX\")) {\n        if ((!extSegments.isEmpty()) && fromScratch) {\n          throw new IIOInvalidTreeException(\"app0JFIF node cannot have > 1 JFXX node\",node);\n        }\n        NodeList exts=child.getChildNodes();\n        int extCount=exts.getLength();\n        for (int j=0; j < extCount; j++) {\n          Node ext=exts.item(j);\n          extSegments.add(new JFIFExtensionMarkerSegment(ext));\n        }\n      }\n      if (name.equals(\"app2ICC\")) {\n        if ((iccSegment != null) && fromScratch) {\n          throw new IIOInvalidTreeException(\"> 1 ICC APP2 Marker Segment not supported\",node);\n        }\n        iccSegment=new ICCMarkerSegment(child);\n      }\n    }\n  }\n}"}
{"ids": "1704", "raw_code": "@Override public void createConnectionFactory(String name,boolean ha,boolean useDiscovery,int cfType,String connectors,String bindings) throws Exception {\n  createConnectionFactory(name,ha,useDiscovery,cfType,toArray(connectors),toArray(bindings));\n}"}
{"ids": "81788", "raw_code": "protected Object evaluateSingle(List elements,String expr){\n  List array;\n  if (elements instanceof java.util.Vector) {\n    array=new java.util.Vector();\n  }\n else {\n    array=new ArrayList();\n  }\n  for (Iterator e=elements.iterator(); e.hasNext(); ) {\n    Object o=e.next();\n    if (o instanceof StructuredContent) {\n      if ((o=evaluateSingle((StructuredContent)o,expr)) != null) {\n        array.add(o);\n      }\n    }\n  }\n  if (array.size() == 1) {\n    return (StructuredContent)array.get(0);\n  }\n  return array;\n}"}
{"ids": "38423", "raw_code": "private int doScale(int number,double factor){\n  return (int)StrictMath.round(number * factor);\n}"}
{"ids": "84244", "raw_code": "private int parseMessageId(final byte[] b,final int off) throws ParseException {\n  final int messageIdLen=Constants.MESSAGE_ID_LEN;\n  final int len=b.length - off;\n  if (len >= messageIdLen) {\n    messageId_=Arrays.copyOfRange(b,off,off + messageIdLen);\n    return messageIdLen;\n  }\n else {\n    throw new ParseException(\"Not enough bytes to parse serial number\");\n  }\n}"}
{"ids": "49395", "raw_code": "static void generateCharacterClass(String theTemplateFileName,String theOutputFileName) throws FileNotFoundException, IOException {\n  BufferedReader in=new BufferedReader(new FileReader(theTemplateFileName));\n  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(theOutputFileName)));\n  out.println(commentStart + \" This file was generated AUTOMATICALLY from a template file \" + new java.util.Date()+ commentEnd);\n  int marklen=commandMarker.length();\n  LOOP:   while (true) {\n    try {\n      String line=in.readLine();\n      if (line == null)       break LOOP;\n      int pos=0;\n      int depth=0;\n      while ((pos=line.indexOf(commandMarker,pos)) >= 0) {\n        int newpos=pos + marklen;\n        char ch='x';\n        SCAN:         while (newpos < line.length() && (Character.isJavaIdentifierStart(ch=line.charAt(newpos)) || ch == '(' || (ch == ')' && depth > 0))) {\n          ++newpos;\n          if (ch == '(') {\n            ++depth;\n          }\n else           if (ch == ')') {\n            --depth;\n            if (depth == 0)             break SCAN;\n          }\n        }\n        String replacement=replaceCommand(line.substring(pos + marklen,newpos));\n        line=line.substring(0,pos) + replacement + line.substring(newpos);\n        pos+=replacement.length();\n      }\n      out.println(line);\n    }\n catch (    IOException e) {\n      break LOOP;\n    }\n  }\n  in.close();\n  out.close();\n}"}
{"ids": "4636", "raw_code": "public static String combineExtensions(final String[] extensions){\n  Check.notNull(extensions,\"extensions\");\n  final StringBuffer ret=new StringBuffer();\n  for (int i=0; i < extensions.length; i++) {\n    if (i > 0) {\n      ret.append(\", \");\n    }\n    ret.append(extensions[i]);\n  }\n  return ret.toString();\n}"}
{"ids": "14973", "raw_code": "public static void initializeProperties(String file) throws MissingResourceException {\n  Properties props=new Properties();\n  ResourceBundle bundle=ResourceBundle.getBundle(file);\n  for (  String key : bundle.keySet()) {\n    props.put(key,bundle.getString(key));\n  }\n  initializeProperties(props,false,false);\n}"}
{"ids": "73200", "raw_code": "public void addListener(final Listener listener){\n  listeners.add(listener);\n}"}
{"ids": "75174", "raw_code": "public List<T> queryAsList(){\n  QuantumFluxCursor<T> cursor=queryAsCursor();\n  try {\n    List<T> resultList=new ArrayList<>(cursor.getCount());\n    while (cursor.moveToNext()) {\n      resultList.add(cursor.inflate());\n    }\n    return resultList;\n  }\n  finally {\n    if (cursor != null)     cursor.close();\n  }\n}"}
{"ids": "62558", "raw_code": "@Override public void profile(){\n  recordStats();\n}"}
{"ids": "28460", "raw_code": "public static void touch(File file) throws IOException {\n  if (!file.exists()) {\n    OutputStream out=openOutputStream(file);\n    IOUtils.closeQuietly(out);\n  }\n  boolean success=file.setLastModified(System.currentTimeMillis());\n  if (!success) {\n    throw new IOException(\"Unable to set the last modification time for \" + file);\n  }\n}"}
{"ids": "61059", "raw_code": "public boolean isEmpty(){\n  return extOrdering.isEmpty();\n}"}
{"ids": "42717", "raw_code": "public static byte[] ivCipherConcat(byte[] iv,byte[] cipherText){\n  byte[] combined=new byte[iv.length + cipherText.length];\n  System.arraycopy(iv,0,combined,0,iv.length);\n  System.arraycopy(cipherText,0,combined,iv.length,cipherText.length);\n  return combined;\n}"}
{"ids": "29677", "raw_code": "public static final void saveInstanceIdentifier(String confPath,String instanceIdentifier) throws Exception {\n  Path file=Paths.get(confPath,INSTANCE_IDENTIFIER_FILE);\n  log.trace(\"Saving instance identifier to {}\",file);\n  AtomicSave.execute(file.toString(),\"inst\",instanceIdentifier.getBytes(StandardCharsets.UTF_8));\n}"}
{"ids": "79686", "raw_code": "Part(String contents,String property) throws Exception {\n  this.contents=\" \" + contents;\n  this.property=property;\n  simplify();\n}"}
{"ids": "44907", "raw_code": "public static boolean isSame(Object s1,Object s2){\n  if (s1 == s2)   return true;\n  if (X.isEmpty(s1) && X.isEmpty(s2))   return true;\n  if (s1 != null) {\n    return s1.equals(s2);\n  }\n  return false;\n}"}
{"ids": "27951", "raw_code": "public static double standardDeviation(double variance){\n  return Math.sqrt(variance);\n}"}
{"ids": "50497", "raw_code": "public static int frequencyToMIDINote(double aFrequency){\n  double r=1.05946309436;\n  double ref=523.251;\n  int supinf=0;\n  int i=0;\n  double hautnb=1;\n  double ref1=0;\n  double ref2=0;\n  double flag=0;\n  int nmidi=72;\n  while (aFrequency < ref) {\n    ref=Math.floor(1000 * ref / r) / 1000;\n    i=i + 1;\n    supinf=-1;\n    flag=1;\n    ref1=ref;\n  }\n  while (aFrequency > ref) {\n    ref=Math.floor(1000 * ref * r) / 1000;\n    i=i - 1;\n    supinf=1;\n    ref2=ref;\n  }\n  if (Math.abs(aFrequency - ref1) < Math.abs(aFrequency - ref2)) {\n    supinf=-1;\n    i=i + 1;\n  }\n else {\n    if (flag == 1)     supinf=-1;\n  }\n  if (ref1 == 0) {\n    ref1=Math.floor(1000 * ref / r) / 1000;\n    if (Math.abs(aFrequency - ref1) < Math.abs(aFrequency - ref2)) {\n      i=i + 1;\n      supinf=1;\n    }\n  }\n  i=Math.abs(i);\n  while (i-- != 0) {\n    if ((hautnb == 1 && supinf == -1) || (hautnb == 12 && supinf == 1)) {\n      if (supinf == 1)       hautnb=0;\n      if (supinf == -1)       hautnb=13;\n    }\n    hautnb=hautnb + supinf;\n    nmidi=nmidi + supinf;\n  }\n  return nmidi;\n}"}
{"ids": "23906", "raw_code": "public void recordGCVersions(RegionVersionVector<T> other){\n  assert other.memberToGCVersion != null : \"incoming gc version set is null\";\n  recordGCVersion(other.myId,other.localGCVersion.get());\n  for (  Map.Entry<T,Long> entry : other.memberToGCVersion.entrySet()) {\n    recordGCVersion(entry.getKey(),entry.getValue().longValue());\n  }\n}"}
{"ids": "24676", "raw_code": "boolean waitForState(Processor p,int state){\nsynchronized (waitSync) {\n    try {\n      while (p.getState() < state && stateTransitionOK)       waitSync.wait();\n    }\n catch (    Exception e) {\n    }\n  }\n  return stateTransitionOK;\n}"}
{"ids": "13642", "raw_code": "private static boolean extractFile(Context c,String rootAsset,String path){\n  AssetManager assetManager=c.getAssets();\n  InputStream in=null;\n  OutputStream out=null;\n  try {\n    in=assetManager.open(rootAsset + path);\n    String fullPath=PrefStore.getEnvDir(c) + path;\n    out=new FileOutputStream(fullPath);\n    byte[] buffer=new byte[1024];\n    int read;\n    while ((read=in.read(buffer)) != -1) {\n      out.write(buffer,0,read);\n    }\n    out.flush();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    return false;\n  }\n finally {\n    close(in);\n    close(out);\n  }\n  return true;\n}"}
{"ids": "67325", "raw_code": "protected int never(){\nsynchronized (sleepLock) {\n    while (running) {\n      try {\n        sleepLock.wait(60 * 60 * 1000L);\n      }\n catch (      InterruptedException e) {\n        continue;\n      }\n    }\n    return 0;\n  }\n}"}
{"ids": "78268", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return MESSAGE_TYPE;\ncase 2:\n  return REQUEST_INFO;\ncase 3:\nreturn RESPONSE_INFO;\ncase 4:\nreturn TRACE_INFO;\ncase 5:\nreturn GLOBAL_CONTEXT;\ncase 6:\nreturn LOCAL_CONTEXT;\ncase 7:\nreturn HEARTBEAT_INFO;\ndefault :\nreturn null;\n}\n}"}
{"ids": "38347", "raw_code": "protected void loadHistory(boolean set){\n  BufferedInputStream str;\n  File file;\n  int width;\n  int height;\n  try {\n    file=new File(getHistoryFilename());\n    if (file.exists()) {\n      str=new BufferedInputStream(new FileInputStream(getHistoryFilename()));\n      m_History.load(str);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  if (set) {\n    m_ConnectionPanel.setHistory(stringToModel(m_History.getProperty(ConnectionPanel.HISTORY_NAME,\"\")));\n    m_QueryPanel.setHistory(stringToModel(m_History.getProperty(QueryPanel.HISTORY_NAME,\"\")));\n    m_QueryPanel.setMaxRows(Integer.parseInt(m_History.getProperty(QueryPanel.MAX_ROWS,\"100\")));\n    width=Integer.parseInt(m_History.getProperty(WIDTH,\"0\"));\n    height=Integer.parseInt(m_History.getProperty(HEIGHT,\"0\"));\n    if ((width != 0) && (height != 0)) {\n      setPreferredSize(new Dimension(width,height));\n    }\n  }\n}"}
{"ids": "56048", "raw_code": "private void updatePanelForExpansion(float percentage){\n  updatePromoVisibility(1.f);\n  float baseBaseY=MathUtils.interpolate(0.f,getBasePageTargetY(),percentage);\n  mBasePageY=baseBaseY;\n  float brightness=MathUtils.interpolate(BASE_PAGE_BRIGHTNESS_STATE_PEEKED,BASE_PAGE_BRIGHTNESS_STATE_EXPANDED,percentage);\n  mBasePageBrightness=brightness;\n  float searchBarHeight=Math.round(MathUtils.interpolate(mSearchBarHeightPeeking,getSearchBarHeightExpanded(),percentage));\n  mSearchBarHeight=searchBarHeight;\n  mSearchBarTextOpacity=1.f;\n  mIsSearchBarBorderVisible=true;\n  mSearchBarBorderY=searchBarHeight - SEARCH_BAR_BORDER_HEIGHT_DP + 1;\n  mSearchIconOpacity=SEARCH_ICON_OPACITY_STATE_EXPANDED;\n  mArrowIconOpacity=ARROW_ICON_OPACITY_STATE_EXPANDED;\n  mArrowIconRotation=Math.round(MathUtils.interpolate(ARROW_ICON_ROTATION_STATE_PEEKED,ARROW_ICON_ROTATION_STATE_EXPANDED,percentage));\n  mCloseIconOpacity=CLOSE_ICON_OPACITY_STATE_EXPANDED;\n  float peekedHeight=getPanelHeightFromState(PanelState.PEEKED);\n  float threshold=PROGRESS_BAR_VISIBILITY_THRESHOLD_DP / mPxToDp;\n  float diff=Math.min(mHeight - peekedHeight,threshold);\n  float progressBarOpacity=MathUtils.interpolate(0.f,1.f,diff / threshold);\n  mProgressBarOpacity=progressBarOpacity;\n  mProgressBarY=searchBarHeight - PROGRESS_BAR_HEIGHT_DP + 1;\n  updateSearchBarShadow();\n}"}
{"ids": "38054", "raw_code": "protected boolean[] updateableClusterer(){\n  boolean[] result=new boolean[2];\n  print(\"updateable clusterer...\");\n  if (m_Clusterer instanceof UpdateableClusterer) {\n    println(\"yes\");\n    result[0]=true;\n  }\n else {\n    println(\"no\");\n    result[0]=false;\n  }\n  return result;\n}"}
{"ids": "45582", "raw_code": "public void addField(MappedMember mm){\n  fields.add(mm);\n}"}
{"ids": "41232", "raw_code": "public static List<BaseMqttMessage> readAndConvertMessageLog(final File selectedFile) throws SpyException {\n  final List<String> lines=FileUtils.readFileAsLines(selectedFile);\n  logger.info(\"Message audit log - read {} messages from {}\",lines.size(),selectedFile.getAbsoluteFile());\n  return processMessageLog(parseMessageLog(lines,null,0,0),null,0,0);\n}"}
{"ids": "70696", "raw_code": "void readStream(InputStream is) throws Exception {\n  String line;\n  Date start=new Date();\n  BufferedReader reader=new BufferedReader(new InputStreamReader(is));\n  while ((line=reader.readLine()) != null && !mStop) {\n    mResults.append(line);\n    mResults.append(Tools.LineSep);\n    Date end=new Date();\n    if ((end.getTime() - start.getTime()) / 1000 > 10 || mResults.length() > 5000) {\n      start=end;\n      int last=mResults.lastIndexOf(\"\\n\");\n      if (last != -1) {\n        XmppMsg msg=new XmppMsg(_font);\n        msg.append(mResults.substring(0,last + 1));\n        mCmdBase.send(mShellId,msg);\n        mResults.setLength(0);\n      }\n    }\n  }\n}"}
{"ids": "22923", "raw_code": "public void removeParentRelation(long osmId){\n  if (parentRelations != null) {\n    ArrayList<Relation> tempRelList=new ArrayList<Relation>(parentRelations);\n    for (    Relation r : tempRelList) {\n      if (osmId == r.getOsmId())       parentRelations.remove(r);\n    }\n  }\n}"}
{"ids": "54511", "raw_code": "void insert(V val,K key){\n  ArrayList<K> list=map.get(val);\n  if (list == null) {\n    list=new ArrayList<K>(4);\n    map.put(cloneValue(val),list);\n  }\n  list.add(key);\n}"}
{"ids": "23910", "raw_code": "public ServerSocket createServerSocket(int nport,int backlog) throws IOException {\n  return createServerSocket(nport,backlog,null);\n}"}
{"ids": "72340", "raw_code": "public static ArrayList<Integer> convertStringArrayToIntegerArray(List<String> arrayList){\n  ArrayList<Integer> integers=new ArrayList<>();\n  for (  String str : arrayList) {\n    integers.add(Integer.valueOf(str));\n  }\n  return integers;\n}"}
{"ids": "17431", "raw_code": "@Override public void unwrapSSLv2(byte[] bytes){\n  unexpectedMessage();\n}"}
{"ids": "25106", "raw_code": "public static String buildSelectorFromClass(String classValue){\n  StringBuilder strb=new StringBuilder();\n  strb.append(CLASS_SELECTOR_PREFIX);\n  strb.append(classValue);\n  return strb.toString();\n}"}
{"ids": "82469", "raw_code": "public void ensureCapacity(int minimumCapacity){\n  if (minimumCapacity > value.length) {\n    int ourMin=value.length * 2 + 2;\n    enlargeBuffer(Math.max(ourMin,minimumCapacity));\n  }\n}"}
{"ids": "33399", "raw_code": "public String poolFooterStatements(){\n  StringBuilder sb=new StringBuilder();\n  for (  String footerStatement : footerStatements) {\n    sb.append(\"\\n\");\n    sb.append(footerStatement);\n    sb.append(\"\\n\");\n  }\n  footerStatements.clear();\n  return sb.toString();\n}"}
{"ids": "86505", "raw_code": "private void handleNodeQueue(SerialMessage incomingMessage){\n  if (currentStage == ZWaveNodeInitStage.DONE) {\n    return;\n  }\n  logger.debug(\"NODE {}: Node advancer - checking initialisation queue. Queue size {}.\",node.getNodeId(),msgQueue.size());\n  if (msgQueue.contains(incomingMessage)) {\n    msgQueue.remove(incomingMessage);\n    logger.debug(\"NODE {}: Node advancer - message removed from queue. Queue size {}.\",node.getNodeId(),msgQueue.size());\n    freeToSend=true;\n    advanceNodeStage(incomingMessage.getMessageClass());\n  }\n else   if (msgQueue.isEmpty() && currentStage == ZWaveNodeInitStage.SECURITY_REPORT) {\n    logger.debug(\"NODE {}: Node advancer - In Security stage, going to advanceNodeStage to get next request.\",node.getNodeId());\n    advanceNodeStage(incomingMessage.getMessageClass());\n  }\n}"}
{"ids": "27090", "raw_code": "public static Predicate<String> matches(final String regexp){\n  Objects.requireNonNull(regexp,\"The regexp must not be null\");\n  return null;\n}"}
{"ids": "542", "raw_code": "public boolean hasSet(String name){\n  return m_map.containsKey(name);\n}"}
{"ids": "45054", "raw_code": "public void clearParsers(){\n  timer.stop();\n  clearParserNoticeHighlights();\n  parsers.clear();\n  textArea.fireParserNoticesChange();\n}"}
{"ids": "72031", "raw_code": "protected PropertyDefinition(AbstractManagedObjectDefinition<?,?> d,Class<T> theClass,String propertyName,EnumSet<PropertyOption> options,AdministratorAction adminAction,DefaultBehaviorProvider<T> defaultBehavior){\n  Reject.ifNull(d,theClass,propertyName,options,adminAction,defaultBehavior);\n  this.definition=d;\n  this.theClass=theClass;\n  this.propertyName=propertyName;\n  this.options=EnumSet.copyOf(options);\n  this.adminAction=adminAction;\n  this.defaultBehavior=defaultBehavior;\n}"}
{"ids": "47535", "raw_code": "public DateTimeParseException(String message,CharSequence parsedData,int errorIndex,Throwable cause){\n  super(message,cause);\n  this.parsedString=parsedData.toString();\n  this.errorIndex=errorIndex;\n}"}
{"ids": "29488", "raw_code": "public ConfigureXmlAttributeCountDialog_NB(XmlAttributeCount xmlAttributeCount){\n  this.xmlAttributeCount=xmlAttributeCount;\n  initComponents();\n  final IterateModel numberOfTagsIterator=xmlAttributeCount.getNumberOfAttributesIterator();\n  configureIterateModel_NB2.setStartAt(String.valueOf(numberOfTagsIterator.getStartAt()));\n  configureIterateModel_NB2.setStopAt(String.valueOf(numberOfTagsIterator.getStopAt()));\n  configureIterateModel_NB2.setIncrement(String.valueOf(numberOfTagsIterator.getIncrement()));\n  configureIterateModel_NB2.setIterateStrategie(numberOfTagsIterator.getIterateStrategie());\n  List<String> names=Arrays.asList(xmlAttributeCount.getNames());\n  configureStringList_NB1.setStringList(names);\n}"}
{"ids": "34738", "raw_code": "public void onMenuDismissed(){\n  mReloadMenuItem=null;\n}"}
{"ids": "8297", "raw_code": "public static Thread consumeProcessOutputStream(Process self,OutputStream output){\n  Thread thread=new Thread(new ByteDumper(self.getInputStream(),output));\n  thread.start();\n  return thread;\n}"}
{"ids": "74684", "raw_code": "public static Angle greatCircleAzimuth(LatLon p1,LatLon p2){\n  if ((p1 == null) || (p2 == null)) {\n    throw new IllegalArgumentException(\"Lat Lon Is Null\");\n  }\n  double lat1=p1.getLatitude().radians;\n  double lon1=p1.getLongitude().radians;\n  double lat2=p2.getLatitude().radians;\n  double lon2=p2.getLongitude().radians;\n  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;\n  if (lon1 == lon2)   return lat1 > lat2 ? Angle.POS180 : Angle.ZERO;\n  double y=Math.cos(lat2) * Math.sin(lon2 - lon1);\n  double x=Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  double azimuthRadians=Math.atan2(y,x);\n  return Double.isNaN(azimuthRadians) ? Angle.ZERO : Angle.fromRadians(azimuthRadians);\n}"}
{"ids": "67002", "raw_code": "public void addAllTagsOf(Host h){\n  List<Tag> tags=h.getTags();\n  if (tags.isEmpty())   return;\n  if (mTagList == null) {\n    mTagList=new ArrayList<Tag>(tags.size());\n  }\n  mTagList.addAll(tags);\n}"}
{"ids": "43610", "raw_code": "public static boolean isNumbersWithPunctuation(String token){\n  boolean hasDigit=false;\n  int len=token.length();\n  for (int i=0; i < len; ++i) {\n    char c=token.charAt(i);\n    hasDigit=hasDigit || Character.isDigit(c);\n    if (!(Character.isDigit(c) || Characters.isPunctuation(c))) {\n      return false;\n    }\n  }\n  return hasDigit;\n}"}
{"ids": "82732", "raw_code": "private boolean isPaintLineSeperators(JComponent c){\n  boolean paintLines=c instanceof JTextArea;\n  String globalOverride=System.getProperty(\"SeaGlass.JTextArea.drawLineSeparator\");\n  if (globalOverride != null && globalOverride.length() > 0) {\n    paintLines=Boolean.valueOf(globalOverride);\n  }\n  Boolean overrideProperty=(Boolean)c.getClientProperty(\"SeaGlass.JTextArea.drawLineSeparator\");\n  if (overrideProperty != null) {\n    paintLines=overrideProperty;\n  }\n  return paintLines;\n}"}
{"ids": "63089", "raw_code": "public static Db open(DataSource ds){\n  try {\n    return new Db(ds.getConnection());\n  }\n catch (  SQLException e) {\n    throw convert(e);\n  }\n}"}
{"ids": "23861", "raw_code": "@Override public void basicPutPart3(EntryEventImpl event,RegionEntry entry,boolean isInitialized,long lastModified,boolean invokeCallbacks,boolean ifNew,boolean ifOld,Object expectedOldValue,boolean requireOldValue){\n  distributeUpdate(event,lastModified,false,false,null,false);\n  super.basicPutPart3(event,entry,isInitialized,lastModified,invokeCallbacks,ifNew,ifOld,expectedOldValue,requireOldValue);\n}"}
{"ids": "27639", "raw_code": "public LanguageRange(String range){\n  this.range=range.split(\"-\");\n  full=range;\n}"}
{"ids": "43217", "raw_code": "protected void removeContainer() throws Throwable {\n  if (containerId == null) {\n    return;\n  }\n  sendDeleteContainerRequest();\n  waitForPropertyValue(provisioningTaskLink,MockTaskState.class,\"taskInfo.stage\",TaskState.TaskStage.FINISHED);\n  if (!isMockTarget()) {\n    Thread.sleep(2000L);\n  }\n  verifyContainerDoesNotExist(containerId);\n}"}
{"ids": "15241", "raw_code": "public int size(){\n  return list.size();\n}"}
{"ids": "18073", "raw_code": "public TransformerHandler newTransformerHandler(Templates templates) throws TransformerConfigurationException {\n  try {\n    TransformerImpl transformer=(TransformerImpl)templates.newTransformer();\n    transformer.setURIResolver(m_uriResolver);\n    TransformerHandler th=(TransformerHandler)transformer.getInputContentHandler(true);\n    return th;\n  }\n catch (  TransformerConfigurationException ex) {\n    if (m_errorListener != null) {\n      try {\n        m_errorListener.fatalError(ex);\n        return null;\n      }\n catch (      TransformerConfigurationException ex1) {\n        throw ex1;\n      }\ncatch (      TransformerException ex1) {\n        throw new TransformerConfigurationException(ex1);\n      }\n    }\n    throw ex;\n  }\n}"}
{"ids": "19515", "raw_code": "public void addField(FieldRef fref){\n  mFieldRefs.add(fref);\n}"}
{"ids": "43943", "raw_code": "public String render(ValueExpr theExpr) throws Exception {\n  reset();\n  theExpr.visit(this);\n  return mBuffer.toString();\n}"}
{"ids": "72552", "raw_code": "public void add(final Vector2D[] bLoop) throws MathIllegalArgumentException {\n  add(new NestedLoops(bLoop,tolerance));\n}"}
{"ids": "60166", "raw_code": "@NotNull public static <T>List<T> asList(@Nullable final Collection<?> expression,@NotNull final Class<T> elementClass){\n  if ((expression == null) || expression.isEmpty()) {\n    return Collections.emptyList();\n  }\n  final List<T> result=new ArrayList<T>();\n  for (  final Object element : expression) {\n    final T toAdd=as(element,elementClass);\n    if (toAdd != null) {\n      result.add(toAdd);\n    }\n  }\n  return result;\n}"}
{"ids": "72686", "raw_code": "private void startNewTransition(){\n  if (!hasBounds()) {\n    return;\n  }\n  mCurrentTrans=mTransGen.generateNextTransition(mDrawableRect,mViewportRect);\n  mElapsedTime=0;\n  mLastFrameTime=System.currentTimeMillis();\n  fireTransitionStart(mCurrentTrans);\n}"}
{"ids": "60596", "raw_code": "@Override protected void makeFinished(){\n  byte[] verify_data;\n  if (serverHello.server_version[1] == 1) {\n    verify_data=new byte[12];\n    computerVerifyDataTLS(\"client finished\",verify_data);\n  }\n else {\n    verify_data=new byte[36];\n    computerVerifyDataSSLv3(SSLv3Constants.client,verify_data);\n  }\n  clientFinished=new Finished(verify_data);\n  send(clientFinished);\n  if (isResuming) {\n    session.lastAccessedTime=System.currentTimeMillis();\n    status=FINISHED;\n  }\n else {\n    if (serverHello.server_version[1] == 1) {\n      computerReferenceVerifyDataTLS(\"server finished\");\n    }\n else {\n      computerReferenceVerifyDataSSLv3(SSLv3Constants.server);\n    }\n    status=NEED_UNWRAP;\n  }\n}"}
{"ids": "62905", "raw_code": "public static File removeExtension(File file){\n  String absolutePath=file.getAbsolutePath();\n  if (absolutePath.contains(\".\")) {\n    return new File(absolutePath.substring(0,absolutePath.lastIndexOf('.')));\n  }\n else {\n    return file;\n  }\n}"}
{"ids": "70328", "raw_code": "public void update(){\n  if (bgIsOpaque) {\n    int w=Math.max(getSize().width,minWidth);\n    int h=Math.max(getSize().height,minHeight);\n    offScr=createImage(w,h);\n    if (offScr == null)     return;\n    Graphics g=offScr.getGraphics();\n    drawInto(g);\n    repaint();\n    g.dispose();\n  }\n else {\n    repaint();\n  }\n}"}
{"ids": "48143", "raw_code": "public static final int readInt(InputStream is) throws IOException {\n  return (((0xFF & is.read()) << 8) | (0xFF & is.read()));\n}"}
{"ids": "15522", "raw_code": "private void saveDynamicActions(FacesContext context,StateContext stateContext,Map<String,Object> stateMap){\n  if (LOGGER.isLoggable(Level.FINEST)) {\n    LOGGER.finest(\"FaceletPartialStateManagementStrategy.saveDynamicActions\");\n  }\n  List<ComponentStruct> actions=stateContext.getDynamicActions();\n  HashMap<String,UIComponent> componentMap=stateContext.getDynamicComponents();\n  if (actions != null) {\n    List<Object> savedActions=new ArrayList<>(actions.size());\n    for (    ComponentStruct action : actions) {\n      UIComponent component=componentMap.get(action.clientId);\n      if (component == null && context.isProjectStage(ProjectStage.Development)) {\n        LOGGER.log(Level.WARNING,\"Unable to save dynamic action with clientId ''{0}'' because the UIComponent cannot be found\",action.clientId);\n      }\n      if (component != null) {\n        savedActions.add(action.saveState(context));\n      }\n    }\n    stateMap.put(DYNAMIC_ACTIONS,savedActions);\n  }\n}"}
{"ids": "38959", "raw_code": "private Instance generateExample(Instances format,Random randomG,SubspaceClusterDefinition cl,String cName){\n  boolean makeInteger=cl.isInteger();\n  int num=-1;\n  Instance example=null;\n  int numAtts=m_NumAttributes;\n  if (getClassFlag()) {\n    numAtts++;\n  }\n  example=new DenseInstance(numAtts);\n  example.setDataset(format);\n  boolean[] attributes=cl.getAttributes();\n  double[] minValue=cl.getMinValue();\n  double[] maxValue=cl.getMaxValue();\n  double value;\n  int clusterI=-1;\n  for (int i=0; i < m_NumAttributes; i++) {\n    if (attributes[i]) {\n      clusterI++;\n      num++;\n      if (isBoolean(i) || isNominal(i)) {\n        if (minValue[clusterI] == maxValue[clusterI]) {\n          value=minValue[clusterI];\n        }\n else {\n          int numValues=(int)(maxValue[clusterI] - minValue[clusterI] + 1.0);\n          value=randomG.nextInt(numValues);\n          value+=minValue[clusterI];\n        }\n      }\n else {\n        value=randomG.nextDouble() * (maxValue[num] - minValue[num]) + minValue[num];\n        if (makeInteger) {\n          value=Math.round(value);\n        }\n      }\n      example.setValue(i,value);\n    }\n else {\n      example.setMissing(i);\n    }\n  }\n  if (getClassFlag()) {\n    example.setClassValue(cName);\n  }\n  return example;\n}"}
{"ids": "64178", "raw_code": "@Override public long skip(long n){\n  if (n < 0) {\n    throw new IllegalArgumentException(\"Number of characters to skip is less than zero: \" + n);\n  }\n  if (idx >= charSequence.length()) {\n    return -1;\n  }\n  int dest=(int)Math.min(charSequence.length(),idx + n);\n  int count=dest - idx;\n  idx=dest;\n  return count;\n}"}
{"ids": "51293", "raw_code": "@Override public void clear(){\n  if (elementCount > 0) {\n    elementCount=0;\n    Arrays.fill(elementData,null);\n    modCount++;\n    while (referenceQueue.poll() != null) {\n    }\n  }\n}"}
{"ids": "20135", "raw_code": "public DefaultConsolePanel(){\n  setLayout(new BorderLayout(0,0));\n  textPane=new JTextArea();\n  textPane.setRows(5);\n  textPane.setEditable(false);\n  JScrollPane jp=new JScrollPane(textPane);\n  add(jp,BorderLayout.CENTER);\n}"}
{"ids": "45929", "raw_code": "public void push(){\n  level.add(null);\n  cloned=false;\n}"}
{"ids": "51773", "raw_code": "private static void loadPluginsFromClassLoader(ClassLoader classLoader){\n  ServiceLoader<GDSFactoryPlugin> pluginLoader=ServiceLoader.load(GDSFactoryPlugin.class,classLoader);\n  for (  GDSFactoryPlugin plugin : pluginLoader) {\n    registerPlugin(plugin);\n  }\n}"}
{"ids": "37677", "raw_code": "public String redo(){\n  if (!canRedo()) {\n    return \"\";\n  }\n  m_nCurrentEditAction++;\n  UndoAction undoAction=m_undoStack.get(m_nCurrentEditAction);\n  m_bNeedsUndoAction=false;\n  undoAction.redo();\n  m_bNeedsUndoAction=true;\n  return undoAction.getRedoMsg();\n}"}
{"ids": "2692", "raw_code": "@Override public Writer append(CharSequence value){\n  builder.append(value);\n  return this;\n}"}
{"ids": "3617", "raw_code": "@Override public InetSocketAddress ipLocal(){\n  SocketChannel s=_channel;\n  if (s != null) {\n    try {\n      return (InetSocketAddress)s.getLocalAddress();\n    }\n catch (    IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "59771", "raw_code": "@Nonnull private static NodeDisk findNodeDisk(String diskId,List<NodeDisk> nodeDisks,String nodeName) throws IOException {\n  NodeDisk selected=null;\n  for (  NodeDisk nodeDisk : nodeDisks) {\n    if (diskId.equals(nodeDisk.getDiskRefId())) {\n      selected=nodeDisk;\n      break;\n    }\n  }\n  if (selected == null) {\n    String message=format(\"The Node '%s' config does not have defined any Disk Ref ID '%s'\",nodeName,diskId);\n    throw new AbortException(message);\n  }\n  if (selected.getNodeMountPoint() == null) {\n    String message=format(\"The Node '%s' config does not have defined any node mount point for Disk Ref ID '%s'\",nodeName,diskId);\n    throw new AbortException(message);\n  }\n  return selected;\n}"}
{"ids": "5609", "raw_code": "private int stripMultipartHeaders(byte[] b,int offset){\n  int i=0;\n  for (i=offset; i < b.length; i++) {\n    if (b[i] == '\\r' && b[++i] == '\\n' && b[++i] == '\\r' && b[++i] == '\\n')     break;\n  }\n  return i + 1;\n}"}
{"ids": "19520", "raw_code": "void seek(int position) throws IOException {\n  mDexFile.seek(position);\n}"}
{"ids": "62606", "raw_code": "@Override public List<Column> columns(){\n  return columnList;\n}"}
{"ids": "12765", "raw_code": "public static void writeFloat(DataOutputStream dos,boolean isBigEndian,float val) throws IOException {\n  if (!isBigEndian) {\n    writeLittleEndianFloat(dos,val);\n  }\n else {\n    dos.writeFloat(val);\n  }\n}"}
{"ids": "22836", "raw_code": "public static void main(String[] args){\n  Log.printLine(\"Starting CloudSimExample3...\");\n  try {\n    int num_user=1;\n    Calendar calendar=Calendar.getInstance();\n    boolean trace_flag=false;\n    CloudSim.init(num_user,calendar,trace_flag);\n    @SuppressWarnings(\"unused\") Datacenter datacenter0=createDatacenter(\"Datacenter_0\");\n    DatacenterBroker broker=createBroker();\n    int brokerId=broker.getId();\n    vmlist=new ArrayList<Vm>();\n    int vmid=0;\n    int mips=250;\n    long size=10000;\n    int ram=2048;\n    long bw=1000;\n    int pesNumber=1;\n    String vmm=\"Xen\";\n    Vm vm1=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());\n    vmid++;\n    Vm vm2=new Vm(vmid,brokerId,mips * 2,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());\n    vmlist.add(vm1);\n    vmlist.add(vm2);\n    broker.submitVmList(vmlist);\n    cloudletList=new ArrayList<Cloudlet>();\n    int id=0;\n    long length=40000;\n    long fileSize=300;\n    long outputSize=300;\n    UtilizationModel utilizationModel=new UtilizationModelFull();\n    Cloudlet cloudlet1=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);\n    cloudlet1.setUserId(brokerId);\n    id++;\n    Cloudlet cloudlet2=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);\n    cloudlet2.setUserId(brokerId);\n    cloudletList.add(cloudlet1);\n    cloudletList.add(cloudlet2);\n    broker.submitCloudletList(cloudletList);\n    broker.bindCloudletToVm(cloudlet1.getCloudletId(),vm1.getId());\n    broker.bindCloudletToVm(cloudlet2.getCloudletId(),vm2.getId());\n    CloudSim.startSimulation();\n    List<Cloudlet> newList=broker.getCloudletReceivedList();\n    CloudSim.stopSimulation();\n    printCloudletList(newList);\n    Log.printLine(\"CloudSimExample3 finished!\");\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    Log.printLine(\"The simulation has been terminated due to an unexpected error\");\n  }\n}"}
{"ids": "42291", "raw_code": "public static Instruction _osrHelper(Instruction barrier,GenerationContext gc){\n  Instruction inst=OsrPoint.create(YIELDPOINT_OSR,null,0);\n  gc.saveOSRBarrierForInst(barrier,inst);\n  return inst;\n}"}
{"ids": "59984", "raw_code": "protected void initializeState(S current){\n  InitializationUtils.initialize(current);\n  if (current.documentExpirationTimeMicros <= 0) {\n    current.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);\n  }\n}"}
{"ids": "22608", "raw_code": "@SuppressWarnings(\"unchecked\") public InputStream fetchVolumeStats(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {\n  _logger.info(\"Creating volume stats query\");\n  InputStream iStream=null;\n  List<QueryStats> statList=new ArrayList<QueryStats>();\n  try {\n    Set<String> movers=(Set<String>)keyMap.get(VNXFileConstants.MOVERLIST);\n    if (null != movers && !movers.isEmpty()) {\n      for (      String moverID : movers) {\n        QueryStats queryStats=new QueryStats();\n        VolumeStatsSetQueryParams params=new VolumeStatsSetQueryParams();\n        params.setStatsSet(VolumeStatsSetType.ALL);\n        params.setMover(moverID);\n        queryStats.setVolumeStats(params);\n        statList.add(queryStats);\n      }\n      iStream=_vnxFileInputRequestBuilder.getMultiRequestQueryStatsPacket(statList);\n    }\n else {\n      _logger.error(\"No movers found to construct volumeStats query.\");\n    }\n  }\n catch (  JAXBException jaxbException) {\n    throw new VNXFilePluginException(\"Exception occurred while fetching fileSystem info\",jaxbException.getCause());\n  }\n  return iStream;\n}"}
{"ids": "60952", "raw_code": "private static boolean isDirectory(URL url){\n  String file=url.getFile();\n  return (file.length() > 0 && file.charAt(file.length() - 1) == '/');\n}"}
{"ids": "77668", "raw_code": "@Override public final String readUTF() throws IOException {\n  return dis.readUTF();\n}"}
{"ids": "210", "raw_code": "@Nullable public static NetworkParameters fromID(String id){\n  if (id.equals(ID_MAINNET)) {\n    return MainNetParams.get();\n  }\n else   if (id.equals(ID_TESTNET)) {\n    return TestNet3Params.get();\n  }\n else   if (id.equals(ID_UNITTESTNET)) {\n    return UnitTestParams.get();\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "25350", "raw_code": "final synchronized void releaseSocket(){\n  running=false;\n  sender.interrupt();\n  outboundMessages.clear();\n  if (socket != null) {\n    socket.close();\n    socket=null;\n  }\n  maximumTransmissionUnit=0;\n}"}
{"ids": "76578", "raw_code": "public boolean addPart(PduPart part){\n  if (null == part) {\n    throw new NullPointerException();\n  }\n  putPartToMaps(part);\n  return mParts.add(part);\n}"}
{"ids": "43439", "raw_code": "public String codeOwner(List<CodeOwner> codeOwners){\n  long currentUnix=System.currentTimeMillis() / 1000L;\n  double best=0;\n  String owner=\"Unknown\";\n  for (  CodeOwner codeOwner : codeOwners) {\n    double age=(currentUnix - codeOwner.getMostRecentUnixCommitTimestamp()) / 60 / 60;\n    double calc=codeOwner.getNoLines() / Math.pow((age),1.8);\n    if (calc > best) {\n      best=calc;\n      owner=codeOwner.getName();\n    }\n  }\n  return owner;\n}"}
{"ids": "54722", "raw_code": "private ArrayList<CellRecord> processNeighbors(final CellRecord serving,final PositionRecord cellPos){\n  final ArrayList<CellRecord> neighbors=new ArrayList<>();\n  final ArrayList<NeighboringCellInfo> neighboringCellInfos=(ArrayList<NeighboringCellInfo>)mTelephonyManager.getNeighboringCellInfo();\n  if (serving == null) {\n    Log.e(TAG,\"Can't process neighbor cells: we need a serving cell first\");\n    return neighbors;\n  }\n  if (neighboringCellInfos == null) {\n    Log.i(TAG,\"Neigbor cell list null. Maybe not supported by your phone..\");\n    return neighbors;\n  }\n  for (  final NeighboringCellInfo ci : neighboringCellInfos) {\n    final boolean skip=!isValidNeigbor(ci);\n    if (!skip) {\n      final CellRecord neighbor=new CellRecord(mSessionId);\n      neighbor.setOpenBmapTimestamp(cellPos.getOpenBmapTimestamp());\n      neighbor.setBeginPosition(cellPos);\n      neighbor.setEndPosition(cellPos);\n      neighbor.setIsServing(false);\n      neighbor.setIsNeighbor(true);\n      neighbor.setMnc(serving.getMnc());\n      neighbor.setMcc(serving.getMcc());\n      neighbor.setOperator(serving.getOperator());\n      neighbor.setOperatorName(serving.getOperatorName());\n      final int networkType=ci.getNetworkType();\n      neighbor.setNetworkType(networkType);\n      if (networkType == TelephonyManager.NETWORK_TYPE_GPRS || networkType == TelephonyManager.NETWORK_TYPE_EDGE) {\n        neighbor.setIsCdma(false);\n        neighbor.setLogicalCellId(ci.getCid());\n        neighbor.setArea(ci.getLac());\n        neighbor.setStrengthdBm(-113 + 2 * ci.getRssi());\n        neighbor.setStrengthAsu(ci.getRssi());\n      }\n else       if (networkType == TelephonyManager.NETWORK_TYPE_UMTS || networkType == TelephonyManager.NETWORK_TYPE_HSDPA || networkType == TelephonyManager.NETWORK_TYPE_HSUPA || networkType == TelephonyManager.NETWORK_TYPE_HSPA) {\n        neighbor.setIsCdma(false);\n        neighbor.setPsc(ci.getPsc());\n        neighbor.setStrengthdBm(ci.getRssi());\n        final int asu=(int)Math.round((ci.getRssi() + 113.0) / 2.0);\n        neighbor.setStrengthAsu(asu);\n      }\n else       if (networkType == TelephonyManager.NETWORK_TYPE_CDMA) {\n        neighbor.setIsCdma(true);\n      }\n      neighbors.add(neighbor);\n    }\n  }\n  return neighbors;\n}"}
{"ids": "14748", "raw_code": "public Map read(SSOToken token,String objName) throws SMSException, SSOException {\n  if (objName == null || objName.length() == 0) {\n    throw new IllegalArgumentException(\"SMSFlatFileObject.read: object name is null or empty.\");\n  }\n  String objKey=objName.toLowerCase();\n  Map attrMap=null;\n  mRWLock.readRequest();\n  try {\n    String filepath=mNameMap.getProperty(objKey);\n    if (filepath == null) {\n      if (mDebug.messageEnabled()) {\n        mDebug.message(\"SMSFlatFileObject.read: object \" + objName + \" not found.\");\n      }\n    }\n else {\n      File filehandle=new File(filepath);\n      Properties props=null;\n      try {\n        props=loadProperties(filehandle,objName);\n      }\n catch (      ServiceNotFoundException e) {\n      }\n      if (props != null) {\n        attrMap=new CaseInsensitiveHashMap();\n        Enumeration keys=props.propertyNames();\n        while (keys.hasMoreElements()) {\n          String key=(String)keys.nextElement();\n          String vals=props.getProperty(key);\n          if ((vals != null) && (vals.length() > 0)) {\n            attrMap.put(key,toValSet(key,vals));\n          }\n        }\n      }\n    }\n  }\n  finally {\n    mRWLock.readDone();\n  }\n  return attrMap;\n}"}
{"ids": "82479", "raw_code": "public static double parseDouble(String s){\n  s=s.trim();\n  int length=s.length();\n  if (length == 0) {\n    throw invalidReal(s,true);\n  }\n  char last=s.charAt(length - 1);\n  if (last == 'y' || last == 'N') {\n    return parseName(s,true);\n  }\n  StringExponentPair info=initialParse(s,length,true);\n  if (info.infinity || info.zero) {\n    return info.specialValue();\n  }\n  double result=parseDblImpl(info.s,(int)info.e);\n  if (Double.doubleToLongBits(result) == 0xffffffffffffffffL) {\n    throw invalidReal(s,true);\n  }\n  return info.negative ? -result : result;\n}"}
{"ids": "20073", "raw_code": "public byte readByte() throws IOException {\n  byte v=dataInput.readByte();\n  offset+=1;\n  available-=1;\n  return v;\n}"}
{"ids": "5576", "raw_code": "public static IMultiPoint[] randomPoints(int n,int d){\n  IMultiPoint points[]=new IMultiPoint[n];\n  for (int i=0; i < n; i++) {\n    StringBuilder sb=new StringBuilder();\n    for (int j=0; j < d; j++) {\n      sb.append(rGen.nextDouble());\n      if (j < d - 1) {\n        sb.append(\",\");\n      }\n    }\n    points[i]=new Hyperpoint(sb.toString());\n  }\n  return points;\n}"}
{"ids": "4367", "raw_code": "private String verifyRestoreCode(String restoreCode,String code){\n  if (code == null) {\n    return \"code_parameter_is_null\";\n  }\n  if (restoreCode == null) {\n    return \"account_restore_code_is_null\";\n  }\n  boolean validCode=passwordManager.matches(code,restoreCode);\n  return validCode ? null : \"code_does_not_match_restoreCode - code: '\" + code + \"' restoreCode: '\"+ restoreCode+ \"'\";\n}"}
{"ids": "16072", "raw_code": "public static void appendPaddedInteger(StringBuffer buf,long value,int size){\n  int intValue=(int)value;\n  if (intValue == value) {\n    appendPaddedInteger(buf,intValue,size);\n  }\n else   if (size <= 19) {\n    buf.append(Long.toString(value));\n  }\n else {\n    if (value < 0) {\n      buf.append('-');\n      if (value != Long.MIN_VALUE) {\n        value=-value;\n      }\n else {\n        for (; size > 19; size--) {\n          buf.append('0');\n        }\n        buf.append(\"9223372036854775808\");\n        return;\n      }\n    }\n    int digits=(int)(Math.log(value) / LOG_10) + 1;\n    for (; size > digits; size--) {\n      buf.append('0');\n    }\n    buf.append(Long.toString(value));\n  }\n}"}
{"ids": "38586", "raw_code": "@Override public void addUndoPoint(){\n  File tempFile;\n  ObjectOutputStream oos;\n  if (!isUndoEnabled()) {\n    return;\n  }\n  if (getInstances() != null) {\n    try {\n      tempFile=File.createTempFile(\"arffviewer\",null);\n      tempFile.deleteOnExit();\n      oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(tempFile)));\n      oos.writeObject(getInstances());\n      oos.flush();\n      oos.close();\n      m_UndoList.add(tempFile);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"ids": "7186", "raw_code": "public final void addChildNode(RowRegexExprNode childNode){\n  childNodes.add(childNode);\n}"}
{"ids": "33279", "raw_code": "private List<String> makeList(final String... strings){\n  final List<String> result=new ArrayList<>();\n  for (  String string : strings) {\n    result.add(string);\n  }\n  return result;\n}"}
{"ids": "56433", "raw_code": "public int numberOfShardsWithState(ShardRoutingState... states){\n  int count=0;\n  for (  ShardRouting shardEntry : this) {\n    for (    ShardRoutingState state : states) {\n      if (shardEntry.state() == state) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"}
{"ids": "27601", "raw_code": "@Override public void notifyCommit(final long commitTime){\n  lock.lock();\n  try {\n    updateReleaseTimeForBareCommit(commitTime);\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "37471", "raw_code": "public static int showYesNoCancelQuestion(final Component parent,final String msg){\n  return JOptionPane.showConfirmDialog(isIconified(parent) ? null : parent,msg,System.getProperty(DEFAULT_WINDOW_TITLE_PROPERTY),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);\n}"}
{"ids": "79985", "raw_code": "public static String quantityplnounCreature(final int quantity,final String noun){\n  if (noun.equals(\"chicken\")) {\n    final String end=plnounCreature(quantity,noun);\n    return Integer.toString(quantity) + \" \" + end;\n  }\n  return quantityplnoun(quantity,noun);\n}"}
{"ids": "6805", "raw_code": "static int copyBytes(OutputStream os,InputStream is,byte[] ioBuffer,int maxSize) throws IOException {\n  int totalSize=0;\n  while (totalSize < maxSize) {\n    int rc=is.read(ioBuffer,0,Math.min(maxSize - totalSize,ioBuffer.length));\n    if (rc == -1) {\n      break;\n    }\n    os.write(ioBuffer,0,rc);\n    totalSize+=rc;\n  }\n  return totalSize;\n}"}
{"ids": "39870", "raw_code": "void composeMessage(final Mail mail,final String textContent,final String htmlContent,final Map<String,byte[]> attachments,final List<String> mailTemplateChain,final String shopCode,final String locale,final String templateName) throws MessagingException, ClassNotFoundException, IOException {\n  if (textContent == null || htmlContent == null) {\n    if (textContent != null) {\n      mail.setTextVersion(textContent);\n    }\n    if (htmlContent != null) {\n      mail.setHtmlVersion(htmlContent);\n      inlineResources(mail,htmlContent,mailTemplateChain,shopCode,locale,templateName);\n      addAttachments(mail,attachments);\n    }\n  }\n else {\n    mail.setTextVersion(textContent);\n    mail.setHtmlVersion(htmlContent);\n    inlineResources(mail,htmlContent,mailTemplateChain,shopCode,locale,templateName);\n    addAttachments(mail,attachments);\n  }\n}"}
{"ids": "26839", "raw_code": "private void handleLaunchMessageEvent(MessageEvent messageEvent){\n  DataMap dataMap=DataMap.fromByteArray(messageEvent.getData());\n  boolean relaunchIfRunning=dataMap.getBoolean(KEY_START_ACTIVITY_RELAUNCH,false);\n  DataMap bundleData=dataMap.getDataMap(KEY_START_ACTIVITY_BUNDLE);\n  String activityName=dataMap.getString(KEY_START_ACTIVITY_NAME);\n  Bundle bundle=null;\n  if (bundleData != null) {\n    bundle=bundleData.toBundle();\n  }\n  if (activityName == null) {\n    for (    WearConsumer consumer : mWearConsumers) {\n      consumer.onWearableApplicationLaunchRequestReceived(bundle,relaunchIfRunning);\n    }\n  }\n else {\n    try {\n      if (!TextUtils.isEmpty(activityName)) {\n        Class<?> targetActivity=Class.forName(activityName);\n        Intent intent=new Intent(mContext,targetActivity);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        if (bundle != null) {\n          intent.putExtras(bundle);\n        }\n        if (!mAppForeground || relaunchIfRunning) {\n          mContext.startActivity(intent);\n        }\n      }\n else {\n        Log.e(TAG,\"Activity Name cannot be empty\");\n      }\n    }\n catch (    ClassNotFoundException e) {\n      Log.e(TAG,\"Failed to find the activity class to launch\",e);\n    }\n  }\n}"}
{"ids": "51312", "raw_code": "@Override public void close() throws IOException {\n  closed=true;\n  def.end();\n  in.close();\n}"}
{"ids": "14504", "raw_code": "public static String escapeColonInString(String str){\n  if (str != null) {\n    if (str.indexOf(\":\") >= 0) {\n      str=str.replaceAll(\":\",\"&#58;\");\n    }\n  }\n  return str;\n}"}
{"ids": "67768", "raw_code": "private static SAXParserFactory createSAXParserFactory(){\n  try {\n    SAXParserFactory factory=SAXParserFactory.newInstance();\n    try {\n      SAXParserFactory secureFactory=SecureGenericXMLFactory.getSAXParserFactory(factory);\n      secureFactory.newSAXParser();\n      factory=secureFactory;\n    }\n catch (    ParserConfigurationException e) {\n    }\n    factory.setNamespaceAware(true);\n    return factory;\n  }\n catch (  SAXException e) {\n    throw new IllegalStateException(\"Failed to create a SAX parser factory\",e);\n  }\n}"}
{"ids": "22630", "raw_code": "private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {\n  RetryPolicy retryPolicy=request.getRetryPolicy();\n  int oldTimeout=request.getTimeoutMs();\n  try {\n    retryPolicy.retry(exception);\n  }\n catch (  VolleyError e) {\n    request.addMarker(String.format(\"%s-timeout-giveup [timeout=%s]\",logPrefix,oldTimeout));\n    throw e;\n  }\n  request.addMarker(String.format(\"%s-retry [timeout=%s]\",logPrefix,oldTimeout));\n}"}
{"ids": "69662", "raw_code": "public static void saveAsXML(NSObject root,File out) throws IOException {\n  File parent=out.getParentFile();\n  if (!parent.exists() && !parent.mkdirs()) {\n    throw new IOException(\"The output directory does not exist and could not be created.\");\n  }\n  FileOutputStream fous=new FileOutputStream(out);\n  saveAsXML(root,fous);\n  fous.close();\n}"}
{"ids": "77292", "raw_code": "public static boolean containsChroot(String zkHost){\n  return zkHost.contains(\"/\");\n}"}
{"ids": "17663", "raw_code": "public final void lazySet(int newValue){\n  unsafe.putOrderedInt(this,valueOffset,newValue);\n}"}
{"ids": "41419", "raw_code": "public Feature(String line,Map cpStr2Int,Map lbStr2Int,Map fmap){\n  StringTokenizer strTok=new StringTokenizer(line,\" \\t\\r\\n\");\n  int len=strTok.countTokens();\n  String strIdStr=strTok.nextToken();\n  int idx=Integer.parseInt(strTok.nextToken());\n  float val=1;\n  double wgt=Double.parseDouble(strTok.nextToken());\n  StringTokenizer strIdTok=new StringTokenizer(strIdStr,\"_\");\n  String prefix=strIdTok.nextToken();\n  if (prefix.compareToIgnoreCase(\"e1\") == 0) {\n    Integer yInt=(Integer)lbStr2Int.get(strIdTok.nextToken());\n    Integer ypInt=(Integer)lbStr2Int.get(strIdTok.nextToken());\n    if (yInt != null && ypInt != null) {\n      eFeature1Init(yInt.intValue(),ypInt.intValue());\n    }\n  }\n else   if (prefix.compareToIgnoreCase(\"s1\") == 0) {\n    Integer yInt=(Integer)lbStr2Int.get(strIdTok.nextToken());\n    Integer cpInt=(Integer)cpStr2Int.get(strIdTok.nextToken());\n    if (yInt != null && cpInt != null) {\n      sFeature1Init(yInt.intValue(),cpInt.intValue());\n    }\n  }\n  this.idx=idx;\n  this.val=val;\n  this.wgt=wgt;\n  strId2IdxAdd(fmap);\n}"}
{"ids": "78039", "raw_code": "public static int patchFast(InputStream oldInputStream,InputStream diffInputStream,File newFile) throws IOException {\n  if (oldInputStream == null) {\n    return RETURN_OLD_FILE_ERR;\n  }\n  if (newFile == null) {\n    return RETURN_NEW_FILE_ERR;\n  }\n  if (diffInputStream == null) {\n    return RETURN_DIFF_FILE_ERR;\n  }\n  byte[] oldBytes=BSUtil.inputStreamToByte(oldInputStream);\n  byte[] diffBytes=BSUtil.inputStreamToByte(diffInputStream);\n  byte[] newBytes=patchFast(oldBytes,oldBytes.length,diffBytes,diffBytes.length,0);\n  OutputStream newOutputStream=new FileOutputStream(newFile);\n  try {\n    newOutputStream.write(newBytes);\n  }\n  finally {\n    newOutputStream.close();\n  }\n  return RETURN_SUCCESS;\n}"}
{"ids": "60679", "raw_code": "public static byte[] readFullyNoClose(InputStream in) throws IOException {\n  ByteArrayOutputStream bytes=new ByteArrayOutputStream();\n  byte[] buffer=new byte[1024];\n  int count;\n  while ((count=in.read(buffer)) != -1) {\n    bytes.write(buffer,0,count);\n  }\n  return bytes.toByteArray();\n}"}
{"ids": "85345", "raw_code": "public ContentStorage(ContentStorageBO contentStorageBO,List<GenericPackage> genericPackageList,List<EssenceContainerData> essenceContainerDataList){\n  this.contentStorageBO=contentStorageBO;\n  this.genericPackageList=Collections.unmodifiableList(genericPackageList);\n  this.essenceContainerDataList=Collections.unmodifiableList(essenceContainerDataList);\n}"}
{"ids": "62702", "raw_code": "public static String decode(byte[] utf8) throws CharacterCodingException {\n  return decode(ByteBuffer.wrap(utf8),true);\n}"}
{"ids": "22483", "raw_code": "public ScaleIOVolume queryVolume(String volId) throws Exception {\n  ClientResponse response=get(URI.create(ScaleIOConstants.getVolumeURI(volId)));\n  return getResponseObject(ScaleIOVolume.class,response);\n}"}
{"ids": "23123", "raw_code": "public void removeEventListener(SIPDialogEventListener oldListener){\n  eventListeners.remove(oldListener);\n}"}
{"ids": "8201", "raw_code": "protected static Object primitiveArrayPut(Object self,int idx,Object newValue){\n  Array.set(self,normaliseIndex(idx,Array.getLength(self)),newValue);\n  return newValue;\n}"}
{"ids": "86112", "raw_code": "public void toAxisAngle(Vector4f output){\n  if (getW() > 1) {\n    normalise();\n  }\n  float angle=2 * (float)Math.toDegrees(Math.acos(getW()));\n  float x;\n  float y;\n  float z;\n  float s=(float)Math.sqrt(1 - getW() * getW());\n  if (s < 0.001) {\n    x=points[0];\n    y=points[1];\n    z=points[2];\n  }\n else {\n    x=points[0] / s;\n    y=points[1] / s;\n    z=points[2] / s;\n  }\n  output.points[0]=x;\n  output.points[1]=y;\n  output.points[2]=z;\n  output.points[3]=angle;\n}"}
{"ids": "6088", "raw_code": "@Override public synchronized void initialize(){\n  if (!mRootDirectory.exists()) {\n    if (!mRootDirectory.mkdirs()) {\n      VolleyLog.e(\"Unable to create cache dir %s\",mRootDirectory.getAbsolutePath());\n    }\n    return;\n  }\n  File[] files=mRootDirectory.listFiles();\n  if (files == null) {\n    return;\n  }\n  for (  File file : files) {\n    FileInputStream fis=null;\n    try {\n      fis=new FileInputStream(file);\n      CacheHeader entry=CacheHeader.readHeader(fis);\n      entry.size=file.length();\n      putEntry(entry.key,entry);\n    }\n catch (    IOException e) {\n      if (file != null) {\n        file.delete();\n      }\n    }\n finally {\n      try {\n        if (fis != null) {\n          fis.close();\n        }\n      }\n catch (      IOException ignored) {\n      }\n    }\n  }\n}"}
{"ids": "55076", "raw_code": "private QNameMap<BindingExpression> processBindingAttributes(Node node){\n  QNameMap<BindingExpression> attributeBindings=null;\n  for (Iterator<QName> i=node.getAttributeNames(); i != null && i.hasNext(); ) {\n    QName qname=i.next();\n    String value=(String)node.getAttributeValue(qname);\n    BindingExpression be=textParser.parseBindingExpression(value,node.beginLine);\n    if (be != null) {\n      if (attributeBindings == null) {\n        attributeBindings=new QNameMap<BindingExpression>();\n      }\n      attributeBindings.put(qname,be);\n      i.remove();\n    }\n  }\n  return attributeBindings;\n}"}
{"ids": "12787", "raw_code": "public void load(String fileName) throws IOException {\n  BufferedReader bfr=new BufferedReader(new InputStreamReader(new FileInputStream(fileName),\"UTF-8\"));\n  if (bList == null)   bList=new Vector(DEFAULT_INCREMENT,DEFAULT_INCREMENT);\n  String line=bfr.readLine();\n  if (line.indexOf(\"FROM: \") != -1) {\n    line=line.substring(6);\n    String[] parts=new String[2];\n    parts=line.split(\"\\\\*\",2);\n    fromDir=parts[0];\n    fromExt=parts[1];\n  }\n else   if (!(line.matches(\"^\\\\s*$\")))   add(line);\n  while ((line=bfr.readLine()) != null) {\n    if (!(line.matches(\"^\\\\s*$\")))     add(line);\n  }\n}"}
{"ids": "42395", "raw_code": "private void verifyRegisterDefs(String where){\n  DefUse.computeDU(this);\n  for (Register r=regpool.getFirstSymbolicRegister(); r != null; r=r.getNext()) {\n    if (r.isPhysical())     continue;\n    if (r.useList != null) {\n      if (r.defList == null) {\n        printInstructions();\n        verror(where,\"verifyRegisterDefs: \" + r + \" has use but no defs\");\n      }\n    }\n  }\n}"}
{"ids": "15606", "raw_code": "@SuppressWarnings(\"unchecked\") public static PartListing parseListParts(InputStream responseBody) throws ResponseParseException {\n  try {\n    Element root=getXmlRootElement(responseBody);\n    PartListing partListing=new PartListing();\n    partListing.setBucketName(root.getChildText(\"Bucket\"));\n    partListing.setKey(root.getChildText(\"Key\"));\n    partListing.setUploadId(root.getChildText(\"UploadId\"));\n    partListing.setStorageClass(root.getChildText(\"StorageClass\"));\n    partListing.setMaxParts(Integer.valueOf(root.getChildText(\"MaxParts\")));\n    partListing.setTruncated(Boolean.valueOf(root.getChildText(\"IsTruncated\")));\n    if (root.getChild(\"PartNumberMarker\") != null) {\n      String partNumberMarker=root.getChildText(\"PartNumberMarker\");\n      if (!isNullOrEmpty(partNumberMarker)) {\n        partListing.setPartNumberMarker(Integer.valueOf(partNumberMarker));\n      }\n    }\n    if (root.getChild(\"NextPartNumberMarker\") != null) {\n      String nextPartNumberMarker=root.getChildText(\"NextPartNumberMarker\");\n      if (!isNullOrEmpty(nextPartNumberMarker)) {\n        partListing.setNextPartNumberMarker(Integer.valueOf(nextPartNumberMarker));\n      }\n    }\n    List<Element> partElems=root.getChildren(\"Part\");\n    for (    Element elem : partElems) {\n      PartSummary ps=new PartSummary();\n      ps.setPartNumber(Integer.valueOf(elem.getChildText(\"PartNumber\")));\n      ps.setLastModified(DateUtil.parseIso8601Date(elem.getChildText(\"LastModified\")));\n      ps.setETag(trimQuotes(elem.getChildText(\"ETag\")));\n      ps.setSize(Integer.valueOf(elem.getChildText(\"Size\")));\n      partListing.addPart(ps);\n    }\n    return partListing;\n  }\n catch (  Exception e) {\n    throw new ResponseParseException(e.getMessage(),e);\n  }\n}"}
{"ids": "51015", "raw_code": "private static void findSnap(Collection<ConstraintWidget> widgets,ConstraintWidget widget,SnapCandidate candidate,boolean checkHorizontal){\n  ArrayList<ConstraintAnchor> anchorsSource=widget.getAnchors();\n  for (  ConstraintWidget w : widgets) {\n    if (w == widget) {\n      continue;\n    }\n    ArrayList<ConstraintAnchor> anchorsTarget=w.getAnchors();\n    for (    ConstraintAnchor as : anchorsSource) {\n      if (checkHorizontal && as.isVerticalAnchor()) {\n        continue;\n      }\n else       if (!checkHorizontal && !as.isVerticalAnchor()) {\n        continue;\n      }\n      for (      ConstraintAnchor at : anchorsTarget) {\n        snapCheck(as,at,candidate,CONNECTION_SLOPE);\n      }\n    }\n  }\n}"}
{"ids": "37582", "raw_code": "protected String padString(String s,int length,boolean left){\n  String result;\n  int i;\n  result=s;\n  for (i=s.length(); i < length; i++) {\n    if (left) {\n      result=\" \" + result;\n    }\n else {\n      result=result + \" \";\n    }\n  }\n  if ((length > 0) && (result.length() > length)) {\n    result=result.substring(0,length);\n  }\n  return result;\n}"}
{"ids": "59607", "raw_code": "public static <C extends Comparable<?>>List<Range<C>> remove(Range<C> self,Range<C> other){\n  if (other == null || !self.isConnected(other)) {\n    return Collections.singletonList(self);\n  }\n  Range<C> share=self.intersection(other);\n  if (share.isEmpty()) {\n    return Collections.singletonList(self);\n  }\n  List<Range<C>> ret=Lists.newArrayList();\n  if (!self.hasLowerBound()) {\n    if (share.hasLowerBound()) {\n      if (share.lowerBoundType() == BoundType.CLOSED) {\n        ret.add(Range.lessThan(share.lowerEndpoint()));\n      }\n else {\n        ret.add(Range.atMost(share.lowerEndpoint()));\n      }\n    }\n  }\n else {\n    if (self.lowerEndpoint() != share.lowerEndpoint()) {\n      if (self.lowerBoundType() == BoundType.CLOSED) {\n        if (share.lowerBoundType() == BoundType.CLOSED) {\n          ret.add(Range.closedOpen(self.lowerEndpoint(),share.lowerEndpoint()));\n        }\n else {\n          ret.add(Range.closed(self.lowerEndpoint(),share.lowerEndpoint()));\n        }\n      }\n else {\n        if (share.lowerBoundType() == BoundType.CLOSED) {\n          ret.add(Range.open(self.lowerEndpoint(),share.lowerEndpoint()));\n        }\n else {\n          ret.add(Range.openClosed(self.lowerEndpoint(),share.lowerEndpoint()));\n        }\n      }\n    }\n else {\n      if (self.lowerBoundType() == BoundType.CLOSED && share.lowerBoundType() == BoundType.OPEN) {\n        ret.add(Range.closed(self.lowerEndpoint(),share.lowerEndpoint()));\n      }\n    }\n  }\n  if (!self.hasUpperBound()) {\n    if (share.hasUpperBound()) {\n      if (share.upperBoundType() == BoundType.CLOSED) {\n        ret.add(Range.greaterThan(share.upperEndpoint()));\n      }\n else {\n        ret.add(Range.atLeast(share.upperEndpoint()));\n      }\n    }\n  }\n else {\n    if (self.upperEndpoint() != share.upperEndpoint()) {\n      if (self.upperBoundType() == BoundType.CLOSED) {\n        if (share.upperBoundType() == BoundType.CLOSED) {\n          ret.add(Range.openClosed(share.upperEndpoint(),self.upperEndpoint()));\n        }\n else {\n          ret.add(Range.closed(share.upperEndpoint(),self.upperEndpoint()));\n        }\n      }\n else {\n        if (share.upperBoundType() == BoundType.CLOSED) {\n          ret.add(Range.open(share.upperEndpoint(),self.upperEndpoint()));\n        }\n else {\n          ret.add(Range.closedOpen(share.upperEndpoint(),self.upperEndpoint()));\n        }\n      }\n    }\n else {\n      if (self.upperBoundType() == BoundType.CLOSED && share.upperBoundType() == BoundType.OPEN) {\n        ret.add(Range.closed(self.upperEndpoint(),share.upperEndpoint()));\n      }\n    }\n  }\n  return ret;\n}"}
{"ids": "18029", "raw_code": "void recomposeKeys(KeyDeclaration keyDecl){\n  m_keyDecls.addElement(keyDecl);\n}"}
{"ids": "12117", "raw_code": "public <T>JsonArray<T> createListDtoFromJson(Reader json,Class<T> dtoInterface) throws IOException {\n  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);\n  final List<JsonElement> list;\n  try {\n    list=gson.fromJson(json,listTypeCache.get(JsonElement.class));\n  }\n catch (  JsonSyntaxException e) {\n    final Throwable cause=e.getCause();\n    if (cause instanceof IOException) {\n      throw (IOException)cause;\n    }\n    throw e;\n  }\n  final List<T> result=new ArrayList<>(list.size());\n  for (  JsonElement e : list) {\n    result.add(dtoProvider.fromJson(e));\n  }\n  return new JsonArrayImpl<>(result);\n}"}
{"ids": "20962", "raw_code": "private View fillFromTop(int nextTop){\n  mFirstPosition=Math.min(mFirstPosition,-1);\n  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);\n  if (mFirstPosition < 0) {\n    mFirstPosition=0;\n  }\n  return fillDown(mFirstPosition,nextTop);\n}"}
{"ids": "40146", "raw_code": "public void connectionOpen(){\n  lock.lock();\n  try {\n    log.info(\"New server channel active.\");\n    connectionOpen=true;\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "43477", "raw_code": "public static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){\n  double angle=Math.toRadians(angleInDegrees);\n  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);\n}"}
{"ids": "33174", "raw_code": "public void list(PrintStream out){\n  properties.list(out);\n}"}
{"ids": "11525", "raw_code": "protected LayerPane findSelectedPane(){\n  for (  LayerPane pane : getPanes()) {\n    if (pane.isSelected()) {\n      return pane;\n    }\n  }\n  return null;\n}"}
{"ids": "19590", "raw_code": "private final void scaleNoiseArray(final int seaLevel){\n  for (int x=0; x < X_SECTIONS; x++) {\n    for (int z=0; z < Z_SECTIONS; z++) {\n      for (int y=0; y < Y_SECTIONS; y++) {\n        this.rawDensity[x][y][z]*=MAX_ELEV;\n        this.rawDensity[x][y][z]+=seaLevel;\n      }\n    }\n  }\n}"}
{"ids": "51241", "raw_code": "public Object[] toArray(){\n  ArrayList<E> al=new ArrayList<E>();\n  for (Node<E> p=first(); p != null; p=succ(p)) {\n    E item=p.item;\n    if (item != null)     al.add(item);\n  }\n  return al.toArray();\n}"}
{"ids": "85884", "raw_code": "public MicroservicesRunner(int... ports){\n  configureTransport(ports);\n}"}
{"ids": "79878", "raw_code": "public static boolean deleteContents(File directory){\n  File[] files=directory.listFiles();\n  boolean success=true;\n  if (files != null) {\n    for (    File file : files) {\n      success&=deleteRecursively(file);\n    }\n  }\n  return success;\n}"}
{"ids": "51666", "raw_code": "private void handleResponse(AvsResponse response){\n  mEventManager.post(new CommandEvent(CommandEvent.TYPE_COMMAND_SEARCHING,KEYWORD_ALEXA));\n  if (response != null) {\n    for (int i=response.size() - 1; i >= 0; i--) {\n      if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) {\n        mAvsQueue.clear();\n        response.remove(i);\n      }\n    }\n    Timber.i(\"Adding %s items to our queue\",response.size());\n    mAvsQueue.addAll(response);\n  }\n  checkQueue();\n}"}
{"ids": "57931", "raw_code": "void mergesort(Vector a,Vector b,int l,int r,XPathContext support) throws TransformerException {\n  if ((r - l) > 0) {\n    int m=(r + l) / 2;\n    mergesort(a,b,l,m,support);\n    mergesort(a,b,m + 1,r,support);\n    int i, j, k;\n    for (i=m; i >= l; i--) {\n      if (i >= b.size())       b.insertElementAt(a.elementAt(i),i);\n else       b.setElementAt(a.elementAt(i),i);\n    }\n    i=l;\n    for (j=(m + 1); j <= r; j++) {\n      if (r + m + 1 - j >= b.size())       b.insertElementAt(a.elementAt(j),r + m + 1 - j);\n else       b.setElementAt(a.elementAt(j),r + m + 1 - j);\n    }\n    j=r;\n    int compVal;\n    for (k=l; k <= r; k++) {\n      if (i == j)       compVal=-1;\n else       compVal=compare((NodeCompareElem)b.elementAt(i),(NodeCompareElem)b.elementAt(j),0,support);\n      if (compVal < 0) {\n        a.setElementAt(b.elementAt(i),k);\n        i++;\n      }\n else       if (compVal > 0) {\n        a.setElementAt(b.elementAt(j),k);\n        j--;\n      }\n    }\n  }\n}"}
{"ids": "8155", "raw_code": "public static List<String> toList(CharSequence self){\n  String s=self.toString();\n  int size=s.length();\n  List<String> answer=new ArrayList<String>(size);\n  for (int i=0; i < size; i++) {\n    answer.add(s.substring(i,i + 1));\n  }\n  return answer;\n}"}
{"ids": "61027", "raw_code": "void appendArrayGenericType(StringBuilder sb,Type[] types){\n  if (types.length > 0) {\n    appendGenericType(sb,types[0]);\n    for (int i=1; i < types.length; i++) {\n      sb.append(',');\n      appendGenericType(sb,types[i]);\n    }\n  }\n}"}
{"ids": "25450", "raw_code": "public static int decode_residual(H264Context h,GetBitContext gb,short[] block_base,int block_offset,int n,int[] scantable_base,int scantable_offset,long[] qmul_base,int qmul_offset,int max_coeff){\n  final int[] coeff_token_table_index={0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3};\n  int[] level=new int[16];\n  int zeros_left, coeff_token, total_coeff, i, trailing_ones, run_before;\n  if (n >= H264Context.CHROMA_DC_BLOCK_INDEX) {\n    coeff_token=gb.get_vlc2(chroma_dc_coeff_token_vlc.table_base,chroma_dc_coeff_token_vlc.table_offset,H264Context.CHROMA_DC_COEFF_TOKEN_VLC_BITS,1,\"coeff_token_CROMA_DC\");\n    total_coeff=coeff_token >> 2;\n  }\n else {\n    if (n == H264Context.LUMA_DC_BLOCK_INDEX) {\n      total_coeff=pred_non_zero_count(h,0);\n      coeff_token=gb.get_vlc2(coeff_token_vlc[coeff_token_table_index[total_coeff]].table_base,coeff_token_vlc[coeff_token_table_index[total_coeff]].table_offset,H264Context.COEFF_TOKEN_VLC_BITS,2,\"coeff_token_LUMA_DC\");\n      total_coeff=coeff_token >> 2;\n    }\n else {\n      total_coeff=pred_non_zero_count(h,n);\n      coeff_token=gb.get_vlc2(coeff_token_vlc[coeff_token_table_index[total_coeff]].table_base,coeff_token_vlc[coeff_token_table_index[total_coeff]].table_offset,H264Context.COEFF_TOKEN_VLC_BITS,2,\"coeff_token_LUMA(2)_DC\");\n      total_coeff=coeff_token >> 2;\n    }\n  }\n  h.non_zero_count_cache[H264Context.scan8[n]]=total_coeff;\n  if (total_coeff == 0)   return 0;\n  if (total_coeff > max_coeff) {\n    return -1;\n  }\n  trailing_ones=coeff_token & 3;\n  i=(int)gb.show_bits(3);\n  gb.skip_bits(trailing_ones);\n  level[0]=1 - ((i & 4) >> 1);\n  level[1]=1 - ((i & 2));\n  level[2]=1 - ((i & 1) << 1);\n  if (trailing_ones < total_coeff) {\n    int mask, prefix;\n    int suffix_length=((total_coeff > 10) ? 1 : 0) & ((trailing_ones < 3) ? 1 : 0);\n    int bitsi=(int)gb.show_bits(LEVEL_TAB_BITS);\n    int level_code=cavlc_level_tab[suffix_length][bitsi][0];\n    gb.skip_bits(cavlc_level_tab[suffix_length][bitsi][1]);\n    if (level_code >= 100) {\n      prefix=level_code - 100;\n      if (prefix == LEVEL_TAB_BITS)       prefix+=get_level_prefix(gb);\n      if (prefix < 14) {\n        if (suffix_length != 0)         level_code=(int)((prefix << 1) + gb.get_bits1(\"level_code\"));\n else         level_code=prefix;\n      }\n else       if (prefix == 14) {\n        if (suffix_length != 0)         level_code=(int)((prefix << 1) + gb.get_bits1(\"level_code\"));\n else         level_code=(int)(prefix + gb.get_bits(4,\"level_code\"));\n      }\n else {\n        level_code=30 + (int)(gb.get_bits(prefix - 3,\"level_code\"));\n        if (prefix >= 16) {\n          if (prefix > 25 + 3) {\n            return -1;\n          }\n          level_code+=(1 << (prefix - 3)) - 4096;\n        }\n      }\n      if (trailing_ones < 3)       level_code+=2;\n      suffix_length=2;\n      mask=-(level_code & 1);\n      level[trailing_ones]=(((2 + level_code) >> 1) ^ mask) - mask;\n    }\n else {\n      level_code+=((level_code >> 31) | 1) & -((trailing_ones < 3) ? 1 : 0);\n      suffix_length=1 + (((0xffffffffL & (level_code + 3)) > 6) ? 1 : 0);\n      level[trailing_ones]=level_code;\n    }\n    for (i=trailing_ones + 1; i < total_coeff; i++) {\n      final int[] suffix_limit={0,3,6,12,24,48,Integer.MAX_VALUE};\n      bitsi=(int)gb.show_bits(LEVEL_TAB_BITS);\n      level_code=cavlc_level_tab[suffix_length][bitsi][0];\n      gb.skip_bits(cavlc_level_tab[suffix_length][bitsi][1]);\n      if (level_code >= 100) {\n        prefix=level_code - 100;\n        if (prefix == LEVEL_TAB_BITS) {\n          prefix+=get_level_prefix(gb);\n        }\n        if (prefix < 15) {\n          level_code=(int)((prefix << suffix_length) + gb.get_bits(suffix_length,\"level_code\"));\n        }\n else {\n          level_code=(int)((15 << suffix_length) + gb.get_bits(prefix - 3,\"level_code\"));\n          if (prefix >= 16)           level_code+=(1 << (prefix - 3)) - 4096;\n        }\n        mask=-(level_code & 1);\n        level_code=(((2 + level_code) >> 1) ^ mask) - mask;\n      }\n      level[i]=level_code;\n      suffix_length+=(((0xffffffffL & (suffix_limit[suffix_length] + level_code)) > (2L * suffix_limit[suffix_length])) ? 1 : 0);\n    }\n  }\n  if (total_coeff == max_coeff)   zeros_left=0;\n else {\n    if (n >= H264Context.CHROMA_DC_BLOCK_INDEX) {\n      zeros_left=gb.get_vlc2(chroma_dc_total_zeros_vlc[total_coeff - 1].table_base,chroma_dc_total_zeros_vlc[total_coeff - 1].table_offset,H264Context.CHROMA_DC_TOTAL_ZEROS_VLC_BITS,1,\"coeff_token_CROMA_DC_TOTAL_ZERO\");\n    }\n else {\n      zeros_left=gb.get_vlc2(total_zeros_vlc[total_coeff - 1].table_base,total_zeros_vlc[total_coeff - 1].table_offset,H264Context.TOTAL_ZEROS_VLC_BITS,1,\"coeff_token_TOTAL_ZEROS\");\n    }\n  }\n  scantable_offset+=zeros_left + total_coeff - 1;\n  if (scantable_offset < 0) {\n    int[] new_scantable_base=new int[scantable_base.length + (-scantable_offset)];\n    System.arraycopy(scantable_base,0,new_scantable_base,-scantable_offset,scantable_base.length);\n    scantable_base=new_scantable_base;\n    scantable_offset=0;\n  }\n  if (n >= H264Context.LUMA_DC_BLOCK_INDEX) {\n    block_base[block_offset + scantable_base[scantable_offset]]=(short)level[0];\n    for (i=1; i < total_coeff && zeros_left > 0; i++) {\n      if (zeros_left < 7) {\n        run_before=gb.get_vlc2(run_vlc[zeros_left - 1].table_base,run_vlc[zeros_left - 1].table_offset,H264Context.RUN_VLC_BITS,1,\"RUN_VLC\");\n      }\n else {\n        run_before=gb.get_vlc2(run7_vlc.table_base,run7_vlc.table_offset,H264Context.RUN7_VLC_BITS,2,\"RUN7_VLC\");\n      }\n      zeros_left-=run_before;\n      scantable_offset-=1 + run_before;\n      block_base[block_offset + scantable_base[scantable_offset]]=(short)level[i];\n    }\n    for (; i < total_coeff; i++) {\n      scantable_offset--;\n      block_base[block_offset + scantable_base[scantable_offset]]=(short)level[i];\n    }\n  }\n else {\n    block_base[block_offset + scantable_base[scantable_offset]]=(short)((level[0] * qmul_base[qmul_offset + scantable_base[scantable_offset]] + 32) >> 6);\n    for (i=1; i < total_coeff && zeros_left > 0; i++) {\n      if (zeros_left < 7) {\n        run_before=gb.get_vlc2(run_vlc[zeros_left - 1].table_base,run_vlc[zeros_left - 1].table_offset,H264Context.RUN_VLC_BITS,1,\"RUN_VLC\");\n      }\n else {\n        run_before=gb.get_vlc2(run7_vlc.table_base,run7_vlc.table_offset,H264Context.RUN7_VLC_BITS,2,\"RUN7_VLC\");\n      }\n      zeros_left-=run_before;\n      scantable_offset-=(1 + run_before);\n      block_base[block_offset + scantable_base[scantable_offset]]=(short)((level[i] * qmul_base[qmul_offset + scantable_base[scantable_offset]] + 32) >> 6);\n    }\n    for (; i < total_coeff; i++) {\n      scantable_offset--;\n      block_base[block_offset + scantable_base[scantable_offset]]=(short)((level[i] * qmul_base[qmul_offset + scantable_base[scantable_offset]] + 32) >> 6);\n    }\n  }\n  if (zeros_left < 0) {\n    return -1;\n  }\n  return 0;\n}"}
{"ids": "22203", "raw_code": "public void checkReinitFile(final boolean needReinit) throws IOException {\n  File bootModeFile=new File(rootDir,Constants.STARTUPMODE);\n  if (!needReinit) {\n    log.info(\"Reinit flag is false\");\n    if (bootModeFile.exists()) {\n      bootModeFile.delete();\n    }\n    return;\n  }\n  if (!bootModeFile.exists()) {\n    setDbStartupModeAsRestoreReinit(rootDir);\n  }\n  chown(bootModeFile,BackupConstants.STORAGEOS_USER,BackupConstants.STORAGEOS_GROUP);\n  log.info(\"Startup mode file({}) has been created\",bootModeFile.getAbsolutePath());\n}"}
{"ids": "38397", "raw_code": "public void readDOT(Reader input){\n  DotParser dp=new DotParser(input,m_nodes,m_edges);\n  graphID=dp.parse();\n  setAppropriateNodeSize();\n  if (m_le != null) {\n    m_le.setNodeSize(paddedNodeWidth,nodeHeight);\n    jBtLayout.setEnabled(false);\n    layoutGraph();\n  }\n}"}
{"ids": "22823", "raw_code": "private void notifyAllEntity(){\n  Log.printConcatLine(super.getName(),\": Notify all CloudSim entities for shutting down.\");\n  signalShutdown(resList);\n  signalShutdown(gisList);\n  resList.clear();\n  gisList.clear();\n}"}
{"ids": "44456", "raw_code": "protected Response calcDefaultSMTPResponse(HookResult result){\n  if (result != null) {\n    int rCode=result.getResult();\n    String smtpRetCode=result.getSmtpRetCode();\n    String smtpDesc=result.getSmtpDescription();\n    if ((rCode & HookReturnCode.DENY) == HookReturnCode.DENY) {\n      if (smtpRetCode == null)       smtpRetCode=SMTPRetCode.AUTH_FAILED;\n      if (smtpDesc == null)       smtpDesc=\"Authentication Failed\";\n      SMTPResponse response=new SMTPResponse(smtpRetCode,smtpDesc);\n      if ((rCode & HookReturnCode.DISCONNECT) == HookReturnCode.DISCONNECT) {\n        response.setEndSession(true);\n      }\n      return response;\n    }\n else     if ((rCode & HookReturnCode.DENYSOFT) == HookReturnCode.DENYSOFT) {\n      if (smtpRetCode == null)       smtpRetCode=SMTPRetCode.LOCAL_ERROR;\n      if (smtpDesc == null)       smtpDesc=\"Temporary problem. Please try again later\";\n      SMTPResponse response=new SMTPResponse(smtpRetCode,smtpDesc);\n      if ((rCode & HookReturnCode.DISCONNECT) == HookReturnCode.DISCONNECT) {\n        response.setEndSession(true);\n      }\n      return response;\n    }\n else     if ((rCode & HookReturnCode.OK) == HookReturnCode.OK) {\n      if (smtpRetCode == null)       smtpRetCode=SMTPRetCode.AUTH_OK;\n      if (smtpDesc == null)       smtpDesc=\"Authentication Succesfull\";\n      SMTPResponse response=new SMTPResponse(smtpRetCode,smtpDesc);\n      if ((rCode & HookReturnCode.DISCONNECT) == HookReturnCode.DISCONNECT) {\n        response.setEndSession(true);\n      }\n      return response;\n    }\n else     if ((rCode & HookReturnCode.DISCONNECT) == HookReturnCode.DISCONNECT) {\n      SMTPResponse response=new SMTPResponse(\"\");\n      response.setEndSession(true);\n      return response;\n    }\n else {\n      return null;\n    }\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "79783", "raw_code": "public synchronized boolean hasAlerts(){\n  if (alerts == null) {\n    return false;\n  }\n  return !alerts.isEmpty();\n}"}
{"ids": "35007", "raw_code": "protected Collection<? extends AnnotationMirror> replacePolyAll(Collection<? extends AnnotationMirror> annos){\n  Set<AnnotationMirror> returnAnnos=AnnotationUtils.createAnnotationSet();\n  for (  AnnotationMirror top : getTopAnnotations()) {\n    AnnotationMirror annotationInHierarchy=findAnnotationInHierarchy(annos,top);\n    if (annotationInHierarchy != null) {\n      returnAnnos.add(annotationInHierarchy);\n    }\n  }\n  return returnAnnos;\n}"}
{"ids": "76707", "raw_code": "public synchronized void resetInputs() throws IOException {\n  source.printStatistics(\"docs\");\n  setConfig(config,source);\n  source.resetInputs();\n  numDocsCreated.set(0);\n  resetLeftovers();\n}"}
{"ids": "73534", "raw_code": "public void removeMatchingCoupling(Coupling<?> toRemove){\n  for (  Coupling<?> coupling : getCouplings()) {\n    boolean consumersMatch=attributesMatch(coupling.getConsumer(),toRemove.getConsumer());\n    boolean producersMatch=attributesMatch(coupling.getProducer(),toRemove.getProducer());\n    if (consumersMatch && producersMatch) {\n      removeCoupling(coupling);\n    }\n  }\n}"}
{"ids": "29681", "raw_code": "public String toShortString(){\n  StringBuilder sb=new StringBuilder();\n  if (xRoadInstance != null) {\n    sb.append(xRoadInstance);\n  }\n  for (  String part : getFieldsForStringFormat()) {\n    if (part != null) {\n      if (sb.length() > 0) {\n        sb.append('/');\n      }\n      sb.append(part);\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "35614", "raw_code": "private boolean checkPattern(){\n  if (pattern == null) {\n    return false;\n  }\n  char leftSeparator=getLeftSeparator();\n  char rightSeparator=getRightSeparator();\n  Stack<Character> separatorStack=new Stack<Character>();\n  for (int i=0; i < pattern.length(); i++) {\n    char cur=pattern.charAt(i);\n    if (cur == leftSeparator) {\n      separatorStack.push(cur);\n    }\n else     if (cur == rightSeparator) {\n      if (!separatorStack.isEmpty() && (separatorStack.pop() == leftSeparator)) {\n        continue;\n      }\n else {\n        return false;\n      }\n    }\n  }\n  return separatorStack.isEmpty();\n}"}
{"ids": "65001", "raw_code": "public static SQLiteDatabase openOrCreateDatabase(File file,CursorFactory factory){\n  return openOrCreateDatabase(file.getPath(),factory);\n}"}
{"ids": "67387", "raw_code": "public Wildcard(String pattern,int regexpOptions){\n  this.regexpOptions=regexpOptions;\n  regexp=Pattern.compile(wildcardToRegex(pattern),regexpOptions);\n  shortcut=extractShortcut(pattern);\n}"}
{"ids": "60782", "raw_code": "private boolean linkLast(Node<E> node){\n  if (count >= capacity)   return false;\n  Node<E> l=last;\n  node.prev=l;\n  last=node;\n  if (first == null)   first=node;\n else   l.next=node;\n  ++count;\n  notEmpty.signal();\n  return true;\n}"}
{"ids": "23087", "raw_code": "private String local_number() throws ParseException {\n  StringBuffer s=new StringBuffer();\n  if (debug)   dbg_enter(\"local_number\");\n  try {\n    int lc=0;\n    while (lexer.hasMoreChars()) {\n      char la=lexer.lookAhead(0);\n      if (la == '*' || la == '#' || la == '-' || la == '.' || la == '(' || la == ')' || Lexer.isHexDigit(la)) {\n        lexer.consume(1);\n        s.append(la);\n        lc++;\n      }\n else       if (lc > 0)       break;\n else       throw createParseException(\"unexepcted \" + la);\n    }\n    return s.toString();\n  }\n  finally {\n    if (debug)     dbg_leave(\"local_number\");\n  }\n}"}
{"ids": "62393", "raw_code": "private static void appendDefaultValue(StringBuilder sb,FieldType fieldType,Object defaultValue){\n  if (fieldType.isEscapedDefaultValue()) {\n    appendEscapedWord(sb,defaultValue.toString());\n  }\n else {\n    sb.append(defaultValue);\n  }\n}"}
{"ids": "62433", "raw_code": "public MetadataBlockDataPicture(ByteBuffer rawdata) throws IOException, InvalidFrameException {\n  initFromByteBuffer(rawdata);\n}"}
{"ids": "37119", "raw_code": "public void previous(){\n  if (current() == null) {\n    return;\n  }\n  m_currentSearchIndex--;\n  m_isBeforeFirst=false;\n  m_isAfterLast=false;\n  if (m_currentSearchIndex < 0) {\n    m_currentSearchIndex=m_reducedResults.size() - 1;\n    m_isBeforeFirst=true;\n  }\n}"}
{"ids": "83035", "raw_code": "@Nullable public static Method findMethod(Class c,String name,Object... params){\n  Class[] paramTypes=getParamTypes(params);\n  Method method=null;\n  try {\n    method=c.getDeclaredMethod(name,paramTypes);\n  }\n catch (  NoSuchMethodException e) {\n    try {\n      method=c.getMethod(name,paramTypes);\n    }\n catch (    NoSuchMethodException e1) {\n    }\n  }\n  if (method != null)   method.setAccessible(true);\n  return method;\n}"}
{"ids": "52269", "raw_code": "public boolean closeAllSessions(){\n  while (existsSession()) {\n    SessionEditor sessionEditor=getFrontmostSessionEditor();\n    SessionEditorWorkbench workbench=sessionEditor.getSessionWorkbench();\n    SessionWrapper wrapper=workbench.getSessionWrapper();\n    if (!wrapper.isSessionChanged()) {\n      closeFrontmostSession();\n      continue;\n    }\n    String name=sessionEditor.getName();\n    int ret=JOptionPane.showConfirmDialog(JOptionUtils.centeringComp(),\"Would you like to save the changes you made to \" + name + \"?\",\"Advise needed...\",JOptionPane.YES_NO_CANCEL_OPTION);\n    if (ret == JOptionPane.NO_OPTION) {\n      closeFrontmostSession();\n      continue;\n    }\n else     if (ret == JOptionPane.CANCEL_OPTION) {\n      return false;\n    }\n    SaveSessionAsAction action=new SaveSessionAsAction();\n    action.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,\"Dummy close action\"));\n    if (!action.isSaved()) {\n      int ret2=JOptionPane.showConfirmDialog(JOptionUtils.centeringComp(),\"This session was not saved. Close session and continue anyway?\",\"Advise needed...\",JOptionPane.OK_CANCEL_OPTION);\n      if (ret2 == JOptionPane.CANCEL_OPTION) {\n        return false;\n      }\n    }\n    closeFrontmostSession();\n  }\n  return true;\n}"}
{"ids": "2388", "raw_code": "private void removeNonVisibleViews(final int offset){\n  int childCount=getChildCount();\n  if (mLastItemPosition != mAdapter.getCount() - 1 && childCount > 1) {\n    View firstChild=getChildAt(0);\n    while (firstChild != null && getChildBottom(firstChild) + offset < 0) {\n      removeViewInLayout(firstChild);\n      childCount--;\n      mCachedItemViews.addLast(firstChild);\n      mFirstItemPosition++;\n      mListTopOffset+=getChildHeight(firstChild);\n      if (childCount > 1) {\n        firstChild=getChildAt(0);\n      }\n else {\n        firstChild=null;\n      }\n    }\n  }\n  if (mFirstItemPosition != 0 && childCount > 1) {\n    View lastChild=getChildAt(childCount - 1);\n    while (lastChild != null && getChildTop(lastChild) + offset > getHeight()) {\n      removeViewInLayout(lastChild);\n      childCount--;\n      mCachedItemViews.addLast(lastChild);\n      mLastItemPosition--;\n      if (childCount > 1) {\n        lastChild=getChildAt(childCount - 1);\n      }\n else {\n        lastChild=null;\n      }\n    }\n  }\n}"}
{"ids": "16357", "raw_code": "public RepeatedFieldBuilder<MType,BType,IType> addMessage(int index,MType message){\n  if (message == null) {\n    throw new NullPointerException();\n  }\n  ensureMutableMessageList();\n  messages.add(index,message);\n  if (builders != null) {\n    builders.add(index,null);\n  }\n  onChanged();\n  incrementModCounts();\n  return this;\n}"}
{"ids": "63467", "raw_code": "void unlock(Table t){\n  locks.remove(t);\n}"}
{"ids": "73028", "raw_code": "public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){\n  if (LOGV_ENABLED) {\n    Log.v(LOGTAG,\"Received onExceededDatabaseQuota for \" + url + \":\"+ databaseIdentifier+ \"(current quota: \"+ currentQuota+ \", total used quota: \"+ totalUsedQuota+ \")\");\n  }\n  long totalUnusedQuota=mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;\n  if (totalUnusedQuota <= 0) {\n    if (totalUsedQuota > 0) {\n      scheduleOutOfSpaceNotification();\n    }\n    quotaUpdater.updateQuota(currentQuota);\n    if (LOGV_ENABLED) {\n      Log.v(LOGTAG,\"onExceededDatabaseQuota: out of space.\");\n    }\n    return;\n  }\n  long newOriginQuota=currentQuota;\n  if (newOriginQuota == 0) {\n    if (totalUnusedQuota >= estimatedSize) {\n      newOriginQuota=estimatedSize;\n    }\n else {\n      if (LOGV_ENABLED) {\n        Log.v(LOGTAG,\"onExceededDatabaseQuota: Unable to satisfy\" + \" estimatedSize for the new database \" + \" (estimatedSize: \" + estimatedSize + \", unused quota: \"+ totalUnusedQuota);\n      }\n      newOriginQuota=0;\n    }\n  }\n else {\n    long quotaIncrease=estimatedSize == 0 ? Math.min(QUOTA_INCREASE_STEP,totalUnusedQuota) : estimatedSize;\n    newOriginQuota+=quotaIncrease;\n    if (quotaIncrease > totalUnusedQuota) {\n      newOriginQuota=currentQuota;\n    }\n  }\n  quotaUpdater.updateQuota(newOriginQuota);\n  if (LOGV_ENABLED) {\n    Log.v(LOGTAG,\"onExceededDatabaseQuota set new quota to \" + newOriginQuota);\n  }\n}"}
{"ids": "14738", "raw_code": "protected String toValString(Set vals){\n  StringBuilder sb=new StringBuilder();\n  boolean first=true;\n  for (Iterator i=vals.iterator(); i.hasNext(); ) {\n    String val=(String)i.next();\n    val=encodeVal(val);\n    if (first) {\n      first=false;\n    }\n else {\n      sb.append(',');\n    }\n    sb.append(val);\n  }\n  return sb.toString();\n}"}
{"ids": "12751", "raw_code": "private String printOFormat(short x){\n  String sx=null;\n  if (x == Short.MIN_VALUE)   sx=\"100000\";\n else   if (x < 0) {\n    String t=Integer.toString((~(-x - 1)) ^ Short.MIN_VALUE,8);\nswitch (t.length()) {\ncase 1:\n      sx=\"10000\" + t;\n    break;\ncase 2:\n  sx=\"1000\" + t;\nbreak;\ncase 3:\nsx=\"100\" + t;\nbreak;\ncase 4:\nsx=\"10\" + t;\nbreak;\ncase 5:\nsx=\"1\" + t;\nbreak;\n}\n}\n else sx=Integer.toString(x,8);\nreturn printOFormat(sx);\n}"}
{"ids": "4481", "raw_code": "public static JSONArray readJSONArray(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {\n  if (required) {\n    return jsonArray.getJSONArray(index);\n  }\n  if (notNull && jsonArray.isNull(index)) {\n    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));\n  }\n  JSONArray value=null;\n  if (!jsonArray.isNull(index)) {\n    value=jsonArray.getJSONArray(index);\n  }\n  return value;\n}"}
{"ids": "45742", "raw_code": "private static Bitmap resizePhoto(Bitmap realImage,float maxImageSize,boolean filter){\n  float ratio=Math.min((float)maxImageSize / realImage.getWidth(),(float)maxImageSize / realImage.getHeight());\n  int width=Math.round((float)ratio * realImage.getWidth());\n  int height=Math.round((float)ratio * realImage.getHeight());\n  Bitmap newBitmap=Bitmap.createScaledBitmap(realImage,width,height,filter);\n  return newBitmap;\n}"}
{"ids": "9916", "raw_code": "private Element createKeyValue() throws Exception {\n  Element keyValueEle=null;\n  PrivateKey key=idmClient.getTenantPrivateKey(tenantName);\n  if (key != null) {\n    RSAPrivateKey rsaKey=(RSAPrivateKey)key;\n    Element rsaKeyEle=createRSAKeyValue(rsaKey);\n    if (rsaKeyEle != null) {\n      keyValueEle=doc.createElement(SAMLNames.DS_KEYVALUE);\n      keyValueEle.appendChild(rsaKeyEle);\n    }\n  }\n  return keyValueEle;\n}"}
{"ids": "74075", "raw_code": "static protected void expandElement(Element el,List<Element> list){\n  list.addAll(el.getChildren(\"display\"));\n  List<Element> children=el.getChildren();\n  for (int i=0; i < children.size(); i++) {\n    expandElement(children.get(i),list);\n  }\n}"}
{"ids": "39841", "raw_code": "public static String dump(Map<?,?> map){\n  StringBuilder stringBuilder=new StringBuilder();\n  for (  Map.Entry<?,?> entry : map.entrySet()) {\n    stringBuilder.append(entry.getKey());\n    stringBuilder.append(\" : \");\n    stringBuilder.append(entry.getValue());\n  }\n  return stringBuilder.toString();\n}"}
{"ids": "8987", "raw_code": "private void mergeCollapse(){\n  while (stackSize > 1) {\n    int n=stackSize - 2;\n    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {\n      if (runLen[n - 1] < runLen[n + 1])       n--;\n      mergeAt(n);\n    }\n else     if (runLen[n] <= runLen[n + 1]) {\n      mergeAt(n);\n    }\n else {\n      break;\n    }\n  }\n}"}
{"ids": "19189", "raw_code": "private File findFile(File directory,String name) throws FileNotFoundException {\n  File file=new File(directory,name);\n  if (file.exists()) {\n    return file;\n  }\n  for (  String child : directory.list()) {\n    if (child.equalsIgnoreCase(name)) {\n      return new File(directory,child);\n    }\n  }\n  throw new FileNotFoundException(\"Missing file: \" + file);\n}"}
{"ids": "14933", "raw_code": "protected void removeFromMaps(String clientType){\n  Client client=(Client)clientTypeMap.get(clientType);\n  externalClientData.remove(clientType);\n  Map map=(Map)internalClientData.get(clientType);\n  if (map == null) {\n    removeFromClientMap(clientType,client);\n  }\n else {\n    handleParentChange(clientType,map);\n  }\n  unloadClient(clientType);\n}"}
{"ids": "1235", "raw_code": "public String serialize(Object object) throws ConverterException {\n  deep=0;\n  StringBuilder sb=new StringBuilder();\n  _serialize(object,sb,new HashSet<Object>());\n  return sb.toString();\n}"}
{"ids": "72057", "raw_code": "private void displayVerbose(ConsoleApplication app,String categoryName,String typeName,Tag tag,Set<String> propertyNames){\n  LocalizableMessage c1=buildLine('=',MAX_LINE_WIDTH);\n  LocalizableMessage c2=buildLine('-',MAX_LINE_WIDTH);\n  boolean isFirstManagedObject=true;\n  for (  String category : categoryMap.keySet()) {\n    if (categoryName != null && !categoryName.equals(category)) {\n      continue;\n    }\n    Map<String,AbstractManagedObjectDefinition<?,?>> subTypes=categoryMap.get(category);\n    for (    String type : subTypes.keySet()) {\n      if (typeName != null && !typeName.equals(type)) {\n        continue;\n      }\n      AbstractManagedObjectDefinition<?,?> mod=subTypes.get(type);\n      if (cannotDisplay(app,mod,tag)) {\n        continue;\n      }\n      boolean isFirstProperty=true;\n      Set<PropertyDefinition<?>> pds=getPropertyDefinitions(mod);\n      for (      PropertyDefinition<?> pd : pds) {\n        if (cannotDisplay(app,pd,propertyNames)) {\n          continue;\n        }\n        if (isFirstProperty) {\n          if (!isFirstManagedObject) {\n            app.println();\n            app.println(c1);\n            app.println();\n          }\n else {\n            isFirstManagedObject=false;\n          }\n          app.println(INFO_DSCFG_HELP_HEADING_COMPONENT.get(mod.getUserFriendlyName()));\n          app.println();\n          app.println(mod.getSynopsis());\n          if (mod.getDescription() != null) {\n            app.println();\n            app.println(mod.getDescription());\n          }\n        }\n        app.println();\n        app.println(c2);\n        app.println();\n        displayVerboseSingleProperty(app,mod,pd.getName());\n        isFirstProperty=false;\n      }\n    }\n  }\n}"}
{"ids": "29571", "raw_code": "private static String formHead(String hair,String face,String neck){\n  return String.join(\"\",hair,face,neck);\n}"}
{"ids": "30942", "raw_code": "public void terminate(){\n  listeners.clear();\n  lookupDisc.terminate();\n  locatorDisc.terminate();\n  if (dynamicLocatorDisc != null)   dynamicLocatorDisc.terminate();\n}"}
{"ids": "71568", "raw_code": "public void start(){\n  start=System.currentTimeMillis();\n}"}
{"ids": "60411", "raw_code": "@Nullable public static String extractProtocol(@NotNull String url){\n  int index=url.indexOf(URLUtil.SCHEME_SEPARATOR);\n  if (index < 0)   return null;\n  return url.substring(0,index);\n}"}
{"ids": "11691", "raw_code": "protected void loadBuffer(){\n  int resIdx=minuteSpacing / 5;\n  if (resIdx < 0)   resIdx=0;\n else   if (resIdx > 3)   resIdx=3;\n  String fileName=path + etopoFileNames[resIdx];\n  dataBuffer=null;\n  try {\n    BinaryBufferedFile binFile=new BinaryBufferedFile(fileName);\n    binFile.byteOrder(true);\n    bufferWidth=etopoWidths[resIdx];\n    bufferHeight=etopoHeights[resIdx];\n    int spacer=1;\nswitch (minuteSpacing) {\ncase (2):\n      spacer=1 + this.spacer;\n    break;\ncase (5):\n  spacer=0 + this.spacer;\nbreak;\ndefault :\nspacer=1 + this.spacer;\n}\ndataBuffer=new short[(bufferWidth + spacer) * bufferHeight];\nfor (int i=0; i < bufferWidth * bufferHeight; i++) dataBuffer[i]=binFile.readShort();\nbinFile.close();\nbufferWidth+=spacer;\n}\n catch (FileNotFoundException e) {\nDebug.error(\"ETOPOLayer loadBuffer(): file \" + fileName + \" not found\");\n}\ncatch (IOException e) {\nDebug.error(\"ETOPOLayer loadBuffer(): File IO Error!\\n\" + e.toString());\n}\ncatch (FormatException e) {\nDebug.error(\"ETOPOLayer loadBuffer(): Format exception!\\n\" + e.toString());\n}\n}"}
{"ids": "23870", "raw_code": "protected VersionTag fetchRemoteVersionTag(Object key){\n  VersionTag tag=null;\n  assert this.dataPolicy != DataPolicy.REPLICATE;\n  TransactionId txId=cache.getCacheTransactionManager().suspend();\n  try {\n    boolean retry=true;\n    InternalDistributedMember member=getRandomReplicate();\n    while (retry) {\n      try {\n        if (member == null) {\n          break;\n        }\n        FetchVersionResponse response=RemoteFetchVersionMessage.send(member,this,key);\n        tag=response.waitForResponse();\n        retry=false;\n      }\n catch (      RemoteOperationException e) {\n        member=getRandomReplicate();\n        if (member != null) {\n          if (logger.isDebugEnabled()) {\n            logger.debug(\"Retrying RemoteFetchVersionMessage on member:{}\",member);\n          }\n        }\n      }\n    }\n  }\n  finally {\n    if (txId != null) {\n      cache.getCacheTransactionManager().resume(txId);\n    }\n  }\n  return tag;\n}"}
{"ids": "18052", "raw_code": "public Node replaceChild(Node newChild,Node oldChild) throws DOMException {\n  if (oldChild == null || oldChild.getParentNode() != this)   return null;\n  ElemTemplateElement newChildElem=((ElemTemplateElement)newChild);\n  ElemTemplateElement oldChildElem=((ElemTemplateElement)oldChild);\n  ElemTemplateElement prev=(ElemTemplateElement)oldChildElem.getPreviousSibling();\n  if (null != prev)   prev.m_nextSibling=newChildElem;\n  if (m_firstChild == oldChildElem)   m_firstChild=newChildElem;\n  newChildElem.m_parentNode=this;\n  oldChildElem.m_parentNode=null;\n  newChildElem.m_nextSibling=oldChildElem.m_nextSibling;\n  oldChildElem.m_nextSibling=null;\n  return newChildElem;\n}"}
{"ids": "81846", "raw_code": "public void paintDirty(){\n  int size=0;\nsynchronized (displayLock) {\n    size=paintQueueFill;\n    Animation[] array=paintQueue;\n    paintQueue=paintQueueTemp;\n    paintQueueTemp=array;\n    paintQueueFill=0;\n  }\n  if (size > 0) {\n    Graphics wrapper=getCodenameOneGraphics();\n    int dwidth=getDisplayWidth();\n    int dheight=getDisplayHeight();\n    int topX=dwidth;\n    int topY=dheight;\n    int bottomX=0;\n    int bottomY=0;\n    for (int iter=0; iter < size; iter++) {\n      Animation ani=paintQueueTemp[iter];\n      if (ani == null) {\n        continue;\n      }\n      paintQueueTemp[iter]=null;\n      wrapper.translate(-wrapper.getTranslateX(),-wrapper.getTranslateY());\n      wrapper.setClip(0,0,dwidth,dheight);\n      if (ani instanceof Component) {\n        Component cmp=(Component)ani;\n        Rectangle dirty=cmp.getDirtyRegion();\n        if (dirty != null) {\n          Dimension d=dirty.getSize();\n          wrapper.setClip(dirty.getX(),dirty.getY(),d.getWidth(),d.getHeight());\n          cmp.setDirtyRegion(null);\n        }\n        cmp.paintComponent(wrapper);\n        getPaintableBounds(cmp,paintDirtyTmpRect);\n        int cmpAbsX=paintDirtyTmpRect.getX();\n        topX=Math.min(cmpAbsX,topX);\n        bottomX=Math.max(cmpAbsX + paintDirtyTmpRect.getWidth(),bottomX);\n        int cmpAbsY=paintDirtyTmpRect.getY();\n        topY=Math.min(cmpAbsY,topY);\n        bottomY=Math.max(cmpAbsY + paintDirtyTmpRect.getHeight(),bottomY);\n      }\n else {\n        bottomX=dwidth;\n        bottomY=dheight;\n        topX=0;\n        topY=0;\n        ani.paint(wrapper);\n      }\n    }\n    paintOverlay(wrapper);\n    flushGraphics(topX,topY,bottomX - topX,bottomY - topY);\n  }\n}"}
{"ids": "927", "raw_code": "public static FSize calcTextSize(Paint paint,String demoText){\n  Rect r=new Rect();\n  paint.getTextBounds(demoText,0,demoText.length(),r);\n  return new FSize(r.width(),r.height());\n}"}
{"ids": "59703", "raw_code": "private boolean parseDelimiters(DelimiterProcessor delimiterProcessor,char delimiterChar){\n  DelimiterData res=scanDelimiters(delimiterProcessor,delimiterChar);\n  if (res == null) {\n    return false;\n  }\n  int numDelims=res.count;\n  int startIndex=index;\n  index+=numDelims;\n  Text node=appendText(input,startIndex,index);\n  lastDelimiter=new Delimiter(node,delimiterChar,res.canOpen,res.canClose,lastDelimiter);\n  lastDelimiter.numDelims=numDelims;\n  if (lastDelimiter.previous != null) {\n    lastDelimiter.previous.next=lastDelimiter;\n  }\n  return true;\n}"}
{"ids": "80164", "raw_code": "private void clearMoney(){\n  money.clear();\n  updateMoney();\n}"}
{"ids": "86223", "raw_code": "private void multiTouchController(){\n  if (DEBUG)   Log.i(\"MultiTouch\",\"Got here 6 - \" + mMode + \" \"+ mCurrPt.getNumTouchPoints()+ \" \"+ mCurrPt.isDown()+ mCurrPt.isMultiTouch());\nswitch (mMode) {\ncase MODE_NOTHING:\n    if (DEBUG)     Log.i(\"MultiTouch\",\"MODE_NOTHING\");\n  if (mCurrPt.isDown()) {\n    selectedObject=objectCanvas.getDraggableObjectAtPoint(mCurrPt);\n    if (selectedObject != null) {\n      mMode=MODE_DRAG;\n      objectCanvas.selectObject(selectedObject,mCurrPt);\n      anchorAtThisPositionAndScale();\n      mSettleStartTime=mSettleEndTime=mCurrPt.getEventTime();\n    }\n  }\nbreak;\ncase MODE_DRAG:\nif (DEBUG) Log.i(\"MultiTouch\",\"MODE_DRAG\");\nif (!mCurrPt.isDown()) {\nmMode=MODE_NOTHING;\nobjectCanvas.selectObject((selectedObject=null),mCurrPt);\n}\n else if (mCurrPt.isMultiTouch()) {\nmMode=MODE_PINCH;\nanchorAtThisPositionAndScale();\nmSettleStartTime=mCurrPt.getEventTime();\nmSettleEndTime=mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL;\n}\n else {\nif (mCurrPt.getEventTime() < mSettleEndTime) {\nanchorAtThisPositionAndScale();\n}\n else {\nperformDragOrPinch();\n}\n}\nbreak;\ncase MODE_PINCH:\nif (DEBUG) Log.i(\"MultiTouch\",\"MODE_PINCH\");\nif (!mCurrPt.isMultiTouch() || !mCurrPt.isDown()) {\nif (!mCurrPt.isDown()) {\nmMode=MODE_NOTHING;\nobjectCanvas.selectObject((selectedObject=null),mCurrPt);\n}\n else {\nmMode=MODE_DRAG;\nanchorAtThisPositionAndScale();\nmSettleStartTime=mCurrPt.getEventTime();\nmSettleEndTime=mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL;\n}\n}\n else {\nif (Math.abs(mCurrPt.getX() - mPrevPt.getX()) > MAX_MULTITOUCH_POS_JUMP_SIZE || Math.abs(mCurrPt.getY() - mPrevPt.getY()) > MAX_MULTITOUCH_POS_JUMP_SIZE || Math.abs(mCurrPt.getMultiTouchWidth() - mPrevPt.getMultiTouchWidth()) * .5f > MAX_MULTITOUCH_DIM_JUMP_SIZE || Math.abs(mCurrPt.getMultiTouchHeight() - mPrevPt.getMultiTouchHeight()) * .5f > MAX_MULTITOUCH_DIM_JUMP_SIZE) {\nanchorAtThisPositionAndScale();\nmSettleStartTime=mCurrPt.getEventTime();\nmSettleEndTime=mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL;\n}\n else if (mCurrPt.eventTime < mSettleEndTime) {\nanchorAtThisPositionAndScale();\n}\n else {\nperformDragOrPinch();\n}\n}\nbreak;\n}\nif (DEBUG) Log.i(\"MultiTouch\",\"Got here 7 - \" + mMode + \" \"+ mCurrPt.getNumTouchPoints()+ \" \"+ mCurrPt.isDown()+ mCurrPt.isMultiTouch());\n}"}
{"ids": "27116", "raw_code": "public void exec(String[] args) throws Throwable {\n  URLClassLoader urlClassLoader=new URLClassLoader(classPath.toArray(new URL[classPath.size()]));\n  Class<?> cls=urlClassLoader.loadClass(mainClass);\n  Method method=cls.getDeclaredMethod(\"main\",String[].class);\n  method.setAccessible(true);\n  try {\n    method.invoke(null,new Object[]{args});\n  }\n catch (  InvocationTargetException e) {\n    throw e.getTargetException();\n  }\n}"}
{"ids": "30439", "raw_code": "void rollbackLocalTransaction() throws RollbackFailedException {\n  if (_tx == null) {\n    return;\n  }\n  try {\n    if (_logger.isLoggable(Level.FINEST)) {\n      _logger.log(Level.FINEST,\"Aborting local transaction: \" + _tx);\n    }\n    _tx.abort();\n  }\n catch (  Exception e) {\n    if (_logger.isLoggable(Level.SEVERE)) {\n      _logger.log(Level.SEVERE,\"Internal error during local transaction abort: \" + _tx,e);\n    }\n    throw new RollbackFailedException(e);\n  }\n}"}
{"ids": "47653", "raw_code": "public void write(char c[],int off,int len){\n  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {\n    throw new IndexOutOfBoundsException();\n  }\n else   if (len == 0) {\n    return;\n  }\nsynchronized (lock) {\n    int newcount=count + len;\n    if (newcount > buf.length) {\n      buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));\n    }\n    System.arraycopy(c,off,buf,count,len);\n    count=newcount;\n  }\n}"}
{"ids": "5377", "raw_code": "private void writeJarPostResource(StringBuilder sb,String path){\n  sb.append(\"className=\\\"\" + JAR_RESOURCE_SET + \"\\\" base=\\\"\");\n  sb.append(path.replace(\"&\",\"&amp;\"));\n}"}
{"ids": "49743", "raw_code": "public static String normalize(String value){\n  if (value == null)   return value;\n  value=value.trim();\n  if (value.indexOf(\"  \") == -1)   return value;\n  boolean space=false;\n  int len=value.length();\n  StringBuffer b=new StringBuffer(len);\n  for (int i=0; i < len; i++) {\n    char v=value.charAt(i);\n    if (v == ' ') {\n      if (!space)       b.append(v);\n      space=true;\n    }\n else {\n      b.append(v);\n      space=false;\n    }\n  }\n  return b.toString();\n}"}
{"ids": "74937", "raw_code": "protected static void appendDecorations(int basePos,String sourceCode,CreateSimpleLexer langHandler,List<Object> out){\n  if (sourceCode == null) {\n    throw new NullPointerException(\"argument 'sourceCode' cannot be null\");\n  }\n  Job job=new Job();\n  job.setSourceCode(sourceCode);\n  job.setBasePos(basePos);\n  langHandler.decorate(job);\n  out.addAll(job.getDecorations());\n}"}
{"ids": "79060", "raw_code": "protected CarbonDictionaryColumnMetaChunk readLastChunkFromDictionaryMetadataFile(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) throws IOException {\n  DictionaryService dictService=CarbonCommonFactory.getDictionaryService();\n  CarbonDictionaryMetadataReader columnMetadataReaderImpl=dictService.getDictionaryMetadataReader(dictionaryColumnUniqueIdentifier.getCarbonTableIdentifier(),dictionaryColumnUniqueIdentifier.getColumnIdentifier(),carbonStorePath);\n  CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk=null;\n  try {\n    carbonDictionaryColumnMetaChunk=columnMetadataReaderImpl.readLastEntryOfDictionaryMetaChunk();\n  }\n  finally {\n    columnMetadataReaderImpl.close();\n  }\n  return carbonDictionaryColumnMetaChunk;\n}"}
{"ids": "56052", "raw_code": "public static ExternalAppId determineExternalIntentSource(String packageName,Intent intent){\n  String appId=IntentUtils.safeGetStringExtra(intent,Browser.EXTRA_APPLICATION_ID);\n  ExternalAppId externalId=ExternalAppId.OTHER;\n  if (appId == null) {\n    String url=getUrlFromIntent(intent);\n    if (url != null && url.startsWith(TWITTER_LINK_PREFIX)) {\n      externalId=ExternalAppId.TWITTER;\n    }\n else     if (url != null && url.startsWith(FACEBOOK_LINK_PREFIX)) {\n      externalId=ExternalAppId.FACEBOOK;\n    }\n else     if (url != null && url.startsWith(NEWS_LINK_PREFIX)) {\n      externalId=ExternalAppId.NEWS;\n    }\n  }\n else {\n    if (appId.equals(PACKAGE_PLUS)) {\n      externalId=ExternalAppId.PLUS;\n    }\n else     if (appId.equals(PACKAGE_GMAIL)) {\n      externalId=ExternalAppId.GMAIL;\n    }\n else     if (appId.equals(PACKAGE_HANGOUTS)) {\n      externalId=ExternalAppId.HANGOUTS;\n    }\n else     if (appId.equals(PACKAGE_MESSENGER)) {\n      externalId=ExternalAppId.MESSENGER;\n    }\n else     if (appId.equals(PACKAGE_LINE)) {\n      externalId=ExternalAppId.LINE;\n    }\n else     if (appId.equals(PACKAGE_WHATSAPP)) {\n      externalId=ExternalAppId.WHATSAPP;\n    }\n else     if (appId.equals(PACKAGE_GSA)) {\n      externalId=ExternalAppId.GSA;\n    }\n else     if (appId.equals(packageName)) {\n      externalId=ExternalAppId.CHROME;\n    }\n  }\n  return externalId;\n}"}
{"ids": "25706", "raw_code": "protected TableHDU(Header hdr,T td){\n  super(hdr,td);\n}"}
{"ids": "58017", "raw_code": "public void pushStylesheet(Stylesheet s){\n  if (m_stylesheets.size() == 0)   m_stylesheetRoot=(StylesheetRoot)s;\n  m_stylesheets.push(s);\n}"}
{"ids": "59484", "raw_code": "public boolean isBlank(final CharSequence cs){\n  int strLen;\n  if (cs == null || (strLen=cs.length()) == 0) {\n    return true;\n  }\n  for (int i=0; i < strLen; i++) {\n    if (!Character.isWhitespace(cs.charAt(i))) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "51590", "raw_code": "public void stop() throws IOException, InterruptedException {\n  thread.interrupt();\n  selector.wakeup();\n}"}
{"ids": "34387", "raw_code": "private Document parse(final String data,DocumentBuilder docBuilder){\n  if (docBuilder == null || data == null) {\n    return null;\n  }\n  Document document=null;\n  try {\n    StringBuilder buf=new StringBuilder(1024);\n    if (!data.startsWith(\"<?xml\")) {\n      buf.append(BEGIN_PART);\n    }\n    buf.append(data);\n    if (!data.endsWith(END_PART)) {\n      buf.append(END_PART);\n    }\n    InputSource inputSource=new InputSource(new StringReader(buf.toString()));\n    document=docBuilder.parse(inputSource);\n  }\n catch (  Exception e) {\n    LOGGER.warn(\"Problem with creating document: \" + e.getMessage());\n  }\n  return document;\n}"}
{"ids": "73859", "raw_code": "private XNetReply loadChars(java.io.BufferedReader istream) throws java.io.IOException {\n  String s=\"\";\n  s=istream.readLine();\n  if (log.isDebugEnabled()) {\n    log.debug(\"Received from port: \" + s);\n  }\n  if (s == null) {\n    return null;\n  }\n else {\n    return new XNetReply(s);\n  }\n}"}
{"ids": "4704", "raw_code": "public synchronized void removeConnectionManager(final HttpConnectionManager connectionManager){\n  if (shutdown) {\n    throw new IllegalStateException(\"IdleConnectionTimeoutThread has been shutdown\");\n  }\n  connectionManagers.remove(connectionManager);\n}"}
{"ids": "84580", "raw_code": "private boolean addState(long stateNumber){\n  if (firstState < 0) {\n    firstState=stateNumber;\n  }\n else   if (stepSize < 0) {\n    stepSize=(int)(stateNumber - firstState);\n  }\n else {\n    int step=(int)(stateNumber - lastState);\n    if (step != stepSize) {\n      return false;\n    }\n  }\n  lastState=stateNumber;\n  return true;\n}"}
{"ids": "47309", "raw_code": "public void reset(){\n  adler=1;\n}"}
{"ids": "50844", "raw_code": "public static boolean isLibraryResourceRoot(@Nullable VirtualFile res){\n  if (res != null) {\n    VirtualFile aar=res.getParent();\n    if (aar != null) {\n      VirtualFile exploded=aar.getParent();\n      if (exploded != null) {\n        String name=exploded.getName();\n        if (name.equals(EXPLODED_BUNDLES) || name.equals(EXPLODED_AAR)) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "56368", "raw_code": "public void failEngine(String reason,@Nullable Throwable failure){\n  if (failEngineLock.tryLock()) {\n    store.incRef();\n    try {\n      try {\n        closeNoLock(\"engine failed on: [\" + reason + \"]\");\n      }\n  finally {\n        if (failedEngine != null) {\n          logger.debug(\"tried to fail engine but engine is already failed. ignoring. [{}]\",reason,failure);\n          return;\n        }\n        logger.warn(\"failed engine [{}]\",failure,reason);\n        failedEngine=(failure != null) ? failure : new IllegalStateException(reason);\n        if (Lucene.isCorruptionException(failure)) {\n          try {\n            store.markStoreCorrupted(new IOException(\"failed engine (reason: [\" + reason + \"])\",ExceptionsHelper.unwrapCorruption(failure)));\n          }\n catch (          IOException e) {\n            logger.warn(\"Couldn't mark store corrupted\",e);\n          }\n        }\n        failedEngineListener.onFailedEngine(shardId,reason,failure);\n      }\n    }\n catch (    Throwable t) {\n      logger.warn(\"failEngine threw exception\",t);\n    }\n finally {\n      store.decRef();\n    }\n  }\n else {\n    logger.debug(\"tried to fail engine but could not acquire lock - engine should be failed by now [{}]\",reason,failure);\n  }\n}"}
{"ids": "7316", "raw_code": "public void clear(){\n  values.clear();\n}"}
{"ids": "56601", "raw_code": "@Override default CompletableFuture<OptionalInt> maxInt(final ToIntFunction<? super T> fn){\n  return CompletableFuture.supplyAsync(null,getExec());\n}"}
{"ids": "21459", "raw_code": "private void addVNXFileStorageSystemIntoCache(String storageSystemURI,DistributedQueueItemProcessedCallback callBack){\n  if (StringUtils.isNotEmpty(storageSystemURI)) {\n    VNXFILE_CACHE.put(storageSystemURI,callBack);\n  }\n}"}
{"ids": "46441", "raw_code": "void resetToPreferredSizes(int availableSize){\n  int[] testSizes=getPreferredSizes();\n  int totalSize=0;\n  for (int counter=0; counter < 3; counter++) {\n    if (testSizes[counter] != -1) {\n      totalSize+=testSizes[counter];\n    }\n  }\n  if (totalSize > availableSize) {\n    testSizes=getMinimumSizes();\n    totalSize=0;\n    for (int counter=0; counter < 3; counter++) {\n      if (testSizes[counter] != -1) {\n        totalSize+=testSizes[counter];\n      }\n    }\n  }\n  setSizes(testSizes);\n  distributeSpace(availableSize - totalSize,false);\n}"}
{"ids": "74843", "raw_code": "@Override public byte[] decode(byte[] data) throws Exception {\n  if (data[0] == 0 && data[1] == 0 && data[2] == 0) {\n    return data;\n  }\n  int bufSize=512000;\n  FastByteArrayOutputStream bos=null;\n  boolean failed=true;\n  final int orgSize=data.length;\n  if (data != null) {\n    while (failed) {\n      final Inflater inf=new Inflater();\n      inf.setInput(data);\n      final int size=data.length;\n      bos=new FastByteArrayOutputStream(size);\n      if (size < bufSize) {\n        bufSize=size;\n      }\n      final byte[] buf=new byte[bufSize];\n      int count;\n      try {\n        while (!inf.finished()) {\n          count=inf.inflate(buf);\n          bos.write(buf,0,count);\n          if (inf.getRemaining() == 0) {\n            break;\n          }\n        }\n        failed=false;\n      }\n catch (      final Exception ee) {\n        LogWriter.writeLog(\"Exception in Flate \" + ee);\n        failed=true;\n        hasError=true;\n        if (data.length == orgSize && data.length > 10000) {\n          failed=false;\n        }\n else         if (data.length > 10) {\n          final byte[] newData=new byte[data.length - 1];\n          System.arraycopy(data,0,newData,0,data.length - 1);\n          data=newData;\n        }\n else {\n          failed=false;\n        }\n      }\n    }\n    data=bos.toByteArray();\n    return applyPredictor(predictor,data,colors,bitsPerComponent,columns);\n  }\n  return data;\n}"}
{"ids": "64797", "raw_code": "public boolean isProcessing(){\n  return mRunning.get();\n}"}
{"ids": "15790", "raw_code": "private static InputStreamReader decompressWith7Zip(final String archivePath) throws ConfigurationException {\n  PATH_PROGRAM_7ZIP=(String)config.getConfigParameter(ConfigurationKeys.PATH_PROGRAM_7ZIP);\n  if (PATH_PROGRAM_7ZIP == null) {\n    throw ErrorFactory.createConfigurationException(ErrorKeys.CONFIGURATION_PARAMETER_UNDEFINED);\n  }\n  try {\n    Runtime runtime=Runtime.getRuntime();\n    Process p=runtime.exec(PATH_PROGRAM_7ZIP + \" e \" + archivePath+ \" -so\");\n    return new InputStreamReader(p.getInputStream(),WIKIPEDIA_ENCODING);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "17676", "raw_code": "private final Object arenaExchange(Object item,boolean timed,long ns){\n  Node[] a=arena;\n  Node p=participant.get();\n  for (int i=p.index; ; ) {\n    int b, m, c;\n    long j;\n    Node q=(Node)U.getObjectVolatile(a,j=(i << ASHIFT) + ABASE);\n    if (q != null && U.compareAndSwapObject(a,j,q,null)) {\n      Object v=q.item;\n      q.match=item;\n      Thread w=q.parked;\n      if (w != null)       U.unpark(w);\n      return v;\n    }\n else     if (i <= (m=(b=bound) & MMASK) && q == null) {\n      p.item=item;\n      if (U.compareAndSwapObject(a,j,null,p)) {\n        long end=(timed && m == 0) ? System.nanoTime() + ns : 0L;\n        Thread t=Thread.currentThread();\n        for (int h=p.hash, spins=SPINS; ; ) {\n          Object v=p.match;\n          if (v != null) {\n            U.putOrderedObject(p,MATCH,null);\n            p.item=null;\n            p.hash=h;\n            return v;\n          }\n else           if (spins > 0) {\n            h^=h << 1;\n            h^=h >>> 3;\n            h^=h << 10;\n            if (h == 0)             h=SPINS | (int)t.getId();\n else             if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)             Thread.yield();\n          }\n else           if (U.getObjectVolatile(a,j) != p)           spins=SPINS;\n else           if (!t.isInterrupted() && m == 0 && (!timed || (ns=end - System.nanoTime()) > 0L)) {\n            U.putObject(t,BLOCKER,this);\n            p.parked=t;\n            if (U.getObjectVolatile(a,j) == p)             U.park(false,ns);\n            p.parked=null;\n            U.putObject(t,BLOCKER,null);\n          }\n else           if (U.getObjectVolatile(a,j) == p && U.compareAndSwapObject(a,j,p,null)) {\n            if (m != 0)             U.compareAndSwapInt(this,BOUND,b,b + SEQ - 1);\n            p.item=null;\n            p.hash=h;\n            i=p.index>>>=1;\n            if (Thread.interrupted())             return null;\n            if (timed && m == 0 && ns <= 0L)             return TIMED_OUT;\n            break;\n          }\n        }\n      }\n else       p.item=null;\n    }\n else {\n      if (p.bound != b) {\n        p.bound=b;\n        p.collides=0;\n        i=(i != m || m == 0) ? m : m - 1;\n      }\n else       if ((c=p.collides) < m || m == FULL || !U.compareAndSwapInt(this,BOUND,b,b + SEQ + 1)) {\n        p.collides=c + 1;\n        i=(i == 0) ? m : i - 1;\n      }\n else       i=m + 1;\n      p.index=i;\n    }\n  }\n}"}
{"ids": "53899", "raw_code": "public void send(String data) throws IOException {\n  DatagramPacket dp=new DatagramPacket(data.getBytes(),data.length(),multicastGroup);\n  datagramSocket.send(dp);\n}"}
{"ids": "13012", "raw_code": "private void removeStaleRangeReferences(){\n  removeStaleReferences(rangeReferenceQueue,ranges);\n}"}
{"ids": "21260", "raw_code": "private boolean isExported(URI id,List<URI> exportedVolumes){\n  return exportedVolumes.contains(id);\n}"}
{"ids": "10616", "raw_code": "private String fixMonitorLinks(String fixString,String dumpName){\n  if (fixString.indexOf(\"monitor://\") > 0) {\n    fixString=fixString.replaceAll(\"monitor://\",\"monitor:/\" + dumpName + \"/\");\n  }\n  return (fixString);\n}"}
{"ids": "29843", "raw_code": "public synchronized void cacheReposts(List<Long> newRepostIds){\n  TreeSet<Long> reposts=new TreeSet<>();\n  reposts.addAll(Longs.asList(repostCache.get()));\n  reposts.addAll(newRepostIds);\n  repostCache.set(Longs.toArray(reposts));\n}"}
{"ids": "42255", "raw_code": "protected final Class<?> defineClass(String className,byte[] classRep,int offset,int length) throws ClassFormatError {\n  return defineClass(className,classRep,offset,length,null);\n}"}
{"ids": "76567", "raw_code": "public boolean rewriteExif(ByteBuffer buf,Collection<ExifTag> tags) throws IOException {\n  ExifModifier mod=null;\n  try {\n    mod=new ExifModifier(buf,this);\n    for (    ExifTag t : tags) {\n      mod.modifyTag(t);\n    }\n    return mod.commit();\n  }\n catch (  ExifInvalidFormatException e) {\n    throw new IOException(\"Invalid exif format : \" + e);\n  }\n}"}
{"ids": "52727", "raw_code": "private void writeNewlineOnDebug(XMLStreamWriter out) throws XMLStreamException {\n  if (LOG.isDebugging()) {\n    out.writeCharacters(\"\\n\");\n  }\n}"}
{"ids": "20358", "raw_code": "public RequestHandle put(String url,ResponseHandlerInterface responseHandler){\n  return put(null,url,null,responseHandler);\n}"}
{"ids": "39176", "raw_code": "public Discretize(Element discretize,FieldMetaInfo.Optype opType,ArrayList<Attribute> fieldDefs) throws Exception {\n  super(opType,fieldDefs);\n  m_fieldName=discretize.getAttribute(\"field\");\n  m_mapMissingTo=discretize.getAttribute(\"mapMissingTo\");\n  if (m_mapMissingTo != null && m_mapMissingTo.length() > 0) {\n    m_mapMissingDefined=true;\n  }\n  m_defaultValue=discretize.getAttribute(\"defaultValue\");\n  if (m_defaultValue != null && m_defaultValue.length() > 0) {\n    m_defaultValueDefined=true;\n  }\n  NodeList dbL=discretize.getElementsByTagName(\"DiscretizeBin\");\n  for (int i=0; i < dbL.getLength(); i++) {\n    Node dbN=dbL.item(i);\n    if (dbN.getNodeType() == Node.ELEMENT_NODE) {\n      Element dbE=(Element)dbN;\n      DiscretizeBin db=new DiscretizeBin(dbE,m_opType);\n      m_bins.add(db);\n    }\n  }\n  if (fieldDefs != null) {\n    setUpField();\n  }\n}"}
{"ids": "22946", "raw_code": "private static String quadTree(final MapTile aTile){\n  StringBuilder quadKey=new StringBuilder();\n  for (int i=aTile.zoomLevel; i > 0; i--) {\n    int digit=0;\n    int mask=1 << (i - 1);\n    if ((aTile.x & mask) != 0)     digit+=1;\n    if ((aTile.y & mask) != 0)     digit+=2;\n    quadKey.append(digit);\n  }\n  return quadKey.toString();\n}"}
{"ids": "79635", "raw_code": "public static int[] concatAllInt(int[]... arrays){\n  int totalLength=0;\n  final int subArrayCount=arrays.length;\n  for (int i=0; i < subArrayCount; ++i) {\n    totalLength+=arrays[i].length;\n  }\n  int[] result=Arrays.copyOf(arrays[0],totalLength);\n  int offset=arrays[0].length;\n  for (int i=1; i < subArrayCount; ++i) {\n    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);\n    offset+=arrays[i].length;\n  }\n  return result;\n}"}
{"ids": "9443", "raw_code": "public static double log1p(double value){\n  if (USE_JDK_MATH) {\n    return STRICT_MATH ? StrictMath.log1p(value) : Math.log1p(value);\n  }\n  if (false) {\n    if (value == Double.POSITIVE_INFINITY) {\n      return Double.POSITIVE_INFINITY;\n    }\n    double valuePlusOne=1 + value;\n    if (valuePlusOne == 1.0) {\n      return value;\n    }\n else {\n      return FastMath.log(valuePlusOne) * (value / (valuePlusOne - 1.0));\n    }\n  }\n  if (value > -1.0) {\n    if (value == Double.POSITIVE_INFINITY) {\n      return Double.POSITIVE_INFINITY;\n    }\n    double valuePlusOne=1.0 + value;\n    if (valuePlusOne == 1.0) {\n      return value;\n    }\n else     if (Math.abs(value) < 0.15) {\n      double z=value / (value + 2.0);\n      double z2=z * z;\n      return z * (2 + z2 * ((2.0 / 3) + z2 * ((2.0 / 5) + z2 * ((2.0 / 7) + z2 * ((2.0 / 9) + z2 * ((2.0 / 11)))))));\n    }\n    int valuePlusOneBitsHi=(int)(Double.doubleToRawLongBits(valuePlusOne) >> 32) & 0x7FFFFFFF;\n    int valuePlusOneExp=(valuePlusOneBitsHi >> 20) - MAX_DOUBLE_EXPONENT;\n    int xIndex=((valuePlusOneBitsHi << 12) >>> (32 - LOG_BITS));\n    double z=(valuePlusOne * twoPowTab[-valuePlusOneExp - MIN_DOUBLE_EXPONENT]) * logXInvTab[xIndex] - 1;\n    z*=(1 - z * ((1.0 / 2) - z * (1.0 / 3)));\n    return valuePlusOneExp * LOG_2 + logXLogTab[xIndex] + (z + (value - (valuePlusOne - 1)) / valuePlusOne);\n  }\n else   if (value == -1.0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n else {\n    return Double.NaN;\n  }\n}"}
{"ids": "53276", "raw_code": "public static long[] ones(int bits){\n  long[] v=new long[((bits - 1) >>> LONG_LOG2_SIZE) + 1];\n  final int fillWords=bits >>> LONG_LOG2_SIZE;\n  final int fillBits=bits & LONG_LOG2_MASK;\n  Arrays.fill(v,0,fillWords,LONG_ALL_BITS);\n  if (fillWords < v.length) {\n    v[v.length - 1]=(1L << fillBits) - 1;\n  }\n  return v;\n}"}
{"ids": "22138", "raw_code": "private boolean checkCurrentKeyAge() throws NumberFormatException {\n  long currentTokenKeyTS=Long.parseLong(_cachedTokenKeysBundle.getCurrentKeyEntry());\n  long now=System.currentTimeMillis();\n  long diff=now - currentTokenKeyTS;\n  if (diff >= _keyRotationIntervalInMsecs) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "58050", "raw_code": "public final void pushContextNodeList(DTMIterator nl){\n  m_contextNodeLists.push(nl);\n}"}
{"ids": "67822", "raw_code": "public void note(Element e,String msg){\n  messager.printMessage(Diagnostic.Kind.NOTE,msg,e);\n}"}
{"ids": "25046", "raw_code": "public static PublicKey generatePublicKey(String encodedPublicKey){\n  try {\n    byte[] decodedKey=Base64.decode(encodedPublicKey,Base64.DEFAULT);\n    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);\n    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  InvalidKeySpecException e) {\n    Log.e(TAG,\"Invalid key specification.\");\n    throw new IllegalArgumentException(e);\n  }\n}"}
{"ids": "39286", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addAll(Collections.list(super.listOptions()));\n  result.addElement(new Option(\"\\tSuppresses the 'BibTex:' prolog in the Javadoc.\",\"noprolog\",0,\"-noprolog\"));\n  return result.elements();\n}"}
{"ids": "43559", "raw_code": "public TrustSource add(File trustedCAPemFile){\n  if (trustedCAPemFile == null) {\n    throw new IllegalArgumentException(\"Trusted CA file cannot be null\");\n  }\n  String pemFileContents;\n  try {\n    pemFileContents=Files.toString(trustedCAPemFile,Charset.forName(\"UTF-8\"));\n  }\n catch (  IOException e) {\n    throw new UncheckedIOException(\"Unable to read file containing PEM-encoded trusted CAs: \" + trustedCAPemFile.getAbsolutePath(),e);\n  }\n  return add(pemFileContents);\n}"}
{"ids": "18066", "raw_code": "StringVector processSTRINGLIST(StylesheetHandler handler,String uri,String name,String rawName,String value){\n  StringTokenizer tokenizer=new StringTokenizer(value,\" \\t\\n\\r\\f\");\n  int nStrings=tokenizer.countTokens();\n  StringVector strings=new StringVector(nStrings);\n  for (int i=0; i < nStrings; i++) {\n    strings.addElement(tokenizer.nextToken());\n  }\n  return strings;\n}"}
{"ids": "42599", "raw_code": "private String checkforRegex(String aRegexFragment){\n  final StringBuilder result=new StringBuilder();\n  final StringCharacterIterator iterator=new StringCharacterIterator(aRegexFragment);\n  char character=iterator.current();\n  while (character != CharacterIterator.DONE) {\n    if (character == '.') {\n      result.append(\"\\\\.\");\n    }\n else     if (character == '\\\\') {\n      result.append(\"\\\\\\\\\");\n    }\n else     if (character == '?') {\n      result.append(\"\\\\?\");\n    }\n else     if (character == '*') {\n      result.append(\"\\\\*\");\n    }\n else     if (character == '+') {\n      result.append(\"\\\\+\");\n    }\n else     if (character == '&') {\n      result.append(\"\\\\&\");\n    }\n else     if (character == ':') {\n      result.append(\"\\\\:\");\n    }\n else     if (character == '{') {\n      result.append(\"\\\\{\");\n    }\n else     if (character == '}') {\n      result.append(\"\\\\}\");\n    }\n else     if (character == '[') {\n      result.append(\"\\\\[\");\n    }\n else     if (character == ']') {\n      result.append(\"\\\\]\");\n    }\n else     if (character == '(') {\n      result.append(\"\\\\(\");\n    }\n else     if (character == ')') {\n      result.append(\"\\\\)\");\n    }\n else     if (character == '^') {\n      result.append(\"\\\\^\");\n    }\n else     if (character == '$') {\n      result.append(\"\\\\$\");\n    }\n else     if (character == '|') {\n      result.append(\"\\\\|\");\n    }\n else {\n      result.append(character);\n    }\n    character=iterator.next();\n  }\n  return result.toString();\n}"}
{"ids": "28399", "raw_code": "protected void drawValueLabel(DrawingContext context,Slice slice,double radius,Row row,int rowIndex){\n  Comparable<?> value=slice.end - slice.start;\n  Format format=getValueFormat();\n  if ((format == null) && (value instanceof Number)) {\n    format=NumberFormat.getInstance();\n  }\n  String text=(format != null) ? format.format(value) : value.toString();\n  ColorMapper colors=getValueColor();\n  Paint paint=colors.get(rowIndex);\n  Font font=getValueFont();\n  double fontSize=font.getSize2D();\n  Location location=getValueLocation();\n  double alignX=getValueAlignmentX();\n  double alignY=getValueAlignmentY();\n  double rotation=getValueRotation();\n  double distance=getValueDistance();\n  if (MathUtils.isCalculatable(distance)) {\n    distance*=fontSize;\n  }\n else {\n    distance=0.0;\n  }\n  double radiusRelOuter=getOuterRadius();\n  double radiusRelInner=getInnerRadius();\n  double radiusOuter=radius * radiusRelOuter;\n  double radiusInner=radius * radiusRelInner;\n  double distanceV=distance;\n  double labelPosV;\n  if (location == Location.NORTH) {\n    labelPosV=radiusOuter + distanceV;\n  }\n else   if (location == Location.SOUTH) {\n    labelPosV=Math.max(radiusInner - distanceV,0);\n  }\n else {\n    double sliceHeight=radiusOuter - radiusInner;\n    if (2.0 * distance >= sliceHeight) {\n      alignY=0.5;\n      distanceV=0.0;\n    }\n    labelPosV=radiusInner + distanceV + alignY * (sliceHeight - 2.0 * distanceV);\n  }\n  double sum=plot.getSum(row.getSource());\n  if (sum == 0.0) {\n    return;\n  }\n  double sliceStartRel=slice.start / sum;\n  double sliceEndRel=slice.end / sum;\n  double circumference=2.0 * labelPosV * Math.PI;\n  double distanceRelH=distance / circumference;\n  double sliceWidthRel=sliceEndRel - sliceStartRel;\n  if (2.0 * distanceRelH >= sliceWidthRel) {\n    alignX=0.5;\n    distanceRelH=0.0;\n  }\n  double labelPosRelH=sliceStartRel + distanceRelH + alignX * (sliceWidthRel - 2.0 * distanceRelH);\n  double start=plot.getStart();\n  double angleStart=Math.toRadians(-start);\n  double direction=1.0;\n  if (!plot.isClockwise()) {\n    direction=-1.0;\n  }\n  double angle=angleStart + direction * labelPosRelH * 2.0* Math.PI;\n  double dirX=Math.cos(angle);\n  double dirY=Math.sin(angle);\n  Label label=new Label(text);\n  label.setAlignmentX(1.0 - 0.5 * dirX - 0.5);\n  label.setAlignmentY(0.5 * dirY + 0.5);\n  label.setRotation(rotation);\n  label.setColor(paint);\n  label.setFont(font);\n  Dimension2D sizeLabel=label.getPreferredSize();\n  double anchorX=0.5;\n  double anchorY=0.5;\n  if (location == Location.NORTH || location == Location.SOUTH) {\n    anchorX=dirX * sizeLabel.getWidth() / 2.0;\n    anchorY=dirY * sizeLabel.getHeight() / 2.0;\n    if (location == Location.SOUTH) {\n      anchorX=-anchorX;\n      anchorY=-anchorY;\n    }\n  }\n  double x=labelPosV * dirX + anchorX - sizeLabel.getWidth() / 2.0;\n  double y=labelPosV * dirY + anchorY - sizeLabel.getHeight() / 2.0;\n  double w=sizeLabel.getWidth();\n  double h=sizeLabel.getHeight();\n  label.setBounds(x,y,w,h);\n  label.draw(context);\n}"}
{"ids": "8232", "raw_code": "public static void downto(Float self,Number to,@ClosureParams(FirstParam.class) Closure closure){\n  float to1=to.floatValue();\n  if (self >= to1) {\n    for (float i=self; i >= to1; i--) {\n      closure.call(i);\n    }\n  }\n else   throw new GroovyRuntimeException(\"The argument (\" + to + \") to downto() cannot be greater than the value (\"+ self+ \") it's called on.\");\n}"}
{"ids": "71880", "raw_code": "public static AttributeDescription objectClass(){\n  return OBJECT_CLASS;\n}"}
{"ids": "74228", "raw_code": "public void addKeyValueComment(String keyName,String value){\n  int keyIndex;\n  if ((keyIndex=findKeyCommentIndex(keyName)) < 0) {\n    keyValComments.add(\"! \" + keyName + \": \"+ value+ \"\\n\");\n    return;\n  }\n  log.warn(\"Key \" + keyName + \" already exists in key/value set.  Overriding previous value!\");\n  keyValComments.set(keyIndex,\"! \" + keyName + \": \"+ value+ \"\\n\");\n}"}
{"ids": "2990", "raw_code": "private String isInputChecked(String dataSet,String value){\n  if (dataSet != null && dataSet.equals(value)) {\n    return \" checked\";\n  }\n  return \"\";\n}"}
{"ids": "58052", "raw_code": "public final void popSubContextList(){\n  m_axesIteratorStack.pop();\n}"}
{"ids": "22515", "raw_code": "private DriverTask createDriverTask(String taskType){\n  String taskID=String.format(\"%s+%s+%s\",HP3PARConstants.DRIVER_NAME,taskType,UUID.randomUUID());\n  DriverTask task=new HP3PARDriverTask(taskID);\n  return task;\n}"}
{"ids": "6295", "raw_code": "public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {\n  String str=data == null ? null : data.toString();\n  writeStringToFile(file,str,encoding,append);\n}"}
{"ids": "74216", "raw_code": "public void store(Element cat,List<String> trees){\n  CatalogTreeManager manager=InstanceManager.getDefault(jmri.CatalogTreeManager.class);\n  cat.setAttribute(\"class\",\"jmri.jmrit.catalog.DefaultCatalogTreeManagerConfigXML\");\n  Iterator<String> iter=trees.iterator();\n  while (iter.hasNext()) {\n    String sname=iter.next();\n    if (sname == null) {\n      log.error(\"System name null during store\");\n      continue;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"system name is \" + sname);\n    }\n    if (sname.charAt(1) != CatalogTree.XML) {\n      continue;\n    }\n    CatalogTree ct=manager.getBySystemName(sname);\n    Element elem=new Element(\"catalogTree\");\n    elem.setAttribute(\"systemName\",sname);\n    String uname=ct.getUserName();\n    if (uname != null) {\n      elem.setAttribute(\"userName\",uname);\n    }\n    storeNode(elem,ct.getRoot());\n    if (log.isDebugEnabled()) {\n      log.debug(\"store CatalogTree \" + sname);\n    }\n    cat.addContent(elem);\n  }\n}"}
{"ids": "40694", "raw_code": "public boolean isEnabled(){\n  return enabled;\n}"}
{"ids": "62779", "raw_code": "public static boolean loadTexture(int glId,int file){\n  InputStream is=Resource.getResInputStream(file);\n  Bitmap bitmap=null;\n  try {\n    BitmapFactory.Options opts=new BitmapFactory.Options();\n    opts.inScaled=false;\n    bitmap=BitmapFactory.decodeStream(is,null,opts);\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Could not read texture file \" + file,e);\n    return false;\n  }\n finally {\n    try {\n      is.close();\n    }\n catch (    Exception e) {\n      Log.e(TAG,\"Error closing stream\",e);\n    }\n  }\n  return loadTexture(glId,bitmap);\n}"}
{"ids": "80074", "raw_code": "public static int roll1D100(){\n  return rand.nextInt(100) + 1;\n}"}
{"ids": "61759", "raw_code": "public ZipfianGenerator(long min,long max,double _zipfianconstant,double _zetan){\n  items=max - min + 1;\n  base=min;\n  zipfianconstant=_zipfianconstant;\n  theta=zipfianconstant;\n  zeta2theta=zeta(2,theta);\n  alpha=1.0 / (1.0 - theta);\n  zetan=_zetan;\n  countforzeta=items;\n  eta=(1 - Math.pow(2.0 / items,1 - theta)) / (1 - zeta2theta / zetan);\n  nextInt();\n}"}
{"ids": "40921", "raw_code": "public void removeRole(RoleEntity role){\n  roles.remove(role);\n}"}
{"ids": "17637", "raw_code": "final boolean transferAfterCancelledWait(Node node){\n  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {\n    enq(node);\n    return true;\n  }\n  while (!isOnSyncQueue(node))   Thread.yield();\n  return false;\n}"}
{"ids": "34390", "raw_code": "private Map processEvent(MatchResult result){\n  Map map=new HashMap();\n  for (int i=1; i < result.groupCount() + 1; i++) {\n    Object key=matchingKeywords.get(i - 1);\n    Object value=result.group(i);\n    map.put(key,value);\n  }\n  return map;\n}"}
{"ids": "732", "raw_code": "public void addExtension(String ext){\n  exts.add(ext.toLowerCase());\n}"}
{"ids": "42996", "raw_code": "private void displaySimple(PrintStream output){\n  output.println(\"First-Order Effects\");\n  for (int j=0; j < P; j++) {\n    double[] a0=new double[N];\n    double[] a1=new double[N];\n    double[] a2=new double[N];\n    for (int i=0; i < N; i++) {\n      a0[i]=A[i];\n      a1[i]=C_A[i][j];\n      a2[i]=B[i];\n    }\n    double value=computeFirstOrder(a0,a1,a2,N);\n    output.print(value < 0 ? 0.0 : value);\n    if (j < P - 1) {\n      output.print('\\t');\n    }\n  }\n  output.println();\n  output.println(\"Total-Order Effects\");\n  for (int j=0; j < P; j++) {\n    double[] a0=new double[N];\n    double[] a1=new double[N];\n    double[] a2=new double[N];\n    for (int i=0; i < N; i++) {\n      a0[i]=A[i];\n      a1[i]=C_A[i][j];\n      a2[i]=B[i];\n    }\n    double value=computeTotalOrder(a0,a1,a2,N);\n    output.print(value < 0 ? 0.0 : value);\n    if (j < P - 1) {\n      output.print('\\t');\n    }\n  }\n  output.println();\n}"}
{"ids": "46867", "raw_code": "public boolean equals(Object o){\n  if (o == this)   return true;\n  if (!(o instanceof MBeanAttributeInfo))   return false;\n  MBeanAttributeInfo p=(MBeanAttributeInfo)o;\n  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getType(),getType()) && Objects.equals(p.getDescription(),getDescription())&& Objects.equals(p.getDescriptor(),getDescriptor())&& p.isReadable() == isReadable() && p.isWritable() == isWritable() && p.isIs() == isIs());\n}"}
{"ids": "11039", "raw_code": "protected boolean handleDirectory(File directory,String[] contentNames) throws SecurityException {\n  boolean continueWandering=true;\n  for (  String child : contentNames) {\n    boolean keepGoing=handleEntry(new File(directory.getAbsolutePath() + File.separator,child));\n    if (!keepGoing) {\n      continueWandering=exhaustiveSearch;\n      if (!continueWandering) {\n        break;\n      }\n    }\n  }\n  return continueWandering;\n}"}
{"ids": "31458", "raw_code": "int size(){\n  return Integer.bitCount(set);\n}"}
{"ids": "2828", "raw_code": "public boolean hasNext(){\n  return iterator.hasNext();\n}"}
{"ids": "41206", "raw_code": "public static String formatNumber(final long number){\n  long divided=number;\n  final StringBuffer sb=new StringBuffer();\n  while (divided > 1000) {\n    long rest=divided % 1000;\n    sb.insert(0,\" \" + String.format(\"%03d\",rest));\n    divided=divided / 1000;\n  }\n  long rest=divided % 1000;\n  sb.insert(0,rest);\n  return sb.toString();\n}"}
{"ids": "67541", "raw_code": "private boolean isSubsumed(String selector,Iterable<String> others){\n  for (  String other : others) {\n    if (subsumes(other,selector)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "55718", "raw_code": "private void displayValues(){\n  log(\"cup2 task - attribute settings: \\n ========================\",Project.MSG_INFO);\n  log(\"spec..........: \" + this.spec);\n  log(\"- source......: \" + getSpecAbsolutePath());\n  log(\"- serialized..: \" + getSerializedSpecAbsolutePath());\n  log(\"specdir.......: \" + this.specdir);\n  log(\"cup2srcdir....: \" + this.cup2srcdir);\n  log(\"classpath.....: \" + this.classpath);\n  log(\"algorithm.....: \" + this.algorithm);\n  log(\"verbose.......: \" + this.verbose);\n  log(\"parsetable....: \" + this.parsetable);\n  log(\" ========================\");\n}"}
{"ids": "55567", "raw_code": "private boolean checkTouchingMinTarget(int index,MotionEvent event){\n  if (isTouchingMinTarget(index,event)) {\n    lastTouchedMin=true;\n    isTouchingMinTarget.add(event.getPointerId(index));\n    if (!minAnimator.isRunning()) {\n      minAnimator=getMinTargetAnimator(true);\n      minAnimator.start();\n    }\n    return true;\n  }\n  return false;\n}"}
{"ids": "6453", "raw_code": "public boolean isCanceled(){\n  if (pane == null)   return false;\n  Object v=pane.getValue();\n  return ((v != null) && (cancelOption.length == 1) && (v.equals(cancelOption[0])));\n}"}
{"ids": "42227", "raw_code": "public int availableProcessors(){\n  return RVMThread.availableProcessors;\n}"}
{"ids": "1309", "raw_code": "public void updateDebug(Boolean debug,Boolean database,Boolean exception,Boolean tracing,Boolean dump,Boolean timer,Boolean implicitAccess,Boolean queryUsage) throws SecurityException {\n  checkWriteAccess();\n  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_DEBUGGING);\n  if (!hasAccess)   throw new SecurityException(\"no access to change debugging settings\");\n  Element debugging=_getRootElement(\"debugging\");\n  if (debug != null)   debugging.setAttribute(\"debug\",Caster.toString(debug.booleanValue()));\n else   debugging.removeAttribute(\"debug\");\n  if (database != null)   debugging.setAttribute(\"database\",Caster.toString(database.booleanValue()));\n else   debugging.removeAttribute(\"database\");\n  if (exception != null)   debugging.setAttribute(\"exception\",Caster.toString(exception.booleanValue()));\n else   debugging.removeAttribute(\"exception\");\n  if (tracing != null)   debugging.setAttribute(\"tracing\",Caster.toString(tracing.booleanValue()));\n else   debugging.removeAttribute(\"tracing\");\n  if (dump != null)   debugging.setAttribute(\"dump\",Caster.toString(dump.booleanValue()));\n else   debugging.removeAttribute(\"dump\");\n  if (timer != null)   debugging.setAttribute(\"timer\",Caster.toString(timer.booleanValue()));\n else   debugging.removeAttribute(\"timer\");\n  if (implicitAccess != null)   debugging.setAttribute(\"implicit-access\",Caster.toString(implicitAccess.booleanValue()));\n else   debugging.removeAttribute(\"implicit-access\");\n  if (queryUsage != null)   debugging.setAttribute(\"query-usage\",Caster.toString(queryUsage.booleanValue()));\n else   debugging.removeAttribute(\"query-usage\");\n}"}
{"ids": "866", "raw_code": "public final static void debug(String s){\n  if (DEBUG)   debug.println(\"// Debug: \" + s);\n}"}
{"ids": "54660", "raw_code": "public static final void writeLongArrayXml(long[] val,String name,XmlSerializer out) throws XmlPullParserException, IOException {\n  if (val == null) {\n    out.startTag(null,\"null\");\n    out.endTag(null,\"null\");\n    return;\n  }\n  out.startTag(null,\"long-array\");\n  if (name != null) {\n    out.attribute(null,\"name\",name);\n  }\n  final int N=val.length;\n  out.attribute(null,\"num\",Integer.toString(N));\n  for (int i=0; i < N; i++) {\n    out.startTag(null,\"item\");\n    out.attribute(null,\"value\",Long.toString(val[i]));\n    out.endTag(null,\"item\");\n  }\n  out.endTag(null,\"long-array\");\n}"}
{"ids": "79500", "raw_code": "public static <T extends GenericEntity>List<T> filterByOr(List<T> values,List<? extends EntityCondition> exprs){\n  if (values == null)   return null;\n  if (UtilValidate.isEmpty(exprs)) {\n    return values;\n  }\n  List<T> result=new LinkedList<T>();\n  for (  T value : values) {\n    boolean include=false;\n    for (    EntityCondition condition : exprs) {\n      include=condition.entityMatches(value);\n      if (include)       break;\n    }\n    if (include) {\n      result.add(value);\n    }\n  }\n  return result;\n}"}
{"ids": "68984", "raw_code": "@Override public RES next(REQ req){\n  writeTraceLog(req,middlewareName);\n  if (predicate.test(req)) {\n    RES res=middleware.handle(req,next);\n    writeTraceLog(res,middlewareName);\n    return res;\n  }\n else   if (next != null) {\n    RES res=(RES)next.next(req);\n    writeTraceLog(res,middlewareName);\n    return res;\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "67876", "raw_code": "protected void read(long offset,byte[] b) throws IOException {\n  rafile.seek(offset);\n  if (rafile.read(b) != b.length) {\n    throw new IOException(\"Not enough bytes available in file \" + getPath());\n  }\n}"}
{"ids": "48845", "raw_code": "public void run(){\n  final FetcherInfo info=FetcherInfo.getFetcherInfo();\n  try {\n    fetchloop();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\nsynchronized (info.waitList) {\n      Thread me=Thread.currentThread();\n      for (int i=0; i < info.fetchers.length; i++) {\n        if (info.fetchers[i] == me) {\n          info.fetchers[i]=null;\n          info.numFetchers--;\n        }\n      }\n    }\n  }\n}"}
{"ids": "54293", "raw_code": "public CtClass makeAnnotation(String name) throws RuntimeException {\n  try {\n    CtClass cc=makeInterface(name,get(\"java.lang.annotation.Annotation\"));\n    cc.setModifiers(cc.getModifiers() | Modifier.ANNOTATION);\n    return cc;\n  }\n catch (  NotFoundException e) {\n    throw new RuntimeException(e.getMessage(),e);\n  }\n}"}
{"ids": "42956", "raw_code": "public void add(Node node){\n  availableNodes.add(node);\n}"}
{"ids": "48579", "raw_code": "public void write(OutputStream out) throws IOException {\n  DataOutputStream dataOut=new DataOutputStream(out);\n  dataOut.writeShort(pool.size() + 1);\n  for (  Entry e : pool) {\n    e.write(dataOut);\n  }\n}"}
{"ids": "3149", "raw_code": "protected ForeignKeyConstraint buildForeignKeyConstraint(List<String> fkFieldNames,List<String> pkFieldNames,TableDefinition targetTable,DatabasePlatform platform){\n  assert fkFieldNames.size() > 0 && fkFieldNames.size() == pkFieldNames.size();\n  ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint();\n  for (int i=0; i < fkFieldNames.size(); i++) {\n    fkConstraint.getSourceFields().add(fkFieldNames.get(i));\n    fkConstraint.getTargetFields().add(pkFieldNames.get(i));\n  }\n  fkConstraint.setTargetTable(targetTable.getFullName());\n  String fkFieldName=fkFieldNames.get(0);\n  String name=buildForeignKeyConstraintName(this.getName(),fkFieldName,platform.getMaxForeignKeyNameSize(),platform);\n  fkConstraint.setName(name);\n  return fkConstraint;\n}"}
{"ids": "51128", "raw_code": "public static boolean isRewritableBatch(String queryString,boolean noBackslashEscapes){\n  LexState state=LexState.Normal;\n  char lastChar='\\0';\n  boolean singleQuotes=false;\n  boolean endingSemicolon=false;\n  char[] query=queryString.toCharArray();\n  int queryLength=query.length;\n  for (int i=0; i < queryLength; i++) {\n    if (state == LexState.Escape)     state=LexState.String;\n    char car=query[i];\nswitch (car) {\ncase '*':\n      if (state == LexState.Normal && lastChar == '/')       state=LexState.SlashStarComment;\n    break;\ncase '/':\n  if (state == LexState.SlashStarComment && lastChar == '*') {\n    state=LexState.Normal;\n  }\n else   if (state == LexState.Normal && lastChar == '/') {\n    state=LexState.EOLComment;\n  }\nbreak;\ncase '#':\nif (state == LexState.Normal) state=LexState.EOLComment;\nbreak;\ncase '-':\nif (state == LexState.Normal && lastChar == '-') {\nstate=LexState.EOLComment;\n}\nbreak;\ncase ';':\nif (state == LexState.Normal) {\nendingSemicolon=true;\n}\nbreak;\ncase '\\n':\nif (state == LexState.EOLComment) {\nstate=LexState.Normal;\n}\nbreak;\ncase '\"':\nif (state == LexState.Normal) {\nstate=LexState.String;\nsingleQuotes=false;\n}\n else if (state == LexState.String && !singleQuotes) {\nstate=LexState.Normal;\n}\nbreak;\ncase '\\'':\nif (state == LexState.Normal) {\nstate=LexState.String;\nsingleQuotes=true;\n}\n else if (state == LexState.String && singleQuotes) {\nstate=LexState.Normal;\n}\nbreak;\ncase '\\\\':\nif (noBackslashEscapes) {\nbreak;\n}\nif (state == LexState.String) state=LexState.Escape;\nbreak;\ncase '`':\nif (state == LexState.Backtick) {\nstate=LexState.Normal;\n}\n else if (state == LexState.Normal) {\nstate=LexState.Backtick;\n}\nbreak;\ndefault :\nif (state == LexState.Normal && endingSemicolon && ((byte)car >= 40)) {\nendingSemicolon=false;\n}\nbreak;\n}\nlastChar=car;\n}\nreturn state != LexState.EOLComment && !endingSemicolon;\n}"}
{"ids": "3589", "raw_code": "public ServerBuilder(Config config){\n  Objects.requireNonNull(config);\n  _config=config;\n}"}
{"ids": "71981", "raw_code": "private static LDAPFilter createSubstringFilter(SubstringFilter sf) throws LDAPException, IOException {\n  List<Object> anyo=sf.getAny();\n  ArrayList<ByteString> subAnyElements=new ArrayList<>(anyo.size());\n  for (  Object o : anyo) {\n    subAnyElements.add(ByteStringUtility.convertValue(o));\n  }\n  if (sf.getInitial() == null && subAnyElements.isEmpty() && sf.getFinal() == null) {\n    LocalizableMessage message=ERR_LDAP_FILTER_DECODE_NULL.get();\n    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);\n  }\n  return LDAPFilter.createSubstringFilter(sf.getName(),sf.getInitial() == null ? null : ByteStringUtility.convertValue(sf.getInitial()),subAnyElements,sf.getFinal() == null ? null : ByteStringUtility.convertValue(sf.getFinal()));\n}"}
{"ids": "23408", "raw_code": "@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){\n  if (readySent) {\n    setScaleAndCenter(getScale(),getCenter());\n  }\n}"}
{"ids": "25074", "raw_code": "protected void disown(AbstractNode child) throws IllegalStateException {\n  ensureParentage(child);\n  child.parent=null;\n}"}
{"ids": "55049", "raw_code": "public String qName2String(QName qName,boolean writeNS){\n  String prefix=null;\n  String namespaceURI=qName.getNamespace();\n  String localPart=qName.getLocalPart();\n  if (localPart != null && localPart.length() > 0) {\n    int index=localPart.indexOf(':');\n    if (index != -1) {\n      prefix=localPart.substring(0,index);\n      if (prefix.length() > 0 && !prefix.equals(\"urn\")) {\n        registerPrefixForURI(prefix,namespaceURI);\n        localPart=localPart.substring(index + 1);\n      }\n else {\n        prefix=null;\n      }\n    }\n    localPart=getLastLocalPart(localPart);\n  }\n  if (namespaceURI.length() == 0) {\n    if (writeNS) {\n      String defaultNS=nsStack.getNamespaceURI(\"\");\n      if (defaultNS != null && defaultNS.length() > 0) {\n        registerPrefixForURI(\"\",\"\");\n      }\n    }\n  }\n else {\n    prefix=getPrefixForURI(namespaceURI,qName.getPreferredPrefix());\n  }\n  if ((prefix == null) || (prefix.length() == 0))   return localPart;\n  return prefix + ':' + localPart;\n}"}
{"ids": "12265", "raw_code": "public JSONException(Throwable cause){\n  super(cause.getMessage());\n  this.cause=cause;\n}"}
{"ids": "68037", "raw_code": "@Override public void close() throws XMLStreamException {\n  log.log(Level.FINE,\"close()\");\n  stream.close();\n}"}
{"ids": "74838", "raw_code": "@Override public String readLine() throws IOException {\n  if (this.pointer >= this.data.length - 1) {\n    return null;\n  }\n else {\n    final StringBuilder buf=new StringBuilder();\n    int c;\n    while ((c=read()) >= 0) {\n      if ((c == 10) || (c == 13)) {\n        if (((peek() == 10) || (peek() == 13)) && (peek() != c)) {\n          read();\n        }\n        break;\n      }\n      buf.append((char)c);\n    }\n    return buf.toString();\n  }\n}"}
{"ids": "15048", "raw_code": "protected static Map attrSetToMap(AttrSet attrSet,boolean fetchByteValues){\n  Map attributesMap=new AMHashMap(fetchByteValues);\n  if (attrSet == null) {\n    return attributesMap;\n  }\n  int attrSetSize=attrSet.size();\n  if (!fetchByteValues) {\n    for (int i=0; i < attrSetSize; i++) {\n      Attr attr=attrSet.elementAt(i);\n      String values[]=attr.getStringValues();\n      attributesMap.put(attr.getName(),stringArrayToSet(values));\n    }\n  }\n else {\n    for (int i=0; i < attrSetSize; i++) {\n      Attr attr=attrSet.elementAt(i);\n      attributesMap.put(attr.getName(),attr.getByteValues());\n    }\n  }\n  return attributesMap;\n}"}
{"ids": "67796", "raw_code": "public <E>E parseResponseData(GDataRequest req,Class<E> resultType) throws IOException, ServiceException {\n  InputProperties inputProperties=new ClientInputProperties(req,resultType);\n  return parseResponseData(req.getParseSource(),inputProperties,resultType);\n}"}
{"ids": "23249", "raw_code": "public void addRtpStreamListener(RtpStreamListener rtpStreamListener){\n  mRtpStreamListener=rtpStreamListener;\n}"}
{"ids": "2697", "raw_code": "public synchronized byte[] toByteArray(){\n  int remaining=count;\n  if (remaining == 0) {\n    return EMPTY_BYTE_ARRAY;\n  }\n  byte[] newbuf=new byte[remaining];\n  int pos=0;\n  for (  byte[] buf : buffers) {\n    int c=Math.min(buf.length,remaining);\n    System.arraycopy(buf,0,newbuf,pos,c);\n    pos+=c;\n    remaining-=c;\n    if (remaining == 0) {\n      break;\n    }\n  }\n  return newbuf;\n}"}
{"ids": "22452", "raw_code": "public void addVolumesToConsistencyGroup(String cgName,List<String> virtualVolumeNames) throws VPlexApiException {\n  s_logger.info(\"Request to add volumes to a consistency group on VPlex at {}\",_baseURI);\n  _cgMgr.addVolumesToConsistencyGroup(cgName,virtualVolumeNames);\n}"}
{"ids": "65012", "raw_code": "public static void dumpCursor(ICursor cursor,int maxColumnWidth){\n  StringBuilder builder=new StringBuilder(\"\\n\");\n  dumpCursor(cursor,maxColumnWidth,builder);\n  Logger.d(Logger.LOG_TAG,builder.toString());\n}"}
{"ids": "78139", "raw_code": "static int computeValidLevels(long bitPattern){\n  return Long.bitCount(bitPattern);\n}"}
{"ids": "43518", "raw_code": "public static void runUnderLock(ReentrantLock lock,Runnable runnable){\n  lock.lock();\n  try {\n    runnable.run();\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "16095", "raw_code": "private static boolean dateByMonth(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO){\n  boolean reducedPrec=false;\n  if (fields.remove(DateTimeFieldType.year())) {\n    bld.append(yearElement());\n    if (fields.remove(DateTimeFieldType.monthOfYear())) {\n      if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n        appendSeparator(bld,extended);\n        bld.appendMonthOfYear(2);\n        appendSeparator(bld,extended);\n        bld.appendDayOfMonth(2);\n      }\n else {\n        bld.appendLiteral('-');\n        bld.appendMonthOfYear(2);\n        reducedPrec=true;\n      }\n    }\n else {\n      if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n        checkNotStrictISO(fields,strictISO);\n        bld.appendLiteral('-');\n        bld.appendLiteral('-');\n        bld.appendDayOfMonth(2);\n      }\n else {\n        reducedPrec=true;\n      }\n    }\n  }\n else   if (fields.remove(DateTimeFieldType.monthOfYear())) {\n    bld.appendLiteral('-');\n    bld.appendLiteral('-');\n    bld.appendMonthOfYear(2);\n    if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n      appendSeparator(bld,extended);\n      bld.appendDayOfMonth(2);\n    }\n else {\n      reducedPrec=true;\n    }\n  }\n else   if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n    bld.appendLiteral('-');\n    bld.appendLiteral('-');\n    bld.appendLiteral('-');\n    bld.appendDayOfMonth(2);\n  }\n  return reducedPrec;\n}"}
{"ids": "5413", "raw_code": "@Override public int insert(String elem){\n  int firstIndex=(int)(elem.charAt(0) - 'a');\n  int lastIndex=(int)(elem.charAt(elem.length() - 2) - 'a');\n  storage[firstIndex * 26 + lastIndex]=elem;\n  return 1;\n}"}
{"ids": "70312", "raw_code": "public void clearMovementData(){\n  pathSprites=new ArrayList<StepSprite>();\n  movementTarget=null;\n  checkFoVHexImageCacheClear();\n  repaint();\n  refreshMoveVectors();\n}"}
{"ids": "27806", "raw_code": "public void threadRecordFailure(Throwable t){\n  threadFailure.compareAndSet(null,t);\n}"}
{"ids": "69969", "raw_code": "protected Boolean replayCompletion(Participant participant) throws IllegalStateException {\n  if (!replayStack_.contains(participant)) {\n    replayStack_.push(participant);\n  }\n  return committed_;\n}"}
{"ids": "27509", "raw_code": "public void shutdownNow(){\n  shutdown=true;\n  final Future<?> f=engineFuture.get();\n  if (f != null) {\n    if (log.isInfoEnabled())     log.info(\"Cancelling engineFuture: \" + this);\n    f.cancel(true);\n  }\n  final ExecutorService s=engineService.get();\n  if (s != null) {\n    if (log.isInfoEnabled())     log.info(\"Terminating engineService: \" + this);\n    s.shutdownNow();\n  }\n  final HttpClient cm=clientConnectionManagerRef.get();\n  if (cm != null) {\n    if (log.isInfoEnabled())     log.info(\"Terminating HttpClient: \" + this);\n    try {\n      cm.stop();\n    }\n catch (    Exception e) {\n      log.error(\"Problem stopping HttpClient\",e);\n    }\n  }\n  for (  AbstractRunningQuery q : runningQueries.values()) {\n    q.cancel(true);\n  }\n  priorityQueue.clear();\n  deadlineQueue.clear();\n  engineFuture.set(null);\n  engineService.set(null);\n  clientConnectionManagerRef.set(null);\n}"}
{"ids": "19923", "raw_code": "static public void addNotificationListener(JMXConnector jmxConnector,Class<?> mbeanClass,NotificationListener notificationListener) throws InstanceNotFoundException, Exception {\n  MBeanServerConnection mbsc=jmxConnector.getMBeanServerConnection();\n  ObjectName objectName=generateMBeanObjectName(mbeanClass);\n  mbsc.addNotificationListener(objectName,notificationListener,null,null);\n}"}
{"ids": "39114", "raw_code": "protected String toHTML(String s){\n  String result;\n  result=s;\n  result=result.replaceAll(\"&\",\"&amp;\");\n  result=result.replaceAll(\"<\",\"&lt;\");\n  result=result.replaceAll(\">\",\"&gt;\");\n  result=result.replaceAll(\"@\",\"&#64;\");\n  result=result.replaceAll(\"\\n\",\"<br/>\\n\");\n  return result;\n}"}
{"ids": "65089", "raw_code": "protected void normalizeScores(){\n  double hub_ssum=0;\n  double auth_ssum=0;\n  for (  V v : graph.getVertices()) {\n    double hub_val=getOutputValue(v).hub;\n    double auth_val=getOutputValue(v).authority;\n    hub_ssum+=(hub_val * hub_val);\n    auth_ssum+=(auth_val * auth_val);\n  }\n  hub_ssum=Math.sqrt(hub_ssum);\n  auth_ssum=Math.sqrt(auth_ssum);\n  for (  V v : graph.getVertices()) {\n    HITS.Scores values=getOutputValue(v);\n    setOutputValue(v,new HITS.Scores(values.hub / hub_ssum,values.authority / auth_ssum));\n  }\n}"}
{"ids": "44652", "raw_code": "public static int absoluteMax(int[] intArray){\n  int max=Integer.MIN_VALUE;\n  for (int i=0; i < intArray.length; i++) {\n    if (Math.abs(intArray[i]) > max && intArray[i] != 0) {\n      max=intArray[i];\n    }\n  }\n  return max == Integer.MIN_VALUE ? 0 : max;\n}"}
{"ids": "17645", "raw_code": "private boolean doAcquireNanos(long arg,long nanosTimeout) throws InterruptedException {\n  if (nanosTimeout <= 0L)   return false;\n  final long deadline=System.nanoTime() + nanosTimeout;\n  final Node node=addWaiter(Node.EXCLUSIVE);\n  boolean failed=true;\n  try {\n    for (; ; ) {\n      final Node p=node.predecessor();\n      if (p == head && tryAcquire(arg)) {\n        setHead(node);\n        p.next=null;\n        failed=false;\n        return true;\n      }\n      nanosTimeout=deadline - System.nanoTime();\n      if (nanosTimeout <= 0L)       return false;\n      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);\n      if (Thread.interrupted())       throw new InterruptedException();\n    }\n  }\n  finally {\n    if (failed)     cancelAcquire(node);\n  }\n}"}
{"ids": "43590", "raw_code": "boolean hasMinFeatureCount(String feature){\n  if (minFeatureCount == 0)   return true;\n  Set<Integer> ids=clippedFeatureIndex.get(feature);\n  if (ids == null)   return false;\n  return ids.size() >= minFeatureCount;\n}"}
{"ids": "37700", "raw_code": "void mutate(){\n  do {\n    int iBit;\n    do {\n      iBit=m_random.nextInt(m_nNodes * m_nNodes);\n    }\n while (isSquare(iBit));\n    m_bits[iBit]=!m_bits[iBit];\n  }\n while (hasCycles());\n  calcScore();\n}"}
{"ids": "47128", "raw_code": "public void put(E e) throws InterruptedException {\n  checkNotNull(e);\n  final ReentrantLock lock=this.lock;\n  lock.lockInterruptibly();\n  try {\n    while (count == items.length)     notFull.await();\n    enqueue(e);\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "15733", "raw_code": "private void deleteComments(SpanManager sm){\n  int start=0;\n  while ((start=sm.indexOf(\"<!--\",start)) != -1) {\n    int end=sm.indexOf(\"-->\",start + 4) + 3;\n    if (end == -1 + 3) {\n      end=sm.length();\n    }\n    try {\n      if (lineSeparator.equals(sm.substring(start - lineSeparator.length(),start)) && lineSeparator.equals(sm.substring(end,end + lineSeparator.length()))) {\n        end+=lineSeparator.length();\n      }\n    }\n catch (    IndexOutOfBoundsException e) {\n    }\n    sm.delete(start,end);\n  }\n}"}
{"ids": "47538", "raw_code": "DateTimeParseContext(DateTimeFormatter formatter){\n  super();\n  this.formatter=formatter;\n  parsed.add(new Parsed());\n}"}
{"ids": "72337", "raw_code": "public static boolean isNetworkTypeCellular(String networkType){\n  return networkType.equals(\"MOBILE\");\n}"}
{"ids": "82809", "raw_code": "private void defineInternalFrameCloseButtons(UIDefaults d){\n  String p=\"InternalFrame:InternalFrameTitlePane:\\\"InternalFrameTitlePane.closeButton\\\"\";\n  String c=PAINTER_PREFIX + \"TitlePaneCloseButtonPainter\";\n  d.put(p + \".States\",\"Enabled,MouseOver,Pressed,Disabled,Focused,Selected,WindowNotFocused\");\n  d.put(p + \".WindowNotFocused\",new TitlePaneCloseButtonWindowNotFocusedState());\n  d.put(p + \".contentMargins\",new InsetsUIResource(0,0,0,0));\n  d.put(p + \"[Disabled].backgroundPainter\",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_DISABLED));\n  d.put(p + \"[Enabled].backgroundPainter\",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_ENABLED));\n  d.put(p + \"[MouseOver].backgroundPainter\",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_MOUSEOVER));\n  d.put(p + \"[Pressed].backgroundPainter\",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_PRESSED));\n  d.put(p + \"[Enabled+WindowNotFocused].backgroundPainter\",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_ENABLED_WINDOWNOTFOCUSED));\n  d.put(p + \"[MouseOver+WindowNotFocused].backgroundPainter\",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_MOUSEOVER));\n  d.put(p + \"[Pressed+WindowNotFocused].backgroundPainter\",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_PRESSED_WINDOWNOTFOCUSED));\n  d.put(p + \".icon\",new SeaGlassIcon(p,\"iconPainter\",43,18));\n}"}
{"ids": "21731", "raw_code": "private void modify(StoragePort port,String portNetworkId){\n  port.setPortNetworkId(portNetworkId);\n  dbClient.persistObject(port);\n  modifiedStoragePortsList.add(port);\n}"}
{"ids": "39264", "raw_code": "public boolean is(String word){\n  return m_Words.contains(word.toLowerCase());\n}"}
{"ids": "74791", "raw_code": "public static final String removeMultipleSpacesAndReturns(final String data){\n  final StringBuilder all_data=new StringBuilder(data);\n  int i=1;\n  while (i < all_data.length()) {\n    if (((all_data.charAt(i) == ' ') && (all_data.charAt(i - 1) == ' ')) || ((all_data.charAt(i) == Character.LINE_SEPARATOR) && (all_data.charAt(i - 1) == Character.LINE_SEPARATOR))) {\n      all_data.deleteCharAt(i);\n    }\n else {\n      i++;\n    }\n  }\n  return all_data.toString();\n}"}
{"ids": "17132", "raw_code": "public void removeListener(ConnectableDeviceListener listener){\n  listeners.remove(listener);\n}"}
{"ids": "61655", "raw_code": "protected boolean readAttributes(DataInputStream d,int attributes_count,attribute_info[] ai) throws IOException {\n  attribute_info a=null;\n  int i;\n  int j;\n  long len;\n  String s;\n  for (i=0; i < attributes_count; i++) {\n    j=d.readUnsignedShort();\n    len=d.readInt() & 0xFFFFFFFFL;\n    s=((CONSTANT_Utf8_info)(constant_pool[j])).convert();\n    if (s.compareTo(attribute_info.SourceFile) == 0) {\n      SourceFile_attribute sa=new SourceFile_attribute();\n      sa.sourcefile_index=d.readUnsignedShort();\n      a=(attribute_info)sa;\n    }\n else     if (s.compareTo(attribute_info.ConstantValue) == 0) {\n      ConstantValue_attribute ca=new ConstantValue_attribute();\n      ca.constantvalue_index=d.readUnsignedShort();\n      a=(attribute_info)ca;\n    }\n else     if (s.compareTo(attribute_info.Code) == 0) {\n      Code_attribute ca=new Code_attribute();\n      ca.max_stack=d.readUnsignedShort();\n      ca.max_locals=d.readUnsignedShort();\n      ca.code_length=d.readInt() & 0xFFFFFFFFL;\n      ca.code=new byte[(int)ca.code_length];\n      d.read(ca.code);\n      ca.exception_table_length=d.readUnsignedShort();\n      ca.exception_table=new exception_table_entry[ca.exception_table_length];\n      int k;\n      exception_table_entry e;\n      for (k=0; k < ca.exception_table_length; k++) {\n        e=new exception_table_entry();\n        e.start_pc=d.readUnsignedShort();\n        e.end_pc=d.readUnsignedShort();\n        e.handler_pc=d.readUnsignedShort();\n        e.catch_type=d.readUnsignedShort();\n        ca.exception_table[k]=e;\n      }\n      ca.attributes_count=d.readUnsignedShort();\n      ca.attributes=new attribute_info[ca.attributes_count];\n      readAttributes(d,ca.attributes_count,ca.attributes);\n      a=(attribute_info)ca;\n    }\n else     if (s.compareTo(attribute_info.Exceptions) == 0) {\n      Exception_attribute ea=new Exception_attribute();\n      ea.number_of_exceptions=d.readUnsignedShort();\n      if (ea.number_of_exceptions > 0) {\n        int k;\n        ea.exception_index_table=new int[ea.number_of_exceptions];\n        for (k=0; k < ea.number_of_exceptions; k++)         ea.exception_index_table[k]=d.readUnsignedShort();\n      }\n      a=(attribute_info)ea;\n    }\n else     if (s.compareTo(attribute_info.LineNumberTable) == 0) {\n      LineNumberTable_attribute la=new LineNumberTable_attribute();\n      la.line_number_table_length=d.readUnsignedShort();\n      int k;\n      line_number_table_entry e;\n      la.line_number_table=new line_number_table_entry[la.line_number_table_length];\n      for (k=0; k < la.line_number_table_length; k++) {\n        e=new line_number_table_entry();\n        e.start_pc=d.readUnsignedShort();\n        e.line_number=d.readUnsignedShort();\n        la.line_number_table[k]=e;\n      }\n      a=(attribute_info)la;\n    }\n else     if (s.compareTo(attribute_info.LocalVariableTable) == 0) {\n      LocalVariableTable_attribute la=new LocalVariableTable_attribute();\n      la.local_variable_table_length=d.readUnsignedShort();\n      int k;\n      local_variable_table_entry e;\n      la.local_variable_table=new local_variable_table_entry[la.local_variable_table_length];\n      for (k=0; k < la.local_variable_table_length; k++) {\n        e=new local_variable_table_entry();\n        e.start_pc=d.readUnsignedShort();\n        e.length=d.readUnsignedShort();\n        e.name_index=d.readUnsignedShort();\n        e.descriptor_index=d.readUnsignedShort();\n        e.index=d.readUnsignedShort();\n        la.local_variable_table[k]=e;\n      }\n      a=(attribute_info)la;\n    }\n else     if (s.compareTo(attribute_info.LocalVariableTypeTable) == 0) {\n      LocalVariableTypeTable_attribute la=new LocalVariableTypeTable_attribute();\n      la.local_variable_type_table_length=d.readUnsignedShort();\n      int k;\n      local_variable_type_table_entry e;\n      la.local_variable_type_table=new local_variable_type_table_entry[la.local_variable_type_table_length];\n      for (k=0; k < la.local_variable_type_table_length; k++) {\n        e=new local_variable_type_table_entry();\n        e.start_pc=d.readUnsignedShort();\n        e.length=d.readUnsignedShort();\n        e.name_index=d.readUnsignedShort();\n        e.signature_index=d.readUnsignedShort();\n        e.index=d.readUnsignedShort();\n        la.local_variable_type_table[k]=e;\n      }\n      a=(attribute_info)la;\n    }\n else     if (s.compareTo(attribute_info.Synthetic) == 0) {\n      Synthetic_attribute ia=new Synthetic_attribute();\n      a=(attribute_info)ia;\n    }\n else     if (s.compareTo(attribute_info.Signature) == 0) {\n      Signature_attribute ia=new Signature_attribute();\n      ia.signature_index=d.readUnsignedShort();\n      a=(attribute_info)ia;\n    }\n else     if (s.compareTo(attribute_info.Deprecated) == 0) {\n      Deprecated_attribute da=new Deprecated_attribute();\n      a=(attribute_info)da;\n    }\n else     if (s.compareTo(attribute_info.EnclosingMethod) == 0) {\n      EnclosingMethod_attribute ea=new EnclosingMethod_attribute();\n      ea.class_index=d.readUnsignedShort();\n      ea.method_index=d.readUnsignedShort();\n      a=(attribute_info)ea;\n    }\n else     if (s.compareTo(attribute_info.InnerClasses) == 0) {\n      InnerClasses_attribute ia=new InnerClasses_attribute();\n      ia.inner_classes_length=d.readUnsignedShort();\n      ia.inner_classes=new inner_class_entry[ia.inner_classes_length];\n      for (int k=0; k < ia.inner_classes_length; k++) {\n        inner_class_entry e=new inner_class_entry();\n        e.inner_class_index=d.readUnsignedShort();\n        e.outer_class_index=d.readUnsignedShort();\n        e.name_index=d.readUnsignedShort();\n        e.access_flags=d.readUnsignedShort();\n        ia.inner_classes[k]=e;\n      }\n      a=(attribute_info)ia;\n    }\n else     if (s.compareTo(attribute_info.RuntimeVisibleAnnotations) == 0) {\n      RuntimeVisibleAnnotations_attribute ra=new RuntimeVisibleAnnotations_attribute();\n      ra.number_of_annotations=d.readUnsignedShort();\n      ra.annotations=new annotation[ra.number_of_annotations];\n      for (int k=0; k < ra.number_of_annotations; k++) {\n        annotation annot=new annotation();\n        annot.type_index=d.readUnsignedShort();\n        annot.num_element_value_pairs=d.readUnsignedShort();\n        annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);\n        ra.annotations[k]=annot;\n      }\n      a=(attribute_info)ra;\n    }\n else     if (s.compareTo(attribute_info.RuntimeInvisibleAnnotations) == 0) {\n      RuntimeInvisibleAnnotations_attribute ra=new RuntimeInvisibleAnnotations_attribute();\n      ra.number_of_annotations=d.readUnsignedShort();\n      ra.annotations=new annotation[ra.number_of_annotations];\n      for (int k=0; k < ra.number_of_annotations; k++) {\n        annotation annot=new annotation();\n        annot.type_index=d.readUnsignedShort();\n        annot.num_element_value_pairs=d.readUnsignedShort();\n        annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);\n        ra.annotations[k]=annot;\n      }\n      a=(attribute_info)ra;\n    }\n else     if (s.compareTo(attribute_info.RuntimeVisibleParameterAnnotations) == 0) {\n      RuntimeVisibleParameterAnnotations_attribute ra=new RuntimeVisibleParameterAnnotations_attribute();\n      ra.num_parameters=d.readUnsignedByte();\n      ra.parameter_annotations=new parameter_annotation[ra.num_parameters];\n      for (int x=0; x < ra.num_parameters; x++) {\n        parameter_annotation pAnnot=new parameter_annotation();\n        pAnnot.num_annotations=d.readUnsignedShort();\n        pAnnot.annotations=new annotation[pAnnot.num_annotations];\n        for (int k=0; k < pAnnot.num_annotations; k++) {\n          annotation annot=new annotation();\n          annot.type_index=d.readUnsignedShort();\n          annot.num_element_value_pairs=d.readUnsignedShort();\n          annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);\n          pAnnot.annotations[k]=annot;\n        }\n        ra.parameter_annotations[x]=pAnnot;\n      }\n      a=(attribute_info)ra;\n    }\n else     if (s.compareTo(attribute_info.RuntimeInvisibleParameterAnnotations) == 0) {\n      RuntimeInvisibleParameterAnnotations_attribute ra=new RuntimeInvisibleParameterAnnotations_attribute();\n      ra.num_parameters=d.readUnsignedByte();\n      ra.parameter_annotations=new parameter_annotation[ra.num_parameters];\n      for (int x=0; x < ra.num_parameters; x++) {\n        parameter_annotation pAnnot=new parameter_annotation();\n        pAnnot.num_annotations=d.readUnsignedShort();\n        pAnnot.annotations=new annotation[pAnnot.num_annotations];\n        for (int k=0; k < pAnnot.num_annotations; k++) {\n          annotation annot=new annotation();\n          annot.type_index=d.readUnsignedShort();\n          annot.num_element_value_pairs=d.readUnsignedShort();\n          annot.element_value_pairs=readElementValues(annot.num_element_value_pairs,d,true,0);\n          pAnnot.annotations[k]=annot;\n        }\n        ra.parameter_annotations[x]=pAnnot;\n      }\n      a=(attribute_info)ra;\n    }\n else     if (s.compareTo(attribute_info.AnnotationDefault) == 0) {\n      AnnotationDefault_attribute da=new AnnotationDefault_attribute();\n      element_value[] result=readElementValues(1,d,false,0);\n      da.default_value=result[0];\n      a=(attribute_info)da;\n    }\n else     if (s.equals(attribute_info.BootstrapMethods)) {\n      BootstrapMethods_attribute bsma=new BootstrapMethods_attribute();\n      int count=d.readUnsignedShort();\n      bsma.method_handles=new short[count];\n      bsma.arg_indices=new short[count][];\n      for (int num=0; num < count; num++) {\n        short index=(short)d.readUnsignedShort();\n        bsma.method_handles[num]=index;\n        int argCount=d.readUnsignedShort();\n        bsma.arg_indices[num]=new short[argCount];\n        for (int numArg=0; numArg < argCount; numArg++) {\n          short indexArg=(short)d.readUnsignedShort();\n          bsma.arg_indices[num][numArg]=indexArg;\n        }\n      }\n      assert bootstrap_methods_attribute == null : \"More than one bootstrap methods attribute!\";\n      a=bootstrap_methods_attribute=bsma;\n    }\n else {\n      Generic_attribute ga=new Generic_attribute();\n      if (len > 0) {\n        ga.info=new byte[(int)len];\n        d.read(ga.info);\n      }\n      a=(attribute_info)ga;\n    }\n    a.attribute_name=j;\n    a.attribute_length=len;\n    ai[i]=a;\n  }\n  return true;\n}"}
{"ids": "8935", "raw_code": "private void notifiyDownloadState(){\nsynchronized (mDownloadMonitor) {\n    Log.v(LOG_TAG,\"notifiy download manager state changed.\");\n    mDownloadMonitor.notify();\n  }\n}"}
{"ids": "9922", "raw_code": "private PKIXBuilderParameters CreatePKIXBuilderParameters(X509Certificate endCert) throws CertificatePathBuildingException {\n  X509CertSelector targetConstraints=new X509CertSelector();\n  targetConstraints.setCertificate(endCert);\n  PKIXBuilderParameters params;\n  try {\n    params=new PKIXBuilderParameters(trustStore,targetConstraints);\n    params.setRevocationEnabled(false);\n  }\n catch (  KeyStoreException e) {\n    throw new CertificatePathBuildingException(\"Error creating PKIXBuilderParameters: Please check trust store\" + e.getMessage(),e);\n  }\ncatch (  InvalidAlgorithmParameterException e) {\n    throw new CertificatePathBuildingException(\"Error creating PKIXBuilderParameters:\" + e.getMessage(),e);\n  }\ncatch (  Throwable e) {\n    throw new CertificatePathBuildingException(\"Error creating PKIXBuilderParameters:\" + e.getMessage(),e);\n  }\n  Collection<Object> certCollection=new ArrayList<Object>();\n  addCertificateCandidates(endCert,certCollection);\n  if (!certCollection.isEmpty()) {\n    try {\n      CertStore certStore=CertStore.getInstance(\"Collection\",new CollectionCertStoreParameters(certCollection));\n      params.addCertStore(certStore);\n    }\n catch (    InvalidAlgorithmParameterException e) {\n      throw new CertificatePathBuildingException(\"Error creating CertStore for PKIXBuilderParameters:\" + e.getMessage(),e);\n    }\ncatch (    NoSuchAlgorithmException e) {\n      throw new CertificatePathBuildingException(\"Error creating CertStore for  PKIXBuilderParameters:\" + e.getMessage(),e);\n    }\n  }\n else {\n    logger.debug(\"Revocation check: CRL list empty\");\n  }\n  return params;\n}"}
{"ids": "38983", "raw_code": "public void printStackTrace(){\n  Throwable t;\n  StringWriter writer;\n  writer=new StringWriter();\n  t=new Throwable();\n  t.fillInStackTrace();\n  t.printStackTrace(new PrintWriter(writer));\n  println(writer.toString());\n}"}
{"ids": "53455", "raw_code": "protected int effectiveBandSize(final int dim1,final int dim2){\n  if (bandSize == Double.POSITIVE_INFINITY) {\n    return (dim1 > dim2) ? dim1 : dim2;\n  }\n  if (bandSize >= 1.) {\n    return (int)bandSize;\n  }\n  return (int)Math.ceil((dim1 >= dim2 ? dim1 : dim2) * bandSize);\n}"}
{"ids": "77031", "raw_code": "public static int encodeLongitudeCeil(double longitude){\n  GeoUtils.checkLongitude(longitude);\n  if (longitude == 180.0D) {\n    longitude=Math.nextDown(longitude);\n  }\n  return (int)Math.ceil(longitude / LON_DECODE);\n}"}
{"ids": "83556", "raw_code": "private LinkedList<Diff> diff_lineMode(String text1,String text2,long deadline){\n  LinesToCharsResult b=diff_linesToChars(text1,text2);\n  text1=b.chars1;\n  text2=b.chars2;\n  List<String> linearray=b.lineArray;\n  LinkedList<Diff> diffs=diff_main(text1,text2,false,deadline);\n  diff_charsToLines(diffs,linearray);\n  diff_cleanupSemantic(diffs);\n  diffs.add(new Diff(Operation.EQUAL,\"\"));\n  int count_delete=0;\n  int count_insert=0;\n  String text_delete=\"\";\n  String text_insert=\"\";\n  ListIterator<Diff> pointer=diffs.listIterator();\n  Diff thisDiff=pointer.next();\n  while (thisDiff != null) {\nswitch (thisDiff.operation) {\ncase INSERT:\n      count_insert++;\n    text_insert+=thisDiff.text;\n  break;\ncase DELETE:\ncount_delete++;\ntext_delete+=thisDiff.text;\nbreak;\ncase EQUAL:\nif (count_delete >= 1 && count_insert >= 1) {\npointer.previous();\nfor (int j=0; j < count_delete + count_insert; j++) {\npointer.previous();\npointer.remove();\n}\nfor (Diff newDiff : diff_main(text_delete,text_insert,false,deadline)) {\npointer.add(newDiff);\n}\n}\ncount_insert=0;\ncount_delete=0;\ntext_delete=\"\";\ntext_insert=\"\";\nbreak;\n}\nthisDiff=pointer.hasNext() ? pointer.next() : null;\n}\ndiffs.removeLast();\nreturn diffs;\n}"}
{"ids": "69379", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return ID;\ncase 2:\n  return CREATE_TIME;\ncase 3:\nreturn UPDATE_TIME;\ncase 4:\nreturn OPERATION;\ncase 5:\nreturn STATUS;\ncase 6:\nreturn SRC_PATH;\ncase 7:\nreturn SRC_CLUSTER;\ncase 8:\nreturn SRC_DB;\ncase 9:\nreturn SRC_TABLE;\ncase 10:\nreturn SRC_PARTITIONS;\ncase 11:\nreturn SRC_MODIFIED_TIME;\ncase 12:\nreturn RENAME_TO_DB;\ncase 13:\nreturn RENAME_TO_TABLE;\ncase 14:\nreturn RENAME_TO_PATH;\ncase 15:\nreturn EXTRAS;\ncase 16:\nreturn WAITING_ON_JOBS;\ndefault :\nreturn null;\n}\n}"}
{"ids": "52974", "raw_code": "public JSONBuffer appendKeyHash(Object key){\n  if (stack.empty() || stack.peek() != Operand.HASH) {\n    throw new JSONException(\"Appending key-value outside of hash context.\");\n  }\n  addQuotedString(key);\n  buffer.append(\":\");\n  buffer.append(\"{\");\n  stack.push(Operand.HASH);\n  return this;\n}"}
{"ids": "8007", "raw_code": "static ReplayPromise<Void> anyReplay(final Duration timeout,final Promise<?>... promises){\n  return anyReplay(timeout,System.currentTimeMillis(),promises);\n}"}
{"ids": "14672", "raw_code": "public static PolicyService sendPLLRequest(URL policyServiceUrl,PolicyRequest preq) throws SendRequestException, PolicyException {\n  String lbcookie=null;\n  try {\n    lbcookie=getLBCookie(preq);\n  }\n catch (  Exception e) {\n    throw new SendRequestException(e);\n  }\n  PolicyService policyService=new PolicyService();\n  policyService.setMethodID(PolicyService.POLICY_REQUEST_ID);\n  policyService.setPolicyRequest(preq);\n  String xmlString=policyService.toXMLString();\n  Request request=new Request(xmlString);\n  RequestSet requestSet=new RequestSet(PolicyService.POLICY_SERVICE);\n  requestSet.addRequest(request);\n  if (debug.messageEnabled()) {\n    debug.message(\"ResourceResultCache.sendPLLRequest:\" + \"sending PLL request to URL=\" + policyServiceUrl + \":\\nPLL message=\"+ xmlString);\n  }\n  Vector responses=PLLClient.send(policyServiceUrl,lbcookie,requestSet);\n  Response response=(Response)responses.elementAt(0);\n  PolicyService ps=PolicyService.parseXML(response.getContent());\n  if (debug.messageEnabled()) {\n    debug.message(\"ResourceResultCache.sendPLLRequest:\" + \"result=\" + ps.toXMLString());\n  }\n  return ps;\n}"}
{"ids": "21066", "raw_code": "public static URI createId(Class<? extends DataObject> clazz){\n  return newId(clazz,getLocation(clazz));\n}"}
{"ids": "53244", "raw_code": "public static double log2(double x){\n  return Math.log(x) * ONE_BY_LOG2;\n}"}
{"ids": "58069", "raw_code": "public void insertElementAt(Node value,int at){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));\n  if (null == m_map) {\n    m_map=new Node[m_blocksize];\n    m_mapSize=m_blocksize;\n  }\n else   if ((m_firstFree + 1) >= m_mapSize) {\n    m_mapSize+=m_blocksize;\n    Node newMap[]=new Node[m_mapSize];\n    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);\n    m_map=newMap;\n  }\n  if (at <= (m_firstFree - 1)) {\n    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);\n  }\n  m_map[at]=value;\n  m_firstFree++;\n}"}
{"ids": "52182", "raw_code": "public Result regress(DiscreteVariable x,List<Node> regressors){\n  if (!binary(x)) {\n    throw new IllegalArgumentException(\"Target must be binary.\");\n  }\n  for (  Node node : regressors) {\n    if (!(node instanceof ContinuousVariable || binary(node))) {\n      throw new IllegalArgumentException(\"Regressors must be continuous or binary.\");\n    }\n  }\n  double[][] _regressors=new double[regressors.size()][getRows().length];\n  for (int j=0; j < regressors.size(); j++) {\n    int col=dataSet.getColumn(regressors.get(j));\n    double[] dataCol=dataCols[col];\n    for (int i=0; i < getRows().length; i++) {\n      _regressors[j][i]=dataCol[getRows()[i]];\n    }\n  }\n  int[] target=new int[getRows().length];\n  int col=dataSet.getColumn(dataSet.getVariable(x.getName()));\n  for (int i=0; i < getRows().length; i++) {\n    target[i]=dataSet.getInt(getRows()[i],col);\n  }\n  List<String> regressorNames=new ArrayList<>();\n  for (  Node node : regressors) {\n    regressorNames.add(node.getName());\n  }\n  return regress(target,x.getName(),_regressors,regressorNames);\n}"}
{"ids": "43599", "raw_code": "static public List<Sequence<IString>> tokenizeFile(String filename,boolean doNIST){\n  List<Sequence<IString>> sequences=new ArrayList<>();\n  LineNumberReader reader=IOTools.getReaderFromFile(filename);\n  try {\n    for (String line; (line=reader.readLine()) != null; ) {\n      if (doNIST)       line=NISTTokenizer.tokenize(line);\n      sequences.add(IStrings.tokenize(line));\n    }\n    reader.close();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  return sequences;\n}"}
{"ids": "7068", "raw_code": "public Statement like(String expr){\n  statement.append(\" LIKE \");\n  appendEscapedSQLString(statement,expr);\n  return this;\n}"}
{"ids": "79961", "raw_code": "public static KdbxHeader readKdbxHeader(KdbxHeader kdbxHeader,InputStream inputStream) throws IOException {\n  MessageDigest digest=Encryption.getMessageDigestInstance();\n  DigestInputStream digestInputStream=new DigestInputStream(inputStream,digest);\n  LittleEndianDataInputStream ledis=new LittleEndianDataInputStream(digestInputStream);\n  if (!verifyMagicNumber(ledis)) {\n    throw new IllegalStateException(\"Magic number did not match\");\n  }\n  if (!verifyFileVersion(ledis)) {\n    throw new IllegalStateException(\"File version did not match\");\n  }\n  byte headerType;\n  while ((headerType=ledis.readByte()) != HeaderType.END) {\nswitch (headerType) {\ncase HeaderType.COMMENT:\n      getByteArray(ledis);\n    break;\ncase HeaderType.CIPHER_ID:\n  kdbxHeader.setCipherUuid(getByteArray(ledis));\nbreak;\ncase HeaderType.COMPRESSION_FLAGS:\nkdbxHeader.setCompressionFlags(getInt(ledis));\nbreak;\ncase HeaderType.MASTER_SEED:\nkdbxHeader.setMasterSeed(getByteArray(ledis));\nbreak;\ncase HeaderType.TRANSFORM_SEED:\nkdbxHeader.setTransformSeed(getByteArray(ledis));\nbreak;\ncase HeaderType.TRANSFORM_ROUNDS:\nkdbxHeader.setTransformRounds(getLong(ledis));\nbreak;\ncase HeaderType.ENCRYPTION_IV:\nkdbxHeader.setEncryptionIv(getByteArray(ledis));\nbreak;\ncase HeaderType.PROTECTED_STREAM_KEY:\nkdbxHeader.setProtectedStreamKey(getByteArray(ledis));\nbreak;\ncase HeaderType.STREAM_START_BYTES:\nkdbxHeader.setStreamStartBytes(getByteArray(ledis));\nbreak;\ncase HeaderType.INNER_RANDOM_STREAM_ID:\nkdbxHeader.setInnerRandomStreamId(getInt(ledis));\nbreak;\ndefault :\nthrow new IllegalStateException(\"Unknown File Header\");\n}\n}\ngetByteArray(ledis);\nkdbxHeader.setHeaderHash(digest.digest());\nreturn kdbxHeader;\n}"}
{"ids": "72606", "raw_code": "public static byte[] copyToByteArray(InputStream in) throws IOException {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(BUFFER_SIZE);\n  copy(in,out);\n  return out.toByteArray();\n}"}
{"ids": "17865", "raw_code": "public boolean isEnumConstant(){\n  return (getModifiers() & Modifier.ENUM) != 0;\n}"}
{"ids": "84634", "raw_code": "public boolean containsAny(Collection<Taxon> taxa){\n  for (  Taxon taxon : taxa) {\n    if (taxa.contains(taxon)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "50013", "raw_code": "@SuppressWarnings(\"unchecked\") public synchronized T dequeueTask() throws InterruptedException {\n  while (_data.isEmpty()) {\n    if (!_closedInput)     wait();\n else     return (T)NO_MORE_TASKS;\n  }\n  T t=_data.removeFirst();\n  notify();\n  return t;\n}"}
{"ids": "15535", "raw_code": "@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n  super.readExternal(in);\n  this.facetName=in.readUTF();\n}"}
{"ids": "66550", "raw_code": "private boolean stringToBoolean(String condition){\n  boolean result=false;\n  if (condition != null && condition.length() > 0) {\n    String s=condition.substring(0,1);\n    if (s.equalsIgnoreCase(\"Y\") || s.equals(\"1\") || s.equalsIgnoreCase(\"T\"))     result=true;\n  }\n  return result;\n}"}
{"ids": "62465", "raw_code": "public static void writeUINT32(long number,OutputStream out) throws IOException {\n  if (number < 0) {\n    throw new IllegalArgumentException(\"positive value expected.\");\n  }\n  byte[] toWrite=new byte[4];\n  for (int i=0; i <= 24; i+=8) {\n    toWrite[i / 8]=(byte)((number >> i) & 0xFF);\n  }\n  out.write(toWrite);\n}"}
{"ids": "68330", "raw_code": "public RemoteMetaDataImpl(Schema schema) throws RemoteException {\n  this.schema=schema;\n  fields.addAll(schema.fields());\n}"}
{"ids": "34702", "raw_code": "private void checkServerResponseCode(HttpURLConnection urlConnection) throws RequestFailureException {\n  try {\n    if (urlConnection.getResponseCode() != 200) {\n      throw new RequestFailureException(\"Received \" + urlConnection.getResponseCode() + \" code instead of 200 (OK) from the server.  Aborting.\");\n    }\n  }\n catch (  IOException e) {\n    throw new RequestFailureException(\"Failed to read response code from server: \",e);\n  }\n}"}
{"ids": "29101", "raw_code": "public void addSwitchWithOptionalExtraPart(String option,String optionExtraPartSynopsis,String description){\n  optionList.add(option);\n  optionExtraPartSynopsisMap.put(option,optionExtraPartSynopsis);\n  optionDescriptionMap.put(option,description);\n  int length=option.length() + optionExtraPartSynopsis.length() + 3;\n  if (length > maxWidth) {\n    maxWidth=length;\n  }\n}"}
{"ids": "86198", "raw_code": "public static Object detectLinuxDefaultFileBrowser(Map<String,Object> fileBrowsers){\n  ArrayList<String> command=new ArrayList<String>();\n  command.add(\"xdg-mime\");\n  command.add(\"query\");\n  command.add(\"default\");\n  command.add(\"inode/directory\");\n  if (fileBrowsers == null) {\n    fileBrowsers=new HashMap<String,Object>();\n    fileBrowsers.put(\".*\",\"*\");\n  }\n  return Utils.isExpectedCommandOutput(command,fileBrowsers);\n}"}
{"ids": "55505", "raw_code": "public void updated(){\n  currentColor=HtmlColors.decode(getSettingValue());\n  secondaryColor=HtmlColors.decode(baseColor);\n  Color foregroundColor;\n  Color backgroundColor;\n  if (type == FOREGROUND) {\n    foregroundColor=currentColor;\n    backgroundColor=secondaryColor;\n  }\n else {\n    foregroundColor=secondaryColor;\n    backgroundColor=currentColor;\n  }\n  preview.setForeground(foregroundColor);\n  preview.setBackground(backgroundColor);\n}"}
{"ids": "24886", "raw_code": "public Collection<? extends ImmutableClassType> removeInstrumentationPoints(final Collection<? extends ImmutableType> types){\n  return removeInstrumentationPoints(types,Collections.<IInstrumentationApplier>singleton(RemoveAllInstrumentationApplier.getInstance()));\n}"}
{"ids": "15371", "raw_code": "private Record createRecord(RecordProperties recordProperties) throws RecordException {\n  String debugDirectory;\n  if (isRecording()) {\n    debugDirectory=previousDebugDirectory;\n  }\n else {\n    debugDirectory=SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_DIRECTORY);\n  }\n  String recordDirectory=debugDirectory + File.separator + RecordConstants.RECORD_FOLDER_NAME+ File.separator+ recordProperties.getIssueID()+ File.separator+ recordProperties.getReferenceID();\n  Record record=new Record(recordProperties,recordDirectory);\n  try {\n    createFolder(record.getFolderPath());\n    PrintWriter printWriterInfo=getPrintWriterForFile(record,RecordConstants.INFO_FILE_NAME);\n    JsonValue info=recordReport.infoReport(record);\n    try {\n      JSONObject json=new JSONObject(info.toString());\n      printWriterInfo.println(json.toString(4));\n    }\n catch (    JSONException e) {\n      debug.warning(\"Can't indent json '{}'\",info,e);\n      printWriterInfo.println(info);\n    }\n    printWriterInfo.flush();\n    return record;\n  }\n catch (  IOException e) {\n    debug.error(\"Info report can't be initialized for issue '{}'\",recordProperties,e);\n    throw new RecordException(\"Info report can't be initialized for issue '\" + recordProperties.getIssueID() + \"'\",e);\n  }\n}"}
{"ids": "52109", "raw_code": "public static LaggedEdge serializableInstance(){\n  return new LaggedEdge(\"X\",LaggedFactor.serializableInstance());\n}"}
{"ids": "18337", "raw_code": "public final void dispatchCharactersEvents(int nodeHandle,ContentHandler ch,boolean normalize) throws SAXException {\n  int identity=makeNodeIdentity(nodeHandle);\n  if (identity == DTM.NULL)   return;\n  int type=_type2(identity);\n  if (type == DTM.ELEMENT_NODE || type == DTM.DOCUMENT_NODE) {\n    int startNode=identity;\n    identity=_firstch2(identity);\n    if (DTM.NULL != identity) {\n      int offset=-1;\n      int length=0;\n      do {\n        type=_exptype2(identity);\n        if (type == DTM.TEXT_NODE || type == DTM.CDATA_SECTION_NODE) {\n          int dataIndex=m_dataOrQName.elementAt(identity);\n          if (dataIndex >= 0) {\n            if (-1 == offset) {\n              offset=dataIndex >>> TEXT_LENGTH_BITS;\n            }\n            length+=dataIndex & TEXT_LENGTH_MAX;\n          }\n else {\n            if (-1 == offset) {\n              offset=m_data.elementAt(-dataIndex);\n            }\n            length+=m_data.elementAt(-dataIndex + 1);\n          }\n        }\n        identity++;\n      }\n while (_parent2(identity) >= startNode);\n      if (length > 0) {\n        if (normalize)         m_chars.sendNormalizedSAXcharacters(ch,offset,length);\n else         m_chars.sendSAXcharacters(ch,offset,length);\n      }\n    }\n  }\n else   if (DTM.TEXT_NODE == type || DTM.CDATA_SECTION_NODE == type) {\n    int dataIndex=m_dataOrQName.elementAt(identity);\n    if (dataIndex >= 0) {\n      if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX);\n else       m_chars.sendSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX);\n    }\n else {\n      if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1));\n else       m_chars.sendSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1));\n    }\n  }\n else {\n    int dataIndex=m_dataOrQName.elementAt(identity);\n    if (dataIndex < 0) {\n      dataIndex=-dataIndex;\n      dataIndex=m_data.elementAt(dataIndex + 1);\n    }\n    String str=(String)m_values.elementAt(dataIndex);\n    if (normalize)     FastStringBuffer.sendNormalizedSAXcharacters(str.toCharArray(),0,str.length(),ch);\n else     ch.characters(str.toCharArray(),0,str.length());\n  }\n}"}
{"ids": "58132", "raw_code": "private static int lengthOfMimeNames(String val){\n  int len=val.indexOf(' ');\n  if (len < 0)   len=val.length();\n  return len;\n}"}
{"ids": "75188", "raw_code": "private char readEscapeCharacter() throws JSONException {\n  char escaped=in.charAt(pos++);\nswitch (escaped) {\ncase 'u':\n    if (pos + 4 > in.length()) {\n      throw syntaxError(\"Unterminated escape sequence\");\n    }\n  String hex=in.substring(pos,pos + 4);\npos+=4;\nreturn (char)Integer.parseInt(hex,16);\ncase 't':\nreturn '\\t';\ncase 'b':\nreturn '\\b';\ncase 'n':\nreturn '\\n';\ncase 'r':\nreturn '\\r';\ncase 'f':\nreturn '\\f';\ncase '\\'':\ncase '\"':\ncase '\\\\':\ndefault :\nreturn escaped;\n}\n}"}
{"ids": "37437", "raw_code": "public static boolean isSha1String(final String string){\n  Preconditions.checkNotNull(string,\"Error: String argument can't be null\");\n  return (string.length() == 40) && isHexString(string);\n}"}
{"ids": "16844", "raw_code": "public boolean isWatched(){\n  return watched;\n}"}
{"ids": "16512", "raw_code": "public void addDateChangeListener(DateChangeListener listener){\n  dateChangeListeners.add(listener);\n}"}
{"ids": "31467", "raw_code": "public static String stripFileProtocol(String uriString){\n  if (uriString.startsWith(\"file://\")) {\n    uriString=uriString.substring(7);\n  }\n  return uriString;\n}"}
{"ids": "18051", "raw_code": "public void replaceTemplate(ElemTemplate v,int i) throws TransformerException {\n  if (null == m_templates)   throw new ArrayIndexOutOfBoundsException();\n  replaceChild(v,(ElemTemplateElement)m_templates.elementAt(i));\n  m_templates.setElementAt(v,i);\n  v.setStylesheet(this);\n}"}
{"ids": "26812", "raw_code": "public RotatedProblem(Problem problem,RealMatrix rotation){\n  super();\n  this.problem=problem;\n  this.rotation=rotation;\n  Solution solution=problem.newSolution();\n  center=new double[getNumberOfVariables()];\n  lowerBounds=new double[getNumberOfVariables()];\n  upperBounds=new double[getNumberOfVariables()];\n  for (int i=0; i < getNumberOfVariables(); i++) {\n    RealVariable variable=(RealVariable)solution.getVariable(i);\n    center[i]=(variable.getLowerBound() + variable.getUpperBound()) / 2.0;\n    lowerBounds[i]=Math.sqrt(2.0) * (variable.getLowerBound() - center[i]);\n    upperBounds[i]=Math.sqrt(2.0) * (variable.getUpperBound() - center[i]);\n  }\n}"}
{"ids": "40113", "raw_code": "public static byte[] decode(String data){\n  int len=data.length() / 4 * 3;\n  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);\n  try {\n    encoder.decode(data,bOut);\n  }\n catch (  Exception e) {\n    throw new DecoderException(\"unable to decode base64 string: \" + e.getMessage(),e);\n  }\n  return bOut.toByteArray();\n}"}
{"ids": "65736", "raw_code": "public void characters(char ch[],int start,int length) throws SAXException {\n  m_curValue.append(ch,start,length);\n}"}
{"ids": "11201", "raw_code": "public boolean regenerate(Projection proj){\n  boolean ret=super.regenerate(proj);\n  if (proj != null && !ret) {\n    ret=generate(proj);\n  }\n  return ret;\n}"}
{"ids": "71899", "raw_code": "@Override public byte[] unwrap(final byte[] incoming,final int offset,final int len) throws LdapException {\n  final byte[] copy=new byte[len];\n  System.arraycopy(incoming,offset,copy,0,len);\n  return copy;\n}"}
{"ids": "12710", "raw_code": "private int sequentialForwardSelection(String dataFile,String[] features,int indVarColNumber,int X[],int Y[],double J[],int rowIni,int rowEnd){\n  double sig[]=new double[Y.length];\n  int sigIndex[]=new int[Y.length];\n  double corXplusy[]=new double[Y.length];\n  double corX;\n  if (X.length > 0) {\n    Regression reg=new Regression();\n    reg.multipleLinearRegression(dataFile,indVarColNumber,X,features,interceptTerm,rowIni,rowEnd);\n    corX=reg.getCorrelation();\n  }\n else   corX=0.0;\n  for (int i=0; i < Y.length; i++) {\n    corXplusy[i]=correlationOfNewFeature(dataFile,features,indVarColNumber,X,Y[i],rowIni,rowEnd);\n    sig[i]=corXplusy[i] - corX;\n    sigIndex[i]=Y[i];\n  }\n  int minSig=MathUtils.getMinIndex(sig);\n  J[0]=corXplusy[minSig];\n  J[1]=corX;\n  int maxSig=MathUtils.getMaxIndex(sig);\n  J[2]=corXplusy[maxSig];\n  return sigIndex[maxSig];\n}"}
{"ids": "62328", "raw_code": "private static byte[] codesToBytes(String codes,boolean required){\n  if (codes.length() == 0) {\n    if (required) {\n      throw new IllegalStateException(\"empty code bytes\");\n    }\n    return null;\n  }\n  if ((codes.length() % 2) != 0) {\n    codes=\"0\" + codes;\n  }\n  byte[] bytes=new byte[codes.length() / 2];\n  for (int i=0; i < bytes.length; ++i) {\n    int charIdx=i * 2;\n    bytes[i]=(byte)(Integer.parseInt(codes.substring(charIdx,charIdx + 2),16));\n  }\n  return bytes;\n}"}
{"ids": "9657", "raw_code": "public DragEntry dragSelectedEntry(){\n  try {\n    KeyStoreHistory history=getActiveKeyStoreHistory();\n    if (history == null) {\n      return null;\n    }\n    KeyStoreState currentState=history.getCurrentState();\n    KeyStore keyStore=currentState.getKeyStore();\n    String alias=getSelectedEntryAlias();\n    if (alias == null) {\n      return null;\n    }\n    if (KeyStoreUtil.isKeyEntry(alias,keyStore)) {\n      JOptionPane.showMessageDialog(frame,res.getString(\"KseFrame.NoDragKeyEntry.message\"),KSE.getApplicationName(),JOptionPane.WARNING_MESSAGE);\n      return null;\n    }\n    if (KeyStoreUtil.isKeyPairEntry(alias,keyStore)) {\n      Password password=currentState.getEntryPassword(alias);\n      KeyStoreType type=KeyStoreType.resolveJce(keyStore.getType());\n      if (password == null && type.hasEntryPasswords()) {\n        JOptionPane.showMessageDialog(frame,res.getString(\"KseFrame.NoDragLockedKeyPairEntry.message\"),KSE.getApplicationName(),JOptionPane.WARNING_MESSAGE);\n        return null;\n      }\n      PrivateKey privateKey=(PrivateKey)keyStore.getKey(alias,password.toCharArray());\n      Certificate[] certificateChain=keyStore.getCertificateChain(alias);\n      return new DragKeyPairEntry(alias,privateKey,password,certificateChain);\n    }\n else {\n      Certificate trustedCertificate=keyStore.getCertificate(alias);\n      return new DragTrustedCertificateEntry(alias,trustedCertificate);\n    }\n  }\n catch (  Exception ex) {\n    DError.displayError(frame,ex);\n    return null;\n  }\n}"}
{"ids": "44764", "raw_code": "public void insert(T object,int index){\nsynchronized (mLock) {\n    if (mOriginalValues != null) {\n      mOriginalValues.add(index,object);\n    }\n else {\n      mObjects.add(index,object);\n    }\n  }\n  if (mNotifyOnChange)   notifyDataSetChanged();\n}"}
{"ids": "18288", "raw_code": "public static Document createDocument(boolean isSecureProcessing){\n  try {\n    DocumentBuilderFactory dfactory=DocumentBuilderFactory.newInstance();\n    dfactory.setNamespaceAware(true);\n    DocumentBuilder docBuilder=dfactory.newDocumentBuilder();\n    Document outNode=docBuilder.newDocument();\n    return outNode;\n  }\n catch (  ParserConfigurationException pce) {\n    throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CREATEDOCUMENT_NOT_SUPPORTED,null));\n  }\n}"}
{"ids": "62615", "raw_code": "public double reduce(String numericColumnName,NumericReduceFunction function){\n  Column column=column(numericColumnName);\n  return function.reduce(column.toDoubleArray());\n}"}
{"ids": "68050", "raw_code": "static public String formatUInt8Char(byte b){\n  String ch=new String(new byte[]{b});\n  ch=ch.replaceAll(\"\\\\p{C}\",\" \");\n  return formatUInt8(b) + \":\" + ch;\n}"}
{"ids": "55857", "raw_code": "public static final ArrayList<Move> removeIllegal(Position pos,ArrayList<Move> moveList){\n  ArrayList<Move> ret=new ArrayList<Move>();\n  UndoInfo ui=new UndoInfo();\n  int mlSize=moveList.size();\n  for (int mi=0; mi < mlSize; mi++) {\n    Move m=moveList.get(mi);\n    pos.makeMove(m,ui);\n    pos.setWhiteMove(!pos.whiteMove);\n    if (!inCheck(pos))     ret.add(m);\n    pos.setWhiteMove(!pos.whiteMove);\n    pos.unMakeMove(m,ui);\n  }\n  return ret;\n}"}
{"ids": "85292", "raw_code": "public static int applyMaskPenaltyRule4(ByteMatrix matrix){\n  int numDarkCells=0;\n  byte[][] array=matrix.getArray();\n  int width=matrix.getWidth();\n  int height=matrix.getHeight();\n  for (int y=0; y < height; ++y) {\n    for (int x=0; x < width; ++x) {\n      if (array[y][x] == 1) {\n        numDarkCells+=1;\n      }\n    }\n  }\n  int numTotalCells=matrix.getHeight() * matrix.getWidth();\n  double darkRatio=(double)numDarkCells / numTotalCells;\n  return Math.abs((int)(darkRatio * 100 - 50)) / 5 * 10;\n}"}
{"ids": "84909", "raw_code": "private void checkState(){\n  if (diagramRetrieved) {\n    throw new IllegalStateException(\"The final diagram was returned and therefore no more changes are allowed.\");\n  }\n}"}
{"ids": "14969", "raw_code": "static Hashtable convertToHash(Map m){\n  Hashtable retHash=new Hashtable();\n  Set s=m.keySet();\n  Iterator iter=s.iterator();\n  while (iter.hasNext()) {\n    String key=(String)iter.next();\n    Set val=(Set)m.get(key);\n    retHash.put(key,setToString(val));\n  }\n  return retHash;\n}"}
{"ids": "5090", "raw_code": "public boolean equal_at_start(PlaPointInt p_point){\n  if (p_point == null)   return false;\n  PlaPoint first=corner_first();\n  return first.equals(p_point);\n}"}
{"ids": "41100", "raw_code": "public void forEachBlockDepthFirst(boolean reverse,SsaBasicBlock.Visitor v){\n  BitSet visited=new BitSet(blocks.size());\n  Stack<SsaBasicBlock> stack=new Stack<SsaBasicBlock>();\n  SsaBasicBlock rootBlock=reverse ? getExitBlock() : getEntryBlock();\n  if (rootBlock == null) {\n    return;\n  }\n  stack.add(null);\n  stack.add(rootBlock);\n  while (stack.size() > 0) {\n    SsaBasicBlock cur=stack.pop();\n    SsaBasicBlock parent=stack.pop();\n    if (!visited.get(cur.getIndex())) {\n      BitSet children=reverse ? cur.getPredecessors() : cur.getSuccessors();\n      for (int i=children.nextSetBit(0); i >= 0; i=children.nextSetBit(i + 1)) {\n        stack.add(cur);\n        stack.add(blocks.get(i));\n      }\n      visited.set(cur.getIndex());\n      v.visitBlock(cur,parent);\n    }\n  }\n}"}
{"ids": "47978", "raw_code": "protected void fillPath(){\n  mPSStream.println(mFillOpStr);\n}"}
{"ids": "82616", "raw_code": "public static byte[] decode(String encoded){\n  if (encoded == null) {\n    return null;\n  }\n  char[] base64Data=encoded.toCharArray();\n  int len=removeWhiteSpace(base64Data);\n  if (len % FOURBYTE != 0) {\n    return null;\n  }\n  int numberQuadruple=(len / FOURBYTE);\n  if (numberQuadruple == 0) {\n    return new byte[0];\n  }\n  byte decodedData[]=null;\n  byte b1=0, b2=0, b3=0, b4=0;\n  char d1=0, d2=0, d3=0, d4=0;\n  int i=0;\n  int encodedIndex=0;\n  int dataIndex=0;\n  decodedData=new byte[(numberQuadruple) * 3];\n  for (; i < numberQuadruple - 1; i++) {\n    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {\n      return null;\n    }\n    b1=base64Alphabet[d1];\n    b2=base64Alphabet[d2];\n    b3=base64Alphabet[d3];\n    b4=base64Alphabet[d4];\n    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);\n    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));\n    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);\n  }\n  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {\n    return null;\n  }\n  b1=base64Alphabet[d1];\n  b2=base64Alphabet[d2];\n  d3=base64Data[dataIndex++];\n  d4=base64Data[dataIndex++];\n  if (!isData((d3)) || !isData((d4))) {\n    if (isPad(d3) && isPad(d4)) {\n      if ((b2 & 0xf) != 0) {\n        return null;\n      }\n      byte[] tmp=new byte[i * 3 + 1];\n      System.arraycopy(decodedData,0,tmp,0,i * 3);\n      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);\n      return tmp;\n    }\n else     if (!isPad(d3) && isPad(d4)) {\n      b3=base64Alphabet[d3];\n      if ((b3 & 0x3) != 0) {\n        return null;\n      }\n      byte[] tmp=new byte[i * 3 + 2];\n      System.arraycopy(decodedData,0,tmp,0,i * 3);\n      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);\n      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));\n      return tmp;\n    }\n else {\n      return null;\n    }\n  }\n else {\n    b3=base64Alphabet[d3];\n    b4=base64Alphabet[d4];\n    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);\n    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));\n    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);\n  }\n  return decodedData;\n}"}
{"ids": "86439", "raw_code": "public boolean isLastWindow(AccessibilityWindowInfo baseWindow,int windowType){\n  int index=getWindowIndex(baseWindow);\n  if (index == WRONG_INDEX) {\n    return true;\n  }\n  int count=mWindows.size();\n  for (int i=index + 1; i < count; i++) {\n    AccessibilityWindowInfo window=mWindows.get(i);\n    if (window != null && window.getType() == windowType) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "13825", "raw_code": "public void passPgSessionMapEx(ViewBean other){\n  Map attributes=getPageSessionAttributes();\n  for (Iterator i=retainPageSessionsBtwTabs.iterator(); i.hasNext(); ) {\n    String key=(String)i.next();\n    other.setPageSessionAttribute(key,(Serializable)attributes.get(key));\n  }\n  other.setPageSessionAttribute(getTrackingTabIDName(),(Serializable)attributes.get(getTrackingTabIDName()));\n}"}
{"ids": "65355", "raw_code": "public long time(){\n  return heartbeatTime;\n}"}
{"ids": "47989", "raw_code": "public boolean hitClip(int x,int y,int width,int height){\n  return g.hitClip(x,y,width,height);\n}"}
{"ids": "63135", "raw_code": "public static CloseWatcher pollUnclosed(){\n  ReferenceQueue<Object> q=queue;\n  if (q == null) {\n    return null;\n  }\n  while (true) {\n    CloseWatcher cw=(CloseWatcher)q.poll();\n    if (cw == null) {\n      return null;\n    }\n    if (refs != null) {\n      refs.remove(cw);\n    }\n    if (cw.closeable != null) {\n      return cw;\n    }\n  }\n}"}
{"ids": "72813", "raw_code": "private static boolean appendOdexesToClassPath(Context cxt,File dexDir,String[] names){\n  String strDexDir=dexDir.getAbsolutePath();\n  ArrayList<String> jarPaths=new ArrayList<String>();\n  for (int i=0; i < names.length; i++) {\n    String jarPath=strDexDir + '/' + names[i];\n    File f=new File(jarPath);\n    if (f.isFile()) {\n      jarPaths.add(jarPath);\n    }\n  }\n  String[] jarsOfDex=new String[jarPaths.size()];\n  jarPaths.toArray(jarsOfDex);\n  PathClassLoader pcl=(PathClassLoader)cxt.getClassLoader();\n  try {\n    if (Build.VERSION.SDK_INT < SDK_INT_ICS) {\n      FrameworkHack.appendDexListImplUnderICS(jarsOfDex,pcl,dexDir);\n    }\n else {\n      boolean kitkatPlus=Build.VERSION.SDK_INT >= SDK_INT_KITKAT;\n      boolean marshmallowPlus=Build.VERSION.SDK_INT >= SDK_INT_MARSHMALLOW;\n      ArrayList<File> jarFiles=DexDex.strings2Files(jarsOfDex);\n      FrameworkHack.appendDexListImplICS(jarFiles,pcl,dexDir,kitkatPlus,marshmallowPlus);\n    }\n    for (    String jarName : names) {\n      theAppended.add(jarName);\n    }\n    if (debug) {\n      Log.d(TAG,\"appendOdexesToClassPath completed : \" + pcl);\n      Log.d(TAG,\"theAppended : \" + theAppended);\n    }\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(ex);\n  }\n  return true;\n}"}
{"ids": "13560", "raw_code": "private void assertSerializeAndDesDateTime(String dateTimeString) throws RyaTypeResolverException {\n  assertSerializeAndDesDateTime(dateTimeString,dateTimeString);\n}"}
{"ids": "40814", "raw_code": "public boolean isHardMode(){\n  return isHardMode;\n}"}
{"ids": "66407", "raw_code": "protected String doIt() throws Exception {\n  setup();\n  for (  MWarehouse warehouse : warehouses)   for (  MCostType costType : costTypes)   for (  MCostElement costElement : costElements)   for (  int productId : products)   generateInventoryValue(productId,costType.getM_CostType_ID(),costElement.getM_CostElement_ID(),warehouse.getM_Warehouse_ID());\n  pstmt.executeBatch();\n  commitEx();\n  DB.close(pstmt);\n  DB.executeUpdate(\"UPDATE T_InventoryValue SET Cost = CASE WHEN QtyOnHand <> 0 THEN (CostAmt + CostAmtLL) / QtyOnHand ELSE  0 END  ,  CumulatedAmt = CASE WHEN QtyOnHand <> 0  THEN  CostAmt + CostAmtLL ELSE 0 END ,  DateValue = \" + DB.TO_DATE(p_DateValue) + \" WHERE AD_PInstance_ID=?\",getAD_PInstance_ID(),get_TrxName());\n  return \"@Ok@ \" + count;\n}"}
{"ids": "77972", "raw_code": "public void run(){\n  setup();\n  log.info(\"start recovering...\");\n  for (  TaskStorageManager taskStorageManager : taskStorageManagers) {\n    taskStorageManager.init();\n    taskStorageManager.stopStores();\n    log.debug(\"restored \" + taskStorageManager.toString());\n  }\n  log.info(\"successfully recovered in \" + storeBaseDir.toString());\n}"}
{"ids": "74106", "raw_code": "public void read(int i){\n  VariableValue v=rowVector.elementAt(i);\n  v.readAll();\n}"}
{"ids": "8070", "raw_code": "protected List<Expression> transformExpressions(List<? extends Expression> expressions,ExpressionTransformer transformer){\n  List<Expression> list=new ArrayList<Expression>(expressions.size());\n  for (  Expression expr : expressions) {\n    list.add(transformer.transform(expr));\n  }\n  return list;\n}"}
{"ids": "65436", "raw_code": "public String prefixForward(int length){\n  final String prefix=prefix(length);\n  this.pointer+=length;\n  this.index+=length;\n  this.column+=length;\n  return prefix;\n}"}
{"ids": "72983", "raw_code": "private boolean canAddTask(){\n  return tCur == null;\n}"}
{"ids": "12284", "raw_code": "public void flush() throws IOException {\n  if (printWriter != null) {\n    printWriter.flush();\n  }\n  if (gzipOutputStream != null) {\n    gzipOutputStream.flush();\n  }\n}"}
{"ids": "9492", "raw_code": "public int start(){\n  started.compareAndSet(false,true);\n  server.start();\n  return server.getServerPort();\n}"}
{"ids": "72776", "raw_code": "public static double angle(Tuple3d a,Tuple3d b){\n  double dx=b.x - a.x;\n  double dy=b.y - a.y;\n  double angle=0.0d;\n  if (dx == 0.0) {\n    if (dy == 0.0)     angle=0.0;\n else     if (dy > 0.0)     angle=Math.PI / 2.0;\n else     angle=(Math.PI * 3.0) / 2.0;\n  }\n else   if (dy == 0.0) {\n    if (dx > 0.0)     angle=0.0;\n else     angle=Math.PI;\n  }\n else {\n    if (dx < 0.0)     angle=Math.atan(dy / dx) + Math.PI;\n else     if (dy < 0.0)     angle=Math.atan(dy / dx) + (2 * Math.PI);\n else     angle=Math.atan(dy / dx);\n  }\n  return angle;\n}"}
{"ids": "85257", "raw_code": "public void addStringToTable(byte[] oldString,byte newString){\n  int length=oldString.length;\n  byte[] str=new byte[length + 1];\n  System.arraycopy(oldString,0,str,0,length);\n  str[length]=newString;\n  stringTable[tableIndex++]=str;\n  if (tableIndex == 511) {\n    bitsToGet=10;\n  }\n else   if (tableIndex == 1023) {\n    bitsToGet=11;\n  }\n else   if (tableIndex == 2047) {\n    bitsToGet=12;\n  }\n}"}
{"ids": "21072", "raw_code": "public static boolean identical(URI first,URI second){\n  if ((first != null) && (second != null)) {\n    return first.equals(second);\n  }\n  return false;\n}"}
{"ids": "56583", "raw_code": "default <ST>Xor<ST,T> toXor(final ST secondary){\n  final Optional<T> o=toOptional();\n  return o.isPresent() ? Xor.primary(o.get()) : Xor.secondary(secondary);\n}"}
{"ids": "87111", "raw_code": "public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){\n  SipProvider sipProvider=(SipProvider)requestEvent.getSource();\n  Request request=requestEvent.getRequest();\n  logger.info(\"Got an INVITE  \" + request);\n  timer.schedule(new DelayedInviteResponsesTask(requestEvent,sipProvider),100);\n}"}
{"ids": "39383", "raw_code": "protected Instances dataFromXML(Instances header) throws Exception {\n  Instances result;\n  Element node;\n  Vector<Element> list;\n  list=getChildTags(m_Document.getDocumentElement(),TAG_BODY);\n  node=list.get(0);\n  list=getChildTags(node,TAG_INSTANCES);\n  node=list.get(0);\n  result=createInstances(header,node);\n  return result;\n}"}
{"ids": "84507", "raw_code": "private static String prependIfMissing(final String str,final CharSequence prefix,final boolean ignoreCase,final CharSequence... prefixes){\n  if (str == null || isEmpty(prefix) || startsWith(str,prefix,ignoreCase)) {\n    return str;\n  }\n  if (prefixes != null && prefixes.length > 0) {\n    for (    final CharSequence p : prefixes) {\n      if (startsWith(str,p,ignoreCase)) {\n        return str;\n      }\n    }\n  }\n  return prefix.toString() + str;\n}"}
{"ids": "23860", "raw_code": "protected CacheDistributionAdvisor createDistributionAdvisor(InternalRegionArguments internalRegionArgs){\n  return CacheDistributionAdvisor.createCacheDistributionAdvisor(this);\n}"}
{"ids": "73597", "raw_code": "public void addMouseListener(GlobalMouseListener listener){\n  listeners.add(listener);\n}"}
{"ids": "72551", "raw_code": "private Vector1D finiteOrNullPoint(final double x){\n  return Double.isInfinite(x) ? null : new Vector1D(x);\n}"}
{"ids": "74776", "raw_code": "public void loadPDF(final File input){\n  if (input == null) {\n    return;\n  }\n  scale=1;\n  PDFfile=input.getAbsolutePath();\n  fileLoc.setText(PDFfile);\n  openFile(input,null,false);\n}"}
{"ids": "3476", "raw_code": "public CharBuffer append(Object obj){\n  return append(String.valueOf(obj));\n}"}
{"ids": "47687", "raw_code": "private static void checkFileValidation(File file){\n  if (file == null)   throw new NullPointerException(\"File must not be null\");\n  if (!file.exists()) {\n    throw new IllegalArgumentException(\"The file: \" + file.getPath() + \" doesn't exist.\");\n  }\n  file.canRead();\n}"}
{"ids": "66739", "raw_code": "public <ResultT>Set<ResultT> toSet(Converter<ResultT> converter){\n  try {\n    if (isEmpty(cursor)) {\n      return Collections.emptySet();\n    }\n    return populate(converter,new HashSet<ResultT>(cursor.getCount()));\n  }\n  finally {\n    close();\n  }\n}"}
{"ids": "42440", "raw_code": "public static void stashDisableAssertionArg(String arg){\n  if (arg == null || arg.equals(\"\")) {\n    assertionsEnabled=false;\n  }\n else {\n    disabledAssertionStrings=arg.split(\":\");\n  }\n}"}
{"ids": "28944", "raw_code": "public Iterator<Stream> memberIterator(){\n  return memberSet.iterator();\n}"}
{"ids": "5393", "raw_code": "private void cleanMapping(){\n  ArrayList<Integer> toRemove=new ArrayList<Integer>();\n  int size=mListMapping.size();\n  for (int i=0; i < size; ++i) {\n    if (mListMapping.keyAt(i) == mListMapping.valueAt(i)) {\n      toRemove.add(mListMapping.keyAt(i));\n    }\n  }\n  size=toRemove.size();\n  for (int i=0; i < size; ++i) {\n    mListMapping.delete(toRemove.get(i));\n  }\n}"}
{"ids": "80380", "raw_code": "public static String timeUntil(final int seconds,final boolean forceSeconds){\n  final StringBuilder sbuf=new StringBuilder();\n  timeUntil(sbuf,seconds,forceSeconds);\n  return sbuf.toString();\n}"}
{"ids": "42980", "raw_code": "public void remove(T item){\n  if (set.remove(item)) {\n    fireContentsChanged(this,0,getSize() - 1);\n  }\n}"}
{"ids": "8160", "raw_code": "public static void append(File file,Reader reader,String charset) throws IOException {\n  append(file,reader,charset,false);\n}"}
{"ids": "49359", "raw_code": "void parseIgnoredSection() throws IOException {\n  int depth=1;\n  in.replace++;\n  while (true) {\nswitch (ch) {\ncase '<':\n      if ((ch=in.read()) == '!') {\n        if ((ch=in.read()) == '[') {\n          ch=in.read();\n          depth++;\n        }\n      }\n    break;\ncase ']':\n  if ((ch=in.read()) == ']') {\n    if ((ch=in.read()) == '>') {\n      ch=in.read();\n      if (--depth == 0) {\n        in.replace--;\n        return;\n      }\n    }\n  }\nbreak;\ncase -1:\nerror(\"eof\");\nin.replace--;\nreturn;\ndefault :\nch=in.read();\nbreak;\n}\n}\n}"}
{"ids": "72704", "raw_code": "private synchronized int readRecordLength() throws IOException {\n  if (in.getPos() >= end) {\n    return -1;\n  }\n  int length=in.readInt();\n  if (sync != null && length == SYNC_ESCAPE) {\n    in.readFully(syncCheck);\n    if (!Arrays.equals(sync,syncCheck)) {\n      throw new IOException(\"File is corrupt!\");\n    }\n    syncSeen=true;\n    if (in.getPos() >= end) {\n      return -1;\n    }\n    length=in.readInt();\n  }\n else {\n    syncSeen=false;\n  }\n  return length;\n}"}
{"ids": "71487", "raw_code": "public void addSlide(@NonNull Fragment fragment){\n  fragments.add(fragment);\n  if (isWizardMode) {\n    setOffScreenPageLimit(fragments.size());\n  }\n  mPagerAdapter.notifyDataSetChanged();\n}"}
{"ids": "7850", "raw_code": "public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,Comparable[] categoryKeys,Number[][] starts,Number[][] ends){\n  this.startData=starts;\n  this.endData=ends;\n  if (starts != null && ends != null) {\n    String baseName=\"org.jfree.data.resources.DataPackageResources\";\n    ResourceBundle resources=ResourceBundleWrapper.getBundle(baseName);\n    int seriesCount=starts.length;\n    if (seriesCount != ends.length) {\n      String errMsg=\"DefaultIntervalCategoryDataset: the number \" + \"of series in the start value dataset does \" + \"not match the number of series in the end \"+ \"value dataset.\";\n      throw new IllegalArgumentException(errMsg);\n    }\n    if (seriesCount > 0) {\n      if (seriesKeys != null) {\n        if (seriesKeys.length != seriesCount) {\n          throw new IllegalArgumentException(\"The number of series keys does not \" + \"match the number of series in the data.\");\n        }\n        this.seriesKeys=seriesKeys;\n      }\n else {\n        String prefix=resources.getString(\"series.default-prefix\") + \" \";\n        this.seriesKeys=generateKeys(seriesCount,prefix);\n      }\n      int categoryCount=starts[0].length;\n      if (categoryCount != ends[0].length) {\n        String errMsg=\"DefaultIntervalCategoryDataset: the \" + \"number of categories in the start value \" + \"dataset does not match the number of \"+ \"categories in the end value dataset.\";\n        throw new IllegalArgumentException(errMsg);\n      }\n      if (categoryKeys != null) {\n        if (categoryKeys.length != categoryCount) {\n          throw new IllegalArgumentException(\"The number of category keys does not match \" + \"the number of categories in the data.\");\n        }\n        this.categoryKeys=categoryKeys;\n      }\n else {\n        String prefix=resources.getString(\"categories.default-prefix\") + \" \";\n        this.categoryKeys=generateKeys(categoryCount,prefix);\n      }\n    }\n else {\n      this.seriesKeys=new Comparable[0];\n      this.categoryKeys=new Comparable[0];\n    }\n  }\n}"}
{"ids": "36627", "raw_code": "public void translate(double dx,double dy){\n  if (!isRelative()) {\n    x+=dx;\n    y+=dy;\n  }\n  if (sourcePoint != null) {\n    sourcePoint.setX(sourcePoint.getX() + dx);\n    sourcePoint.setY(sourcePoint.getY() + dy);\n  }\n  if (targetPoint != null) {\n    targetPoint.setX(targetPoint.getX() + dx);\n    targetPoint.setY(targetPoint.getY() + dy);\n  }\n  if (TRANSLATE_CONTROL_POINTS && points != null) {\n    int count=points.size();\n    for (int i=0; i < count; i++) {\n      mxPoint pt=(mxPoint)points.get(i);\n      pt.setX(pt.getX() + dx);\n      pt.setY(pt.getY() + dy);\n    }\n  }\n}"}
{"ids": "5945", "raw_code": "private String anonymizePassword(String password){\n  if (password == null) {\n    return \"null\";\n  }\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < password.length(); i++) {\n    sb.append('*');\n  }\n  return sb.toString();\n}"}
{"ids": "64494", "raw_code": "public final void write(final byte[] data){\n  byteBuffer.put(data);\n}"}
{"ids": "67870", "raw_code": "public RRDatabase(File file) throws IOException {\n  name=file.getName();\n  rrdFile=new RRDFile(file);\n  header=new Header(rrdFile);\n  nameindex=new HashMap<String,Integer>(header.dsCount);\n  dataSources=new ArrayList<DataSource>(header.dsCount);\n  for (int i=0; i < header.dsCount; i++) {\n    DataSource ds=new DataSource(rrdFile);\n    nameindex.put(ds.getName(),i);\n    dataSources.add(ds);\n  }\n  archives=new ArrayList<Archive>(header.rraCount);\n  for (int i=0; i < header.rraCount; i++) {\n    Archive archive=new Archive(this);\n    archives.add(archive);\n  }\n  long last_up=(long)rrdFile.readLong() * 1000;\n  if (header.getVersionAsInt() >= Constants.VERSION_WITH_LAST_UPDATE_SEC) {\n    long last_up_usec=rrdFile.readLong();\n    last_up+=last_up_usec / 1000;\n  }\n  lastUpdate=new Date(last_up);\n  for (int i=0; i < header.dsCount; i++) {\n    DataSource ds=dataSources.get(i);\n    ds.loadPDPStatusBlock(rrdFile);\n  }\n  for (int i=0; i < header.rraCount; i++) {\n    Archive archive=archives.get(i);\n    archive.loadCDPStatusBlocks(rrdFile,header.dsCount);\n  }\n  for (int i=0; i < header.rraCount; i++) {\n    Archive archive=archives.get(i);\n    archive.loadCurrentRow(rrdFile);\n  }\n  for (int i=0; i < header.rraCount; i++) {\n    Archive archive=archives.get(i);\n    archive.loadData(rrdFile,header.dsCount);\n  }\n}"}
{"ids": "3061", "raw_code": "public void close() throws IOException {\n  inputStream.close();\n}"}
{"ids": "24586", "raw_code": "public Address malloc(int size,int howmany){\n  int result=nextReservableAddress;\n  nextReservableAddress+=size * howmany;\n  if (nextReservableAddress > (MEMSIZE + memAddressStart)) {\n    addressOutOfRange=true;\n    return null;\n  }\n  return new Address(Op.MEM,size,result);\n}"}
{"ids": "67690", "raw_code": "public static String maskLeft(String s,int len,char mask_ch){\n  if (len <= 0) {\n    return s;\n  }\n  len=Math.min(len,s.length());\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < len; i++) {\n    sb.append(mask_ch);\n  }\n  sb.append(s.substring(len));\n  return sb.toString();\n}"}
{"ids": "53189", "raw_code": "public static double pdf(double x,double mu,double sigma,double skew){\n  x=(x - mu) / sigma;\n  if (Math.abs(skew) > 0.) {\n    x=-Math.log(1. - skew * x) / skew;\n  }\n  return MathUtil.SQRTHALF * Math.exp(-.5 * x * x) / sigma / (1 - skew * x);\n}"}
{"ids": "64058", "raw_code": "public Composer to(long animDuration,float x,float y,int alpha,float scaleX,float scaleY,float rotation,Ease ease){\n  mTweenParameterList.add(new TweenParameter(x,y,alpha,scaleX,scaleY,rotation,animDuration,ease));\n  return this;\n}"}
{"ids": "33817", "raw_code": "@Override public MemChunkHolder<BigDataMemAllocator> createChunk(long size,boolean autoreclaim){\n  MemChunkHolder<BigDataMemAllocator> ret=null;\n  Long addr=m_vmasvc.allocate(m_nid,size,true);\n  if (0 == addr && m_activegc) {\n    forceGC();\n    addr=m_vmasvc.allocate(m_nid,size,true);\n  }\n  if (0 != addr) {\n    ret=new MemChunkHolder<BigDataMemAllocator>(this,addr,size);\n    ret.setCollector(m_chunkcollector);\n    if (autoreclaim) {\n      m_chunkcollector.register(ret);\n    }\n  }\n  return ret;\n}"}
{"ids": "70491", "raw_code": "protected void drawLabel(Canvas canvas,String labelText,DefaultRenderer renderer,List<RectF> prevLabelsBounds,int centerX,int centerY,float shortRadius,float longRadius,float currentAngle,float angle,int left,int right,int color,Paint paint,boolean line,boolean display){\n  if (renderer.isShowLabels() || display) {\n    paint.setColor(color);\n    double rAngle=Math.toRadians(90 - (currentAngle + angle / 2));\n    double sinValue=Math.sin(rAngle);\n    double cosValue=Math.cos(rAngle);\n    int x1=Math.round(centerX + (float)(shortRadius * sinValue));\n    int y1=Math.round(centerY + (float)(shortRadius * cosValue));\n    int x2=Math.round(centerX + (float)(longRadius * sinValue));\n    int y2=Math.round(centerY + (float)(longRadius * cosValue));\n    float size=renderer.getLabelsTextSize();\n    float extra=Math.max(size / 2,10);\n    paint.setTextAlign(Align.LEFT);\n    if (x1 > x2) {\n      extra=-extra;\n      paint.setTextAlign(Align.RIGHT);\n    }\n    float xLabel=x2 + extra;\n    float yLabel=y2;\n    float width=right - xLabel;\n    if (x1 > x2) {\n      width=xLabel - left;\n    }\n    labelText=getFitText(labelText,width,paint);\n    float widthLabel=paint.measureText(labelText);\n    boolean okBounds=false;\n    while (!okBounds && line) {\n      boolean intersects=false;\n      int length=prevLabelsBounds.size();\n      for (int j=0; j < length && !intersects; j++) {\n        RectF prevLabelBounds=prevLabelsBounds.get(j);\n        if (prevLabelBounds.intersects(xLabel,yLabel,xLabel + widthLabel,yLabel + size)) {\n          intersects=true;\n          yLabel=Math.max(yLabel,prevLabelBounds.bottom);\n        }\n      }\n      okBounds=!intersects;\n    }\n    if (line) {\n      y2=(int)(yLabel - size / 2);\n      canvas.drawLine(x1,y1,x2,y2,paint);\n      canvas.drawLine(x2,y2,x2 + extra,y2,paint);\n    }\n else {\n      paint.setTextAlign(Align.CENTER);\n    }\n    canvas.drawText(labelText,xLabel,yLabel,paint);\n    if (line) {\n      prevLabelsBounds.add(new RectF(xLabel,yLabel,xLabel + widthLabel,yLabel + size));\n    }\n  }\n}"}
{"ids": "69806", "raw_code": "protected void onPageScrolled(int position,float offset,int offsetPixels){\n  if (mDecorChildCount > 0) {\n    final int scrollX=getScrollX();\n    int paddingLeft=getPaddingLeft();\n    int paddingRight=getPaddingRight();\n    final int width=getWidth();\n    final int childCount=getChildCount();\n    for (int i=0; i < childCount; i++) {\n      final View child=getChildAt(i);\n      final LayoutParams lp=(LayoutParams)child.getLayoutParams();\n      if (!lp.isDecor)       continue;\n      final int hgrav=lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;\n      int childLeft=0;\nswitch (hgrav) {\ndefault :\n        childLeft=paddingLeft;\n      break;\ncase Gravity.LEFT:\n    childLeft=paddingLeft;\n  paddingLeft+=child.getWidth();\nbreak;\ncase Gravity.CENTER_HORIZONTAL:\nchildLeft=Math.max((width - child.getMeasuredWidth()) / 2,paddingLeft);\nbreak;\ncase Gravity.RIGHT:\nchildLeft=width - paddingRight - child.getMeasuredWidth();\npaddingRight+=child.getMeasuredWidth();\nbreak;\n}\nchildLeft+=scrollX;\nfinal int childOffset=childLeft - child.getLeft();\nif (childOffset != 0) {\nchild.offsetLeftAndRight(childOffset);\n}\n}\n}\nif (mOnPageChangeListener != null) {\nmOnPageChangeListener.onPageScrolled(position,offset,offsetPixels);\n}\nif (mInternalPageChangeListener != null) {\nmInternalPageChangeListener.onPageScrolled(position,offset,offsetPixels);\n}\nif (mPageTransformer != null) {\nfinal int scrollX=getScrollX();\nfinal int childCount=getChildCount();\nfor (int i=0; i < childCount; i++) {\nfinal View child=getChildAt(i);\nfinal LayoutParams lp=(LayoutParams)child.getLayoutParams();\nif (lp.isDecor) continue;\nfinal float transformPos=(float)(child.getLeft() - scrollX) / getClientWidth();\nmPageTransformer.transformPage(child,transformPos);\n}\n}\nmCalledSuper=true;\n}"}
{"ids": "50747", "raw_code": "public void DrawSemivariogramSurface(double Radius,boolean AnIsotropic){\n  double[][] data=new double[3][BinSurface.length * BinSurface[0].length];\n  int n=0;\n  double max=Double.MIN_VALUE;\n  for (int i=0; i < BinSurface.length; i++) {\n    for (int j=0; j < BinSurface[i].length; j++) {\n      data[0][n]=BinSurface[i][j].GridHorDistance;\n      data[1][n]=BinSurface[i][j].GridVerDistance;\n      if ((Math.pow(data[0][n],2) + Math.pow(data[1][n],2)) <= Radius * Radius && !Double.isNaN(BinSurface[i][j].Value)) {\n        data[2][n]=BinSurface[i][j].Value;\n        if (max < data[2][n]) {\n          max=data[2][n];\n        }\n      }\n else {\n        data[2][n]=-1;\n      }\n      n++;\n    }\n  }\n  DefaultXYZDataset dataset=new DefaultXYZDataset();\n  dataset.addSeries(\"Value\",data);\n  NumberAxis xAxis=new NumberAxis();\n  xAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n  xAxis.setLowerMargin(0.0);\n  xAxis.setUpperMargin(0.0);\n  NumberAxis yAxis=new NumberAxis();\n  yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n  yAxis.setLowerMargin(0.0);\n  yAxis.setUpperMargin(0.0);\n  XYBlockRenderer renderer=new XYBlockRenderer();\n  renderer.setBlockWidth(LagSize);\n  renderer.setBlockHeight(LagSize);\n  renderer.setBlockAnchor(RectangleAnchor.CENTER);\n  LookupPaintScale paintScale=new LookupPaintScale(0,max,Color.white);\n  double colorRange=max / 6;\n  paintScale.add(0.0,Color.blue);\n  paintScale.add(1 * colorRange,Color.green);\n  paintScale.add(2 * colorRange,Color.cyan);\n  paintScale.add(3 * colorRange,Color.yellow);\n  paintScale.add(4 * colorRange,Color.ORANGE);\n  paintScale.add(5 * colorRange,Color.red);\n  renderer.setPaintScale(paintScale);\n  XYPlot plot=new XYPlot(dataset,xAxis,yAxis,renderer);\n  plot.setBackgroundPaint(Color.lightGray);\n  plot.setDomainGridlinesVisible(false);\n  plot.setRangeGridlinePaint(Color.white);\n  if (AnIsotropic) {\n    CombinedRangeXYPlot combinedrangexyplot=new CombinedRangeXYPlot();\n    XYSeries seriesT1=new XYSeries(\"1\");\n    XYSeriesCollection AngleCollct=new XYSeriesCollection();\n    double bw=BandWidth;\n    double r=bw / Math.sin(Tolerance);\n    if (r > Radius) {\n      bw=Radius * Math.sin(Tolerance);\n      r=Radius;\n    }\n    seriesT1.add(r * Math.cos(Angle + Tolerance),r * Math.sin(Angle + Tolerance));\n    if ((double)Math.round(Math.sin(Angle) * 10000) / 10000 != 0) {\n      if ((double)Math.round(Math.cos(Angle) * 10000) / 10000 != 0) {\n        double a=(1 + Math.pow(Math.tan(Angle),2));\n        double b=2 * bw / Math.sin(Angle) * Math.pow(Math.tan(Angle),2);\n        double c=Math.pow(Math.tan(Angle),2) * Math.pow(bw / Math.sin(Angle),2) - Math.pow(Radius,2);\n        double x1=(-b + Math.sqrt(Math.pow(b,2) - 4 * a * c)) / (2 * a);\n        double y1=Math.tan(Angle) * (x1 + bw / Math.sin(Angle));\n        double x2=(-b - Math.sqrt(Math.pow(b,2) - 4 * a * c)) / (2 * a);\n        double y2=Math.tan(Angle) * (x2 + bw / Math.sin(Angle));\n        double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));\n        double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x2),2)) + (Math.pow((Radius * Math.sin(Angle) - y2),2)));\n        if (d1 < d2) {\n          seriesT1.add(x1,y1);\n        }\n else {\n          seriesT1.add(x2,y2);\n        }\n      }\n else {\n        double x1=-bw * Math.sin(Angle);\n        double y1=Math.sqrt(Math.pow(Radius,2) - Math.pow(x1,2));\n        double y2=-Math.sqrt(Math.pow(Radius,2) - Math.pow(x1,2));\n        double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));\n        double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y2),2)));\n        if (d1 < d2) {\n          seriesT1.add(x1,y1);\n        }\n else {\n          seriesT1.add(x1,y2);\n        }\n      }\n    }\n else {\n      double y1=bw * Math.cos(Angle);\n      double x1=Math.sqrt(Math.pow(Radius,2) - Math.pow(y1,2));\n      double x2=-Math.sqrt(Math.pow(Radius,2) - Math.pow(y1,2));\n      double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));\n      double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x2),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));\n      if (d1 < d2) {\n        seriesT1.add(x1,y1);\n      }\n else {\n        seriesT1.add(x2,y1);\n      }\n    }\n    AngleCollct.addSeries(seriesT1);\n    XYSeries seriesT2=new XYSeries(\"2\");\n    seriesT2.add(r * Math.cos(Angle + Tolerance),r * Math.sin(Angle + Tolerance));\n    seriesT2.add(0.0,0.0);\n    AngleCollct.addSeries(seriesT2);\n    XYSeries seriesT3=new XYSeries(\"3\");\n    seriesT3.add(Radius * Math.cos(Angle),Radius * Math.sin(Angle));\n    seriesT3.add(0,0);\n    AngleCollct.addSeries(seriesT3);\n    XYSeries seriesT4=new XYSeries(\"4\");\n    seriesT4.add(r * Math.cos(Angle - Tolerance),r * Math.sin(Angle - Tolerance));\n    seriesT4.add(0,0);\n    AngleCollct.addSeries(seriesT4);\n    XYSeries seriesT5=new XYSeries(\"5\");\n    seriesT5.add(r * Math.cos(Angle - Tolerance),r * Math.sin(Angle - Tolerance));\n    if ((double)Math.round(Math.sin(Angle) * 10000) / 10000 != 0) {\n      if ((double)Math.round(Math.cos(Angle) * 10000) / 10000 != 0) {\n        double a=(1 + Math.pow(Math.tan(Angle),2));\n        double b=-2 * bw / Math.sin(Angle) * Math.pow(Math.tan(Angle),2);\n        double c=Math.pow(Math.tan(Angle),2) * Math.pow(bw / Math.sin(Angle),2) - Math.pow(Radius,2);\n        double x1=(-b + Math.sqrt(Math.pow(b,2) - 4 * a * c)) / (2 * a);\n        double y1=Math.tan(Angle) * (x1 - bw / Math.sin(Angle));\n        double x2=(-b - Math.sqrt(Math.pow(b,2) - 4 * a * c)) / (2 * a);\n        double y2=Math.tan(Angle) * (x2 - bw / Math.sin(Angle));\n        double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));\n        double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x2),2)) + (Math.pow((Radius * Math.sin(Angle) - y2),2)));\n        if (d1 < d2) {\n          seriesT5.add(x1,y1);\n        }\n else {\n          seriesT5.add(x2,y2);\n        }\n      }\n else {\n        double x1=bw * Math.sin(Angle);\n        double y1=Math.sqrt(Math.pow(Radius,2) - Math.pow(x1,2));\n        double y2=-Math.sqrt(Math.pow(Radius,2) - Math.pow(x1,2));\n        double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));\n        double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y2),2)));\n        if (d1 < d2) {\n          seriesT5.add(x1,y1);\n        }\n else {\n          seriesT5.add(x1,y2);\n        }\n      }\n    }\n else {\n      double y1=-bw * Math.cos(Angle);\n      double x1=Math.sqrt(Math.pow(Radius,2) - Math.pow(y1,2));\n      double x2=-Math.sqrt(Math.pow(Radius,2) - Math.pow(y1,2));\n      double d1=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x1),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));\n      double d2=Math.sqrt((Math.pow((Radius * Math.cos(Angle) - x2),2)) + (Math.pow((Radius * Math.sin(Angle) - y1),2)));\n      if (d1 < d2) {\n        seriesT5.add(x1,y1);\n      }\n else {\n        seriesT5.add(x2,y1);\n      }\n    }\n    AngleCollct.addSeries(seriesT5);\n    plot.setDataset(1,AngleCollct);\n    XYLineAndShapeRenderer lineshapRend=new XYLineAndShapeRenderer(true,false);\n    for (int i=0; i < AngleCollct.getSeriesCount(); i++) {\n      lineshapRend.setSeriesPaint(i,Color.BLACK);\n    }\n    plot.setRenderer(1,lineshapRend);\n    combinedrangexyplot.add(plot);\n  }\n  plot.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n  JFreeChart chart=new JFreeChart(\"Semivariogram Surface\",plot);\n  chart.removeLegend();\n  chart.setBackgroundPaint(Color.white);\n  ChartFrame frame=new ChartFrame(\"\",chart);\n  frame.pack();\n  frame.setVisible(true);\n}"}
{"ids": "75578", "raw_code": "public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){\n  final int deltaValue, currentScrollValue, scrollValue;\nswitch (view.getPullToRefreshScrollDirection()) {\ncase HORIZONTAL:\n    deltaValue=deltaX;\n  scrollValue=scrollX;\ncurrentScrollValue=view.getScrollX();\nbreak;\ncase VERTICAL:\ndefault :\ndeltaValue=deltaY;\nscrollValue=scrollY;\ncurrentScrollValue=view.getScrollY();\nbreak;\n}\nif (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {\nfinal Mode mode=view.getMode();\nif (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {\nfinal int newScrollValue=(deltaValue + scrollValue);\nif (PullToRefreshBase.DEBUG) {\nLog.d(LOG_TAG,\"OverScroll. DeltaX: \" + deltaX + \", ScrollX: \"+ scrollX+ \", DeltaY: \"+ deltaY+ \", ScrollY: \"+ scrollY+ \", NewY: \"+ newScrollValue+ \", ScrollRange: \"+ scrollRange+ \", CurrentScroll: \"+ currentScrollValue);\n}\nif (newScrollValue < (0 - fuzzyThreshold)) {\nif (mode.showHeaderLoadingLayout()) {\nif (currentScrollValue == 0) {\nview.setState(State.OVERSCROLLING);\n}\nview.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));\n}\n}\n else if (newScrollValue > (scrollRange + fuzzyThreshold)) {\nif (mode.showFooterLoadingLayout()) {\nif (currentScrollValue == 0) {\nview.setState(State.OVERSCROLLING);\n}\nview.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));\n}\n}\n else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {\nview.setState(State.RESET);\n}\n}\n else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {\nview.setState(State.RESET);\n}\n}\n}"}
{"ids": "68983", "raw_code": "public Single<TAccessToken> grantNewAccessToken(OAuth2Grant<TAccessToken> grant){\n  return grantNewAccessToken(grant,Calendar.getInstance());\n}"}
{"ids": "26704", "raw_code": "public static Number floor(Number a){\n  if (isFloatingPoint(a)) {\n    return Math.floor(a.doubleValue());\n  }\n else {\n    return a.longValue();\n  }\n}"}
{"ids": "39538", "raw_code": "private void readDefsElement(IXMLElement elem) throws IOException {\n  for (  IXMLElement child : elem.getChildren()) {\n    Figure childFigure=readElement(child);\n  }\n}"}
{"ids": "50956", "raw_code": "@Nullable private static ActivityWrapper findLauncherActivityForDevice(@NotNull List<ActivityWrapper> launchableActivities,@NotNull IDevice device){\n  if (device.supportsFeature(IDevice.HardwareFeature.TV)) {\n    return findLeanbackLauncher(launchableActivities);\n  }\n  return null;\n}"}
{"ids": "25287", "raw_code": "public boolean isQueryRunning(final BoundEntity song){\nsynchronized (mRunningQueries) {\n    return mRunningQueries.contains(song);\n  }\n}"}
{"ids": "69584", "raw_code": "public synchronized void flush() throws IOException {\n  checkNotClosed();\n  trimToSize();\n  trimToFileCount();\n  journalWriter.flush();\n}"}
{"ids": "81547", "raw_code": "private Response<Bitmap> doParse(NetworkResponse response){\n  byte[] data=response.data;\n  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();\n  Bitmap bitmap=null;\n  if (mMaxWidth == 0 && mMaxHeight == 0) {\n    decodeOptions.inPreferredConfig=mDecodeConfig;\n    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n  }\n else {\n    decodeOptions.inJustDecodeBounds=true;\n    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n    int actualWidth=decodeOptions.outWidth;\n    int actualHeight=decodeOptions.outHeight;\n    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);\n    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);\n    decodeOptions.inJustDecodeBounds=false;\n    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);\n    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {\n      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);\n      tempBitmap.recycle();\n    }\n else {\n      bitmap=tempBitmap;\n    }\n  }\n  if (bitmap == null) {\n    return Response.error(new ParseError(response));\n  }\n else {\n    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));\n  }\n}"}
{"ids": "73452", "raw_code": "private Map<String,ExtensionFileFilter> addExtensions(JFileChooser chooser){\n  Map<String,ExtensionFileFilter> filters=new HashMap<String,ExtensionFileFilter>();\n  for (  Map.Entry<String,String> entry : exts.entrySet()) {\n    ExtensionFileFilter filter=new ExtensionFileFilter(entry.getKey(),entry.getValue());\n    filters.put(entry.getKey(),filter);\n    chooser.addChoosableFileFilter(filter);\n  }\n  return filters;\n}"}
{"ids": "75555", "raw_code": "public static String withNodeInfo(AccessibilityNodeInfo nodeInfo){\n  if (nodeInfo == null) {\n    return null;\n  }\n  return String.format(\":[text: %s; contentDescription: %s]\",nodeInfo.getText(),nodeInfo.getContentDescription());\n}"}
{"ids": "8092", "raw_code": "static int allParametersAndArgumentsMatchWithDefaultParams(Parameter[] params,ClassNode[] args){\n  int dist=0;\n  ClassNode ptype=null;\n  for (int i=0, j=0; i < params.length; i++) {\n    Parameter param=params[i];\n    ClassNode paramType=param.getType();\n    ClassNode arg=j >= args.length ? null : args[j];\n    if (arg == null || !isAssignableTo(arg,paramType)) {\n      if (!param.hasInitialExpression() && (ptype == null || !ptype.equals(paramType))) {\n        return -1;\n      }\n      ptype=null;\n    }\n else {\n      j++;\n      if (!paramType.equals(arg))       dist+=getDistance(arg,paramType);\n      if (param.hasInitialExpression()) {\n        ptype=arg;\n      }\n else {\n        ptype=null;\n      }\n    }\n  }\n  return dist;\n}"}
{"ids": "69647", "raw_code": "private void expect(char expectedSymbol) throws ParseException {\n  if (!accept(expectedSymbol))   throw new ParseException(\"Expected '\" + expectedSymbol + \"' but found '\"+ (char)data[index]+ \"'\",index);\n}"}
{"ids": "8962", "raw_code": "public Contentlet executeSafeFirst(){\n  List<Contentlet> result=executeSafe();\n  if (result.size() > 0) {\n    return result.get(0);\n  }\n  return null;\n}"}
{"ids": "73123", "raw_code": "public void clear(){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    for (Node<E> f=first; f != null; ) {\n      f.item=null;\n      Node<E> n=f.next;\n      f.prev=null;\n      f.next=null;\n      f=n;\n    }\n    first=last=null;\n    count=0;\n    notFull.signalAll();\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "76021", "raw_code": "private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){\n  int count=0;\n  int len=msg.length();\n  int idx=startpos;\n  if (idx < len) {\n    char ch=msg.charAt(idx);\n    while (isDigit(ch) && idx < len) {\n      count++;\n      idx++;\n      if (idx < len) {\n        ch=msg.charAt(idx);\n      }\n    }\n  }\n  return count;\n}"}
{"ids": "25918", "raw_code": "public static boolean isFileExist(String filePath,FileType fileType,boolean performFileCheck) throws IOException {\n  filePath=filePath.replace(\"\\\\\",\"/\");\nswitch (fileType) {\ncase HDFS:\ncase VIEWFS:\n    Path path=new Path(filePath);\n  FileSystem fs=path.getFileSystem(configuration);\nif (performFileCheck) {\n  return fs.exists(path) && fs.isFile(path);\n}\n else {\n  return fs.exists(path);\n}\ncase LOCAL:\ndefault :\nFile defaultFile=new File(filePath);\nif (performFileCheck) {\nreturn defaultFile.exists() && defaultFile.isFile();\n}\n else {\nreturn defaultFile.exists();\n}\n}\n}"}
{"ids": "61900", "raw_code": "private DoubleFactor pointwiseProduct(List<DoubleFactor> factors){\n  if (factors.isEmpty()) {\n    DoubleFactor factor=new DoubleFactor();\n    factor.addEntry(new Assignment(),1.0,0.0);\n    return factor;\n  }\n else   if (factors.size() == 1) {\n    return factors.get(0);\n  }\n  DoubleFactor factor=factors.get(0);\n  factors.remove(0);\n  for (  DoubleFactor f : factors) {\n    DoubleFactor tempFactor=new DoubleFactor();\n    Set<String> sharedVars=new HashSet<String>(f.getVariables());\n    sharedVars.retainAll(factor.getVariables());\n    for (    Assignment a : f.getValues()) {\n      double[] entry=f.getEntry(a);\n      double prob=entry[0];\n      double util=entry[1];\n      for (      Assignment b : factor.getValues()) {\n        if (b.consistentWith(a,sharedVars)) {\n          double[] entry2=factor.getEntry(b);\n          double prob2=entry2[0];\n          double util2=entry2[1];\n          double product=prob * prob2;\n          double sum=util + util2;\n          tempFactor.addEntry(new Assignment(a,b),product,sum);\n        }\n      }\n    }\n    factor=tempFactor;\n  }\n  return factor;\n}"}
{"ids": "48691", "raw_code": "public ClassPath(){\n  String syscp=System.getProperty(\"sun.boot.class.path\");\n  String envcp=System.getProperty(\"env.class.path\");\n  if (envcp == null)   envcp=\".\";\n  String cp=syscp + File.pathSeparator + envcp;\n  init(cp);\n}"}
{"ids": "79703", "raw_code": "protected static boolean uninstallAddOnExtension(AddOn addOn,Extension extension,AddOnUninstallationProgressCallback callback){\n  boolean uninstalledWithoutErrors=true;\n  if (extension.isEnabled()) {\n    String extUiName=extension.getUIName();\n    if (extension.canUnload()) {\n      logger.debug(\"Unloading ext: \" + extension.getName());\n      try {\n        extension.unload();\n        ExtensionFactory.unloadAddOnExtension(extension);\n      }\n catch (      Exception e) {\n        logger.error(\"An error occurred while uninstalling the extension \\\"\" + extension.getName() + \"\\\" bundled in the add-on \\\"\"+ addOn.getId()+ \"\\\":\",e);\n        uninstalledWithoutErrors=false;\n      }\n    }\n else {\n      logger.debug(\"Cant dynamically unload ext: \" + extension.getName());\n      uninstalledWithoutErrors=false;\n    }\n    callback.extensionRemoved(extUiName);\n  }\n  addOn.removeLoadedExtension(extension);\n  return uninstalledWithoutErrors;\n}"}
{"ids": "77600", "raw_code": "private static String pickRandomStatsFields(String[] fieldNames){\n  String fieldName;\n  do {\n    fieldName=fieldNames[TestUtil.nextInt(random(),0,fieldNames.length - 1)];\n  }\n while (fieldName.endsWith(\"_b\") || fieldName.endsWith(\"_b1\"));\n  return fieldName;\n}"}
{"ids": "77456", "raw_code": "@Override public synchronized void doDeleteChild(BaseSolrResource endpoint,String childId){\n  String key=getIgnoreCase() ? childId.toLowerCase(Locale.ROOT) : childId;\n  if (!managedWords.contains(key))   throw new SolrException(ErrorCode.NOT_FOUND,String.format(Locale.ROOT,\"%s not found in %s\",childId,getResourceId()));\n  managedWords.remove(key);\n  storeManagedData(managedWords);\n  log.info(\"Removed word: {}\",key);\n}"}
{"ids": "83167", "raw_code": "public static final String writeTime(double seconds,final String timeformat,final char separator){\n  if (seconds < 0) {\n    if (seconds == UNDEFINED_TIME)     return \"undefined\";\n    return \"-\" + writeTime(Math.abs(seconds),timeformat,separator);\n  }\n  int day=(int)(seconds / MIDNIGHT);\n  seconds%=MIDNIGHT;\n  if (TIMEFORMAT_EEESSSS.equals(timeformat))   return Week.getDayName(day) + \",\" + Long.toString((long)(seconds));\n  double s=seconds;\n  long h=(long)(s / 3600);\n  s=s % 3600;\n  int m=(int)(s / 60);\n  s=s % 60;\n  StringBuilder str=new StringBuilder(10);\n  if (h < timeElements.length) {\n    str.append(timeElements[(int)h]);\n  }\n else {\n    str.append(Long.toString(h));\n  }\n  str.append(separator);\n  str.append(timeElements[m]);\n  if (TIMEFORMAT_EEEHHMM.equals(timeformat)) {\n    return Week.getDayName(day) + \",\" + str.toString();\n  }\n  if (TIMEFORMAT_EEEHHMMSS.equals(timeformat)) {\n    str.append(separator);\n    str.append(timeElements[(int)s]);\n    return Week.getDayName(day) + \",\" + str.toString();\n  }\n  if (TIMEFORMAT_HHMMSSDOTSS.equals(timeformat)) {\n    str.append(separator);\n    if (s < 10.) {\n      str.append(\"0\");\n    }\n    str.append(s);\n    return Week.getDayName(day) + \",\" + str.toString();\n  }\n  throw new IllegalArgumentException(\"The time format (\" + timeformat + \") is not known.\");\n}"}
{"ids": "9790", "raw_code": "public DExportPrivateKeyType(JFrame parent){\n  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);\n  setTitle(res.getString(\"DExportPrivateKeyType.Title\"));\n  initComponents();\n}"}
{"ids": "5573", "raw_code": "public static IPoint[] copyOf(IPoint[] original,int newLength){\n  IPoint[] copy=new IPoint[newLength];\n  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));\n  return copy;\n}"}
{"ids": "80345", "raw_code": "public void writeFooter(){\n  ps.println(\"</table>\");\n  ps.println(\"</body>\");\n  ps.println(\"</html>\");\n}"}
{"ids": "38384", "raw_code": "protected void saveObject(Object object){\n  if (m_FileChooser == null) {\n    createFileChooser();\n  }\n  int returnVal=m_FileChooser.showSaveDialog(this);\n  if (returnVal == JFileChooser.APPROVE_OPTION) {\n    File sFile=m_FileChooser.getSelectedFile();\n    try {\n      ObjectOutputStream oo=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(sFile)));\n      oo.writeObject(object);\n      oo.close();\n    }\n catch (    Exception ex) {\n      JOptionPane.showMessageDialog(this,\"Couldn't write to file: \" + sFile.getName() + \"\\n\"+ ex.getMessage(),\"Save object\",JOptionPane.ERROR_MESSAGE);\n    }\n  }\n}"}
{"ids": "78813", "raw_code": "@Override public void write(DataOutput out) throws IOException {\n  if (USE_HADOOP_TEXT)   Text.writeString(out,term);\n else   out.writeUTF(term);\n  WritableUtils.writeVInt(out,splitno);\n  WritableUtils.writeVInt(out,flushno);\n}"}
{"ids": "67680", "raw_code": "public static String stripNonDigits(String str){\n  StringBuffer result=new StringBuffer(str.length());\n  for (  char candidate : str.toCharArray()) {\n    if (Character.isDigit(candidate)) {\n      result.append(candidate);\n    }\n  }\n  return result.toString();\n}"}
{"ids": "93", "raw_code": "protected Collection<CommunicationSummaryStatistics> doGetCommunicationSummaryStatistics(String tenantId,Criteria criteria){\n  String index=client.getIndex(tenantId);\n  Map<String,CommunicationSummaryStatistics> stats=new HashMap<>();\n  if (!criteria.transactionWide()) {\n    Criteria txnWideCriteria=criteria.deriveTransactionWide();\n    buildCommunicationSummaryStatistics(stats,index,txnWideCriteria,false);\n  }\n  buildCommunicationSummaryStatistics(stats,index,criteria,true);\n  return stats.values();\n}"}
{"ids": "61884", "raw_code": "public void removeContent(String variableId){\n  if (!paused) {\n    curState.removeFromState(variableId);\n    update();\n  }\n else {\n    log.info(\"system is paused, ignoring removal of \" + variableId);\n  }\n}"}
{"ids": "82090", "raw_code": "public void addCommandListener(ActionListener l){\n  if (globalCommandListeners == null) {\n    globalCommandListeners=new EventDispatcher();\n  }\n  globalCommandListeners.addListener(l);\n}"}
{"ids": "70570", "raw_code": "public static void completeBackgroundTasks(long timeoutMillis){\n  boolean fifoEmpty=false;\n  boolean asyncThreadsCompleted=false;\n  long absTimeout=System.currentTimeMillis() + timeoutMillis;\n  while (System.currentTimeMillis() < absTimeout) {\nsynchronized (fifo) {\n      fifoEmpty=fifo.size() == 0;\n    }\nsynchronized (JGoogleAnalyticsTracker.class) {\n      asyncThreadsCompleted=asyncThreadsRunning == 0;\n    }\n    if (fifoEmpty && asyncThreadsCompleted)     break;\n    try {\n      Thread.sleep(100);\n    }\n catch (    InterruptedException e) {\n      break;\n    }\n  }\n}"}
{"ids": "47272", "raw_code": "private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {\n  if (actions == null)   getActions();\n  s.defaultWriteObject();\n}"}
{"ids": "45894", "raw_code": "public static final byte[] decode(BufferedReader reader) throws IOException, Base64DecodingException {\n  byte[] retBytes=null;\n  UnsyncByteArrayOutputStream baos=null;\n  try {\n    baos=new UnsyncByteArrayOutputStream();\n    String line;\n    while (null != (line=reader.readLine())) {\n      byte[] bytes=decode(line);\n      baos.write(bytes);\n    }\n    retBytes=baos.toByteArray();\n  }\n  finally {\n    baos.close();\n  }\n  return retBytes;\n}"}
{"ids": "23488", "raw_code": "public boolean isDefinedInEnv(){\n  if (envVars == null || paramNames.length == 0) {\n    return false;\n  }\n  for (  String var : envVars) {\n    if (System.getenv(var) == null) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "26589", "raw_code": "public void apply(Animator animator,float currValue,float endValue,float velocity){\n  apply(animator,currValue,endValue,velocity,Math.abs(endValue - currValue));\n}"}
{"ids": "45109", "raw_code": "public void addNotice(ParserNotice notice){\n  notices.add(notice);\n}"}
{"ids": "13524", "raw_code": "public EventBinder<E> after(String name){\n  after.add(name);\n  return this;\n}"}
{"ids": "11402", "raw_code": "public Point2D forward(Point2D llp,Point2D pt){\n  return forward(llp.getY(),llp.getX(),pt,false);\n}"}
{"ids": "56838", "raw_code": "public JobCreateRequest createJobCreateRequest(String namespaceCd,String jobName){\n  List<Parameter> parameters=new ArrayList<>();\n  Parameter parameter=new Parameter(AbstractServiceTest.ATTRIBUTE_NAME_2_MIXED_CASE,AbstractServiceTest.ATTRIBUTE_VALUE_2);\n  parameters.add(parameter);\n  parameter=new Parameter(\"Extra Attribute With No Value\",null);\n  parameters.add(parameter);\n  return createJobCreateRequest(namespaceCd,jobName,parameters);\n}"}
{"ids": "13556", "raw_code": "private void load() throws RepositoryException, RDFParseException, IOException {\n  final RepositoryConnection conn=repository.getConnection();\n  String ttlString=MODEL_TTL;\n  InputStream stringInput=new ByteArrayInputStream(ttlString.getBytes());\n  conn.add(stringInput,\"http://dragon-research.com/cham/model/model1\",RDFFormat.TURTLE,new Resource[]{});\n  ttlString=BUCKET_TTL;\n  stringInput=new ByteArrayInputStream(ttlString.getBytes());\n  conn.add(stringInput,\"http://dragon-research.com/cham/bucket/bucket1\",RDFFormat.TURTLE,new Resource[]{});\n  conn.commit();\n  conn.close();\n}"}
{"ids": "22150", "raw_code": "protected WebResource createRequest(String uriPath){\n  ensureInitialization();\n  return clientRequestHelper.createRequest(client,serviceURI,URI.create(uriPath));\n}"}
{"ids": "53958", "raw_code": "public static void init(Context context){\n  if (cameraManager == null) {\n    cameraManager=new CameraManager(context);\n  }\n}"}
{"ids": "70650", "raw_code": "public void nextTable() throws SQLException {\n  if (tables.hasNext()) {\n    currentTable=tables.next();\n    openRows();\n  }\n}"}
{"ids": "9674", "raw_code": "public DDistinguishedNameChooser(JFrame parent,String title,X500Name distinguishedName,boolean editable){\n  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);\n  this.distinguishedName=distinguishedName;\n  this.editable=editable;\n  initComponents();\n}"}
{"ids": "52652", "raw_code": "public static boolean deleteFile(String filePathAndName){\n  if ((filePathAndName == null) || filePathAndName.isEmpty()) {\n    return false;\n  }\n  boolean isSuccessfulDelete=false;\n  try {\n    File fileToDelete=new File(filePathAndName);\n    isSuccessfulDelete=fileToDelete.delete();\n  }\n catch (  Exception e) {\n    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));\n    isSuccessfulDelete=false;\n  }\n  return isSuccessfulDelete;\n}"}
{"ids": "20011", "raw_code": "public TungstenPropertiesIO(File path){\n  this(new JavaFileIO(),new FilePath(path.getAbsolutePath()));\n}"}
{"ids": "34663", "raw_code": "private void computeTabOffsetHelper(RectF stackRect){\n  final boolean portrait=mCurrentMode == Orientation.PORTRAIT;\n  final float parentWidth=stackRect.width();\n  final float parentHeight=stackRect.height();\n  final float overscrollPercent=computeOverscrollPercent();\n  final float scrollOffset=MathUtils.clamp(mScrollOffset,getMinScroll(false),getMaxScroll(false));\n  final float stackScale=getStackScale(stackRect);\n  int stackedCount=0;\n  float minStackedPosition=0.0f;\n  for (int i=0; i < mStackTabs.length; ++i) {\n    assert mStackTabs[i] != null;\n    StackTab stackTab=mStackTabs[i];\n    LayoutTab layoutTab=stackTab.getLayoutTab();\n    final float stackScrollOffset=stackTab.isDying() ? mScrollOffsetForDyingTabs : scrollOffset;\n    float screenScrollOffset=approxScreen(stackTab,stackScrollOffset);\n    screenScrollOffset=Math.max(minStackedPosition,screenScrollOffset);\n    if (stackedCount < MAX_NUMBER_OF_STACKED_TABS_TOP) {\n      final float tiltXcos=(float)Math.cos(Math.toRadians(layoutTab.getTiltX()));\n      final float tiltYcos=(float)Math.cos(Math.toRadians(layoutTab.getTiltY()));\n      float collapse=Math.min(Math.abs(tiltXcos),Math.abs(tiltYcos));\n      collapse*=layoutTab.getAlpha();\n      minStackedPosition+=StackTab.sStackedTabVisibleSize * collapse;\n    }\n    stackedCount+=stackTab.isDying() ? 0 : 1;\n    if (overscrollPercent < 0) {\n      screenScrollOffset+=(overscrollPercent / OVERSCROLL_TOP_SLIDE_PCTG) * screenScrollOffset;\n      screenScrollOffset=Math.max(0,screenScrollOffset);\n    }\n    float xIn=(parentWidth - layoutTab.getScaledContentWidth()) / 2.0f;\n    float yIn=(parentHeight - layoutTab.getScaledContentHeight()) / 2.0f;\n    final float horizontalPadding=(parentWidth - layoutTab.getOriginalContentWidth() * StackAnimation.SCALE_AMOUNT * stackScale) / 2.0f;\n    final float verticalPadding=(parentHeight - layoutTab.getOriginalContentHeight() * StackAnimation.SCALE_AMOUNT * stackScale) / 2.0f;\n    if (portrait) {\n      yIn+=STACK_PORTRAIT_Y_OFFSET_PROPORTION * verticalPadding;\n      yIn+=screenScrollOffset;\n    }\n else {\n      if (LocalizationUtils.isLayoutRtl()) {\n        xIn-=STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding;\n        xIn-=screenScrollOffset;\n      }\n else {\n        xIn+=STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding;\n        xIn+=screenScrollOffset;\n      }\n      yIn+=STACK_LANDSCAPE_Y_OFFSET_PROPORTION * verticalPadding;\n    }\n    layoutTab.setX(xIn);\n    layoutTab.setY(yIn);\n  }\n  stackedCount=0;\n  float maxStackedPosition=portrait ? mLayout.getHeightMinusTopControls() : mLayout.getWidth();\n  for (int i=mStackTabs.length - 1; i >= 0; i--) {\n    assert mStackTabs[i] != null;\n    StackTab stackTab=mStackTabs[i];\n    LayoutTab layoutTab=stackTab.getLayoutTab();\n    if (stackTab.isDying())     continue;\n    float pos;\n    if (portrait) {\n      pos=layoutTab.getY();\n      layoutTab.setY(Math.min(pos,maxStackedPosition));\n    }\n else     if (LocalizationUtils.isLayoutRtl()) {\n      float posOffset=mLayout.getWidth() - layoutTab.getOriginalContentWidth() * StackAnimation.SCALE_AMOUNT * stackScale;\n      pos=-layoutTab.getX() + posOffset;\n      layoutTab.setX(-Math.min(pos,maxStackedPosition) + posOffset);\n    }\n else {\n      pos=layoutTab.getX();\n      layoutTab.setX(Math.min(pos,maxStackedPosition));\n    }\n    if (pos >= maxStackedPosition && stackedCount < MAX_NUMBER_OF_STACKED_TABS_BOTTOM) {\n      maxStackedPosition-=StackTab.sStackedTabVisibleSize;\n      stackedCount++;\n    }\n  }\n  final float discardRange=getDiscardRange();\n  for (int i=0; i < mStackTabs.length; ++i) {\n    assert mStackTabs[i] != null;\n    StackTab stackTab=mStackTabs[i];\n    LayoutTab layoutTab=stackTab.getLayoutTab();\n    final float xIn=layoutTab.getX() + stackTab.getXInStackOffset();\n    final float yIn=layoutTab.getY() + stackTab.getYInStackOffset();\n    final float xOut=stackTab.getXOutOfStack();\n    final float yOut=stackTab.getYOutOfStack();\n    float x=MathUtils.interpolate(xOut,xIn,stackTab.getXInStackInfluence());\n    float y=MathUtils.interpolate(yOut,yIn,stackTab.getYInStackInfluence());\n    if (stackTab.getDiscardAmount() != 0) {\n      float discard=stackTab.getDiscardAmount();\n      boolean fromClick=stackTab.getDiscardFromClick();\n      float scale=computeDiscardScale(discard,discardRange,fromClick);\n      float deltaX=stackTab.getDiscardOriginX() - stackTab.getLayoutTab().getOriginalContentWidth() / 2.f;\n      float deltaY=stackTab.getDiscardOriginY() - stackTab.getLayoutTab().getOriginalContentHeight() / 2.f;\n      float discardOffset=fromClick ? 0.f : discard;\n      if (portrait) {\n        x+=discardOffset + deltaX * (1.f - scale);\n        y+=deltaY * (1.f - scale);\n      }\n else {\n        x+=deltaX * (1.f - scale);\n        y+=discardOffset + deltaY * (1.f - scale);\n      }\n    }\n    layoutTab.setX(stackRect.left + x);\n    layoutTab.setY(stackRect.top + y);\n  }\n}"}
{"ids": "10798", "raw_code": "@Override public int compareTo(final TimeInstant rhs){\n  return Integer.compare(this.time,rhs.time);\n}"}
{"ids": "62858", "raw_code": "private boolean writeToCharacteristic(BluetoothGattCharacteristic charc,byte[] data){\n  charc.setValue(data);\n  boolean result=mGattClient.writeCharacteristic(charc);\n  if (result) {\n    Log.d(TAG,\"Wrote to characteristic: \" + charc.getUuid() + \", data: \"+ Arrays.toString(data));\n  }\n else {\n    Log.e(TAG,\"Write failed to characteristic: \" + charc.getUuid() + \", data: \"+ Arrays.toString(data));\n  }\n  return result;\n}"}
{"ids": "1174", "raw_code": "public static void composeThroughMask(Raster src,WritableRaster dst,Raster sel){\n  int x=src.getMinX();\n  int y=src.getMinY();\n  int w=src.getWidth();\n  int h=src.getHeight();\n  int srcRGB[]=null;\n  int selRGB[]=null;\n  int dstRGB[]=null;\n  for (int i=0; i < h; i++) {\n    srcRGB=src.getPixels(x,y,w,1,srcRGB);\n    selRGB=sel.getPixels(x,y,w,1,selRGB);\n    dstRGB=dst.getPixels(x,y,w,1,dstRGB);\n    int k=x;\n    for (int j=0; j < w; j++) {\n      int sr=srcRGB[k];\n      int dir=dstRGB[k];\n      int sg=srcRGB[k + 1];\n      int dig=dstRGB[k + 1];\n      int sb=srcRGB[k + 2];\n      int dib=dstRGB[k + 2];\n      int sa=srcRGB[k + 3];\n      int dia=dstRGB[k + 3];\n      float a=selRGB[k + 3] / 255f;\n      float ac=1 - a;\n      dstRGB[k]=(int)(a * sr + ac * dir);\n      dstRGB[k + 1]=(int)(a * sg + ac * dig);\n      dstRGB[k + 2]=(int)(a * sb + ac * dib);\n      dstRGB[k + 3]=(int)(a * sa + ac * dia);\n      k+=4;\n    }\n    dst.setPixels(x,y,w,1,dstRGB);\n    y++;\n  }\n}"}
{"ids": "83656", "raw_code": "public char skipTo(char to){\n  char c;\n  int index=this.myIndex;\n  do {\n    c=next();\n    if (c == 0) {\n      this.myIndex=index;\n      return c;\n    }\n  }\n while (c != to);\n  back();\n  return c;\n}"}
{"ids": "21163", "raw_code": "public int checkVersionSize(final SoftwareVersion version){\n  URL imageUrl=getImageURL(version);\n  HttpURLConnection urlConnection=invokeRequest(imageUrl);\n  return urlConnection.getContentLength();\n}"}
{"ids": "16087", "raw_code": "private static DateTimeFormatter createFormatterForStyle(String style){\n  if (style == null || style.length() != 2) {\n    throw new IllegalArgumentException(\"Invalid style specification: \" + style);\n  }\n  int dateStyle=selectStyle(style.charAt(0));\n  int timeStyle=selectStyle(style.charAt(1));\n  if (dateStyle == NONE && timeStyle == NONE) {\n    throw new IllegalArgumentException(\"Style '--' is invalid\");\n  }\n  return createFormatterForStyleIndex(dateStyle,timeStyle);\n}"}
{"ids": "56451", "raw_code": "private TopDocs combine(TopDocs in,TopDocs resorted,QueryRescoreContext ctx){\n  System.arraycopy(resorted.scoreDocs,0,in.scoreDocs,0,resorted.scoreDocs.length);\n  if (in.scoreDocs.length > resorted.scoreDocs.length) {\n    for (int i=resorted.scoreDocs.length; i < in.scoreDocs.length; i++) {\n      in.scoreDocs[i].score*=ctx.queryWeight();\n    }\n    Arrays.sort(in.scoreDocs,SCORE_DOC_COMPARATOR);\n  }\n  return in;\n}"}
{"ids": "79599", "raw_code": "private Response<Bitmap> doParse(NetworkResponse response){\n  byte[] data=response.data;\n  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();\n  Bitmap bitmap=null;\n  if (mMaxWidth == 0 && mMaxHeight == 0) {\n    decodeOptions.inPreferredConfig=mDecodeConfig;\n    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n  }\n else {\n    decodeOptions.inJustDecodeBounds=true;\n    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n    int actualWidth=decodeOptions.outWidth;\n    int actualHeight=decodeOptions.outHeight;\n    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);\n    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);\n    decodeOptions.inJustDecodeBounds=false;\n    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);\n    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);\n    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {\n      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);\n      tempBitmap.recycle();\n    }\n else {\n      bitmap=tempBitmap;\n    }\n  }\n  if (bitmap == null) {\n    return Response.error(new ParseError(response));\n  }\n else {\n    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));\n  }\n}"}
{"ids": "61986", "raw_code": "@Override public void pause(boolean toPause){\n  isPaused=toPause;\n}"}
{"ids": "71024", "raw_code": "public static String replaceAll(String original,String oldSubstring,String newSubstring){\n  return replace(original,oldSubstring,newSubstring,true);\n}"}
{"ids": "28192", "raw_code": "public long add(final AddOp add) throws Exception {\n  return add(add,UUID.randomUUID());\n}"}
{"ids": "27005", "raw_code": "protected boolean isSmall(){\n  return this.scale * this.textSizeInMeters < this.pixelSizeInMeters;\n}"}
{"ids": "27835", "raw_code": "public byte[] decompress(DataInput is){\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  try {\n    while (true) {\n      byte b=is.readByte();\n      if (b == -1)       break;\n      baos.write(b);\n    }\n  }\n catch (  EOFException ex) {\n  }\ncatch (  IOException ex) {\n    throw new RuntimeException(ex);\n  }\n  return decompress(baos.toByteArray());\n}"}
{"ids": "41098", "raw_code": "public int borrowSpareRegister(int category){\n  int result=spareRegisterBase + borrowedSpareRegisters;\n  borrowedSpareRegisters+=category;\n  registerCount=Math.max(registerCount,result + category);\n  return result;\n}"}
{"ids": "83575", "raw_code": "public void True(boolean expression,Object errorMessage){\n  if (!expression) {\n    throw new IllegalArgumentException(String.valueOf(errorMessage));\n  }\n}"}
{"ids": "35245", "raw_code": "private void processFields(final Object component,final Context context,final ContextDestroyer contextDestroyer){\n  Class<?> componentClass=component.getClass();\n  while (componentClass != null && !componentClass.equals(Object.class)) {\n    final Field[] fields=ClassReflection.getDeclaredFields(componentClass);\n    if (fields != null && fields.length > 0) {\n      processFields(component,fields,context,contextDestroyer);\n    }\n    componentClass=componentClass.getSuperclass();\n  }\n}"}
{"ids": "54893", "raw_code": "public static String replaceAll(String input,String regularExpression,String replacement){\n  return input.replaceAll(regularExpression,replacement);\n}"}
{"ids": "80371", "raw_code": "public static int countLowerCase(final String text){\n  int count=0;\n  for (  final char chr : text.toCharArray()) {\n    if (Character.isLowerCase(chr)) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"ids": "14596", "raw_code": "public void assignService(String serviceName,Map attributes) throws IdRepoException, SSOException {\n  IdServices idServices=IdServicesFactory.getDataStoreServices();\n  Set OCs=getServiceOCs(token,serviceName);\n  SchemaType stype;\n  Map tMap=new HashMap();\n  tMap.put(serviceName,OCs);\n  Set assignedServices=idServices.getAssignedServices(token,type,name,tMap,orgName,univDN);\n  if (assignedServices.contains(serviceName)) {\n    Object args[]={serviceName,type.getName()};\n    throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.SERVICE_ALREADY_ASSIGNED,args);\n  }\n  try {\n    ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);\n    ServiceSchema ss=ssm.getSchema(type.getName());\n    if (ss != null) {\n      Set cosPriority=(attributes != null) ? (Set)attributes.remove(COS_PRIORITY) : null;\n      attributes=ss.validateAndInheritDefaults(attributes,orgName,true);\n      if (cosPriority != null) {\n        attributes.put(COS_PRIORITY,cosPriority);\n      }\n      attributes=AMCommonUtils.removeEmptyValues(attributes);\n      stype=ss.getServiceType();\n    }\n else {\n      ss=ssm.getSchema(SchemaType.DYNAMIC);\n      if (ss == null) {\n        Object args[]={serviceName};\n        throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.UNABLE_GET_SERVICE_SCHEMA,args);\n      }\n      if (attributes == null) {\n        try {\n          attributes=getServiceConfig(token,serviceName,SchemaType.DYNAMIC);\n        }\n catch (        SMSException smsex) {\n          Object args[]={serviceName,type.getName()};\n          throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,\"451\",args);\n        }\n      }\n else {\n        attributes=ss.validateAndInheritDefaults(attributes,orgName,true);\n      }\n      attributes=AMCommonUtils.removeEmptyValues(attributes);\n      stype=SchemaType.DYNAMIC;\n    }\n    attributes=AMCrypt.encryptPasswords(attributes,ss);\n  }\n catch (  SMSException smse) {\n    Object[] args={serviceName};\n    throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.SERVICE_NOT_ASSIGNED,args);\n  }\n  attributes.put(\"objectclass\",OCs);\n  idServices.assignService(token,type,name,serviceName,stype,attributes,orgName,univDN);\n}"}
{"ids": "4641", "raw_code": "@Override protected void createButtonsForButtonBar(final Composite parent){\n  for (final Iterator it=buttonDescriptions.iterator(); it.hasNext(); ) {\n    final ButtonDescription buttonDescription=(ButtonDescription)it.next();\n    createButton(parent,buttonDescription.buttonId,buttonDescription.buttonLabel,buttonDescription.isDefault);\n  }\n  if (includeDefaultButtons) {\n    super.createButtonsForButtonBar(parent);\n  }\n  hookAfterButtonsCreated();\n}"}
{"ids": "64253", "raw_code": "private boolean checkFileModifications() throws Exception {\n  long destFileTime=destFile.lastModified();\n  if (sourceFile.lastModified() > destFileTime) {\n    logger.debug(\"Source file was modified \");\n    return true;\n  }\n  Properties metadata=restoreFileModifications(metaDataFile);\n  if (metadata == null) {\n    return true;\n  }\n  SAXParserFactory parserFactory=SAXParserFactory.newInstance();\n  SAXParser parser=parserFactory.newSAXParser();\n  TimeCheckerHandler handler=new TimeCheckerHandler(baseDir,metadata);\n  parser.parse(sourceFile,handler);\n  return handler.isModified();\n}"}
{"ids": "42936", "raw_code": "public static Number mul(Number a,Number b){\n  if (isFloatingPoint(a) || isFloatingPoint(b)) {\n    return a.doubleValue() * b.doubleValue();\n  }\n else {\n    return a.longValue() * b.longValue();\n  }\n}"}
{"ids": "50768", "raw_code": "private final int findWidestAxis(){\n  int widest=0;\n  double width=(maxLimit[0] - minLimit[0]) * getAxisWeightHint(0);\n  if (Double.isNaN(width)) {\n    width=0;\n  }\n  for (int i=1; i < dimensions; i++) {\n    double nwidth=(maxLimit[i] - minLimit[i]) * getAxisWeightHint(i);\n    if (Double.isNaN(nwidth)) {\n      nwidth=0;\n    }\n    if (nwidth > width) {\n      widest=i;\n      width=nwidth;\n    }\n  }\n  return widest;\n}"}
{"ids": "72135", "raw_code": "public void addSortKey(int column,Comparator<String> comparator){\n  sortKeys.add(column);\n  sortComparators.add(comparator);\n}"}
{"ids": "15208", "raw_code": "public static String tagSwap(String content,Map<String,String> tagSwapMap){\n  for (  Map.Entry<String,String> entry : tagSwapMap.entrySet()) {\n    content=content.replace(entry.getKey(),entry.getValue());\n  }\n  return content;\n}"}
{"ids": "64636", "raw_code": "public static RunStats delegateGetBucketForIntegers(int buckets) throws Exception {\n  Long startTime=System.currentTimeMillis();\n  PrimaryIndexBucketGeneratorImpl ibg=new PrimaryIndexBucketGeneratorImpl(FieldDataType.INTEGER,buckets);\n  PrimaryIndexBucketLocatorImpl locator=new PrimaryIndexBucketLocatorImpl(null,null,null,ibg.generateBuckets(),null,null,null,null,null);\n  logger.debug(\"test to getBucket for the bucket distribution\");\n  HashMap<Long,List<Object>> hm=new HashMap<>();\n  SummaryStatistics stats=new SummaryStatistics();\n  for (int inputInt=-2000000; inputInt < 2000000; inputInt++) {\n    Long bucketId=locator.getBucket(inputInt,FieldDataType.INTEGER);\n    calculate(hm,stats,bucketId,inputInt);\n  }\n  Long runTime=System.currentTimeMillis() - startTime;\n  RunStats runStats=new RunStats(\"BucketForIntegers\",FieldDataType.INTEGER,runTime,stats,hm);\n  logger.debug(runStats.toString());\n  return runStats;\n}"}
{"ids": "34556", "raw_code": "public static long countSubstr(final String value,final String subStr,final boolean caseSensitive,boolean allowOverlapping){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  return countSubstr(caseSensitive ? value : value.toLowerCase(),caseSensitive ? subStr : subStr.toLowerCase(),allowOverlapping,0L);\n}"}
{"ids": "52388", "raw_code": "private void dropIndex(String indexName) throws OracleException {\n  PreparedStatement stmt=null;\n  if (indexName == null)   throw SODAUtils.makeException(SODAMessage.EX_ARG_CANNOT_BE_NULL,\"indexName\");\n  indexName=CollectionDescriptor.stringToIdentifier(indexName);\n  String sqltext=dropIndexDDL(indexName);\n  try {\n    metrics.startTiming();\n    stmt=conn.prepareStatement(sqltext);\n    stmt.execute();\n    if (OracleLog.isLoggingEnabled())     log.info(\"Dropped index \" + indexName);\n    stmt.close();\n    stmt=null;\n    metrics.recordDDL();\n  }\n catch (  SQLException e) {\n    int errcode=e.getErrorCode();\n    if ((errcode == ORA_SQL_OBJECT_NOT_EXISTS) || (errcode == ORA_SQL_INDEX_NOT_EXISTS)) {\n      if (OracleLog.isLoggingEnabled())       log.warning(e.toString());\n    }\n else {\n      if (OracleLog.isLoggingEnabled())       log.warning(e.toString());\n      throw SODAUtils.makeExceptionWithSQLText(e,sqltext);\n    }\n  }\n finally {\n    for (    String message : SODAUtils.closeCursor(stmt,null)) {\n      if (OracleLog.isLoggingEnabled())       log.severe(message);\n    }\n  }\n}"}
{"ids": "70373", "raw_code": "void unlaunch(){\n  if (server != null) {\n    server.die();\n    server=null;\n  }\n  frame.setVisible(true);\n  client=null;\n  System.gc();\n  System.runFinalization();\n}"}
{"ids": "69178", "raw_code": "private boolean isOutsideDocElem(){\n  return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE);\n}"}
{"ids": "77429", "raw_code": "public int postFiles(File[] files,int startIndexInArgs,OutputStream out,String type){\n  reset();\n  int filesPosted=0;\n  for (  File srcFile : files) {\n    if (srcFile.isDirectory() && srcFile.canRead()) {\n      filesPosted+=postDirectory(srcFile,out,type);\n    }\n else     if (srcFile.isFile() && srcFile.canRead()) {\n      filesPosted+=postFiles(new File[]{srcFile},out,type);\n    }\n else {\n      File parent=srcFile.getParentFile();\n      if (parent == null)       parent=new File(\".\");\n      String fileGlob=srcFile.getName();\n      GlobFileFilter ff=new GlobFileFilter(fileGlob,false);\n      File[] fileList=parent.listFiles(ff);\n      if (fileList == null || fileList.length == 0) {\n        warn(\"No files or directories matching \" + srcFile);\n        continue;\n      }\n      filesPosted+=postFiles(fileList,out,type);\n    }\n  }\n  return filesPosted;\n}"}
{"ids": "6842", "raw_code": "private static String unicode2html(final String text,final boolean amp,final boolean html){\n  if (text == null)   return null;\n  final StringBuilder sb=new StringBuilder(text.length() * 12 / 10);\n  int textpos=0;\n  String r;\n  char c;\n  while (textpos < text.length()) {\n    c=text.charAt(textpos);\n    if (amp && c == AMP_UNICODE) {\n      sb.append(AMP_HTML);\n      textpos++;\n      continue;\n    }\n    if ((r=UNICODE2HTML4XML.get(c)) != null) {\n      sb.append(r);\n      textpos++;\n      continue;\n    }\n    if (html && (r=UNICODE2HTML4HTML.get(c)) != null) {\n      sb.append(r);\n      textpos++;\n      continue;\n    }\n    sb.append(c);\n    textpos++;\n  }\n  return sb.toString();\n}"}
{"ids": "25330", "raw_code": "public String addPlaylist(String playlistName){\n  ContentValues mInserts=new ContentValues();\n  mInserts.put(MediaStore.Audio.Playlists.NAME,playlistName);\n  mInserts.put(MediaStore.Audio.Playlists.DATE_ADDED,System.currentTimeMillis());\n  mInserts.put(MediaStore.Audio.Playlists.DATE_MODIFIED,System.currentTimeMillis());\n  Uri uri=mContentResolver.insert(MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,mInserts);\n  if (uri == null) {\n    return null;\n  }\n else {\n    String ref=PREFIX_PLAYLIST + getPlaylistUniqueName(Long.toString(ContentUris.parseId(uri)));\n    Playlist pl=new Playlist(ref);\n    pl.setName(playlistName);\n    pl.setIsLoaded(true);\n    mPlaylists.put(ref,pl);\n    mCallback.playlistUpdated(pl);\n    return ref;\n  }\n}"}
{"ids": "4479", "raw_code": "public static JSONArray readJSONArray(final JSONObject jsonObject,final String key,final boolean required,final boolean notNull) throws JSONException {\n  if (required) {\n    return jsonObject.getJSONArray(key);\n  }\n  if (notNull && jsonObject.isNull(key)) {\n    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_OBJECT,key));\n  }\n  JSONArray value=null;\n  if (!jsonObject.isNull(key)) {\n    value=jsonObject.getJSONArray(key);\n  }\n  return value;\n}"}
{"ids": "72700", "raw_code": "default int copyTo(@NotNull byte[] bytes) throws BufferUnderflowException {\n  int len=(int)Math.min(bytes.length,readRemaining());\n  for (int i=0; i < len; i++)   bytes[i]=readByte(start() + i);\n  return len;\n}"}
{"ids": "68980", "raw_code": "private static float[] randomPoints(Random random,int wavesCount,float width,float shiftCoef){\n  float shift;\n  float[] points=new float[wavesCount + 1];\n  for (int i=0; i < points.length; i++) {\n    if (i == 0) {\n      points[i]=-1;\n    }\n else     if (i == points.length - 1) {\n      points[i]=1;\n    }\n else {\n      shift=random.nextFloat() * shiftCoef * width;\n      shift*=random.nextBoolean() ? 1 : -1;\n      points[i]=-1 + i * width + shift;\n    }\n  }\n  return points;\n}"}
{"ids": "80196", "raw_code": "private void addCharacters(final Map<String,RPObject> characters){\n  for (  Entry<String,RPObject> character : characters.entrySet()) {\n    JButton button=createCharacterButton(character.getKey(),character.getValue());\n    characterPanel.add(button);\n  }\n}"}
{"ids": "20127", "raw_code": "public static boolean isPresent(Rule rule){\n  if (rule == null) {\n    return false;\n  }\n  return (!isNotSet(rule.getMinScaleDenominator()) || !isNotSet(rule.getMaxScaleDenominator()));\n}"}
{"ids": "28659", "raw_code": "public long startcode(){\n  return Long.parseLong(fields[25]);\n}"}
{"ids": "8291", "raw_code": "public static void consumeProcessOutput(Process self){\n  consumeProcessOutput(self,(OutputStream)null,(OutputStream)null);\n}"}
{"ids": "45887", "raw_code": "public static void registerDefaultResolvers(){\n  List<KeyResolver> keyResolverList=new ArrayList<KeyResolver>();\n  keyResolverList.add(new KeyResolver(new RSAKeyValueResolver()));\n  keyResolverList.add(new KeyResolver(new DSAKeyValueResolver()));\n  keyResolverList.add(new KeyResolver(new X509CertificateResolver()));\n  keyResolverList.add(new KeyResolver(new X509SKIResolver()));\n  keyResolverList.add(new KeyResolver(new RetrievalMethodResolver()));\n  keyResolverList.add(new KeyResolver(new X509SubjectNameResolver()));\n  keyResolverList.add(new KeyResolver(new X509IssuerSerialResolver()));\n  keyResolverList.add(new KeyResolver(new DEREncodedKeyValueResolver()));\n  keyResolverList.add(new KeyResolver(new KeyInfoReferenceResolver()));\n  keyResolverList.add(new KeyResolver(new X509DigestResolver()));\n  resolverVector.addAll(keyResolverList);\n}"}
{"ids": "29676", "raw_code": "public static final void delete(String fileName){\n  File file=new File(fileName);\n  if (!file.delete()) {\n    log.error(\"Failed to delete file {}\",file);\n  }\n  File metadataFile=new File(fileName + METADATA_SUFFIX);\n  if (!metadataFile.delete()) {\n    log.error(\"Failed to delete file {}\",metadataFile);\n  }\n  File directory=file.getParentFile();\n  if (directory.isDirectory()) {\n    directory.delete();\n  }\n}"}
{"ids": "7906", "raw_code": "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof TimePeriodValuesCollection)) {\n    return false;\n  }\n  TimePeriodValuesCollection that=(TimePeriodValuesCollection)obj;\n  if (this.domainIsPointsInTime != that.domainIsPointsInTime) {\n    return false;\n  }\n  if (this.xPosition != that.xPosition) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.data,that.data)) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "38485", "raw_code": "public void print(JTextPane pane){\n  setDocument(pane);\n  printDialog();\n}"}
{"ids": "41965", "raw_code": "private boolean ensureScrollWheelAdjusted(){\n  int deltaY=mInitialScrollOffset - mCurrentScrollOffset;\n  if (deltaY != 0) {\n    mPreviousScrollerY=0;\n    if (Math.abs(deltaY) > mSelectorElementHeight / 2) {\n      deltaY+=(deltaY > 0) ? -mSelectorElementHeight : mSelectorElementHeight;\n    }\n    mAdjustScroller.startScroll(0,0,0,deltaY,SELECTOR_ADJUSTMENT_DURATION_MILLIS);\n    invalidate();\n    return true;\n  }\n  return false;\n}"}
{"ids": "86462", "raw_code": "private String sortXml(final String originalXml){\n  String errorMsg=\"Could not sort pom files content: \";\n  xmlProcessingInstructionParser.scanForIgnoredSections(originalXml);\n  String xml=xmlProcessingInstructionParser.replaceIgnoredSections();\n  insertXmlInXmlProcessor(xml,errorMsg);\n  xmlProcessor.sortXml();\n  try (ByteArrayOutputStream sortedXmlOutputStream=xmlProcessor.getSortedXml()){\n    String sortedXml=sortedXmlOutputStream.toString(encoding);\n    if (xmlProcessingInstructionParser.existsIgnoredSections()) {\n      sortedXml=xmlProcessingInstructionParser.revertIgnoredSections(sortedXml);\n    }\n    return sortedXml;\n  }\n catch (  IOException e) {\n    throw new FailureException(errorMsg + xml,e);\n  }\n}"}
{"ids": "35161", "raw_code": "void waitForDictionaryLoading(){\n  while (mUpdatingDictionary) {\n    try {\n      Thread.sleep(100);\n    }\n catch (    InterruptedException e) {\n    }\n  }\n}"}
{"ids": "35919", "raw_code": "private void publishData(String path,byte[] data){\n  try {\n    if (data != null && data.length > 0) {\n      ByteArrayInputStream bii=new ByteArrayInputStream(data);\n      ObjectInputStream ois=new ObjectInputStream(bii);\n      Object dataObj=ois.readObject();\n      ZooKeeperDataWrapper wrapper=(ZooKeeperDataWrapper)(dataObj);\n      JetstreamMessage tm=(JetstreamMessage)wrapper.getOrginalData();\n      String trackerKey=createKey(path,wrapper);\n      m_changeTracker.put(trackerKey,wrapper.getTimestamp());\n      try {\n        LOGGER.warn(\"Publishing the change for topic :\" + path + \" TrackerKey :\"+ trackerKey+ \" Timestamp : \"+ wrapper.getTimestamp());\n        m_transportListener.postMessage(tm,m_queueStats);\n      }\n catch (      Throwable mse) {\n        StringBuffer buf=new StringBuffer();\n        buf.append(\"Error dispatching to message service - \");\n        buf.append(mse.getLocalizedMessage());\n        LOGGER.error(\"Exception publishing data for path :\" + path + buf.toString(),mse);\n      }\n      m_totalMsgsRcvd.increment();\n      m_msgsRcvdPerSec.increment();\n    }\n  }\n catch (  ClassNotFoundException e) {\n    LOGGER.error(\" ClassNotFoundException while publishing data to transport Listener :\" + path,e);\n  }\ncatch (  IOException e) {\n    LOGGER.error(\" IOException while publishing data to transport Listener :\" + path,e);\n  }\n}"}
{"ids": "27791", "raw_code": "static public long nextAddr(Random r,WormAddressManager am){\n  if (r.nextInt(100) < 5)   return 0L;\n  return nextNonZeroAddr(r,am);\n}"}
{"ids": "60985", "raw_code": "public File(File dir,String name){\n  this(dir == null ? null : dir.getPath(),name);\n}"}
{"ids": "85831", "raw_code": "public void removeDragListener(DragListener l){\n  mListeners.remove(l);\n}"}
{"ids": "50466", "raw_code": "private HighTideValues findHighTide(JSONObject responseObject) throws JSONException, ParseException {\n  JSONArray predictions=(JSONArray)responseObject.get(\"predictions\");\n  JSONObject lastPrediction=null, firstHighTide=null, secondHighTide=null, lowTide=null;\n  boolean firstTideDone=false;\n  for (int i=0; i < predictions.length(); i++) {\n    JSONObject prediction=(JSONObject)predictions.get(i);\n    if (lastPrediction == null) {\n      lastPrediction=prediction;\n      continue;\n    }\n    if (isTideIncreasing(lastPrediction,prediction)) {\n      if (!firstTideDone) {\n        firstHighTide=prediction;\n      }\n else {\n        secondHighTide=prediction;\n      }\n    }\n else {\n      if (!firstTideDone && firstHighTide != null) {\n        firstTideDone=true;\n      }\n else       if (secondHighTide != null) {\n        break;\n      }\n      if (firstTideDone) {\n        lowTide=prediction;\n      }\n    }\n    lastPrediction=prediction;\n  }\n  DateFormat dateFormat=new SimpleDateFormat(\"yyyy-MM-d HH:mm\");\n  return new HighTideValues(AlexaDateUtil.getFormattedTime(dateFormat.parse(firstHighTide.getString(\"t\"))),getFormattedHeight(firstHighTide.getString(\"v\")),AlexaDateUtil.getFormattedTime(dateFormat.parse(lowTide.getString(\"t\"))),getFormattedHeight(lowTide.getString(\"v\")),AlexaDateUtil.getFormattedTime(dateFormat.parse(secondHighTide.getString(\"t\"))),getFormattedHeight(secondHighTide.getString(\"v\")));\n}"}
{"ids": "9144", "raw_code": "public static boolean isIpAddress(String ipAddress){\n  Matcher m1=validIPV4Pattern.matcher(ipAddress);\n  if (m1.matches()) {\n    return true;\n  }\n  Matcher m2=validIPV6Pattern.matcher(ipAddress);\n  return m2.matches();\n}"}
{"ids": "38782", "raw_code": "@Override public synchronized void removeTrainingSetListener(TrainingSetListener tsl){\n  m_trainingListeners.removeElement(tsl);\n}"}
{"ids": "39136", "raw_code": "public void renameAttributeValue(Attribute att,String val,String name){\n  int v=att.indexOfValue(val);\n  if (v == -1) {\n    throw new IllegalArgumentException(val + \" not found\");\n  }\n  renameAttributeValue(att.index(),v,name);\n}"}
{"ids": "65970", "raw_code": "public boolean isPdfAttachment(){\n  if (getPO() == null)   return false;\n  return m_po.isPdfAttachment();\n}"}
{"ids": "51170", "raw_code": "private int nameToIndex(String parameterName) throws SQLException {\n  parameterMetadata.readMetadataFromDbIfRequired();\n  for (int i=1; i <= parameterMetadata.getParameterCount(); i++) {\n    String name=parameterMetadata.getName(i);\n    if (name != null && name.equalsIgnoreCase(parameterName)) {\n      return i;\n    }\n  }\n  throw new SQLException(\"there is no parameter with the name \" + parameterName);\n}"}
{"ids": "34461", "raw_code": "public void sort(Comparator<? super SubRange> comparator){\n  Collections.sort(data,comparator);\n}"}
{"ids": "79816", "raw_code": "private void add(TreeMap<String,Object> map,String key,Object value){\n  Vector<Object> v=getList(map,key);\n  if (v == null) {\n    v=new Vector<>();\nsynchronized (map) {\n      map.put(key,v);\n    }\n  }\n  if (!v.contains(value)) {\n    v.add(value);\n  }\n}"}
{"ids": "12500", "raw_code": "private void blackmanHarris3s(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double scale=1.0 / (double)size / 0.45;\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.44959 - 0.49364 * Math.cos(twoPI * i / size) + 0.05677 * Math.cos(2 * twoPI * i / size));\n}"}
{"ids": "47556", "raw_code": "private WeekFields(DayOfWeek firstDayOfWeek,int minimalDaysInFirstWeek){\n  Objects.requireNonNull(firstDayOfWeek,\"firstDayOfWeek\");\n  if (minimalDaysInFirstWeek < 1 || minimalDaysInFirstWeek > 7) {\n    throw new IllegalArgumentException(\"Minimal number of days is invalid\");\n  }\n  this.firstDayOfWeek=firstDayOfWeek;\n  this.minimalDays=minimalDaysInFirstWeek;\n}"}
{"ids": "66596", "raw_code": "private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){\n  int fromX=(int)from.getX();\n  int fromY=(int)from.getY();\n  int toX=(int)to.getX();\n  int toY=(int)to.getY();\n  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);\n  if (steep) {\n    int temp=fromX;\n    fromX=fromY;\n    fromY=temp;\n    temp=toX;\n    toX=toY;\n    toY=temp;\n  }\n  int dx=Math.abs(toX - fromX);\n  int dy=Math.abs(toY - fromY);\n  int error=-dx >> 1;\n  int ystep=fromY < toY ? 1 : -1;\n  int xstep=fromX < toX ? 1 : -1;\n  int transitions=0;\n  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);\n  for (int x=fromX, y=fromY; x != toX; x+=xstep) {\n    boolean isBlack=image.get(steep ? y : x,steep ? x : y);\n    if (isBlack != inBlack) {\n      transitions++;\n      inBlack=isBlack;\n    }\n    error+=dy;\n    if (error > 0) {\n      if (y == toY) {\n        break;\n      }\n      y+=ystep;\n      error-=dx;\n    }\n  }\n  return new ResultPointsAndTransitions(from,to,transitions);\n}"}
{"ids": "55982", "raw_code": "private void placeGroups(){\n  startRow();\n  placeChild(mCloseButton,Gravity.END);\n  placeGroup(mMainGroup);\n  int customGroupWidth=0;\n  if (mCustomGroup != null) {\n    updateCustomGroupForRow(ROW_MAIN);\n    customGroupWidth=getWidthWithMargins(mCustomGroup);\n  }\n  int buttonGroupWidth=0;\n  if (mButtonGroup != null) {\n    updateButtonGroupForRow(ROW_MAIN);\n    buttonGroupWidth=getWidthWithMargins(mButtonGroup);\n  }\n  boolean customGroupOnMainRow=customGroupWidth <= availableWidth();\n  boolean buttonGroupOnMainRow=customGroupWidth + buttonGroupWidth <= availableWidth();\n  if (mCustomGroup != null) {\n    if (customGroupOnMainRow) {\n      mCustomGroup.gravity=(mButtonGroup != null && buttonGroupOnMainRow) ? Gravity.START : Gravity.END;\n    }\n else {\n      startRow();\n      updateCustomGroupForRow(ROW_OTHER);\n    }\n    placeGroup(mCustomGroup);\n  }\n  if (mButtonGroup != null) {\n    if (!buttonGroupOnMainRow) {\n      startRow();\n      updateButtonGroupForRow(ROW_OTHER);\n      if (mCustomGroup == null && mMessageTextView != null) {\n        LayoutParams lp=(LayoutParams)mMessageTextView.getLayoutParams();\n        int messageBottom=lp.top + mMessageTextView.getMeasuredHeight();\n        mTop=Math.max(mTop,messageBottom + 2 * mMargin);\n      }\n    }\n    placeGroup(mButtonGroup);\n    if (mCustomButton != null && !buttonGroupOnMainRow) {\n      LayoutParams primaryButtonLP=(LayoutParams)mPrimaryButton.getLayoutParams();\n      LayoutParams customButtonLP=(LayoutParams)mCustomButton.getLayoutParams();\n      LayoutParams messageLP=(LayoutParams)mMessageView.getLayoutParams();\n      if (customButtonLP.start >= messageLP.start) {\n        customButtonLP.start=messageLP.start;\n      }\n else {\n        customButtonLP.start=mMargin;\n      }\n      if (!mButtonGroup.isStacked) {\n        customButtonLP.top=primaryButtonLP.top + (mPrimaryButton.getMeasuredHeight() - mCustomButton.getMeasuredHeight()) / 2;\n      }\n    }\n  }\n  startRow();\n  if (buttonGroupOnMainRow) {\n    int layoutHeight=mBottom;\n    for (int i=0; i < getChildCount(); i++) {\n      View child=getChildAt(i);\n      int extraSpace=layoutHeight - child.getMeasuredHeight();\n      LayoutParams lp=(LayoutParams)child.getLayoutParams();\n      lp.top=extraSpace / 2;\n    }\n  }\n}"}
{"ids": "78147", "raw_code": "static HeapDoublesSketch copy(DoublesSketch sketch){\n  HeapDoublesSketch qsCopy;\n  qsCopy=HeapDoublesSketch.newInstance(sketch.getK());\n  qsCopy.n_=sketch.getN();\n  qsCopy.minValue_=sketch.getMinValue();\n  qsCopy.maxValue_=sketch.getMaxValue();\n  qsCopy.combinedBufferItemCapacity_=sketch.getCombinedBufferItemCapacity();\n  qsCopy.baseBufferCount_=sketch.getBaseBufferCount();\n  qsCopy.bitPattern_=sketch.getBitPattern();\n  double[] combBuf=sketch.getCombinedBuffer();\n  qsCopy.combinedBuffer_=Arrays.copyOf(combBuf,combBuf.length);\n  return qsCopy;\n}"}
{"ids": "85241", "raw_code": "public List<VerificationOK> verify(List<VerificationOK> result) throws IOException, GeneralSecurityException {\n  if (result == null)   result=new ArrayList<>();\n  while (pkcs7 != null) {\n    result.addAll(verifySignature());\n  }\n  return result;\n}"}
{"ids": "77374", "raw_code": "public SchemaField(String name,FieldType type){\n  this(name,type,type.properties,null);\n}"}
{"ids": "66092", "raw_code": "private void createDaySlot(ArrayList<MAssignmentSlot> list,MAssignmentSlot ma){\n  Timestamp start=ma.getStartTime();\n  GregorianCalendar calStart=new GregorianCalendar();\n  calStart.setTime(start);\n  calStart.set(Calendar.HOUR_OF_DAY,0);\n  calStart.set(Calendar.MINUTE,0);\n  calStart.set(Calendar.SECOND,0);\n  calStart.set(Calendar.MILLISECOND,0);\n  Timestamp end=ma.getEndTime();\n  GregorianCalendar calEnd=new GregorianCalendar();\n  calEnd.setTime(end);\n  calEnd.set(Calendar.HOUR_OF_DAY,0);\n  calEnd.set(Calendar.MINUTE,0);\n  calEnd.set(Calendar.SECOND,0);\n  calEnd.set(Calendar.MILLISECOND,0);\n  while (calStart.before(calEnd)) {\n    Timestamp xStart=new Timestamp(calStart.getTimeInMillis());\n    calStart.add(Calendar.DAY_OF_YEAR,1);\n    Timestamp xEnd=new Timestamp(calStart.getTimeInMillis());\n    MAssignmentSlot myMa=new MAssignmentSlot(xStart,xEnd,ma.getName(),ma.getDescription(),ma.getStatus());\n    list.add(myMa);\n  }\n}"}
{"ids": "29608", "raw_code": "public boolean isAttachment(String fileName){\n  return fileName.startsWith(ENTRY_ATTACHMENT);\n}"}
{"ids": "35530", "raw_code": "void subtractFlakes(int quantity){\n  for (int i=0; i < quantity; ++i) {\n    int index=numFlakes - i - 1;\n    flakes.remove(index);\n  }\n  setNumFlakes(numFlakes - quantity);\n}"}
{"ids": "5455", "raw_code": "public Optimized(int n,int s,int t,Iterator<EdgeInfo> edges){\n  super(n,s,t);\n  queue=new int[n];\n  QUEUE_SIZE=n;\n  capacity=new int[n][n];\n  flow=new int[n][n];\n  previous=new int[n];\n  visited=new int[n];\n  while (edges.hasNext()) {\n    EdgeInfo ei=edges.next();\n    capacity[ei.start][ei.end]=ei.capacity;\n  }\n}"}
{"ids": "23012", "raw_code": "public void put(Buffer buffer){\n  if (buffer.getLength() <= 2) {\n    return;\n  }\n  byte[] currentRtpPacketData=((byte[])buffer.getData());\n  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);\n  if (h264RtpHeaders.getFUI_F()) {\n    return;\n  }\n  if (reassembledData == null) {\n    timeStamp=buffer.getTimeStamp();\n    format=buffer.getFormat();\n    seqNumber=buffer.getSequenceNumber();\n    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();\n    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];\n    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];\n    reassembledDataHasStart=false;\n    reassembledDataHasEnd=false;\n  }\n  int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);\n  int payloadStartPosition=h264RtpHeaders.getHeaderSize();\n  int payloadLength=buffer.getLength() - h264RtpHeaders.getHeaderSize();\n  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {\n    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());\n    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());\n    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);\n    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);\n  }\n  reassembledDataSize[posSeq]=payloadLength;\n  reassembledDataFullSize+=payloadLength;\n  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);\n  videoOrientation=buffer.getVideoOrientation();\n}"}
{"ids": "26233", "raw_code": "public static Map<String,Object> badExpireEvenProcessor(DispatchContext dctx,Map<String,? extends Object> context){\n  GenericValue creditCard=(GenericValue)context.get(\"creditCard\");\n  String expireDate=creditCard.getString(\"expireDate\");\n  String lastNumberStr=expireDate.substring(expireDate.length() - 1);\n  int lastNumber=Integer.parseInt(lastNumberStr);\n  if (lastNumber % 2.0 == 0.0) {\n    return alwaysBadExpireProcessor(dctx,context);\n  }\n else {\n    return alwaysApproveProcessor(dctx,context);\n  }\n}"}
{"ids": "80045", "raw_code": "public ExpressionType negate(){\n  if (isNegated()) {\n    return new ExpressionType(typeString.replace(SUFFIX_NEGATED,\"\"));\n  }\n else {\n    return new ExpressionType(typeString + SUFFIX_NEGATED);\n  }\n}"}
{"ids": "65690", "raw_code": "protected void updatePathGreyness(TreePath ancestor){\n  boolean value=isPathCheckBox(ancestor);\n  Object ancestorNode=ancestor.getLastPathComponent();\n  if (!isPathCheckBox(ancestor)) {\n    addToCheckBoxPathsSet(ancestor);\n    return;\n  }\n}"}
{"ids": "39452", "raw_code": "protected ArrayList<String> useTokenizer(String s) throws Exception {\n  String[] tokens;\n  ArrayList<String> result;\n  int i;\n  tokens=Tokenizer.tokenize(m_Tokenizer,new String[]{s});\n  result=new ArrayList<String>();\n  for (i=0; i < tokens.length; i++) {\n    result.add(tokens[i]);\n  }\n  return result;\n}"}
{"ids": "39474", "raw_code": "public DOMStorableInputOutputFormat(DOMFactory factory,String description,String fileExtension,String mimeType){\n  this.factory=factory;\n  this.description=description;\n  this.fileExtension=fileExtension;\n  this.mimeType=mimeType;\n  try {\n    this.dataFlavor=new DataFlavor(mimeType);\n  }\n catch (  ClassNotFoundException ex) {\n    InternalError error=new InternalError(\"Unable to create data flavor for mime type:\" + mimeType);\n    error.initCause(ex);\n    throw error;\n  }\n}"}
{"ids": "50313", "raw_code": "default TypeParameterDeclaration asTypeParameter(){\n  throw new UnsupportedOperationException(String.format(\"%s is not a type parameter\",this));\n}"}
{"ids": "65737", "raw_code": "public void addColumn(String header){\n  if (getModel() instanceof DefaultTableModel) {\n    DefaultTableModel model=(DefaultTableModel)getModel();\n    model.addColumn(Util.cleanAmp(header));\n  }\n else   throw new IllegalArgumentException(\"Model must be instance of DefaultTableModel\");\n}"}
{"ids": "74314", "raw_code": "public void addMoveScript(String pathname){\n  _moveScripts.add(pathname);\n  setDirtyAndFirePropertyChange(\"addMoveScript\",pathname,null);\n}"}
{"ids": "6627", "raw_code": "private void checkAndAddResizeHandler(){\n  Component parent=getParent();\n  if (parent != null && resizable && resizeHandler == null) {\n    resizeHandler=new ResizeHandler();\n    parent.addComponentListener(resizeHandler);\n  }\n}"}
{"ids": "56435", "raw_code": "public int numberOfOwningShards(){\n  int count=0;\n  for (  ShardRouting shardEntry : this) {\n    if (shardEntry.state() != ShardRoutingState.RELOCATING) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"ids": "1837", "raw_code": "public String convertBinaryToHexString(byte[] bytes){\n  StringBuilder builder=new StringBuilder(bytes.length * 2);\n  for (  byte b : bytes) {\n    int highBitsInt=(b >> 4) & 0xF;\n    int lowBitsInt=b & 0xF;\n    builder.append(HEX_CHARS[highBitsInt]);\n    builder.append(HEX_CHARS[lowBitsInt]);\n  }\n  return builder.toString();\n}"}
{"ids": "32983", "raw_code": "protected static void writeHeader(XMLWriter writer){\n  XmlWriterUtil.writeCommentLineBreak(writer);\n  XmlWriterUtil.writeComment(writer,\"    \");\n  DateFormat dateFormat=new SimpleDateFormat(\"yyyy-MM-dd'T'hh:mm:ss\");\n  XmlWriterUtil.writeComment(writer,\"Generated by Maven Help Plugin on \" + dateFormat.format(new Date(System.currentTimeMillis())));\n  XmlWriterUtil.writeComment(writer,\"See: http://maven.apache.org/plugins/maven-help-plugin/\");\n  XmlWriterUtil.writeComment(writer,\"    \");\n  XmlWriterUtil.writeCommentLineBreak(writer);\n  XmlWriterUtil.writeLineBreak(writer);\n}"}
{"ids": "12871", "raw_code": "protected void close(){\n  try {\n    if (to != null)     to.close();\n    if (from != null)     from.close();\n  }\n catch (  IOException e) {\n  }\n  if (process != null)   process.destroy();\n  process=null;\n  to=null;\n  from=null;\n  errorLogger=null;\n}"}
{"ids": "49932", "raw_code": "public void clearParseIssues(){\n  parseIssues.clear();\n}"}
{"ids": "48826", "raw_code": "public int validate(GraphicsConfiguration gc){\n  int returnCode=VolatileImage.IMAGE_OK;\n  boolean lostSurfaceTmp=lostSurface;\n  lostSurface=false;\n  if (isAccelerationEnabled()) {\n    if (!isConfigValid(gc)) {\n      returnCode=VolatileImage.IMAGE_INCOMPATIBLE;\n    }\n else     if (sdAccel == null) {\n      sdAccel=initAcceleratedSurface();\n      if (sdAccel != null) {\n        sdCurrent=sdAccel;\n        sdBackup=null;\n        returnCode=VolatileImage.IMAGE_RESTORED;\n      }\n else {\n        sdCurrent=getBackupSurface();\n      }\n    }\n else     if (sdAccel.isSurfaceLost()) {\n      try {\n        restoreAcceleratedSurface();\n        sdCurrent=sdAccel;\n        sdAccel.setSurfaceLost(false);\n        sdBackup=null;\n        returnCode=VolatileImage.IMAGE_RESTORED;\n      }\n catch (      sun.java2d.InvalidPipeException e) {\n        sdCurrent=getBackupSurface();\n      }\n    }\n else     if (lostSurfaceTmp) {\n      returnCode=VolatileImage.IMAGE_RESTORED;\n    }\n  }\n else   if (sdAccel != null) {\n    sdCurrent=getBackupSurface();\n    sdAccel=null;\n    returnCode=VolatileImage.IMAGE_RESTORED;\n  }\n  if ((returnCode != VolatileImage.IMAGE_INCOMPATIBLE) && (sdCurrent != sdPrevious)) {\n    sdPrevious=sdCurrent;\n    returnCode=VolatileImage.IMAGE_RESTORED;\n  }\n  if (returnCode == VolatileImage.IMAGE_RESTORED) {\n    initContents();\n  }\n  return returnCode;\n}"}
{"ids": "16364", "raw_code": "private static String unsignedToString(final int value){\n  if (value >= 0) {\n    return Integer.toString(value);\n  }\n else {\n    return Long.toString(((long)value) & 0x00000000FFFFFFFFL);\n  }\n}"}
{"ids": "22494", "raw_code": "public ConnectionManager(ConnectionManagerConfiguration configuration) throws Exception {\n  _configuration=configuration;\n  if (_configuration == null) {\n    throw new ConnectionManagerException(\"Invalid null connection manager configuration.\");\n  }\n}"}
{"ids": "75103", "raw_code": "@SuppressWarnings(\"unchecked\") public Pids(){\n  Arrays.sort(PIDs,pidComparator);\n}"}
{"ids": "6569", "raw_code": "public void handleHeaderColumnReleased(Point p){\n  TABLE.setPressedColumnIndex(-1);\n  JTableHeader th=TABLE.getTableHeader();\n  int col=th.columnAtPoint(p);\n  if (col != -1)   th.repaint(th.getHeaderRect(col));\n}"}
{"ids": "50885", "raw_code": "public void createDevices(@NotNull List<Device> devices){\n  if (!initIfNecessary()) {\n    return;\n  }\n  for (  Device device : devices) {\n    String deviceIdBase=device.getId();\n    String deviceNameBase=device.getDisplayName();\n    int i=2;\n    while (isUserDevice(device)) {\n      String id=String.format(Locale.getDefault(),\"%1$s_%2$d\",deviceIdBase,i);\n      String name=String.format(Locale.getDefault(),\"%1$s_%2$d\",deviceNameBase,i);\n      device=cloneDeviceWithNewIdAndName(device,id,name);\n    }\n    ourDeviceManager.addUserDevice(device);\n  }\n  ourDeviceManager.saveUserDevices();\n}"}
{"ids": "48816", "raw_code": "public WritableRaster createCompatibleWritableRaster(int w,int h){\n  if (w <= 0 || h <= 0) {\n    throw new RasterFormatException(\"negative \" + ((w <= 0) ? \"width\" : \"height\"));\n  }\n  SampleModel sm=sampleModel.createCompatibleSampleModel(w,h);\n  return new ShortBandedRaster(sm,new Point(0,0));\n}"}
{"ids": "12427", "raw_code": "public void write(PrintWriter writer){\n  for (int i=0; i < count; i++) {\n    writer.println(keys[i] + \"\\t\" + values[i]);\n  }\n  writer.flush();\n}"}
{"ids": "16994", "raw_code": "@WorkerThread public synchronized int stopRecord(){\n  if (mRecorder == null) {\n    mState=STATE_IDLE;\n    return -1;\n  }\n  int length=-1;\nswitch (mState) {\ncase STATE_RECORDING:\n    try {\n      Thread.sleep(STOP_AUDIO_RECORD_DELAY_MILLIS);\n      mRecorder.stop();\n      length=(int)((System.currentTimeMillis() - mSampleStart) / 1000);\n    }\n catch (    RuntimeException e) {\n      Log.w(TAG,\"stopRecord fail, stop fail(no audio data recorded): \" + e.getMessage());\n    }\ncatch (    InterruptedException e) {\n      Log.w(TAG,\"stopRecord fail, stop fail(InterruptedException): \" + e.getMessage());\n    }\ncase STATE_PREPARED:\ncase STATE_IDLE:\ndefault :\n  try {\n    mRecorder.reset();\n  }\n catch (  RuntimeException e) {\n    Log.w(TAG,\"stopRecord fail, reset fail \" + e.getMessage());\n  }\nmRecorder.release();\nmRecorder=null;\nmState=STATE_IDLE;\nbreak;\n}\nreturn length;\n}"}
{"ids": "41220", "raw_code": "public XMLParser(final Class classToBeBound,final String[] schemas) throws XMLException {\n  try {\n    JAXBContext jc=JAXBContext.newInstance(classToBeBound);\n    marshaller=jc.createMarshaller();\n    marshaller.setSchema(XMLSchemaUtils.createSchema(schemas));\n    unmarshaller=jc.createUnmarshaller();\n    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schemas));\n  }\n catch (  JAXBException e) {\n    throw new XMLException(\"Cannot instantiate marshaller/unmarshaller for \" + classToBeBound,e);\n  }\n}"}
{"ids": "77957", "raw_code": "private void abort(Throwable t){\n  throwable=t;\n}"}
{"ids": "19450", "raw_code": "public static UserImpl signup(Map<String,String[]> parameters,String ip,List<SignupError> errors){\n  log.entering(\"GaeStore\",\"signup\");\n  String email=getFirst(parameters,\"email\");\n  String displayName=getFirst(parameters,\"displayName\");\n  String photoUrl=getFirst(parameters,\"photoUrl\");\n  String password=getFirst(parameters,\"password\");\n  String confirm=getFirst(parameters,\"confirm\");\n  if (Strings.isNullOrEmpty(email) || !EmailValidator.isValid(email)) {\n    errors.add(SignupError.INVALID_EMAIL);\n  }\n  if (Strings.isNullOrEmpty(displayName)) {\n    errors.add(SignupError.EMPTY_DISPLAY_NAME);\n  }\n  if (Strings.isNullOrEmpty(password)) {\n    errors.add(SignupError.INVALID_PASSWORD);\n  }\n else   if (!password.equals(confirm)) {\n    errors.add(SignupError.CONFIRM_MISMATCH);\n  }\n else   if (password.length() < 3) {\n    errors.add(SignupError.INVALID_PASSWORD);\n  }\n  PersistenceManager pm=pmf.getPersistenceManager();\n  try {\n    UserRecord record=findUserByEmail(pm,email);\n    if (record != null) {\n      errors.add(SignupError.EMAIL_REGISTERED);\n    }\n else     if (errors.isEmpty()) {\n      log.fine(\"Create new legacy user for: \" + email);\n      record=new UserRecord();\n      record.setEmail(email);\n      record.setDisplayName(displayName);\n      record.setPhotoUrl(photoUrl);\n      record.setPassword(password);\n      record.setTosAccepted(true);\n      record.setLastBigChangeTime(System.currentTimeMillis());\n      pm.makePersistent(record);\n      UserImpl user=createUserByRecord(record);\n      return user;\n    }\n  }\n  finally {\n    pm.close();\n  }\n  log.exiting(\"GaeStore\",\"signup\");\n  return null;\n}"}
{"ids": "44663", "raw_code": "@Override public final String readNullTerminatedAsciiString(){\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  byte b;\n  while (true) {\n    b=readByte();\n    if (b == 0) {\n      break;\n    }\n    baos.write(b);\n  }\n  byte[] buf=baos.toByteArray();\n  char[] chrBuf=new char[buf.length];\n  for (int x=0; x < buf.length; x++) {\n    chrBuf[x]=(char)buf[x];\n  }\n  return String.valueOf(chrBuf);\n}"}
{"ids": "1166", "raw_code": "private void thresholdBlur(Kernel kernel,int[] inPixels,int[] outPixels,int width,int height,boolean alpha){\n  float[] matrix=kernel.getKernelData(null);\n  int cols=kernel.getWidth();\n  int cols2=cols / 2;\n  for (int y=0; y < height; y++) {\n    int ioffset=y * width;\n    int outIndex=y;\n    for (int x=0; x < width; x++) {\n      float r=0, g=0, b=0, a=0;\n      int moffset=cols2;\n      int rgb1=inPixels[ioffset + x];\n      int a1=(rgb1 >> 24) & 0xff;\n      int r1=(rgb1 >> 16) & 0xff;\n      int g1=(rgb1 >> 8) & 0xff;\n      int b1=rgb1 & 0xff;\n      float af=0, rf=0, gf=0, bf=0;\n      for (int col=-cols2; col <= cols2; col++) {\n        float f=matrix[moffset + col];\n        if (f != 0) {\n          int ix=x + col;\n          if (!(0 <= ix && ix < width))           ix=x;\n          int rgb2=inPixels[ioffset + ix];\n          int a2=(rgb2 >> 24) & 0xff;\n          int r2=(rgb2 >> 16) & 0xff;\n          int g2=(rgb2 >> 8) & 0xff;\n          int b2=rgb2 & 0xff;\n          int d;\n          d=a1 - a2;\n          if (d >= -threshold && d <= threshold) {\n            a+=f * a2;\n            af+=f;\n          }\n          d=r1 - r2;\n          if (d >= -threshold && d <= threshold) {\n            r+=f * r2;\n            rf+=f;\n          }\n          d=g1 - g2;\n          if (d >= -threshold && d <= threshold) {\n            g+=f * g2;\n            gf+=f;\n          }\n          d=b1 - b2;\n          if (d >= -threshold && d <= threshold) {\n            b+=f * b2;\n            bf+=f;\n          }\n        }\n      }\n      a=af == 0 ? a1 : a / af;\n      r=rf == 0 ? r1 : r / rf;\n      g=gf == 0 ? g1 : g / gf;\n      b=bf == 0 ? b1 : b / bf;\n      int ia=alpha ? PixelUtils.clamp((int)(a + 0.5)) : 0xff;\n      int ir=PixelUtils.clamp((int)(r + 0.5));\n      int ig=PixelUtils.clamp((int)(g + 0.5));\n      int ib=PixelUtils.clamp((int)(b + 0.5));\n      outPixels[outIndex]=(ia << 24) | (ir << 16) | (ig << 8)| ib;\n      outIndex+=height;\n    }\n  }\n}"}
{"ids": "63490", "raw_code": "void closeSilently(ServerSocket socket){\n  try {\n    socket.close();\n  }\n catch (  Exception e) {\n  }\n}"}
{"ids": "36284", "raw_code": "public ExpressionParserBuilder withProcess(Process process){\n  this.process=process;\n  return this;\n}"}
{"ids": "82149", "raw_code": "void addAssociatedComponentAt(int index,Component cmp){\n  if (comps == null) {\n    comps=new Vector();\n  }\n  comps.insertElementAt(cmp,index);\n}"}
{"ids": "31366", "raw_code": "private static byte[] readClass(final InputStream is) throws IOException {\n  if (is == null) {\n    throw new IOException(\"Class not found\");\n  }\n  byte[] b=new byte[is.available()];\n  int len=0;\n  while (true) {\n    int n=is.read(b,len,b.length - len);\n    if (n == -1) {\n      if (len < b.length) {\n        byte[] c=new byte[len];\n        System.arraycopy(b,0,c,0,len);\n        b=c;\n      }\n      return b;\n    }\n    len+=n;\n    if (len == b.length) {\n      int last=is.read();\n      if (last < 0) {\n        return b;\n      }\n      byte[] c=new byte[b.length + 1000];\n      System.arraycopy(b,0,c,0,len);\n      c[len++]=(byte)last;\n      b=c;\n    }\n  }\n}"}
{"ids": "19145", "raw_code": "static String stringFromPacket(DatagramPacket packet){\n  return new String(packet.getData(),0,packet.getLength());\n}"}
{"ids": "17793", "raw_code": "private String readAttributeName(boolean returnLowerCase){\n  skipWhitespace();\n  int c=find(ATTRIBUTE_NAME_TERMINATORS);\n  String forSubstring=returnLowerCase ? inputLowerCase : input;\n  String result=pos < c ? forSubstring.substring(pos,c) : null;\n  pos=c;\n  return result;\n}"}
{"ids": "80367", "raw_code": "public boolean contains(final Entity entity){\n  if (entity == null) {\n    return false;\n  }\n  final IRPZone entityZone=entity.getZone();\n  return zone.equals(entityZone) && zone.has(entity.getID()) && shape.contains(entity.getX(),entity.getY());\n}"}
{"ids": "65146", "raw_code": "protected void checkOffscreenImage(Dimension d){\n  if (doubleBuffered) {\n    if (offscreen == null || offscreen.getWidth() != d.width || offscreen.getHeight() != d.height) {\n      offscreen=new BufferedImage(d.width,d.height,BufferedImage.TYPE_INT_ARGB);\n      offscreenG2d=offscreen.createGraphics();\n    }\n  }\n}"}
{"ids": "61248", "raw_code": "public void warning(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {\n  String formattedMsg=e.getMessage();\n  SAXSourceLocator locator=getLocator();\n  ErrorListener handler=m_stylesheetProcessor.getErrorListener();\n  try {\n    handler.warning(new TransformerException(formattedMsg,locator));\n  }\n catch (  TransformerException te) {\n    throw new org.xml.sax.SAXException(te);\n  }\n}"}
{"ids": "40609", "raw_code": "public static boolean checkChrootPath(String zkHost,boolean create) throws KeeperException, InterruptedException {\n  if (!containsChroot(zkHost)) {\n    return true;\n  }\n  log.info(\"zkHost includes chroot\");\n  String chrootPath=zkHost.substring(zkHost.indexOf(\"/\"),zkHost.length());\n  SolrZkClient tmpClient=new SolrZkClient(zkHost.substring(0,zkHost.indexOf(\"/\")),60 * 1000);\n  boolean exists=tmpClient.exists(chrootPath,true);\n  if (!exists && create) {\n    tmpClient.makePath(chrootPath,false,true);\n    exists=true;\n  }\n  tmpClient.close();\n  return exists;\n}"}
{"ids": "60109", "raw_code": "public void addXValue(String xVal){\n  mXValAverageLength=(mXValAverageLength + xVal.length()) / 2f;\n  mXVals.add(xVal);\n}"}
{"ids": "79446", "raw_code": "public long timeSinceStart(){\n  long currentTime=System.currentTimeMillis();\n  return currentTime - startTime;\n}"}
{"ids": "81854", "raw_code": "public void fillRectRadialGradient(Object graphics,int startColor,int endColor,int x,int y,int width,int height,float relativeX,float relativeY,float relativeSize){\n  int centerX=(int)(width * (1 - relativeX));\n  int centerY=(int)(height * (1 - relativeY));\n  int size=(int)(Math.min(width,height) * relativeSize);\n  int x2=(int)(width / 2 - (size * relativeX));\n  int y2=(int)(height / 2 - (size * relativeY));\n  boolean aa=isAntiAliased(graphics);\n  setAntiAliased(graphics,false);\n  if (cacheRadialGradients()) {\n    Object r=findCachedGradient(radialGradientCache,startColor,endColor,x,y,width,height,true,centerX,centerY,size);\n    if (r != null) {\n      drawImage(graphics,r,x,y);\n    }\n else {\n      r=createMutableImage(width,height,0xffffffff);\n      Object imageGraphics=getNativeGraphics(r);\n      setColor(imageGraphics,endColor);\n      fillRect(imageGraphics,0,0,width,height);\n      fillRadialGradientImpl(imageGraphics,startColor,endColor,x2,y2,size,size,0,360);\n      drawImage(graphics,r,x,y);\n      if (radialGradientCache == null) {\n        radialGradientCache=new Hashtable();\n      }\n      storeCachedGradient(r,radialGradientCache,startColor,endColor,x,y,true,centerX,centerY,size);\n    }\n  }\n else {\n    setColor(graphics,endColor);\n    fillRect(graphics,x,y,width,height);\n    fillRadialGradientImpl(graphics,startColor,endColor,x + x2,y + y2,size,size,0,360);\n  }\n  if (aa) {\n    setAntiAliased(graphics,true);\n  }\n}"}
{"ids": "47040", "raw_code": "public Formatter format(Locale l,String format,Object... args){\n  ensureOpen();\n  int last=-1;\n  int lasto=-1;\n  FormatString[] fsa=parse(format);\n  for (int i=0; i < fsa.length; i++) {\n    FormatString fs=fsa[i];\n    int index=fs.index();\n    try {\nswitch (index) {\ncase -2:\n        fs.print(null,l);\n      break;\ncase -1:\n    if (last < 0 || (args != null && last > args.length - 1))     throw new MissingFormatArgumentException(fs.toString());\n  fs.print((args == null ? null : args[last]),l);\nbreak;\ncase 0:\nlasto++;\nlast=lasto;\nif (args != null && lasto > args.length - 1) throw new MissingFormatArgumentException(fs.toString());\nfs.print((args == null ? null : args[lasto]),l);\nbreak;\ndefault :\nlast=index - 1;\nif (args != null && last > args.length - 1) throw new MissingFormatArgumentException(fs.toString());\nfs.print((args == null ? null : args[last]),l);\nbreak;\n}\n}\n catch (IOException x) {\nlastException=x;\n}\n}\nreturn this;\n}"}
{"ids": "61402", "raw_code": "DOMStringListImpl(String[] params){\n  fStrings=new Vector();\n  if (params != null) {\n    for (int i=0; i < params.length; i++) {\n      fStrings.add(params[i]);\n    }\n  }\n}"}
{"ids": "39596", "raw_code": "public Instant watermarkHold(){\n  long min=Long.MAX_VALUE;\n  for (  Instant hold : watermarkHolds.values()) {\n    min=Math.min(min,hold.getMillis());\n  }\n  return new Instant(min);\n}"}
{"ids": "49268", "raw_code": "@Override public final boolean isCapPresent(int cap){\n  return ((oglCaps.getCaps() & cap) != 0);\n}"}
{"ids": "72146", "raw_code": "public static <T>MenuResult<T> again(){\n  return new MenuResult<>(Type.AGAIN,Collections.<T>emptyList());\n}"}
{"ids": "85718", "raw_code": "@SuppressWarnings(\"unchecked\") public V put(K key,V value){\n  final int hash=key.hashCode();\n  int index=indexOf(key,hash);\n  if (index >= 0) {\n    index=(index << 1) + 1;\n    final V old=(V)mArray[index];\n    mArray[index]=value;\n    return old;\n  }\n  index=~index;\n  if (mSize >= mHashes.length) {\n    final int n=mSize >= (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (mSize >= BASE_SIZE ? (BASE_SIZE * 2) : BASE_SIZE);\n    final int[] ohashes=mHashes;\n    final Object[] oarray=mArray;\n    allocArrays(n);\n    if (mHashes.length > 0) {\n      System.arraycopy(ohashes,0,mHashes,0,ohashes.length);\n      System.arraycopy(oarray,0,mArray,0,oarray.length);\n    }\n    freeArrays(ohashes,oarray,mSize);\n  }\n  if (index < mSize) {\n    System.arraycopy(mHashes,index,mHashes,index + 1,mSize - index);\n    System.arraycopy(mArray,index << 1,mArray,(index + 1) << 1,(mSize - index) << 1);\n  }\n  mHashes[index]=hash;\n  mArray[index << 1]=key;\n  mArray[(index << 1) + 1]=value;\n  mSize++;\n  return null;\n}"}
{"ids": "42601", "raw_code": "public Long addNewUser(String SID,String username,String userpass,String lastname,String firstname,String email,String additionalname,String street,String zip,String fax,long states_id,String town,long language_id,String baseURL) throws AxisFault {\n  try {\n    Long users_id=sessionManagement.checkSession(SID);\n    Long user_level=userManagement.getUserLevelByID(users_id);\n    if (authLevelManagement.checkWebServiceLevel(user_level)) {\n      Configuration conf=cfgManagement.getConfKey(3L,\"default.timezone\");\n      String jName_timeZone=\"\";\n      if (conf != null) {\n        jName_timeZone=conf.getConf_value();\n      }\n      Long user_id=userManagement.registerUser(username,userpass,lastname,firstname,email,new Date(),street,additionalname,fax,zip,states_id,town,language_id,\"\",baseURL,true,jName_timeZone);\n      if (user_id == null || user_id < 0) {\n        return user_id;\n      }\n      Users user=userManagement.getUserById(user_id);\n      user.setStatus(1);\n      user.setUpdatetime(new Date());\n      userManagement.updateUser(user);\n      return user_id;\n    }\n else {\n      return new Long(-26);\n    }\n  }\n catch (  Exception err) {\n    log.error(\"setUserObject\",err);\n    throw new AxisFault(err.getMessage());\n  }\n}"}
{"ids": "73094", "raw_code": "public static void interpreterOnly(Runnable runnable){\n  runnable.run();\n}"}
{"ids": "9711", "raw_code": "public DAddExtensionType(JDialog parent,X509Extension extensions){\n  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);\n  setTitle(res.getString(\"DAddExtensionType.Title\"));\n  this.extensions=extensions;\n  initComponents();\n}"}
{"ids": "46401", "raw_code": "private int hash(GraphicsConfiguration config,int w,int h,Object... args){\n  int hash;\n  hash=(config != null ? config.hashCode() : 0);\n  hash=31 * hash + w;\n  hash=31 * hash + h;\n  hash=31 * hash + Arrays.deepHashCode(args);\n  return hash;\n}"}
{"ids": "46413", "raw_code": "protected void paintText(Graphics g,AbstractButton b,Rectangle textRect,String text){\n  paintText(g,(JComponent)b,textRect,text);\n}"}
{"ids": "37412", "raw_code": "public static boolean usesSecondOperand(final Integer mnemonic){\n  return !mnemonic.equals(ReilHelpers._OPCODE_NOP) && !mnemonic.equals(ReilHelpers._OPCODE_BISZ) && !mnemonic.equals(ReilHelpers._OPCODE_STR)&& !mnemonic.equals(ReilHelpers._OPCODE_STM)&& !mnemonic.equals(ReilHelpers._OPCODE_LDM)&& !mnemonic.equals(ReilHelpers._OPCODE_JCC);\n}"}
{"ids": "27078", "raw_code": "public RhythmGroup addOverlay(RhythmOverlay overlay){\n  mOverlays.add(overlay);\n  if (mCurrentOverlayIndex == NO_OVERLAY) {\n    selectOverlay(0);\n  }\n  return this;\n}"}
{"ids": "82559", "raw_code": "public char[] toCharArray(){\n  char[] buffer=new char[count];\n  System.arraycopy(value,offset,buffer,0,count);\n  return buffer;\n}"}
{"ids": "39829", "raw_code": "private File[] filterFiles(final File[] toFilter,final String fileName){\n  if (fileName != null && toFilter != null) {\n    final File fileAsFilter=new File(fileName);\n    for (    File file : toFilter) {\n      if (file.compareTo(fileAsFilter) == 0) {\n        return new File[]{fileAsFilter};\n      }\n    }\n    return new File[0];\n  }\n  return toFilter;\n}"}
{"ids": "23083", "raw_code": "public Fp(ECCurve curve,ECFieldElement x,ECFieldElement y){\n  this(curve,x,y,false);\n}"}
{"ids": "35470", "raw_code": "private void pullEvent(){\n  final int newScrollValue;\n  final int itemDimension;\n  final float initialMotionValue, lastMotionValue;\nswitch (getPullToRefreshScrollDirection()) {\ncase HORIZONTAL:\n    initialMotionValue=mInitialMotionX;\n  lastMotionValue=mLastMotionX;\nbreak;\ncase VERTICAL:\ndefault :\ninitialMotionValue=mInitialMotionY;\nlastMotionValue=mLastMotionY;\nbreak;\n}\nswitch (mCurrentMode) {\ncase PULL_FROM_END:\nnewScrollValue=Math.round(Math.max(initialMotionValue - lastMotionValue,0) / FRICTION);\nitemDimension=getFooterSize();\nbreak;\ncase PULL_FROM_START:\ndefault :\nnewScrollValue=Math.round(Math.min(initialMotionValue - lastMotionValue,0) / FRICTION);\nitemDimension=getHeaderSize();\nbreak;\n}\nsetHeaderScroll(newScrollValue);\nif (newScrollValue != 0 && !isRefreshing()) {\nfloat scale=Math.abs(newScrollValue) / (float)itemDimension;\nswitch (mCurrentMode) {\ncase PULL_FROM_END:\nmFooterLayout.onPull(scale);\nbreak;\ncase PULL_FROM_START:\ndefault :\nmHeaderLayout.onPull(scale);\nbreak;\n}\nif (mState != State.PULL_TO_REFRESH && itemDimension >= Math.abs(newScrollValue)) {\nsetState(State.PULL_TO_REFRESH);\n}\n else if ((mState == State.PULL_TO_REFRESH && itemDimension < Math.abs(newScrollValue)) || (mState == State.RESET && itemDimension < Math.abs(newScrollValue))) {\nsetState(State.RELEASE_TO_REFRESH);\n}\n}\n}"}
{"ids": "12196", "raw_code": "private File writePrivateKeyFile() throws GitException {\n  final File keyDirectory=new File(rootFolder,host);\n  if (!keyDirectory.exists()) {\n    keyDirectory.mkdirs();\n  }\n  final File keyFile=new File(keyDirectory,DEFAULT_KEY_NAME);\n  try (FileOutputStream fos=new FileOutputStream(keyFile)){\n    fos.write(sshKey);\n  }\n catch (  IOException e) {\n    LOG.error(\"Can't store ssh key. \",e);\n    throw new GitException(\"Can't store ssh key. \");\n  }\n  protectPrivateKeyFile(keyFile);\n  return keyFile;\n}"}
{"ids": "46249", "raw_code": "protected boolean drawLeftBorder(Component c,Graphics g,int x,int y,int width,int height){\n  if (super.drawLeftBorder(c,g,x,y,width,height) && frame.isResizable()) {\n    g.setColor(getFrameHighlight());\n    int topY=y + CORNER_SIZE;\n    g.drawLine(x,topY,x + 4,topY);\n    int bottomY=height - CORNER_SIZE;\n    g.drawLine(x + 1,bottomY,x + 5,bottomY);\n    g.setColor(getFrameShadow());\n    g.drawLine(x + 1,topY - 1,x + 5,topY - 1);\n    g.drawLine(x + 1,bottomY - 1,x + 5,bottomY - 1);\n    return true;\n  }\n  return false;\n}"}
{"ids": "72281", "raw_code": "public static boolean isFileReadable(String fileName){\n  final File file=new File(fileName);\n  return file.exists() && file.canRead();\n}"}
{"ids": "51676", "raw_code": "public static String hintingSize(Font font){\n  int instrSize=0;\n  LocaTable locaTable=FontUtils.getLocaTable(font);\n  GlyphTable glyfTable=FontUtils.getGlyphTable(font);\n  for (int i=0; i < locaTable.numGlyphs(); i++) {\n    Glyph glyph=glyfTable.glyph(locaTable.glyphOffset(i),locaTable.glyphLength(i));\n    instrSize+=glyph.instructionSize();\n  }\n  double percentage=instrSize * 100.0 / glyfTable.headerLength();\n  return String.format(\"%d bytes (%s%% of glyf table)\",instrSize,twoDecimalPlaces.format(percentage));\n}"}
{"ids": "25027", "raw_code": "public static void premain(String agentArgs,Instrumentation inst){\n  instrumentation=inst;\n  LOGGER.info(\"inspectIT Agent: Starting initialization...\");\n  checkForCorrectSetup();\n  try {\n    @SuppressWarnings(\"resource\") InspectItClassLoader classLoader=new InspectItClassLoader(new URL[0]);\n    Class<?> agentClazz=classLoader.loadClass(INSPECTIT_AGENT);\n    Constructor<?> constructor=agentClazz.getConstructor(File.class);\n    Object realAgent=constructor.newInstance(getInspectItAgentJarFileLocation());\n    Agent.agent=(IAgent)realAgent;\n    preloadClasses();\n    LOGGER.info(\"inspectIT Agent: Initialization complete...\");\n    analyzeAlreadyLoadedClasses();\n    inst.addTransformer(new JavaAgent());\n  }\n catch (  Exception e) {\n    LOGGER.severe(\"Something unexpected happened while trying to initialize the Agent, aborting!\");\n    e.printStackTrace();\n  }\n}"}
{"ids": "2266", "raw_code": "private static float systemPropertyValue(String name){\n  String floatString=System.getProperty(name);\n  if (floatString == null)   return Float.NaN;\n  try {\n    return Float.parseFloat(floatString);\n  }\n catch (  NumberFormatException ex) {\n    throw new IllegalArgumentException(String.format(\"Bad float value in system property %s=%s\",name,floatString));\n  }\n}"}
{"ids": "79799", "raw_code": "@ZapApiIgnore public boolean isConfirmRemoveProxyExcludedDomain(){\n  return this.confirmRemoveProxyExcludeDomain;\n}"}
{"ids": "63684", "raw_code": "public FloatColumn(int nrows,int capacity,float defaultValue){\n  super(float.class,new Float(defaultValue));\n  if (capacity < nrows) {\n    throw new IllegalArgumentException(\"Capacity value can not be less than the row count.\");\n  }\n  m_values=new float[capacity];\n  Arrays.fill(m_values,defaultValue);\n  m_size=nrows;\n}"}
{"ids": "32221", "raw_code": "private boolean addLocalKey(KeyCacheObject key,AffinityTopologyVersion topVer,Collection<KeyCacheObject> distributedKeys) throws IgniteCheckedException {\n  GridDistributedCacheEntry entry=cctx.colocated().entryExx(key,topVer,false);\n  assert !entry.detached();\n  if (!cctx.isAll(entry,filter)) {\n    if (log.isDebugEnabled())     log.debug(\"Entry being locked did not pass filter (will not lock): \" + entry);\n    onComplete(false,false);\n    return false;\n  }\n  GridCacheMvccCandidate cand=addEntry(entry);\n  if (cand != null && !cand.reentry())   distributedKeys.add(key);\n  return inTx() && cand == null;\n}"}
{"ids": "11837", "raw_code": "public SpatialIndex(String shpFilename) throws IOException {\n  this.shpFileName=shpFilename;\n  if (logger.isLoggable(Level.FINE)) {\n    logger.fine(\"SpatialIndex(\" + shpFilename + \");\");\n  }\n}"}
{"ids": "34991", "raw_code": "public int invokeCompiler(){\n  List<String> args=getExecArguments();\n  for (int i=0; i < args.size(); i++) {\n    String arg=args.get(i);\n    if (arg.startsWith(\"-AoutputArgsToFile=\")) {\n      String fileName=arg.substring(19);\n      args.remove(i);\n      outputArgumentsToFile(fileName,args);\n      break;\n    }\n  }\n  return ExecUtil.execute(args.toArray(new String[args.size()]),System.out,System.err);\n}"}
{"ids": "83374", "raw_code": "static double fourNeighborsIDW(SpatialGrid sg,double xCoord,double yCoord,double exp){\n  double xDif=(xCoord - sg.getXmin()) % sg.getResolution();\n  double yDif=(yCoord - sg.getYmin()) % sg.getResolution();\n  if (xDif == 0 && yDif == 0) {\n    return sg.getValue(xCoord,yCoord);\n  }\n  double x1=xCoord - xDif;\n  double x2=x1 + sg.getResolution();\n  double y1=yCoord - yDif;\n  double y2=y1 + sg.getResolution();\n  double d11=Math.pow(distance(x1,y1,xCoord,yCoord),exp);\n  double d12=Math.pow(distance(x1,y2,xCoord,yCoord),exp);\n  double d21=Math.pow(distance(x2,y1,xCoord,yCoord),exp);\n  double d22=Math.pow(distance(x2,y2,xCoord,yCoord),exp);\n  if (xCoord == sg.getXmax()) {\n    return (sg.getValue(x1,y1) / d11 + sg.getValue(x1,y2) / d12) / (1 / d11 + 1 / d12);\n  }\n  if (yCoord == sg.getYmax()) {\n    return (sg.getValue(x1,y1) / d11 + sg.getValue(x2,y1) / d21) / (1 / d11 + 1 / d21);\n  }\n  return (sg.getValue(x1,y1) / d11 + sg.getValue(x1,y2) / d12 + sg.getValue(x2,y1) / d21 + sg.getValue(x2,y2) / d22) / (1 / d11 + 1 / d12 + 1 / d21 + 1 / d22);\n}"}
{"ids": "31804", "raw_code": "public PojoValueField(PropertyDescriptor desc){\n  super(desc);\n}"}
{"ids": "67351", "raw_code": "public UrlFilterRule(String ruleText){\n  super(ruleText);\n  String urlRuleText=ruleText;\n  if (StringUtils.startsWith(urlRuleText,MASK_WHITE_LIST)) {\n    urlRuleText=urlRuleText.substring(MASK_WHITE_LIST.length());\n    whiteListRule=true;\n  }\n  int optionsIndex=StringUtils.lastIndexOf(urlRuleText,OPTIONS_DELIMITER);\n  if (optionsIndex > -1) {\n    urlRuleText=urlRuleText.substring(0,optionsIndex);\n  }\n  urlRuleText=toPunycode(urlRuleText);\n  boolean regexRule=urlRuleText.startsWith(MASK_REGEX_RULE) && urlRuleText.endsWith(MASK_REGEX_RULE);\n  if (!regexRule) {\n    shortcut=findShortcut(urlRuleText);\n  }\n}"}
{"ids": "35184", "raw_code": "public static boolean isDrmConvertNeeded(String mimetype){\n  return MIMETYPE_DRM_MESSAGE.equals(mimetype);\n}"}
{"ids": "53996", "raw_code": "public static String pad(String original,int length,char padChar){\n  if (original.length() >= length)   return original;\n  StringBuilder sb=new StringBuilder(original);\n  while (sb.length() < length) {\n    sb.append(padChar);\n  }\n  return sb.toString();\n}"}
{"ids": "11508", "raw_code": "public void propertyChange(PropertyChangeEvent evt){\n  String propName=evt.getPropertyName();\n  if (propName == MapBean.CursorProperty) {\n    fallbackMapBeanCursor=((Cursor)evt.getNewValue());\n  }\n else {\n    if (propName == MouseDelegator.ActiveModeProperty) {\n      MapMouseMode mmm=(MapMouseMode)evt.getNewValue();\n      setResetCursor(mmm.getModeCursor());\n    }\n else     if (propName == MapBean.LayersProperty) {\n      resetForLayers((Layer[])evt.getNewValue(),(Layer[])evt.getOldValue());\n    }\n else     if (propName != MapBean.ProjectionProperty) {\n      return;\n    }\n    setAllLabels(fudgeString);\n  }\n  initToolTip();\n}"}
{"ids": "29983", "raw_code": "private void checkForNight(final ZonedDateTime TIME){\n  int hour=TIME.getHour();\n  int minute=TIME.getMinute();\n  if (0 <= hour && minute >= 0 && hour <= 5 && minute <= 59 || 17 <= hour && minute <= 59 && hour <= 23 && minute <= 59) {\n    if (isNightMode())     return;\n    setNightMode(true);\n  }\n else {\n    if (!isNightMode())     return;\n    setNightMode(false);\n  }\n}"}
{"ids": "7512", "raw_code": "@Override public int calculateOffsetY(){\n  return -(int)(Math.sin(this.angle) * this.distance) - this.shadowSize;\n}"}
{"ids": "72493", "raw_code": "private double[] concatenateSamples(final double[] x,final double[] y){\n  final double[] z=new double[x.length + y.length];\n  System.arraycopy(x,0,z,0,x.length);\n  System.arraycopy(y,0,z,x.length,y.length);\n  return z;\n}"}
{"ids": "81879", "raw_code": "@Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){\n  paint.setColor(renderer.getColor());\n  final float stroke=paint.getStrokeWidth();\n  if (renderer.isFillPoints()) {\n    paint.setStyle(Style.FILL);\n  }\n else {\n    paint.setStrokeWidth(renderer.getPointStrokeWidth());\n    paint.setStyle(Style.STROKE);\n  }\n  int length=points.size();\n  PointStyle ps=renderer.getPointStyle();\n  if (ps == PointStyle.X) {\n    paint.setStrokeWidth(renderer.getPointStrokeWidth());\n    for (int i=0; i < length; i+=2) {\n      drawX(canvas,paint,points.get(i),points.get(i + 1));\n    }\n  }\n else {\n    if (ps == PointStyle.CIRCLE) {\n      for (int i=0; i < length; i+=2) {\n        drawCircle(canvas,paint,points.get(i),points.get(i + 1));\n      }\n    }\n else {\n      if (ps == PointStyle.TRIANGLE) {\n        float[] path=new float[6];\n        for (int i=0; i < length; i+=2) {\n          drawTriangle(canvas,paint,path,points.get(i),points.get(i + 1));\n        }\n      }\n else {\n        if (ps == PointStyle.SQUARE) {\n          for (int i=0; i < length; i+=2) {\n            drawSquare(canvas,paint,points.get(i),points.get(i + 1));\n          }\n        }\n else {\n          if (ps == PointStyle.DIAMOND) {\n            float[] path=new float[8];\n            for (int i=0; i < length; i+=2) {\n              drawDiamond(canvas,paint,path,points.get(i),points.get(i + 1));\n            }\n          }\n else {\n            if (ps == PointStyle.POINT) {\n              for (int i=0; i < length; i+=2) {\n                canvas.drawPoint(points.get(i),points.get(i + 1),paint);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  paint.setStrokeWidth(stroke);\n}"}
{"ids": "18123", "raw_code": "public final void pushSubContextList(SubContextList iter){\n  m_axesIteratorStack.push(iter);\n}"}
{"ids": "43294", "raw_code": "public String handleWord(String aWord){\n  Matcher m=conditionPattern.matcher(aWord);\n  if (m != null && m.matches()) {\n    if (type.equals(AffixType.PREFIX)) {\n      return handlePrefix(aWord);\n    }\n else     if (type.equals(AffixType.SUFFIX)) {\n      return handleSuffix(aWord);\n    }\n  }\n  return null;\n}"}
{"ids": "40572", "raw_code": "public static void round(Calendar c,String unit){\n  Integer uu=CALENDAR_UNITS.get(unit);\n  if (null == uu) {\n    throw new IllegalArgumentException(\"Rounding Unit not recognized: \" + unit);\n  }\n  int u=uu.intValue();\nswitch (u) {\ncase Calendar.YEAR:\n    c.clear(Calendar.MONTH);\ncase Calendar.MONTH:\n  c.clear(Calendar.DAY_OF_MONTH);\nc.clear(Calendar.DAY_OF_WEEK);\nc.clear(Calendar.DAY_OF_WEEK_IN_MONTH);\nc.clear(Calendar.DAY_OF_YEAR);\nc.clear(Calendar.WEEK_OF_MONTH);\nc.clear(Calendar.WEEK_OF_YEAR);\ncase Calendar.DATE:\nc.clear(Calendar.HOUR_OF_DAY);\nc.clear(Calendar.HOUR);\nc.clear(Calendar.AM_PM);\ncase Calendar.HOUR_OF_DAY:\nc.clear(Calendar.MINUTE);\ncase Calendar.MINUTE:\nc.clear(Calendar.SECOND);\ncase Calendar.SECOND:\nc.clear(Calendar.MILLISECOND);\nbreak;\ndefault :\nthrow new IllegalStateException(\"No logic for rounding value (\" + u + \") \"+ unit);\n}\n}"}
{"ids": "65442", "raw_code": "private static final char[] growBuffer(char[] dest,int index,int size){\n  char[] copy=new char[size];\n  if (index > 0) {\n    System.arraycopy(dest,0,copy,0,index);\n  }\n  return copy;\n}"}
{"ids": "40540", "raw_code": "public boolean sync(){\n  if (ulog == null) {\n    return false;\n  }\n  log.info(msg() + \"START replicas=\" + replicas+ \" nUpdates=\"+ nUpdates);\n  if (!(ulog.getState() == UpdateLog.State.ACTIVE || ulog.getState() == UpdateLog.State.REPLAYING)) {\n    log.error(msg() + \"ERROR, update log not in ACTIVE or REPLAY state. \" + ulog);\n  }\n  if (debug) {\n    if (startingVersions != null) {\n      log.debug(msg() + \"startingVersions=\" + startingVersions.size()+ \" \"+ startingVersions);\n    }\n  }\n  for (  String replica : replicas) {\n    requestVersions(replica);\n  }\n  recentUpdates=ulog.getRecentUpdates();\n  try {\n    ourUpdates=recentUpdates.getVersions(nUpdates);\n  }\n  finally {\n    recentUpdates.close();\n  }\n  Collections.sort(ourUpdates,absComparator);\n  if (startingVersions != null) {\n    if (startingVersions.size() == 0) {\n      log.warn(\"no frame of reference to tell if we've missed updates\");\n      return false;\n    }\n    Collections.sort(startingVersions,absComparator);\n    ourLowThreshold=percentile(startingVersions,0.8f);\n    ourHighThreshold=percentile(startingVersions,0.2f);\n    long smallestNewUpdate=Math.abs(ourUpdates.get(ourUpdates.size() - 1));\n    if (Math.abs(startingVersions.get(0)) < smallestNewUpdate) {\n      log.warn(msg() + \"too many updates received since start - startingUpdates no longer overlaps with our currentUpdates\");\n      return false;\n    }\n    List<Long> newList=new ArrayList<>(ourUpdates);\n    for (    Long ver : startingVersions) {\n      if (Math.abs(ver) < smallestNewUpdate) {\n        newList.add(ver);\n      }\n    }\n    ourUpdates=newList;\n  }\n else {\n    if (ourUpdates.size() > 0) {\n      ourLowThreshold=percentile(ourUpdates,0.8f);\n      ourHighThreshold=percentile(ourUpdates,0.2f);\n    }\n else {\n      log.info(msg() + \"DONE.  We have no versions.  sync failed.\");\n      return false;\n    }\n  }\n  ourUpdateSet=new HashSet<>(ourUpdates);\n  requestedUpdateSet=new HashSet<>(ourUpdates);\n  for (; ; ) {\n    ShardResponse srsp=shardHandler.takeCompletedOrError();\n    if (srsp == null)     break;\n    boolean success=handleResponse(srsp);\n    if (!success) {\n      log.info(msg() + \"DONE. sync failed\");\n      shardHandler.cancelAll();\n      return false;\n    }\n  }\n  log.info(msg() + \"DONE. sync succeeded\");\n  return true;\n}"}
{"ids": "13216", "raw_code": "private void contentSpecTree(int contentSpecIndex,XMLContentSpec contentSpec,ChildrenList children){\n  getContentSpec(contentSpecIndex,contentSpec);\n  if (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_LEAF || (contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY || (contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_LOCAL || (contentSpec.type & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_OTHER) {\n    if (children.length == children.qname.length) {\n      QName[] newQName=new QName[children.length * 2];\n      System.arraycopy(children.qname,0,newQName,0,children.length);\n      children.qname=newQName;\n      int[] newType=new int[children.length * 2];\n      System.arraycopy(children.type,0,newType,0,children.length);\n      children.type=newType;\n    }\n    children.qname[children.length]=new QName(null,(String)contentSpec.value,(String)contentSpec.value,(String)contentSpec.otherValue);\n    children.type[children.length]=contentSpec.type;\n    children.length++;\n    return;\n  }\n  final int leftNode=contentSpec.value != null ? ((int[])(contentSpec.value))[0] : -1;\n  int rightNode=-1;\n  if (contentSpec.otherValue != null)   rightNode=((int[])(contentSpec.otherValue))[0];\n else   return;\n  if (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_CHOICE || contentSpec.type == XMLContentSpec.CONTENTSPECNODE_SEQ) {\n    contentSpecTree(leftNode,contentSpec,children);\n    contentSpecTree(rightNode,contentSpec,children);\n    return;\n  }\n  if (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_ONE || contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE || contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ONE_OR_MORE) {\n    contentSpecTree(leftNode,contentSpec,children);\n    return;\n  }\n  throw new RuntimeException(\"Invalid content spec type seen in contentSpecTree() method of AbstractDTDGrammar class : \" + contentSpec.type);\n}"}
{"ids": "46405", "raw_code": "protected JTextField createEditorComponent(){\n  JTextField editor=new BorderlessTextField(\"\",9);\n  editor.setBorder(null);\n  return editor;\n}"}
{"ids": "81967", "raw_code": "private void addArg(String key,Object value){\n  if (requestArguments == null) {\n    requestArguments=new Hashtable();\n  }\n  if (value == null || key == null) {\n    return;\n  }\n  if (post) {\n    setWriteRequest(true);\n  }\n  requestArguments.put(key,value);\n}"}
{"ids": "29471", "raw_code": "public static double[] readFileColumn(String filename,int columnIdx,int sizeLimit) throws IOException, SAXException {\n  Path path=Paths.get(filename);\n  if (!(Files.exists(path))) {\n    throw new SAXException(\"unable to load data - data source not found.\");\n  }\n  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(filename),\"UTF-8\"));\n  return readTS(br,columnIdx,sizeLimit);\n}"}
{"ids": "23660", "raw_code": "private void startReader(ConnectionTable connTable){\n  Assert.assertTrue(!this.isRunning);\n  stopped=false;\n  this.isRunning=true;\n  connTable.executeCommand(this);\n}"}
{"ids": "79002", "raw_code": "public static boolean isCompactionRequiredForTable(String metaFolderPath){\n  String minorCompactionStatusFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.minorCompactionRequiredFile;\n  String majorCompactionStatusFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.majorCompactionRequiredFile;\n  try {\n    if (FileFactory.isFileExist(minorCompactionStatusFile,FileFactory.getFileType(minorCompactionStatusFile)) || FileFactory.isFileExist(majorCompactionStatusFile,FileFactory.getFileType(majorCompactionStatusFile))) {\n      return true;\n    }\n  }\n catch (  IOException e) {\n    LOGGER.error(\"Exception in isFileExist compaction request file \" + e.getMessage());\n  }\n  return false;\n}"}
{"ids": "57772", "raw_code": "BigInteger copy(){\n  prepareJavaRepresentation();\n  int[] copyDigits=new int[numberLength];\n  System.arraycopy(digits,0,copyDigits,0,numberLength);\n  return new BigInteger(sign,numberLength,copyDigits);\n}"}
{"ids": "45345", "raw_code": "public void addExcludedClass(String className){\n  mExcludedClasses.add(className);\n}"}
{"ids": "9936", "raw_code": "public BundleMessageSource(Locale locale){\n  _messages=ResourceBundle.getBundle(BASE_NAME,locale);\n}"}
{"ids": "20112", "raw_code": "private void createEditPanel(){\n  editPanel=new JPanel();\n  add(editPanel,BorderLayout.CENTER);\n  CardLayout cardlayout=new CardLayout();\n  editPanel.setLayout(cardlayout);\n  if (colourRampMap != null) {\n    for (    ColourRampPanelInterface data : colourRampMap.keySet()) {\n      data.setParent(this);\n      String key=data.getTitle();\n      editPanel.add(data.getPanel(),key);\n    }\n  }\n}"}
{"ids": "28069", "raw_code": "public static long atol(String s){\n  int i=0;\n  while (i < s.length() && Character.isWhitespace(s.charAt(i)))   i++;\n  if (i < s.length() && s.charAt(i) == '0') {\n    if (i + 1 < s.length() && (s.charAt(i + 1) == 'x' || s.charAt(i + 1) == 'X'))     return parseLong(s.substring(i + 2),16);\n else     return parseLong(s,8);\n  }\n else   return parseLong(s,10);\n}"}
{"ids": "74040", "raw_code": "public Object eval(Reader reader,ScriptEngine engine) throws ScriptException {\n  return engine.eval(reader);\n}"}
{"ids": "61618", "raw_code": "public void classForName(SootMethod container,Stmt forNameInvokeStmt){\n  Set<String> classNames=reflectionInfo.classForNameClassNames(container);\n  if (classNames == null || classNames.isEmpty()) {\n    registerGuard(container,forNameInvokeStmt,\"Class.forName() call site; Soot did not expect this site to be reached\");\n  }\n else {\n    for (    String clsName : classNames) {\n      constantForName(clsName,container,forNameInvokeStmt);\n    }\n  }\n}"}
{"ids": "66414", "raw_code": "private AbstractRenderer createRenderer(JTabbedPane tabbedPane){\n  return hasEmbeddedTabs() ? AbstractRenderer.createEmbeddedRenderer(tabbedPane) : AbstractRenderer.createRenderer(tabPane);\n}"}
{"ids": "53621", "raw_code": "public void readMap(InputStream inputStream,MapBuilder builder){\n  try {\n    parseMap(inputStream,builder);\n    if (builder.nodeRefsWithoutDefsAdded())     LOG.warning(\"Nodes were referenced in ways but not defined before.\");\n  }\n catch (  SAXParseException e) {\n    throw new OsmRuntimeException(\"Unable to parse input stream\" + \".  publicId=(\" + e.getPublicId() + \"), systemId=(\"+ e.getSystemId()+ \"), lineNumber=\"+ e.getLineNumber()+ \", columnNumber=\"+ e.getColumnNumber()+ \".\",e);\n  }\ncatch (  SAXException e) {\n    throw new OsmRuntimeException(\"Unable to parse XML.\",e);\n  }\ncatch (  IOException e) {\n    throw new OsmRuntimeException(\"Unable to read XML input stream.\",e);\n  }\n finally {\n    if (inputStream != null) {\n      try {\n        inputStream.close();\n      }\n catch (      IOException e) {\n        LOG.log(Level.SEVERE,\"Unable to close input stream.\",e);\n      }\n    }\n  }\n}"}
{"ids": "35248", "raw_code": "private void processComment(){\n  templateReader.nextCharacter();\n  if (templateReader.startsWith(syntax.getDocumentTypeOpening())) {\n    processSchemaComment();\n    return;\n  }\n else   if (nestedComments) {\n    processNestedComment();\n    return;\n  }\n  while (templateReader.hasNextCharacter()) {\n    final char commentCharacter=templateReader.nextCharacter();\n    if (isCommentClosingMarker(commentCharacter) && templateReader.hasNextCharacter() && templateReader.peekCharacter() == syntax.getTagClosing()) {\n      templateReader.nextCharacter();\n      break;\n    }\n  }\n}"}
{"ids": "15686", "raw_code": "private void emitPermutationsAppCache(TreeLogger logger,LinkerContext context,ArtifactSet artifacts,String startScreenId,OfflineScreen offlineScreen) throws UnableToCompleteException {\n  for (  EmittedArtifact emitted : artifacts.find(EmittedArtifact.class)) {\n    if (emitted.getVisibility() == Visibility.Private) {\n      continue;\n    }\n    String pathName=emitted.getPartialPath();\n    if (acceptCachedResource(pathName)) {\n      if (!allArtifacts.contains(pathName)) {\n        cachedArtifacts.add(pathName);\n      }\n    }\n  }\n  Set<ArtifactsGroup> keySet=artifactsByGroup.keySet();\n  for (  ArtifactsGroup group : keySet) {\n    Set<String> set=artifactsByGroup.get(group);\n    set.addAll(cachedArtifacts);\n    artifacts.add(createCacheManifest(context,logger,set,group.getGroupId(),startScreenId,offlineScreen));\n    artifacts.add(createCacheManifestLoader(context,logger,group.getGroupId(),startScreenId));\n  }\n}"}
{"ids": "57680", "raw_code": "public final boolean isRegistered(){\n  return !canonicalName.startsWith(\"x-\") && !canonicalName.startsWith(\"X-\");\n}"}
{"ids": "15434", "raw_code": "public License(final String filename,final String text){\n  if (filename == null) {\n    throw new NullPointerException(\"license file name is null\");\n  }\n  if (filename.isEmpty()) {\n    throw new IllegalArgumentException(\"license file name is empty\");\n  }\n  this.filename=filename;\n  if (text == null) {\n    throw new NullPointerException(\"license text is null\");\n  }\n  if (text.isEmpty()) {\n    throw new IllegalArgumentException(\"license text is empty\");\n  }\n  this.text=text;\n}"}
{"ids": "39096", "raw_code": "protected static void processExplorerProps(File propsFile){\n  try {\n    Properties expProps=new Properties();\n    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));\n    expProps.load(bi);\n    bi.close();\n    bi=null;\n    Set<Object> keys=expProps.keySet();\n    Iterator<Object> keysI=keys.iterator();\n    while (keysI.hasNext()) {\n      String key=(String)keysI.next();\n      if (!key.endsWith(\"Policy\")) {\n        String existingVal=ExplorerDefaults.get(key,\"\");\n        if (existingVal.length() > 0) {\n          String replacePolicy=expProps.getProperty(key + \"Policy\");\n          if (replacePolicy != null && replacePolicy.length() > 0) {\n            if (replacePolicy.equalsIgnoreCase(\"replace\")) {\n              String newVal=expProps.getProperty(key);\n              ExplorerDefaults.set(key,newVal);\n            }\n else {\n              String newVal=expProps.getProperty(key);\n              if (existingVal.indexOf(newVal) < 0) {\n                newVal=existingVal + \",\" + newVal;\n                ExplorerDefaults.set(key,newVal);\n              }\n            }\n          }\n else {\n            String newVal=expProps.getProperty(key);\n            if (existingVal.indexOf(newVal) < 0) {\n              newVal=existingVal + \",\" + newVal;\n              ExplorerDefaults.set(key,newVal);\n            }\n          }\n        }\n else {\n          String newVal=expProps.getProperty(key);\n          ExplorerDefaults.set(key,newVal);\n        }\n      }\n    }\n  }\n catch (  Exception ex) {\n  }\n}"}
{"ids": "80935", "raw_code": "long calculateMidEntry(long loVal,long hiVal,final double dfp,long loEntry,long hiEntry){\n  final double dhi=(double)hiEntry;\n  final double dlo=(double)loEntry;\n  final double dhiVal=(double)hiVal;\n  final double dloVal=(double)loVal;\n  long midEntry=loEntry + (long)((dhi - dlo) * (dfp - dloVal) / (dhiVal - dloVal));\n  if (midEntry == hiEntry) {\n    midEntry--;\n  }\n  return midEntry;\n}"}
{"ids": "3214", "raw_code": "@SuppressWarnings(\"unchecked\") protected int hashFields(int hash,Map<FieldDescriptor,Object> map){\n  for (  Map.Entry<FieldDescriptor,Object> entry : map.entrySet()) {\n    FieldDescriptor field=entry.getKey();\n    Object value=entry.getValue();\n    hash=(37 * hash) + field.getNumber();\n    if (field.getType() != FieldDescriptor.Type.ENUM) {\n      hash=(53 * hash) + value.hashCode();\n    }\n else     if (field.isRepeated()) {\n      List<? extends EnumLite> list=(List<? extends EnumLite>)value;\n      hash=(53 * hash) + hashEnumList(list);\n    }\n else {\n      hash=(53 * hash) + hashEnum((EnumLite)value);\n    }\n  }\n  return hash;\n}"}
{"ids": "14259", "raw_code": "public DashboardServiceHelper(){\n  attributesRequireUpdate.add(DASHBOARD_CLASS_NAME);\n  attributesRequireUpdate.add(DASHBOARD_NAME);\n  attributesRequireUpdate.add(DASHBOARD_DISPLAY_NAME);\n  attributesRequireUpdate.add(DASHBOARD_ICON);\n  attributesRequireUpdate.add(DASHBOARD_LOGIN);\n  attributesRequireUpdate.add(ICF_IDENTIFIER);\n  attributes.addAll(attributesRequireUpdate);\n}"}
{"ids": "67703", "raw_code": "public static String javaUtilRegexEscape(String s){\n  if (s.indexOf(\"\\\\E\") == -1) {\n    return \"\\\\Q\" + s + \"\\\\E\";\n  }\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < s.length(); i++) {\n    sb.append('\\\\');\n    sb.append(s.charAt(i));\n  }\n  return sb.toString();\n}"}
{"ids": "8058", "raw_code": "public void forgetFfmpegPath(){\n  settings.put(SETTINGS_FFMPEG_PATH,FFMPEG_PATH_UNSET);\n}"}
{"ids": "4651", "raw_code": "@Override public void printWarning(final String message){\n  printWarning(message,preferenceStore.getBoolean(UIPreferenceConstants.CONSOLE_SHOW_ON_NEW_WARNING));\n}"}
{"ids": "1988", "raw_code": "public static String revertNewLines(String string){\n  int index;\n  StringBuffer newStringBuffer=new StringBuffer();\n  while ((index=string.indexOf(\"\\\\n\")) != -1) {\n    if (index > 0) {\n      newStringBuffer.append(string.substring(0,index));\n    }\n    newStringBuffer.append('\\n');\n    if ((index + 2) < string.length()) {\n      string=string.substring(index + 2);\n    }\n else {\n      string=\"\";\n    }\n  }\n  newStringBuffer.append(string);\n  string=newStringBuffer.toString();\n  newStringBuffer=new StringBuffer();\n  while ((index=string.indexOf(\"\\\\r\")) != -1) {\n    if (index > 0) {\n      newStringBuffer.append(string.substring(0,index));\n    }\n    newStringBuffer.append('\\r');\n    if ((index + 2) < string.length()) {\n      string=string.substring(index + 2);\n    }\n else {\n      string=\"\";\n    }\n  }\n  newStringBuffer.append(string);\n  return newStringBuffer.toString();\n}"}
{"ids": "924", "raw_code": "public void pathValuesToPixel(List<Path> paths){\n  for (int i=0; i < paths.size(); i++) {\n    pathValueToPixel(paths.get(i));\n  }\n}"}
{"ids": "4504", "raw_code": "@Override public void onInsertComplete(int taskId,Object cookie,long insertRowId){\n  if (taskId == AppConstants.QueryTokens.INSERT_WALLPOST && insertRowId != -1) {\n    Logger.i(TAG,\"Successfully inserted at row no. \" + insertRowId);\n  }\n}"}
{"ids": "69183", "raw_code": "protected void parseList(ArrayList<String> list,String text){\n  list.clear();\n  StringTokenizer st=new StringTokenizer(text,\"\\n\\r\");\n  while (st.hasMoreElements()) {\n    String line=(String)st.nextElement();\n    list.add(line.trim());\n  }\n}"}
{"ids": "34955", "raw_code": "protected List<Node> splitAssignments(Node node){\n  if (node instanceof AssignmentNode) {\n    List<Node> result=new ArrayList<>();\n    AssignmentNode a=(AssignmentNode)node;\n    result.add(a.getTarget());\n    result.addAll(splitAssignments(a.getExpression()));\n    return result;\n  }\n else {\n    return Collections.singletonList(node);\n  }\n}"}
{"ids": "2630", "raw_code": "public Tree<String> extractBestMaxRuleParse(int start,int end,List<String> sentence){\n  return extractBestMaxRuleParse1(start,end,0,sentence);\n}"}
{"ids": "62646", "raw_code": "public static double normalize(double val,double min,double max){\n  if (max < min)   throw new IllegalArgumentException(\"Max must be greather than min\");\n  return (val - min) / (max - min);\n}"}
{"ids": "55179", "raw_code": "private static boolean containsOnlyTransientAndStaticFields(List<Field> fields){\n  boolean containsNormalField=false;\n  for (  Field field : fields) {\n    if (!Modifier.isTransient(field.getModifiers()) && !Modifier.isStatic(field.getModifiers())) {\n      containsNormalField=true;\n    }\n  }\n  return !containsNormalField;\n}"}
{"ids": "35338", "raw_code": "@Override public void appendIndexMapTo(Appendable out,String name,List<SourceMapSection> sections) throws IOException {\n  out.append(\"{\\n\");\n  appendFirstField(out,\"version\",\"3\");\n  appendField(out,\"file\",escapeString(name));\n  appendFieldStart(out,\"sections\");\n  out.append(\"[\\n\");\n  boolean first=true;\n  for (  SourceMapSection section : sections) {\n    if (first) {\n      first=false;\n    }\n else {\n      out.append(\",\\n\");\n    }\n    out.append(\"{\\n\");\n    appendFirstField(out,\"offset\",offsetValue(section.getLine(),section.getColumn()));\n    if (section.getSectionType() == SourceMapSection.SectionType.URL) {\n      appendField(out,\"url\",escapeString(section.getSectionValue()));\n    }\n else     if (section.getSectionType() == SourceMapSection.SectionType.MAP) {\n      appendField(out,\"map\",section.getSectionValue());\n    }\n else {\n      throw new IOException(\"Unexpected section type\");\n    }\n    out.append(\"\\n}\");\n  }\n  out.append(\"\\n]\");\n  appendFieldEnd(out);\n  out.append(\"\\n}\\n\");\n}"}
{"ids": "34527", "raw_code": "public Builder addPart(Part part){\n  if (part == null)   throw new NullPointerException(\"part == null\");\n  parts.add(part);\n  return this;\n}"}
{"ids": "27830", "raw_code": "protected void notifyGone(L locator){\nsynchronized (this) {\n    if (!staleLocators.add(locator.getPartitionId())) {\n      fail(\"Locator already in stale locators collection? \" + locator);\n    }\n  }\n}"}
{"ids": "38617", "raw_code": "@Override public void addVetoableChangeListener(String name,VetoableChangeListener vcl){\n  m_bcSupport.addVetoableChangeListener(name,vcl);\n}"}
{"ids": "71994", "raw_code": "public String buildUser(){\n  return properties.getProperty(\"build.user\");\n}"}
{"ids": "4021", "raw_code": "private void updateIdleExpireTime(long now){\n  _threadIdleExpireTime.set(now + _idleTimeout);\n}"}
{"ids": "54292", "raw_code": "protected CtClass createCtClass(String classname,boolean useCache){\n  if (classname.charAt(0) == '[')   classname=Descriptor.toClassName(classname);\n  if (classname.endsWith(\"[]\")) {\n    String base=classname.substring(0,classname.indexOf('['));\n    if ((!useCache || getCached(base) == null) && find(base) == null)     return null;\n else     return new CtArray(classname,this);\n  }\n else   if (find(classname) == null)   return null;\n else   return new CtClassType(classname,this);\n}"}
{"ids": "30297", "raw_code": "@Transactional public long createVoucherFromBill(final int billId) throws ApplicationRuntimeException {\n  try {\n    String voucherStatus=null;\n    final List vStatusList=appConfigValuesService.getConfigValuesByModuleAndKey(\"EGF\",\"DEFAULTVOUCHERCREATIONSTATUS\");\n    if (!vStatusList.isEmpty() && vStatusList.size() == 1) {\n      final AppConfigValues appVal=(AppConfigValues)vStatusList.get(0);\n      voucherStatus=appVal.getValue();\n    }\n else     throw new ApplicationRuntimeException(\"DEFAULTVOUCHERCREATIONSTATUS\" + MISSINGMSG);\n    final long vh=createVoucher.createVoucherFromBill(billId,voucherStatus,null,null);\n    return vh;\n  }\n catch (  final Exception e) {\n    LOGGER.error(e.getMessage());\n    throw new ApplicationRuntimeException(e.getMessage());\n  }\n}"}
{"ids": "51857", "raw_code": "public static float compareEquivalance(Bitmap bitmap1,Bitmap bitmap2){\n  if (bitmap1 == null || bitmap2 == null || bitmap1.getWidth() != bitmap2.getWidth() || bitmap1.getHeight() != bitmap2.getHeight()) {\n    return 0f;\n  }\n  ByteBuffer buffer1=ByteBuffer.allocate(bitmap1.getHeight() * bitmap1.getRowBytes());\n  bitmap1.copyPixelsToBuffer(buffer1);\n  ByteBuffer buffer2=ByteBuffer.allocate(bitmap2.getHeight() * bitmap2.getRowBytes());\n  bitmap2.copyPixelsToBuffer(buffer2);\n  byte[] array1=buffer1.array();\n  byte[] array2=buffer2.array();\n  int len=array1.length;\n  int count=0;\n  for (int i=0; i < len; i++) {\n    if (array1[i] == array2[i]) {\n      count++;\n    }\n  }\n  return ((float)(count)) / len;\n}"}
{"ids": "13868", "raw_code": "public void handleTblCharsetAliasHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {\n  try {\n    Map values=getValues();\n    onBeforeSaveProfile(values);\n    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);\n    G11NCharsetAliasEditViewBean vb=(G11NCharsetAliasEditViewBean)getViewBean(G11NCharsetAliasEditViewBean.class);\n    unlockPageTrail();\n    passPgSessionMap(vb);\n    vb.populateValues((String)getDisplayFieldValue(\"tblCharsetAliasHrefAction\"));\n    vb.forwardTo(getRequestContext());\n  }\n catch (  AMConsoleException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());\n  }\n}"}
{"ids": "52112", "raw_code": "public BooleanGlassGeneIm(BooleanGlassGenePm genePm,Parameters parameters){\n  try {\n    this.genePm=genePm;\n    this.glassFunction=new BooleanGlassFunction(genePm.getLagGraph());\n    this.initializer=new BasalInitializer(glassFunction,0,1);\n    this.history=new GeneHistory(initializer,glassFunction);\n    this.simulator=new MeasurementSimulatorParams(parameters);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "34500", "raw_code": "protected List<ITEM_TYPE> selectFoldTrainItems(List<ITEM_TYPE> items,int nFolds,int fold){\n  List<ITEM_TYPE> trainItems=new ArrayList<ITEM_TYPE>();\n  for (int i=0; i < items.size(); ++i) {\n    if (i % nFolds != fold) {\n      trainItems.add(items.get(i));\n    }\n  }\n  return trainItems;\n}"}
{"ids": "5871", "raw_code": "private boolean journalRebuildRequired(){\n  final int redundantOpCompactThreshold=2000;\n  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();\n}"}
{"ids": "31032", "raw_code": "protected void rehash(int newCapacity){\n  int oldCapacity=_set.length;\n  K oldKeys[]=(K[])_set;\n  short oldVals[]=_values;\n  _set=new Object[newCapacity];\n  Arrays.fill(_set,FREE);\n  _values=new short[newCapacity];\n  for (int i=oldCapacity; i-- > 0; ) {\n    if (oldKeys[i] != FREE && oldKeys[i] != REMOVED) {\n      K o=oldKeys[i];\n      int index=insertionIndex(o);\n      if (index < 0) {\n        throwObjectContractViolation(_set[(-index - 1)],o);\n      }\n      _set[index]=o;\n      _values[index]=oldVals[i];\n    }\n  }\n}"}
{"ids": "71684", "raw_code": "protected void addAttributes(Element element,Attributes attributes){\n  boolean noNamespaceAttributes=false;\n  if (element instanceof AbstractElement) {\n    AbstractElement baseElement=(AbstractElement)element;\n    baseElement.setAttributes(attributes,namespaceStack,noNamespaceAttributes);\n  }\n else {\n    int size=attributes.getLength();\n    for (int i=0; i < size; i++) {\n      String attributeQName=attributes.getQName(i);\n      if (noNamespaceAttributes || !attributeQName.startsWith(\"xmlns\")) {\n        String attributeURI=attributes.getURI(i);\n        String attributeLocalName=attributes.getLocalName(i);\n        String attributeValue=attributes.getValue(i);\n        QName qName=namespaceStack.getAttributeQName(attributeURI,attributeLocalName,attributeQName);\n        element.addAttribute(qName,attributeValue);\n      }\n    }\n  }\n}"}
{"ids": "67365", "raw_code": "public static <T>boolean remove(Collection<T> collection,T element){\n  if (element == null) {\n    return false;\n  }\n  if (CollectionUtils.isEmpty(collection)) {\n    return false;\n  }\n  return collection.remove(element);\n}"}
{"ids": "21703", "raw_code": "private static void persistUpdatedVpoolList(List<VirtualPool> updatedVpoolList,DbClient dbClient){\n  if (!updatedVpoolList.isEmpty()) {\n    dbClient.updateAndReindexObject(updatedVpoolList);\n  }\n}"}
{"ids": "18027", "raw_code": "void composeTemplates(ElemTemplateElement templ) throws TransformerException {\n  templ.compose(this);\n  for (ElemTemplateElement child=templ.getFirstChildElem(); child != null; child=child.getNextSiblingElem()) {\n    composeTemplates(child);\n  }\n  templ.endCompose(this);\n}"}
{"ids": "86281", "raw_code": "public static boolean classExists(String className){\n  try {\n    return Class.forName(className) != null;\n  }\n catch (  ClassNotFoundException e) {\n    return false;\n  }\n}"}
{"ids": "55137", "raw_code": "public static void createTopLevelClassesXML(String outputDir,String templatesPath,boolean lenient) throws CompilerException {\n  try {\n    AsDocHelper asDocHelp=new AsDocHelper(outputDir + \"toplevel.xml\",outputDir + \"tempdita\",outputDir,outputDir + \"tempdita\" + File.separator+ \"ASDoc_Config.xml\");\n    asDocHelp.createTopLevelClasses(lenient);\n  }\n catch (  Throwable t) {\n    t.printStackTrace();\n    CompilerMessage c=new CouldNotCreate(\"toplevel.xml\",t.getMessage());\n    ThreadLocalToolkit.log(c);\n    throw c;\n  }\n}"}
{"ids": "46524", "raw_code": "void drawShape(Graphics g,CSS.Value type,int ax,int ay,int aw,int ah,float align){\n  int gap=isLeftToRight ? -(bulletgap + 8) : (aw + bulletgap);\n  int x=ax + gap;\n  int y=Math.max(ay,ay + (int)(align * ah) - 8);\n  if (type == CSS.Value.SQUARE) {\n    g.drawRect(x,y,8,8);\n  }\n else   if (type == CSS.Value.CIRCLE) {\n    g.drawOval(x,y,8,8);\n  }\n else {\n    g.fillOval(x,y,8,8);\n  }\n}"}
{"ids": "83645", "raw_code": "public static void restore(final Context context){\n  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);\n  if (LongTermOrbits.isSupported() && prefs.getBoolean(KEY_LOCATION_TOGGLE,false)) {\n    saveDownloadDataWifiOnlyPref(context);\n    AlarmManager am=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);\n    Intent intent=new Intent(context,LtoService.class);\n    PendingIntent pi=PendingIntent.getService(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT);\n    long nextLtoDownload=System.currentTimeMillis() + (1000 * 60 * 2L);\n    am.set(AlarmManager.RTC,nextLtoDownload,pi);\n  }\n}"}
{"ids": "32463", "raw_code": "private void generateFile(int wordCnt) throws Exception {\n  Random rnd=new Random(System.currentTimeMillis());\n  try (OutputStreamWriter writer=new OutputStreamWriter(igfs.create(FILE,true))){\n    int cnt=0;\n    while (cnt < wordCnt) {\n      String word=DICTIONARY[rnd.nextInt(DICTIONARY.length)];\n      writer.write(word + \" \");\n      cnt++;\n    }\n  }\n }"}
{"ids": "32928", "raw_code": "public void polygon(double[] x,double[] y){\n  int n=x.length;\n  GeneralPath path=new GeneralPath();\n  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));\n  for (int i=0; i < n; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));\n  path.closePath();\n  offscreen.draw(path);\n  draw();\n}"}
{"ids": "70011", "raw_code": "public void append(int key,E value){\n  if (mSize != 0 && key <= mKeys[mSize - 1]) {\n    put(key,value);\n    return;\n  }\n  if (mGarbage && mSize >= mKeys.length) {\n    gc();\n  }\n  int pos=mSize;\n  if (pos >= mKeys.length) {\n    int n=ContainerHelpers.idealIntArraySize(pos + 1);\n    int[] nkeys=new int[n];\n    Object[] nvalues=new Object[n];\n    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);\n    System.arraycopy(mValues,0,nvalues,0,mValues.length);\n    mKeys=nkeys;\n    mValues=nvalues;\n  }\n  mKeys[pos]=key;\n  mValues[pos]=value;\n  mSize=pos + 1;\n}"}
{"ids": "1022", "raw_code": "public List<SearchResult> searchByObjectName(String name){\n  List<SearchResult> all=new ArrayList<>();\n  for (  Layer layer : layers) {\n    if (isLayerVisible(layer)) {\n      all.addAll(layer.searchByObjectName(name));\n    }\n  }\n  Log.d(TAG,\"Got \" + all.size() + \" results in total for \"+ name);\n  return all;\n}"}
{"ids": "57121", "raw_code": "private void clearMessages(){\n  messages.clear();\n}"}
{"ids": "28240", "raw_code": "public Searcher() throws IOException {\n  searcher=new IndexSearcher(DirectoryReader.open(FSDirectory.open(Paths.get(INDEX_DIR))));\n  parser=new QueryParser(CONTENT_FIELD,new StandardAnalyzer());\n}"}
{"ids": "81410", "raw_code": "public void clearTextEdits(){\n  fEdits.clear();\n}"}
{"ids": "70417", "raw_code": "public static void main(String[] args){\n  Frame frame=new PacketTool();\n  frame.pack();\n  frame.setLocationRelativeTo(null);\n  frame.setVisible(true);\n}"}
{"ids": "10583", "raw_code": "private void createToolBar(){\n  toolBar=new JToolBar(\"TDA Toolbar\");\n  if (listener.runningAsJConsolePlugin || listener.runningAsVisualVMPlugin) {\n    toolBar.add(createToolBarButton(\"Request a Thread Dump\",\"FileOpen.png\"));\n    toolBar.setFloatable(false);\n  }\n else {\n    toolBar.add(createToolBarButton(\"Open Logfile\",\"FileOpen.png\"));\n    closeToolBarButton=createToolBarButton(\"Close selected Logfile\",\"CloseFile.png\");\n    closeToolBarButton.setEnabled(false);\n    toolBar.add(closeToolBarButton);\n  }\n  toolBar.addSeparator();\n  toolBar.add(createToolBarButton(\"Preferences\",\"Preferences.png\"));\n  toolBar.addSeparator();\n  expandButton=createToolBarButton(\"Expand all nodes\",\"Expanded.png\");\n  expandButton.setEnabled(false);\n  toolBar.add(expandButton);\n  collapseButton=createToolBarButton(\"Collapse all nodes\",\"Collapsed.png\");\n  collapseButton.setEnabled(false);\n  toolBar.add(collapseButton);\n  toolBar.addSeparator();\n  findLRThreadsButton=createToolBarButton(\"Find long running threads\",\"FindLRThreads.png\");\n  findLRThreadsButton.setEnabled(false);\n  toolBar.add(findLRThreadsButton);\n  toolBar.add(createToolBarButton(\"Filters\",\"Filters.png\"));\n  toolBar.add(createToolBarButton(\"Custom Categories\",\"CustomCat.png\"));\n  toolBar.addSeparator();\n}"}
{"ids": "15005", "raw_code": "public static Map attrSetToMap(AttrSet attrSet,boolean fetchByteValues){\n  Map attributesMap=new AMHashMap(fetchByteValues);\n  if (attrSet == null) {\n    return attributesMap;\n  }\n  int attrSetSize=attrSet.size();\n  if (!fetchByteValues) {\n    for (int i=0; i < attrSetSize; i++) {\n      Attr attr=attrSet.elementAt(i);\n      String values[]=attr.getStringValues();\n      attributesMap.put(attr.getName(),stringArrayToSet(values));\n    }\n  }\n else {\n    for (int i=0; i < attrSetSize; i++) {\n      Attr attr=attrSet.elementAt(i);\n      attributesMap.put(attr.getName(),attr.getByteValues());\n    }\n  }\n  return attributesMap;\n}"}
{"ids": "72221", "raw_code": "public final Iterator<String> schemesIterator(){\n  return mDataSchemes != null ? mDataSchemes.iterator() : null;\n}"}
{"ids": "45502", "raw_code": "@Override public void close() throws IOException {\n  try {\n    out.close();\n  }\n  finally {\n    lockFile.delete();\n  }\n}"}
{"ids": "49955", "raw_code": "public static void reinitRecompiler(){\n  _rewriter.set(new ProgramRewriter(false,true));\n}"}
{"ids": "54057", "raw_code": "default Value remove(Optional<? extends CharSequence> name){\n  return name.isPresent() ? remove(name.get()) : null;\n}"}
{"ids": "75189", "raw_code": "private String nextToInternal(String excluded){\n  int start=pos;\n  for (; pos < in.length(); pos++) {\n    char c=in.charAt(pos);\n    if (c == '\\r' || c == '\\n' || excluded.indexOf(c) != -1) {\n      return in.substring(start,pos);\n    }\n  }\n  return in.substring(start);\n}"}
{"ids": "3470", "raw_code": "AcceptTcp(PortTcp port,ServerSocketBar serverSocket){\n  Objects.requireNonNull(port);\n  Objects.requireNonNull(serverSocket);\n  _port=port;\n  _serverSocket=serverSocket;\n}"}
{"ids": "49180", "raw_code": "private static void updateGrabbedCursor(Cursor cur){\n  XBaseWindow target=XAwtState.getGrabWindow();\n  if (target instanceof XWindowPeer) {\n    XWindowPeer grabber=(XWindowPeer)target;\n    grabber.pSetCursor(cur);\n  }\n}"}
{"ids": "81711", "raw_code": "protected void parseURI(String uriString) throws URISyntaxException {\n  String s=uriString;\n  int index=s.indexOf(FRAGMENT_SEPARATOR);\n  if (index != -1) {\n    setFragment(s.substring(index + 1),false);\n    s=s.substring(0,index);\n  }\n  index=s.indexOf(SCHEME_SEPARATOR);\n  if (index != -1) {\n    String scheme=s.substring(0,index);\n    if (isValidScheme(scheme)) {\n      setScheme(scheme);\n      s=s.substring(index + 1);\n    }\n  }\n  parseSchemeSpecificPart(s,false);\n}"}
{"ids": "48758", "raw_code": "@Override public boolean equals(Object obj){\n  if ((obj instanceof KeepAliveKey) == false)   return false;\n  KeepAliveKey kae=(KeepAliveKey)obj;\n  return host.equals(kae.host) && (port == kae.port) && protocol.equals(kae.protocol)&& this.obj == kae.obj;\n}"}
{"ids": "62396", "raw_code": "protected static void appendLongStringType(StringBuilder sb){\n  sb.append(\"TEXT\");\n}"}
{"ids": "49998", "raw_code": "public static boolean isNA(String[] NAstrings,String w){\n  if (NAstrings == null)   return false;\n  for (  String na : NAstrings) {\n    if (w.equals(na))     return true;\n  }\n  return false;\n}"}
{"ids": "37930", "raw_code": "private double[] evaluateProbability(double[] data){\n  double[] prob=new double[m_NumClasses], v=new double[m_NumClasses];\n  for (int j=0; j < m_NumClasses - 1; j++) {\n    for (int k=0; k <= m_NumPredictors; k++) {\n      v[j]+=m_Par[k][j] * data[k];\n    }\n  }\n  v[m_NumClasses - 1]=0;\n  for (int m=0; m < m_NumClasses; m++) {\n    double sum=0;\n    for (int n=0; n < m_NumClasses - 1; n++) {\n      sum+=Math.exp(v[n] - v[m]);\n    }\n    prob[m]=1 / (sum + Math.exp(-v[m]));\n  }\n  return prob;\n}"}
{"ids": "34349", "raw_code": "public static final HashMap readMapXml(InputStream in) throws XmlPullParserException, IOException {\n  XmlPullParser parser=Xml.newPullParser();\n  parser.setInput(in,null);\n  return (HashMap)readValueXml(parser,new String[1]);\n}"}
{"ids": "38575", "raw_code": "int nextNode(String sStr,int i){\n  int nBraces=0;\n  char c=sStr.charAt(i);\n  do {\n    i++;\n    if (i < sStr.length()) {\n      c=sStr.charAt(i);\n      if (c == '[') {\n        while (i < sStr.length() && sStr.charAt(i) != ']') {\n          i++;\n        }\n        i++;\n        if (i < sStr.length()) {\n          c=sStr.charAt(i);\n        }\n      }\nswitch (c) {\ncase '(':\n        nBraces++;\n      break;\ncase ')':\n    nBraces--;\n  break;\ndefault :\nbreak;\n}\n}\n}\n while (i < sStr.length() && (nBraces > 0 || (c != ',' && c != ')' && c != '(')));\nif (i >= sStr.length() || nBraces < 0) {\nreturn -1;\n}\n else if (sStr.charAt(i) == ')') {\ni++;\nif (sStr.charAt(i) == '[') {\nwhile (i < sStr.length() && sStr.charAt(i) != ']') {\ni++;\n}\ni++;\nif (i >= sStr.length()) {\nreturn -1;\n}\n}\nif (sStr.charAt(i) == ':') {\ni++;\nc=sStr.charAt(i);\nwhile (i < sStr.length() && (c == '.' || Character.isDigit(c))) {\ni++;\nif (i < sStr.length()) {\nc=sStr.charAt(i);\n}\n}\n}\n}\nreturn i;\n}"}
{"ids": "12175", "raw_code": "public boolean selectNode(D nodeData,SignalEvent event){\n  if (selectedNodes.isEmpty()) {\n    insertAndSelectNode(nodeData,0,true);\n    return true;\n  }\n  if (!hasSameParent(selectedNodes.get(0),nodeData)) {\n    if (!this.multilevelSelection || event.getShiftKey()) {\n      return selectSingleNode(nodeData);\n    }\n  }\n  if (event == null || event.getCommandKey()) {\n    ctrlSelect(nodeData);\n    return true;\n  }\n else {\n    if (event.getShiftKey()) {\n      return shiftSelect(nodeData);\n    }\n  }\n  return selectSingleNode(nodeData);\n}"}
{"ids": "86812", "raw_code": "@Override public int[] sequenceLengths(final long start,final long end) throws IOException {\n  final int entrySize=mIndex.getVersion() >= IndexFile.PER_SEQUENCE_CHECKSUM_VERSION ? (mIndex.hasQuality() ? 6 : 5) : 4;\n  final long internalStart=start + mStart;\n  final long internalEnd=end + mStart;\n  final int[] ret=new int[(int)(internalEnd - internalStart)];\n  if (ret.length == 0) {\n    return ret;\n  }\n  if (mIndex.getMaxLength() == mIndex.getMinLength()) {\n    Arrays.fill(ret,(int)mIndex.getMaxLength());\n    return ret;\n  }\n  final byte[] buffer=new byte[entrySize * 1024];\n  final DataFileIndex dataIndex=mSequenceManager.sequenceIndex();\n  final long[] numSequences=new long[dataIndex.numberEntries()];\n  int startFileNo=-1;\n  int endFileNo=-1;\n  for (int i=0; i < numSequences.length; i++) {\n    if (i > 0) {\n      numSequences[i]=numSequences[i - 1] + dataIndex.numberSequences(i);\n    }\n else {\n      numSequences[0]=dataIndex.numberSequences(0);\n    }\n    if (internalStart < numSequences[i]) {\n      if (startFileNo == -1) {\n        startFileNo=i;\n      }\n      if (internalEnd < numSequences[i]) {\n        endFileNo=i;\n        break;\n      }\n    }\n  }\n  final long startLower=startFileNo == 0 ? 0 : numSequences[startFileNo - 1];\n  final long endLower=endFileNo < 1 ? 0 : numSequences[endFileNo - 1];\n  int seqNo=0;\n  for (int i=startFileNo; (endFileNo == -1 || i <= endFileNo) && i < numSequences.length; i++) {\n    try (RandomAccessFile raf=new RandomAccessFile(SdfFileUtils.sequencePointerFile(mDirectory,i),\"r\")){\n      final long pos;\n      if (i == startFileNo) {\n        pos=(internalStart - startLower) * entrySize;\n        raf.seek(pos);\n      }\n else {\n        pos=0;\n      }\n      final long endPos=endFileNo == i ? (internalEnd - endLower) * entrySize : raf.length();\n      seqNo=sequenceLengthsHelper(raf,buffer,ret,seqNo,pos,endPos,entrySize);\n      if (endFileNo != i && seqNo > 0) {\n        final long fileLength=dataIndex.dataSize(i);\n        ret[seqNo - 1]=ret[seqNo - 1] - (int)fileLength;\n      }\n else {\n        if (seqNo != ret.length) {\n          throw new CorruptSdfException(\"Should have read \" + ret.length + \" sequence pointers, got \"+ seqNo);\n        }\n        raf.read();\n        ret[seqNo - 1]-=raf.readInt();\n      }\n    }\n   }\n  ret[ret.length - 1]=0 - ret[ret.length - 1];\n  return ret;\n}"}
{"ids": "28315", "raw_code": "public Observable<DriveId> createFile(DriveFolder folder,File file,String title){\n  return createFile(folder,file,title,MimeTypeMap.getFileExtensionFromUrl(file.getPath()));\n}"}
{"ids": "68891", "raw_code": "public static String extractCollectionFromPath(String path){\n  String extractedCollectionName=null;\n  String pathModified=removeFromEndOfString(path,SLASH);\n  String[] pathSegments=pathModified.split(\"/\");\n  if (pathSegments.length > 0) {\n    extractedCollectionName=pathSegments[pathSegments.length - 1];\n  }\n  return extractedCollectionName;\n}"}
{"ids": "37723", "raw_code": "public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(1);\n  newVector.addElement(new Option(\"\\tRandom number seed.\\n\" + \"\\t(default 1)\",\"S\",1,\"-S <num>\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "4126", "raw_code": "public boolean isPrivate(){\n  return Modifier.isPrivate(_field.getModifiers());\n}"}
{"ids": "56173", "raw_code": "public static final long longEncode(final String hash){\n  int level=hash.length() - 1;\n  long b;\n  long l=0L;\n  for (  char c : hash.toCharArray()) {\n    b=(long)(BASE_32_STRING.indexOf(c));\n    l|=(b << (level-- * 5));\n  }\n  return (l << 4) | hash.length();\n}"}
{"ids": "9517", "raw_code": "@Override public void onSuccess(T result){\n  try {\n    LOGGER.debug(\"Putting {} into queue\",result);\n    queue.put(result);\n  }\n catch (  InterruptedException e) {\n    LOGGER.warn(\"Exception occurred while putting the converted result in queue\",e);\n  }\n}"}
{"ids": "13886", "raw_code": "public void handleTblProviderResourceIdMapperButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {\n  try {\n    Map values=getValues();\n    onBeforeSaveProfile(values);\n    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);\n    SMDiscoveryProviderResourceIdMapperAddViewBean vb=(SMDiscoveryProviderResourceIdMapperAddViewBean)getViewBean(SMDiscoveryProviderResourceIdMapperAddViewBean.class);\n    removePageSessionAttribute(SMDiscoveryProviderResourceIdMapperAddViewBean.PROPERTY_ATTRIBUTE);\n    unlockPageTrail();\n    passPgSessionMap(vb);\n    vb.forwardTo(getRequestContext());\n  }\n catch (  AMConsoleException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());\n  }\n}"}
{"ids": "36977", "raw_code": "public COpenOriginalFunction(final CGraphWindow parent,final IViewContainer container,final INaviFunction function){\n  super(String.format(\"Open original function '%s'\",function.getName()));\n  m_parent=parent;\n  m_container=container;\n  m_function=function;\n}"}
{"ids": "3669", "raw_code": "public int read(char[] buffer,int offset,int length) throws IOException {\n  byte[] bytes=new byte[length];\n  int count=_file.read(bytes,0,length);\n  for (int i=0; i < count; i++) {\n    buffer[offset + i]=(char)bytes[i];\n  }\n  return count;\n}"}
{"ids": "35304", "raw_code": "@Override protected EClass findInstantiableCompatible(EClass eType){\n  if (!isInstantiatableSubType(eType,eType)) {\n    throw new IllegalStateException(String.valueOf(eType));\n  }\n  return eType;\n}"}
{"ids": "4436", "raw_code": "private int measureWidth(int measureSpec){\n  int result=0;\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  if (specMode == MeasureSpec.EXACTLY) {\n    result=specSize;\n  }\n else {\n    result=IMAGE_WIDTH + MAX_TEXT_WIDTH + TOAST_HEIGHT;\n    if (specMode == MeasureSpec.AT_MOST) {\n      result=Math.min(result,specSize);\n    }\n  }\n  return result;\n}"}
{"ids": "32407", "raw_code": "public void restoreTopology(Iterable<TcpDiscoveryNode> nodes,long topVer){\n  assert !F.isEmpty(nodes);\n  assert topVer > 0;\n  rwLock.writeLock().lock();\n  try {\n    locNode.internalOrder(topVer);\n    clear();\n    boolean firstAdd=true;\n    for (    TcpDiscoveryNode node : nodes) {\n      if (nodesMap.containsKey(node.id()))       continue;\n      nodesMap.put(node.id(),node);\n      if (firstAdd) {\n        this.nodes=new TreeSet<>(this.nodes);\n        firstAdd=false;\n      }\n      node.lastUpdateTime(U.currentTimeMillis());\n      this.nodes.add(node);\n    }\n    nodeOrder=topVer;\n    initializeMinimumVersion();\n  }\n  finally {\n    rwLock.writeLock().unlock();\n  }\n}"}
{"ids": "27500", "raw_code": "final protected void startOp(final IStartOpMessage msg){\n  if (!controller)   throw new UnsupportedOperationException(ERR_NOT_CONTROLLER);\n  if (msg == null)   throw new IllegalArgumentException();\n  if (!queryId.equals(msg.getQueryId()))   throw new IllegalArgumentException();\n  lock.lock();\n  try {\n    if (log.isTraceEnabled())     log.trace(msg.toString());\n    if (future.isDone())     throw new RuntimeException(\"Query is done\");\n    runState.startOp(msg);\n  }\n catch (  TimeoutException ex) {\n    halt(ex);\n  }\n finally {\n    lock.unlock();\n  }\n}"}
{"ids": "86538", "raw_code": "public Flux<IN> drain(){\n  return Flux.empty();\n}"}
{"ids": "33201", "raw_code": "int traverseConsistencyCheck(TextEditProcessor processor,Document document,List<List<TextEdit>> sourceEdits){\n  int result=0;\n  if (fChildren != null) {\n    for (int i=fChildren.size() - 1; i >= 0; i--) {\n      TextEdit child=(TextEdit)fChildren.get(i);\n      result=Math.max(result,child.traverseConsistencyCheck(processor,document,sourceEdits));\n    }\n  }\n  if (processor.considerEdit(this)) {\n    performConsistencyCheck(processor,document);\n  }\n  return result;\n}"}
{"ids": "7879", "raw_code": "public Minute(Date time,TimeZone zone){\n  this(time,zone,Locale.getDefault());\n}"}
{"ids": "83133", "raw_code": "private Plan buildPlan1(){\n  Plan plan=PopulationUtils.createPlan();\n  Activity a=PopulationUtils.createActivityFromCoord(\"a\",CoordUtils.createCoord(0.0,0.0));\n  a.setEndTime(Time.parseTime(\"16:00:00\"));\n  plan.addActivity(a);\n  plan.addLeg(PopulationUtils.createLeg(\"truck\"));\n  double travelTime=Time.parseTime(\"16:00:00\");\n  double distance=Math.round((travelTime * ChainChopper.AVERAGE_SPEED) / ChainChopper.CROWFLY_FACTOR);\n  Activity b=PopulationUtils.createActivityFromCoord(\"b\",CoordUtils.createCoord(distance,2.0));\n  plan.addActivity(b);\n  return plan;\n}"}
{"ids": "48554", "raw_code": "protected void encodeAtom(OutputStream outStream,byte data[],int offset,int len) throws IOException {\n  byte a, b=1, c=1;\n  int c1, c2, c3, c4;\n  a=data[offset];\n  if (len > 1) {\n    b=data[offset + 1];\n  }\n  if (len > 2) {\n    c=data[offset + 2];\n  }\n  c1=(a >>> 2) & 0x3f;\n  c2=((a << 4) & 0x30) | ((b >>> 4) & 0xf);\n  c3=((b << 2) & 0x3c) | ((c >>> 6) & 0x3);\n  c4=c & 0x3f;\n  outStream.write(c1 + ' ');\n  outStream.write(c2 + ' ');\n  outStream.write(c3 + ' ');\n  outStream.write(c4 + ' ');\n  return;\n}"}
{"ids": "35078", "raw_code": "private int adjustAlpha(int color,float factor){\n  int alpha=Math.round(Color.alpha(color) * factor);\n  int red=Color.red(color);\n  int green=Color.green(color);\n  int blue=Color.blue(color);\n  return Color.argb(alpha,red,green,blue);\n}"}
{"ids": "73338", "raw_code": "private void initializeRatioSlider(){\n  ratioSlider.setMajorTickSpacing(10);\n  ratioSlider.setMinorTickSpacing(2);\n  ratioSlider.setPaintTicks(true);\n  Hashtable<Integer,JLabel> labelTable=new Hashtable<Integer,JLabel>();\n  labelTable.put(new Integer(0),new JLabel(\"0/100\"));\n  labelTable.put(new Integer(25),new JLabel(\"25/75\"));\n  labelTable.put(new Integer(50),new JLabel(\"50/50\"));\n  labelTable.put(new Integer(75),new JLabel(\"75/25\"));\n  labelTable.put(new Integer(100),new JLabel(\"100/0\"));\n  ratioSlider.setLabelTable(labelTable);\n  ratioSlider.setPaintLabels(true);\n}"}
{"ids": "56405", "raw_code": "private static void initializeSettings(Settings.Builder output,Settings input,boolean loadDefaults){\n  output.put(input);\n  if (useSystemProperties(input)) {\n    if (loadDefaults) {\n      for (      String prefix : PROPERTY_DEFAULTS_PREFIXES) {\n        output.putProperties(prefix,System.getProperties());\n      }\n    }\n    for (    String prefix : PROPERTY_PREFIXES) {\n      output.putProperties(prefix,System.getProperties(),PROPERTY_DEFAULTS_PREFIXES);\n    }\n  }\n  output.replacePropertyPlaceholders();\n}"}
{"ids": "38429", "raw_code": "@Override public void drawOval(int x,int y,int width,int height){\n  setStateToLocal();\n  m_printstream.println(xTransform(xScale(x)) + \" \" + yTransform(yScale(y))+ \" \"+ xScale(width)+ \" \"+ yScale(height)+ \" false Oval\");\n}"}
{"ids": "15817", "raw_code": "private void validateSQLFields(){\n  boolean flag=controller.isEnableSQLDatabaseOutput();\n  enableSQLDatabaseConnection.setSelected(flag);\n  sqlHostLabel.setEnabled(flag);\n  sqlHostField.setEnabled(flag);\n  sqlDatabaseLabel.setEnabled(flag);\n  sqlDatabaseField.setEnabled(flag);\n  sqlUserLabel.setEnabled(flag);\n  sqlUserField.setEnabled(flag);\n  sqlPasswordLabel.setEnabled(flag);\n  sqlPasswordField.setEnabled(flag);\n  enableZipEncodingCheckBox.setEnabled(flag);\n}"}
{"ids": "82265", "raw_code": "public void readFromObject(Object object){\n  try {\n    Method method=BeanUtils.getReadMethod(object.getClass(),getName());\n    if (method != null) {\n      Object value=method.invoke(object,null);\n      initializeValue(value);\n      if (value != null) {\n        for (Iterator iter=subProperties.iterator(); iter.hasNext(); ) {\n          Property subProperty=(Property)iter.next();\n          subProperty.readFromObject(value);\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "79666", "raw_code": "private boolean internalOfferTask(AFrameTask task){\nsynchronized (mFrameTaskQueue) {\n    return mFrameTaskQueue.offer(task);\n  }\n}"}
{"ids": "48428", "raw_code": "public static boolean validImage(Image image){\n  return (image != null && image.getWidth(null) > 0 && image.getHeight(null) > 0);\n}"}
{"ids": "44389", "raw_code": "protected void ping(InetAddress address) throws Exception {\n  Socket socket=null;\n  int ping=1;\n  for (; ; ) {\n    if (isDebug()) {\n      log(\"Trial #\" + ping + \"/\"+ getMaxPings()+ \" - creating socket connected to \"+ address+ \" on port \"+ getPort());\n    }\n    try {\n      socket=new Socket(address,getPort());\n      break;\n    }\n catch (    ConnectException ce) {\n      log(\"Trial #\" + ping + \"/\"+ getMaxPings()+ \" - exception caught: \"+ ce.toString()+ \" while creating socket connected to \"+ address+ \" on port \"+ getPort());\n      ping++;\n      if (ping <= getMaxPings()) {\n        log(\"Waiting \" + getPingIntervalMilli() + \" milliseconds before retrying ...\");\n        Thread.sleep(getPingIntervalMilli());\n      }\n else {\n        break;\n      }\n    }\n  }\n  if (socket == null) {\n    throw new ConnectException(\"maxPings exceeded: \" + getMaxPings() + \". Giving up. The clamd daemon seems not to be running\");\n  }\n  try {\n    BufferedReader reader=new BufferedReader(new InputStreamReader(socket.getInputStream(),\"ASCII\"));\n    PrintWriter writer=new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())),true);\n    log(\"Sending: \\\"PING\\\" to \" + address + \" ...\");\n    writer.println(\"PING\");\n    writer.flush();\n    boolean pongReceived=false;\n    for (; ; ) {\n      String answer=reader.readLine();\n      if (answer != null) {\n        answer=answer.trim();\n        log(\"Received: \\\"\" + answer + \"\\\"\");\n        answer=answer.trim();\n        if (answer.equals(\"PONG\")) {\n          pongReceived=true;\n        }\n      }\n else {\n        break;\n      }\n    }\n    reader.close();\n    writer.close();\n    if (!pongReceived) {\n      throw new ConnectException(\"Bad answer from \\\"PING\\\" probe: expecting \\\"PONG\\\"\");\n    }\n  }\n  finally {\n    socket.close();\n  }\n}"}
{"ids": "7013", "raw_code": "private ImageSize computeSizeToFit(float maxSide){\n  if (0 == maxSide) {\n    return new ImageSize(0,0);\n  }\n  ImageSize resized=new ImageSize(this);\n  if ((this.mWidth > maxSide) || (this.mHeight > maxSide)) {\n    double ratioX=maxSide / this.mWidth;\n    double ratioY=maxSide / this.mHeight;\n    double scale=Math.min(ratioX,ratioY);\n    scale=1.0d / Integer.highestOneBit((int)Math.floor(1.0 / scale));\n    resized.mWidth=(int)(Math.floor(resized.mWidth * scale / 2) * 2);\n    resized.mHeight=(int)(Math.floor(resized.mHeight * scale / 2) * 2);\n  }\n  return resized;\n}"}
{"ids": "70792", "raw_code": "public static List<BigInteger> embeddedSelectorToPartitions(String selector,String type,DataPartitioner partitioner) throws PIRException {\n  List<BigInteger> parts;\n  int partitionBits=partitioner.getBits(type);\n  if (partitionBits > 32) {\n    int hashedSelector=KeyedHash.hash(\"aux\",32,selector,\"MD5\");\n    parts=partitioner.toPartitions(hashedSelector,PrimitiveTypePartitioner.INT);\n  }\n else {\n    parts=partitioner.toPartitions(selector,type);\n  }\n  return parts;\n}"}
{"ids": "32882", "raw_code": "public static double stddevp(double[] a,int lo,int hi){\n  return Math.sqrt(varp(a,lo,hi));\n}"}
{"ids": "33375", "raw_code": "public Java2TypeScriptTranslator(TranspilationHandler logHandler,JSweetContext context,JCCompilationUnit compilationUnit,boolean preserveSourceLineNumbers){\n  super(logHandler,context,compilationUnit,new Java2TypeScriptAdapter(context),preserveSourceLineNumbers);\n}"}
{"ids": "75375", "raw_code": "@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  int count=getChildCount();\n  mLeftWidth=0;\n  mRightWidth=0;\n  int maxHeight=0;\n  int maxWidth=0;\n  int childState=0;\n  for (int i=0; i < count; i++) {\n    final View child=getChildAt(i);\n    if (child.getVisibility() != GONE) {\n      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);\n      final LayoutParams lp=(LayoutParams)child.getLayoutParams();\n      if (lp.position == LayoutParams.POSITION_LEFT) {\n        mLeftWidth+=Math.max(maxWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);\n      }\n else       if (lp.position == LayoutParams.POSITION_RIGHT) {\n        mRightWidth+=Math.max(maxWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);\n      }\n else {\n        maxWidth=Math.max(maxWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);\n      }\n      maxHeight=Math.max(maxHeight,child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);\n      childState=combineMeasuredStates(childState,child.getMeasuredState());\n    }\n  }\n  maxWidth+=mLeftWidth + mRightWidth;\n  maxHeight=Math.max(maxHeight,getSuggestedMinimumHeight());\n  maxWidth=Math.max(maxWidth,getSuggestedMinimumWidth());\n  setMeasuredDimension(resolveSizeAndState(maxWidth,widthMeasureSpec,childState),resolveSizeAndState(maxHeight,heightMeasureSpec,childState << MEASURED_HEIGHT_STATE_SHIFT));\n}"}
{"ids": "63021", "raw_code": "protected int exec(String command,StringList args){\n  try {\n    print(command);\n    StringList cmd=new StringList();\n    cmd=cmd.plus(command);\n    if (args != null) {\n      for (      String a : args) {\n        print(\" \" + a);\n      }\n      cmd.addAll(args);\n    }\n    println(\"\");\n    ProcessBuilder pb=new ProcessBuilder();\n    pb.command(cmd.array());\n    pb.redirectErrorStream(true);\n    Process p=pb.start();\n    copyInThread(p.getInputStream(),quiet ? null : sysOut);\n    p.waitFor();\n    return p.exitValue();\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "56753", "raw_code": "protected ApplicationUser buildUser(Map<String,String> headerMap,boolean includeRoles){\n  LOGGER.debug(\"Creating Application User From Headers\");\n  Map<String,String> headerNames=getHeaderNames();\n  ApplicationUser applicationUser=createNewApplicationUser();\n  buildUserId(applicationUser,headerMap,headerNames.get(HTTP_HEADER_USER_ID));\n  buildFirstName(applicationUser,headerMap,headerNames.get(HTTP_HEADER_FIRST_NAME));\n  buildLastName(applicationUser,headerMap,headerNames.get(HTTP_HEADER_LAST_NAME));\n  buildEmail(applicationUser,headerMap,headerNames.get(HTTP_HEADER_EMAIL));\n  buildSessionId(applicationUser,headerMap,HTTP_HEADER_SESSION_ID);\n  buildSessionInitTime(applicationUser,headerMap,headerNames.get(HTTP_HEADER_SESSION_INIT_TIME));\n  userNamespaceAuthorizationHelper.buildNamespaceAuthorizations(applicationUser);\n  if (includeRoles) {\n    buildRoles(applicationUser,headerMap,headerNames.get(HTTP_HEADER_ROLES));\n  }\n  LOGGER.debug(\"Application user created successfully: \" + applicationUser);\n  return applicationUser;\n}"}
{"ids": "42140", "raw_code": "@Interruptible public static void harnessEnd(){\n  Stats.stopAll();\n  insideHarness=false;\n}"}
{"ids": "52829", "raw_code": "private Cluster<SubspaceModel> runFastDOC(Database database,Relation<V> relation,ArrayModifiableDBIDs S,int d,int n,int m,int r){\n  long[] D=null;\n  DBIDVar dV=DBIDUtil.newVar();\n  FiniteProgress iprogress=LOG.isVerbose() ? new FiniteProgress(\"Iteration progress for current cluster\",m * n,LOG) : null;\n  Random random=rnd.getSingleThreadedRandom();\n  DBIDArrayIter iter=S.iter();\n  outer:   for (int i=0; i < n; ++i) {\n    iter.seek(random.nextInt(S.size()));\n    for (int j=0; j < m; ++j) {\n      DBIDs randomSet=DBIDUtil.randomSample(S,r,random);\n      long[] nD=BitsUtil.zero(d);\n      for (int k=0; k < d; ++k) {\n        if (dimensionIsRelevant(k,relation,randomSet)) {\n          BitsUtil.setI(nD,k);\n        }\n      }\n      if (D == null || BitsUtil.cardinality(nD) > BitsUtil.cardinality(D)) {\n        D=nD;\n        dV.set(iter);\n        if (BitsUtil.cardinality(D) >= d_zero) {\n          if (iprogress != null) {\n            iprogress.setProcessed(iprogress.getTotal(),LOG);\n          }\n          break outer;\n        }\n      }\n      LOG.incrementProcessed(iprogress);\n    }\n  }\n  LOG.ensureCompleted(iprogress);\n  if (D == null || BitsUtil.cardinality(D) == 0) {\n    return null;\n  }\n  SubspaceMaximumDistanceFunction df=new SubspaceMaximumDistanceFunction(D);\n  DistanceQuery<V> dq=database.getDistanceQuery(relation,df);\n  RangeQuery<V> rq=database.getRangeQuery(dq,DatabaseQuery.HINT_SINGLE);\n  DBIDs C=DBIDUtil.intersection(S,rq.getRangeForDBID(dV,w));\n  return (C.size() > 0) ? makeCluster(relation,C,D) : null;\n}"}
{"ids": "71769", "raw_code": "public RaceGUI(String appName){\n  UIManager.put(\"swing.boldMetal\",Boolean.FALSE);\n  JFrame f=new JFrame(appName);\n  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  f.setLayout(new BorderLayout());\n  track=new TrackView();\n  f.add(track,BorderLayout.CENTER);\n  controlPanel=new RaceControlPanel();\n  f.add(controlPanel,BorderLayout.SOUTH);\n  f.pack();\n  f.setVisible(true);\n}"}
{"ids": "57111", "raw_code": "public static Iterable<String> toHexStrings(Iterable<ByteArray> arrays){\n  ArrayList<String> ret=new ArrayList<String>();\n  for (  ByteArray array : arrays)   ret.add(HexString.toHexString(array.get()));\n  return ret;\n}"}
{"ids": "5740", "raw_code": "public static List<GeoTimeSerie> partitionAndApply(Object function,WarpScriptStack stack,Macro validator,Collection<String> bylabels,List<GeoTimeSerie>... series) throws WarpScriptException {\n  Map<Map<String,String>,List<GeoTimeSerie>> unflattened=partitionAndApplyUnflattened(function,stack,validator,bylabels,series);\n  List<GeoTimeSerie> results=new ArrayList<GeoTimeSerie>();\n  for (  List<GeoTimeSerie> l : unflattened.values()) {\n    results.addAll(l);\n  }\n  return results;\n}"}
{"ids": "57497", "raw_code": "final WorkQueue registerWorker(ForkJoinWorkerThread wt){\n  Thread.UncaughtExceptionHandler handler;\n  WorkQueue[] ws;\n  int s, ps;\n  wt.setDaemon(true);\n  if ((handler=ueh) != null)   wt.setUncaughtExceptionHandler(handler);\n  do {\n  }\n while (!U.compareAndSwapInt(this,INDEXSEED,s=indexSeed,s+=SEED_INCREMENT) || s == 0);\n  WorkQueue w=new WorkQueue(this,wt,config >>> 16,s);\n  if (((ps=plock) & PL_LOCK) != 0 || !U.compareAndSwapInt(this,PLOCK,ps,ps+=PL_LOCK))   ps=acquirePlock();\n  int nps=(ps & SHUTDOWN) | ((ps + PL_LOCK) & ~SHUTDOWN);\n  try {\n    if ((ws=workQueues) != null) {\n      int n=ws.length, m=n - 1;\n      int r=(s << 1) | 1;\n      if (ws[r&=m] != null) {\n        int probes=0;\n        int step=(n <= 4) ? 2 : ((n >>> 1) & EVENMASK) + 2;\n        while (ws[r=(r + step) & m] != null) {\n          if (++probes >= n) {\n            workQueues=ws=Arrays.copyOf(ws,n<<=1);\n            m=n - 1;\n            probes=0;\n          }\n        }\n      }\n      w.eventCount=w.poolIndex=r;\n      ws[r]=w;\n    }\n  }\n  finally {\n    if (!U.compareAndSwapInt(this,PLOCK,ps,nps))     releasePlock(nps);\n  }\n  wt.setName(workerNamePrefix.concat(Integer.toString(w.poolIndex)));\n  return w;\n}"}
{"ids": "16954", "raw_code": "public void clear(){\n  documents.clear();\n  fireMRUListChanged();\n}"}
{"ids": "76229", "raw_code": "public boolean isDirectlyControlDependentOn(BasicBlock insBlock,Branch b){\n  Set<ControlFlowEdge> incomming=incomingEdgesOf(insBlock);\n  if (incomming.size() == 1) {\n    for (    ControlFlowEdge e : incomming) {\n      if (!e.hasControlDependency() && !e.isExceptionEdge()) {\n        return isDirectlyControlDependentOn(getEdgeSource(e),b);\n      }\n    }\n  }\n  boolean isRootDependent=isRootDependent(insBlock);\n  if (b == null)   return isRootDependent;\n  if (isRootDependent && b != null)   return false;\n  for (  ControlFlowEdge e : incomming) {\n    Branch current=e.getBranchInstruction();\n    if (e.isExceptionEdge()) {\n      if (current != null)       throw new IllegalStateException(\"expect exception edges to have no BranchInstruction set\");\n else       continue;\n    }\n    if (current == null)     continue;\n    if (current.equals(b))     return true;\n  }\n  return false;\n}"}
{"ids": "57557", "raw_code": "final boolean tryReadLock(){\n  Thread current=Thread.currentThread();\n  for (; ; ) {\n    int c=getState();\n    if (exclusiveCount(c) != 0 && getExclusiveOwnerThread() != current)     return false;\n    int r=sharedCount(c);\n    if (r == MAX_COUNT)     throw new Error(\"Maximum lock count exceeded\");\n    if (compareAndSetState(c,c + SHARED_UNIT)) {\n      if (r == 0) {\n        firstReader=current;\n        firstReaderHoldCount=1;\n      }\n else       if (firstReader == current) {\n        firstReaderHoldCount++;\n      }\n else {\n        HoldCounter rh=cachedHoldCounter;\n        if (rh == null || rh.tid != current.getId())         cachedHoldCounter=rh=readHolds.get();\n else         if (rh.count == 0)         readHolds.set(rh);\n        rh.count++;\n      }\n      return true;\n    }\n  }\n}"}
{"ids": "65270", "raw_code": "public static String replace(String text,String oldsub,String newsub,boolean caseInsensitive,boolean firstOnly){\n  StringBuilder buf;\n  int tln;\n  int oln=oldsub.length();\n  if (oln == 0) {\n    int nln=newsub.length();\n    if (nln == 0) {\n      return text;\n    }\n else {\n      if (firstOnly) {\n        return newsub + text;\n      }\n else {\n        tln=text.length();\n        buf=new StringBuilder(tln + (tln + 1) * nln);\n        buf.append(newsub);\n        for (int i=0; i < tln; i++) {\n          buf.append(text.charAt(i));\n          buf.append(newsub);\n        }\n        return buf.toString();\n      }\n    }\n  }\n else {\n    oldsub=caseInsensitive ? oldsub.toLowerCase() : oldsub;\n    String input=caseInsensitive ? text.toLowerCase() : text;\n    int e=input.indexOf(oldsub);\n    if (e == -1) {\n      return text;\n    }\n    int b=0;\n    tln=text.length();\n    buf=new StringBuilder(tln + Math.max(newsub.length() - oln,0) * 3);\n    do {\n      buf.append(text.substring(b,e));\n      buf.append(newsub);\n      b=e + oln;\n      e=input.indexOf(oldsub,b);\n    }\n while (e != -1 && !firstOnly);\n    buf.append(text.substring(b));\n    return buf.toString();\n  }\n}"}
{"ids": "83619", "raw_code": "public void serializeFormDef(FormDef fd,String filepath){\n  String hash=FileUtils.getMd5Hash(new File(filepath));\n  File formDef=new File(Collect.CACHE_PATH + File.separator + hash+ \".formdef\");\n  if (!formDef.exists()) {\n    FileOutputStream fos;\n    try {\n      fos=new FileOutputStream(formDef);\n      DataOutputStream dos=new DataOutputStream(fos);\n      fd.writeExternal(dos);\n      dos.flush();\n      dos.close();\n    }\n catch (    FileNotFoundException e) {\n      e.printStackTrace();\n    }\ncatch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"ids": "64933", "raw_code": "private void paintRoute(Graphics2D graphics,JXMapViewer viewer,PlottableEntity entity){\n  Set<Plottable> plottables=entity.getPlottables();\n  if (plottables.size() > 1) {\n    graphics.setColor(Color.BLACK);\n    graphics.setStroke(new BasicStroke(3));\n    drawRoute(plottables,graphics,viewer);\n    graphics.setColor(entity.getColor());\n    graphics.setStroke(new BasicStroke(1));\n    drawRoute(plottables,graphics,viewer);\n  }\n}"}
{"ids": "48362", "raw_code": "private boolean installReply(String alias,InputStream in) throws Exception {\n  if (alias == null) {\n    alias=keyAlias;\n  }\n  Pair<Key,char[]> objs=recoverKey(alias,storePass,keyPass);\n  PrivateKey privKey=(PrivateKey)objs.fst;\n  if (keyPass == null) {\n    keyPass=objs.snd;\n  }\n  Certificate userCert=keyStore.getCertificate(alias);\n  if (userCert == null) {\n    MessageFormat form=new MessageFormat(rb.getString(\"alias.has.no.public.key.certificate.\"));\n    Object[] source={alias};\n    throw new Exception(form.format(source));\n  }\n  Collection<? extends Certificate> c=cf.generateCertificates(in);\n  if (c.isEmpty()) {\n    throw new Exception(rb.getString(\"Reply.has.no.certificates\"));\n  }\n  Certificate[] replyCerts=c.toArray(new Certificate[c.size()]);\n  Certificate[] newChain;\n  if (replyCerts.length == 1) {\n    newChain=establishCertChain(userCert,replyCerts[0]);\n  }\n else {\n    newChain=validateReply(alias,userCert,replyCerts);\n  }\n  if (newChain != null) {\n    keyStore.setKeyEntry(alias,privKey,(keyPass != null) ? keyPass : storePass,newChain);\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "47757", "raw_code": "public synchronized void mouseWheel(int wheelAmt){\n  peer.mouseWheel(wheelAmt);\n  afterEvent();\n}"}
{"ids": "62071", "raw_code": "@Override public int length(){\n  return data.length / (format.getFrameSize() * 8);\n}"}
{"ids": "14390", "raw_code": "public void validate(Set setData) throws ValidationException {\n  for (Iterator iter=setData.iterator(); iter.hasNext(); ) {\n    performValidation((String)iter.next());\n  }\n}"}
{"ids": "83097", "raw_code": "public static void deleteDirectory(final File dir,boolean checkForLinks){\n  if (dir.isFile()) {\n    throw new IllegalArgumentException(\"Directory \" + dir.getName() + \" must not be a file!\");\n  }\n else   if (checkForLinks && isLink(dir)) {\n    throw new IllegalArgumentException(\"Directory \" + dir.getName() + \" doesn't exist or is a symbolic link or has a path name of type ./xyz or ../xyz !\");\n  }\n  if (dir.exists()) {\n    IOUtils.deleteDir(dir,checkForLinks);\n  }\n else {\n    throw new IllegalArgumentException(\"Directory \" + dir.getName() + \" doesn't exist!\");\n  }\n}"}
{"ids": "80679", "raw_code": "private static Marshaller createMarshaller(JAXBContext jaxbContext,String schemaPath) throws SAXException, JAXBException {\n  Schema schema=XmlParser.getSchema(new String[]{schemaPath});\n  Marshaller jaxbMarshaller=jaxbContext.createMarshaller();\n  jaxbMarshaller.setSchema(schema);\n  jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);\n  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,\"UTF-8\");\n  return jaxbMarshaller;\n}"}
{"ids": "63804", "raw_code": "public static GeneralPath cardinalSpline(float pts[],float slack,boolean closed){\n  GeneralPath path=new GeneralPath();\n  path.moveTo(pts[0],pts[1]);\n  return cardinalSpline(path,pts,slack,closed,0f,0f);\n}"}
{"ids": "74799", "raw_code": "public static String makeMethodSafe(final String S){\n  String name=makeHTMLNameSafe(S);\n  name=name.replace(\"-\",\"_\");\n  return name;\n}"}
{"ids": "78695", "raw_code": "public Builder addListenUrl(String url){\n  if (UrlUtil.isUrl(url)) {\n    if (mListenUrls == null) {\n      mListenUrls=new HashSet<String>();\n    }\n    mListenUrls.add(url);\n  }\n  return this;\n}"}
{"ids": "41273", "raw_code": "private void expand(int i){\n  if (count + i <= buf.length) {\n    return;\n  }\n  byte[] newbuf=mPool.getBuf((count + i) * 2);\n  System.arraycopy(buf,0,newbuf,0,count);\n  mPool.returnBuf(buf);\n  buf=newbuf;\n}"}
{"ids": "42913", "raw_code": "public void remove(Production production){\n  productions.remove(production);\n}"}
{"ids": "8906", "raw_code": "private void writeDelay(){\n  try {\n    Thread.sleep(10);\n  }\n catch (  InterruptedException e) {\n    fail(\"Interrupted sleep.\");\n  }\n}"}
{"ids": "10964", "raw_code": "public static void main(String[] argv){\n  ArgParser ap=new ArgParser(\"EsriShapeExport\");\n  ap.add(\"shp\",\"A URL to a shape file (.shp).\",1);\n  if (argv.length < 1) {\n    ap.bail(\"\",true);\n  }\n  ap.parse(argv);\n  String[] files=ap.getArgValues(\"shp\");\n  if (files != null && files[0] != null) {\n    String shp=files[0];\n    String dbf=null;\n    try {\n      dbf=shp.substring(0,shp.lastIndexOf('.') + 1) + PARAM_DBF;\n      DbfTableModel model=DbfTableModel.getDbfTableModel(PropUtils.getResourceOrFileOrURL(dbf));\n      EsriGraphicList list=EsriGraphicList.getEsriGraphicList(PropUtils.getResourceOrFileOrURL(shp),null,null);\n      logger.info(list.getDescription());\n      EsriShapeExport ese=new EsriShapeExport(list,model,null);\n      ese.export();\n    }\n catch (    MalformedURLException murle) {\n      logger.warning(\"EsriShapeExport: Malformed URL Exception\\n\" + murle.getMessage());\n    }\ncatch (    NullPointerException npe) {\n      logger.warning(\"EsriShapeExport: Path to shape file isn't good enough to find .dbf file and .shx file.\");\n    }\ncatch (    Exception exception) {\n      logger.warning(\"EsriShapeExport: Exception\\n\" + exception.getMessage());\n      exception.printStackTrace();\n    }\n  }\n else {\n    ap.bail(\"Need a path to a Shape file (.shp)\",true);\n  }\n  System.exit(0);\n}"}
{"ids": "5493", "raw_code": "public PartialHull(IPoint first,IPoint second){\n  points.add(first);\n  points.add(second);\n}"}
{"ids": "52492", "raw_code": "public static SortedSet<Interval> findFullAvailabilityGaps(Set<Interval> availableIntervals,Set<Interval> neededIntervals){\n  Comparator<Interval> intervalStartComparator=new IntervalStartComparator();\n  SortedSet<Interval> sortedAvailableIntervals=new TreeSet<>(intervalStartComparator);\n  sortedAvailableIntervals.addAll(availableIntervals);\n  SortedSet<Interval> sortedNeededIntervals=new TreeSet<>(intervalStartComparator);\n  sortedNeededIntervals.addAll(neededIntervals);\n  Iterator<Interval> availableIntervalsIterator=sortedAvailableIntervals.iterator();\n  if (!availableIntervalsIterator.hasNext()) {\n    return sortedNeededIntervals;\n  }\n  Interval available=availableIntervalsIterator.next();\n  SortedSet<Interval> missingIntervals=new TreeSet<>(intervalStartComparator);\n  for (  Interval needed : sortedNeededIntervals) {\n    while (!canDetermineAvailability(available,needed) && availableIntervalsIterator.hasNext()) {\n      available=availableIntervalsIterator.next();\n    }\n    if (available.contains(needed)) {\n      continue;\n    }\n    missingIntervals.add(needed);\n  }\n  return missingIntervals;\n}"}
{"ids": "79459", "raw_code": "public static List<String> split(String str,String delim){\n  List<String> splitList=null;\n  StringTokenizer st=null;\n  if (str == null)   return splitList;\n  if (delim != null)   st=new StringTokenizer(str,delim);\n else   st=new StringTokenizer(str);\n  if (st != null && st.hasMoreTokens()) {\n    splitList=new LinkedList<String>();\n    while (st.hasMoreTokens())     splitList.add(st.nextToken());\n  }\n  return splitList;\n}"}
{"ids": "2119", "raw_code": "public void writeExif(String jpegFileName,String exifOutFileName) throws FileNotFoundException, IOException {\n  if (jpegFileName == null || exifOutFileName == null) {\n    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);\n  }\n  InputStream is=null;\n  is=new FileInputStream(jpegFileName);\n  writeExif(is,exifOutFileName);\n  is.close();\n}"}
{"ids": "66917", "raw_code": "public boolean isGenClass(SootClass clz){\n  return genClasses.contains(clz.getName());\n}"}
{"ids": "20431", "raw_code": "public boolean hasExtraStillImage(){\n  return isApng() && !firsIdatApngFrame;\n}"}
{"ids": "86327", "raw_code": "public void removeChangeListener(final PTPropertyChangeListener listener){\n  changeListeners.remove(listener);\n}"}
{"ids": "63525", "raw_code": "public static ResultSet optimizeInJoinSelect(){\n  SimpleResultSet rs=new SimpleResultSet();\n  rs.addColumn(\"X\",Types.INTEGER,0,0);\n  rs.addRow(1);\n  return rs;\n}"}
{"ids": "84673", "raw_code": "public PartitionSubstitutionModel parsePAUPBlock(BeautiOptions options,List<CharSet> charSets) throws ImportException, IOException {\n  PartitionSubstitutionModel model=new PartitionSubstitutionModel(options,\"nucs\");\n  readTopLevelBlock(options,model,charSets);\n  return model;\n}"}
{"ids": "16505", "raw_code": "private void zEventToggleTimeMenuButtonMousePressed(MouseEvent e){\n  togglePopup();\n}"}
{"ids": "65778", "raw_code": "private void addLine(GridField field,VEditor editor,boolean mandatory){\n  log.fine(\"Field=\" + field);\n  JLabel label=VEditorFactory.getLabel(field);\n  label.setLabelFor((Component)editor);\n  editor.setReadWrite(true);\n  editor.setMandatory(mandatory);\n  field.addPropertyChangeListener(editor);\n  if (m_newRow) {\n    m_gbc.gridy=m_line++;\n    m_gbc.gridx=0;\n  }\n else   m_gbc.gridx=2;\n  m_gbc.insets=m_labelInsets;\n  m_gbc.fill=GridBagConstraints.HORIZONTAL;\n  m_gbc.weightx=0;\n  parameterPanel.add(label,m_gbc);\n  if (m_newRow)   m_gbc.gridx=1;\n else   m_gbc.gridx=3;\n  m_gbc.insets=m_fieldInsets;\n  m_gbc.fill=GridBagConstraints.HORIZONTAL;\n  m_gbc.weightx=1;\n  parameterPanel.add((Component)editor,m_gbc);\n  m_newRow=!m_newRow;\n}"}
{"ids": "47701", "raw_code": "protected Object lazilyLoadDesktopProperty(String name){\n  return null;\n}"}
{"ids": "23904", "raw_code": "@edu.umd.cs.findbugs.annotations.SuppressWarnings(value=\"ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD\",justification=\"sync on localExceptions guards concurrent modification but this is a replacement\") public void initRecoveredVersion(T member,RegionVersionHolder<T> v,boolean latestOplog){\n  RegionVersionHolder<T> recovered=v.clone();\n  if (member == null || member.equals(myId)) {\nsynchronized (localExceptions) {\n      if (latestOplog || localVersion.get() == 0) {\n        localExceptions=recovered;\n        if (logger.isTraceEnabled(LogMarker.RVV)) {\n          logger.trace(LogMarker.RVV,\"initRecoveredVersion setting local version to {}\",recovered.version);\n        }\n        localVersion.set(recovered.version);\n      }\n    }\n  }\n else {\n    Long gcVersion=memberToGCVersion.get(member);\nsynchronized (memberToVersion) {\n      RegionVersionHolder<T> oldVersion=memberToVersion.get(member);\n      if (latestOplog || oldVersion == null || oldVersion.version == 0) {\n        if (gcVersion != null) {\n          recovered.removeExceptionsOlderThan(gcVersion);\n        }\n        memberToVersion.put(member,recovered);\n      }\n    }\n  }\n}"}
{"ids": "56529", "raw_code": "protected void notifyClickListenersAboutClick(int item){\n  if (clickingListeners.size() > 0) {\n    for (    OnWheelClickedListener listener : clickingListeners) {\n      listener.onItemClicked(this,item);\n    }\n  }\n else {\n    setCurrentItem(item,true,500);\n  }\n}"}
{"ids": "38743", "raw_code": "@Override public synchronized void disconnectionNotification(String eventName,Object source){\n  List<Object> listenees=m_listenees.get(eventName);\n  if (listenees != null) {\n    listenees.remove(source);\n    if (listenees.size() == 0) {\n      m_listenees.remove(eventName);\n    }\n  }\n  if (eventName.compareTo(\"instance\") == 0) {\n    stop();\n  }\n}"}
{"ids": "14862", "raw_code": "private String replaceIllegalChar(String data,char ch,String replacement){\n  int idx=0;\n  StringBuilder buffer=new StringBuilder(data.length() * 4);\n  while ((data != null) && (idx=data.indexOf(ch)) != -1) {\n    buffer.append(data.substring(0,idx));\n    buffer.append(replacement);\n    data=data.substring(idx + 1);\n  }\n  if ((data != null) && (data.length() > 0)) {\n    buffer.append(data);\n  }\n  return buffer.toString();\n}"}
{"ids": "71665", "raw_code": "public org.dom4j.Attribute createAttribute(Element elem,Attribute attr){\n  return factory.createAttribute(elem,createQName(attr.getName()),attr.getValue());\n}"}
{"ids": "54159", "raw_code": "public LogEntry(){\n  index=ENTRY_INDEX.getAndIncrement();\n  time=System.currentTimeMillis();\n}"}
{"ids": "242", "raw_code": "public boolean isSignatureValid(){\n  return ECKey.verify(Utils.doubleDigest(content),signature,params.getAlertSigningKey());\n}"}
{"ids": "62420", "raw_code": "private void validateCreateInformation(Date startTime,String taskName){\n  Assert.notNull(startTime,\"TaskExecution start time cannot be null.\");\n  if (taskName != null && taskName.length() > this.maxTaskNameSize) {\n    throw new IllegalArgumentException(\"TaskName length exceeds \" + this.maxTaskNameSize + \" characters\");\n  }\n}"}
{"ids": "76485", "raw_code": "private static Object increment(final Object object,final Number amount,final JsonPointer field) throws BadRequestException {\n  if (object instanceof Long) {\n    return ((Long)object) + amount.longValue();\n  }\n else   if (object instanceof Integer) {\n    return ((Integer)object) + amount.intValue();\n  }\n else   if (object instanceof Float) {\n    return ((Float)object) + amount.floatValue();\n  }\n else   if (object instanceof Double) {\n    return ((Double)object) + amount.doubleValue();\n  }\n else {\n    throw new BadRequestException(\"The field '\" + field + \"' is not a number\");\n  }\n}"}
{"ids": "59714", "raw_code": "public static LinkedHashSet<Entity> findEntites(LinkedHashSet<Entity> matches,HashSet<Entity> checked,Entity entity,Predicate predicate){\n  if (!checked.add(entity)) {\n    return matches;\n  }\n  if (predicate.matches(entity)) {\n    matches.add(entity);\n  }\n  for (  RefNode refNode : entity.getChildren(RefNode.class)) {\n    Entity e=refNode.getReference();\n    if (e != null) {\n      findEntites(matches,checked,e,predicate);\n    }\n  }\n  for (  ToManyNode toManyNode : entity.getChildren(ToManyNode.class)) {\n    for (    Entity e : toManyNode.getList()) {\n      if (e != null) {\n        findEntites(matches,checked,e,predicate);\n      }\n    }\n  }\n  return matches;\n}"}
{"ids": "11127", "raw_code": "protected OMGeometry createMGRSRectangle(MGRSPoint mgrsBasePoint,double voffset,double hoffset,double interval,Ellipsoid ellipsoid){\n  double[] llpoints=new double[10];\n  double easting=mgrsBasePoint.easting + hoffset;\n  double northing=mgrsBasePoint.northing + voffset;\n  int zone_number=mgrsBasePoint.zone_number;\n  char zone_letter=mgrsBasePoint.zone_letter;\n  LatLonPoint llp1=new LatLonPoint.Double();\n  llp1=MGRSPoint.MGRStoLL(ellipsoid,northing,easting,zone_number,zone_letter,llp1);\n  llpoints[0]=llp1.getY();\n  llpoints[1]=llp1.getX();\n  llpoints[8]=llp1.getY();\n  llpoints[9]=llp1.getX();\n  MGRSPoint.MGRStoLL(ellipsoid,northing,easting + interval,zone_number,zone_letter,llp1);\n  llpoints[2]=llp1.getY();\n  llpoints[3]=llp1.getX();\n  MGRSPoint.MGRStoLL(ellipsoid,northing + interval,easting + interval,zone_number,zone_letter,llp1);\n  llpoints[4]=llp1.getY();\n  llpoints[5]=llp1.getX();\n  MGRSPoint.MGRStoLL(ellipsoid,northing + interval,easting,zone_number,zone_letter,llp1);\n  llpoints[6]=llp1.getY();\n  llpoints[7]=llp1.getX();\n  MGRSPoint mgrs=new MGRSPoint(northing,easting,zone_number,zone_letter);\n  mgrs.resolve(mgrsBasePoint.getAccuracy());\n  String mgrsString=mgrs.getMGRS();\n  if (Debug.debugging(\"utmgriddetail\"))   Debug.output(\" - assigning \" + mgrsString + \" to poly with \"+ mgrs.getAccuracy());\n  PolygonGeometry poly=new PolygonGeometry.LL(llpoints,OMGraphic.DECIMAL_DEGREES,(interval <= 1000 ? OMGraphic.LINETYPE_STRAIGHT : OMGraphic.LINETYPE_GREATCIRCLE));\n  poly.putAttribute(OMGraphic.APP_OBJECT,mgrsString);\n  return poly;\n}"}
{"ids": "13994", "raw_code": "public String toXMLString() throws XACMLException {\n  return toXMLString(true,false);\n}"}
{"ids": "6794", "raw_code": "public void addMemoryPressureListener(MemoryPressureListener listener){\n  mListeners.add(listener);\n}"}
{"ids": "40837", "raw_code": "private void resetForOT(){\n  if (bottomOT && homeScore == awayScore) {\n    gameYardLine=75;\n    gameYardsNeed=10;\n    gameDown=1;\n    numOT++;\n    if ((numOT % 2) == 0)     gamePoss=true;\n else     gamePoss=false;\n    gameTime=-1;\n    bottomOT=false;\n  }\n else   if (!bottomOT) {\n    gamePoss=!gamePoss;\n    gameYardLine=75;\n    gameYardsNeed=10;\n    gameDown=1;\n    gameTime=-1;\n    bottomOT=true;\n  }\n else {\n    playingOT=false;\n  }\n}"}
{"ids": "36829", "raw_code": "public synchronized void startPolling(){\n  m_scheduler.scheduleAtFixedRate(m_notificationPoller,0,500,TimeUnit.MILLISECONDS);\n}"}
{"ids": "30917", "raw_code": "private void dropProxy(ProxyReg reg){\nsynchronized (caches) {\n    Iterator iter=caches.iterator();\n    while (iter.hasNext()) {\n      LookupCacheImpl cache=(LookupCacheImpl)iter.next();\n      cache.removeProxyReg(reg);\n    }\n  }\n}"}
{"ids": "36883", "raw_code": "public long toLong(){\n  return m_value.longValue();\n}"}
{"ids": "45439", "raw_code": "public static void moveToDirectory(File src,File destDir,boolean createDestDir) throws IOException {\n  if (src == null) {\n    throw new NullPointerException(\"Source must not be null\");\n  }\n  if (destDir == null) {\n    throw new NullPointerException(\"Destination must not be null\");\n  }\n  if (!src.exists()) {\n    throw new FileNotFoundException(\"Source '\" + src + \"' does not exist\");\n  }\n  if (src.isDirectory()) {\n    moveDirectoryToDirectory(src,destDir,createDestDir);\n  }\n else {\n    moveFileToDirectory(src,destDir,createDestDir);\n  }\n}"}
{"ids": "82586", "raw_code": "public static int copyAndCloseBoth(Reader input,Writer output) throws IOException {\n  try {\n    return copyAndCloseOutput(input,output);\n  }\n  finally {\n    input.close();\n  }\n}"}
{"ids": "11858", "raw_code": "protected void writeHeader() throws IOException {\n  header=new byte[SHAPE_FILE_HEADER_LENGTH];\n  writeBEInt(header,0,SHAPE_FILE_CODE);\n  writeBEInt(header,24,50);\n  writeLEInt(header,28,SHAPE_FILE_VERSION);\n  writeLEInt(header,32,SHAPE_TYPE_NULL);\n  writeLEDouble(header,36,0.0);\n  writeLEDouble(header,44,0.0);\n  writeLEDouble(header,52,0.0);\n  writeLEDouble(header,60,0.0);\n  raf.seek(0);\n  raf.write(header,0,SHAPE_FILE_HEADER_LENGTH);\n}"}
{"ids": "67966", "raw_code": "public String hashKeyForDisk(String key){\n  String cacheKey;\n  try {\n    final MessageDigest mDigest=MessageDigest.getInstance(\"MD5\");\n    mDigest.update(key.getBytes());\n    cacheKey=bytesToHexString(mDigest.digest());\n  }\n catch (  NoSuchAlgorithmException e) {\n    cacheKey=String.valueOf(key.hashCode());\n  }\n  return cacheKey;\n}"}
{"ids": "77835", "raw_code": "private Favorite packFavorite(Cursor c){\n  Favorite favorite=new Favorite();\n  favorite.id=c.getLong(ID_INDEX);\n  favorite.screen=c.getInt(SCREEN_INDEX);\n  favorite.container=c.getInt(CONTAINER_INDEX);\n  favorite.cellX=c.getInt(CELLX_INDEX);\n  favorite.cellY=c.getInt(CELLY_INDEX);\n  favorite.spanX=c.getInt(SPANX_INDEX);\n  favorite.spanY=c.getInt(SPANY_INDEX);\n  favorite.iconType=c.getInt(ICON_TYPE_INDEX);\n  if (favorite.iconType == Favorites.ICON_TYPE_RESOURCE) {\n    String iconPackage=c.getString(ICON_PACKAGE_INDEX);\n    if (!TextUtils.isEmpty(iconPackage)) {\n      favorite.iconPackage=iconPackage;\n    }\n    String iconResource=c.getString(ICON_RESOURCE_INDEX);\n    if (!TextUtils.isEmpty(iconResource)) {\n      favorite.iconResource=iconResource;\n    }\n  }\n  if (favorite.iconType == Favorites.ICON_TYPE_BITMAP) {\n    byte[] blob=c.getBlob(ICON_INDEX);\n    if (blob != null && blob.length > 0) {\n      favorite.icon=blob;\n    }\n  }\n  String title=c.getString(TITLE_INDEX);\n  if (!TextUtils.isEmpty(title)) {\n    favorite.title=title;\n  }\n  String intentDescription=c.getString(INTENT_INDEX);\n  if (!TextUtils.isEmpty(intentDescription)) {\n    try {\n      Intent intent=Intent.parseUri(intentDescription,0);\n      intent.removeExtra(ItemInfo.EXTRA_PROFILE);\n      favorite.intent=intent.toUri(0);\n    }\n catch (    URISyntaxException e) {\n      Log.e(TAG,\"Invalid intent\",e);\n    }\n  }\n  favorite.itemType=c.getInt(ITEM_TYPE_INDEX);\n  if (favorite.itemType == Favorites.ITEM_TYPE_APPWIDGET) {\n    favorite.appWidgetId=c.getInt(APPWIDGET_ID_INDEX);\n    String appWidgetProvider=c.getString(APPWIDGET_PROVIDER_INDEX);\n    if (!TextUtils.isEmpty(appWidgetProvider)) {\n      favorite.appWidgetProvider=appWidgetProvider;\n    }\n  }\n  return favorite;\n}"}
{"ids": "44552", "raw_code": "public static void unregister(SPINThreadFunctions old){\n  if (old != null) {\n    localFunctions.set(old);\n  }\n else {\n    localFunctions.remove();\n  }\n}"}
{"ids": "11050", "raw_code": "public static boolean loadProperties(Properties properties,InputStream propsIn){\n  try {\n    properties.load(propsIn);\n    return true;\n  }\n catch (  java.io.IOException e) {\n    if (logger.isLoggable(Level.FINE)) {\n      logger.warning(\"Caught IOException loading properties from InputStream.\");\n    }\n    return false;\n  }\n}"}
{"ids": "32894", "raw_code": "public Complex sin(){\n  return new Complex(Math.sin(re) * Math.cosh(im),Math.cos(re) * Math.sinh(im));\n}"}
{"ids": "41502", "raw_code": "@OnClick(R.id.dismiss_button) public void onDismissClick(View view){\n  if (SystemClock.elapsedRealtime() - mLastClickTime < 500) {\n    return;\n  }\n  mLastClickTime=SystemClock.elapsedRealtime();\n  dismissOffer(getAdapterPosition());\n  if (snackbar != null) {\n    snackbar.dismiss();\n  }\n}"}
{"ids": "71583", "raw_code": "public Table findTable(String name){\n  return findTable(name,false);\n}"}
{"ids": "40411", "raw_code": "public static void appendString(final StringBuffer buf,final String s){\n  buf.append('\\\"');\n  for (int i=0; i < s.length(); ++i) {\n    char c=s.charAt(i);\n    if (c == '\\n') {\n      buf.append(\"\\\\n\");\n    }\n else     if (c == '\\r') {\n      buf.append(\"\\\\r\");\n    }\n else     if (c == '\\\\') {\n      buf.append(\"\\\\\\\\\");\n    }\n else     if (c == '\"') {\n      buf.append(\"\\\\\\\"\");\n    }\n else     if (c < 0x20 || c > 0x7f) {\n      buf.append(\"\\\\u\");\n      if (c < 0x10) {\n        buf.append(\"000\");\n      }\n else       if (c < 0x100) {\n        buf.append(\"00\");\n      }\n else       if (c < 0x1000) {\n        buf.append('0');\n      }\n      buf.append(Integer.toString(c,16));\n    }\n else {\n      buf.append(c);\n    }\n  }\n  buf.append('\\\"');\n}"}
{"ids": "6638", "raw_code": "public void draw(final Graphics g,final int height,final int width){\n  int constantDim;\n  int changingDim;\n  if (orientation == X_AXIS) {\n    changingDim=width;\n    constantDim=height;\n  }\n else {\n    changingDim=height;\n    constantDim=width;\n  }\n  int dimStep;\n  if (fixedSteps) {\n    dimStep=changingDim / STEPS;\n  }\n else {\n    dimStep=2;\n    STEPS=changingDim / dimStep;\n  }\n  float red=_redT;\n  float green=_greenT;\n  float blue=_blueT;\n  int offset=0;\n  for (int i=0; i < STEPS; i++) {\n    Color c=new Color(round(red),round(green),round(blue));\n    g.setColor(c);\n    drawRect(g,offset,constantDim,dimStep);\n    offset+=dimStep;\n    float value=shader.getValue((float)i / (float)STEPS);\n    red=_redT + (_redB - _redT) * value;\n    green=_greenT + (_greenB - _greenT) * value;\n    blue=_blueT + (_blueB - _blueT) * value;\n  }\n  Color c=new Color(round(red),round(green),round(blue));\n  g.setColor(c);\n  drawRect(g,offset,constantDim,changingDim - offset);\n}"}
{"ids": "63801", "raw_code": "public static double[] convexHull(double[] pts,int len,float[] angles,int[] idx,int[] stack){\n  int plen=len / 2 - 1;\n  if (len < 6) {\n    throw new IllegalArgumentException(\"Input must have at least 3 points\");\n  }\n  if (angles.length < plen || idx.length < plen || stack.length < len / 2) {\n    throw new IllegalArgumentException(\"Pre-allocated data structure too small\");\n  }\n  int i0=0;\n  for (int i=2; i < len; i+=2) {\n    if (pts[i + 1] < pts[i0 + 1]) {\n      i0=i;\n    }\n else     if (pts[i + 1] == pts[i0 + 1]) {\n      i0=(pts[i] < pts[i0] ? i : i0);\n    }\n  }\n  for (int i=0, j=0; i < len; i+=2) {\n    if (i == i0)     continue;\n    angles[j]=(float)Math.atan2(pts[i + 1] - pts[i0 + 1],pts[i] - pts[i0]);\n    idx[j++]=i;\n  }\n  ArrayLib.sort(angles,idx,plen);\n  float angle=angles[0];\n  int ti=0, tj=idx[0];\n  for (int i=1; i < plen; i++) {\n    int j=idx[i];\n    if (angle == angles[i]) {\n      double x1=pts[tj] - pts[i0];\n      double y1=pts[tj + 1] - pts[i0 + 1];\n      double x2=pts[j] - pts[i0];\n      double y2=pts[j + 1] - pts[i0 + 1];\n      double d1=x1 * x1 + y1 * y1;\n      double d2=x2 * x2 + y2 * y2;\n      if (d1 >= d2) {\n        idx[i]=-1;\n      }\n else {\n        idx[ti]=-1;\n        angle=angles[i];\n        ti=i;\n        tj=j;\n      }\n    }\n else {\n      angle=angles[i];\n      ti=i;\n      tj=j;\n    }\n  }\n  int sp=0;\n  stack[sp++]=i0;\n  int j=0;\n  for (int k=0; k < 2; j++) {\n    if (idx[j] != -1) {\n      stack[sp++]=idx[j];\n      k++;\n    }\n  }\n  for (; j < plen; j++) {\n    if (idx[j] == -1)     continue;\n    while (isNonLeft(i0,stack[sp - 2],stack[sp - 1],idx[j],pts)) {\n      sp--;\n    }\n    stack[sp++]=idx[j];\n  }\n  double[] hull=new double[2 * sp];\n  for (int i=0; i < sp; i++) {\n    hull[2 * i]=pts[stack[i]];\n    hull[2 * i + 1]=pts[stack[i] + 1];\n  }\n  return hull;\n}"}
{"ids": "2326", "raw_code": "private void sendMessages(){\n  List<MurmurMessage> messages=getMessages(0);\n  MurmurMessage exchangeInfoMessage=new MurmurMessage(\"ExchangeAgreement\",Integer.toString(messages.size()),1d);\n  if (lengthValueWrite(out,exchangeInfoMessage.toJSON(MurmurApplication.getContext(),0,0))) {\n    for (    MurmurMessage message : messages) {\n      List<MurmurMessage> packet=new ArrayList<>();\n      packet.add(message);\n      CleartextMessages messagesMessage=new CleartextMessages((ArrayList<MurmurMessage>)packet);\n      lengthValueWrite(out,messagesMessage.toJson(MurmurApplication.getContext()));\n    }\n  }\n}"}
{"ids": "1141", "raw_code": "protected void init(String str){\n  int len=str.length();\n  text=new char[len];\n  lcText=new char[len];\n  for (int i=0; i < len; i++) {\n    char c=str.charAt(i);\n    text[i]=c;\n    if (c == '\\n' || c == '\\r' || c == '\\t') {\n      lcText[i]=' ';\n    }\n else     lcText[i]=((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) ? c : Character.toLowerCase(c);\n  }\n}"}
{"ids": "30847", "raw_code": "private void updateAttrs(SvcReg reg,EntryRep entry,Object[] values){\n  EntryClass eclass=entry.eclass;\n  for (int fldidx=values.length; --fldidx >= 0; ) {\n    Object oval=entry.fields[fldidx];\n    Object nval=values[fldidx];\n    if (nval != null && !nval.equals(oval)) {\n      eclass=getDefiningClass(eclass,fldidx);\n      HashMap map=addAttr(reg,eclass,fldidx,nval);\n      entry.fields[fldidx]=nval;\n      if (hasAttr(reg,eclass,fldidx,oval))       continue;\n      ArrayList regs=(ArrayList)map.get(oval);\n      regs.remove(regs.indexOf(reg));\n      if (regs.isEmpty())       map.remove(oval);\n    }\n  }\n}"}
{"ids": "83200", "raw_code": "public void finalizeNetworkConstruction(){\n  Set<MotifLink> keySet=nodeSetsDepartingFromLink.keySet();\n  nodesWithLink=new HashMap<MotifLink,ArrayList<Node>>(keySet.size());\n  for (  MotifLink motifLink : keySet) {\n    Set<Node> nodes=nodeSetsDepartingFromLink.get(motifLink);\n    ArrayList<Node> n=new ArrayList<Node>(nodes);\n    Collections.sort(n);\n    nodesWithLink.put(motifLink,n);\n  }\n  nodeSetsDepartingFromLink=null;\n}"}
{"ids": "1647", "raw_code": "public Collection<AISValidationFailure> failures(){\n  return Collections.unmodifiableCollection(failureList);\n}"}
{"ids": "59975", "raw_code": "public static GetInactiveImagesResponse checkGetInactiveImagesResponse(GetInactiveImagesResponse response) throws RpcException {\n  logger.info(\"Checking {}\",response);\nswitch (response.getResult()) {\ncase OK:\n    break;\ncase SYSTEM_ERROR:\n  throw new SystemErrorException(response.getError());\ncase DATASTORE_NOT_FOUND:\nthrow new DatastoreNotFoundException(response.getError());\ncase OPERATION_IN_PROGRESS:\nthrow new OperationInProgressException(response.getError());\ndefault :\nthrow new RpcException(String.format(\"Unexpected return code: %s\",response.getResult()));\n}\nreturn response;\n}"}
{"ids": "68720", "raw_code": "public double semiDeviation(){\n  return Math.sqrt(semiVariance());\n}"}
{"ids": "34278", "raw_code": "private void checkPostsDisplayOnRecyclerView(List<Post> postsToCheck,int position){\n  int columnCount=5;\n  int size=postsToCheck.size() + position;\n  int pos=0;\n  for (int i=position; i < size; i++) {\n    checkItemAtPosition(i,postsToCheck.get(pos));\n    if (((i + 1) % columnCount) == 0) {\n      int nextRowStart=i + columnCount;\n      int nextRowEnd=nextRowStart - columnCount + 1;\n      for (int n=nextRowStart; n >= nextRowEnd; n--) {\n        checkItemAtPosition(n,postsToCheck.get(n - position));\n      }\n      i=i + columnCount;\n    }\n    pos++;\n  }\n}"}
{"ids": "42375", "raw_code": "private void addDependentClassesToWorklist(GVCongruenceClass c){\n  for (  ValueGraphVertex v : c) {\n    for (Enumeration<GraphNode> e=v.inNodes(); e.hasMoreElements(); ) {\n      ValueGraphVertex in=(ValueGraphVertex)e.nextElement();\n      int vn=in.getValueNumber();\n      GVCongruenceClass x=B.get(vn);\n      workList.push(x);\n    }\n  }\n}"}
{"ids": "6844", "raw_code": "public synchronized JSONObject toJSONObject(){\n  JSONObject res=new JSONObject();\n  res.putAll(this);\n  return res;\n}"}
{"ids": "6491", "raw_code": "private Shape createEllipseInternal(int x,int y,int w,int h){\n  ellipse.setFrame(x,y,w,h);\n  return ellipse;\n}"}
{"ids": "75514", "raw_code": "public static String write(StringBuilder sb,String... strings){\n  for (  String string : strings)   sb.append(string);\n  return sb.toString();\n}"}
{"ids": "4584", "raw_code": "public ImportFolderValidation validate(final String path){\n  Check.notNull(path,\"path\");\n  if (validationCache == null) {\n    validationCache=new HashMap();\n  }\n else {\n    if (validationCache.containsKey(path)) {\n      return (ImportFolderValidation)validationCache.get(path);\n    }\n  }\n  final ImportFolderValidation validation=computeValidation(path);\n  validationCache.put(path,validation);\n  return validation;\n}"}
{"ids": "15168", "raw_code": "private static byte[] hmac_sha(String crypto,byte[] keyBytes,byte[] text){\n  try {\n    Mac hmac;\n    hmac=Mac.getInstance(crypto);\n    SecretKeySpec macKey=new SecretKeySpec(keyBytes,\"RAW\");\n    hmac.init(macKey);\n    return hmac.doFinal(text);\n  }\n catch (  GeneralSecurityException gse) {\n    throw new UndeclaredThrowableException(gse);\n  }\n}"}
{"ids": "21019", "raw_code": "public static String fetchCgName(String clusterCgName){\n  String cgName=null;\n  if (clusterCgName != null && !clusterCgName.isEmpty()) {\n    String[] tmp=clusterCgName.split(SPLITTER);\n    cgName=tmp[1];\n  }\n  return cgName;\n}"}
{"ids": "59715", "raw_code": "public void add(int index,Entity entity){\n  if (entities.contains(entity)) {\n    throw new IllegalStateException(\"ToMany relation already contains '\" + entity + \"'\");\n  }\n  if (entity.getEntityType() != entityType) {\n    throw new IllegalStateException(\"Cannot add \" + entity.getEntityType() + \" to \"+ getParent()+ \".\"+ getName());\n  }\n  if (entity.isClearlyNotInDatabase()) {\n    newEntities.add(entity);\n  }\n  entities.add(index,entity);\n}"}
{"ids": "44810", "raw_code": "public DistributedLogConfiguration(){\n  super();\n  addConfiguration(new SystemConfiguration());\n}"}
{"ids": "27950", "raw_code": "public static double sampleStandardDeviation(int size,double sampleVariance){\n  double s, Cn;\n  int n=size;\n  s=Math.sqrt(sampleVariance);\n  if (n > 30) {\n    Cn=1 + 1.0 / (4 * (n - 1));\n  }\n else {\n    Cn=Math.sqrt((n - 1) * 0.5) * Gamma.gamma((n - 1) * 0.5) / Gamma.gamma(n * 0.5);\n  }\n  return Cn * s;\n}"}
{"ids": "27165", "raw_code": "void normalize() throws IOException {\n  int end=chars.length();\n  if (end == 0) {\n    return;\n  }\n  int pos=0;\n  int codepoint=Character.codePointAt(chars,0);\n  boolean escaped=false;\n  for (int i=0; i < end; ) {\n    int charCount=Character.charCount(codepoint);\n    int i2=i + charCount;\n    int nextCodepoint=i2 < end ? Character.codePointAt(chars,i2) : -1;\n    if (escaped) {\n      escaped=false;\n      if (escapeOneCodepoint(pos,i - 1,codepoint,nextCodepoint)) {\n        pos=i2;\n      }\n    }\n else     if (codepoint == '\\\\') {\n      escaped=true;\n    }\n else     if (escapeOneCodepoint(pos,i,codepoint,nextCodepoint)) {\n      pos=i2;\n    }\n    i=i2;\n    codepoint=nextCodepoint;\n  }\n  out.append(chars,pos,end);\n}"}
{"ids": "11763", "raw_code": "protected void rebuildListModel(){\n  DefaultListModel dlm=(DefaultListModel)getListModel();\n  OMGraphicList list=getList();\n  int[] selectedIndicies=null;\n  if (list != null) {\n    if (selectedTiles != null && selectedTiles.length > 0) {\n      selectedIndicies=new int[selectedTiles.length];\n    }\n    int tileCount=0;\n    int selectedIndex=0;\n    if (selectedIndicies != null) {\n      for (      OMGraphic omg : list) {\n        ImageTile imageTile=(ImageTile)omg;\n        if (imageTile.isSelected() && selectedIndex < selectedIndicies.length) {\n          selectedIndicies[selectedIndex++]=tileCount;\n        }\n        tileCount++;\n      }\n    }\n    dlm.clear();\n    for (    OMGraphic omg : list) {\n      tileCount++;\n      dlm.addElement(omg);\n    }\n  }\n  if (resultsList != null) {\n    if (selectedIndicies != null) {\n      resultsList.setSelectedIndices(selectedIndicies);\n    }\n    resultsList.repaint();\n  }\n}"}
{"ids": "84908", "raw_code": "public void tick(){\n  tick(1);\n}"}
{"ids": "68850", "raw_code": "public Result send(Email email,boolean... sync){\n  return service.send(email,boolToInt(true,sync));\n}"}
{"ids": "20111", "raw_code": "private boolean isPopulating(){\n  return isPopulating;\n}"}
{"ids": "18185", "raw_code": "public void processAttributes(java.io.Writer writer,int nAttrs) throws IOException, SAXException {\n  String encoding=getEncoding();\n  for (int i=0; i < nAttrs; i++) {\n    final String name=m_attributes.getQName(i);\n    final String value=m_attributes.getValue(i);\n    writer.write(' ');\n    writer.write(name);\n    writer.write(\"=\\\"\");\n    writeAttrString(writer,value,encoding);\n    writer.write('\\\"');\n  }\n}"}
{"ids": "28672", "raw_code": "public int processor(){\n  return Integer.parseInt(fields[38]);\n}"}
{"ids": "6786", "raw_code": "public void addNativeChildAt(ReactShadowNode child,int nativeIndex){\n  Assertions.assertCondition(!mIsLayoutOnly);\n  Assertions.assertCondition(!child.mIsLayoutOnly);\n  if (mNativeChildren == null) {\n    mNativeChildren=new ArrayList<>(4);\n  }\n  mNativeChildren.add(nativeIndex,child);\n  child.mNativeParent=this;\n}"}
{"ids": "78344", "raw_code": "public boolean containsKey(final Object eKey){\n  return _elementOrder.contains(eKey);\n}"}
{"ids": "48782", "raw_code": "private void handleExitMessage(final Component component,final long nativeCtxt){\n  postDropTargetEvent(component,0,0,DnDConstants.ACTION_NONE,DnDConstants.ACTION_NONE,null,nativeCtxt,SunDropTargetEvent.MOUSE_EXITED,SunDropTargetContextPeer.DISPATCH_SYNC);\n}"}
{"ids": "41124", "raw_code": "public void addParameterAnnotations(CstMethodRef method,AnnotationsList list){\n  if (parameterAnnotations == null) {\n    parameterAnnotations=new ArrayList<ParameterAnnotationStruct>();\n  }\n  parameterAnnotations.add(new ParameterAnnotationStruct(method,list));\n}"}
{"ids": "6345", "raw_code": "public static String unhtmlSingleQuotes(final String str){\n  return str.replaceAll(\"&rsquo;\",\"\\'\");\n}"}
{"ids": "66197", "raw_code": "public void addInputMethodListener(InputMethodListener l){\n  m_textArea.addInputMethodListener(l);\n}"}
{"ids": "6747", "raw_code": "public void initRawSwap(ArrayList<S2CellId> cellIds){\n  this.cellIds=new ArrayList<S2CellId>(cellIds);\n  cellIds.clear();\n}"}
{"ids": "53884", "raw_code": "protected void encryptFinal() throws IOException {\n  inBuffer.flip();\n  outBuffer.clear();\n  try {\n    cipher.doFinal(inBuffer,outBuffer);\n  }\n catch (  ShortBufferException e) {\n    throw new IOException(e);\n  }\ncatch (  IllegalBlockSizeException e) {\n    throw new IOException(e);\n  }\ncatch (  BadPaddingException e) {\n    throw new IOException(e);\n  }\n  inBuffer.clear();\n  outBuffer.flip();\n  while (outBuffer.hasRemaining()) {\n    output.write(outBuffer);\n  }\n}"}
{"ids": "40753", "raw_code": "private static boolean spanWillOverlap(Spannable spanText,URLSpan[] spanList,int start,int end){\n  if (start == end) {\n    return false;\n  }\n  for (  URLSpan span : spanList) {\n    int existingStart=spanText.getSpanStart(span);\n    int existingEnd=spanText.getSpanEnd(span);\n    if ((start >= existingStart && start < existingEnd) || end > existingStart && end <= existingEnd) {\n      if (Log.isLoggable(TAG,Log.VERBOSE)) {\n        CharSequence seq=spanText.subSequence(start,end);\n        Log.v(TAG,\"Not linkifying \" + seq + \" as phone number due to overlap\");\n      }\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "16725", "raw_code": "private HashMap<Integer,Trie> buildLookupTable(final Map<Integer,List<Trie>> childTries){\n  HashMap<Integer,Trie> lookup=new HashMap<>(childTries.size());\n  for (  int id : childTries.keySet()) {\n    final List<Trie> tries=childTries.get(id);\n    if (tries.size() == 1) {\n      lookup.put(id,tries.get(0));\n    }\n else {\n      lookup.put(id,new SliceAggregatingTrie(tries));\n    }\n  }\n  return lookup;\n}"}
{"ids": "78540", "raw_code": "public void addMarker(int x,int z,Color color){\n  MapMarker marker=new MapMarker();\n  marker.x=x;\n  marker.z=z;\n  marker.color=color;\n  markers.add(marker);\n}"}
{"ids": "56030", "raw_code": "private void commitDiscard(long time,boolean allowDiscard){\n  if (mDiscardingTab == null)   return;\n  assert mStackTabs != null;\n  StackTab discarded=mDiscardingTab;\n  if (Math.abs(discarded.getDiscardAmount()) / getDiscardRange() > DISCARD_COMMIT_THRESHOLD && allowDiscard) {\n    mLayout.uiRequestingCloseTab(time,discarded.getId());\n    RecordUserAction.record(\"MobileStackViewSwipeCloseTab\");\n    RecordUserAction.record(\"MobileTabClosed\");\n  }\n else {\n    startAnimation(time,OverviewAnimationType.UNDISCARD);\n  }\n  mDiscardingTab=null;\n  requestUpdate();\n}"}
{"ids": "21328", "raw_code": "public List<Object> buildJavaMethodParameters(AssetOptionsContext context,Map<String,String> availableAssets,AssetOptionsMethodInfo assetMethod){\n  final List<Object> javaMethodParameters=Lists.newArrayList();\n  javaMethodParameters.add(context);\n  for (  String parentAssetName : assetMethod.assetDependencies) {\n    String parentAssetValue=availableAssets.get(parentAssetName);\n    int index=javaMethodParameters.size();\n    Object value=assetMethod.convertParameter(index,parentAssetValue);\n    javaMethodParameters.add(value);\n  }\n  return javaMethodParameters;\n}"}
{"ids": "966", "raw_code": "private static ImageView pickGraphic(RestartableService startStoppable){\n  final boolean running=startStoppable.isRunning();\n  final ImageView icon=running ? new ImageView(stopImage) : new ImageView(startImage);\n  if (!running) {\n    final FadeTransition ft=new FadeTransition(Duration.millis(750),icon);\n    ft.setToValue(0.1);\n    ft.setCycleCount(Transition.INDEFINITE);\n    ft.setAutoReverse(true);\n    ft.play();\n  }\n  icon.setFitHeight(DPIUtility.MINI_ICON_SIZE);\n  icon.setFitWidth(DPIUtility.MINI_ICON_SIZE);\n  return icon;\n}"}
{"ids": "35883", "raw_code": "public void createCashBasedJournalEntriesAndReversalsForSavingsCharges(final Office office,final String currencyCode,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeDebited,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeCredited,final Long savingsProductId,final Long paymentTypeId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal totalAmount,final Boolean isReversal,final List<ChargePaymentDTO> chargePaymentDTOs){\n  if (chargePaymentDTOs.size() != 1) {\n    throw new PlatformDataIntegrityException(\"Recent Portfolio changes w.r.t Charges for Savings have Broken the accounting code\",\"Recent Portfolio changes w.r.t Charges for Savings have Broken the accounting code\");\n  }\n  ChargePaymentDTO chargePaymentDTO=chargePaymentDTOs.get(0);\n  final GLAccount chargeSpecificAccount=getLinkedGLAccountForSavingsCharges(savingsProductId,accountTypeToBeCredited.getValue(),chargePaymentDTO.getChargeId());\n  final GLAccount savingsControlAccount=getLinkedGLAccountForSavingsProduct(savingsProductId,accountTypeToBeDebited.getValue(),paymentTypeId);\n  if (isReversal) {\n    createDebitJournalEntryForSavings(office,currencyCode,chargeSpecificAccount,loanId,transactionId,transactionDate,totalAmount);\n    createCreditJournalEntryForSavings(office,currencyCode,savingsControlAccount,loanId,transactionId,transactionDate,totalAmount);\n  }\n else {\n    createDebitJournalEntryForSavings(office,currencyCode,savingsControlAccount,loanId,transactionId,transactionDate,totalAmount);\n    createCreditJournalEntryForSavings(office,currencyCode,chargeSpecificAccount,loanId,transactionId,transactionDate,totalAmount);\n  }\n}"}
{"ids": "28558", "raw_code": "public void addAll(JsonArray array){\n  elements.addAll(array.elements);\n}"}
{"ids": "27972", "raw_code": "public double nextDouble(double k){\n  double u, v, w, c, z;\n  if (k <= 0.0)   throw new IllegalArgumentException();\n  if (k_set != k) {\n    tau=1.0 + Math.sqrt(1.0 + 4.0 * k * k);\n    rho=(tau - Math.sqrt(2.0 * tau)) / (2.0 * k);\n    r=(1.0 + rho * rho) / (2.0 * rho);\n    k_set=k;\n  }\n  do {\n    u=randomGenerator.raw();\n    v=randomGenerator.raw();\n    z=Math.cos(Math.PI * u);\n    w=(1.0 + r * z) / (r + z);\n    c=k * (r - w);\n  }\n while ((c * (2.0 - c) < v) && (Math.log(c / v) + 1.0 < c));\n  return (randomGenerator.raw() > 0.5) ? Math.acos(w) : -Math.acos(w);\n}"}
{"ids": "16492", "raw_code": "@Override final public void mouseReleased(MouseEvent e){\n  if (isComponentPressedDown) {\n    mouseLiberalClick(e);\n    long now=System.currentTimeMillis();\n    long timeBetweenUnusedClicks=now - lastUnusedLiberalSingleClickTimeStamp;\n    if (timeBetweenUnusedClicks <= slowestDoubleClickMilliseconds) {\n      mouseLiberalDoubleClick(e);\n      lastUnusedLiberalSingleClickTimeStamp=0;\n    }\n else {\n      lastUnusedLiberalSingleClickTimeStamp=System.currentTimeMillis();\n    }\n  }\n  isComponentPressedDown=false;\n  mouseRelease(e);\n}"}
{"ids": "71881", "raw_code": "public static ModificationType valueOf(final int intValue){\n  ModificationType result=null;\n  if (0 <= intValue && intValue < ELEMENTS.length) {\n    result=ELEMENTS[intValue];\n  }\n  if (result == null) {\n    result=new ModificationType(intValue,\"unknown(\" + intValue + \")\",Enum.UNKNOWN);\n  }\n  return result;\n}"}
{"ids": "25701", "raw_code": "@Override public void fillHeader(Header hdr){\n  try {\n    Standard.context(AsciiTable.class);\n    hdr.setXtension(\"TABLE\");\n    hdr.setBitpix(BasicHDU.BITPIX_BYTE);\n    hdr.setNaxes(2);\n    hdr.setNaxis(1,this.rowLen);\n    hdr.setNaxis(2,this.nRows);\n    Cursor<String,HeaderCard> iter=hdr.iterator();\n    iter.setKey(NAXIS2.key());\n    iter.next();\n    iter.add(new HeaderCard(PCOUNT.key(),0,PCOUNT.comment()));\n    iter.add(new HeaderCard(GCOUNT.key(),1,GCOUNT.comment()));\n    iter.add(new HeaderCard(TFIELDS.key(),this.nFields,TFIELDS.comment()));\n    for (int i=0; i < this.nFields; i+=1) {\n      addColInfo(i,iter);\n    }\n  }\n catch (  HeaderCardException e) {\n    LOG.log(Level.SEVERE,\"ImpossibleException in fillHeader:\" + e.getMessage(),e);\n  }\n finally {\n    Standard.context(null);\n  }\n}"}
{"ids": "80018", "raw_code": "private boolean searchEndMatch(final String itemName){\n  for (  Map.Entry<String,Sentence> e : parsedNames.entrySet()) {\n    Sentence parsed=e.getValue();\n    if (itemName.endsWith(parsed.getOriginalText()) || itemName.endsWith(parsed.getNormalized())) {\n      name=e.getKey();\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "40667", "raw_code": "private static byte expectedNorm(final DefaultSimilarity sim,final int length,final float boost){\n  return (byte)sim.encodeNormValue(boost / ((float)Math.sqrt(length)));\n}"}
{"ids": "5029", "raw_code": "@Override public ShapeTileSimplex enlarge(double p_offset){\n  if (p_offset == 0)   return this;\n  ShapeTileSimplex offset_simplex=offset(p_offset);\n  ShapeTileOctagon bounding_oct=bounding_octagon();\n  if (bounding_oct.is_NaN())   return ShapeTileSimplex.EMPTY;\n  ShapeTileOctagon offset_oct=bounding_oct.offset(p_offset);\n  return offset_simplex.intersection(offset_oct.to_Simplex());\n}"}
{"ids": "2150", "raw_code": "V remove(Object key,int hash,Object value){\n  lock();\n  try {\n    int c=cnt - 1;\n    HE<K,V>[] tab=table;\n    int index=hash & (tab.length - 1);\n    HE<K,V> first=tab[index];\n    HE<K,V> e=first;\n    while (e != null && (e.hash != hash || !key.equals(e.k)))     e=e.next;\n    V oldValue=null;\n    if (e != null) {\n      V v=e.v;\n      if (value == null || value.equals(v)) {\n        oldValue=v;\n        ++modCnt;\n        HE<K,V> newFirst=e.next;\n        for (HE<K,V> p=first; p != e; p=p.next)         newFirst=new HE<K,V>(p.k,p.hash,newFirst,p.v);\n        tab[index]=newFirst;\n        cnt=c;\n      }\n    }\n    return oldValue;\n  }\n  finally {\n    unlock();\n  }\n}"}
{"ids": "34805", "raw_code": "public static TreePath pathTillOfKind(final TreePath path,final Tree.Kind kind){\n  return pathTillOfKind(path,EnumSet.of(kind));\n}"}
{"ids": "51685", "raw_code": "public BigDecimal readF2Dot14(int index){\n  throw new UnsupportedOperationException();\n}"}
{"ids": "48008", "raw_code": "public void addRenderingHints(Map<?,?> hints){\n  mGraphics.addRenderingHints(hints);\n}"}
{"ids": "78461", "raw_code": "private void createNewFieldsArray(){\n  for (int i=0; i < personFieldsOld.length; i++) {\n    personFieldsNew[i]=personFieldsOld[i] + \"_link\";\n  }\n}"}
{"ids": "61968", "raw_code": "public void removeAllRelations(){\n  for (  BNode inputNode : new LinkedList<BNode>(inputNodes.values())) {\n    removeInputNode(inputNode.getId());\n  }\n  for (  BNode outputNode : new LinkedList<BNode>(outputNodes.values())) {\n    removeOutputNode(outputNode.getId());\n  }\n}"}
{"ids": "39650", "raw_code": "private void addExposedTypes(Class<?> clazz,Class<?> cause){\n  if (pruned(clazz)) {\n    return;\n  }\n  boolean alreadyDone=done(clazz);\n  visit(clazz);\n  recordExposure(clazz,cause);\n  if (alreadyDone || pruned(clazz)) {\n    return;\n  }\n  TypeToken<?> token=TypeToken.of(clazz);\n  for (  TypeToken<?> superType : token.getTypes()) {\n    if (!superType.equals(token)) {\n      logger.debug(\"Adding exposed types from {}, which is a super type token on {}\",superType,clazz);\n      addExposedTypes(superType,clazz);\n    }\n  }\n  for (  Class innerClass : clazz.getDeclaredClasses()) {\n    if (exposed(innerClass.getModifiers())) {\n      logger.debug(\"Adding exposed types from {}, which is an exposed inner class of {}\",innerClass,clazz);\n      addExposedTypes(innerClass,clazz);\n    }\n  }\n  for (  Field field : clazz.getDeclaredFields()) {\n    if (exposed(field.getModifiers())) {\n      logger.debug(\"Adding exposed types from {}, which is an exposed field on {}\",field,clazz);\n      addExposedTypes(field,clazz);\n    }\n  }\n  for (  Invokable invokable : getExposedInvokables(token)) {\n    logger.debug(\"Adding exposed types from {}, which is an exposed invokable on {}\",invokable,clazz);\n    addExposedTypes(invokable,clazz);\n  }\n}"}
{"ids": "72789", "raw_code": "public void storeLogs(File folder){\n  String path=folder.getAbsolutePath();\n  mLoggerFolder=new LogThis(path);\n}"}
{"ids": "13141", "raw_code": "@Override public Object clone(){\n  return new LocationPath(this);\n}"}
{"ids": "53567", "raw_code": "private Assignment recursiveBackTrackingSearch(CSP csp,Assignment assignment){\n  Assignment result=null;\n  if (assignment.isComplete(csp.getVariables())) {\n    result=assignment;\n  }\n else {\n    Variable var=selectUnassignedVariable(assignment,csp);\n    for (    Object value : orderDomainValues(var,assignment,csp)) {\n      assignment.setAssignment(var,value);\n      fireStateChanged(assignment,csp);\n      if (assignment.isConsistent(csp.getConstraints(var))) {\n        DomainRestoreInfo info=inference(var,assignment,csp);\n        if (!info.isEmpty())         fireStateChanged(csp);\n        if (!info.isEmptyDomainFound()) {\n          result=recursiveBackTrackingSearch(csp,assignment);\n          if (result != null)           break;\n        }\n        info.restoreDomains(csp);\n      }\n      assignment.removeAssignment(var);\n    }\n  }\n  return result;\n}"}
{"ids": "31402", "raw_code": "private static JSONObject createFileTransferError(int errorCode,String source,String target,String body,Integer httpStatus){\n  JSONObject error=null;\n  try {\n    error=new JSONObject();\n    error.put(\"code\",errorCode);\n    error.put(\"source\",source);\n    error.put(\"target\",target);\n    if (body != null) {\n      error.put(\"body\",body);\n    }\n    if (httpStatus != null) {\n      error.put(\"http_status\",httpStatus);\n    }\n  }\n catch (  JSONException e) {\n    Log.e(LOG_TAG,e.getMessage(),e);\n  }\n  return error;\n}"}
{"ids": "63216", "raw_code": "public ArrayList<Value> keys(){\n  ArrayList<Value> list=New.arrayList(size);\n  for (  Value k : keys) {\n    if (k != null && k != ValueNull.DELETED) {\n      list.add(k);\n    }\n  }\n  return list;\n}"}
{"ids": "80341", "raw_code": "private void close(){\n  if (closed) {\n    return;\n  }\n  closed=true;\n  try {\n    resultSet.close();\n  }\n catch (  final SQLException e) {\n    logger.error(e,e);\n  }\n  try {\n    if (statement != null) {\n      statement.close();\n    }\n  }\n catch (  final SQLException e) {\n    logger.error(e,e);\n  }\n}"}
{"ids": "78663", "raw_code": "public DeliveryThread(TOMLayer tomLayer,ServiceReplica receiver,Recoverable recoverer,ServerViewController controller){\n  super(\"Delivery Thread\");\n  this.decided=new LinkedBlockingQueue<>();\n  this.tomLayer=tomLayer;\n  this.receiver=receiver;\n  this.recoverer=recoverer;\n  this.controller=controller;\n}"}
{"ids": "39576", "raw_code": "protected void addButtonListener(){\n  ApplicationInsightsAddDialog dialog=new ApplicationInsightsAddDialog(getShell());\n  dialog.open();\n  tableViewer.refresh();\n}"}
{"ids": "10184", "raw_code": "public int[] toArray(){\n  int[] result=new int[size];\n  System.arraycopy(array,0,result,0,size);\n  return result;\n}"}
{"ids": "69678", "raw_code": "public Block obtainBlock(String prototypeName,@Nullable String uuid){\n  Block block;\n  if (uuid != null) {\n    WeakReference<Block> ref=mBlockRefs.get(uuid);\n    if (ref != null) {\n      block=ref.get();\n      if (block != null) {\n        throw new IllegalArgumentException(\"Block with given UUID \\\"\" + uuid + \"\\\" already exists. Duplicate UUIDs not allowed.\");\n      }\n    }\n  }\n  if (!mBlockTemplates.containsKey(prototypeName)) {\n    Log.w(TAG,\"Block \" + prototypeName + \" not found.\");\n    return null;\n  }\n  Block.Builder builder=new Block.Builder(mBlockTemplates.get(prototypeName));\n  if (uuid != null) {\n    builder.setUuid(uuid);\n  }\n  block=builder.build();\n  mBlockRefs.put(block.getId(),new WeakReference<Block>(block));\n  return block;\n}"}
{"ids": "15389", "raw_code": "public SmsConsoleServiceConfig(){\n  Document doc=parseDocument(CONFIG_FILENAME);\n  configServices(doc);\n  hiddenServices=Collections.unmodifiableSet(services.get(HIDDEN_SERVICES));\n}"}
{"ids": "86590", "raw_code": "@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){\n  super.onSizeChanged(w,h,oldw,oldh);\n  setupBounds(w,h);\n  setupPaints();\n  invalidate();\n}"}
{"ids": "86087", "raw_code": "private static String convertToQuotedString(String s){\n  if (s == null || s.isEmpty()) {\n    return null;\n  }\n  if (s.charAt(0) == '\"' && s.charAt(s.length() - 1) == '\"') {\n    return s;\n  }\n  return '\\\"' + s + '\\\"';\n}"}
{"ids": "7227", "raw_code": "public PatternObserverExpr(String namespace,String name,Expression[] parameters){\n  super(namespace,name,Arrays.asList(parameters));\n}"}
{"ids": "45747", "raw_code": "public static String convertStringToHexString(String data){\n  return conventBytesToHexString(data.getBytes());\n}"}
{"ids": "4102", "raw_code": "public boolean isTransient(){\n  return Modifier.isTransient(getAccessFlags());\n}"}
{"ids": "14561", "raw_code": "public boolean isForHTTPBasic(){\n  return (negoValue != null) ? negoValue.equalsIgnoreCase(HTTP_HTTPBASIC) : false;\n}"}
{"ids": "28203", "raw_code": "private String indent(int level){\n  final String s=\"...\";\n  if (level == 0)   return \"\";\n  StringBuilder sb=new StringBuilder(level * s.length());\n  for (int i=0; i < level; i++) {\n    sb.append(s);\n  }\n  return s.toString();\n}"}
{"ids": "73516", "raw_code": "public void addListener(UpdateManagerListener listener){\n  listeners.add(listener);\n}"}
{"ids": "78608", "raw_code": "@Override public void run(){\n  List<Span> dequeuedSpans=new ArrayList<Span>(maxSpanBatchSize);\n  long errorCount=0;\n  while (running.get() || queue.size() > 0) {\n    Span firstSpan=null;\n    try {\n      firstSpan=queue.poll(1,TimeUnit.SECONDS);\n      if (firstSpan != null) {\n        dequeuedSpans.add(firstSpan);\n        queue.drainTo(dequeuedSpans,maxSpanBatchSize - 1);\n      }\n    }\n catch (    InterruptedException ie) {\n    }\n    startClient();\n    if (dequeuedSpans.isEmpty()) {\n      continue;\n    }\n    try {\n      List<Event> events=new ArrayList<Event>(dequeuedSpans.size());\n      for (      Span span : dequeuedSpans) {\n        Map<String,String> headers=new HashMap<String,String>();\n        headers.put(\"SpanId\",span.toString());\n        headers.put(\"TracerId\",span.getTracerId());\n        headers.put(\"Description\",span.getDescription());\n        String body=span.toJson();\n        Event evt=EventBuilder.withBody(body,Charset.forName(\"UTF-8\"),headers);\n        events.add(evt);\n      }\n      flumeClient.appendBatch(events);\n      dequeuedSpans.clear();\n      errorCount=0;\n    }\n catch (    Exception e) {\n      errorCount+=1;\n      if (errorCount < MAX_ERRORS) {\n        try {\n          queue.addAll(dequeuedSpans);\n        }\n catch (        IllegalStateException ex) {\n          LOG.error(\"Drop \" + dequeuedSpans.size() + \" span(s) because writing to HBase failed.\");\n        }\n      }\n      closeClient();\n      try {\n        Thread.sleep(500);\n      }\n catch (      InterruptedException e1) {\n      }\n    }\n  }\n  closeClient();\n}"}
{"ids": "54623", "raw_code": "public void cancelAuthentication(){\nsynchronized (syncLock) {\n    authenticating=false;\n    timer.cancel();\n    timer.purge();\n  }\n}"}
{"ids": "39604", "raw_code": "private void checkValidInterval(Duration pollingInterval,int retries,long timeSleptMillis){\n  long highSum=0;\n  long lowSum=0;\n  for (int i=0; i < retries; i++) {\n    double currentInterval=pollingInterval.getMillis() * Math.pow(DataflowPipelineJob.DEFAULT_BACKOFF_EXPONENT,i);\n    double randomOffset=0.5 * currentInterval;\n    highSum+=Math.round(currentInterval + randomOffset);\n    lowSum+=Math.round(currentInterval - randomOffset);\n  }\n  assertThat(timeSleptMillis,allOf(greaterThanOrEqualTo(lowSum),lessThanOrEqualTo(highSum)));\n}"}
{"ids": "29433", "raw_code": "public void write(String str,int off,int len) throws IOException {\n  if (_outputStream == null)   throw new IOException(\"Writer closed\");\n  final int off_plus_len=off + len;\n  for (int i=off; i < off_plus_len; ) {\n    char c=str.charAt(i++);\n    if (c < 0x80) {\n      _bytes[_index]=(byte)c;\n      if (++_index >= _bytes.length) {\n        flushBuffer();\n      }\n    }\n else {\n      write(c);\n    }\n  }\n}"}
{"ids": "27538", "raw_code": "public CommitRecordIndex(IRawStore store,Checkpoint checkpoint,IndexMetadata metadata,boolean readOnly){\n  super(store,checkpoint,metadata,readOnly);\n  this.ser=new Entry.EntrySerializer();\n}"}
{"ids": "23143", "raw_code": "protected String encodeBody(){\n  return Long.toString(this.sequenceNumber);\n}"}
{"ids": "70597", "raw_code": "public void addContainer(ImageContainer container){\n  mContainers.add(container);\n}"}
{"ids": "74808", "raw_code": "private void checkSize(final int i){\n  if (i >= max_size) {\n    final int old_size=max_size;\n    max_size+=increment_size;\n    if (max_size <= i) {\n      max_size=i + increment_size + 2;\n    }\n    final Rectangle[] temp=items;\n    items=new Rectangle[max_size];\n    System.arraycopy(temp,0,items,0,old_size);\n    increment_size=incrementSize(increment_size);\n  }\n}"}
{"ids": "12849", "raw_code": "public static double[] genPulseFromFourierMag(double[] mag,double f0){\n  int numHarm=mag.length;\n  int currentF0=(int)Math.round(f0);\n  int T;\n  if (currentF0 < 512)   T=512;\n else   T=1024;\n  int T2=2 * T;\n  double[] pulse=new double[T];\n  double[] real=new double[T2];\n  double[] imag=new double[T2];\n  real[0]=real[T]=0.0;\n  for (int i=1; i <= numHarm; i++) {\n    real[i]=real[T - i]=real[T + i]=real[T2 - i]=mag[i - 1];\n    imag[i]=imag[T - i]=imag[T + i]=imag[T2 - i]=0.0;\n  }\n  for (int i=(numHarm + 1); i < (T - numHarm); i++) {\n    real[i]=real[T - i]=real[T + i]=real[T2 - i]=1.0;\n    imag[i]=imag[T - i]=imag[T + i]=imag[T2 - i]=0.0;\n  }\n  FFT.transform(real,imag,true);\n  double sqrt_f0=Math.sqrt(currentF0);\n  for (int i=0; i < T; i++)   pulse[i]=real[(i - numHarm) % T] * sqrt_f0;\n  return pulse;\n}"}
{"ids": "5425", "raw_code": "public double volume(){\n  if (cachedVolume < 0) {\n    cachedVolume=1.0;\n    IHypercube cube=this.region;\n    int nd=cube.dimensionality();\n    for (int d=1; d <= nd; d++) {\n      double right=cube.getRight(d);\n      double left=cube.getLeft(d);\n      if (Double.isInfinite(right)) {\n        right=+1;\n      }\n      if (Double.isInfinite(left)) {\n        left=-1;\n      }\n      if (left == -1 && right == +1) {\n      }\n else {\n        cachedVolume*=(right - left);\n      }\n    }\n  }\n  return cachedVolume;\n}"}
{"ids": "51639", "raw_code": "static String _targetSoFile(String libName,int version){\n  Context context=mContext;\n  if (null == context) {\n    return \"\";\n  }\n  String path=\"/data/data/\" + context.getPackageName() + \"/files\";\n  File f=context.getFilesDir();\n  if (f != null) {\n    path=f.getPath();\n  }\n  return path + \"/lib\" + libName+ \"bk\"+ version+ \".so\";\n}"}
{"ids": "23820", "raw_code": "@Override public void stopMonitoring(){\n  stopMonitoring(false);\n}"}
{"ids": "54513", "raw_code": "@Override public Object compute(ArrayList<Map<String,Object>> rows) throws Exception {\n  if (column.equals(\"*\")) {\n    return rows.size();\n  }\n  long count=0;\n  for (  Map<String,Object> row : rows) {\n    if (row.containsKey(column) && (row.get(column) != null)) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"ids": "68127", "raw_code": "private Property[] parseProperties(final String contents){\n  final String[] parts=contents.split(\";\");\n  final List<Property> resultsAsList=new ArrayList<Property>();\n  for (  String part : parts) {\n    try {\n      if (!StringUtils.isEmpty(part.trim())) {\n        resultsAsList.add(new Property(part));\n      }\n    }\n catch (    final Exception e) {\n      LOG.warn(e.getMessage(),e);\n    }\n  }\n  return resultsAsList.toArray(new Property[resultsAsList.size()]);\n}"}
{"ids": "71962", "raw_code": "public void requestSecondsUntilAccountExpiration(){\n  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_ACCOUNT_EXPIRATION);\n}"}
{"ids": "3491", "raw_code": "public final boolean equalsIgnoreCase(String a){\n  int len=a.length();\n  if (_length != len)   return false;\n  int offset=_offset;\n  char[] buffer=_buffer;\n  for (int i=0; i < len; i++) {\n    char ca=buffer[offset + i];\n    char cb=a.charAt(i);\n    if (ca == cb) {\n    }\n else     if (Character.toLowerCase(ca) != Character.toLowerCase(cb))     return false;\n  }\n  return true;\n}"}
{"ids": "85252", "raw_code": "public static int[] checkObjectStart(PdfTokenizer lineTokenizer){\n  try {\n    lineTokenizer.seek(0);\n    if (!lineTokenizer.nextToken() || lineTokenizer.getTokenType() != TokenType.Number)     return null;\n    int num=lineTokenizer.getIntValue();\n    if (!lineTokenizer.nextToken() || lineTokenizer.getTokenType() != TokenType.Number)     return null;\n    int gen=lineTokenizer.getIntValue();\n    if (!lineTokenizer.nextToken())     return null;\n    if (!Arrays.equals(Obj,lineTokenizer.getByteContent()))     return null;\n    return new int[]{num,gen};\n  }\n catch (  Exception ioe) {\n  }\n  return null;\n}"}
{"ids": "25702", "raw_code": "private Object singleElement(int row,int col){\n  Object res=null;\n  if (this.isNull == null || !this.isNull[row * this.nFields + col]) {\n    res=ArrayFuncs.newInstance(this.types[col],1);\n    System.arraycopy(this.data[col],row,res,0,1);\n  }\n  return res;\n}"}
{"ids": "58045", "raw_code": "public NodeSetDTM(NodeIterator iterator,XPathContext xctxt){\n  super();\n  Node node;\n  m_manager=xctxt.getDTMManager();\n  while (null != (node=iterator.nextNode())) {\n    int handle=xctxt.getDTMHandleFromNode(node);\n    addNodeInDocOrder(handle,xctxt);\n  }\n}"}
{"ids": "9384", "raw_code": "public static Vec meanVector(DataSet dataSet){\n  DenseVector dv=new DenseVector(dataSet.getNumNumericalVars());\n  meanVector(dv,dataSet);\n  return dv;\n}"}
{"ids": "64255", "raw_code": "private void makeCacheDirectory(){\n  File cacheDir=new File(CACHE_DIRECTORY);\n  if (!cacheDir.exists()) {\n    cacheDir.mkdir();\n  }\n}"}
{"ids": "34333", "raw_code": "public void inputKeyevent(int value){\n  executeCommandQuietly(adbCommand(\"shell\",\"input\",\"keyevent\",\"\" + value));\n  try {\n    Thread.sleep(500);\n  }\n catch (  InterruptedException e) {\n    log.warn(\"\",e);\n  }\n}"}
{"ids": "40219", "raw_code": "public static void passMockSleep(){\n  mockSleepQueue.offer(false);\n}"}
{"ids": "60583", "raw_code": "JSONStringer close(Scope empty,Scope nonempty,String closeBracket) throws JSONException {\n  Scope context=peek();\n  if (context != nonempty && context != empty) {\n    throw new JSONException(\"Nesting problem\");\n  }\n  stack.remove(stack.size() - 1);\n  if (context == nonempty) {\n    newline();\n  }\n  out.append(closeBracket);\n  return this;\n}"}
{"ids": "75175", "raw_code": "private QueryBuilder buildSort(){\n  QueryBuilder builder=new QueryBuilder();\n  Iterator<String> sortIterator=mSortingOrderList.iterator();\n  while (sortIterator.hasNext()) {\n    builder.append(sortIterator.next());\n    if (sortIterator.hasNext())     builder.append(\", \");\n  }\n  return builder;\n}"}
{"ids": "53870", "raw_code": "public void init(int mode,byte[] key,byte[] iv){\n  context=OpenSslNative.init(context,mode,algorithm,padding,key,iv);\n}"}
{"ids": "59784", "raw_code": "private String diff_wordsToCharsMunge(String text,List<String> lineArray,Map<String,Integer> lineHash){\n  int lineStart=0;\n  int lineEnd=-1;\n  String line;\n  StringBuilder chars=new StringBuilder();\n  while (lineEnd < text.length() - 1) {\n    String patternStr=\"[. :;\\\\[\\\\]\\\\{\\\\}\\\\(\\\\)\\\\+!?\\\\-]\";\n    Pattern pattern=Pattern.compile(patternStr);\n    Matcher matcher=pattern.matcher(text);\n    matcher.region(lineStart,text.length());\n    if (matcher.find()) {\n      lineEnd=matcher.start();\n    }\n else     lineEnd=-1;\n    if (lineEnd == -1) {\n      lineEnd=text.length() - 1;\n    }\n    line=text.substring(lineStart,lineEnd + 1);\n    lineStart=lineEnd + 1;\n    if (lineHash.containsKey(line)) {\n      chars.append(String.valueOf((char)(int)lineHash.get(line)));\n    }\n else {\n      lineArray.add(line);\n      lineHash.put(line,lineArray.size() - 1);\n      chars.append(String.valueOf((char)(lineArray.size() - 1)));\n    }\n  }\n  return chars.toString();\n}"}
{"ids": "17421", "raw_code": "private void replaceTop(Scope topOfStack){\n  stack.set(stack.size() - 1,topOfStack);\n}"}
{"ids": "17254", "raw_code": "public boolean hasNext(){\n  return index < desc.length();\n}"}
{"ids": "54566", "raw_code": "public void registerSessionThread(SessionThread newSession){\nsynchronized (this) {\n    List<SessionThread> toBeRemoved=new ArrayList<SessionThread>();\n    for (    SessionThread sessionThread : sessionThreads) {\n      if (!sessionThread.isAlive()) {\n        Log.d(TAG,\"Cleaning up finished session...\");\n        try {\n          sessionThread.join();\n          Log.d(TAG,\"Thread joined\");\n          toBeRemoved.add(sessionThread);\n          sessionThread.closeSocket();\n        }\n catch (        InterruptedException e) {\n          Log.d(TAG,\"Interrupted while joining\");\n        }\n      }\n    }\n    for (    SessionThread removeThread : toBeRemoved) {\n      sessionThreads.remove(removeThread);\n    }\n    sessionThreads.add(newSession);\n  }\n  Log.d(TAG,\"Registered session thread\");\n}"}
{"ids": "30514", "raw_code": "protected IObjectInfo<T> store_impl(Segment<T> segment,ObjectInfo<T> oi){\n  if (_invalid)   return null;\n  _size.incrementAndGet();\n  segment.incrementSize();\n  ObjectInfo<T> tail=segment.getTail();\n  tail.setForwardRef(oi);\n  oi.setBackwardRef(tail);\n  segment.setTail(oi);\n  return oi;\n}"}
{"ids": "30194", "raw_code": "public TeXFormula(){\n  parser=new TeXParser(\"\",this,false);\n}"}
{"ids": "43080", "raw_code": "public static void grayToBinary(BinaryVariable variable){\n  int n=variable.getNumberOfBits();\n  BitSet gray=variable.getBitSet();\n  variable.set(n - 1,gray.get(n - 1));\n  for (int i=n - 2; i >= 0; i--) {\n    variable.set(i,variable.get(i + 1) ^ gray.get(i));\n  }\n}"}
{"ids": "16856", "raw_code": "private void updateTags(Movie movie){\n  List<String> availableTags=new ArrayList<>(tagsObservable);\n  for (  String tagInMovie : new ArrayList<>(movie.getTags())) {\n    boolean tagFound=false;\n    for (    String tag : availableTags) {\n      if (tagInMovie.equals(tag)) {\n        tagFound=true;\n        break;\n      }\n    }\n    if (!tagFound) {\n      addTag(tagInMovie);\n    }\n  }\n}"}
{"ids": "34037", "raw_code": "protected void removeNextProtocolMessages(List<ProtocolMessage> protocolMessages,int fromIndex){\n  for (int i=protocolMessages.size() - 1; i >= fromIndex; i--) {\n    protocolMessages.remove(i);\n  }\n}"}
{"ids": "40340", "raw_code": "public UCIBestMove stop(){\n  if (!isConnected()) {\n    throw new IllegalStateException(\"Engine is not connected.\");\n  }\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Entering stop(...)\");\n  }\n  UCIBestMove result=null;\nsynchronized (stopSynch) {\n    if (!isProcessingGo()) {\n      result=lastBestMove;\n      lastBestMove=null;\n    }\n else {\n      long totalSleepTime=0;\n      send(\"stop\");\n      while (goRunnable != null && totalSleepTime < 2500) {\n        try {\n          Thread.sleep(500);\n          totalSleepTime+=500;\n        }\n catch (        InterruptedException ie) {\n        }\n      }\n      result=lastBestMove;\n      lastBestMove=null;\n    }\n  }\n  return result;\n}"}
{"ids": "63407", "raw_code": "@Override public boolean supportsDataDefinitionAndDataManipulationTransactions(){\n  debugCodeCall(\"supportsDataDefinitionAndDataManipulationTransactions\");\n  return false;\n}"}
{"ids": "31957", "raw_code": "public static void removeJavaNoOpLogger(Collection<Handler> rmvHnds){\n  Logger log=Logger.getLogger(\"\");\n  for (  Handler h : log.getHandlers())   log.removeHandler(h);\n  if (!F.isEmpty(rmvHnds)) {\n    for (    Handler h : rmvHnds)     log.addHandler(h);\n  }\n}"}
{"ids": "53926", "raw_code": "private int binarySearch(final int start,final int end,final SizeTester sizeTester,final RectF availableSpace){\n  int lastBest=start;\n  int low=start;\n  int high=end - 1;\n  int middle;\n  while (low <= high) {\n    middle=low + high >>> 1;\n    final int midValCmp=sizeTester.onTestSize(middle,availableSpace);\n    if (midValCmp < 0) {\n      lastBest=low;\n      low=middle + 1;\n    }\n else     if (midValCmp > 0) {\n      high=middle - 1;\n      lastBest=high;\n    }\n else     return middle;\n  }\n  return lastBest;\n}"}
{"ids": "2758", "raw_code": "protected boolean isValidDomain(String domain){\n  Matcher ipDomainMatcher=IP_DOMAIN_PATTERN.matcher(domain);\n  if (ipDomainMatcher.matches()) {\n    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();\n    return inetAddressValidator.isValid(ipDomainMatcher.group(1));\n  }\n  DomainValidator domainValidator=DomainValidator.getInstance(allowLocal);\n  return domainValidator.isValid(domain) || domainValidator.isValidTld(domain);\n}"}
{"ids": "46952", "raw_code": "public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){\n  for (int i=1; i < keys.length; ++i) {\n    if (keys[i] < keys[i - 1]) {\n      throw new IllegalArgumentException(\"keys must be sorted ascending\");\n    }\n  }\n  Label def=newLabel();\n  Label end=newLabel();\n  if (keys.length > 0) {\n    int len=keys.length;\n    int min=keys[0];\n    int max=keys[len - 1];\n    int range=max - min + 1;\n    if (useTable) {\n      Label[] labels=new Label[range];\n      Arrays.fill(labels,def);\n      for (int i=0; i < len; ++i) {\n        labels[keys[i] - min]=newLabel();\n      }\n      mv.visitTableSwitchInsn(min,max,def,labels);\n      for (int i=0; i < range; ++i) {\n        Label label=labels[i];\n        if (label != def) {\n          mark(label);\n          generator.generateCase(i + min,end);\n        }\n      }\n    }\n else {\n      Label[] labels=new Label[len];\n      for (int i=0; i < len; ++i) {\n        labels[i]=newLabel();\n      }\n      mv.visitLookupSwitchInsn(def,keys,labels);\n      for (int i=0; i < len; ++i) {\n        mark(labels[i]);\n        generator.generateCase(keys[i],end);\n      }\n    }\n  }\n  mark(def);\n  generator.generateDefault();\n  mark(end);\n}"}
{"ids": "45344", "raw_code": "private void parse(File dir){\n  File[] xmlFiles=dir.listFiles(new XmlFilter());\n  for (  File xmlFile : xmlFiles) {\n    parseTestFromXml(xmlFile);\n  }\n}"}
{"ids": "36224", "raw_code": "public boolean hasNext(int index){\n  for (int p=0; p < mask.length; p++) {\n    if (mask[p]) {\n      if (index <= lastElementIndex[p]) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "50455", "raw_code": "public static boolean isExternalStorageAvailable(){\n  String state=Environment.getExternalStorageState();\n  if (state.equals(Environment.MEDIA_MOUNTED)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "60364", "raw_code": "public TarEntry(byte[] headerBuf){\n  this();\n  parseTarHeader(headerBuf);\n}"}
{"ids": "81113", "raw_code": "public static void unregisterMbeans(MBeanServer mBeanServer){\n  try {\n    mBeanServer.unregisterMBean(Log4jMXBeanImp.getObjectName());\n    mBeanServer.unregisterMBean(ExceptionMXBeanImp.getObjectName());\n    mBeanServer.unregisterMBean(ExceptionDeltaMXBeanImp.getObjectName());\n    mBeanServer.unregisterMBean(Log4jDeltaMXBeanImp.getObjectName());\n    mBeanServer.unregisterMBean(JamonMXBeanImp.getObjectName());\n    mBeanServer.unregisterMBean(HttpStatusMXBeanImp.getObjectName());\n    mBeanServer.unregisterMBean(HttpStatusDeltaMXBeanImp.getObjectName());\n    unregisterGcMXBean(mBeanServer);\n    unregisterMbeansFromPropsFile(mBeanServer);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "195", "raw_code": "public static DeterministicKey createMasterPrivateKey(byte[] seed) throws HDDerivationException {\n  checkArgument(seed.length > 8,\"Seed is too short and could be brute forced\");\n  byte[] i=HDUtils.hmacSha512(MASTER_HMAC_SHA512,seed);\n  checkState(i.length == 64,i.length);\n  byte[] il=Arrays.copyOfRange(i,0,32);\n  byte[] ir=Arrays.copyOfRange(i,32,64);\n  Arrays.fill(i,(byte)0);\n  DeterministicKey masterPrivKey=createMasterPrivKeyFromBytes(il,ir);\n  Arrays.fill(il,(byte)0);\n  Arrays.fill(ir,(byte)0);\n  return masterPrivKey;\n}"}
{"ids": "10010", "raw_code": "public boolean isNANPACountry(String regionCode){\n  return nanpaRegions.contains(regionCode);\n}"}
{"ids": "29453", "raw_code": "public void parse(InputStream in) throws IOException, SAXException {\n  try {\n    _xmlReader.setInput(in);\n    parseAll();\n  }\n catch (  XMLStreamException e) {\n    if (e.getNestedException() instanceof IOException)     throw (IOException)e.getNestedException();\n    throw new SAXException(e.getMessage());\n  }\n finally {\n    _xmlReader.reset();\n  }\n}"}
{"ids": "79474", "raw_code": "@Override public void printStackTrace(PrintStream ps){\n  super.printStackTrace(ps);\n  if (nested != null)   nested.printStackTrace(ps);\n}"}
{"ids": "15237", "raw_code": "public AMPassword(char[] pw){\n  int i;\n  int length=pw.length;\n  cleared=false;\n  password=new char[length];\n  System.arraycopy(pw,0,password,0,length);\n}"}
{"ids": "15963", "raw_code": "public void reset(){\n  firstStep=true;\n  N3=0;\n  N4=0;\n  System.arraycopy(IV,0,ofbV,0,IV.length);\n  byteCount=0;\n  cipher.reset();\n}"}
{"ids": "66494", "raw_code": "private static img createControlButtonImage(String name,String js_command,boolean enabled){\n  StringBuffer imgName=new StringBuffer(\"wf\" + name);\n  if (!enabled)   imgName.append(\"D\");\n  imgName.append(\"24.gif\");\n  img img=new img(MobileEnv.getImageDirectory(imgName.toString()),name);\n  if (enabled)   img.setAlt(Msg.getMsg(AD_Language,name));\n  img.setID(\"imgButton\");\n  if (js_command != null && js_command.length() > 0 && enabled) {\n    img.setOnClick(\"document.\" + FORM_NAME + \".\"+ M_Command+ \".value='\"+ name+ \"';\"+ js_command);\n  }\n  return img;\n}"}
{"ids": "39376", "raw_code": "public String[] toArray() throws Exception {\n  return Utils.splitOptions(toCommandLine());\n}"}
{"ids": "7152", "raw_code": "public static Set<EvalFactoryNode> recursiveGetChildNodes(EvalFactoryNode currentNode,EvalNodeUtilFactoryFilter filter){\n  Set<EvalFactoryNode> result=new LinkedHashSet<EvalFactoryNode>();\n  if (filter.consider(currentNode)) {\n    result.add(currentNode);\n  }\n  recursiveGetChildNodes(result,currentNode,filter);\n  return result;\n}"}
{"ids": "74396", "raw_code": "void dispose(){\n  if (popup != null) {\n    popup.removeAll();\n  }\n  popup=null;\n}"}
{"ids": "46894", "raw_code": "void checkFrameValue(final Object value){\n  if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) {\n    return;\n  }\n  if (value instanceof String) {\n    checkInternalName((String)value,\"Invalid stack frame value\");\n    return;\n  }\n  if (!(value instanceof Label)) {\n    throw new IllegalArgumentException(\"Invalid stack frame value: \" + value);\n  }\n else {\n    usedLabels.add((Label)value);\n  }\n}"}
{"ids": "4713", "raw_code": "@Override public void parse(final Cookie cookie,final String value) throws MalformedCookieException {\n  if (cookie == null) {\n    throw new IllegalArgumentException(\"Cookie may not be null\");\n  }\n  if (value == null) {\n    throw new MalformedCookieException(\"Missing value for max-age attribute\");\n  }\n  int age=-1;\n  try {\n    age=Integer.parseInt(value);\n  }\n catch (  final NumberFormatException e) {\n    age=-1;\n  }\n  if (age < 0) {\n    throw new MalformedCookieException(\"Invalid max-age attribute.\");\n  }\n  cookie.setExpiryDate(new Date(System.currentTimeMillis() + age * 1000L));\n}"}
{"ids": "86284", "raw_code": "public VariableConfigResource(String configuration,TextResource baseResource){\n  this(baseResource);\n  for (  String configurationLine : configuration.split(\"\\n|\\r\\n\")) {\n    String[] configSplit=configurationLine.split(\"=\");\n    addConfig(configSplit[0],configSplit[1]);\n  }\n}"}
{"ids": "14270", "raw_code": "private static String readFile(String fileName){\n  String classMethod=\"UpgradeUtils:readFile : \";\n  StringBuilder fileData=new StringBuilder();\n  String fileString=\"\";\n  try {\n    BufferedReader reader=new BufferedReader(new FileReader(fileName));\n    char[] buf=new char[1024];\n    int numRead=0;\n    while ((numRead=reader.read(buf)) != -1) {\n      String readData=String.valueOf(buf,0,numRead);\n      fileData.append(readData);\n      buf=new char[1024];\n    }\n    reader.close();\n    fileString=fileData.toString();\n  }\n catch (  Exception e) {\n    debug.error(classMethod + \"Error reading file : \" + fileName);\n  }\n  return fileString;\n}"}
{"ids": "22477", "raw_code": "public ScaleIOSnapshotVolumeResponse snapshotMultiVolume(Map<String,String> id2snapshot,String systemId) throws Exception {\n  String uri=ScaleIOConstants.getSnapshotVolumesURI(systemId);\n  ScaleIOSnapshotVolumes spVol=new ScaleIOSnapshotVolumes();\n  for (  Map.Entry<String,String> entry : id2snapshot.entrySet()) {\n    spVol.addSnapshot(entry.getKey(),entry.getValue());\n  }\n  ClientResponse response=post(URI.create(uri),getJsonForEntity(spVol));\n  return getResponseObject(ScaleIOSnapshotVolumeResponse.class,response);\n}"}
{"ids": "70911", "raw_code": "public synchronized void returnBuf(byte[] buf){\n  if (buf == null || buf.length > mSizeLimit) {\n    return;\n  }\n  mBuffersByLastUse.add(buf);\n  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);\n  if (pos < 0) {\n    pos=-pos - 1;\n  }\n  mBuffersBySize.add(pos,buf);\n  mCurrentSize+=buf.length;\n  trim();\n}"}
{"ids": "67647", "raw_code": "public boolean isDraft(){\n  return draft != null && draft.booleanValue();\n}"}
{"ids": "80613", "raw_code": "private WeatherUpdater(){\n  onTurnReached(0);\n}"}
{"ids": "78956", "raw_code": "protected void writeDataToFile(NodeHolder nodeHolder) throws CarbonDataWriterException {\n  long offset=writeDataToFile(nodeHolder,fileChannel);\n  BlockletInfoColumnar blockletInfo=getBlockletInfo(nodeHolder,offset);\n  blockletInfoList.add(blockletInfo);\n}"}
{"ids": "82225", "raw_code": "protected Container createSideNavigationComponent(Vector commands){\n  return createSideNavigationComponent(commands,null);\n}"}
{"ids": "32876", "raw_code": "public static double min(double[] a){\n  double min=Double.POSITIVE_INFINITY;\n  for (int i=0; i < a.length; i++) {\n    if (Double.isNaN(a[i]))     return Double.NaN;\n    if (a[i] < min)     min=a[i];\n  }\n  return min;\n}"}
{"ids": "41014", "raw_code": "@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){\n  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);\n  if (mComposing.length() > 0 && (newSelStart != candidatesEnd || newSelEnd != candidatesEnd)) {\n    mComposing.setLength(0);\n    updateCandidates();\n    InputConnection ic=getCurrentInputConnection();\n    if (ic != null) {\n      ic.finishComposingText();\n    }\n  }\n}"}
{"ids": "85681", "raw_code": "public <T>T mapTo(final Class<T> mappingClass){\n  return mapTo(mappingClass,null);\n}"}
{"ids": "34611", "raw_code": "private ArrayList<SpinnerLanguageElement> createSpinnerLanguages(int avoidLanguage){\n  ArrayList<SpinnerLanguageElement> result=new ArrayList<SpinnerLanguageElement>();\n  List<String> languages=mSessionOptions.allLanguages();\n  for (int i=0; i < languages.size(); ++i) {\n    if (i != avoidLanguage) {\n      result.add(new SpinnerLanguageElement(languages.get(i),i));\n    }\n  }\n  return result;\n}"}
{"ids": "3246", "raw_code": "private String userAgent(){\n  return mUserAgent;\n}"}
{"ids": "10579", "raw_code": "protected void collectProperties(Class<?> type,Type<?> referenceType,Map<String,Property> properties){\n  try {\n    BeanInfo beanInfo=Introspector.getBeanInfo(type);\n    PropertyDescriptor[] descriptors=beanInfo.getPropertyDescriptors();\n    for (    final PropertyDescriptor pd : descriptors) {\n      try {\n        Method readMethod=getReadMethod(pd,type);\n        Method writeMethod=getWriteMethod(pd,type,null);\n        Property property=processProperty(pd.getName(),pd.getPropertyType(),readMethod,writeMethod,type,referenceType,properties);\n        postProcessProperty(property,pd,readMethod,writeMethod,type,referenceType,properties);\n      }\n catch (      final Exception e) {\n        throw new RuntimeException(\"Unexpected error while trying to resolve property \" + referenceType.getCanonicalName() + \", [\"+ pd.getName()+ \"]\",e);\n      }\n    }\n  }\n catch (  IntrospectionException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "34154", "raw_code": "private void beforeKey() throws JSONException {\n  Scope context=peek();\n  if (context == Scope.NONEMPTY_OBJECT) {\n    out.append(',');\n  }\n else   if (context != Scope.EMPTY_OBJECT) {\n    throw new JSONException(\"Nesting problem\");\n  }\n  newline();\n  replaceTop(Scope.DANGLING_KEY);\n}"}
{"ids": "64008", "raw_code": "public void addHeaderView(View v,Object data,boolean isSelectable){\n  if (mAdapter != null && !(mAdapter instanceof HeaderViewListAdapter)) {\n    throw new IllegalStateException(\"Cannot add header view to list -- setAdapter has already been called.\");\n  }\n  FixedViewInfo info=new FixedViewInfo();\n  info.view=v;\n  info.data=data;\n  info.isSelectable=isSelectable;\n  mHeaderViewInfos.add(info);\n  if (mAdapter != null && mObserver != null) {\n    mObserver.onChanged();\n  }\n}"}
{"ids": "36410", "raw_code": "private void renderOperatorBackground(final Operator operator,final Graphics2D g2){\n  Rectangle2D frame=model.getOperatorRect(operator);\n  if (frame == null) {\n    return;\n  }\n  RoundRectangle2D background=new RoundRectangle2D.Double(frame.getX() - 7,frame.getY() - 3,frame.getWidth() + 14,frame.getHeight() + 11,OPERATOR_BG_CORNER,OPERATOR_BG_CORNER);\n  g2.setColor(Color.WHITE);\n  g2.fill(background);\n  Rectangle2D nameBounds=OPERATOR_FONT.getStringBounds(operator.getName(),g2.getFontRenderContext());\n  if (nameBounds.getWidth() > frame.getWidth()) {\n    double relevantWidth=Math.min(nameBounds.getWidth(),frame.getWidth() * MAX_HEADER_RATIO);\n    double offset=(frame.getWidth() - relevantWidth) / 2;\n    int x=(int)(frame.getX() + offset);\n    int padding=5;\n    RoundRectangle2D nameBackground=new RoundRectangle2D.Double((int)Math.min(frame.getX() - padding,x - padding),frame.getY() - 3,relevantWidth + 2 * padding,ProcessRendererModel.HEADER_HEIGHT + 3,OPERATOR_BG_CORNER,OPERATOR_BG_CORNER);\n    g2.fill(nameBackground);\n  }\n  renderPortsBackground(operator.getInputPorts(),g2);\n  renderPortsBackground(operator.getOutputPorts(),g2);\n}"}
{"ids": "74441", "raw_code": "protected void optionWindow(ActionEvent e){\n  if (optionsFrame == null) {\n    optionsFrame=new JmriJFrame(Bundle.getMessage(\"OptionsTitle\"),false,true);\n    optionsPane=optionsFrame.getContentPane();\n    optionsPane.setLayout(new BoxLayout(optionsFrame.getContentPane(),BoxLayout.Y_AXIS));\n    clearEntry.setSelectedIndex(nxPairs.getClearDownOption());\n    JPanel p1=new JPanel();\n    clearEntry.setToolTipText(\"set the action for when the NX buttons are reselected\");\n    p1.add(new JLabel(Bundle.getMessage(\"Reselection\")));\n    p1.add(clearEntry);\n    optionsPane.add(p1);\n    JPanel p2=new JPanel();\n    initializeColorCombo(settingTrackColorBox);\n    setColorCombo(settingTrackColorBox,nxPairs.getSettingRouteColor());\n    ActionListener settingTrackColorListener=null;\n    settingTrackColorBox.addActionListener(settingTrackColorListener);\n    p2.add(new JLabel(Bundle.getMessage(\"RouteSetColour\")));\n    p2.add(settingTrackColorBox);\n    optionsPane.add(p2);\n    durationSetting.setText(\"\" + nxPairs.getSettingTimer());\n    if (nxPairs.useDifferentColorWhenSetting()) {\n      durationSetting.setEnabled(true);\n    }\n else {\n      durationSetting.setEnabled(false);\n    }\n    JPanel p3=new JPanel();\n    p3.add(new JLabel(Bundle.getMessage(\"SettingDuration\")));\n    p3.add(durationSetting);\n    optionsPane.add(p3);\n    JPanel p4=new JPanel();\n    p4.add(dispatcherUse);\n    dispatcherUse.setSelected(nxPairs.getDispatcherIntegration());\n    optionsPane.add(p4);\n    JButton ok=new JButton(Bundle.getMessage(\"ButtonOK\"));\n    optionsPane.add(ok);\n    ok.addActionListener(null);\n  }\n  optionsFrame.pack();\n  optionsFrame.setVisible(true);\n}"}
{"ids": "30400", "raw_code": "public void makeExistingDemandBillInactive(String assessmentNo){\n  DemandBillService demandBillService=(DemandBillService)beanProvider.getBean(\"demandBillService\");\n  demandBillService.makeDemandBillInactive(assessmentNo);\n}"}
{"ids": "62701", "raw_code": "public void write(DataOutput out) throws IOException {\n  WritableUtils.writeVInt(out,length);\n  out.write(bytes,0,length);\n}"}
{"ids": "81818", "raw_code": "int characterClass() throws RESyntaxException {\n  if (pattern.charAt(idx) != '[') {\n    internalError();\n  }\n  if ((idx + 1) >= len || pattern.charAt(++idx) == ']') {\n    syntaxError(\"Empty or unterminated class\");\n  }\n  if (idx < len && pattern.charAt(idx) == ':') {\n    idx++;\n    int idxStart=idx;\n    while (idx < len && pattern.charAt(idx) >= 'a' && pattern.charAt(idx) <= 'z') {\n      idx++;\n    }\n    if ((idx + 1) < len && pattern.charAt(idx) == ':' && pattern.charAt(idx + 1) == ']') {\n      String charClass=pattern.substring(idxStart,idx);\n      Character i=(Character)hashPOSIX.get(charClass);\n      if (i != null) {\n        idx+=2;\n        return node(RE.OP_POSIXCLASS,i.charValue());\n      }\n      syntaxError(\"Invalid POSIX character class '\" + charClass + \"'\");\n    }\n    syntaxError(\"Invalid POSIX character class syntax\");\n  }\n  int ret=node(RE.OP_ANYOF,0);\n  char CHAR_INVALID=Character.MAX_VALUE;\n  char last=CHAR_INVALID;\n  char simpleChar;\n  boolean include=true;\n  boolean definingRange=false;\n  int idxFirst=idx;\n  char rangeStart=Character.MIN_VALUE;\n  char rangeEnd;\n  RERange range=new RERange();\n  while (idx < len && pattern.charAt(idx) != ']') {\n    switchOnCharacter: switch (pattern.charAt(idx)) {\ncase '^':\n      include=!include;\n    if (idx == idxFirst) {\n      range.include(Character.MIN_VALUE,Character.MAX_VALUE,true);\n    }\n  idx++;\ncontinue;\ncase '\\\\':\n{\nint c;\nswitch (c=escape()) {\ncase ESC_COMPLEX:\ncase ESC_BACKREF:\n  syntaxError(\"Bad character class\");\ncase ESC_CLASS:\nif (definingRange) {\n  syntaxError(\"Bad character class\");\n}\nswitch (pattern.charAt(idx - 1)) {\ncase RE.E_NSPACE:\nrange.include(Character.MIN_VALUE,7,include);\nrange.include((char)11,include);\nrange.include(14,31,include);\nrange.include(33,Character.MAX_VALUE,include);\nbreak;\ncase RE.E_NALNUM:\nrange.include(Character.MIN_VALUE,'/',include);\nrange.include(':','@',include);\nrange.include('[','^',include);\nrange.include('`',include);\nrange.include('{',Character.MAX_VALUE,include);\nbreak;\ncase RE.E_NDIGIT:\nrange.include(Character.MIN_VALUE,'/',include);\nrange.include(':',Character.MAX_VALUE,include);\nbreak;\ncase RE.E_SPACE:\nrange.include('\\t',include);\nrange.include('\\r',include);\nrange.include('\\f',include);\nrange.include('\\n',include);\nrange.include('\\b',include);\nrange.include(' ',include);\nbreak;\ncase RE.E_ALNUM:\nrange.include('a','z',include);\nrange.include('A','Z',include);\nrange.include('_',include);\ncase RE.E_DIGIT:\nrange.include('0','9',include);\nbreak;\n}\nlast=CHAR_INVALID;\nbreak;\ndefault :\nsimpleChar=(char)c;\nbreak switchOnCharacter;\n}\n}\ncontinue;\ncase '-':\nif (definingRange) {\nsyntaxError(\"Bad class range\");\n}\ndefiningRange=true;\nrangeStart=(last == CHAR_INVALID ? 0 : last);\nif ((idx + 1) < len && pattern.charAt(++idx) == ']') {\nsimpleChar=Character.MAX_VALUE;\nbreak;\n}\ncontinue;\ndefault :\nsimpleChar=pattern.charAt(idx++);\nbreak;\n}\nif (definingRange) {\nrangeEnd=simpleChar;\nif (rangeStart >= rangeEnd) {\nsyntaxError(\"Bad character class\");\n}\nrange.include(rangeStart,rangeEnd,include);\nlast=CHAR_INVALID;\ndefiningRange=false;\n}\n else {\nif (idx >= len || pattern.charAt(idx) != '-') {\nrange.include(simpleChar,include);\n}\nlast=simpleChar;\n}\n}\nif (idx == len) {\nsyntaxError(\"Unterminated character class\");\n}\nidx++;\ninstruction[ret + RE.offsetOpdata]=(char)range.num;\nfor (int i=0; i < range.num; i++) {\nemit((char)range.minRange[i]);\nemit((char)range.maxRange[i]);\n}\nreturn ret;\n}"}
{"ids": "84231", "raw_code": "@Override public int doFinal(final byte[] out,final int outOff) throws BadCiphertextException {\n  complete_=true;\n  int written=contentCryptoHandler_.doFinal(out,outOff);\n  updateTrailingSignature(out,outOff,written);\n  if (cryptoAlgo_.getTrailingSignatureLength() > 0) {\n    try {\n      CiphertextFooters footer=new CiphertextFooters(trailingSig_.sign());\n      byte[] fBytes=footer.toByteArray();\n      System.arraycopy(fBytes,0,out,outOff + written,fBytes.length);\n      return written + fBytes.length;\n    }\n catch (    final SignatureException ex) {\n      throw new AwsCryptoException(ex);\n    }\n  }\n else {\n    return written;\n  }\n}"}
{"ids": "39923", "raw_code": "public void hideAllBudges(){\n  for (  RelativeLayout badge : badgeList) {\n    if (badge.getVisibility() == VISIBLE)     BadgeHelper.hideBadge(badge);\n  }\n  badgeSaveInstanceHashMap.clear();\n}"}
{"ids": "53043", "raw_code": "public Element render(SVGPlot svgp){\n  Element tag=svgp.svgElement(SVGConstants.SVG_G_TAG);\n  Element button=svgp.svgRect(x,y,w,h);\n  if (!Double.isNaN(r)) {\n    SVGUtil.setAtt(button,SVGConstants.SVG_RX_ATTRIBUTE,r);\n    SVGUtil.setAtt(button,SVGConstants.SVG_RY_ATTRIBUTE,r);\n  }\n  SVGUtil.setAtt(button,SVGConstants.SVG_STYLE_ATTRIBUTE,butcss.inlineCSS());\n  tag.appendChild(button);\n  if (svgp.getIdElement(SVGEffects.LIGHT_GRADIENT_ID) != null) {\n    Element light=svgp.svgRect(x,y,w,h);\n    if (!Double.isNaN(r)) {\n      SVGUtil.setAtt(light,SVGConstants.SVG_RX_ATTRIBUTE,r);\n      SVGUtil.setAtt(light,SVGConstants.SVG_RY_ATTRIBUTE,r);\n    }\n    SVGUtil.setAtt(light,SVGConstants.SVG_STYLE_ATTRIBUTE,\"fill:url(#\" + SVGEffects.LIGHT_GRADIENT_ID + \");fill-opacity:.5\");\n    tag.appendChild(light);\n  }\n  if (svgp.getIdElement(SVGEffects.SHADOW_ID) != null) {\n    button.setAttribute(SVGConstants.SVG_FILTER_ATTRIBUTE,\"url(#\" + SVGEffects.SHADOW_ID + \")\");\n  }\n  if (title != null) {\n    Element label=svgp.svgText(x + w * .5,y + h * .7,title);\n    label.setAttribute(SVGConstants.SVG_STYLE_ATTRIBUTE,titlecss.inlineCSS());\n    tag.appendChild(label);\n  }\n  return tag;\n}"}
{"ids": "28726", "raw_code": "public void add(String gram){\n  if (name == null || gram == null)   return;\n  int len=gram.length();\n  if (len < 1 || len > NGram.N_GRAM)   return;\n  ++n_words[len - 1];\n  if (freq.containsKey(gram)) {\n    freq.put(gram,freq.get(gram) + 1);\n  }\n else {\n    freq.put(gram,1);\n  }\n}"}
{"ids": "24230", "raw_code": "public void handleClientMembership(String clientId,int eventType){\n  String notifType=null;\n  List<ManagedResource> cleanedUp=null;\n  if (eventType == ClientMembershipMessage.LEFT) {\n    notifType=NOTIF_CLIENT_LEFT;\n    cleanedUp=cleanupBridgeClientResources(clientId);\n  }\n else   if (eventType == ClientMembershipMessage.CRASHED) {\n    notifType=NOTIF_CLIENT_CRASHED;\n    cleanedUp=cleanupBridgeClientResources(clientId);\n  }\n else   if (eventType == ClientMembershipMessage.JOINED) {\n    notifType=NOTIF_CLIENT_JOINED;\n  }\n  if (cleanedUp != null) {\n    for (    ManagedResource resource : cleanedUp) {\n      MBeanUtil.unregisterMBean(resource);\n    }\n  }\n  Helper.sendNotification(this,new Notification(notifType,this.modelMBean,Helper.getNextNotificationSequenceNumber(),clientId));\n}"}
{"ids": "43340", "raw_code": "public <V extends Comparable<? super V>>OptionalDouble maxBy(DoubleFunction<V> keyExtractor){\n  ObjDoubleBox<V> result=collect(null,null,null);\n  return result.a == null ? OptionalDouble.empty() : OptionalDouble.of(result.b);\n}"}
{"ids": "44846", "raw_code": "private JLabel addKeybindLabel(JPanel panel,String labelText){\n  GridBagConstraints gbc=new GridBagConstraints();\n  gbc.anchor=GridBagConstraints.WEST;\n  gbc.insets=new Insets(0,0,5,0);\n  gbc.gridx=0;\n  gbc.gridy=keybindLabelGridYCounter++;\n  gbc.weightx=20;\n  JLabel jlbl=new JLabel(labelText);\n  panel.add(jlbl,gbc);\n  return jlbl;\n}"}
{"ids": "43966", "raw_code": "public static boolean isLetterOrNumber(int c){\n  return isLetter(c) || isNumber(c);\n}"}
{"ids": "40820", "raw_code": "public String seasonSummaryStr(){\n  setTeamRanks();\n  StringBuilder sb=new StringBuilder();\n  sb.append(ncgSummaryStr());\n  sb.append(\"\\n\\n\" + userTeam.seasonSummaryStr());\n  sb.append(\"\\n\\n\" + leagueRecords.brokenRecordsStr(getYear(),userTeam.abbr));\n  return sb.toString();\n}"}
{"ids": "74399", "raw_code": "public void addEndBumper(){\n  numEndBumpers++;\n  String name=\"\";\n  boolean duplicate=true;\n  while (duplicate) {\n    name=\"EB\" + numEndBumpers;\n    if (finder.findPositionablePointByName(name) == null) {\n      duplicate=false;\n    }\n    if (duplicate) {\n      numEndBumpers++;\n    }\n  }\n  PositionablePoint o=new PositionablePoint(name,PositionablePoint.END_BUMPER,currentPoint,this);\n  pointList.add(o);\n  setDirty(true);\n}"}
{"ids": "48522", "raw_code": "public int pixelFor(Color c){\n  return pixelFor(c.getRGB());\n}"}
{"ids": "2644", "raw_code": "void stripNonCompiledNodes(Node n,Set<String> filesToCompile){\n  for (  Node child : n.children()) {\n    if (!filesToCompile.contains(child.getSourceFileName())) {\n      child.detachFromParent();\n    }\n  }\n}"}
{"ids": "13245", "raw_code": "protected void restoreBaseURI(){\n  fBaseURI.pop();\n  fLiteralSystemID.pop();\n  fExpandedSystemID.pop();\n  fBaseURIScope.pop();\n  fCurrentBaseURI.setBaseSystemId((String)fBaseURI.peek());\n  fCurrentBaseURI.setLiteralSystemId((String)fLiteralSystemID.peek());\n  fCurrentBaseURI.setExpandedSystemId((String)fExpandedSystemID.peek());\n}"}
{"ids": "8124", "raw_code": "public static boolean asBoolean(CharSequence string){\n  return string.length() > 0;\n}"}
{"ids": "69075", "raw_code": "public void initialize(){\n  TextureState ts=new TextureState();\n  ts.setEnabled(false);\n  setRenderState(ts);\n  for (int i=0; i < landmarkList.size(); ++i) {\n    LandmarkState state=landmarkList.get(i);\n    addLandmark(state,false);\n  }\n  zBufferState=new ZBufferState();\n  zBufferState.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);\n  zBufferState.setEnabled(true);\n  setRenderState(zBufferState);\n}"}
{"ids": "40862", "raw_code": "public List<JCCompilationUnit> enterTrees(List<JCCompilationUnit> roots){\n  if (!taskListener.isEmpty()) {\n    for (    JCCompilationUnit unit : roots) {\n      TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,unit);\n      taskListener.started(e);\n    }\n  }\n  enter.main(roots);\n  if (!taskListener.isEmpty()) {\n    for (    JCCompilationUnit unit : roots) {\n      TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,unit);\n      taskListener.finished(e);\n    }\n  }\n  if (needRootClasses || sourceOutput || stubOutput) {\n    ListBuffer<JCClassDecl> cdefs=new ListBuffer<>();\n    for (    JCCompilationUnit unit : roots) {\n      for (List<JCTree> defs=unit.defs; defs.nonEmpty(); defs=defs.tail) {\n        if (defs.head instanceof JCClassDecl)         cdefs.append((JCClassDecl)defs.head);\n      }\n    }\n    rootClasses=cdefs.toList();\n  }\n  for (  JCCompilationUnit unit : roots) {\n    inputFiles.add(unit.sourcefile);\n  }\n  return roots;\n}"}
{"ids": "60333", "raw_code": "final V replaceNode(long key,V value,Object cv){\n  int hash=spread(key);\n  for (Node<V>[] tab=table; ; ) {\n    Node<V> f;\n    int n, i, fh;\n    if (tab == null || (n=tab.length) == 0 || (f=tabAt(tab,i=(n - 1) & hash)) == null) {\n      break;\n    }\n else     if ((fh=f.hash) == MOVED) {\n      tab=helpTransfer(tab,f);\n    }\n else {\n      V oldVal=null;\n      boolean validated=false;\nsynchronized (f) {\n        if (tabAt(tab,i) == f) {\n          if (fh >= 0) {\n            validated=true;\n            for (Node<V> e=f, pred=null; ; ) {\n              if ((e.key == key)) {\n                V ev=e.val;\n                if (cv == null || cv == ev || (ev != null && cv.equals(ev))) {\n                  oldVal=ev;\n                  if (value != null) {\n                    e.val=value;\n                  }\n else                   if (pred != null) {\n                    pred.next=e.next;\n                  }\n else {\n                    setTabAt(tab,i,e.next);\n                  }\n                }\n                break;\n              }\n              pred=e;\n              if ((e=e.next) == null) {\n                break;\n              }\n            }\n          }\n else           if (f instanceof TreeBin) {\n            validated=true;\n            TreeBin<V> t=(TreeBin<V>)f;\n            TreeNode<V> r, p;\n            if ((r=t.root) != null && (p=r.findTreeNode(hash,key)) != null) {\n              V pv=p.val;\n              if (cv == null || cv == pv || (pv != null && cv.equals(pv))) {\n                oldVal=pv;\n                if (value != null) {\n                  p.val=value;\n                }\n else                 if (t.removeTreeNode(p)) {\n                  setTabAt(tab,i,untreeify(t.first));\n                }\n              }\n            }\n          }\n        }\n      }\n      if (validated) {\n        if (oldVal != null) {\n          if (value == null) {\n            addCount(-1L,-1);\n          }\n          return oldVal;\n        }\n        break;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "54502", "raw_code": "public static LineByLineFileInputOperator checkpoint(LineByLineFileInputOperator oper,ByteArrayOutputStream bos) throws Exception {\n  Kryo kryo=new Kryo();\n  Output loutput=new Output(bos);\n  kryo.writeObject(loutput,oper);\n  loutput.close();\n  Input lInput=new Input(bos.toByteArray());\n  @SuppressWarnings(\"unchecked\") LineByLineFileInputOperator checkPointedOper=kryo.readObject(lInput,oper.getClass());\n  lInput.close();\n  return checkPointedOper;\n}"}
{"ids": "6379", "raw_code": "public static String explode(Collection<String> collection,String delimiter){\n  StringBuilder sb=new StringBuilder();\n  if (!collection.isEmpty()) {\n    Iterator<String> i=collection.iterator();\n    sb.append(i.next());\n    while (i.hasNext()) {\n      sb.append(delimiter);\n      sb.append(i.next());\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "37838", "raw_code": "@Override public Enumeration<String> enumerateMeasures(){\n  Vector<String> newVector=new Vector<String>(1);\n  newVector.addElement(\"measureNumRules\");\n  return newVector.elements();\n}"}
{"ids": "83318", "raw_code": "public static void writeStatistics(TDoubleObjectHashMap<DescriptiveStatistics> statsMap,String keyLabel,String file) throws IOException {\n  double[] keys=statsMap.keys();\n  Arrays.sort(keys);\n  BufferedWriter writer=new BufferedWriter(new FileWriter(file));\n  writer.write(keyLabel);\n  writer.write(TAB);\n  writer.write(\"mean\");\n  writer.write(TAB);\n  writer.write(\"median\");\n  writer.write(TAB);\n  writer.write(\"min\");\n  writer.write(TAB);\n  writer.write(\"max\");\n  writer.write(TAB);\n  writer.write(\"n\");\n  writer.newLine();\n  for (  double key : keys) {\n    DescriptiveStatistics stats=statsMap.get(key);\n    writer.write(String.valueOf(key));\n    writer.write(TAB);\n    writer.write(String.valueOf(stats.getMean()));\n    writer.write(TAB);\n    writer.write(String.valueOf(stats.getPercentile(50)));\n    writer.write(TAB);\n    writer.write(String.valueOf(stats.getMin()));\n    writer.write(TAB);\n    writer.write(String.valueOf(stats.getMax()));\n    writer.write(TAB);\n    writer.write(String.valueOf(stats.getN()));\n    writer.newLine();\n  }\n  writer.close();\n}"}
{"ids": "38490", "raw_code": "public void actionPerformed(ActionEvent e){\n  if (!checkModified())   return;\n  if (m_Script.getFilename() == null)   return;\n  try {\n    m_Script.start(m_Args);\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n    JOptionPane.showMessageDialog(FileScriptingPanel.this,\"Error running script:\\n\" + ex,\"Error\",JOptionPane.ERROR_MESSAGE);\n  }\n}"}
{"ids": "46865", "raw_code": "static String encodeStub(RMIServer rmiServer,Map<String,?> env) throws IOException {\n  if (IIOPHelper.isStub(rmiServer))   return \"/ior/\" + encodeIIOPStub(rmiServer,env);\n else   return \"/stub/\" + encodeJRMPStub(rmiServer,env);\n}"}
{"ids": "36527", "raw_code": "public int lineToY(int line){\n  FontMetrics fm=painter.getFontMetrics();\n  return (line - firstLine) * fm.getHeight() - (fm.getLeading() + fm.getMaxDescent());\n}"}
{"ids": "75424", "raw_code": "private void handleDoubleClick(DoubleClickEvent e){\n  ISelection selection=e.getSelection();\n  if (selection instanceof IStructuredSelection) {\n    IStructuredSelection structured=(IStructuredSelection)selection;\n    if (structured.size() == 1) {\n      Object first=structured.getFirstElement();\n      if (first instanceof ISVNRemoteFile) {\n        openAction.selectionChanged(null,selection);\n        openAction.run(null);\n      }\n else {\n        treeViewer.setExpandedState(first,!treeViewer.getExpandedState(first));\n      }\n    }\n  }\n}"}
{"ids": "43602", "raw_code": "public static long startTime(){\n  return System.nanoTime();\n}"}
{"ids": "4239", "raw_code": "@Transactional public int deleteAll(){\n  List<T> allEntities=retrieveAll();\n  for (  T entity : allEntities) {\n    delete(entity);\n  }\n  return allEntities.size();\n}"}
{"ids": "30472", "raw_code": "private GSMessageImpl receiveFromQueue(long timeout) throws ReceiveFromQueueException {\n  Transaction txn=m_session.getTransaction();\n  if (_logger.isLoggable(Level.FINE)) {\n    _logger.log(Level.FINE,\"receiveFromQueue(): Receiving from Queue, txn=\" + txn);\n  }\n  try {\n    return (GSMessageImpl)m_space.take(m_jmsMessageTemplate,txn,timeout);\n  }\n catch (  Exception e) {\n    throw new ReceiveFromQueueException(e);\n  }\n}"}
{"ids": "45428", "raw_code": "public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {\n  OutputStream out=null;\n  try {\n    out=openOutputStream(file,append);\n    out.write(data);\n    out.close();\n  }\n  finally {\n    IOUtils.closeQuietly(out);\n  }\n}"}
{"ids": "78857", "raw_code": "public String findNext(boolean previousFlipped){\n  boolean resetIsFlipped=true;\n  if (previousFlipped && count > 0) {\n    if (!valueIterator.hasNext()) {\n      valueIterator=values.iterator();\n      index=0;\n      isFlipped=true;\n      resetIsFlipped=false;\n    }\n else {\n      index++;\n    }\n    currentValue=valueIterator.next();\n  }\n  count++;\n  if (resetIsFlipped) {\n    isFlipped=false;\n  }\n  return currentValue;\n}"}
{"ids": "84275", "raw_code": "public static boolean isNotEmpty(List<Object> list){\n  return !list.isEmpty();\n}"}
{"ids": "15125", "raw_code": "private RegistrationResult checkPassword(String password,String confirmPassword){\n  if ((password == null) || password.length() == 0) {\n    if (debug.messageEnabled()) {\n      debug.message(\"password was missing from the form\");\n    }\n    return RegistrationResult.NO_PASSWORD_ERROR;\n  }\n else {\n    if (password.length() < requiredPasswordLength) {\n      if (debug.messageEnabled()) {\n        debug.message(\"password was not long enough\");\n      }\n      return RegistrationResult.PASSWORD_TOO_SHORT;\n    }\n    if ((confirmPassword == null) || confirmPassword.length() == 0) {\n      if (debug.messageEnabled()) {\n        debug.message(\"no confirmation password\");\n      }\n      return RegistrationResult.NO_CONFIRMATION_ERROR;\n    }\n else {\n      if (!password.equals(confirmPassword)) {\n        return RegistrationResult.PASSWORD_MISMATCH_ERROR;\n      }\n    }\n  }\n  return RegistrationResult.NO_ERROR;\n}"}
{"ids": "71979", "raw_code": "private static LDAPFilter createANDFilter(FilterSet filterSet) throws LDAPException, IOException {\n  List<JAXBElement<?>> list=filterSet.getFilterGroup();\n  ArrayList<RawFilter> filters=new ArrayList<>(list.size());\n  for (  JAXBElement<?> filter : list) {\n    filters.add(createFilter(filter));\n  }\n  return LDAPFilter.createANDFilter(filters);\n}"}
{"ids": "70275", "raw_code": "void calculateUtility(FiringPlan firingPlan,int overheatTolerance,boolean shooterIsAero){\n  int overheat=0;\n  if (firingPlan.getHeat() > overheatTolerance) {\n    overheat=firingPlan.getHeat() - overheatTolerance;\n  }\n  double modifier=1;\n  modifier+=calcCommandUtility(firingPlan.getTarget());\n  modifier+=calcStrategicBuildingTargetUtility(firingPlan.getTarget());\n  modifier+=calcPriorityUnitTargetUtility(firingPlan.getTarget());\n  double utility=0;\n  utility+=DAMAGE_UTILITY * firingPlan.getExpectedDamage();\n  utility+=CRITICAL_UTILITY * firingPlan.getExpectedCriticals();\n  utility+=KILL_UTILITY * firingPlan.getKillProbability();\n  utility*=calcTargetPotentialDamageMultiplier(firingPlan.getTarget());\n  utility+=TARGET_HP_FRACTION_DEALT_UTILITY * calcDamageAllocationUtility(firingPlan.getTarget(),firingPlan.getExpectedDamage());\n  utility-=calcCivilianTargetDisutility(firingPlan.getTarget());\n  utility*=modifier;\n  utility-=(shooterIsAero ? OVERHEAT_DISUTILITY_AERO : OVERHEAT_DISUTILITY) * overheat;\n  utility-=(firingPlan.getTarget() instanceof MechWarrior) ? EJECTED_PILOT_DISUTILITY : 0;\n  firingPlan.setUtility(utility);\n}"}
{"ids": "67661", "raw_code": "public void put(String key,double value){\n  if (value == Double.POSITIVE_INFINITY) {\n    put(key,\"INF\");\n  }\n else   if (value == Double.NEGATIVE_INFINITY) {\n    put(key,\"-INF\");\n  }\n else {\n    put(key,Double.toString(value));\n  }\n}"}
{"ids": "29987", "raw_code": "public static long persianToJulian(long year,int month,int day){\n  return 365L * ((ceil(year - 474L,2820D) + 474L) - 1L) + ((long)Math.floor((682L * (ceil(year - 474L,2820D) + 474L) - 110L) / 2816D)) + (PersianCalendarConstants.PERSIAN_EPOCH - 1L) + 1029983L * ((long)Math.floor((year - 474L) / 2820D)) + (month < 7 ? 31 * month : 30 * month + 6) + day;\n}"}
{"ids": "73965", "raw_code": "@Override public void mouseDragged(MouseEvent evt){\n  int xTrans=0;\n  int yTrans=0;\n  if (slider.getSnapToTicks()) {\n    int pos=getLocationForValue(getSnappedValue(evt));\n    if (pos > -1) {\n      if (slider.getOrientation() == JSlider.HORIZONTAL) {\n        xTrans=pos - evt.getX() + offset;\n        evt.translatePoint(xTrans,0);\n      }\n else {\n        yTrans=pos - evt.getY() + offset;\n        evt.translatePoint(0,yTrans);\n      }\n    }\n  }\n  delegate.mouseDragged(evt);\n  evt.translatePoint(xTrans,yTrans);\n}"}
{"ids": "53739", "raw_code": "@Override final Node<K,V> find(int h,Object k){\n  if (k != null) {\n    for (Node<K,V> e=first; e != null; e=e.next) {\n      int s;\n      K ek;\n      if (((s=lockState) & (WAITER | WRITER)) != 0) {\n        if (e.hash == h && ((ek=e.key) == k || (ek != null && k.equals(ek))))         return e;\n      }\n else       if (U.compareAndSwapInt(this,LOCKSTATE,s,s + READER)) {\n        TreeNode<K,V> r, p;\n        try {\n          p=((r=root) == null ? null : r.findTreeNode(h,k,null));\n        }\n  finally {\n          Thread w;\n          int ls;\n          do {\n          }\n while (!U.compareAndSwapInt(this,LOCKSTATE,ls=lockState,ls - READER));\n          if (ls == (READER | WAITER) && (w=waiter) != null)           LockSupport.unpark(w);\n        }\n        return p;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "17277", "raw_code": "public void stopEnumeration(EnumerationDeletionContext aws){\n  aws.computeEnumerationRequest.enumerationAction=EnumerationAction.STOP;\n  handleEnumerationRequestForDeletion(aws);\n}"}
{"ids": "8514", "raw_code": "public static void doRestart(Context c){\n  try {\n    if (c != null) {\n      PackageManager pm=c.getPackageManager();\n      if (pm != null) {\n        Intent mStartActivity=pm.getLaunchIntentForPackage(c.getPackageName());\n        if (mStartActivity != null) {\n          mStartActivity.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n          int mPendingIntentId=223344;\n          PendingIntent mPendingIntent=PendingIntent.getActivity(c,mPendingIntentId,mStartActivity,PendingIntent.FLAG_CANCEL_CURRENT);\n          AlarmManager mgr=(AlarmManager)c.getSystemService(Context.ALARM_SERVICE);\n          mgr.set(AlarmManager.RTC,System.currentTimeMillis() + 100,mPendingIntent);\n          System.exit(0);\n        }\n else {\n          Log.e(\"AppRestarter\",\"Was not able to restart application, mStartActivity null\");\n        }\n      }\n else {\n        Log.e(\"AppRestarter\",\"Was not able to restart application, PM null\");\n      }\n    }\n else {\n      Log.e(\"AppRestarter\",\"Was not able to restart application, Context null\");\n    }\n  }\n catch (  Exception ex) {\n    Log.e(\"AppRestarter\",\"Was not able to restart application\");\n  }\n}"}
{"ids": "25231", "raw_code": "public Collection<Object> values(){\n  ArrayList<Object> answer=new ArrayList<Object>(readMethods.size());\n  for (Iterator<Object> iter=valueIterator(); iter.hasNext(); ) {\n    answer.add(iter.next());\n  }\n  return Collections.unmodifiableList(answer);\n}"}
{"ids": "13189", "raw_code": "protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  int end=getYearMonth(str,0,len,date);\n  date.day=DAY;\n  parseTimeZone(str,end,len,date);\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n  }\n  date.position=0;\n  return date;\n}"}
{"ids": "61954", "raw_code": "public ArrayVal(double[] values){\n  this.array=new double[values.length];\n  for (int i=0; i < array.length; i++) {\n    array[i]=values[i];\n  }\n  hashcode=Arrays.hashCode(array);\n}"}
{"ids": "22219", "raw_code": "public void addChild(String child){\n  if (child == null) {\n    return;\n  }\n  String childPath=path.endsWith(\"/\") ? path + child : path + \"/\" + child;\n  children.add(new ZkNode(childPath));\n}"}
{"ids": "26931", "raw_code": "@VisibleForTesting public static boolean sendToTMaster(String command,String topologyName,SchedulerStateManagerAdaptor stateManager,NetworkUtils.TunnelConfig tunnelConfig){\n  LOG.fine(\"Fetching TMaster location for topology: \" + topologyName);\n  TopologyMaster.TMasterLocation location=stateManager.getTMasterLocation(topologyName);\n  if (location == null) {\n    LOG.severe(\"Failed to fetch TMaster Location for topology: \" + topologyName);\n    return false;\n  }\n  LOG.fine(\"Fetched TMaster location for topology: \" + topologyName);\n  String url=String.format(\"http://%s:%d/%s?topologyid=%s\",location.getHost(),location.getControllerPort(),command,location.getTopologyId());\n  try {\n    URL endpoint=new URL(url);\n    LOG.fine(\"HTTP URL for TMaster: \" + endpoint);\n    return sendGetRequest(endpoint,command,tunnelConfig);\n  }\n catch (  MalformedURLException e) {\n    throw new RuntimeException(\"Invalid URL for tmaster endpoint: \" + url,e);\n  }\n}"}
{"ids": "17953", "raw_code": "public int addPadding(byte[] in,int inOff){\n  byte code=(byte)(in.length - inOff);\n  while (inOff < (in.length - 1)) {\n    in[inOff]=(byte)random.nextInt();\n    inOff++;\n  }\n  in[inOff]=code;\n  return code;\n}"}
{"ids": "77417", "raw_code": "public void update(long duration,TimeUnit unit){\n  update(unit.toNanos(duration));\n}"}
{"ids": "39953", "raw_code": "public static String fromDoc2String(Document doc) throws Exception {\n  KXmlSerializer serializer=new KXmlSerializer();\n  ByteArrayOutputStream bos=new ByteArrayOutputStream();\n  DataOutputStream dos=new DataOutputStream(bos);\n  try {\n    serializer.setFeature(\"http://xmlpull.org/v1/doc/features.html#indent-output\",true);\n    serializer.setOutput(dos,XformConstants.DEFAULT_CHARACTER_ENCODING);\n    doc.write(serializer);\n    serializer.flush();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    return null;\n  }\n  return new String(bos.toByteArray(),XformConstants.DEFAULT_CHARACTER_ENCODING);\n}"}
{"ids": "26209", "raw_code": "public int addOrderTerm(GenericValue orderTerm){\n  orderTerms.add(orderTerm);\n  return orderTerms.indexOf(orderTerm);\n}"}
{"ids": "56977", "raw_code": "public static int checkActions(Map<String,Object> entry){\n  boolean ip6=false;\n  boolean ip4=false;\n  String actions=null;\n  if (entry.containsKey(StaticFlowEntryPusher.COLUMN_ACTIONS) || entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS) || entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS)) {\n    if (entry.containsKey(StaticFlowEntryPusher.COLUMN_ACTIONS)) {\n      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_ACTIONS);\n    }\n else     if (entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS)) {\n      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS);\n    }\n else     if (entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS)) {\n      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS);\n    }\n    if (actions.contains(MatchUtils.STR_ICMPV6_CODE) || actions.contains(MatchUtils.STR_ICMPV6_TYPE) || actions.contains(MatchUtils.STR_IPV6_DST)|| actions.contains(MatchUtils.STR_IPV6_SRC)|| actions.contains(MatchUtils.STR_IPV6_FLOW_LABEL)|| actions.contains(MatchUtils.STR_IPV6_ND_SSL)|| actions.contains(MatchUtils.STR_IPV6_ND_TARGET)|| actions.contains(MatchUtils.STR_IPV6_ND_TTL)) {\n      ip6=true;\n    }\n    if (actions.contains(MatchUtils.STR_NW_SRC) || actions.contains(MatchUtils.STR_NW_DST) || actions.contains(MatchUtils.STR_ARP_OPCODE)|| actions.contains(MatchUtils.STR_ARP_SHA)|| actions.contains(MatchUtils.STR_ARP_DHA)|| actions.contains(MatchUtils.STR_ARP_SPA)|| actions.contains(MatchUtils.STR_ARP_DPA)|| actions.contains(MatchUtils.STR_ICMP_CODE)|| actions.contains(MatchUtils.STR_ICMP_TYPE)) {\n      ip4=true;\n    }\n  }\n  if (ip6 == false && ip4 == false) {\n    return 0;\n  }\n else   if (ip6 == false && ip4 == true) {\n    return 1;\n  }\n else   if (ip6 == true && ip4 == false) {\n    return 2;\n  }\n else {\n    return -1;\n  }\n}"}
{"ids": "68989", "raw_code": "public static ObservableStringValue decision(ObservableBooleanValue condition,ObservableStringValue ifTrue,ObservableStringValue ifFalse){\n  StringProperty ret=new SimpleStringProperty();\n  condition.addListener(null);\n  ifTrue.addListener(null);\n  ifFalse.addListener(null);\n  ret.set(condition.get() ? ifTrue.get() : ifFalse.get());\n  return ret;\n}"}
{"ids": "78035", "raw_code": "public static final boolean readFromStream(InputStream in,byte[] buf,int offset,int len) throws IOException {\n  int totalBytesRead=0;\n  while (totalBytesRead < len) {\n    int bytesRead=in.read(buf,offset + totalBytesRead,len - totalBytesRead);\n    if (bytesRead < 0) {\n      return false;\n    }\n    totalBytesRead+=bytesRead;\n  }\n  return true;\n}"}
{"ids": "46294", "raw_code": "public static Field findStaticField(Class<?> type,String name) throws NoSuchFieldException {\n  Field field=findField(type,name);\n  if (!Modifier.isStatic(field.getModifiers())) {\n    throw new NoSuchFieldException(\"Field '\" + name + \"' is not static\");\n  }\n  return field;\n}"}
{"ids": "63392", "raw_code": "@Override public Xid[] recover(int flag) throws XAException {\n  debugCodeCall(\"recover\",quoteFlags(flag));\n  checkOpen();\n  try (Statement stat=physicalConn.createStatement()){\n    ResultSet rs=stat.executeQuery(\"SELECT * FROM \" + \"INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION\");\n    ArrayList<Xid> list=New.arrayList();\n    while (rs.next()) {\n      String tid=rs.getString(\"TRANSACTION\");\n      int id=getNextId(XID);\n      Xid xid=new JdbcXid(factory,id,tid);\n      list.add(xid);\n    }\n    rs.close();\n    Xid[] result=new Xid[list.size()];\n    list.toArray(result);\n    if (list.size() > 0) {\n      prepared=true;\n    }\n    return result;\n  }\n catch (  SQLException e) {\n    XAException xa=new XAException(XAException.XAER_RMERR);\n    xa.initCause(e);\n    throw xa;\n  }\n}"}
{"ids": "13530", "raw_code": "public void bind(Texture texture){\n  faces.forEach(null);\n}"}
{"ids": "57462", "raw_code": "public final void clearPassword(){\n  Arrays.fill(password,'?');\n  password=null;\n}"}
{"ids": "40042", "raw_code": "private void initQuadProgram(){\n  glUseProgram(quadProgram);\n  int texUniform=glGetUniformLocation(quadProgram,\"tex\");\n  glUniform1i(texUniform,0);\n  glUseProgram(0);\n}"}
{"ids": "47238", "raw_code": "public void put(E e) throws InterruptedException {\n  if (e == null)   throw new NullPointerException();\n  int c=-1;\n  Node<E> node=new Node<E>(e);\n  final ReentrantLock putLock=this.putLock;\n  final AtomicInteger count=this.count;\n  putLock.lockInterruptibly();\n  try {\n    while (count.get() == capacity) {\n      notFull.await();\n    }\n    enqueue(node);\n    c=count.getAndIncrement();\n    if (c + 1 < capacity)     notFull.signal();\n  }\n  finally {\n    putLock.unlock();\n  }\n  if (c == 0)   signalNotEmpty();\n}"}
{"ids": "21151", "raw_code": "public static boolean logFileZipped(String file){\n  return file.endsWith(\".bz2\") || file.endsWith(\".gz\") || file.endsWith(\".xz\");\n}"}
{"ids": "76382", "raw_code": "private void validateHasChecksumFile(File archiveFile) throws InvalidArchiveUpdateException {\n  try {\n    resolveChecksumFile(extractFileToDirectory(archiveFile,CHECKSUMS_FILE_IN_OPENIDM));\n  }\n catch (  Exception e) {\n    throw new InvalidArchiveUpdateException(archiveFile.getName(),\"The archive \" + archiveFile.getName() + \" does not appear to contain a checksums file.\",e);\n  }\n}"}
{"ids": "80529", "raw_code": "protected String ratsProblem(){\n  final String text=\"Mayor Chalmers shouts: Ados City is being invaded by #rats!\" + \" Anyone who will help to clean up the city, will be rewarded!\";\n  return (text);\n}"}
{"ids": "62881", "raw_code": "public Class<?> lookupEntityClass(Class<?> objClass){\n  for (Class<?> cls=objClass; cls != null; cls=cls.getSuperclass()) {\n    if (entityBindings.containsKey(cls) || cls.isAnnotationPresent(Entity.class)) {\n      return cls;\n    }\n  }\n  throw new IllegalArgumentException(\"Unknown Entity \" + objClass);\n}"}
{"ids": "10093", "raw_code": "private boolean isWhitespace(int position){\n  if (_len >= 0 && position >= _len) {\n    return false;\n  }\n  return Character.isWhitespace(_working[position]);\n}"}
{"ids": "15572", "raw_code": "private void collectWrapperClasses(ClassLoader cl,String pkg,File file) throws Exception {\n  for (  File f : file.listFiles()) {\n    if (f.isDirectory()) {\n      collectWrapperClasses(cl,pkg + f.getName() + \".\",f);\n    }\n else {\n      addWrapperClassToWrapperClassesList(cl,pkg,f);\n    }\n  }\n}"}
{"ids": "78539", "raw_code": "public void clearImages(){\n  chunks.clear();\n  markers.clear();\n  redraw(true);\n  shift_x=0;\n  shift_y=0;\n  zoom_level_pos=7;\n  zoom_level=1;\n}"}
{"ids": "37036", "raw_code": "private static void addComponent(final JPanel panel,final Component component,final String description,final String hint){\n  final JPanel settingPanel=new JPanel(new BorderLayout());\n  settingPanel.setBorder(STANDARD_EMPTY_BORDER);\n  settingPanel.add(new JLabel(description),BorderLayout.CENTER);\n  final JPanel innerPanel=new JPanel(new BorderLayout());\n  innerPanel.add(component,BorderLayout.CENTER);\n  final JHintIcon hintPopup=new JHintIcon(hint);\n  hintPopup.setBorder(new EmptyBorder(0,3,0,0));\n  innerPanel.add(hintPopup,BorderLayout.EAST);\n  settingPanel.add(innerPanel,BorderLayout.EAST);\n  panel.add(settingPanel);\n}"}
{"ids": "64170", "raw_code": "public ReversedLinesFileReader(final File file,final int blockSize,final String encoding) throws IOException {\n  this(file,blockSize,Charsets.toCharset(encoding));\n}"}
{"ids": "35501", "raw_code": "private void onConnect(){\n  connectionState=ConnectionState.Connected;\n  checkForUpdatedFlight=true;\n  subscribe(String.format(trafficAlertChannel,flightId));\n  subscribe(String.format(situationalAwarenessChannel,flightId));\n}"}
{"ids": "53198", "raw_code": "public static double cdf(double x,double sigma){\n  if (x <= 0.) {\n    return 0.;\n  }\n  final double xs=x / sigma;\n  return 1. - Math.exp(-.5 * xs * xs);\n}"}
{"ids": "68719", "raw_code": "public double gaussianShortfall(double target){\n  final CumulativeNormalDistribution gIntegral=new CumulativeNormalDistribution(mean(),standardDeviation());\n  return gIntegral.op(target);\n}"}
{"ids": "13159", "raw_code": "@Override public int read(char ch[],int offset,int length) throws IOException {\n  int byteLength=length << 1;\n  if (byteLength > fBuffer.length) {\n    byteLength=fBuffer.length;\n  }\n  int byteCount=fInputStream.read(fBuffer,0,byteLength);\n  if (byteCount == -1) {\n    return -1;\n  }\n  if ((byteCount & 1) != 0) {\n    int b=fInputStream.read();\n    if (b == -1) {\n      expectedTwoBytes();\n    }\n    fBuffer[byteCount++]=(byte)b;\n  }\n  final int charCount=byteCount >> 1;\n  if (fIsBigEndian) {\n    processBE(ch,offset,charCount);\n  }\n else {\n    processLE(ch,offset,charCount);\n  }\n  return charCount;\n}"}
{"ids": "85419", "raw_code": "public static void endWrapper(Writer writer) throws IOException {\n  writer.write(\"});\\n\");\n  writer.write(\"}(typeof define==='function' && define.amd ? define : function (factory) {\\n\");\n  writer.write(\"if (typeof exports!=='undefined') { factory(require, exports, module);\\n\");\n  writer.write(\"} else { throw 'no module loader'; }\\n\");\n  writer.write(\"}));\\n\");\n}"}
{"ids": "26996", "raw_code": "protected Document createConfigurationDocument(AVList params){\n  Document doc=super.createConfigurationDocument(params);\n  if (doc == null || doc.getDocumentElement() == null)   return doc;\n  DataConfigurationUtils.createWMSLayerConfigElements(params,doc.getDocumentElement());\n  return doc;\n}"}
{"ids": "79722", "raw_code": "public void registerCallback(String challenge,ChallengeCallbackPlugin plugin,HttpMessage attack){\n  cleanExpiredCallbacks();\n  regCallbacks.put(challenge,new RegisteredCallback(plugin,attack));\n}"}
{"ids": "1272", "raw_code": "public static double min(Array array) throws PageException {\n  if (array.getDimension() > 1)   throw new ExpressionException(\"can only get max value from 1 dimensional arrays\");\n  if (array.size() == 0)   return 0;\n  double rtn=_toDoubleValue(array,1);\n  int len=array.size();\n  try {\n    for (int i=2; i <= len; i++) {\n      double v=_toDoubleValue(array,i);\n      if (rtn > v)       rtn=v;\n    }\n  }\n catch (  PageException e) {\n    throw new ExpressionException(\"exception while execute array operation: \" + e.getMessage());\n  }\n  return rtn;\n}"}
{"ids": "35787", "raw_code": "public static byte[] writeToArray(NSObject root) throws IOException {\n  ByteArrayOutputStream bout=new ByteArrayOutputStream();\n  write(bout,root);\n  return bout.toByteArray();\n}"}
{"ids": "71696", "raw_code": "private static void loadLibraryResource(String resourceSubdirectoryName,String libraryName,String tempSubdirectoryName,String... dependentLibraryNames) throws Throwable {\n  for (  String dependentLibraryName : dependentLibraryNames) {\n    logger.log(level,\"Library \" + libraryName + \" depends on \"+ dependentLibraryName);\n    String dependentResourceSubdirectoryName=resourceSubdirectoryName + \"/\" + osString()+ \"/\"+ archString();\n    String dependentLibraryTempSubDirectoryName=libraryName + \"_dependents\" + File.separator+ osString()+ File.separator+ archString()+ File.separator;\n    loadLibraryResource(dependentResourceSubdirectoryName,dependentLibraryName,dependentLibraryTempSubDirectoryName);\n  }\n  String libraryFileName=createLibraryFileName(libraryName);\n  File libraryTempFile=createTempFile(tempSubdirectoryName,libraryFileName);\n  if (!libraryTempFile.exists()) {\n    String libraryResourceName=resourceSubdirectoryName + \"/\" + libraryFileName;\n    logger.log(level,\"Writing resource  \" + libraryResourceName);\n    logger.log(level,\"to temporary file \" + libraryTempFile);\n    writeResourceToFile(libraryResourceName,libraryTempFile);\n  }\n  logger.log(level,\"Loading library \" + libraryTempFile);\n  System.load(libraryTempFile.toString());\n  logger.log(level,\"Loading library \" + libraryTempFile + \" DONE\");\n}"}
{"ids": "56858", "raw_code": "private JobDefinition createJobDefinition() throws Exception {\n  namespaceDaoTestHelper.createNamespaceEntity(TEST_ACTIVITI_NAMESPACE_CD);\n  JobDefinitionCreateRequest request=jobDefinitionServiceTestHelper.createJobDefinitionCreateRequest();\n  JobDefinition jobDefinition=jobDefinitionService.createJobDefinition(request,false);\n  validateJobDefinition(jobDefinition);\n  return jobDefinition;\n}"}
{"ids": "12255", "raw_code": "private WebSocketInputStream openInputStream(Socket socket) throws WebSocketException {\n  try {\n    return new WebSocketInputStream(new BufferedInputStream(socket.getInputStream()));\n  }\n catch (  IOException e) {\n    throw new WebSocketException(WebSocketError.SOCKET_INPUT_STREAM_FAILURE,\"Failed to get the input stream of the raw socket: \" + e.getMessage(),e);\n  }\n}"}
{"ids": "7720", "raw_code": "@Override protected void drawFirstPassShape(Graphics2D g2,int pass,int series,int item,Shape shape){\n  if (isShadowPass(pass)) {\n    if (getWallPaint() != null) {\n      g2.setStroke(getItemStroke(series,item));\n      g2.setPaint(getWallPaint());\n      g2.translate(getXOffset(),getYOffset());\n      g2.draw(shape);\n      g2.translate(-getXOffset(),-getYOffset());\n    }\n  }\n else {\n    super.drawFirstPassShape(g2,pass,series,item,shape);\n  }\n}"}
{"ids": "86188", "raw_code": "public static double asDouble(String str,double def){\n  try {\n    return Double.parseDouble(str);\n  }\n catch (  NumberFormatException e) {\n    return def;\n  }\n}"}
{"ids": "73265", "raw_code": "public JMenu createHelpMenu(){\n  ShowHelpAction helpAction=new ShowHelpAction(\"Pages/Network.html\");\n  JMenu helpMenu=new JMenu(\"Help\");\n  helpMenu.add(helpAction);\n  return helpMenu;\n}"}
{"ids": "12969", "raw_code": "public static void expandDigits(String numberString,WordRelation wordRelation,Item tokenItem){\n  int numberDigits=numberString.length();\n  for (int i=0; i < numberDigits; i++) {\n    char digit=numberString.charAt(i);\n    if (isDigit(digit)) {\n      wordRelation.addWord(tokenItem,digit2num[numberString.charAt(i) - '0']);\n    }\n else {\n      wordRelation.addWord(tokenItem,\"umpty\");\n    }\n  }\n}"}
{"ids": "69212", "raw_code": "public String longestMatch(String input){\n  TrieNode node=root;\n  String result=null;\n  for (int i=input.length() - 1; i >= 0; i--) {\n    node=node.getChild(input.charAt(i));\n    if (node == null)     break;\n    if (node.isTerminal())     result=input.substring(i);\n  }\n  return result;\n}"}
{"ids": "38648", "raw_code": "@Override public void removePropertyChangeListener(PropertyChangeListener pcl){\n  m_pcs.removePropertyChangeListener(pcl);\n}"}
{"ids": "68174", "raw_code": "public void addOnTagClickListener(TagsClickListener listener){\n  if (clickListeners == null) {\n    clickListeners=new ArrayList<>();\n  }\n  clickListeners.add(listener);\n}"}
{"ids": "45198", "raw_code": "public void removeAllTrackingIcons(){\n  if (trackingIcons != null && trackingIcons.size() > 0) {\n    trackingIcons.clear();\n    repaint();\n  }\n}"}
{"ids": "65774", "raw_code": "private void readReference(){\n  ArrayList<String> v_value=new ArrayList<String>();\n  ArrayList<String> v_name=new ArrayList<String>();\n  ArrayList<String> v_description=new ArrayList<String>();\n  DocumentEngine.readReferenceList(v_value,v_name,v_description);\n  int size=v_value.size();\n  s_value=new String[size];\n  s_name=new String[size];\n  s_description=new String[size];\n  for (int i=0; i < size; i++) {\n    s_value[i]=(String)v_value.get(i);\n    s_name[i]=(String)v_name.get(i);\n    s_description[i]=(String)v_description.get(i);\n  }\n}"}
{"ids": "27863", "raw_code": "protected void assertRoundTrip(TPS expected) throws IOException, ClassNotFoundException {\n  final byte[] serialized;\n{\n    ByteArrayOutputStream baos=new ByteArrayOutputStream();\n    ObjectOutputStream oos=new ObjectOutputStream(baos);\n    expected.writeExternal(oos);\n    oos.flush();\n    serialized=baos.toByteArray();\n  }\n  final TPS actual;\n{\n    actual=new TPS();\n    ByteArrayInputStream bais=new ByteArrayInputStream(serialized);\n    ObjectInputStream ois=new ObjectInputStream(bais);\n    actual.readExternal(ois);\n  }\n  assertEquals(expected,actual);\n}"}
{"ids": "65482", "raw_code": "public static double calculateContrastRatio(double lum1,double lum2){\n  if ((lum1 < 0.0d) || (lum2 < 0.0d)) {\n    throw new IllegalArgumentException(\"Luminance values may not be negative.\");\n  }\n  return (Math.max(lum1,lum2) + 0.05d) / (Math.min(lum1,lum2) + 0.05d);\n}"}
{"ids": "13289", "raw_code": "protected void reset() throws XNIException {\n  int count=fComponents.size();\n  for (int i=0; i < count; i++) {\n    XMLComponent c=(XMLComponent)fComponents.get(i);\n    c.reset(this);\n  }\n}"}
{"ids": "43398", "raw_code": "public synchronized void unregister(String name){\n  StreamScope<?> streamScope=byNameMap.remove(name);\n  if (streamScope == null)   return;\n  List<String> names=byStreamScopeMap.get(streamScope);\n  names.remove(name);\n  if (names.isEmpty())   byStreamScopeMap.remove(streamScope);\n}"}
{"ids": "47449", "raw_code": "private String expandAffix(String pattern,StringBuffer buffer){\n  buffer.setLength(0);\n  for (int i=0; i < pattern.length(); ) {\n    char c=pattern.charAt(i++);\n    if (c == QUOTE) {\n      c=pattern.charAt(i++);\nswitch (c) {\ncase CURRENCY_SIGN:\n        if (i < pattern.length() && pattern.charAt(i) == CURRENCY_SIGN) {\n          ++i;\n          buffer.append(symbols.getInternationalCurrencySymbol());\n        }\n else {\n          buffer.append(symbols.getCurrencySymbol());\n        }\n      continue;\ncase PATTERN_PERCENT:\n    c=symbols.getPercent();\n  break;\ncase PATTERN_PER_MILLE:\nc=symbols.getPerMill();\nbreak;\ncase PATTERN_MINUS:\nc=symbols.getMinusSign();\nbreak;\n}\n}\nbuffer.append(c);\n}\nreturn buffer.toString();\n}"}
{"ids": "9523", "raw_code": "public static QueryFunctions extractFunctions(String[] filterQueries){\n  final QueryFunctions result=new QueryFunctions();\n  if (isEmpty(filterQueries)) {\n    return result;\n  }\n  String[] arguments=new String[0];\n  for (  String unmodifiedAnalysis : filterQueries) {\n    String function=extractFunction(unmodifiedAnalysis);\n    String[] functions;\n    if (function.contains(FUNCTION_ARGUMENT_SPLITTER)) {\n      functions=function.split(FUNCTION_ARGUMENT_SPLITTER);\n    }\n else {\n      functions=new String[]{function};\n    }\n    for (    String subFunction : functions) {\n      if (subFunction.contains(AGGREGATION_ARGUMENT_DELIMITER)) {\n        arguments=extractAggregationParameter(subFunction);\n        subFunction=subFunction.substring(0,subFunction.indexOf(AGGREGATION_ARGUMENT_DELIMITER));\n      }\n      FunctionType type=FunctionType.valueOf(subFunction.toUpperCase());\n      addFunction(result,type,arguments);\n    }\n  }\n  return result;\n}"}
{"ids": "16535", "raw_code": "protected final void fireVetoableChange(String propertyName,int oldValue,int newValue) throws PropertyVetoException {\n  VetoableChangeSupport aVetoSupport=this.vetoSupport;\n  if (aVetoSupport == null) {\n    return;\n  }\n  aVetoSupport.fireVetoableChange(propertyName,Integer.valueOf(oldValue),Integer.valueOf(newValue));\n}"}
{"ids": "38539", "raw_code": "protected boolean isValidClassname(String classname){\n  return (classname.indexOf(\"$\") == -1);\n}"}
{"ids": "69487", "raw_code": "public static int number(){\n  return _all.size();\n}"}
{"ids": "24760", "raw_code": "public String generateInvertedString(){\n  return String.format(\"#%06X\",0xFFFFFF & generateInverted());\n}"}
{"ids": "60409", "raw_code": "@NotNull public String extractPresentableUrl(@NotNull String path){\n  return path.replace('/',File.separatorChar);\n}"}
{"ids": "39991", "raw_code": "private void initProgram(){\n  glUseProgram(this.program);\n  viewProjMatrixUniform=glGetUniformLocation(this.program,\"viewProjMatrix\");\n  glUseProgram(0);\n}"}
{"ids": "13566", "raw_code": "private boolean isNegative(final String input){\n  requireNonNull(input);\n  for (  final String negativeString : negativeStrings) {\n    if (input.equalsIgnoreCase(negativeString)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "4730", "raw_code": "@Override protected void sendDispositionHeader(final OutputStream out) throws IOException {\n  LOG.trace(\"enter sendDispositionHeader(OutputStream out)\");\n  super.sendDispositionHeader(out);\n  final String filename=source.getFileName();\n  if (filename != null) {\n    out.write(FILE_NAME_BYTES);\n    out.write(QUOTE_BYTES);\n    out.write(EncodingUtil.getAsciiBytes(filename));\n    out.write(QUOTE_BYTES);\n  }\n}"}
{"ids": "69318", "raw_code": "private List<Map<String,Object>> prepareResultsforDisplay(Collection<ScoredResult> scoredResults){\n  ArrayList<Map<String,Object>> output=new ArrayList<Map<String,Object>>(scoredResults.size());\n  for (  ScoredResult result : scoredResults) {\n    Map<String,Object> resultMap=new HashMap<String,Object>();\n    if (result.track != null) {\n      prepareTrackForDisplay(result.track,resultMap);\n    }\n else {\n      prepareMarkerForDisplay(result.waypoint,resultMap);\n    }\n    output.add(resultMap);\n  }\n  return output;\n}"}
{"ids": "82659", "raw_code": "public long copy(final InputStream from,final OutputStream to) throws IOException {\n  long count=0;\n  byte[] tmp=mByteArrayPool.get(mTempBufSize);\n  try {\n    while (true) {\n      int read=from.read(tmp,0,mTempBufSize);\n      if (read == -1) {\n        return count;\n      }\n      to.write(tmp,0,read);\n      count+=read;\n    }\n  }\n  finally {\n    mByteArrayPool.release(tmp);\n  }\n}"}
{"ids": "81324", "raw_code": "private static Element infoAsElement(Document doc,LibraryInfo info){\n  Element libraryElement=doc.createElement(\"libraryInfo\");\n  libraryElement.setAttribute(\"version\",info.getVersion());\n  appendPathElements(doc,\"bootpath\",libraryElement,info.getBootpath());\n  appendPathElements(doc,\"extensionDirs\",libraryElement,info.getExtensionDirs());\n  appendPathElements(doc,\"endorsedDirs\",libraryElement,info.getEndorsedDirs());\n  return libraryElement;\n}"}
{"ids": "14712", "raw_code": "public void addChoiceValue(String value,String i18nKey) throws SMSException, SSOException {\n  Map choiceValues=as.getChoiceValuesMap();\n  choiceValues.put(value,i18nKey);\n  updateChoiceValues(choiceValues);\n}"}
{"ids": "41964", "raw_code": "private void notifyChange(int previous,int current){\n  if (mOnValueChangeListener != null) {\n    mOnValueChangeListener.onValueChange(this,previous,mValue);\n  }\n}"}
{"ids": "42222", "raw_code": "public void loadLibrary(String libName){\n  loadLibrary0(libName,RVMClass.getClassLoaderFromStackFrame(1),true);\n}"}
{"ids": "13836", "raw_code": "public void handleTblDataActionHrefRequest(RequestInvocationEvent event){\n  String idRepoName=hexToString((String)getDisplayFieldValue(TBL_DATA_ACTION_HREF));\n  String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);\n  try {\n    IDRepoModel model=(IDRepoModel)getModel();\n    setPageSessionAttribute(IDRepoOpViewBeanBase.IDREPO_NAME,idRepoName);\n    setPageSessionAttribute(IDRepoOpViewBeanBase.IDREPO_TYPE,model.getIDRepoType(curRealm,idRepoName));\n    IDRepoEditViewBean vb=(IDRepoEditViewBean)getViewBean(IDRepoEditViewBean.class);\n    unlockPageTrail();\n    passPgSessionMap(vb);\n    vb.forwardTo(getRequestContext());\n  }\n catch (  AMConsoleException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());\n    forwardTo();\n  }\n}"}
{"ids": "10946", "raw_code": "public boolean initialize(DDFModule poModuleIn,String pszTagIn,byte[] pachFieldArea){\n  int iFDOffset=poModuleIn._fieldControlLength;\n  poModule=poModuleIn;\n  pszTag=pszTagIn;\n  _data_struct_code=DataStructCode.get((char)pachFieldArea[0]);\n  _data_type_code=DataTypeCode.get((char)pachFieldArea[1]);\n  if (Debug.debugging(\"iso8211\")) {\n    Debug.output(\"DDFFieldDefinition.initialize(\" + pszTagIn + \"):\\n\\t\\t data_struct_code = \"+ _data_struct_code+ \"\\n\\t\\t data_type_code = \"+ _data_type_code+ \"\\n\\t\\t iFDOffset = \"+ iFDOffset);\n  }\n  byte[] tempData=new byte[pachFieldArea.length - iFDOffset];\n  System.arraycopy(pachFieldArea,iFDOffset,tempData,0,pachFieldArea.length - iFDOffset);\n  MutableInt nCharsConsumed=new MutableInt();\n  _fieldName=DDFUtils.fetchVariable(tempData,tempData.length,DDF_UNIT_TERMINATOR,DDF_FIELD_TERMINATOR,nCharsConsumed);\n  if (Debug.debugging(\"iso8211\")) {\n    Debug.output(\"DDFFieldDefinition.initialize(\" + pszTagIn + \"): created field name \"+ _fieldName);\n  }\n  iFDOffset+=nCharsConsumed.value;\n  tempData=new byte[pachFieldArea.length - iFDOffset];\n  System.arraycopy(pachFieldArea,iFDOffset,tempData,0,pachFieldArea.length - iFDOffset);\n  _arrayDescr=DDFUtils.fetchVariable(tempData,tempData.length,DDF_UNIT_TERMINATOR,DDF_FIELD_TERMINATOR,nCharsConsumed);\n  iFDOffset+=nCharsConsumed.value;\n  tempData=new byte[pachFieldArea.length - iFDOffset];\n  System.arraycopy(pachFieldArea,iFDOffset,tempData,0,pachFieldArea.length - iFDOffset);\n  _formatControls=DDFUtils.fetchVariable(tempData,tempData.length,DDF_UNIT_TERMINATOR,DDF_FIELD_TERMINATOR,nCharsConsumed);\n  if (_data_struct_code != DataStructCode.ELEMENTARY) {\n    if (!buildSubfieldDefns(_arrayDescr)) {\n      return false;\n    }\n    if (!applyFormats(_formatControls)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "69037", "raw_code": "@Override public void loadHeightMap(Raster raster) throws IOException {\n  int stripHeight=Math.min(STRIP_ROWS,rasterLength);\n  int stripWidth=rasterWidth * samplesPerPixel;\n  int stripSize=stripWidth * stripHeight * bytesPerSample;\n  int numStrips=(int)Math.ceil((double)rasterLength / stripHeight);\n  if (stripSize > Integer.MAX_VALUE) {\n    throw new IllegalArgumentException(\"Cannot load PDS file with strip size > \" + Integer.MAX_VALUE + \".\");\n  }\n  if ((minimum == null) || (maximum == null)) {\n    computeMinMaxFromStrip(dataType,numStrips,stripSize,stripWidth,stripHeight);\n  }\n  loadFromStrip(dataType,numStrips,stripSize,stripWidth,stripHeight,raster,false);\n}"}
{"ids": "55197", "raw_code": "public void addFooter(@NonNull View view){\n  if (view == null) {\n    throw new IllegalArgumentException(\"You can't have a null footer!\");\n  }\n  mFooters.add(view);\n}"}
{"ids": "4810", "raw_code": "public static Pair<int[],double[]> convert(Set<Feature> features,Lexicon lexicon,boolean trainingMode){\n  TIntDoubleHashMap fMap=new TIntDoubleHashMap(features.size());\n  for (  Feature feature : features) {\n    final int featureId=FeatureUtilities.getFeatureId(lexicon,trainingMode,feature);\n    if (featureId < 0)     continue;\n    double value=feature.getValue() + fMap.get(featureId);\n    fMap.put(featureId,value);\n  }\n  int[] idsOriginal=fMap.keys();\n  int[] ids=new int[idsOriginal.length];\n  System.arraycopy(idsOriginal,0,ids,0,ids.length);\n  Arrays.sort(ids);\n  double[] vals=new double[fMap.size()];\n  int count=0;\n  for (  int key : ids) {\n    vals[count++]=fMap.get(key);\n  }\n  return new Pair<>(ids,vals);\n}"}
{"ids": "12933", "raw_code": "public String toFeatureString(FeatureVector fv){\n  if (numByteFeatures != fv.getNumberOfByteFeatures() || numShortFeatures != fv.getNumberOfShortFeatures() || numContinuousFeatures != fv.getNumberOfContinuousFeatures())   throw new IllegalArgumentException(\"Feature vector '\" + fv + \"' is inconsistent with feature definition\");\n  StringBuilder buf=new StringBuilder();\n  for (int i=0; i < numByteFeatures; i++) {\n    if (buf.length() > 0)     buf.append(\" \");\n    buf.append(getFeatureValueAsString(i,fv.getByteFeature(i)));\n  }\n  for (int i=numByteFeatures; i < numByteFeatures + numShortFeatures; i++) {\n    if (buf.length() > 0)     buf.append(\" \");\n    buf.append(getFeatureValueAsString(i,fv.getShortFeature(i)));\n  }\n  for (int i=numByteFeatures + numShortFeatures; i < numByteFeatures + numShortFeatures + numContinuousFeatures; i++) {\n    if (buf.length() > 0)     buf.append(\" \");\n    buf.append(fv.getContinuousFeature(i));\n  }\n  return buf.toString();\n}"}
{"ids": "76241", "raw_code": "protected void sortPopulation(){\n  if (Properties.SHUFFLE_GOALS)   Randomness.shuffle(population);\n  if (isMaximizationFunction()) {\n    Collections.sort(population,Collections.reverseOrder());\n  }\n else {\n    Collections.sort(population);\n  }\n}"}
{"ids": "15759", "raw_code": "public void clean(){\n  ChronoFullRevision cfr=firstCFR;\n  totalSize=size;\n  while (cfr != null) {\n    totalSize+=cfr.size();\n    cfr=cfr.getNext();\n  }\n  if (totalSize < MAX_STORAGE_SIZE) {\n    return;\n  }\n  cfr=firstCFR;\n  while (cfr != null) {\n    totalSize+=cfr.clean(revisionIndex,0);\n    cfr=cfr.getNext();\n  }\n  ChronoStorageBlock block;\n  while (last != null && totalSize >= MAX_STORAGE_SIZE) {\n    block=last.getIndexPrev();\n    if (storage.remove(last.getRevisionIndex()) == null) {\n      throw new RuntimeException(\"VALUE WAS NOT REMOVED FROM STORAGE\");\n    }\n    totalSize-=last.length();\n    size+=last.length();\n    if (block != null) {\n      block.setIndexNext(null);\n    }\n    last.setIndexPrev(null);\n    cfr=last.getChronoFullRevision();\n    totalSize+=cfr.size() - cfr.clean(revisionIndex,last.getRevisionIndex());\n    if (last == first) {\n      first=null;\n    }\n    last=block;\n  }\n  System.gc();\n}"}
{"ids": "8204", "raw_code": "public static Number plus(Character left,Character right){\n  return plus(Integer.valueOf(left),right);\n}"}
{"ids": "14100", "raw_code": "boolean containRelayState(String relayState){\n  return relayStateMap.containsKey(relayState);\n}"}
{"ids": "76244", "raw_code": "public void localSearchStarted(){\n  startTime=System.currentTimeMillis();\n  endTime=startTime + Properties.LOCAL_SEARCH_BUDGET * 1000;\n  tests=0;\n  suites=0;\n  fitnessEvaluations=0;\n  executedStart=MaxStatementsStoppingCondition.getNumExecutedStatements();\n}"}
{"ids": "70817", "raw_code": "public synchronized int write(InputStream in) throws IOException {\n  int readCount=0;\n  int inBufferPos=count - filledBufferSum;\n  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);\n  while (n != -1) {\n    readCount+=n;\n    inBufferPos+=n;\n    count+=n;\n    if (inBufferPos == currentBuffer.length) {\n      needNewBuffer(currentBuffer.length);\n      inBufferPos=0;\n    }\n    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);\n  }\n  return readCount;\n}"}
{"ids": "34790", "raw_code": "public static double normalizeRadians(double r){\n  if (r < 0 && r >= -TWO_PI)   return r + TWO_PI;\n  if (r >= TWO_PI && r < FOUR_PI)   return r - TWO_PI;\n  if (r >= 0 && r < TWO_PI)   return r;\n  r-=TWO_PI * Math.floor(r * TWO_PI_INVERSE);\n  if (r < 0.)   r+=TWO_PI;\n  return r;\n}"}
{"ids": "52082", "raw_code": "public static TetradMatrix convertCovToCorr(TetradMatrix m){\n  for (int i=0; i < m.rows(); i++) {\n    for (int j=0; j < m.columns(); j++) {\n      if (Double.isNaN(m.get(i,j))) {\n        throw new IllegalArgumentException(\"Please remove or impute missing values.\");\n      }\n    }\n  }\n  return correlation(m);\n}"}
{"ids": "30416", "raw_code": "private byte[] ungzip(byte[] body){\n  ByteArrayInputStream bytein=new ByteArrayInputStream(body);\n  try (GZIPInputStream gzin=new GZIPInputStream(bytein);ByteArrayOutputStream byteout=new ByteArrayOutputStream()){\n    int res=0;\n    byte buf[]=new byte[1024];\n    while (res >= 0) {\n      res=gzin.read(buf,0,buf.length);\n      if (res > 0) {\n        byteout.write(buf,0,res);\n      }\n    }\n    byte uncompressed[]=byteout.toByteArray();\n    return uncompressed;\n  }\n catch (  IOException e) {\n  }\n  return null;\n}"}
{"ids": "65756", "raw_code": "private boolean selectID(int nodeID,boolean show){\n  if (m_root == null)   return false;\n  log.config(\"NodeID=\" + nodeID + \", Show=\"+ show+ \", root=\"+ m_root);\n  MTreeNode node=m_root.findNode(nodeID);\n  if (node != null) {\n    TreePath treePath=new TreePath(node.getPath());\n    log.config(\"Node=\" + node + \", Path=\"+ treePath.toString());\n    tree.setSelectionPath(treePath);\n    if (show) {\n      tree.makeVisible(treePath);\n      tree.scrollPathToVisible(treePath);\n    }\n    return true;\n  }\n  log.info(\"Node not found; ID=\" + nodeID);\n  return false;\n}"}
{"ids": "69042", "raw_code": "@Override public void loadRGBA(Raster raster) throws IOException {\n  if (bandStorageType == null) {\n    throw new IllegalArgumentException(\"Unable to find BAND_STORAGE_TYPE.\");\n  }\n  if (samplesPerPixel < 3) {\n    throw new IllegalArgumentException(\"Cannot load RGBA with less than 3 color components.\");\n  }\n  if (iStream != null) {\n    iStream.close();\n  }\n  iStream=new FileImageInputStream(new File(dataFilePath));\n  iStream.seek(imageStart);\n  int stripHeight=Math.min(STRIP_ROWS,rasterLength);\n  int stripWidth=rasterWidth * samplesPerPixel;\n  int numStrips=(int)Math.ceil((double)rasterLength / stripHeight);\n  if (bandStorageType.equals(\"SAMPLE_INTERLEAVED\")) {\n    int stripSize=stripWidth * stripHeight * bytesPerSample;\n    if (stripSize > Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"Cannot load PDS file with strip size > \" + Integer.MAX_VALUE + \".\");\n    }\n    byte[] bbArray=new byte[stripSize];\n    ByteBuffer bbuf=ByteBuffer.allocate(4 * rasterWidth * stripHeight);\n    iStream.seek(imageStart);\n    int r=0;\n    for (int i=0; i < numStrips; ++i) {\n      int h=Math.min(rasterLength - stripHeight * i,stripHeight);\n      int len=h * stripWidth;\n      len=iStream.read(bbArray,0,len);\n      for (int j=0; j < h; ++j) {\n        for (int k=0; k < stripWidth; k+=samplesPerPixel) {\n          for (int l=0; l < samplesPerPixel; ++l) {\n            bbuf.put(bbArray[k + l]);\n          }\n          if (samplesPerPixel == 3) {\n            bbuf.put((byte)255);\n          }\n        }\n        r++;\n      }\n      bbuf.rewind();\n      raster.set(r,h,bbArray);\n    }\n  }\n else   if (bandStorageType.equals(\"BAND_SEQUENTIAL\")) {\n    int stripSize=rasterWidth * stripHeight;\n    if (stripSize > Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"Cannot load PDS file with strip size > \" + Integer.MAX_VALUE + \".\");\n    }\n    raster.set(255);\n    byte[] bArray=new byte[4 * rasterWidth * stripHeight];\n    byte[] bbArray=new byte[stripSize];\n    iStream.seek(imageStart);\n    for (int k=0; k < samplesPerPixel; ++k) {\n      int r=0;\n      for (int i=0; i < numStrips; ++i) {\n        int h=Math.min(rasterLength - stripHeight * i,stripHeight);\n        int len=h * rasterWidth;\n        len=iStream.read(bbArray,0,len);\n        for (int j=0; j < h; ++j) {\n          raster.get(r,bArray);\n          for (int c=0; c < rasterWidth; ++c) {\n            bArray[c * 4 + k]=bbArray[c];\n          }\n          raster.set(r,1,bArray);\n          r++;\n        }\n      }\n    }\n  }\n  if (minimum == null) {\n    minimum=new double[]{0,0,0,1};\n  }\n  if (maximum == null) {\n    maximum=new double[]{255,255,255,255};\n  }\n}"}
{"ids": "15097", "raw_code": "protected final boolean isListState(){\n  return stateTextTypes.charAt(state) == 'L';\n}"}
{"ids": "41654", "raw_code": "public void loadGlyphs(String chars) throws NoGlyphException {\n  char[] chs=chars.toCharArray();\n  for (int i=0; i < chs.length; i++) {\n    getGlyph(chs[i],null);\n  }\n}"}
{"ids": "80597", "raw_code": "private void initQuestAndAddToWorld(final IQuest quest){\n  logger.info(\"Loading Quest: \" + quest.getName());\n  quest.addToWorld();\n  quests.add(quest);\n}"}
{"ids": "70298", "raw_code": "public static MoveCommand[] values(int f,GameOptions opts,boolean forwardIni){\n  boolean manualShutdown=false, selfDestruct=false;\n  if (opts != null) {\n    manualShutdown=opts.booleanOption(\"manual_shutdown\");\n    selfDestruct=opts.booleanOption(\"tacops_self_destruct\");\n  }\n  ArrayList<MoveCommand> flaggedCmds=new ArrayList<MoveCommand>();\n  for (  MoveCommand cmd : MoveCommand.values()) {\n    if ((cmd == MOVE_SHUTDOWN || cmd == MOVE_STARTUP) && !manualShutdown) {\n      continue;\n    }\n    if (cmd == MOVE_SELF_DESTRUCT && !selfDestruct) {\n      continue;\n    }\n    if (cmd == MOVE_FORWARD_INI && !forwardIni) {\n      continue;\n    }\n    if ((cmd.flag & f) == f) {\n      flaggedCmds.add(cmd);\n    }\n  }\n  return flaggedCmds.toArray(new MoveCommand[0]);\n}"}
{"ids": "48981", "raw_code": "public void shedCache(){\n  Connection[] conn;\nsynchronized (freeList) {\n    conn=freeList.toArray(new Connection[freeList.size()]);\n    freeList.clear();\n  }\n  for (int i=conn.length; --i >= 0; ) {\n    Connection c=conn[i];\n    conn[i]=null;\n    try {\n      c.close();\n    }\n catch (    java.io.IOException e) {\n    }\n  }\n}"}
{"ids": "77996", "raw_code": "public static byte[] hash(InputStream in) throws IOException {\n  if (HASH_DIGEST == null) {\n    throw new EvernoteUtilException(EDAM_HASH_ALGORITHM + \" not supported\",new NoSuchAlgorithmException(EDAM_HASH_ALGORITHM));\n  }\n  byte[] buf=new byte[1024];\n  int n;\n  while ((n=in.read(buf)) != -1) {\n    HASH_DIGEST.update(buf,0,n);\n  }\n  return HASH_DIGEST.digest();\n}"}
{"ids": "1499", "raw_code": "public byte[] readRawBytes(final int size) throws IOException {\n  if (size < 0) {\n    throw InvalidProtocolBufferNanoException.negativeSize();\n  }\n  if (bufferPos + size > currentLimit) {\n    skipRawBytes(currentLimit - bufferPos);\n    throw InvalidProtocolBufferNanoException.truncatedMessage();\n  }\n  if (size <= bufferSize - bufferPos) {\n    final byte[] bytes=new byte[size];\n    System.arraycopy(buffer,bufferPos,bytes,0,size);\n    bufferPos+=size;\n    return bytes;\n  }\n else {\n    throw InvalidProtocolBufferNanoException.truncatedMessage();\n  }\n}"}
{"ids": "26101", "raw_code": "@SuppressWarnings(\"unchecked\") public static <T extends FeatureStructure>List<T> toList(FSArray array){\n  if (array == null) {\n    return new ArrayList<T>();\n  }\n else {\n    return (List<T>)Arrays.asList(array.toArray());\n  }\n}"}
{"ids": "73665", "raw_code": "private void resetNotes2(){\n  if (errorInStatus2) {\n    if (editMode) {\n      statusText1.setText(editStatus2);\n    }\n else {\n      statusText2.setText(stdStatus2);\n    }\n    errorInStatus2=false;\n  }\n}"}
{"ids": "67489", "raw_code": "protected static int toDigit(final char ch,final int index) throws IllegalArgumentException {\n  final int digit=Character.digit(ch,16);\n  if (digit == -1) {\n    throw new IllegalArgumentException(\"Illegal hexadecimal character \" + ch + \" at index \"+ index);\n  }\n  return digit;\n}"}
{"ids": "71888", "raw_code": "public static ServerSideSortRequestControl newControl(final boolean isCritical,final Collection<SortKey> keys){\n  Reject.ifNull(keys);\n  Reject.ifFalse(!keys.isEmpty(),\"keys must not be empty\");\n  return new ServerSideSortRequestControl(isCritical,Collections.unmodifiableList(new ArrayList<SortKey>(keys)));\n}"}
{"ids": "86182", "raw_code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) static <E extends Comparable<E>>AutoSortedCollection<E> createAutoSortedCollection(Supplier<List<SortedListElement<E>>> listSup,Collection<? extends E> values){\n  List list=listSup.get();\n  if (!list.isEmpty()) {\n    throw new IllegalStateException(\"List must be empty.\");\n  }\n  AutoSortedCollection<E> sortedCollection=new AutoListSortedCollection<>(list,null);\n  sortedCollection.addAll(values);\n  return sortedCollection;\n}"}
{"ids": "25078", "raw_code": "private void intStream(){\n  int[] ints=new int[]{10,20,30,40,50};\n  IntStream intStream=IntStream.of(ints);\n  intStream.forEach(null);\n  IntStream intStream2=IntStream.of(10,20,30,40,50);\n  intStream2.forEach(null);\n}"}
{"ids": "66566", "raw_code": "@SuppressWarnings(\"static-access\") public boolean isCustomized(){\n  if (m_customizationLevel == null) {\n    getElementID();\n    m_customizationLevel=new Integer(s_parameters.CUSTOMNONE);\n    if (m_parent.isCustomPrefix(m_name)) {\n      m_customizationLevel=new Integer(s_parameters.CUSTOMPREFIXED);\n    }\n else {\n      if (m_parent.isObjectExists(\"AD_COLUMN\",m_parent.getTables()) && m_parent.isObjectExists(\"AD_TABLE\",m_parent.getTables())) {\n        String sql=s_dbEngine.sqlAD_getTableColumnEntityType(m_parent.getVendor(),m_parent.getCatalog(),m_parent.getSchema(),m_table,m_name);\n        Statement stmt=m_parent.setStatement();\n        ResultSet rs=m_parent.executeQuery(stmt,sql);\n        if (m_parent.getResultSetNext(rs)) {\n          String s=m_parent.getResultSetString(rs,\"ENTITY_TYPE\");\n          if (m_parent.isCustomEntityType(s))           m_customizationLevel=new Integer(s_parameters.CUSTOMMARKED);\n        }\n        m_parent.releaseResultSet(rs);\n        m_parent.releaseStatement(stmt);\n      }\n    }\n  }\n  if (m_customizationLevel.intValue() > s_parameters.CUSTOMNONE)   return true;\n else   return false;\n}"}
{"ids": "6698", "raw_code": "private void reloadQueue(){\n  String q=null;\n  int id=mCardId;\n  if (mPreferences.contains(\"cardid\")) {\n    id=mPreferences.getInt(\"cardid\",~mCardId);\n  }\n  if (id == mCardId) {\n    q=mPreferences.getString(\"queue\",\"\");\n  }\n  int qlen=q != null ? q.length() : 0;\n  if (qlen > 1) {\n    int plen=0;\n    int n=0;\n    int shift=0;\n    for (int i=0; i < qlen; i++) {\n      final char c=q.charAt(i);\n      if (c == ';') {\n        ensurePlayListCapacity(plen + 1);\n        mPlayList[plen]=n;\n        plen++;\n        n=0;\n        shift=0;\n      }\n else {\n        if (c >= '0' && c <= '9') {\n          n+=c - '0' << shift;\n        }\n else         if (c >= 'a' && c <= 'f') {\n          n+=10 + c - 'a' << shift;\n        }\n else {\n          plen=0;\n          break;\n        }\n        shift+=4;\n      }\n    }\n    mPlayListLen=plen;\n    final int pos=mPreferences.getInt(\"curpos\",0);\n    if (pos < 0 || pos >= mPlayListLen) {\n      mPlayListLen=0;\n      return;\n    }\n    mPlayPos=pos;\n    updateCursor(mPlayList[mPlayPos]);\n    if (mCursor == null) {\n      SystemClock.sleep(3000);\n      updateCursor(mPlayList[mPlayPos]);\n    }\nsynchronized (this) {\n      closeCursor();\n      mOpenFailedCounter=20;\n      openCurrentAndNext();\n    }\n    if (mPlayer == null || !mPlayer.isInitialized()) {\n      mPlayListLen=0;\n      return;\n    }\n    final long seekpos=mPreferences.getLong(\"seekpos\",0);\n    seek(seekpos >= 0 && seekpos < duration() ? seekpos : 0);\n    if (D) {\n      LOG.info(\"restored queue, currently at position \" + position() + \"/\"+ duration()+ \" (requested \"+ seekpos+ \")\");\n    }\n    int repmode=mPreferences.getInt(\"repeatmode\",REPEAT_NONE);\n    if (repmode != REPEAT_ALL && repmode != REPEAT_CURRENT) {\n      repmode=REPEAT_NONE;\n    }\n    mRepeatMode=repmode;\n    int shufmode=mPreferences.getInt(\"shufflemode\",SHUFFLE_NONE);\n    if (shufmode != SHUFFLE_AUTO && shufmode != SHUFFLE_NORMAL) {\n      shufmode=SHUFFLE_NONE;\n    }\n    if (shufmode != SHUFFLE_NONE) {\n      q=mPreferences.getString(\"history\",\"\");\n      qlen=q != null ? q.length() : 0;\n      if (qlen > 1) {\n        n=0;\n        shift=0;\n        mHistory.clear();\n        for (int i=0; i < qlen; i++) {\n          final char c=q.charAt(i);\n          if (c == ';') {\n            if (n >= mPlayListLen) {\n              mHistory.clear();\n              break;\n            }\n            mHistory.add(n);\n            n=0;\n            shift=0;\n          }\n else {\n            if (c >= '0' && c <= '9') {\n              n+=c - '0' << shift;\n            }\n else             if (c >= 'a' && c <= 'f') {\n              n+=10 + c - 'a' << shift;\n            }\n else {\n              mHistory.clear();\n              break;\n            }\n            shift+=4;\n          }\n        }\n      }\n    }\n    if (shufmode == SHUFFLE_AUTO) {\n      if (!makeAutoShuffleList()) {\n        shufmode=SHUFFLE_NONE;\n      }\n    }\n    mShuffleMode=shufmode;\n  }\n}"}
{"ids": "2924", "raw_code": "public final void scheduledForFlush(){\n  scheduledForFlush.set(true);\n}"}
{"ids": "32973", "raw_code": "public ImageInfo inspectImage(String image) throws IOException {\n  return inspectImage(InspectImageParams.create(image));\n}"}
{"ids": "30364", "raw_code": "@Override public double prevCumulativeQuantity(final Long woActivityId,Long mbHeaderId){\n  if (mbHeaderId == null)   mbHeaderId=-1l;\n  final Object[] params=new Object[]{mbHeaderId,mbHeaderId,WorksConstants.CANCELLED_STATUS,woActivityId};\n  final Double pQuant=(Double)genericService.findByNamedQuery(\"prevCumulativeQuantity\",params);\n  if (pQuant == null)   return 0.0d;\n else   return pQuant.doubleValue();\n}"}
{"ids": "48972", "raw_code": "void receive(int length,DataInputStream in) throws IOException {\nsynchronized (lock) {\n    if ((pos > 0) && ((buffer.length - present) < length)) {\n      System.arraycopy(buffer,pos,buffer,0,present - pos);\n      present-=pos;\n      pos=0;\n    }\n    if ((buffer.length - present) < length)     throw new IOException(\"Receive buffer overflow\");\n    in.readFully(buffer,present,length);\n    present+=length;\n    requested-=length;\n    lock.notifyAll();\n  }\n}"}
{"ids": "7088", "raw_code": "public JDABuilder removeListener(Object listener){\n  listeners.remove(listener);\n  return this;\n}"}
{"ids": "75523", "raw_code": "private static List<String> readFile(File file) throws IOException {\n  FileReader fr=new FileReader(file);\n  BufferedReader br=new BufferedReader(fr);\n  List<String> lines=new ArrayList<String>();\n  String line;\n  while ((line=br.readLine()) != null)   lines.add(line);\n  fr.close();\n  br.close();\n  return lines;\n}"}
{"ids": "84659", "raw_code": "FlexibleNode readExternalNode(HashMap<String,Taxon> translationList) throws ImportException, IOException {\n  FlexibleNode node=new FlexibleNode();\n  String label=readToken(\":(),;\");\n  Taxon taxon;\n  if (translationList.size() > 0) {\n    taxon=translationList.get(label);\n    if (taxon == null) {\n      throw new UnknownTaxonException(\"Taxon in tree, '\" + label + \"' is unknown\");\n    }\n  }\n else {\n    taxon=new Taxon(label);\n  }\n  if (getLastMetaComment() != null) {\n    parseMigrationString(getLastMetaComment(),node);\n    clearLastMetaComment();\n  }\n  node.setTaxon(taxon);\n  int pop=Integer.parseInt(label.split(\"\\\\.\")[0]);\n  node.setAttribute(POP,(pop - 1));\n  return node;\n}"}
{"ids": "49045", "raw_code": "static void plugTogetherPair(InputStream in,OutputStream out,InputStream in1,OutputStream out1){\n  Thread inThread=null;\n  Thread outThread=null;\n  int nExecs=getNumExec();\n  inThread=AccessController.doPrivileged(new NewThreadAction(new PipeWriter(in,out,\"out\",nExecs),\"out\",true));\n  outThread=AccessController.doPrivileged(new NewThreadAction(new PipeWriter(in1,out1,\"err\",nExecs),\"err\",true));\n  inThread.start();\n  outThread.start();\n}"}
{"ids": "51952", "raw_code": "@NonNull public static StorableFence and(@NonNull StorableFence... fences){\n  return StorableFence.and(Arrays.asList(fences));\n}"}
{"ids": "85328", "raw_code": "public MXFUID(byte[] uid){\n  this.uid=Arrays.copyOf(uid,uid.length);\n}"}
{"ids": "51810", "raw_code": "private int shrinkFlexItems(FlexLine flexLine,@FlexDirection int flexDirection,int maxMainSize,int paddingAlongMainAxis,int startIndex){\n  int childIndex=startIndex;\n  int sizeBeforeShrink=flexLine.mMainSize;\n  if (flexLine.mTotalFlexShrink <= 0 || maxMainSize > flexLine.mMainSize) {\n    childIndex+=flexLine.mItemCount;\n    return childIndex;\n  }\n  boolean needsReshrink=false;\n  float unitShrink=(flexLine.mMainSize - maxMainSize) / flexLine.mTotalFlexShrink;\n  float accumulatedRoundError=0;\n  flexLine.mMainSize=paddingAlongMainAxis + flexLine.mDividerLengthInMainSize;\n  for (int i=0; i < flexLine.mItemCount; i++) {\n    View child=getReorderedChildAt(childIndex);\n    if (child == null) {\n      continue;\n    }\n else     if (child.getVisibility() == View.GONE) {\n      childIndex++;\n      continue;\n    }\n    LayoutParams lp=(LayoutParams)child.getLayoutParams();\n    if (isMainAxisDirectionHorizontal(flexDirection)) {\n      if (!mChildrenFrozen[childIndex]) {\n        float rawCalculatedWidth=child.getMeasuredWidth() - unitShrink * lp.flexShrink;\n        if (i == flexLine.mItemCount - 1) {\n          rawCalculatedWidth+=accumulatedRoundError;\n          accumulatedRoundError=0;\n        }\n        int newWidth=Math.round(rawCalculatedWidth);\n        if (newWidth < lp.minWidth) {\n          needsReshrink=true;\n          newWidth=lp.minWidth;\n          mChildrenFrozen[childIndex]=true;\n          flexLine.mTotalFlexShrink-=lp.flexShrink;\n        }\n else {\n          accumulatedRoundError+=(rawCalculatedWidth - newWidth);\n          if (accumulatedRoundError > 1.0) {\n            newWidth+=1;\n            accumulatedRoundError-=1;\n          }\n else           if (accumulatedRoundError < -1.0) {\n            newWidth-=1;\n            accumulatedRoundError+=1;\n          }\n        }\n        child.measure(MeasureSpec.makeMeasureSpec(newWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(child.getMeasuredHeight(),MeasureSpec.EXACTLY));\n      }\n      flexLine.mMainSize+=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;\n    }\n else {\n      if (!mChildrenFrozen[childIndex]) {\n        float rawCalculatedHeight=child.getMeasuredHeight() - unitShrink * lp.flexShrink;\n        if (i == flexLine.mItemCount - 1) {\n          rawCalculatedHeight+=accumulatedRoundError;\n          accumulatedRoundError=0;\n        }\n        int newHeight=Math.round(rawCalculatedHeight);\n        if (newHeight < lp.minHeight) {\n          needsReshrink=true;\n          newHeight=lp.minHeight;\n          mChildrenFrozen[childIndex]=true;\n          flexLine.mTotalFlexShrink-=lp.flexShrink;\n        }\n else {\n          accumulatedRoundError+=(rawCalculatedHeight - newHeight);\n          if (accumulatedRoundError > 1.0) {\n            newHeight+=1;\n            accumulatedRoundError-=1;\n          }\n else           if (accumulatedRoundError < -1.0) {\n            newHeight-=1;\n            accumulatedRoundError+=1;\n          }\n        }\n        child.measure(MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));\n      }\n      flexLine.mMainSize+=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;\n    }\n    childIndex++;\n  }\n  if (needsReshrink && sizeBeforeShrink != flexLine.mMainSize) {\n    shrinkFlexItems(flexLine,flexDirection,maxMainSize,paddingAlongMainAxis,startIndex);\n  }\n  return childIndex;\n}"}
{"ids": "52041", "raw_code": "public static DataModelList serializableInstance(){\n  return new DataModelList();\n}"}
{"ids": "30372", "raw_code": "@Override public MBHeader findLastMBPageNoForLineItem(final WorkOrderActivity workOrderActivity,final Long mbHeaderId){\n  logger.info(\"-------------------------Inside findLastMBPageNoForLineItem--------------\");\n  String query=\"select distinct mbh from MBHeader mbh join mbh.mbDetails as mbDetail \";\n  Object[] params;\n  final List<Object> paramList=new ArrayList<Object>();\n  query=query + \" where mbDetail.workOrderActivity.id = ? \" + \" and mbh.id != ? and mbh.egwStatus.code=? \"+ \" and mbh.modifiedDate < (select modifiedDate from MBHeader where id = ? )\"+ \" order by mbh.modifiedDate desc\";\n  paramList.add(workOrderActivity.getId());\n  paramList.add(mbHeaderId);\n  paramList.add(WorksConstants.APPROVED);\n  paramList.add(mbHeaderId);\n  params=new Object[paramList.size()];\n  params=paramList.toArray(params);\n  final List<MBHeader> mbHeaderList=genericService.findAllBy(query,params);\n  MBHeader result=null;\n  if (mbHeaderList != null && !mbHeaderList.isEmpty())   result=mbHeaderList.get(0);\n  return result;\n}"}
{"ids": "27504", "raw_code": "synchronized private void outputBufferedChunk(){\n  if (smallChunks == null || chunkSize == 0) {\n    return;\n  }\n  if (smallChunks.size() == 1) {\n    outputChunk(smallChunks.get(0));\n    chunkSize=0;\n    smallChunks=null;\n    return;\n  }\n  final IBindingSet[] chunk=new IBindingSet[chunkSize];\n  int destPos=0;\n  for (  IBindingSet[] e : smallChunks) {\n    System.arraycopy(e,0,chunk,destPos,e.length);\n    destPos+=e.length;\n  }\n  outputChunk(chunk);\n  chunkSize=0;\n  smallChunks=null;\n}"}
{"ids": "66000", "raw_code": "private void waitLoadCompete(){\n  if (m_loadComplete)   return;\n  m_loader.setPriority(Thread.NORM_PRIORITY);\n  log.config(\"\");\n  while (m_loader.isAlive()) {\n    try {\n      Thread.sleep(100);\n    }\n catch (    Exception e) {\n      log.log(Level.SEVERE,\"\",e);\n    }\n  }\n  log.config(\"fini\");\n}"}
{"ids": "46972", "raw_code": "@SuppressWarnings(\"fallthrough\") private void dtdatt(Pair elm) throws Exception {\n  char attqn[]=null;\n  Pair att=null;\n  char ch;\n  for (short st=0; st >= 0; ) {\n    ch=getch();\nswitch (st) {\ncase 0:\nswitch (chtyp(ch)) {\ncase 'a':\ncase 'A':\ncase '_':\ncase 'X':\ncase ':':\n        bkch();\n      attqn=qname(mIsNSAware);\n    att=find(elm.list,attqn);\n  if (att == null) {\n    att=pair(elm.list);\n    att.chars=attqn;\n    elm.list=att;\n  }\n else {\n    att=pair(null);\n    att.chars=attqn;\n    att.id='c';\n  }\nwsskip();\nst=1;\nbreak;\ncase '%':\npent(' ');\nbreak;\ncase ' ':\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\nbreak;\ncase 1:\nswitch (chtyp(ch)) {\ncase '(':\natt.id='u';\nst=2;\nbreak;\ncase '%':\npent(' ');\nbreak;\ncase ' ':\nbreak;\ndefault :\nbkch();\nbntok();\natt.id=bkeyword();\nswitch (att.id) {\ncase 'o':\nif (wsskip() != '(') {\npanic(FAULT);\n}\nch=getch();\nst=2;\nbreak;\ncase 'i':\ncase 'r':\ncase 'R':\ncase 'n':\ncase 'N':\ncase 't':\ncase 'T':\ncase 'c':\nwsskip();\nst=4;\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\nbreak;\n}\nbreak;\ncase 2:\nswitch (chtyp(ch)) {\ncase 'a':\ncase 'A':\ncase 'd':\ncase '.':\ncase ':':\ncase '-':\ncase '_':\ncase 'X':\nbkch();\nswitch (att.id) {\ncase 'u':\nbntok();\nbreak;\ncase 'o':\nmBuffIdx=-1;\nbname(false);\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\nwsskip();\nst=3;\nbreak;\ncase '%':\npent(' ');\nbreak;\ncase ' ':\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\nbreak;\ncase 3:\nswitch (ch) {\ncase ')':\nwsskip();\nst=4;\nbreak;\ncase '|':\nwsskip();\nswitch (att.id) {\ncase 'u':\nbntok();\nbreak;\ncase 'o':\nmBuffIdx=-1;\nbname(false);\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\nwsskip();\nbreak;\ncase '%':\npent(' ');\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\nbreak;\ncase 4:\nswitch (ch) {\ncase '#':\nbntok();\nswitch (bkeyword()) {\ncase 'F':\nswitch (wsskip()) {\ncase '\\\"':\ncase '\\'':\nst=5;\nbreak;\ncase EOS:\npanic(FAULT);\ndefault :\nst=-1;\nbreak;\n}\nbreak;\ncase 'Q':\ncase 'I':\nst=-1;\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\nbreak;\ncase '\\\"':\ncase '\\'':\nbkch();\nst=5;\nbreak;\ncase ' ':\ncase '\\n':\ncase '\\r':\ncase '\\t':\nbreak;\ncase '%':\npent(' ');\nbreak;\ndefault :\nbkch();\nst=-1;\nbreak;\n}\nbreak;\ncase 5:\nswitch (ch) {\ncase '\\\"':\ncase '\\'':\nbkch();\nbqstr('d');\natt.list=pair(null);\natt.list.chars=new char[att.chars.length + mBuffIdx + 3];\nSystem.arraycopy(att.chars,1,att.list.chars,0,att.chars.length - 1);\natt.list.chars[att.chars.length - 1]='=';\natt.list.chars[att.chars.length]=ch;\nSystem.arraycopy(mBuff,1,att.list.chars,att.chars.length + 1,mBuffIdx);\natt.list.chars[att.chars.length + mBuffIdx + 1]=ch;\natt.list.chars[att.chars.length + mBuffIdx + 2]=' ';\nst=-1;\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\nbreak;\ndefault :\npanic(FAULT);\nbreak;\n}\n}\n}"}
{"ids": "7285", "raw_code": "public void addClasses(List<String> classNames){\n  if (handlerFactories == null) {\n    handlerFactories=new ArrayList<String>();\n  }\n  handlerFactories.addAll(classNames);\n}"}
{"ids": "82981", "raw_code": "public static boolean isConstantName(String name){\n  return Pattern.matches(\"[\\\\dA-Z_]+\",name);\n}"}
{"ids": "80528", "raw_code": "private void notifyDead(final RPEntity dead){\n  if (!rats.remove(dead)) {\n    logger.warn(\"killed creature isn't in control list (\" + dead.toString() + \").\");\n  }\n  if (rats.size() == 0) {\n    phaseToDefaultPhase(new LinkedList<String>(Arrays.asList(\"pied piper\")));\n  }\n}"}
{"ids": "11746", "raw_code": "public static OMGrid read(DataInputStream dis) throws IOException {\n  return read(dis,null);\n}"}
{"ids": "68297", "raw_code": "public VarcharConstant(String s){\n  type=new VarcharType(s.length());\n  val=s;\n}"}
{"ids": "43469", "raw_code": "public boolean addChildPlanet(DimensionProperties child){\n  if (child == this)   return false;\n  childPlanets.add(child.getId());\n  child.setParentPlanet(this);\n  return true;\n}"}
{"ids": "37808", "raw_code": "@Override public Enumeration<String> enumerateMeasures(){\n  Vector<String> newVector=new Vector<String>(1);\n  newVector.add(\"measureNumRules\");\n  return newVector.elements();\n}"}
{"ids": "80343", "raw_code": "int[] calculateRelative(int[] absolute){\n  int[] res=new int[absolute.length];\n  res[0]=absolute[0];\n  for (int i=1; i < res.length; i++) {\n    res[i]=absolute[i] - absolute[i - 1];\n  }\n  return res;\n}"}
{"ids": "21184", "raw_code": "@AfterClass public static void deleteLogDir(){\n  if (logDir != null) {\n    FileUtils.deleteQuietly(logDir);\n  }\n}"}
{"ids": "21448", "raw_code": "public static String[] splitStringIntoArray(String value){\n  String[] values=new String[0];\n  if (value != null && value.length() > 0) {\n    if (value.indexOf(CIMConstants.COMMA_SEPERATOR) != -1) {\n      values=value.split(\",\");\n    }\n else {\n      values=new String[1];\n      values[0]=value;\n    }\n  }\n  return values;\n}"}
{"ids": "66853", "raw_code": "public static String fromAttrModelingModelClass(String vaModelClass){\n  return vaModelClass.split(ValueAnalysis.MODEL_PACKAGE_PREFIX)[1];\n}"}
{"ids": "73683", "raw_code": "public synchronized void add(DccLocoAddress locoAddress,boolean directionNormal){\n  if (!contains(locoAddress)) {\n    if (ConsistList.size() == 0) {\n      byte command=NceBinaryCommand.LOCO_CMD_FWD_CONSIST_LEAD;\n      if (!directionNormal) {\n        command=NceBinaryCommand.LOCO_CMD_REV_CONSIST_LEAD;\n      }\n      addLocoToConsist(locoAddress.getNumber(),locoAddress.isLongAddress(),command);\n      ConsistPosition.put(locoAddress,DccConsist.POSITION_LEAD);\n    }\n else     if (ConsistList.size() == 1) {\n      byte command=NceBinaryCommand.LOCO_CMD_FWD_CONSIST_REAR;\n      if (!directionNormal) {\n        command=NceBinaryCommand.LOCO_CMD_REV_CONSIST_REAR;\n      }\n      addLocoToConsist(locoAddress.getNumber(),locoAddress.isLongAddress(),command);\n      ConsistPosition.put(locoAddress,DccConsist.POSITION_TRAIL);\n    }\n else {\n      byte command=NceBinaryCommand.LOCO_CMD_FWD_CONSIST_MID;\n      if (!directionNormal) {\n        command=NceBinaryCommand.LOCO_CMD_REV_CONSIST_MID;\n      }\n      addLocoToConsist(locoAddress.getNumber(),locoAddress.isLongAddress(),command);\n      ConsistPosition.put(locoAddress,ConsistPosition.size());\n    }\n    ConsistList.add(locoAddress);\n    ConsistDir.put(locoAddress,Boolean.valueOf(directionNormal));\n  }\n else {\n    log.error(\"Loco \" + locoAddress + \" is already part of this consist \"+ getConsistAddress());\n  }\n}"}
{"ids": "31676", "raw_code": "private GridClientConfiguration clientConfiguration(){\n  GridClientConfiguration cfg=new GridClientConfiguration();\n  cfg.setTopologyRefreshFrequency(topologyRefreshFrequency());\n  cfg.setMaxConnectionIdleTime(maxConnectionIdleTime());\n  cfg.setProtocol(protocol());\n  cfg.setServers(Arrays.asList(serverAddress()));\n  cfg.setBalancer(new GridClientRoundRobinBalancer());\n  if (useSsl())   cfg.setSslContextFactory(sslContextFactory());\n  GridClientDataConfiguration loc=new GridClientDataConfiguration();\n  GridClientDataConfiguration partitioned=new GridClientDataConfiguration();\n  partitioned.setName(PARTITIONED_CACHE_NAME);\n  partitioned.setAffinity(new GridClientPartitionAffinity());\n  GridClientDataConfiguration partitionedAsyncBackup=new GridClientDataConfiguration();\n  partitionedAsyncBackup.setName(PARTITIONED_ASYNC_BACKUP_CACHE_NAME);\n  partitionedAsyncBackup.setAffinity(new GridClientPartitionAffinity());\n  GridClientDataConfiguration replicated=new GridClientDataConfiguration();\n  replicated.setName(REPLICATED_CACHE_NAME);\n  GridClientDataConfiguration replicatedAsync=new GridClientDataConfiguration();\n  replicatedAsync.setName(REPLICATED_ASYNC_CACHE_NAME);\n  cfg.setDataConfigurations(Arrays.asList(loc,partitioned,replicated,replicatedAsync,partitionedAsyncBackup));\n  return cfg;\n}"}
{"ids": "2634", "raw_code": "public Builder(){\n  setVersionCode(Math.min(FreshAir.getCurrentApplicationVersion(),0));\n  setFeatures(new LinkedList<FeatureInfo>());\n}"}
{"ids": "60414", "raw_code": "protected String convertDateFormat(String pattern){\n  boolean inside=false;\n  boolean mark=false;\n  boolean modifiedCommand=false;\n  StringBuilder buf=new StringBuilder();\n  for (int i=0; i < pattern.length(); i++) {\n    char c=pattern.charAt(i);\n    if (c == '%' && !mark) {\n      mark=true;\n    }\n else {\n      if (mark) {\n        if (modifiedCommand) {\n          modifiedCommand=false;\n          mark=false;\n        }\n else {\n          inside=translateCommand(buf,pattern,i,inside);\n          if (c == 'O' || c == 'E') {\n            modifiedCommand=true;\n          }\n else {\n            mark=false;\n          }\n        }\n      }\n else {\n        if (!inside && c != ' ') {\n          buf.append(\"'\");\n          inside=true;\n        }\n        buf.append(c);\n      }\n    }\n  }\n  if (buf.length() > 0) {\n    char lastChar=buf.charAt(buf.length() - 1);\n    if (lastChar != '\\'' && inside) {\n      buf.append('\\'');\n    }\n  }\n  return buf.toString();\n}"}
{"ids": "7154", "raw_code": "public void addChildNode(EvalFactoryNode childNode){\n  childNodes.add(childNode);\n}"}
{"ids": "72773", "raw_code": "public final void headTo(Tuple3d p){\n  double angle=Geometric.angle(this.location,p);\n  turnTo(Math.toDegrees(angle));\n}"}
{"ids": "57385", "raw_code": "public void compactBuffer(){\n  if (offset != buffer.length) {\n    byte[] newBuffer=new byte[offset];\n    System.arraycopy(buffer,0,newBuffer,0,offset);\n    buffer=newBuffer;\n  }\n}"}
{"ids": "59590", "raw_code": "public static int putByteBuffer(byte[] bytes,int offset,ByteBuffer buf){\n  int len=buf.remaining();\n  buf.get(bytes,offset,len);\n  return offset + len;\n}"}
{"ids": "51250", "raw_code": "private void clearIndexToFirst(){\n  for (; ; ) {\n    Index<K,V> q=head;\n    for (; ; ) {\n      Index<K,V> r=q.right;\n      if (r != null && r.indexesDeletedNode() && !q.unlink(r))       break;\n      if ((q=q.down) == null) {\n        if (head.right == null)         tryReduceLevel();\n        return;\n      }\n    }\n  }\n}"}
{"ids": "17581", "raw_code": "final void tryTerminate(){\n  for (; ; ) {\n    int c=ctl.get();\n    if (isRunning(c) || runStateAtLeast(c,TIDYING) || (runStateOf(c) == SHUTDOWN && !workQueue.isEmpty()))     return;\n    if (workerCountOf(c) != 0) {\n      interruptIdleWorkers(ONLY_ONE);\n      return;\n    }\n    final ReentrantLock mainLock=this.mainLock;\n    mainLock.lock();\n    try {\n      if (ctl.compareAndSet(c,ctlOf(TIDYING,0))) {\n        try {\n          terminated();\n        }\n  finally {\n          ctl.set(ctlOf(TERMINATED,0));\n          termination.signalAll();\n        }\n        return;\n      }\n    }\n  finally {\n      mainLock.unlock();\n    }\n  }\n}"}
{"ids": "31062", "raw_code": "public void joinResource() throws InterruptedException {\n  if (runObj != null) {\nsynchronized (complete) {\n      if (runObj != null)       complete.wait();\n    }\n  }\n}"}
{"ids": "41028", "raw_code": "public static String toJSONString(List list){\n  if (list == null)   return \"null\";\n  boolean first=true;\n  StringBuffer sb=new StringBuffer();\n  Iterator iter=list.iterator();\n  sb.append('[');\n  while (iter.hasNext()) {\n    if (first)     first=false;\n else     sb.append(',');\n    Object value=iter.next();\n    if (value == null) {\n      sb.append(\"null\");\n      continue;\n    }\n    sb.append(JSONValue.toJSONString(value));\n  }\n  sb.append(']');\n  return sb.toString();\n}"}
{"ids": "67428", "raw_code": "@Override public int hashCode(){\n  final int prime=31;\n  int result=super.hashCode();\n  result=prime * result + (tenant == null ? 0 : tenant.hashCode());\n  return result;\n}"}
{"ids": "75540", "raw_code": "public void loadAccessors(MappedField configuredField,MappedField targetField){\n  loadAccessors(targetClass,configuredField,targetField);\n}"}
{"ids": "50080", "raw_code": "public static MatrixBlock reshape(MatrixBlock in,MatrixBlock out,int rows,int cols,boolean rowwise) throws DMLRuntimeException {\n  int rlen=in.rlen;\n  int clen=in.clen;\n  if (((long)rlen) * clen != ((long)rows) * cols)   throw new DMLRuntimeException(\"Reshape matrix requires consistent numbers of input/output cells (\" + rlen + \":\"+ clen+ \", \"+ rows+ \":\"+ cols+ \").\");\n  if (rlen == rows && clen == cols) {\n    out.copy(in);\n    return out;\n  }\n  out.sparse=MatrixBlock.evalSparseFormatInMemory(rows,cols,in.nonZeros);\n  out.rlen=rows;\n  out.clen=cols;\n  out.nonZeros=in.nonZeros;\n  if (!in.sparse && !out.sparse)   reshapeDense(in,out,rows,cols,rowwise);\n else   if (in.sparse && out.sparse)   reshapeSparse(in,out,rows,cols,rowwise);\n else   if (in.sparse)   reshapeSparseToDense(in,out,rows,cols,rowwise);\n else   reshapeDenseToSparse(in,out,rows,cols,rowwise);\n  return out;\n}"}
{"ids": "16434", "raw_code": "public static Class<?>[] toClassesFromObjects(final Object[] params){\n  final Class<?>[] classes=new Class<?>[params.length];\n  int i=0;\n  for (  final Object object : params) {\n    if (object != null) {\n      classes[i++]=object.getClass();\n    }\n else {\n      classes[i++]=Object.class;\n    }\n  }\n  return classes;\n}"}
{"ids": "23977", "raw_code": "public AdminRegion(String localName,RemoteGemFireVM vm,String userAttributeDesc){\n  String gn=localName;\n  int idx=localName.lastIndexOf(nameSep);\n  if (idx != -1) {\n    localName=localName.substring(idx + 1);\n  }\n else {\n    gn=nameSep + gn;\n  }\n  this.globalName=gn;\n  this.localName=localName;\n  this.userAttributeDesc=userAttributeDesc;\n  this.vm=vm;\n}"}
{"ids": "13984", "raw_code": "public Element signWithWSSX509TokenProfile(Document doc,java.security.cert.Certificate cert,String algorithm,List ids) throws XMLSignatureException {\n  return signWithWSSX509TokenProfile(doc,cert,algorithm,ids,SOAPBindingConstants.WSF_10_VERSION);\n}"}
{"ids": "63971", "raw_code": "public void addUserMessageListener(UserMessageListener userMessageListener){\n  userMessageListeners.add(userMessageListener);\n}"}
{"ids": "30983", "raw_code": "public IteratorBuilder addTemplate(ISpaceQuery query){\n  templates.add(query);\n  return this;\n}"}
{"ids": "24270", "raw_code": "public String addToClassPath(final String path){\n  this.classPath+=(System.getProperty(\"path.separator\") + path);\n  return this.classPath;\n}"}
{"ids": "78097", "raw_code": "public static boolean ignoringBatteryOptimizations(){\n  return NgnApplication.ignoringBatteryOptimizations(null);\n}"}
{"ids": "42865", "raw_code": "private boolean retryDelayHasPassedBy(Long lastFailTime){\n  return lastFailTime == null || lastFailTime + this.retryAfterMs < System.currentTimeMillis();\n}"}
{"ids": "82563", "raw_code": "public static java.lang.String valueOf(long l){\n  return Long.toString(l);\n}"}
{"ids": "86224", "raw_code": "private boolean useMetric(MetricRule rule,Metric metric){\n  if (rule.awsDimensionSelect == null && rule.awsDimensionSelectRegex == null) {\n    return true;\n  }\n  if (rule.awsDimensionSelect != null && metricsIsInAwsDimensionSelect(rule,metric)) {\n    return true;\n  }\n  if (rule.awsDimensionSelectRegex != null && metricIsInAwsDimensionSelectRegex(rule,metric)) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "80270", "raw_code": "final void addIconManager(AbstractStatusIconManager manager){\n  iconManagers.add(manager);\n}"}
{"ids": "56419", "raw_code": "public IndexMetaData upgradeIndexMetaData(IndexMetaData indexMetaData){\n  if (isUpgraded(indexMetaData)) {\n    return indexMetaData;\n  }\n  checkSupportedVersion(indexMetaData);\n  IndexMetaData newMetaData=upgradeLegacyRoutingSettings(indexMetaData);\n  newMetaData=addDefaultUnitsIfNeeded(newMetaData);\n  checkMappingsCompatibility(newMetaData);\n  newMetaData=upgradeSettings(newMetaData);\n  newMetaData=markAsUpgraded(newMetaData);\n  return newMetaData;\n}"}
{"ids": "52287", "raw_code": "static final void encode(byte[] src,int srcOff,int len,byte[] dst,int dstOff){\n  dst[dstOff]=(byte)ENCODE_TABLE.charAt((src[srcOff] >> 2) & 0x3F);\n  if (len == 3) {\n    dst[dstOff + 1]=(byte)ENCODE_TABLE.charAt(((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F));\n    dst[dstOff + 2]=(byte)ENCODE_TABLE.charAt(((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03));\n    dst[dstOff + 3]=(byte)ENCODE_TABLE.charAt(src[srcOff + 2] & 0x3F);\n  }\n else   if (len == 2) {\n    dst[dstOff + 1]=(byte)ENCODE_TABLE.charAt(((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F));\n    dst[dstOff + 2]=(byte)ENCODE_TABLE.charAt((src[srcOff + 1] << 2) & 0x3C);\n  }\n else {\n    dst[dstOff + 1]=(byte)ENCODE_TABLE.charAt((src[srcOff] << 4) & 0x30);\n  }\n}"}
{"ids": "1173", "raw_code": "public static void convolveV(Kernel kernel,int[] inPixels,int[] outPixels,int width,int height,boolean alpha,int edgeAction){\n  int index=0;\n  float[] matrix=kernel.getKernelData(null);\n  int rows=kernel.getHeight();\n  int rows2=rows / 2;\n  for (int y=0; y < height; y++) {\n    for (int x=0; x < width; x++) {\n      float r=0, g=0, b=0, a=0;\n      for (int row=-rows2; row <= rows2; row++) {\n        int iy=y + row;\n        int ioffset;\n        if (iy < 0) {\n          if (edgeAction == CLAMP_EDGES)           ioffset=0;\n else           if (edgeAction == WRAP_EDGES)           ioffset=((y + height) % height) * width;\n else           ioffset=iy * width;\n        }\n else         if (iy >= height) {\n          if (edgeAction == CLAMP_EDGES)           ioffset=(height - 1) * width;\n else           if (edgeAction == WRAP_EDGES)           ioffset=((y + height) % height) * width;\n else           ioffset=iy * width;\n        }\n else         ioffset=iy * width;\n        float f=matrix[row + rows2];\n        if (f != 0) {\n          int rgb=inPixels[ioffset + x];\n          a+=f * ((rgb >> 24) & 0xff);\n          r+=f * ((rgb >> 16) & 0xff);\n          g+=f * ((rgb >> 8) & 0xff);\n          b+=f * (rgb & 0xff);\n        }\n      }\n      int ia=alpha ? PixelUtils.clamp((int)(a + 0.5)) : 0xff;\n      int ir=PixelUtils.clamp((int)(r + 0.5));\n      int ig=PixelUtils.clamp((int)(g + 0.5));\n      int ib=PixelUtils.clamp((int)(b + 0.5));\n      outPixels[index++]=(ia << 24) | (ir << 16) | (ig << 8)| ib;\n    }\n  }\n}"}
{"ids": "68480", "raw_code": "@SuppressWarnings(\"unchecked\") public final void storeData(final List data) throws IDBPersistenceException {\n  SqlSession session=null;\n  int size=data.size();\n  int commited=0;\n  T dtShortTermLog;\n  try {\n    session=sqlSessionFactory.openSession(ExecutorType.BATCH,false);\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Obtained batch transacted SQL session (session: \" + session.toString() + \")\");\n    }\n    LoggerMapper<T> persistenceMapper=session.getMapper(mapperInterface);\n    for (int i=0; i != size; i++) {\n      if ((0 == i % RECORDS_PER_BATCH) && i > 0) {\n        if (LOGGER.isDebugEnabled()) {\n          LOGGER.debug(\"storeData([Collection]) : Commiting rows for i=\" + i);\n        }\n        session.commit();\n        commited=i;\n      }\n      if (data.get(i) != null) {\n        dtShortTermLog=(T)data.get(i);\n        if (LOGGER.isDebugEnabled()) {\n          LOGGER.debug(\"Logging object with ID: \" + dtShortTermLog.getId());\n        }\n        persistenceMapper.insertLog(dtShortTermLog);\n      }\n    }\n    session.commit();\n    commited=size;\n  }\n catch (  PersistenceException e) {\n    LOGGER.error(\"storeData([Collection]) : Error executing/closing prepared statement for \" + data.size() + \" dataTags\",e);\n    try {\n      if (session != null) {\n        session.rollback();\n      }\n    }\n catch (    Exception sql) {\n      LOGGER.error(\"storeData([Collection]) : Error rolling back transaction.\",sql);\n    }\n    throw new IDBPersistenceException(e.getMessage(),commited);\n  }\n finally {\n    try {\n      if (session != null) {\n        session.close();\n      }\n    }\n catch (    Exception e) {\n      LOGGER.error(\"storeData([Collection]) : Error closing session.\",e);\n    }\n  }\n}"}
{"ids": "35767", "raw_code": "@SuppressWarnings(\"unchecked\") public static Map<String,ConfigurationKey<?>> registeredKeys(){\nsynchronized (registeredKeys) {\n    if (copy == null)     copy=Collections.unmodifiableMap((Map<String,ConfigurationKey<?>>)registeredKeys.clone());\n    return copy;\n  }\n}"}
{"ids": "41813", "raw_code": "public static String md5(String stringToHash){\n  if (stringToHash != null) {\n    try {\n      MessageDigest md=MessageDigest.getInstance(\"MD5\");\n      byte[] bytes=md.digest(stringToHash.getBytes());\n      StringBuilder sb=new StringBuilder(2 * bytes.length);\n      for (int i=0; i < bytes.length; i++) {\n        int low=(bytes[i] & 0x0f);\n        int high=((bytes[i] & 0xf0) >> 4);\n        sb.append(Constants.HEXADECIMAL[high]);\n        sb.append(Constants.HEXADECIMAL[low]);\n      }\n      return sb.toString();\n    }\n catch (    NoSuchAlgorithmException e) {\n      return \"\";\n    }\n  }\n else {\n    return \"\";\n  }\n}"}
{"ids": "80908", "raw_code": "public String mostOfString(){\n  String typeName=\"\";\nswitch (type) {\ncase BUILTIN:\n    typeName=\"BUILTIN\";\n  break;\ncase NUMBER:\ntypeName=\"NUMBER\";\nbreak;\ncase STRING:\ntypeName=\"STRING\";\nbreak;\ncase PF_STEP:\ntypeName=\"PF_STEP\";\nbreak;\ncase IDENT:\ntypeName=\"IDENT\";\nbreak;\ncase COMMENT:\ntypeName=\"COMMENT\";\nbreak;\ncase DASHES:\ntypeName=\"DASHES\";\nbreak;\ncase END_MODULE:\ntypeName=\"END_MODULE\";\nbreak;\ncase PROLOG:\ntypeName=\"PROLOG\";\nbreak;\ncase EPILOG:\ntypeName=\"EPILOG\";\nbreak;\ncase PCAL_LABEL:\ntypeName=\"PCAL_LABEL\";\nbreak;\n}\n;\nString str=\"\\\"\" + string + \"\\\"\";\nif (string == null) {\nstr=\"null\";\n}\n;\nString result=\"[str |-> \" + str + \",\\t type |-> \"+ typeName+ \",\\t col |-> \"+ column+ \",\\t width |-> \"+ getWidth();\nif (aboveAlign.line != -1) {\nresult=result + \",\\t above |-> \" + aboveAlign.toString();\n}\n;\nif (belowAlign.line != -1) {\nresult=result + \",\\t below |-> \" + belowAlign.toString();\n}\n;\nif (preSpace != 0) {\nresult=result + \", space |-> \" + preSpace;\n}\n;\nif (isAlignmentPoint) {\nresult=result + \", align |-> true\";\n}\n;\nif (distFromMargin != 0) {\nresult=result + \", dist |-> \" + distFromMargin;\n}\n;\nif (subscript) {\nresult=result + \", sub |-> true\";\n}\n;\nreturn result;\n}"}
{"ids": "56335", "raw_code": "public CreateIndexRequest mapping(String type,XContentBuilder source){\n  if (mappings.containsKey(type)) {\n    throw new IllegalStateException(\"mappings for type \\\"\" + type + \"\\\" were already defined\");\n  }\n  try {\n    mappings.put(type,source.string());\n  }\n catch (  IOException e) {\n    throw new IllegalArgumentException(\"Failed to build json for mapping request\",e);\n  }\n  return this;\n}"}
{"ids": "24615", "raw_code": "public static PrettyPrint indentWithSpaces(int number){\n  if (number < 0) {\n    throw new IllegalArgumentException(\"number is negative\");\n  }\n  char[] chars=new char[number];\n  Arrays.fill(chars,' ');\n  return new PrettyPrint(chars);\n}"}
{"ids": "77614", "raw_code": "private static void copyFile(File src,File dst,Integer port,boolean internalCompression) throws IOException {\n  BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(src),StandardCharsets.UTF_8));\n  Writer out=new OutputStreamWriter(new FileOutputStream(dst),StandardCharsets.UTF_8);\n  for (String line=in.readLine(); null != line; line=in.readLine()) {\n    if (null != port)     line=line.replace(\"TEST_PORT\",port.toString());\n    line=line.replace(\"COMPRESSION\",internalCompression ? \"internal\" : \"false\");\n    out.write(line);\n  }\n  in.close();\n  out.close();\n}"}
{"ids": "49610", "raw_code": "public void assertEventLogContains(Object event){\n  if (!mEventLog.contains(event)) {\n    fail(\"Expected event not present. Actual events: \" + mEventLog);\n  }\n}"}
{"ids": "80902", "raw_code": "private static boolean isAllUnderscores(){\n  int i=0;\n  boolean result=true;\n  while (result && (i < token.length())) {\n    if (token.charAt(i) != '_') {\n      result=false;\n    }\n    ;\n    i=i + 1;\n  }\n  ;\n  return result;\n}"}
{"ids": "11164", "raw_code": "public ImageWarp(BufferedImage bi,GeoCoordTransformation transform,DataBounds imageBounds){\n  if (bi != null) {\n    iwidth=bi.getWidth();\n    iheight=bi.getHeight();\n    setGeoTrans(transform);\n    setImageBounds(imageBounds);\n    pixels=getPixels(bi,0,0,iwidth,iheight);\n    bi=null;\n  }\n}"}
{"ids": "68618", "raw_code": "public static EquipmentLoggerFactory createFactory(final EquipmentConfiguration econf,final ProcessConfiguration pconf,boolean useEquipmentLoggers,boolean useEquipmentAppendersOnly){\n  return new EquipmentLoggerFactory(econf.getHandlerClassName(),Long.valueOf(econf.getId()),econf.getName(),pconf.getProcessName(),useEquipmentLoggers,useEquipmentAppendersOnly);\n}"}
{"ids": "63590", "raw_code": "protected void assertEquals(Integer expected,Integer actual){\n  if (expected == null || actual == null) {\n    if (expected != actual) {\n      assertEquals(\"\" + expected,\"\" + actual);\n    }\n  }\n else {\n    assertEquals(expected.intValue(),actual.intValue());\n  }\n}"}
{"ids": "21009", "raw_code": "public static boolean vPoolSpecifiesSnapshots(final VirtualPool virtualPool){\n  if (virtualPool.getMaxNativeSnapshots() == null) {\n    return false;\n  }\n  return virtualPool.getMaxNativeSnapshots() != MAX_DISABLED;\n}"}
{"ids": "7434", "raw_code": "public void mapDatasetToAxis(int index,int axisIndex){\n  List axisIndices=new java.util.ArrayList(1);\n  axisIndices.add(new Integer(axisIndex));\n  mapDatasetToAxes(index,axisIndices);\n}"}
{"ids": "15130", "raw_code": "public AuthenticatorAppRegistrationURIBuilder(AMIdentity id,String secretHex,int codeLength,String issuer){\n  Reject.ifNull(id,\"id cannot be null\");\n  Reject.ifNull(secretHex,\"secretHex cannot be null\");\n  Reject.ifTrue(StringUtils.isBlank(issuer),\"issuer cannot be empty\");\n  Reject.ifTrue((codeLength < MIN_CODE_LENGTH),\"code length must be \" + MIN_CODE_LENGTH + \" or greater\");\n  if (secretHex.length() == 0) {\n    throw new IllegalArgumentException(\"secretHex cannot be an empty String.\");\n  }\n  this.issuer=issuer;\n  this.id=id;\n  this.secretHex=secretHex;\n  this.codeLength=codeLength;\n}"}
{"ids": "39494", "raw_code": "protected void updateApplicationEnabled(){\n  firePropertyChange(\"enabled\",Boolean.valueOf(!isEnabled()),Boolean.valueOf(isEnabled()));\n}"}
{"ids": "7102", "raw_code": "public PersonalityInsights(final String versionDate,String username,String password){\n  this(versionDate);\n  setUsernameAndPassword(username,password);\n}"}
{"ids": "9956", "raw_code": "public String signMessage(String message) throws IllegalStateException {\n  Validate.notNull(getSignAlgorithm(),\"Signature Algorithm\");\n  Validate.notNull(getPrivateKey(),\"PrivateKey for signing\");\n  Validate.notEmpty(message,\"message string\");\n  log.debug(\"Signing  message \" + message + \", sigAlg \"+ getSignAlgorithm());\n  try {\n    SignatureAlgorithm algo=SignatureAlgorithm.getSignatureAlgorithmForURI(getSignAlgorithm());\n    Signature sig=Signature.getInstance(algo.getAlgorithmName());\n    sig.initSign(this.privateKey);\n    byte[] messageBytes=message.getBytes(\"UTF-8\");\n    sig.update(messageBytes);\n    byte[] sigBytes=sig.sign();\n    String signature=SharedUtils.encodeBytes(sigBytes);\n    log.debug(\"signature: \" + signature);\n    return signature;\n  }\n catch (  Exception e) {\n    log.error(\"Failed to sign the message: exception cause\",e);\n    throw new IllegalStateException(e);\n  }\n}"}
{"ids": "66515", "raw_code": "private void outputPriceLists(Properties ctx,PrintWriter out,boolean includeAny){\n  out.println(\"<pricelists>\");\n  if (includeAny)   out.println(\"<pricelist id='-1' selected='selected'>ANY</pricelist>\");\n  out.println(\"<pricelist id='1'>Standard</pricelist>\");\n  out.println(\"<pricelist id='2'>Summer Specials</pricelist>\");\n  out.println(\"</pricelists>\");\n}"}
{"ids": "65007", "raw_code": "public void clearBindings(){\n  if (mBindArgs != null) {\n    Arrays.fill(mBindArgs,null);\n  }\n}"}
{"ids": "951", "raw_code": "public boolean assignIfBestMatch(MethodDeclaration declaration){\n  assert !finalized : \"Assigning on a method that has already been finalized\";\n  if (!isMatch(declaration.getParameters())) {\n    return false;\n  }\n  if (this.bestMatchMethod.isPresent()) {\n    if (this.bestMatchMethod.get().getParameters().size() > declaration.getParameters().size()) {\n      return false;\n    }\n  }\n  this.bestMatchMethod=Optional.of(declaration);\n  return true;\n}"}
{"ids": "85299", "raw_code": "public static List<User> from(Cursor c){\n  List<User> users=null;\n  int count=c.getCount();\n  if (count > 0) {\n    users=new ArrayList<>(count);\n    while (c.moveToNext()) {\n      User user=new User();\n      Syncing.from(c,user);\n      int col=c.getColumnIndex(EMAIL_HASH);\n      if (col >= 0) {\n        user.emailHash=c.getString(col);\n      }\n      col=c.getColumnIndex(FOLLOWING);\n      if (col >= 0) {\n        user.isFollowing=c.getInt(col) == 1;\n      }\n      users.add(user);\n    }\n  }\n  c.close();\n  return users;\n}"}
{"ids": "82446", "raw_code": "@Override public void flush() throws IOException {\n  out.flush();\n}"}
{"ids": "70635", "raw_code": "private void startCheckingStatus(){\n  future=executor.submit(null);\n}"}
{"ids": "13338", "raw_code": "private static Object newInstanceNoServiceLoader(Class<?> providerClass){\n  if (System.getSecurityManager() == null) {\n    return null;\n  }\n  try {\n    Method creationMethod=providerClass.getDeclaredMethod(\"newXPathFactoryNoServiceLoader\");\n    return creationMethod.invoke(null,(Object[])null);\n  }\n catch (  NoSuchMethodException exc) {\n    return null;\n  }\ncatch (  Exception exc) {\n    return null;\n  }\n}"}
{"ids": "34243", "raw_code": "private void addSignatureProfile(SignatureWrapper signature,XmlSignature xmlSignature){\n  SignatureType signatureType=SignatureType.NA;\n  String certificateId=signature.getSigningCertificateId();\n  if (certificateId != null) {\n    signatureType=getSignatureType(certificateId);\n  }\n  xmlSignature.setSignatureLevel(signatureType.name());\n}"}
{"ids": "55867", "raw_code": "private static final int parseTimeString(String str){\n  str=str.trim();\n  int ret=0;\n  boolean neg=false;\n  int i=0;\n  if (str.charAt(0) == '-') {\n    neg=true;\n    i++;\n  }\n  int num=0;\n  final int len=str.length();\n  for (; i < len; i++) {\n    char c=str.charAt(i);\n    if ((c >= '0') && (c <= '9')) {\n      num=num * 10 + c - '0';\n    }\n else     if (c == ':') {\n      ret+=num;\n      num=0;\n      ret*=60;\n    }\n  }\n  ret+=num;\n  ret*=1000;\n  if (neg)   ret=-ret;\n  return ret;\n}"}
{"ids": "38620", "raw_code": "public synchronized void removeImageListener(ImageListener cl){\n  m_imageListeners.remove(cl);\n}"}
{"ids": "51035", "raw_code": "public ArrayList<ConstraintWidget> buildList(ScoutWidget[] list){\n  ArrayList<ConstraintWidget> ret=new ArrayList<>();\n  for (int i=mContainSet.nextSetBit(0); i >= 0; i=mContainSet.nextSetBit(i + 1)) {\n    ret.add(list[i].mConstraintWidget);\n  }\n  return ret;\n}"}
{"ids": "47270", "raw_code": "private boolean nodeExists(StringTokenizer path) throws BackingStoreException {\n  String token=path.nextToken();\n  if (token.equals(\"/\"))   throw new IllegalArgumentException(\"Consecutive slashes in path\");\nsynchronized (lock) {\n    AbstractPreferences child=kidCache.get(token);\n    if (child == null)     child=getChild(token);\n    if (child == null)     return false;\n    if (!path.hasMoreTokens())     return true;\n    path.nextToken();\n    if (!path.hasMoreTokens())     throw new IllegalArgumentException(\"Path ends with slash\");\n    return child.nodeExists(path);\n  }\n}"}
{"ids": "46699", "raw_code": "public int size(){\n  return delegate.size();\n}"}
{"ids": "5598", "raw_code": "public NetworkAddressFactoryImpl() throws InitializationException {\n  this(DEFAULT_TCP_HTTP_LISTEN_PORT);\n}"}
{"ids": "36561", "raw_code": "public TransparentGlassPanePanel(ImageIcon icon,String text,Color backgroundColor,float transparency){\n  setLayout(new GridBagLayout());\n  GridBagConstraints gbc=new GridBagConstraints();\n  gbc.gridy=0;\n  gbc.gridx=0;\n  JLabel iconLabel=new JLabel(icon);\n  add(iconLabel,gbc);\n  gbc.gridy+=1;\n  label=new JLabel(text);\n  add(label,gbc);\n  if (transparency > 1) {\n    transparency=1;\n  }\n else   if (transparency < 0) {\n    transparency=0;\n  }\n  Color transparentColor=new Color(backgroundColor.getRed(),backgroundColor.getGreen(),backgroundColor.getBlue(),(int)(transparency * 255));\n  setBackground(transparentColor);\n  setOpaque(false);\n}"}
{"ids": "25728", "raw_code": "@Override protected void fillHeader(Header head){\n  try {\n    Standard.context(UndefinedData.class);\n    head.setXtension(\"UNKNOWN\");\n    head.setBitpix(BasicHDU.BITPIX_BYTE);\n    head.setNaxes(1);\n    head.addValue(NAXISn.n(1),this.data.length);\n    head.addValue(PCOUNT,0);\n    head.addValue(GCOUNT,1);\n    head.addValue(EXTEND,true);\n  }\n catch (  HeaderCardException e) {\n    LOG.log(Level.SEVERE,\"Unable to create unknown header\",e);\n  }\n finally {\n    Standard.context(null);\n  }\n}"}
{"ids": "83138", "raw_code": "protected void cleanStationsAndNetwork(){\n  log.info(\"Clean Stations and Network...\");\n  cleanSchedule();\n  removeNonUsedStopFacilities();\n  cleanModes();\n  removeNonUsedLinks();\n  log.info(\"Clean Stations and Network... done.\");\n}"}
{"ids": "8901", "raw_code": "private static String stripAppleSpanFromMarkup(String markup){\n  StringBuilder stripped=new StringBuilder(markup);\n  int prefixBegIdx=stripped.indexOf(APPLE_SPAN_PREFIX);\n  while (prefixBegIdx >= 0) {\n    int prefixEndIdx=stripped.indexOf(\">\",prefixBegIdx) + 1;\n    stripped.replace(prefixBegIdx,prefixEndIdx,\"\");\n    int suffixBegIdx=stripped.lastIndexOf(APPLE_SPAN_SUFFIX);\n    int suffixEndIdx=suffixBegIdx + APPLE_SPAN_SUFFIX.length();\n    stripped.replace(suffixBegIdx,suffixEndIdx,\"\");\n    prefixBegIdx=stripped.indexOf(APPLE_SPAN_PREFIX);\n  }\n  return stripped.toString();\n}"}
{"ids": "30943", "raw_code": "private InvocationConstraints createInvocationConstraints(){\n  if (MIN_RETRY >= sleepTime[tryIndx]) {\n    return new InvocationConstraints(new ConnectionAbsoluteTime(System.currentTimeMillis() + sleepTime[tryIndx]),null);\n  }\n else {\n    return InvocationConstraints.EMPTY;\n  }\n}"}
{"ids": "14782", "raw_code": "public void create(SSOToken token,String dn,Map attrs) throws SMSException, SSOException {\n  create(token.getPrincipal(),dn,attrs);\n  objectChanged(dn,ADD);\n}"}
{"ids": "4756", "raw_code": "@Override public void close() throws IOException {\n  if (!closed) {\n    try {\n      if (!eof) {\n        exhaustInputStream(this);\n      }\n    }\n  finally {\n      eof=true;\n      closed=true;\n    }\n  }\n}"}
{"ids": "70524", "raw_code": "private void discardDownstreamMediaChunk(){\n  MediaChunk removed=mediaChunks.removeFirst();\n  long totalBytes=removed.bytesLoaded();\n  removed.release();\n  notifyDownstreamDiscarded(removed.startTimeUs,removed.endTimeUs,totalBytes);\n}"}
{"ids": "30345", "raw_code": "public Object executeScript(final Script script,final ScriptContext context){\n  final ScriptEngine engine=scriptEngineProvider.getScriptEngine(script.getType());\n  return executeScript(script,engine,context);\n}"}
{"ids": "77648", "raw_code": "public static PlaceholderFragment newInstance(){\n  PlaceholderFragment fragment=new PlaceholderFragment();\n  Bundle args=new Bundle();\n  fragment.setArguments(args);\n  return fragment;\n}"}
{"ids": "47223", "raw_code": "void removeEQ(Object o){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    Object[] array=queue;\n    for (int i=0, n=size; i < n; i++) {\n      if (o == array[i]) {\n        removeAt(i);\n        break;\n      }\n    }\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "44688", "raw_code": "public T eval(){\n  return eval(bindings());\n}"}
{"ids": "85094", "raw_code": "public void add(XMPPathSegment segment){\n  segments.add(segment);\n}"}
{"ids": "54644", "raw_code": "private void nextSync(){\n  if (syncItemIterator.hasNext()) {\n    partialStartTime=System.currentTimeMillis();\n    currentSyncItem=syncItemIterator.next();\n    currentSyncItem.sync(this,hostConnection,callbackHandler,contentResolver);\n  }\n else {\n    LogUtils.LOGD(TAG,\"Sync finished for all items. Total time: \" + (System.currentTimeMillis() - startTime));\n    if (listener != null) {\n      listener.onSyncFinished(this);\n    }\n    syncService.stopSelf(serviceStartId);\n  }\n}"}
{"ids": "68931", "raw_code": "public String decode(String encoded){\n  JsonObject object=new JsonObject(encoded);\n  JsonArray headers=object.getJsonArray(\"headers\");\n  for (  Object headerObj : headers) {\n    JsonArray header=(JsonArray)headerObj;\n    String key=header.getString(0);\n    String value=header.getString(1);\n    if (key.equalsIgnoreCase(CONTENT_TYPE) && (value.contains(\"text/\") || value.contains(APPLICATION_JSON))) {\n      try {\n        object.put(\"payloadObject\",new JsonObject(new String(object.getBinary(PAYLOAD),Charset.forName(UTF_8))));\n      }\n catch (      DecodeException e) {\n        object.put(\"payloadString\",new String(object.getBinary(PAYLOAD),Charset.forName(UTF_8)));\n      }\n      object.remove(PAYLOAD);\n      break;\n    }\n  }\n  return object.toString();\n}"}
{"ids": "60041", "raw_code": "public boolean matchesWord(){\n  return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));\n}"}
{"ids": "84503", "raw_code": "public static boolean containsWhitespace(final CharSequence seq){\n  if (isEmpty(seq)) {\n    return false;\n  }\n  final int strLen=seq.length();\n  for (int i=0; i < strLen; i++) {\n    if (Character.isWhitespace(seq.charAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "75008", "raw_code": "public boolean isWheelEvent(){\n  return isWheelEvent;\n}"}
{"ids": "69865", "raw_code": "public Connection(String clientHandle,String clientId,String host,int port,Context context,MqttAndroidClient client,boolean sslConnection){\n  this.clientHandle=clientHandle;\n  this.clientId=clientId;\n  this.host=host;\n  this.port=port;\n  this.context=context;\n  this.client=client;\n  this.sslConnection=sslConnection;\n  history=new ArrayList<String>();\n  StringBuffer sb=new StringBuffer();\n  sb.append(\"Client: \");\n  sb.append(clientId);\n  sb.append(\" created\");\n  addAction(sb.toString());\n}"}
{"ids": "62091", "raw_code": "public void recordState(DialogueState state,String name){\n  if (frame != null) {\n    stateMonitorTab.recordState(state,name);\n  }\n}"}
{"ids": "61374", "raw_code": "public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException {\n  flushPending();\n  String data=node.getNodeValue();\n  if (data != null) {\n    final int length=data.length();\n    if (length > m_charsBuff.length) {\n      m_charsBuff=new char[length * 2 + 1];\n    }\n    data.getChars(0,length,m_charsBuff,0);\n    characters(m_charsBuff,0,length);\n  }\n}"}
{"ids": "66793", "raw_code": "private void computeFiltersFromDefault(IndicatorViewState oldState){\n  filters=new ArrayList<Filter>();\n  Set<String> defaultFilterNames=new HashSet<String>();\n  for (  Filter defaultFilter : defaultFilters) {\n    filters.add(defaultFilter);\n    if (defaultFilter.name != null)     defaultFilterNames.add(defaultFilter.name);\n  }\n  if (oldState != null) {\n    for (    Filter oldFilter : oldState.filters) {\n      if (oldFilter.name == null || !defaultFilterNames.contains(oldFilter.name))       filters.add(oldFilter);\n    }\n  }\n}"}
{"ids": "31131", "raw_code": "private static Data parseName(Set me,Set peer){\n  if (me == null) {\n    throw new NullPointerException(\"local principals must be non-empty\");\n  }\n else   if (me.isEmpty()) {\n    throw new IllegalArgumentException(\"local principals must be non-empty\");\n  }\n  Data data=new Data();\n  StringBuffer b=new StringBuffer();\n  data.me=cons(me,b);\n  if (peer != null && !peer.isEmpty()) {\n    b.append(\" peer \");\n    data.peer=cons(peer,b);\n  }\n  data.name=b.toString();\n  return data;\n}"}
{"ids": "7124", "raw_code": "public static boolean streamContentEquals(InputStream s1,InputStream s2) throws IOException {\n  try {\n    int b1, b2;\n    do {\n      b1=s1.read();\n      b2=s2.read();\n    }\n while ((b1 == b2) && (b1 != -1));\n    return b1 == b2;\n  }\n  finally {\n    try {\n      s1.close();\n      s2.close();\n    }\n catch (    Exception e) {\n    }\n  }\n}"}
{"ids": "35424", "raw_code": "public ContentNode parse(JSDocCharScanner scanner,TagDictionary<AbstractInlineTagDefinition> inlineTagsDictinary){\n  ComposedContent description=DomFactory.eINSTANCE.createComposedContent();\n  if (!scanner.hasNext()) {\n    return null;\n  }\n  if (nextIsTagTitle(scanner)) {\n    return null;\n  }\n  int start=scanner.nextOffset();\n  int end=start;\n  StringBuilder strb=new StringBuilder();\n  while (scanner.hasNext()) {\n    char c=scanner.peek();\n    if (regionStart(c)) {\n      ScannerState st=scanner.saveState();\n      InlineTag tag=(InlineTag)parseRegion(scanner,inlineTagsDictinary);\n      if (tag != null) {\n        saveTextTokens(description,start,end,strb);\n        strb=new StringBuilder();\n        start=end;\n        description.getContents().add(tag);\n        continue;\n      }\n else {\n        scanner.restoreState(st);\n        if (start == end) {\n          assert false;\n        }\n      }\n    }\n    scanner.next();\n    if (JSDocCharScanner.isNL(c)) {\n      if (scanner.hasNext() && !nextIsTagTitle(scanner)) {\n        end=scanner.offset();\n      }\n else {\n        break;\n      }\n    }\n    strb.append(c);\n    end=scanner.offset();\n  }\n  String pendingData=strb.toString();\n  if (pendingData.isEmpty() == false) {\n    saveTextTokens(description,start,end,strb);\n  }\nswitch (description.getContents().size()) {\ncase 0:\n    return null;\ncase 1:\n  return description.getContents().get(0);\ndefault :\nreturn description;\n}\n}"}
{"ids": "2954", "raw_code": "static public void add(Errors errors,String text){\n  if (errors == null) {\n    return;\n  }\n  errors.add(text);\n}"}
{"ids": "8694", "raw_code": "public synchronized void removeIconsForPkg(String packageName,UserHandleCompat user){\n  removeFromMemCacheLocked(packageName,user);\n  long userSerial=mUserManager.getSerialNumberForUser(user);\n  mIconDb.delete(IconDB.COLUMN_COMPONENT + \" LIKE ? AND \" + IconDB.COLUMN_USER+ \" = ?\",new String[]{packageName + \"/%\",Long.toString(userSerial)});\n}"}
{"ids": "72977", "raw_code": "public boolean contains(String sCategory){\n  return CategoryEstimations.containsKey(sCategory);\n}"}
{"ids": "25927", "raw_code": "private void createRecursivly(String path) throws KeeperException, InterruptedException {\n  try {\n    if (zk.exists(path,true) == null && path.length() > 0) {\n      String temp=path.substring(0,path.lastIndexOf(File.separator));\n      createRecursivly(temp);\n      zk.create(path,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n else {\n      return;\n    }\n  }\n catch (  KeeperException e) {\n    throw e;\n  }\ncatch (  InterruptedException e) {\n    throw e;\n  }\n}"}
{"ids": "50769", "raw_code": "public void zoom(double x,double y,double factor){\n  double rangeX=Math.abs(currentExtent.getMaxX() - currentExtent.getMinX());\n  double rangeY=Math.abs(currentExtent.getMaxY() - currentExtent.getMinY());\n  currentExtent.setMinX(x - (rangeX * factor) / 2.0);\n  currentExtent.setMinY(y - (rangeY * factor) / 2.0);\n  currentExtent.setMaxX(x + (rangeX * factor) / 2.0);\n  currentExtent.setMaxY(y + (rangeY * factor) / 2.0);\n  addToExtentHistory(currentExtent);\n}"}
{"ids": "26576", "raw_code": "protected boolean isOutputLineExpected(final String line,final String[] expectedPrefixes,final boolean filePathsAreExpected){\n  final String trimmed=line != null ? line.trim() : null;\n  if (StringUtils.isNotEmpty(trimmed)) {\n    if (filePathsAreExpected && isFilePath(line)) {\n      return true;\n    }\n    if (expectedPrefixes != null) {\n      for (      final String prefix : expectedPrefixes) {\n        if (StringUtils.startsWithIgnoreCase(line,prefix)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  return true;\n}"}
{"ids": "56968", "raw_code": "public static String meterToString(OFInstructionMeter inst,Logger log){\n  return STR_SUB_GOTO_METER_METER_ID + \"=\" + Long.toString(inst.getMeterId());\n}"}
{"ids": "82690", "raw_code": "public boolean isImageCachable(int w,int h){\n  return (w * h) < maxSingleImagePixelSize;\n}"}
{"ids": "61553", "raw_code": "public void freeEntry(BasicPoolEntry entry){\n  if (numEntries < 1) {\n    throw new IllegalStateException(\"No entry created for this pool. \" + route);\n  }\n  if (numEntries <= freeEntries.size()) {\n    throw new IllegalStateException(\"No entry allocated from this pool. \" + route);\n  }\n  freeEntries.add(entry);\n}"}
{"ids": "70195", "raw_code": "public boolean isIn(Coords coords){\n  return coordinates.contains(coords);\n}"}
{"ids": "16539", "raw_code": "private DialogBaseUnits computeDialogBaseUnits(FontMetrics metrics){\n  double averageCharWidth=computeAverageCharWidth(metrics,averageCharWidthTestString);\n  int ascent=metrics.getAscent();\n  double height=ascent > 14 ? ascent : ascent + (15 - ascent) / 3;\n  DialogBaseUnits dialogBaseUnits=new DialogBaseUnits(averageCharWidth,height);\n  if (LOGGER.isLoggable(Level.CONFIG)) {\n    LOGGER.config(\"Computed dialog base units \" + dialogBaseUnits + \" for: \"+ metrics.getFont());\n  }\n  return dialogBaseUnits;\n}"}
{"ids": "15767", "raw_code": "public synchronized void close(){\n  try {\n    writer.close();\n  }\n catch (  IOException ioe) {\n    ioe.printStackTrace();\n  }\n}"}
{"ids": "68162", "raw_code": "public static boolean isProxyUri(final String url){\n  notNull(url);\n  return url.contains(getRequestHandlerPath());\n}"}
{"ids": "43125", "raw_code": "public void addAction(Action act){\n  if (act.entry != null && act.entry != this) {\n    Log.e(TAG,\"addAction failed. Already applied to another notification - \" + act.entry.ID + \". Current notification is \"+ ID);\n    return;\n  }\n  if (mActions == null) {\n    mActions=new ArrayList<Action>();\n  }\n  if (mActions.size() == 3) {\n    Log.w(TAG,\"only suppport up to 3 actions.\");\n    return;\n  }\n  act.entry=this;\n  mActions.add(act);\n}"}
{"ids": "31350", "raw_code": "private void name(StringBuilder builder){\n  String name=type.getName();\n  if (name != null) {\n    builder.append('@');\n    builder.append(name);\n    builder.append('(');\n  }\n}"}
{"ids": "36452", "raw_code": "boolean ensureProcessSizeFits(final ExecutionUnit process,final Rectangle2D rect){\n  Dimension processSize=model.getProcessSize(process);\n  if (processSize == null) {\n    return false;\n  }\n  if (rect == null) {\n    return false;\n  }\n  boolean needsResize=false;\n  double processWidth=processSize.getWidth() * (1 / model.getZoomFactor());\n  double processHeight=processSize.getHeight() * (1 / model.getZoomFactor());\n  double width=processWidth;\n  double height=processHeight;\n  if (processSize != null) {\n    if (processWidth < rect.getMaxX() + ProcessDrawer.GRID_X_OFFSET) {\n      double diff=rect.getMaxX() + ProcessDrawer.GRID_X_OFFSET - processWidth;\n      if (diff > ProcessDrawer.GRID_X_OFFSET) {\n        width+=diff;\n      }\n else {\n        width+=ProcessDrawer.GRID_X_OFFSET;\n      }\n      needsResize=true;\n    }\n    if (processHeight < rect.getMaxY() + ProcessDrawer.GRID_Y_OFFSET) {\n      double diff=rect.getMaxY() + ProcessDrawer.GRID_Y_OFFSET - processHeight;\n      if (diff > ProcessDrawer.GRID_Y_OFFSET) {\n        height+=diff;\n      }\n else {\n        height+=ProcessDrawer.GRID_Y_OFFSET;\n      }\n      needsResize=true;\n    }\n    if (needsResize) {\n      model.setProcessWidth(process,width);\n      model.setProcessHeight(process,height);\n      balance();\n      model.fireProcessSizeChanged();\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "13845", "raw_code": "public void handleTblHandlersButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {\n  try {\n    Map values=getValues();\n    onBeforeSaveProfile(values);\n    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);\n    WSAuthNServicesHandlersAddViewBean vb=(WSAuthNServicesHandlersAddViewBean)getViewBean(WSAuthNServicesHandlersAddViewBean.class);\n    unlockPageTrail();\n    passPgSessionMap(vb);\n    vb.forwardTo(getRequestContext());\n  }\n catch (  AMConsoleException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());\n  }\n}"}
{"ids": "37848", "raw_code": "public void reduceDL(double expFPRate,boolean checkErr){\n  boolean needUpdate=false;\n  double[] rulesetStat=new double[6];\n  for (int j=0; j < m_SimpleStats.size(); j++) {\n    rulesetStat[0]+=m_SimpleStats.get(j)[0];\n    rulesetStat[2]+=m_SimpleStats.get(j)[2];\n    rulesetStat[4]+=m_SimpleStats.get(j)[4];\n    if (j == m_SimpleStats.size() - 1) {\n      rulesetStat[1]=m_SimpleStats.get(j)[1];\n      rulesetStat[3]=m_SimpleStats.get(j)[3];\n      rulesetStat[5]=m_SimpleStats.get(j)[5];\n    }\n  }\n  for (int k=m_SimpleStats.size() - 1; k >= 0; k--) {\n    double[] ruleStat=m_SimpleStats.get(k);\n    double ifDeleted=potential(k,expFPRate,rulesetStat,ruleStat,checkErr);\n    if (!Double.isNaN(ifDeleted)) {\n      if (k == (m_SimpleStats.size() - 1)) {\n        removeLast();\n      }\n else {\n        m_Ruleset.remove(k);\n        needUpdate=true;\n      }\n    }\n  }\n  if (needUpdate) {\n    m_Filtered=null;\n    m_SimpleStats=null;\n    countData();\n  }\n}"}
{"ids": "40056", "raw_code": "@Override public void onDrawFrame(GL10 gl10){\n  GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);\n  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);\n  GLES20.glEnable(GLES20.GL_DEPTH_TEST);\n  GLES20.glEnable(GLES20.GL_CULL_FACE);\n  GLES20.glEnable(GLES20.GL_BLEND);\n  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);\n  long currentTimeMillis=System.currentTimeMillis();\n  updateWithDelta(currentTimeMillis - lastTimeMillis);\n  lastTimeMillis=currentTimeMillis;\n}"}
{"ids": "45087", "raw_code": "public void removeLineHighlight(Object tag){\n  if (tag instanceof LineHighlightInfo) {\n    lineHighlights.remove(tag);\n    repaintLine((LineHighlightInfo)tag);\n  }\n}"}
{"ids": "9913", "raw_code": "private Element createSingleLogOutForCastleAsIDP(String binding) throws Exception {\n  String entityID=idmClient.getEntityID(tenantName);\n  String ssoLoc=convertToIPV6ShortForm(entityID);\n  if (ssoLoc == null) {\n    ssoLoc=tenantName;\n  }\n  String sloLoc=ssoLoc.replaceAll(\"/Metadata/\",\"/SLO/\");\n  Element slosEle=createEndPoint(SAMLNames.SLOS,binding,sloLoc,null);\n  return slosEle;\n}"}
{"ids": "30497", "raw_code": "public static void unregisterTransportMBean(String containerName) throws Exception {\n  MBeanServer mBeanServer=getMBeanServer(containerName);\n  if (mBeanServer == null)   return;\n  ObjectName transportMBeanObjectName=TransportConstants.createTransportMBeanObjectName(containerName);\n  if (mBeanServer.isRegistered(transportMBeanObjectName)) {\n    mBeanServer.unregisterMBean(transportMBeanObjectName);\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.fine(\"Transport MBean was unregistered successfully.\");\n    }\n  }\n}"}
{"ids": "18135", "raw_code": "public void addNodesInDocOrder(NodeIterator iterator,XPathContext support){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));\n  Node node;\n  while (null != (node=iterator.nextNode())) {\n    addNodeInDocOrder(node,support);\n  }\n}"}
{"ids": "82843", "raw_code": "protected void uninstallDefaults(){\n  SeaGlassContext context=getContext(splitPane,ENABLED);\n  style.uninstallDefaults(context);\n  context.dispose();\n  style=null;\n  context=getContext(splitPane,Region.SPLIT_PANE_DIVIDER,ENABLED);\n  dividerStyle.uninstallDefaults(context);\n  context.dispose();\n  dividerStyle=null;\n  super.uninstallDefaults();\n}"}
{"ids": "80539", "raw_code": "public void subtractAmount(final String amount){\n  subtractAmount(Integer.parseInt(amount));\n}"}
{"ids": "55762", "raw_code": "public void append(CharSequence s){\n  text.append(s);\n}"}
{"ids": "539", "raw_code": "public void invalidateAll(){\n  if (m_tuples == null)   return;\n  for (int i=0; i < m_tuples.length; ++i)   invalidate(i);\n}"}
{"ids": "28078", "raw_code": "public void add(final long addr){\n  addrs.add(addr);\n}"}
{"ids": "2088", "raw_code": "public static boolean isBlackListed(@Nonnull Size size,@Nonnull String blacklistString){\n  String[] blacklistStringArray=blacklistString.split(\",\");\n  if (blacklistStringArray.length == 0) {\n    return false;\n  }\n  Set<String> blacklistedSizes=new HashSet(Lists.newArrayList(blacklistStringArray));\n  return isBlackListed(size,blacklistedSizes);\n}"}
{"ids": "15559", "raw_code": "static private void _writeDecRef(Writer out,char ch) throws IOException {\n  if (ch == '\\u20ac') {\n    out.write(\"&euro;\");\n    return;\n  }\n  out.write(\"&#\");\n  int i=(int)ch;\n  if (i > 10000) {\n    out.write('0' + (i / 10000));\n    i=i % 10000;\n    out.write('0' + (i / 1000));\n    i=i % 1000;\n    out.write('0' + (i / 100));\n    i=i % 100;\n    out.write('0' + (i / 10));\n    i=i % 10;\n    out.write('0' + i);\n  }\n else   if (i > 1000) {\n    out.write('0' + (i / 1000));\n    i=i % 1000;\n    out.write('0' + (i / 100));\n    i=i % 100;\n    out.write('0' + (i / 10));\n    i=i % 10;\n    out.write('0' + i);\n  }\n else {\n    out.write('0' + (i / 100));\n    i=i % 100;\n    out.write('0' + (i / 10));\n    i=i % 10;\n    out.write('0' + i);\n  }\n  out.write(';');\n}"}
{"ids": "40581", "raw_code": "protected byte[] inputStreamToByteArray(InputStream is) throws IOException {\n  ByteArrayOutputStream bos=new ByteArrayOutputStream();\n  int next=is.read();\n  while (next > -1) {\n    bos.write(next);\n    next=is.read();\n  }\n  bos.flush();\n  is.close();\n  return bos.toByteArray();\n}"}
{"ids": "41452", "raw_code": "private boolean isAReferenceTag(String str){\n  if (str == null) {\n    return false;\n  }\n  return str.indexOf(\"<\") == 0 && str.lastIndexOf(\">\") == (str.length() - 1);\n}"}
{"ids": "43118", "raw_code": "protected static String encode(String url){\n  StringBuilder encoder=new StringBuilder();\n  for (  char chr : url.toCharArray()) {\n    byte chrByte=(byte)chr;\n    if ((chrByte <= 32 || chrByte >= 127 || chr == '#' || chr == '%')) {\n      encoder.append(String.format(\"%%%02X\",chrByte));\n    }\n else {\n      encoder.append(chr);\n    }\n  }\n  return encoder.toString();\n}"}
{"ids": "5631", "raw_code": "public static long now(){\n  return System.currentTimeMillis();\n}"}
{"ids": "40952", "raw_code": "private BinlogPosition findHeartbeat(MaxwellReplicator r) throws Exception {\n  r.startReplicator();\n  for (RowMap row=r.getRow(); row != null; row=r.getRow()) {\n    if (Objects.equals(r.getLastHeartbeatRead(),recoveryInfo.heartbeat))     return row.getPosition();\n  }\n  return null;\n}"}
{"ids": "54260", "raw_code": "private Configure(){\n  Properties p=new Properties();\n  Map args=new HashMap();\n  args.putAll(System.getenv());\n  args.putAll(System.getProperties());\n  p.putAll(args);\n  this.property=p;\n  reload(false);\n}"}
{"ids": "51765", "raw_code": "private void handleTruncatedInfo(final StatementInfo info) throws SQLException {\n  final byte[] originalInfo=statement.getStatementInfoRequestItems();\n  final byte[] newInfoItems=new byte[originalInfo.length + 2 * 4];\n  int newIndex=0;\n  for (  final byte infoItem : originalInfo) {\n    assert newIndex < newInfoItems.length : \"newInfoItems size too short\";\nswitch (infoItem) {\ncase ISCConstants.isc_info_sql_select:\ncase ISCConstants.isc_info_sql_bind:\n      final RowDescriptorBuilder currentBuilder=infoItem == ISCConstants.isc_info_sql_select ? info.fieldBuilder : info.parameterBuilder;\n    final int descriptorIndex=currentBuilder != null ? currentBuilder.getFirstUnprocessedIndex() + 1 : 1;\n  newInfoItems[newIndex++]=ISCConstants.isc_info_sql_sqlda_start;\nnewInfoItems[newIndex++]=2;\nnewInfoItems[newIndex++]=(byte)(descriptorIndex & 0xFF);\nnewInfoItems[newIndex++]=(byte)(descriptorIndex >> 8);\nnewInfoItems[newIndex++]=infoItem;\nbreak;\ndefault :\nnewInfoItems[newIndex++]=infoItem;\nbreak;\n}\n}\nassert newIndex == newInfoItems.length : \"newInfoItems size too long\";\ninfo.requestBufferSize=Math.min(2 * info.requestBufferSize,statement.getMaxSqlInfoSize());\ninfo.buffer=statement.getSqlInfo(newInfoItems,info.requestBufferSize);\ninfo.currentIndex=0;\n}"}
{"ids": "4882", "raw_code": "public static String stripFileExtension(String name){\n  int pos=name.lastIndexOf('.');\n  if (pos > 0 & pos < name.length() - 1)   return name.substring(0,pos);\n  return name;\n}"}
{"ids": "26509", "raw_code": "private static void pushTransactionStartStamp(Transaction t){\n  Map<Transaction,Timestamp> map=suspendedTxStartStamps.get();\n  Timestamp stamp=transactionStartStamp.get();\n  if (stamp != null) {\n    map.put(t,stamp);\n  }\n else {\n    Debug.logError(\"Error in transaction handling - no start stamp to push.\",module);\n  }\n}"}
{"ids": "64718", "raw_code": "private int indexedBinarySearch(List<S2CellId> l,S2CellId key,int low){\n  int high=l.size() - 1;\n  while (low <= high) {\n    int mid=(low + high) >> 1;\n    S2CellId midVal=l.get(mid);\n    int cmp=midVal.compareTo(key);\n    if (cmp < 0) {\n      low=mid + 1;\n    }\n else     if (cmp > 0) {\n      high=mid - 1;\n    }\n else {\n      return mid;\n    }\n  }\n  return low;\n}"}
{"ids": "81431", "raw_code": "public Variable[] findLocalArrays(){\n  List<Variable> arrays=new ArrayList<Variable>();\n  for (ListIterator<Variable> iterator=fLocalVariables.listIterator(fLocalVariables.size()); iterator.hasPrevious(); ) {\n    Variable localVariable=iterator.previous();\n    if (localVariable.isArray())     arrays.add(localVariable);\n  }\n  return arrays.toArray(new Variable[arrays.size()]);\n}"}
{"ids": "33072", "raw_code": "public static int indexOfJavaLikeExtension(String fileName){\n  int fileNameLength=fileName.length();\n  char[][] javaLikeExtensions=getJavaLikeExtensions();\n  extensions:   for (int i=0, length=javaLikeExtensions.length; i < length; i++) {\n    char[] extension=javaLikeExtensions[i];\n    int extensionLength=extension.length;\n    int extensionStart=fileNameLength - extensionLength;\n    int dotIndex=extensionStart - 1;\n    if (dotIndex < 0)     continue;\n    if (fileName.charAt(dotIndex) != '.')     continue;\n    for (int j=0; j < extensionLength; j++) {\n      if (fileName.charAt(extensionStart + j) != extension[j])       continue extensions;\n    }\n    return dotIndex;\n  }\n  return -1;\n}"}
{"ids": "5031", "raw_code": "public ShapeTileSimplex remove_border_line(int p_no){\n  if (p_no < 0 || p_no >= lines_size()) {\n    return this;\n  }\n  ArrayList<PlaLineInt> new_arr=new ArrayList<PlaLineInt>(lines_size());\n  new_arr.addAll(lines_list);\n  new_arr.remove(p_no);\n  return new ShapeTileSimplex(new_arr);\n}"}
{"ids": "5596", "raw_code": "protected boolean waitBeforeExecution() throws InterruptedException {\n  return true;\n}"}
{"ids": "7087", "raw_code": "static boolean isValidStreamingUrl(String url){\n  return url != null && url.matches(\"^https?:\\\\/\\\\/(www\\\\.)?twitch\\\\.tv\\\\/.+\");\n}"}
{"ids": "25747", "raw_code": "public WebServiceProxy(URL serverURL,ExecutorService executorService){\n  this(serverURL,executorService,0,0);\n}"}
{"ids": "51362", "raw_code": "private static byte[] exposeByteArrayInputStreamBytes(ByteArrayInputStream bais){\n  byte[] buffer;\nsynchronized (bais) {\n    byte[] buf;\n    int pos;\n    try {\n      buf=(byte[])BAIS_BUF.get(bais);\n      pos=BAIS_POS.getInt(bais);\n    }\n catch (    IllegalAccessException iae) {\n      throw new AssertionError(iae);\n    }\n    int available=bais.available();\n    if (pos == 0 && buf.length == available) {\n      buffer=buf;\n    }\n else {\n      buffer=new byte[available];\n      System.arraycopy(buf,pos,buffer,0,available);\n    }\n    bais.skip(available);\n  }\n  return buffer;\n}"}
{"ids": "78691", "raw_code": "private void restoreData(){\n  Map<String,?> map=preferenceUtils.getAll();\n  Set<String> strings=map.keySet();\n  for (  String string : strings) {\n    if (string.startsWith(SharedPreferenceUtils.keyTestMode)) {\n      preferenceUtils.restoreKey(string);\n    }\n  }\n  refreshKeyValues();\n}"}
{"ids": "78229", "raw_code": "public String putImage(String theFolder,String theImageName,Bitmap theBitmap){\n  if (theFolder == null || theImageName == null || theBitmap == null)   return null;\n  this.DEFAULT_APP_IMAGEDATA_DIRECTORY=theFolder;\n  String mFullPath=setupFullPath(theImageName);\n  if (!mFullPath.equals(\"\")) {\n    lastImagePath=mFullPath;\n    saveBitmap(mFullPath,theBitmap);\n  }\n  return mFullPath;\n}"}
{"ids": "26612", "raw_code": "public Class<?> type(){\n  if (isClass) {\n    return (Class<?>)object;\n  }\n else {\n    return object.getClass();\n  }\n}"}
{"ids": "82155", "raw_code": "void addToExternalCSS(CSSElement cssElement){\n  if (externalCSS == null) {\n    externalCSS=new Vector();\n  }\n  externalCSS.addElement(cssElement);\n}"}
{"ids": "72245", "raw_code": "private void remove(String world,PermissionHolder holder,String permission){\n  try {\n    if (world != null && !world.equals(\"\")) {\n      holder.unsetPermission(permission,server,world);\n    }\n else {\n      holder.unsetPermission(permission,server);\n    }\n  }\n catch (  ObjectLacksException ignored) {\n  }\n  save(holder);\n}"}
{"ids": "51259", "raw_code": "private ConcurrentSkipListMap.Node<K,V> hiNode(){\n  if (hi == null)   return m.findLast();\n else   if (hiInclusive)   return m.findNear(hi,LT | EQ);\n else   return m.findNear(hi,LT);\n}"}
{"ids": "13635", "raw_code": "public static final ImagePoint convertPoint(MapPoint mapPoint,MapEnvelope mapEnv,int imgHeight,int imgWidth){\n  long imageY=Math.round(convertY(mapPoint,mapEnv,imgHeight));\n  long imageX=Math.round(convertX(mapPoint,mapEnv,imgWidth));\n  return new ImagePoint(imageX,imageY);\n}"}
{"ids": "73405", "raw_code": "private void checkUsingAdaptation(){\n  if (tsUseAdaptation.isSelected()) {\n    tfAdaptationTime.setEnabled(true);\n    tfAdaptationParam.setEnabled(true);\n  }\n else {\n    tfAdaptationTime.setEnabled(false);\n    tfAdaptationParam.setEnabled(false);\n  }\n}"}
{"ids": "7869", "raw_code": "public Quarter(int quarter,Year year){\n  if ((quarter < FIRST_QUARTER) || (quarter > LAST_QUARTER)) {\n    throw new IllegalArgumentException(\"Quarter outside valid range.\");\n  }\n  this.year=(short)year.getYear();\n  this.quarter=(byte)quarter;\n  peg(Calendar.getInstance());\n}"}
{"ids": "28610", "raw_code": "public void sendRequestVoteRequest(boolean isPrevote) throws GondolaException {\n  if (!enabled || masterId >= 0) {\n    return;\n  }\n  if (!isPrevote) {\n    currentTerm++;\n    votedFor=-1;\n    save(currentTerm,memberId);\n    votedFor=memberId;\n  }\n  prevotesOnly=isPrevote;\n  Message message=pool.checkout();\n  try {\n    saveQueue.getLatest(savedRid);\n    message.requestVoteRequest(memberId,currentTerm,isPrevote,savedRid);\n    peers.forEach(null);\n  }\n  finally {\n    message.release();\n  }\n  prevoteTs=clock.now() + (long)((Math.random() * prevotePeriod));\n  if (!isPrevote) {\n    prevoteTs+=electionTimeout;\n  }\n}"}
{"ids": "21735", "raw_code": "private List<String> filterTargetsFromResponse(Set<String> varrayTaggedPortWWNs,Map<String,List<String>> initiatorTargetMap,String initiatorKey){\n  log.debug(\"START - filterTargetsFromResponse\");\n  List<String> filteredTargetList=new ArrayList<String>();\n  List<String> targetPortListFromResponse=initiatorTargetMap.get(initiatorKey);\n  for (  String portWWN : targetPortListFromResponse) {\n    if (varrayTaggedPortWWNs.contains(portWWN) || varrayTaggedPortWWNs.contains(portWWN.toUpperCase())) {\n      filteredTargetList.add(portWWN.toUpperCase());\n    }\n  }\n  log.debug(\"END - filterTargetsFromResponse\");\n  return filteredTargetList;\n}"}
{"ids": "70122", "raw_code": "public PilotingRollData checkManeuver(MoveStep step,EntityMovementType overallMoveType){\n  PilotingRollData roll=getBasePilotingRoll(overallMoveType);\n  if ((step == null) || (step.getType() != MoveStepType.MANEUVER)) {\n    roll.addModifier(TargetRoll.CHECK_FALSE,\"Check false: Entity is not attempting to get up.\");\n    return roll;\n  }\n  boolean sideSlipMod=(this instanceof ConvFighter) && isVSTOL();\n  roll.append(new PilotingRollData(getId(),ManeuverType.getMod(step.getManeuverType(),sideSlipMod),ManeuverType.getTypeName(step.getManeuverType()) + \" maneuver\"));\n  return roll;\n}"}
{"ids": "84989", "raw_code": "public static List<String> parseProgramArgs(ILaunchConfiguration launchConfig) throws CoreException {\n  return parseArgs(launchConfig.getAttribute(IJavaLaunchConfigurationConstants.ATTR_PROGRAM_ARGUMENTS,\"\"));\n}"}
{"ids": "45940", "raw_code": "@Override public synchronized MXBeanMapping mappingForType(Type objType,MXBeanMappingFactory factory) throws OpenDataException {\n  if (inProgress.containsKey(objType)) {\n    throw new OpenDataException(\"Recursive data structure, including \" + typeName(objType));\n  }\n  MXBeanMapping mapping;\n  mapping=getMapping(objType);\n  if (mapping != null)   return mapping;\n  inProgress.put(objType,objType);\n  try {\n    mapping=makeMapping(objType,factory);\n  }\n catch (  OpenDataException e) {\n    throw openDataException(\"Cannot convert type: \" + typeName(objType),e);\n  }\n finally {\n    inProgress.remove(objType);\n  }\n  putMapping(objType,mapping);\n  return mapping;\n}"}
{"ids": "45901", "raw_code": "public static Element createElementInSignature11Space(Document doc,String elementName){\n  if (doc == null) {\n    throw new RuntimeException(\"Document is null\");\n  }\n  if ((ds11Prefix == null) || (ds11Prefix.length() == 0)) {\n    return doc.createElementNS(Constants.SignatureSpec11NS,elementName);\n  }\n  return doc.createElementNS(Constants.SignatureSpec11NS,ds11Prefix + \":\" + elementName);\n}"}
{"ids": "75030", "raw_code": "public void removeElementAt(final int index){\n  entries.remove(index);\n}"}
{"ids": "12844", "raw_code": "public static void c2ir(double c[],int nc,double hh[],int leng){\n  hh[0]=Math.exp(c[0]);\n  for (int n=1; n < leng; n++) {\n    double d=0;\n    int upl=(n >= nc) ? nc - 1 : n;\n    for (int k=1; k <= upl; k++)     d+=k * c[k] * hh[n - k];\n    hh[n]=d / n;\n  }\n}"}
{"ids": "42294", "raw_code": "public void close(){\n  _ncGuards=null;\n}"}
{"ids": "21450", "raw_code": "public void processIndication(Hashtable<String,String> cimNotification){\n  String cimIndicationType=getCimIndicationType(cimNotification);\n  if (_monitoringPropertiesLoader.isToLogIndications()) {\n    _logger.debug(\"Indication with key : value pairs received --> \\n\" + getIndicationData(cimNotification));\n  }\n  if (cimIndicationType != null && cimIndicationType.equals(CimConstants.CIM_ALERT_INDICATION_TYPE)) {\n    if (_monitoringPropertiesLoader.isToLogIndications()) {\n      _logger.debug(\"CimIndication of type \\\"Alert\\\" received\");\n    }\n    _alertProcessor.processIndication(cimNotification);\n  }\n else   if (cimIndicationType != null && cimIndicationType.equals(CimConstants.CIM_INST_INDICATION_TYPE)) {\n    if (_monitoringPropertiesLoader.isToLogIndications()) {\n      _logger.debug(\"CimIndication of type \\\"Instance\\\" received\");\n    }\n    _eventProcessor.processIndication(cimNotification);\n  }\n else {\n    if (_monitoringPropertiesLoader.isToLogIndications()) {\n      _logger.debug(\"Unknown CIM Inidcation received {}\",cimIndicationType);\n    }\n  }\n}"}
{"ids": "69408", "raw_code": "public ReplicationJob createJobForCopyTable(long auditLogId,long auditLogEntryCreateTime,Table table) throws StateUpdateException {\n  ReplicationOperation replicationOperation=HiveUtils.isPartitioned(table) ? ReplicationOperation.COPY_PARTITIONED_TABLE : ReplicationOperation.COPY_UNPARTITIONED_TABLE;\n  Map<String,String> extras=new HashMap<>();\n  extras.put(PersistedJobInfo.AUDIT_LOG_ID_EXTRAS_KEY,Long.toString(auditLogId));\n  extras.put(PersistedJobInfo.AUDIT_LOG_ENTRY_CREATE_TIME_KEY,Long.toString(auditLogEntryCreateTime));\n  PersistedJobInfo persistedJobInfo=jobInfoStore.resilientCreate(replicationOperation,ReplicationStatus.PENDING,ReplicationUtils.getLocation(table),srcCluster.getName(),new HiveObjectSpec(table),Collections.emptyList(),ReplicationUtils.getTldt(table),Optional.empty(),Optional.empty(),extras);\n  HiveObjectSpec spec=new HiveObjectSpec(table);\n  Optional<Path> tableLocation=ReplicationUtils.getLocation(table);\nswitch (replicationOperation) {\ncase COPY_UNPARTITIONED_TABLE:\n    return new ReplicationJob(conf,new CopyUnpartitionedTableTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,spec,tableLocation,directoryCopier,true),onStateChangeHandler,persistedJobInfo);\ncase COPY_PARTITIONED_TABLE:\n  return new ReplicationJob(conf,new CopyPartitionedTableTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,spec,tableLocation),onStateChangeHandler,persistedJobInfo);\ndefault :\nthrow new RuntimeException(\"Unhandled operation \" + replicationOperation);\n}\n}"}
{"ids": "58279", "raw_code": "synchronized public void releaseXMLReader(XMLReader reader){\n  if (m_readerManager != null) {\n    m_readerManager.releaseXMLReader(reader);\n  }\n}"}
{"ids": "44588", "raw_code": "public int unFinishSize(){\n  return mUnFinishQueue.size();\n}"}
{"ids": "70533", "raw_code": "public void addSample(int weight,float value){\n  ensureSortedByIndex();\n  Sample newSample=recycledSampleCount > 0 ? recycledSamples[--recycledSampleCount] : new Sample();\n  newSample.index=nextSampleIndex++;\n  newSample.weight=weight;\n  newSample.value=value;\n  samples.add(newSample);\n  totalWeight+=weight;\n  while (totalWeight > maxWeight) {\n    int excessWeight=totalWeight - maxWeight;\n    Sample oldestSample=samples.get(0);\n    if (oldestSample.weight <= excessWeight) {\n      totalWeight-=oldestSample.weight;\n      samples.remove(0);\n      if (recycledSampleCount < MAX_RECYCLED_SAMPLES) {\n        recycledSamples[recycledSampleCount++]=oldestSample;\n      }\n    }\n else {\n      oldestSample.weight-=excessWeight;\n      totalWeight-=excessWeight;\n    }\n  }\n}"}
{"ids": "25080", "raw_code": "private void specialisedPredicates(){\n  DoublePredicate doublePredicate=null;\n  LongPredicate longPredicate=null;\n}"}
{"ids": "2163", "raw_code": "private static final synchronized int nextPoolId(){\n  return ++poolNumberSequence;\n}"}
{"ids": "40127", "raw_code": "public static boolean secKeyVerify(byte[] seckey){\n  Preconditions.checkArgument(seckey.length == 32);\n  ByteBuffer byteBuff=nativeECDSABuffer.get();\n  if (byteBuff == null || byteBuff.capacity() < seckey.length) {\n    byteBuff=ByteBuffer.allocateDirect(seckey.length);\n    byteBuff.order(ByteOrder.nativeOrder());\n    nativeECDSABuffer.set(byteBuff);\n  }\n  byteBuff.rewind();\n  byteBuff.put(seckey);\n  r.lock();\n  try {\n    return secp256k1_ec_seckey_verify(byteBuff,Secp256k1Context.getContext()) == 1;\n  }\n  finally {\n    r.unlock();\n  }\n}"}
{"ids": "564", "raw_code": "public TreeNodeIterator(Node root,boolean preorder){\n  m_preorder=preorder;\n  m_root=root;\n  m_stack=new ArrayList();\n  m_stack.add(root);\n  if (!preorder) {\n    for (Node n=root.getChild(0); n != null; n=n.getChild(0))     m_stack.add(n);\n  }\n}"}
{"ids": "6811", "raw_code": "public static WritableNativeArray makeNativeArray(List objects){\n  WritableNativeArray nativeArray=new WritableNativeArray();\n  if (objects == null) {\n    return nativeArray;\n  }\n  for (  Object elem : objects) {\n    elem=makeNativeObject(elem);\n    if (elem == null) {\n      nativeArray.pushNull();\n    }\n else     if (elem instanceof Boolean) {\n      nativeArray.pushBoolean((Boolean)elem);\n    }\n else     if (elem instanceof Integer) {\n      nativeArray.pushInt((Integer)elem);\n    }\n else     if (elem instanceof Double) {\n      nativeArray.pushDouble((Double)elem);\n    }\n else     if (elem instanceof String) {\n      nativeArray.pushString((String)elem);\n    }\n else     if (elem instanceof WritableNativeArray) {\n      nativeArray.pushArray((WritableNativeArray)elem);\n    }\n else     if (elem instanceof WritableNativeMap) {\n      nativeArray.pushMap((WritableNativeMap)elem);\n    }\n else {\n      throw new IllegalArgumentException(\"Could not convert \" + elem.getClass());\n    }\n  }\n  return nativeArray;\n}"}
{"ids": "21140", "raw_code": "@Override public void nodeChanged(){\n  log.info(\"Site info changed. Waking up the vdc manager...\");\n  wakeup();\n}"}
{"ids": "36965", "raw_code": "private static NodePair splitBlock(final View view,final Function function,final CodeNode node,final Instruction instruction){\n  boolean before=true;\n  final List<Instruction> beforeInstructions=new ArrayList<Instruction>();\n  final List<Instruction> afterInstructions=new ArrayList<Instruction>();\n  for (  final Instruction nodeInstruction : node.getInstructions()) {\n    if (before) {\n      beforeInstructions.add(nodeInstruction);\n    }\n else {\n      afterInstructions.add(nodeInstruction);\n    }\n    if (nodeInstruction == instruction) {\n      before=false;\n    }\n  }\n  if (afterInstructions.isEmpty()) {\n    return new NodePair(node,null);\n  }\n else {\n    final CodeNode firstNode=view.createCodeNode(function,beforeInstructions);\n    final CodeNode secondNode=view.createCodeNode(function,afterInstructions);\n    firstNode.setColor(node.getColor());\n    secondNode.setColor(DEFAULT_BLOCK_COLOR);\n    for (    final ViewEdge edge : node.getIncomingEdges()) {\n      final ViewEdge newEdge=view.createEdge(edge.getSource(),firstNode,edge.getType());\n      newEdge.setColor(edge.getColor());\n    }\n    for (    final ViewEdge edge : node.getOutgoingEdges()) {\n      final ViewEdge newEdge=view.createEdge(secondNode,edge.getTarget(),edge.getType());\n      newEdge.setColor(edge.getColor());\n    }\n    view.deleteNode(node);\n    return new NodePair(firstNode,secondNode);\n  }\n}"}
{"ids": "39848", "raw_code": "public Pair<String,String> objectToString(final long shopId,final String currency,final BigDecimal regularPrice){\n  return new Pair<String,String>(\"facet_price_\" + shopId + \"_\"+ currency,moneyBridge.objectToString(regularPrice));\n}"}
{"ids": "45237", "raw_code": "public String readLine() throws IOException {\n  StringBuilder line=new StringBuilder();\n  int i;\n  char c;\n  i=read();\n  if (i == -1)   return null;\n  while (i > -1 && i != '\\n' && i != '\\r') {\n    c=(char)(i & 0xFF);\n    line=line.append(c);\n    i=read();\n  }\n  if (i == '\\r') {\n    if ((i=read()) != '\\n')     throw new IOException(\"Unexpected character \" + Integer.toHexString(i) + \". Expected 0x0d. Had read \"+ line);\n  }\n  return line.toString();\n}"}
{"ids": "74112", "raw_code": "static public void forceCreationOfNewIndex(){\n  forceCreationOfNewIndex(false);\n}"}
{"ids": "50076", "raw_code": "public FrameBlock zeroOutOperations(FrameBlock result,IndexRange range,boolean complementary,int iRowStartSrc,int iRowStartDest,int brlen,int iMaxRowsToCopy) throws DMLRuntimeException {\n  int clen=getNumColumns();\n  if (result == null)   result=new FrameBlock(getSchema());\n else {\n    result.reset(0,true);\n    result.setSchema(getSchema());\n  }\n  result.ensureAllocatedColumns(brlen);\n  if (complementary) {\n    for (int r=(int)range.rowStart; r <= range.rowEnd && r + iRowStartDest < brlen; r++) {\n      for (int c=(int)range.colStart; c <= range.colEnd; c++)       result.set(r + iRowStartDest,c,get(r + iRowStartSrc,c));\n    }\n  }\n else {\n    int r=iRowStartDest;\n    for (; r < (int)range.rowStart && r - iRowStartDest < iMaxRowsToCopy; r++)     for (int c=0; c < clen; c++)     result.set(r,c,get(r + iRowStartSrc - iRowStartDest,c));\n    for (; r <= (int)range.rowEnd && r - iRowStartDest < iMaxRowsToCopy; r++) {\n      for (int c=0; c < (int)range.colStart; c++)       result.set(r,c,get(r + iRowStartSrc - iRowStartDest,c));\n      for (int c=(int)range.colEnd + 1; c < clen; c++)       result.set(r,c,get(r + iRowStartSrc - iRowStartDest,c));\n    }\n    for (; r - iRowStartDest < iMaxRowsToCopy; r++)     for (int c=0; c < clen; c++)     result.set(r,c,get(r + iRowStartSrc - iRowStartDest,c));\n  }\n  return result;\n}"}
{"ids": "79135", "raw_code": "public SignalBarrier(){\n  _owner=null;\n}"}
{"ids": "64811", "raw_code": "private static float[] normalize(float[] coefficients){\n  float accumulator=0;\n  for (int x=0; x < coefficients.length; x++) {\n    accumulator+=Math.abs(coefficients[x]);\n  }\n  for (int x=0; x < coefficients.length; x++) {\n    coefficients[x]=coefficients[x] / accumulator;\n  }\n  return coefficients;\n}"}
{"ids": "53616", "raw_code": "protected void printTrack(Track track){\n  DefaultEntityViewInfo vInfo=(DefaultEntityViewInfo)track.getViewInfo();\n  tmpNodeBuffer.clear();\n  tmpNodeBuffer.addAll(track.getNodes());\n  if (!tmpNodeBuffer.isEmpty()) {\n    printLine(imageBdr,tmpNodeBuffer,vInfo,false,false,null);\n    printPoint(imageBdr,tmpNodeBuffer.get(tmpNodeBuffer.size() - 1),vInfo,null);\n  }\n}"}
{"ids": "16070", "raw_code": "private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix){\n  final Object originalPrinter;\n  final Object originalParser;\n  if (iElementPairs.size() > 0) {\n    originalPrinter=iElementPairs.get(iElementPairs.size() - 2);\n    originalParser=iElementPairs.get(iElementPairs.size() - 1);\n  }\n else {\n    originalPrinter=null;\n    originalParser=null;\n  }\n  if (originalPrinter == null || originalParser == null || originalPrinter != originalParser || !(originalPrinter instanceof FieldFormatter)) {\n    throw new IllegalStateException(\"No field to apply suffix to\");\n  }\n  clearPrefix();\n  FieldFormatter newField=new FieldFormatter((FieldFormatter)originalPrinter,suffix);\n  iElementPairs.set(iElementPairs.size() - 2,newField);\n  iElementPairs.set(iElementPairs.size() - 1,newField);\n  iFieldFormatters[newField.getFieldType()]=newField;\n  return this;\n}"}
{"ids": "30140", "raw_code": "public Collection<Cube> all(){\n  return Collections.unmodifiableCollection(cubes);\n}"}
{"ids": "35229", "raw_code": "public static short readUByte(ByteBuffer buffer){\n  byte b=buffer.get();\n  return (short)(b & 0xff);\n}"}
{"ids": "130", "raw_code": "public static double mostToxicRow(Gate g){\n  return Collections.min(g.get_toxicity());\n}"}
{"ids": "79938", "raw_code": "public MultiServer(){\n  this(NetworkConfig.DEFAULT_TCP_PORT,NetworkConfig.DEFAULT_UDP_PORT);\n}"}
{"ids": "23088", "raw_code": "protected String urlString() throws ParseException {\n  StringBuffer retval=new StringBuffer();\n  lexer.selectLexer(\"charLexer\");\n  while (lexer.hasMoreChars()) {\n    char la=lexer.lookAhead(0);\n    if (la == ' ' || la == '\\t' || la == '\\n' || la == '>' || la == '<')     break;\n    lexer.consume(0);\n    retval.append(la);\n  }\n  return retval.toString();\n}"}
{"ids": "12076", "raw_code": "public XmlElement(byte[] encodedDocument){\n  if (encodedDocument == null)   throw new IllegalArgumentException(\"value is null\");\n  this.encoded=encodedDocument.clone();\n}"}
{"ids": "23462", "raw_code": "public void add(int position,int height){\n  int currHeight=mMap.get(position,-1);\n  if (currHeight != height) {\n    if (currHeight == -1) {\n      if (mMap.size() == mMaxSize) {\n        mMap.delete(mOrder.remove(0));\n      }\n    }\n else {\n      mOrder.remove((Integer)position);\n    }\n    mMap.put(position,height);\n    mOrder.add(position);\n  }\n}"}
{"ids": "22039", "raw_code": "@GET @Path(\"/ostenants\") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public OSTenantListRestRep listCoprhdOsTenants(){\n  _log.debug(\"Keystone Service - listCoprhdOsTenants\");\n  List<OSTenant> tenants=getOsTenantsFromCoprhdDb();\n  return map(tenants);\n}"}
{"ids": "17003", "raw_code": "public int read(final byte[] data){\n  init();\n  if (data != null) {\n    rawData=ByteBuffer.wrap(data);\n    rawData.rewind();\n    rawData.order(ByteOrder.LITTLE_ENDIAN);\n    readHeader();\n    if (!err()) {\n      readContents();\n      if (frameCount < 0) {\n        status=STATUS_FORMAT_ERROR;\n      }\n    }\n  }\n else {\n    status=STATUS_OPEN_ERROR;\n  }\n  return status;\n}"}
{"ids": "78945", "raw_code": "private void calculateUniqueValue(Object[] minValue,Object[] uniqueValue){\n  for (int i=0; i < measureCount; i++) {\n    if (type[i] == CarbonCommonConstants.BIG_INT_MEASURE) {\n      uniqueValue[i]=(long)minValue[i] - 1;\n    }\n else     if (type[i] == CarbonCommonConstants.BIG_DECIMAL_MEASURE) {\n      BigDecimal val=(BigDecimal)minValue[i];\n      uniqueValue[i]=(val.subtract(new BigDecimal(1.0)));\n    }\n else {\n      uniqueValue[i]=(double)minValue[i] - 1;\n    }\n  }\n}"}
{"ids": "9852", "raw_code": "@RequestMapping(value=\"/SAML2/SSO/{tenant:.*}\") public void ssoBindingError(Locale locale,@PathVariable(value=\"tenant\") String tenant,HttpServletResponse response) throws IOException {\n  logger.info(\"SSO binding error! The client locale is \" + locale.toString() + \", tenant is \"+ tenant);\n  ssoDefaultTenantBindingError(locale,response);\n}"}
{"ids": "28683", "raw_code": "public long env_end(){\n  return Long.parseLong(fields[50]);\n}"}
{"ids": "41769", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return STRINGS;\ncase 2:\n  return HELLO;\ndefault :\nreturn null;\n}\n}"}
{"ids": "9940", "raw_code": "public X509TrustChainKeySelector(X509Certificate... trustedRoots){\n  _log=LoggerFactory.getLogger(X509TrustChainKeySelector.class);\n  checkCtorArgsNotNull(trustedRoots);\n  _trustAnchors=new HashSet<TrustAnchor>();\n  for (  X509Certificate cert : trustedRoots) {\n    _trustAnchors.add(new TrustAnchor(cert,null));\n  }\n}"}
{"ids": "13033", "raw_code": "@Override public void removeAttributeNS(String namespaceURI,String localName){\n  if (ownerDocument.errorChecking && isReadOnly()) {\n    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"NO_MODIFICATION_ALLOWED_ERR\",null);\n    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);\n  }\n  if (needsSyncData()) {\n    synchronizeData();\n  }\n  if (attributes == null) {\n    return;\n  }\n  attributes.safeRemoveNamedItemNS(namespaceURI,localName);\n}"}
{"ids": "47968", "raw_code": "public boolean drawImage(Image img,AffineTransform xform,ImageObserver obs){\n  if (img == null) {\n    return true;\n  }\n  boolean result;\n  int srcWidth=img.getWidth(null);\n  int srcHeight=img.getHeight(null);\n  if (srcWidth < 0 || srcHeight < 0) {\n    result=false;\n  }\n else {\n    result=drawImageToPlatform(img,xform,null,0,0,srcWidth,srcHeight,false);\n  }\n  return result;\n}"}
{"ids": "13904", "raw_code": "public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {\n  ServerSiteModel model=(ServerSiteModel)getModel();\n  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);\n  String serverName=(String)getPageSessionAttribute(PG_ATTR_SERVER_NAME);\n  String name=(String)getDisplayFieldValue(TF_NAME);\n  name=name.trim();\n  if (name.length() > 0) {\n    try {\n      model.cloneServer(serverName,name);\n      backTrail();\n      ServerSiteViewBean vb=(ServerSiteViewBean)getViewBean(ServerSiteViewBean.class);\n      passPgSessionMap(vb);\n      vb.forwardTo(getRequestContext());\n    }\n catch (    AMConsoleException e) {\n      setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());\n      forwardTo();\n    }\n  }\n else {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",\"serverconfig.clone.server.missing.atributes\");\n    forwardTo();\n  }\n}"}
{"ids": "43604", "raw_code": "public static <TK,FV>FeatureValueCollection<FV> combine(Derivation<TK,FV> hyp){\n  Counter<FV> counter=new ClassicCounter<FV>();\n  for (; hyp != null; hyp=hyp.parent) {\n    if (hyp.features != null) {\n      for (      FeatureValue<FV> feature : hyp.features) {\n        counter.incrementCount(feature.name,feature.value);\n      }\n    }\n  }\n  Set<FV> featureNames=new TreeSet<FV>(counter.keySet());\n  FeatureValueCollection<FV> combinedList=new FeatureValueList<FV>(featureNames.size());\n  for (  FV feature : featureNames) {\n    combinedList.add(new FeatureValue<FV>(feature,counter.getCount(feature)));\n  }\n  return combinedList;\n}"}
{"ids": "74482", "raw_code": "public void sendTitles(){\n  if (listeners == null) {\n    return;\n  }\n  StringBuilder labels=new StringBuilder(\"PTT\");\n  labels.append(\"]\\\\[\" + Bundle.getMessage(\"MenuItemTurnoutTable\") + \"}|{Turnout\");\n  labels.append(\"]\\\\[\" + manager.getClosedText() + \"}|{2\");\n  labels.append(\"]\\\\[\" + manager.getThrownText() + \"}|{4\");\n  String message=labels.toString();\n  for (  ControllerInterface listener : listeners) {\n    listener.sendPacketToDevice(message);\n  }\n}"}
{"ids": "33572", "raw_code": "public static void closeSession() throws HibernateException {\n  Session session=(Session)threadLocal.get();\n  threadLocal.set(null);\n  if (session != null) {\n    session.close();\n  }\n}"}
{"ids": "82357", "raw_code": "protected Calendar(){\n  zone=TimeZone.getDefault();\n  fields=new int[FIELD_COUNT];\n  isSet=new boolean[FIELD_COUNT];\n  areFieldsSet=isTimeSet=false;\n  setTimeInMillis(System.currentTimeMillis());\n}"}
{"ids": "52274", "raw_code": "private PointPair calculateEdge(Component comp1,Component comp2){\n  Rectangle r1=comp1.getBounds();\n  Rectangle r2=comp2.getBounds();\n  Point c1=new Point((int)(r1.x + r1.width / 2.0),(int)(r1.y + r1.height / 2.0));\n  Point c2=new Point((int)(r2.x + r2.width / 2.0),(int)(r2.y + r2.height / 2.0));\n  double angle=Math.atan2(c1.y - c2.y,c1.x - c2.x);\n  angle+=Math.PI / 2;\n  Point d=new Point((int)(offset * Math.cos(angle)),(int)(offset * Math.sin(angle)));\n  c1.translate(d.x,d.y);\n  c2.translate(d.x,d.y);\n  Point p1=getBoundaryIntersection(comp1,c1,c2);\n  Point p2=getBoundaryIntersection(comp2,c2,c1);\n  if ((p1 == null) || (p2 == null)) {\n    c1=new Point((int)(r1.x + r1.width / 2.0),(int)(r1.y + r1.height / 2.0));\n    c2=new Point((int)(r2.x + r2.width / 2.0),(int)(r2.y + r2.height / 2.0));\n    p1=getBoundaryIntersection(comp1,c1,c2);\n    p2=getBoundaryIntersection(comp2,c2,c1);\n  }\n  if ((p1 == null) || (p2 == null)) {\n    return null;\n  }\n  return new PointPair(p1,p2);\n}"}
{"ids": "58180", "raw_code": "public static boolean isXML11Space(int c){\n  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_SPACE) != 0);\n}"}
{"ids": "332", "raw_code": "public void unregisterPlayerListener(CheerleaderPlayerListener listener){\n  checkState();\n  mCheerleaderPlayerListeners.remove(listener);\n}"}
{"ids": "68956", "raw_code": "public OutputStream openOutputStream(Uri uri,boolean append) throws IOException {\n  assertBackgroundThread();\nswitch (getUriType(uri)) {\ncase URI_TYPE_FILE:\n{\n      File localFile=new File(uri.getPath());\n      File parent=localFile.getParentFile();\n      if (parent != null) {\n        parent.mkdirs();\n      }\n      return new FileOutputStream(localFile,append);\n    }\ncase URI_TYPE_CONTENT:\ncase URI_TYPE_RESOURCE:\n{\n    AssetFileDescriptor assetFd=contentResolver.openAssetFileDescriptor(uri,append ? \"wa\" : \"w\");\n    return assetFd.createOutputStream();\n  }\n}\nthrow new FileNotFoundException(\"URI not supported by CordovaResourceApi: \" + uri);\n}"}
{"ids": "56734", "raw_code": "protected Integer adjustIntegerValue(Integer origValue,Integer minValue,Integer maxValue){\n  Integer resultValue=origValue;\n  if (resultValue.compareTo(minValue) < 0) {\n    resultValue=minValue;\n  }\n  if (resultValue.compareTo(maxValue) > 0) {\n    resultValue=maxValue;\n  }\n  return resultValue;\n}"}
{"ids": "5159", "raw_code": "private void initPaints(Resources res){\n  final String monthTypeface=res.getString(R.string.date_picker_month_typeface);\n  final String dayOfWeekTypeface=res.getString(R.string.date_picker_day_of_week_typeface);\n  final String dayTypeface=res.getString(R.string.date_picker_day_typeface);\n  final int monthTextSize=res.getDimensionPixelSize(R.dimen.date_picker_month_text_size);\n  final int dayOfWeekTextSize=res.getDimensionPixelSize(R.dimen.date_picker_day_of_week_text_size);\n  final int dayTextSize=res.getDimensionPixelSize(R.dimen.date_picker_day_text_size);\n  mMonthPaint.setAntiAlias(true);\n  mMonthPaint.setTextSize(monthTextSize);\n  mMonthPaint.setTypeface(Typeface.create(monthTypeface,0));\n  mMonthPaint.setTextAlign(Align.CENTER);\n  mMonthPaint.setStyle(Style.FILL);\n  mDayOfWeekPaint.setAntiAlias(true);\n  mDayOfWeekPaint.setTextSize(dayOfWeekTextSize);\n  mDayOfWeekPaint.setTypeface(Typeface.create(dayOfWeekTypeface,0));\n  mDayOfWeekPaint.setTextAlign(Align.CENTER);\n  mDayOfWeekPaint.setStyle(Style.FILL);\n  mDaySelectorPaint.setAntiAlias(true);\n  mDaySelectorPaint.setStyle(Style.FILL);\n  mDayHighlightPaint.setAntiAlias(true);\n  mDayHighlightPaint.setStyle(Style.FILL);\n  mDayPaint.setAntiAlias(true);\n  mDayPaint.setTextSize(dayTextSize);\n  mDayPaint.setTypeface(Typeface.create(dayTypeface,0));\n  mDayPaint.setTextAlign(Align.CENTER);\n  mDayPaint.setStyle(Style.FILL);\n}"}
{"ids": "26685", "raw_code": "public int size(){\n  return rules.size();\n}"}
{"ids": "26947", "raw_code": "private void copyArrays(){\n  String[] oldSyms=_symbols;\n  int size=oldSyms.length;\n  _symbols=new String[size];\n  System.arraycopy(oldSyms,0,_symbols,0,size);\n  Bucket[] oldBuckets=_buckets;\n  size=oldBuckets.length;\n  _buckets=new Bucket[size];\n  System.arraycopy(oldBuckets,0,_buckets,0,size);\n}"}
{"ids": "62965", "raw_code": "@Procedure @PerformsWrites @Description(\"apoc.refactor.from(rel, startNode) redirect relationship to use new start-node\") public Stream<RelationshipRefactorResult> from(@Name(\"relationship\") Relationship rel,@Name(\"newNode\") Node newNode){\n  RelationshipRefactorResult result=new RelationshipRefactorResult(rel.getId());\n  try {\n    Relationship newRel=newNode.createRelationshipTo(rel.getEndNode(),rel.getType());\n    copyProperties(rel,newRel);\n    rel.delete();\n    return Stream.of(result.withOther(newRel));\n  }\n catch (  Exception e) {\n    return Stream.of(result.withError(e));\n  }\n}"}
{"ids": "51560", "raw_code": "public static long maxFill(final long n,final float f){\n  return Math.min((long)Math.ceil(n * f),n - 1);\n}"}
{"ids": "32851", "raw_code": "public static void print(char x){\n  out.print(x);\n  out.flush();\n}"}
{"ids": "73312", "raw_code": "public void clearSourceElements(){\n  for (  PNode node : sourceElements) {\n    SourceHandle.removeSourceHandleFrom(node);\n  }\n  sourceElements.clear();\n  selectionModel.fireSelectionChanged();\n}"}
{"ids": "83368", "raw_code": "public static double[][] readMatrix(int numberOfRows,int numberOfColumns,boolean ignoreFirstLine,String fileName){\n  double[][] matrix=new double[numberOfRows][numberOfColumns];\n  try {\n    FileReader fr=new FileReader(fileName);\n    BufferedReader br=new BufferedReader(fr);\n    String line;\n    StringTokenizer tokenizer;\n    String token;\n    if (ignoreFirstLine) {\n      br.readLine();\n    }\n    line=br.readLine();\n    int rowId=0;\n    while (line != null) {\n      tokenizer=new StringTokenizer(line);\n      for (int i=0; i < numberOfColumns; i++) {\n        token=tokenizer.nextToken();\n        double parsedNumber=Double.parseDouble(token);\n        matrix[rowId][i]=parsedNumber;\n      }\n      if (tokenizer.hasMoreTokens()) {\n        throw new RuntimeException(\"the number of columns is wrong\");\n      }\n      line=br.readLine();\n      rowId++;\n    }\n    if (rowId != numberOfRows) {\n      throw new RuntimeException(\"the number of rows is wrong\");\n    }\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    e.printStackTrace();\n    throw new RuntimeException(\"Error reading the matrix from the file\");\n  }\n  return matrix;\n}"}
{"ids": "12727", "raw_code": "@Override protected boolean readIntoBuffer(int minLength){\n  if (bufferSpaceLeft() < minLength) {\n    increaseBufferSize(minLength + currentlyInBuffer());\n  }\n else   if (buf.length - writePos < minLength) {\n    compact();\n  }\n  int readSum=0;\n  while (readSum < minLength && !datagrams.isEmpty()) {\n    Datagram next=datagrams.removeFirst();\n    int length=(int)next.getDuration();\n    if (buf.length < writePos + length) {\n      increaseBufferSize(writePos + length);\n    }\n    int read=readDatagram(next,buf,writePos);\n    writePos+=read;\n    readSum+=read;\n  }\n  if (dataProcessor != null) {\n    dataProcessor.applyInline(buf,writePos - readSum,readSum);\n  }\n  return readSum >= minLength;\n}"}
{"ids": "15864", "raw_code": "private int heightOfPhi(int Phi){\n  if (Phi == 0) {\n    return -1;\n  }\n  int Tau=0;\n  int modul=1;\n  while (Phi % modul == 0) {\n    modul*=2;\n    Tau+=1;\n  }\n  return Tau - 1;\n}"}
{"ids": "303", "raw_code": "@NotNull public ClarifaiClient buildSync(){\n  return new ClarifaiClientImpl(this);\n}"}
{"ids": "65119", "raw_code": "public void mouseReleased(MouseEvent e){\n  VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();\n  down=null;\n  vv.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n}"}
{"ids": "31898", "raw_code": "@Nullable public static Class<?> classForName(@Nullable String cls,@Nullable Class<?> dflt,boolean includePrimitiveTypes){\n  Class<?> clazz;\n  if (cls == null)   clazz=dflt;\n else   if (!includePrimitiveTypes || cls.length() > 7 || (clazz=primitiveMap.get(cls)) == null) {\n    try {\n      clazz=Class.forName(cls);\n    }\n catch (    ClassNotFoundException ignore) {\n      clazz=dflt;\n    }\n  }\n  return clazz;\n}"}
{"ids": "12241", "raw_code": "public String checkWriteProtected(int resIdAction,final File... filesToBeModified){\n  if (filesToBeModified != null) {\n    for (    File file : filesToBeModified) {\n      if ((file != null) && (file.exists()) && (!file.canWrite())) {\n        String action=(resIdAction == 0) ? \"\" : mContext.getString(resIdAction);\n        return mContext.getString(R.string.file_err_writeprotected,file.getAbsolutePath(),action);\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "60378", "raw_code": "@NotNull @Contract(pure=true) public static String strip(@NotNull final String s,@NotNull final CharFilter filter){\n  final StringBuilder result=new StringBuilder(s.length());\n  for (int i=0; i < s.length(); i++) {\n    char ch=s.charAt(i);\n    if (filter.accept(ch)) {\n      result.append(ch);\n    }\n  }\n  return result.toString();\n}"}
{"ids": "13292", "raw_code": "protected void addComponent(XMLComponent component){\n  if (fComponents.contains(component)) {\n    return;\n  }\n  fComponents.add(component);\n  addRecognizedParamsAndSetDefaults(component);\n}"}
{"ids": "54602", "raw_code": "public void clear(IValidatable bean){\n  for (  Binding b : _optComponents.values()) {\n    b.clear(bean);\n  }\n  for (  Binding b : _bindings.values()) {\n    b.clear(bean);\n  }\n  _modified=false;\n}"}
{"ids": "14061", "raw_code": "public boolean hasCredentials(){\n  return _hasCredentials;\n}"}
{"ids": "61162", "raw_code": "public boolean isRecursiveAttrSet(ElemAttributeSet attrSet){\n  if (null == m_attrSetStack) {\n    m_attrSetStack=new Stack();\n  }\n  if (!m_attrSetStack.empty()) {\n    int loc=m_attrSetStack.search(attrSet);\n    if (loc > -1) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "25954", "raw_code": "public void clear(AbsoluteTableIdentifier absoluteTableIdentifier){\n  tableLockMap.remove(absoluteTableIdentifier);\n  tableSegmentMap.remove(absoluteTableIdentifier);\n}"}
{"ids": "2539", "raw_code": "public static InputStream toInputStream(CharSequence input){\n  return toInputStream(input.toString());\n}"}
{"ids": "54521", "raw_code": "@Override public void process(Number tuple){\n  values.add(tuple.doubleValue());\n}"}
{"ids": "14821", "raw_code": "public void grantWritePermission(Collection attributeNames){\n  Iterator it=attributeNames.iterator();\n  if (it != null) {\n    while (it.hasNext()) {\n      String temp=(String)it.next();\n      writables.add(temp.toLowerCase());\n    }\n  }\n}"}
{"ids": "26737", "raw_code": "public void saveData(File file) throws IOException {\nsynchronized (accumulators) {\n    ObjectOutputStream oos=null;\n    try {\n      oos=new ObjectOutputStream(new FileOutputStream(file));\n      oos.writeObject(accumulators);\n    }\n  finally {\n      if (oos != null) {\n        oos.close();\n      }\n    }\n  }\n}"}
{"ids": "64454", "raw_code": "public static Ingredient fromCursor(Cursor cursor){\n  Ingredient ingredient=new Ingredient();\n  for (int c=0; c < cursor.getColumnCount(); c++) {\n    String columnName=cursor.getColumnName(c);\n    if (columnName.equals(RecipeIngredientTable.AMOUNT_COLUMN)) {\n      ingredient.setAmount(cursor.getString(c));\n    }\n else     if (columnName.equals(RecipeIngredientTable.DESCRIPTION_COLUMN)) {\n      ingredient.setDescription(cursor.getString(c));\n    }\n  }\n  return ingredient;\n}"}
{"ids": "1138", "raw_code": "public void append(char c[],int off,int len){\n  int restLength=buffer.length - pos;\n  if (len < restLength) {\n    System.arraycopy(c,off,buffer,pos,len);\n    pos+=len;\n  }\n else {\n    System.arraycopy(c,off,buffer,pos,restLength);\n    curr.next=new Entity(buffer);\n    curr=curr.next;\n    length+=buffer.length;\n    buffer=new char[(buffer.length > len - restLength) ? buffer.length : len - restLength];\n    System.arraycopy(c,off + restLength,buffer,0,len - restLength);\n    pos=len - restLength;\n  }\n}"}
{"ids": "12608", "raw_code": "public boolean contains(String voiceName){\n  return (getVoice(voiceName) != null);\n}"}
{"ids": "71377", "raw_code": "public static boolean isEnterpriseEdition(String serverVersion){\n  return serverVersion.contains(\"enterprise\") || serverVersion.contains(\"commercial\") || serverVersion.contains(\"advanced\");\n}"}
{"ids": "7614", "raw_code": "@Override public CategoryItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,CategoryPlot plot,int rendererIndex,PlotRenderingInfo info){\n  CategoryItemRendererState state=super.initialise(g2,dataArea,plot,rendererIndex,info);\n  CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex);\n  CategoryDataset dataset=plot.getDataset(rendererIndex);\n  if (dataset != null) {\n    int columns=dataset.getColumnCount();\n    int rows=dataset.getRowCount();\n    double space=0.0;\n    PlotOrientation orientation=plot.getOrientation();\n    if (orientation == PlotOrientation.HORIZONTAL) {\n      space=dataArea.getHeight();\n    }\n else     if (orientation == PlotOrientation.VERTICAL) {\n      space=dataArea.getWidth();\n    }\n    double maxWidth=space * getMaximumBarWidth();\n    double categoryMargin=0.0;\n    double currentItemMargin=0.0;\n    if (columns > 1) {\n      categoryMargin=domainAxis.getCategoryMargin();\n    }\n    if (rows > 1) {\n      currentItemMargin=getItemMargin();\n    }\n    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);\n    if ((rows * columns) > 0) {\n      state.setBarWidth(Math.min(used / (dataset.getColumnCount() * dataset.getRowCount()),maxWidth));\n    }\n else {\n      state.setBarWidth(Math.min(used,maxWidth));\n    }\n  }\n  return state;\n}"}
{"ids": "33713", "raw_code": "public static boolean createFolder(@SuppressWarnings(\"UnusedParameters\") Context mContext,String path,String folderName){\n  File SDCardRoot=new File(path,folderName);\n  if (!SDCardRoot.exists()) {\n    return SDCardRoot.mkdir();\n  }\n  return false;\n}"}
{"ids": "35819", "raw_code": "private static NSObject parseObject(Node n) throws ParseException, IOException {\n  String type=n.getNodeName();\n  if (type.equals(\"dict\")) {\n    NSDictionary dict=new NSDictionary();\n    List<Node> children=filterElementNodes(n.getChildNodes());\n    for (int i=0; i < children.size(); i+=2) {\n      Node key=children.get(i);\n      Node val=children.get(i + 1);\n      String keyString=getNodeTextContents(key);\n      dict.put(keyString,parseObject(val));\n    }\n    return dict;\n  }\n else   if (type.equals(\"array\")) {\n    List<Node> children=filterElementNodes(n.getChildNodes());\n    NSArray array=new NSArray(children.size());\n    for (int i=0; i < children.size(); i++) {\n      array.setValue(i,parseObject(children.get(i)));\n    }\n    return array;\n  }\n else   if (type.equals(\"true\")) {\n    return new NSNumber(true);\n  }\n else   if (type.equals(\"false\")) {\n    return new NSNumber(false);\n  }\n else   if (type.equals(\"integer\")) {\n    return new NSNumber(getNodeTextContents(n));\n  }\n else   if (type.equals(\"real\")) {\n    return new NSNumber(getNodeTextContents(n));\n  }\n else   if (type.equals(\"string\")) {\n    return new NSString(getNodeTextContents(n));\n  }\n else   if (type.equals(\"data\")) {\n    return new NSData(getNodeTextContents(n));\n  }\n else   if (type.equals(\"date\")) {\n    return new NSDate(getNodeTextContents(n));\n  }\n  return null;\n}"}
{"ids": "31545", "raw_code": "LuaString loadString() throws IOException {\n  int size=this.luacSizeofSizeT == 8 ? (int)loadInt64() : loadInt();\n  if (size == 0)   return null;\n  byte[] bytes=new byte[size];\n  is.readFully(bytes,0,size);\n  return LuaString.valueOf(bytes,0,bytes.length - 1);\n}"}
{"ids": "47268", "raw_code": "protected AbstractPreferences(AbstractPreferences parent,String name){\n  if (parent == null) {\n    if (!name.equals(\"\"))     throw new IllegalArgumentException(\"Root name '\" + name + \"' must be \\\"\\\"\");\n    this.absolutePath=\"/\";\n    root=this;\n  }\n else {\n    if (name.indexOf('/') != -1)     throw new IllegalArgumentException(\"Name '\" + name + \"' contains '/'\");\n    if (name.equals(\"\"))     throw new IllegalArgumentException(\"Illegal name: empty string\");\n    root=parent.root;\n    absolutePath=(parent == root ? \"/\" + name : parent.absolutePath() + \"/\" + name);\n  }\n  this.name=name;\n  this.parent=parent;\n}"}
{"ids": "47889", "raw_code": "static Class<?> canonicalize(Class<?> t,int how){\n  Class<?> ct;\n  if (t == Object.class) {\n  }\n else   if (!t.isPrimitive()) {\nswitch (how) {\ncase UNWRAP:\n      ct=Wrapper.asPrimitiveType(t);\n    if (ct != t)     return ct;\n  break;\ncase RAW_RETURN:\ncase ERASE:\nreturn Object.class;\n}\n}\n else if (t == void.class) {\nswitch (how) {\ncase RAW_RETURN:\nreturn int.class;\ncase WRAP:\nreturn Void.class;\n}\n}\n else {\nswitch (how) {\ncase WRAP:\nreturn Wrapper.asWrapperType(t);\ncase INTS:\nif (t == int.class || t == long.class) return null;\nif (t == double.class) return long.class;\nreturn int.class;\ncase LONGS:\nif (t == long.class) return null;\nreturn long.class;\ncase RAW_RETURN:\nif (t == int.class || t == long.class || t == float.class || t == double.class) return null;\nreturn int.class;\n}\n}\nreturn null;\n}"}
{"ids": "10948", "raw_code": "protected String extractSubstring(String pszSrc){\n  int nBracket=0;\n  int i;\n  String pszReturn;\n  for (i=0; i < pszSrc.length() && (nBracket > 0 || pszSrc.charAt(i) != ','); i++) {\n    if (pszSrc.charAt(i) == '(') {\n      nBracket++;\n    }\n else     if (pszSrc.charAt(i) == ')') {\n      nBracket--;\n    }\n  }\n  if (pszSrc.charAt(0) == '(') {\n    pszReturn=pszSrc.substring(1,i - 2);\n  }\n else {\n    pszReturn=pszSrc.substring(0,i);\n  }\n  return pszReturn;\n}"}
{"ids": "29423", "raw_code": "public void read(Appendable dest) throws IOException {\n  if (_inputStream == null)   throw new IOException(\"No input stream or stream closed\");\n  while (true) {\n    if (_start >= _end) {\n      _start=0;\n      _end=_inputStream.read(_bytes,0,_bytes.length);\n      if (_end <= 0) {\n        break;\n      }\n    }\n    byte b=_bytes[_start];\n    if (b >= 0) {\n      dest.append((char)b);\n      _start++;\n    }\n else {\n      int code=read2();\n      if (code < 0x10000) {\n        dest.append((char)code);\n      }\n else       if (code <= 0x10ffff) {\n        dest.append((char)(((code - 0x10000) >> 10) + 0xd800));\n        dest.append((char)(((code - 0x10000) & 0x3ff) + 0xdc00));\n      }\n else {\n        throw new CharConversionException(\"Cannot convert U+\" + Integer.toHexString(code) + \" to char (code greater than U+10FFFF)\");\n      }\n    }\n  }\n}"}
{"ids": "38560", "raw_code": "public boolean isMonitoring(){\n  return m_Monitor.isMonitoring();\n}"}
{"ids": "46586", "raw_code": "static final Color hexToColor(String value){\n  String digits;\n  int n=value.length();\n  if (value.startsWith(\"#\")) {\n    digits=value.substring(1,Math.min(value.length(),7));\n  }\n else {\n    digits=value;\n  }\n  String hstr=\"0x\" + digits;\n  Color c;\n  try {\n    c=Color.decode(hstr);\n  }\n catch (  NumberFormatException nfe) {\n    c=null;\n  }\n  return c;\n}"}
{"ids": "29414", "raw_code": "public final boolean contentEquals(java.lang.CharSequence csq){\n  if (csq.length() != _length)   return false;\n  for (int i=0; i < _length; ) {\n    char c=_high[i >> B1][i & M1];\n    if (csq.charAt(i++) != c)     return false;\n  }\n  return true;\n}"}
{"ids": "20085", "raw_code": "private void populateAvailableDataStores(){\n  DataAccessFactory fac;\n  logger.debug(\"Available data store factories:\");\n  Iterator<DataStoreFactorySpi> iterator=DataStoreFinder.getAvailableDataStores();\n  while (iterator.hasNext()) {\n    fac=(DataAccessFactory)iterator.next();\n    logger.debug(\"\\t\" + fac.getDisplayName());\n    availableDataStoreList.add(fac.getDisplayName());\n  }\n}"}
{"ids": "26689", "raw_code": "protected void add(double value,int group){\n  if ((group < 0) || (group >= numberOfGroups)) {\n    throw new IllegalArgumentException(\"invalid group\");\n  }\n  data.add(new Observation(value,group));\n}"}
{"ids": "38516", "raw_code": "protected static String makeOptionString(Script script){\n  StringBuffer result;\n  Enumeration<Option> enm;\n  Option option;\n  result=new StringBuffer(\"\");\n  result.append(\"\\nHelp requested:\\n\\n\");\n  result.append(\"-h or -help\\n\");\n  result.append(\"\\tDisplays this help screen.\\n\");\n  result.append(\"-s <file>\\n\");\n  result.append(\"\\tThe script to execute.\\n\");\n  enm=script.listOptions();\n  while (enm.hasMoreElements()) {\n    option=enm.nextElement();\n    result.append(option.synopsis() + '\\n');\n    result.append(option.description() + \"\\n\");\n  }\n  result.append(\"\\n\");\n  result.append(\"Any additional options are passed on to the script as\\n\");\n  result.append(\"command-line parameters.\\n\");\n  result.append(\"\\n\");\n  return result.toString();\n}"}
{"ids": "28847", "raw_code": "public RegistrationBuilder addContact(URI contact){\n  contacts.add(contact);\n  return this;\n}"}
{"ids": "60683", "raw_code": "public static void closeQuietly(AutoCloseable closeable){\n  if (closeable != null) {\n    try {\n      closeable.close();\n    }\n catch (    RuntimeException rethrown) {\n      throw rethrown;\n    }\ncatch (    Exception ignored) {\n    }\n  }\n}"}
{"ids": "74535", "raw_code": "String formatTime(int hour,int minute){\n  String s=\"\";\n  String t=Integer.toString(hour);\n  if (t.length() == 2) {\n    s=t + \":\";\n  }\n else   if (t.length() == 1) {\n    s=\"0\" + t + \":\";\n  }\n  t=Integer.toString(minute);\n  if (t.length() == 2) {\n    s=s + t;\n  }\n else   if (t.length() == 1) {\n    s=s + \"0\" + t;\n  }\n  if (s.length() != 5) {\n    s=\"00:00\";\n  }\n  return s;\n}"}
{"ids": "80054", "raw_code": "public boolean isEmpty(){\n  return (sentenceType == SentenceType.UNDEFINED) && expressions.isEmpty();\n}"}
{"ids": "11946", "raw_code": "@Override public void init(AbstractAddressbookManager aBooMgr){\n  setAddressBookManager(aBooMgr);\n  reloadSettings();\n  try {\n    connection=DriverManager.getConnection(IDENTITYDB_CONNECT_STRING);\n  }\n catch (  SQLException e) {\n    logger.error(\"IdentityManager: Failure to connect to db: \" + IDENTITYDB_CONNECT_STRING,e);\n  }\n  Statement statement;\n  try {\n    statement=connection.createStatement();\n    statement.setQueryTimeout(30);\n    statement.executeUpdate(\"create table if not exists \" + TABLE_IDENTITY + \" (id INTEGER PRIMARY KEY AUTOINCREMENT, name string, firstname string, email string, keystorePath string)\");\n    statement.executeUpdate(\"create table if not exists \" + TABLE_CLOUDPROVIDER + \" (id INTEGER PRIMARY KEY AUTOINCREMENT, name string, username string, password string)\");\n    statement.executeUpdate(\"create table if not exists \" + TABLE_CLOUDPROVIDER_MAP + \" (identityID integer, cloudProviderID integer)\");\n    aBooMgr.init();\n  }\n catch (  SQLException e) {\n    logger.error(\"IdentityManager: Failure on creating tables\",e);\n  }\n finally {\n    if (connection != null) {\n      try {\n        connection.close();\n      }\n catch (      SQLException e) {\n        logger.error(\"IdentityManager: Failure to close db connection while creating tables\",e);\n      }\n    }\n  }\n}"}
{"ids": "71402", "raw_code": "private Buffer checkErrorPacket(int command) throws SQLException {\n  Buffer resultPacket=null;\n  this.serverStatus=0;\n  try {\n    resultPacket=reuseAndReadPacket(this.reusablePacket);\n  }\n catch (  SQLException sqlEx) {\n    throw sqlEx;\n  }\ncatch (  Exception fallThru) {\n    throw SQLError.createCommunicationsException(this.connection,this.lastPacketSentTimeMs,this.lastPacketReceivedTimeMs,fallThru,getExceptionInterceptor());\n  }\n  checkErrorPacket(resultPacket);\n  return resultPacket;\n}"}
{"ids": "6632", "raw_code": "public void applySettings(boolean loadCoreComponents) throws ApplySettingsException {\n  List<String> errors=new ArrayList<String>(2);\n  applyTorrentDataSaveFolderSettings(errors);\n  applyTorrentSeedingSettings(errors);\n  if (!errors.isEmpty()) {\n    throw new ApplySettingsException(StringUtils.explode(errors,\"\\n\\n\"));\n  }\n}"}
{"ids": "65869", "raw_code": "public boolean shouldSelectCell(EventObject e){\n  return true;\n}"}
{"ids": "61659", "raw_code": "method_info findMethod(String s){\n  method_info m;\n  int i;\n  for (i=0; i < methods_count; i++) {\n    m=methods[i];\n    if (s.equals(m.toName(constant_pool))) {\n      return m;\n    }\n  }\n  return null;\n}"}
{"ids": "49632", "raw_code": "private boolean matches(@Nullable Object obj,String operator,String operandStr){\n  ObsValue value;\n  if (obj == null) {\nswitch (operator) {\ncase \"\":\ncase \"=\":\ncase \"==\":\n      return operandStr.isEmpty();\ndefault :\n    return false;\n}\n}\n else if (obj instanceof ObsPoint) {\nvalue=((ObsPoint)obj).value;\n}\n else if (obj instanceof ObsValue) {\nvalue=(ObsValue)obj;\n}\n else return false;\nObsValue operand=null;\nif (value.uuid != null) {\noperand=ObsValue.newCoded(Utils.expandUuid(operandStr));\n}\n else if (value.number != null) {\ntry {\n  operand=ObsValue.newNumber(Double.valueOf(operandStr));\n}\n catch (NumberFormatException e) {\n  operand=ObsValue.ZERO;\n}\n}\n else if (value.text != null) {\noperand=ObsValue.newText(operandStr);\n}\n else if (value.date != null) {\ntry {\n  operand=ObsValue.newDate(LocalDate.parse(operandStr));\n}\n catch (IllegalArgumentException e) {\n  operand=ObsValue.MIN_DATE;\n}\n}\n else if (value.instant != null) {\ntry {\n  operand=ObsValue.newTime(Long.valueOf(operandStr));\n}\n catch (IllegalArgumentException e) {\n  operand=ObsValue.MIN_TIME;\n}\n}\nswitch (operator) {\ncase \"\":\ncase \"=\":\ncase \"==\":\nreturn Objects.equal(value.uuid,operand.uuid);\ncase \"<\":\nreturn value.compareTo(operand) < 0;\ncase \"<=\":\nreturn value.compareTo(operand) <= 0;\ncase \">\":\nreturn value.compareTo(operand) > 0;\ncase \">=\":\nreturn value.compareTo(operand) >= 0;\n}\nreturn false;\n}"}
{"ids": "34510", "raw_code": "private void waitUntilReadable() throws IOException {\n  readTimeout.enter();\n  try {\n    while (readBuffer.size() == 0 && !finished && !closed && errorCode == null) {\n      waitForIo();\n    }\n  }\n  finally {\n    readTimeout.exitAndThrowIfTimedOut();\n  }\n}"}
{"ids": "81700", "raw_code": "@SuppressWarnings(\"cast\") @Override public boolean contains(final Object obj){\n  if (null != obj) {\n    Iterator<E> it=new ArrayDequeIterator<E>();\n    while (it.hasNext()) {\n      if (obj.equals((E)it.next())) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "84067", "raw_code": "private void writeObject(ObjectOutputStream out) throws IOException {\n  out.defaultWriteObject();\n  doWriteObject(out);\n}"}
{"ids": "8364", "raw_code": "private static boolean isPropertyName(String name){\n  return ((name.length() > 0) && Character.isUpperCase(name.charAt(0))) || ((name.length() > 1) && Character.isUpperCase(name.charAt(1)));\n}"}
{"ids": "1949", "raw_code": "public Collection<ExpressionObject<?>> analyzeExpression(GenericPK id,Expression formula,ExpressionAST expression) throws ScopeException {\n  ExtractReferences visitor=new ExtractReferences();\n  List<ExpressionRef> references=visitor.apply(expression);\n  String internal=rewriteExpressionValue(formula.getValue(),expression,references);\n  if (!internal.equals(formula.getValue())) {\n    formula.setInternal(internal);\n  }\n else {\n    formula.setInternal(null);\n  }\n  int level=computeReferenceTree(expression,references);\n  formula.setLevel(level);\n  Collection<ExpressionObject<?>> objects=new HashSet<>();\n  for (  ExpressionRef expr : references) {\n    Object ref=expr.getReference();\n    if (ref != null && ref instanceof Property) {\n      Property property=(Property)ref;\n      ExpressionObject<?> object=property.getExpressionObject();\n      if (object != null) {\n        objects.add(object);\n      }\n    }\n  }\n  if (!objects.isEmpty()) {\n    Collection<ExpressionObject<?>> closure=null;\n    Collection<ExpressionObject<?>> transitiveClosure=objects;\n    do {\n      closure=transitiveClosure;\n      transitiveClosure=transitiveClosure(id,closure);\n    }\n while (closure.size() < transitiveClosure.size());\n    Collection<ReferencePK<?>> IDs=new HashSet<>();\n    for (    ExpressionObject<?> object : transitiveClosure) {\n      ReferencePK<?> refPk=reference(object);\n      if (refPk != null) {\n        IDs.add(refPk);\n      }\n    }\n    formula.setReferences(IDs);\n    return transitiveClosure;\n  }\n else {\n    return objects;\n  }\n}"}
{"ids": "23258", "raw_code": "public void removeRtcpListener(RtcpEventListener listener){\n  if (sLogger.isActivated()) {\n    sLogger.debug(\"Remove a RTCP event listener\");\n  }\n  mListeners.removeElement(listener);\n}"}
{"ids": "84732", "raw_code": "private static void collectAllTimes(Tree tree,NodeRef node,NodeRef[] excludeBelow,ArrayList times,ArrayList<Integer> childs){\n  times.add(new ComparableDouble(tree.getNodeHeight(node)));\n  childs.add(tree.getChildCount(node));\n  for (int i=0; i < tree.getChildCount(node); i++) {\n    NodeRef child=tree.getChild(node,i);\n    if (excludeBelow == null) {\n      collectAllTimes(tree,child,excludeBelow,times,childs);\n    }\n else {\n      boolean include=true;\n      for (      NodeRef anExcludeBelow : excludeBelow) {\n        if (anExcludeBelow.getNumber() == child.getNumber()) {\n          include=false;\n          break;\n        }\n      }\n      if (include)       collectAllTimes(tree,child,excludeBelow,times,childs);\n    }\n  }\n}"}
{"ids": "45771", "raw_code": "protected void paintText(final Graphics g,final JComponent c,final Rectangle localTextRect,final String text){\n  final Graphics2D g2d=g instanceof Graphics2D ? (Graphics2D)g : null;\n  final AbstractButton b=(AbstractButton)c;\n  final ButtonModel model=b.getModel();\n  final FontMetrics fm=g.getFontMetrics();\n  final int mnemonicIndex=AquaMnemonicHandler.isMnemonicHidden() ? -1 : b.getDisplayedMnemonicIndex();\n  if (model.isEnabled()) {\n    g.setColor(b.getForeground());\n  }\n else {\n    g.setColor(defaultDisabledTextColor);\n  }\n  SwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,localTextRect.x,localTextRect.y + fm.getAscent());\n}"}
{"ids": "51041", "raw_code": "public static ConstraintWidget[] inferTableList(WidgetsScene list){\n  for (  ConstraintWidget widget : list.getWidgets()) {\n    widget.resetAnchors();\n  }\n  return inferTableList(list.getRoot());\n}"}
{"ids": "14048", "raw_code": "public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {\n  return toXMLString(includeNS,declareNS,false);\n}"}
{"ids": "47374", "raw_code": "public void ifPresent(LongConsumer consumer){\n  if (isPresent)   consumer.accept(value);\n}"}
{"ids": "72755", "raw_code": "public void update(String[] columns,Object[] columnValues,String[] conditions,Object[] conditionValues) throws DataAccessException {\n  if (columns.length != columnValues.length || conditions.length != conditionValues.length) {\n    logger.error(\"DatabaseWriter update columns and values mismatch\");\n    return;\n  }\n  Object[] values=Arrays.copyOf(columnValues,columnValues.length + conditionValues.length);\n  System.arraycopy(conditionValues,0,values,columnValues.length,conditionValues.length);\n  final String sql=PreparedStatementUtil.prepareUpdateTemplateWithColumn(tableName,columns,conditions);\n  execute(sql,values);\n}"}
{"ids": "53973", "raw_code": "public static String replicaSetUsedIn(String addresses){\n  if (addresses.startsWith(\"[\")) {\n    return null;\n  }\n  int index=addresses.indexOf('/');\n  if (index < 0)   return null;\n  return addresses.substring(0,index);\n}"}
{"ids": "5858", "raw_code": "public void onProgress(long bytesWritten,long totalSize){\n  Log.v(LOG_TAG,String.format(\"Progress %d from %d (%2.0f%%)\",bytesWritten,totalSize,(totalSize > 0) ? (bytesWritten * 1.0 / totalSize) * 100 : -1));\n}"}
{"ids": "85401", "raw_code": "public String self(TypeDeclaration decl){\n  if (decl instanceof Constructor) {\n    decl=(TypeDeclaration)decl.getContainer();\n  }\n  String name=JsUtils.escapeStringLiteral(decl.getName());\n  if (decl.isShared() || decl.isToplevel()) {\n    name+=nestingSuffix(decl,true);\n  }\n else {\n    name=\"$\" + Long.toString(getUID(decl),36);\n  }\n  return String.format(\"%c%s$\",Character.toLowerCase(name.charAt(0)),name.substring(1));\n}"}
{"ids": "32740", "raw_code": "public double elapsedTime(){\n  long now=threadTimer.getCurrentThreadCpuTime();\n  return (now - start) / NANOSECONDS_PER_SECOND;\n}"}
{"ids": "16898", "raw_code": "public static void sortList(List list){\n  if (SystemUtils.IS_JAVA_1_7 && list instanceof CopyOnWriteArrayList) {\n    List tempList=new ArrayList(list);\n    Collections.sort(tempList);\n    list.clear();\n    list.addAll(tempList);\n  }\n else {\n    Collections.sort(list);\n  }\n}"}
{"ids": "17830", "raw_code": "public void fireIndexedPropertyChange(String propertyName,int index,boolean oldValue,boolean newValue){\n  if (oldValue != newValue) {\n    fireIndexedPropertyChange(propertyName,index,Boolean.valueOf(oldValue),Boolean.valueOf(newValue));\n  }\n}"}
{"ids": "25133", "raw_code": "public static <T>T[] concat(T[] first,T[] second,Class<T> type){\n  T[] result=newArray(type,first.length + second.length);\n  System.arraycopy(first,0,result,0,first.length);\n  System.arraycopy(second,0,result,first.length,second.length);\n  return result;\n}"}
{"ids": "76369", "raw_code": "public synchronized void writeToRemote(byte b){\n  remoteBuffer.add(b);\n}"}
{"ids": "16302", "raw_code": "@Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,List<Double> values,XYSeriesRenderer seriesRenderer,SupportSeriesRender supportSeriesRender,float yAxisValue,int seriesIndex,int startIndex){\n  int seriesNr=mDataset.getSeriesCount();\n  int length=points.size();\n  paint.setColor(seriesRenderer.getColor());\n  paint.setStyle(Style.FILL);\n  float halfDiffX=getHalfDiffX(points,length,seriesNr);\n  int start=0;\n  if (startIndex > 0) {\n    start=2;\n  }\n  for (int i=start; i < length; i+=4) {\n    if (points.size() > i + 3) {\n      float xMin=points.get(i);\n      float yMin=points.get(i + 1);\n      float xMax=points.get(i + 2);\n      float yMax=points.get(i + 3);\n      drawBar(canvas,xMin,yMin,xMax,yMax,halfDiffX,seriesNr,seriesIndex,paint);\n    }\n  }\n  paint.setColor(seriesRenderer.getColor());\n}"}
{"ids": "56100", "raw_code": "private void beginGesture(int scrollOffsetY,int scrollExtentY){\n  mInitialTranslationY=getTranslationY();\n  boolean isInitiallyVisible=mInitialTranslationY < mTotalHeight;\n  int startingY=isInitiallyVisible ? scrollOffsetY : Math.min(scrollOffsetY,mTotalHeight);\n  mInitialOffsetY=startingY + scrollExtentY;\n}"}
{"ids": "67212", "raw_code": "@Override public void add(String... identifiers){\n  whitelist.addAll(Arrays.asList(identifiers));\n}"}
{"ids": "39844", "raw_code": "public static void clear(){\n  shopId.set(0L);\n  shopCode.set(\"DEFAULT\");\n}"}
{"ids": "28896", "raw_code": "@Override public boolean communicationInitiated(){\n  return bugsPopulated.getCount() == 0 && communicationInitiated && networkClient.ready();\n}"}
{"ids": "7395", "raw_code": "@Override public void dump(String prefix,FileDescriptor fd,PrintWriter writer,String[] args){\n  super.dump(prefix,fd,writer,args);\n  writer.print(prefix);\n  writer.print(\"rawQuery=\");\n  writer.println(rawQuery);\n  writer.print(prefix);\n  writer.print(\"args=\");\n  writer.println(Arrays.toString(args));\n}"}
{"ids": "86799", "raw_code": "public void addContigField(ContigField field){\n  addIdField(mContigLines,field);\n}"}
{"ids": "14682", "raw_code": "boolean removeIndexEntry(String resourceName,String policyName){\n  Iterator iter=topLevelEntries.iterator();\n  boolean processed=false;\n  while (!processed && (iter.hasNext())) {\n    ResourceIndexEntry resourceIndexEntry=(ResourceIndexEntry)iter.next();\n    if (resourceIndexEntry.removeIndexEntry(resourceType,resourceName,policyName)) {\n      processed=true;\n    }\n  }\n  return processed;\n}"}
{"ids": "53154", "raw_code": "public static double pdf(double x,double mu,double shape){\n  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {\n    return 0;\n  }\n  final double v=(x - mu) / mu;\n  double t1=Math.sqrt(shape / (MathUtil.TWOPI * x * x* x));\n  return t1 > 0 ? t1 * Math.exp(-shape * v * v* .5 / x) : 0;\n}"}
{"ids": "41872", "raw_code": "@Override public void onStopTrackingTouch(SeekBar seekBar){\n  final int pos=mItemList.indexOf(mSelectedTracker);\n  final int delta=840 / mItemList.size();\n  cp_mover.setProgress(pos * delta + delta / 2);\n}"}
{"ids": "29281", "raw_code": "public static int maxProfit(int[] prices){\n  if (prices == null || prices.length < 2) {\n    return 0;\n  }\n  int max=0;\n  int min=prices[0];\n  for (int i=1; i < prices.length; i++) {\n    min=Math.min(min,prices[i]);\n    if (prices[i] > prices[i - 1]) {\n      max=Math.max(max,prices[i] - min);\n    }\n  }\n  return max;\n}"}
{"ids": "28556", "raw_code": "public void add(String string){\n  elements.add(string == null ? JsonNull.INSTANCE : new JsonPrimitive(string));\n}"}
{"ids": "11476", "raw_code": "public void componentAdded(ContainerEvent e){\n  Layer childLayer=(Layer)e.getChild();\n  addProjectionListener(childLayer);\n  if (!removedLayers.removeElement(childLayer)) {\n    addedLayers.addElement(childLayer);\n  }\n  changeLayers(e);\n}"}
{"ids": "61499", "raw_code": "public void processingInstruction(String target,String data) throws SAXException {\n  charactersFlush();\n  int dataIndex=m_data.size();\n  m_previous=addNode(DTM.PROCESSING_INSTRUCTION_NODE,DTM.PROCESSING_INSTRUCTION_NODE,m_parents.peek(),m_previous,-dataIndex,false);\n  m_data.addElement(m_valuesOrPrefixes.stringToIndex(target));\n  m_values.addElement(data);\n  m_data.addElement(m_valueIndex++);\n}"}
{"ids": "46992", "raw_code": "protected void panic(String msg) throws SAXException {\n  SAXParseException spe=new SAXParseException(msg,this);\n  mHandErr.fatalError(spe);\n  throw spe;\n}"}
{"ids": "56799", "raw_code": "private void updateNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity,List<NamespacePermissionEnum> namespacePermissions){\n  userNamespaceAuthorizationEntity.setReadPermission(namespacePermissions.contains(NamespacePermissionEnum.READ));\n  userNamespaceAuthorizationEntity.setWritePermission(namespacePermissions.contains(NamespacePermissionEnum.WRITE));\n  userNamespaceAuthorizationEntity.setExecutePermission(namespacePermissions.contains(NamespacePermissionEnum.EXECUTE));\n  userNamespaceAuthorizationEntity.setGrantPermission(namespacePermissions.contains(NamespacePermissionEnum.GRANT));\n}"}
{"ids": "42530", "raw_code": "public static void report(){\n  if (!booted)   return;\n  ControllerThread.report();\n  RuntimeMeasurements.report();\n  for (Enumeration<Organizer> e=organizers.elements(); e.hasMoreElements(); ) {\n    Organizer organizer=e.nextElement();\n    organizer.report();\n  }\n  if (options.FINAL_REPORT_LEVEL >= 2) {\n    EdgeCounts.dumpCounts();\n    dcg.dumpGraph();\n  }\n  if (options.REPORT_INTERRUPT_STATS) {\n    VM.sysWriteln(\"Timer Interrupt and Listener Stats\");\n    VM.sysWriteln(\"\\tTotal number of clock ticks \",RVMThread.timerTicks);\n    VM.sysWriteln(\"\\tController clock \",controllerClock);\n    VM.sysWriteln(\"\\tNumber of method samples taken \",(int)methodSamples.getTotalNumberOfSamples());\n  }\n}"}
{"ids": "85624", "raw_code": "public static Set<?> convertArrayToSet(Object[] source){\n  Set<Object> set=new HashSet<Object>();\n  for (  Object element : source) {\n    set.add(element);\n  }\n  return set;\n}"}
{"ids": "63800", "raw_code": "public static int intersectLineRectangle(Line2D l,Rectangle2D r,Point2D[] pts){\n  double a1x=l.getX1(), a1y=l.getY1();\n  double a2x=l.getX2(), a2y=l.getY2();\n  double mxx=r.getMaxX(), mxy=r.getMaxY();\n  double mnx=r.getMinX(), mny=r.getMinY();\n  if (pts[0] == null)   pts[0]=new Point2D.Double();\n  if (pts[1] == null)   pts[1]=new Point2D.Double();\n  int i=0;\n  if (intersectLineLine(mnx,mny,mxx,mny,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;\n  if (intersectLineLine(mxx,mny,mxx,mxy,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;\n  if (i == 2)   return i;\n  if (intersectLineLine(mxx,mxy,mnx,mxy,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;\n  if (i == 2)   return i;\n  if (intersectLineLine(mnx,mxy,mnx,mny,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;\n  return i;\n}"}
{"ids": "19987", "raw_code": "public static String cidrMaskToNetMask(String cidrMask){\n  if (cidrMask == null) {\n    return null;\n  }\n  int cidrMaskValue=0;\n  try {\n    cidrMaskValue=Integer.parseInt(cidrMask);\n  }\n catch (  NumberFormatException e) {\n    return null;\n  }\n  int cidrMaskFull=0xffffffff << (32 - cidrMaskValue);\n  int cidrMaskBits1=cidrMaskFull >> 24 & 0xff;\n  int cidrMaskBits2=cidrMaskFull >> 16 & 0xff;\n  int cidrMaskBits3=cidrMaskFull >> 8 & 0xff;\n  int cidrMaskBits4=cidrMaskFull >> 0 & 0xff;\n  StringBuffer netMaskBuf=new StringBuffer();\n  netMaskBuf.append(cidrMaskBits1);\n  netMaskBuf.append('.');\n  netMaskBuf.append(cidrMaskBits2);\n  netMaskBuf.append('.');\n  netMaskBuf.append(cidrMaskBits3);\n  netMaskBuf.append('.');\n  netMaskBuf.append(cidrMaskBits4);\n  return netMaskBuf.toString();\n}"}
{"ids": "51935", "raw_code": "public boolean inBounds(MouseEvent e){\n  return e.getX() > x && e.getX() < x + width && e.getY() > y && e.getY() < y + height;\n}"}
{"ids": "35864", "raw_code": "public ClassPath(@Nonnull Iterable<DexFile> classPath,boolean checkPackagePrivateAccess){\n  Iterable<DexFile> dexFiles=Iterables.concat(classPath,Lists.newArrayList(getBasicClasses()));\n  unknownClass=new UnknownClassProto(this);\n  loadedClasses.put(unknownClass.getType(),unknownClass);\n  this.checkPackagePrivateAccess=checkPackagePrivateAccess;\n  loadPrimitiveType(\"Z\");\n  loadPrimitiveType(\"B\");\n  loadPrimitiveType(\"S\");\n  loadPrimitiveType(\"C\");\n  loadPrimitiveType(\"I\");\n  loadPrimitiveType(\"J\");\n  loadPrimitiveType(\"F\");\n  loadPrimitiveType(\"D\");\n  loadPrimitiveType(\"L\");\n  for (  DexFile dexFile : dexFiles) {\n    for (    ClassDef classDef : dexFile.getClasses()) {\n      ClassDef prev=availableClasses.get(classDef.getType());\n      if (prev == null) {\n        availableClasses.put(classDef.getType(),classDef);\n      }\n    }\n  }\n}"}
{"ids": "29151", "raw_code": "private boolean askToSave(){\n  if (mainFrame.isProjectChanged()) {\n    int response=JOptionPane.showConfirmDialog(mainFrame,L10N.getLocalString(\"dlg.save_current_changes\",\"The current project has been changed, Save current changes?\"),L10N.getLocalString(\"dlg.save_changes\",\"Save Changes?\"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);\n    if (response == JOptionPane.YES_OPTION) {\n      if (mainFrame.getSaveFile() != null) {\n        save();\n      }\n else {\n        saveAs();\n      }\n    }\n else     if (response == JOptionPane.CANCEL_OPTION) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "9297", "raw_code": "public MapCursor addCursor(MapCursor cursor){\n  cursors.add(cursor);\n  return cursor;\n}"}
{"ids": "16736", "raw_code": "private boolean discardUpstreamMediaChunks(int queueLength){\n  if (mediaChunks.size() <= queueLength) {\n    return false;\n  }\n  long startTimeUs=0;\n  long endTimeUs=mediaChunks.getLast().endTimeUs;\n  BaseMediaChunk removed=null;\n  while (mediaChunks.size() > queueLength) {\n    removed=mediaChunks.removeLast();\n    startTimeUs=removed.startTimeUs;\n  }\n  sampleQueue.discardUpstreamSamples(removed.getFirstSampleIndex());\n  notifyUpstreamDiscarded(startTimeUs,endTimeUs);\n  return true;\n}"}
{"ids": "74625", "raw_code": "public MetalinkFileBuilder addFile(String name){\n  MetalinkFileBuilder newFile=new MetalinkFileBuilder(name);\n  files.add(newFile);\n  return newFile;\n}"}
{"ids": "50152", "raw_code": "private void sendAfterConnect(Channel ch,NettyChannelContext contextFinal,Operation request,NettyChannelGroup group){\n  if (request.getStatusCode() < Operation.STATUS_CODE_FAILURE_THRESHOLD) {\n    request.complete();\n  }\n else {\n    request.fail(request.getStatusCode());\n  }\n}"}
{"ids": "32680", "raw_code": "protected String checkProduction(final Territory to,final Collection<Unit> units,final PlayerID player){\n  final List<Territory> producers=getAllProducers(to,player,units);\n  if (producers.isEmpty()) {\n    return \"No factory in or adjacent to \" + to.getName();\n  }\n  Collections.sort(producers,getBestProducerComparator(to,units,player));\n  if (!getCanAllUnitsWithRequiresUnitsBePlacedCorrectly(units,to)) {\n    return \"Cannot place more units which require units, than production capacity of territories with the required units\";\n  }\n  final int maxUnitsToBePlaced=getMaxUnitsToBePlaced(units,to,player,true);\n  if ((maxUnitsToBePlaced != -1) && (maxUnitsToBePlaced < units.size())) {\n    return \"Cannot place \" + units.size() + \" more units in \"+ to.getName();\n  }\n  return null;\n}"}
{"ids": "3607", "raw_code": "@Override public void closeWrite() throws IOException {\n  if (_isWriteClosed) {\n    return;\n  }\n  _isWriteClosed=true;\n  SocketStream stream=_streamImpl;\n  if (stream != null) {\n    stream.closeWrite();\n  }\n else   if (_s != null) {\n    try {\n      _s.shutdownOutput();\n    }\n catch (    UnsupportedOperationException e) {\n      log.log(Level.FINEST,e.toString(),e);\n    }\ncatch (    Exception e) {\n      log.finer(e.toString());\n      log.log(Level.FINEST,e.toString(),e);\n    }\n  }\n}"}
{"ids": "49338", "raw_code": "public boolean equals(Object that){\n  return (that instanceof CharSet) && Arrays.equals(chars,((CharSet)that).chars);\n}"}
{"ids": "85727", "raw_code": "public static Void processRecords(List<KinesisEventRecord> inputRecords,KinesisUserRecordProcessor processor){\n  List<Record> rawRecords=new LinkedList<>();\n  for (  KinesisEventRecord rec : inputRecords) {\n    rawRecords.add(rec.getKinesis());\n  }\n  return processor.process(UserRecord.deaggregate(rawRecords));\n}"}
{"ids": "68382", "raw_code": "protected Font resolveFont(SharedContext ctx,String font,float size,IdentValue weight,IdentValue style,IdentValue variant){\n  if (font.startsWith(\"\\\"\")) {\n    font=font.substring(1);\n  }\n  if (font.endsWith(\"\\\"\")) {\n    font=font.substring(0,font.length() - 1);\n  }\n  if (font.equalsIgnoreCase(\"serif\")) {\n    font=\"Serif\";\n  }\n  if (font.equalsIgnoreCase(\"sans-serif\")) {\n    font=\"SansSerif\";\n  }\n  if (font.equalsIgnoreCase(\"monospace\")) {\n    font=\"Monospaced\";\n  }\n  if (font.equals(\"Serif\") && style == IdentValue.OBLIQUE) {\n    font=\"SansSerif\";\n  }\n  if (font.equals(\"SansSerif\") && style == IdentValue.ITALIC) {\n    font=\"Serif\";\n  }\n  String fontInstanceName=getFontInstanceHashName(ctx,font,size,weight,style,variant);\n  if (instanceHash.containsKey(fontInstanceName)) {\n    return instanceHash.get(fontInstanceName);\n  }\n  if (availableFontsHash.containsKey(font)) {\n    Font possiblyNullFont=availableFontsHash.get(font);\n    Font rootFont=null;\n    if (possiblyNullFont != null) {\n      rootFont=possiblyNullFont;\n    }\n else {\n      rootFont=new Font(font,Font.PLAIN,1);\n      availableFontsHash.put(font,rootFont);\n    }\n    Font fnt=createFont(ctx,rootFont,size,weight,style,variant);\n    instanceHash.put(fontInstanceName,fnt);\n    return fnt;\n  }\n  return null;\n}"}
{"ids": "72438", "raw_code": "public ArrayRealVector(double[] d,int pos,int size) throws MathIllegalArgumentException, NullArgumentException {\n  if (d == null) {\n    throw new NullArgumentException();\n  }\n  if (d.length < pos + size) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE,pos + size,d.length);\n  }\n  data=new double[size];\n  System.arraycopy(d,pos,data,0,size);\n}"}
{"ids": "79248", "raw_code": "public void clearPaymentMethodsById(List<String> paymentMethodIdsToRemove){\n  if (UtilValidate.isEmpty(paymentMethodIdsToRemove))   return;\n  for (Iterator<CartPaymentInfo> iter=paymentInfo.iterator(); iter.hasNext(); ) {\n    CartPaymentInfo info=iter.next();\n    if (paymentMethodIdsToRemove.contains(info.paymentMethodId)) {\n      iter.remove();\n    }\n  }\n}"}
{"ids": "29502", "raw_code": "@Override public void clean(){\n  setCurrentPoints(0);\n  checkState();\n}"}
{"ids": "13761", "raw_code": "public void handleButton2Request(RequestInvocationEvent event){\n  setPageSessionAttribute(getTrackingTabIDName(),AMAdminConstants.FED_TAB_ID);\n  setPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID,getTrackingTabIDName());\n  FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);\n  backTrail();\n  passPgSessionMap(vb);\n  vb.forwardTo(getRequestContext());\n}"}
{"ids": "38717", "raw_code": "@Override public void performRequest(String request){\n  if (request.compareTo(\"Stop\") == 0) {\n    stop();\n  }\n else {\n    throw new IllegalArgumentException(request + \" not supported (Filter)\");\n  }\n}"}
{"ids": "45754", "raw_code": "public byte[] toBytes(){\n  byte[] returnBytes=new byte[bytesLength];\n  System.arraycopy(bytes,0,returnBytes,0,bytesLength);\n  return returnBytes;\n}"}
{"ids": "9777", "raw_code": "public void startCheck(){\n  checker=new Thread(new CheckForUpdate());\n  checker.setPriority(Thread.MIN_PRIORITY);\n  checker.start();\n}"}
{"ids": "23124", "raw_code": "public boolean isAckSeen(){\n  return this.ackSeen;\n}"}
{"ids": "82844", "raw_code": "protected void uninstallListeners(){\n  super.uninstallListeners();\n  splitPane.removePropertyChangeListener(this);\n}"}
{"ids": "52510", "raw_code": "private static Collector<SegmentInfo,?,Map<String,SegmentInfo>> partitionsToMapCollector(){\n  return Collector.of(null,null,null);\n}"}
{"ids": "64379", "raw_code": "public boolean isCrc(){\n  return isFlags(FLAG_CACHED_VALUES_CHECKED & FLAG_CRC_CALCED);\n}"}
{"ids": "27383", "raw_code": "public int size(){\n  return queue.size();\n}"}
{"ids": "47443", "raw_code": "@Override public StringBuffer format(double number,StringBuffer result,FieldPosition fieldPosition){\n  boolean tryFastPath=false;\n  if (fieldPosition == DontCareFieldPosition.INSTANCE)   tryFastPath=true;\n else {\n    fieldPosition.setBeginIndex(0);\n    fieldPosition.setEndIndex(0);\n  }\n  if (tryFastPath) {\n    String tempResult=fastFormat(number);\n    if (tempResult != null) {\n      result.append(tempResult);\n      return result;\n    }\n  }\n  return format(number,result,fieldPosition.getFieldDelegate());\n}"}
{"ids": "62841", "raw_code": "private void buildCursorConditionally(MatrixCursor cursor,CharacterRecord cr,String selection,String[] selectionArgs){\n  if (selectionArgs == null)   cursor.addRow(new Object[]{cr.getId(),cr.getName(),cr.getRace()});\n else   for (  String item : selectionArgs)   if ((selection.equals(CharacterContract.CharacterEntry.COLUMN_NAME) && item.equals(cr.getName())) || (selection.equals(CharacterContract.CharacterEntry.COLUMN_RACE) && item.equals(cr.getRace()))) {\n    cursor.addRow(new Object[]{cr.getId(),cr.getName(),cr.getRace()});\n  }\n}"}
{"ids": "64384", "raw_code": "public ModpackFileSelectionPanel(WizardController controller,Map wizardData,File gameDir,BiFunction<String,Boolean,Integer> blackList){\n  initComponents();\n  this.controller=controller;\n  this.wizardData=wizardData;\n  this.blackList=blackList;\n  CheckBoxTreeNode root=create(gameDir,\"minecraft\");\n  jTree1.setModel(new DefaultTreeModel(root));\n  jTree1.setCellRenderer(new CheckBoxTreeCellRenderer());\n  jTree1.addMouseListener(new CheckBoxTreeNodeSelectionListener());\n  wizardData.put(\"blackList\",root);\n}"}
{"ids": "45195", "raw_code": "public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){\n  Graphics2D g2d=(Graphics2D)g;\n  Composite originalComposite=null;\n  if (getAlpha() < 1.0f) {\n    originalComposite=g2d.getComposite();\n    g2d.setComposite(getAlphaComposite());\n  }\n  Paint paint=getPaint();\n  if (paint == null)   g2d.setColor(c.getSelectionColor());\n else   g2d.setPaint(paint);\n  if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) {\n    Rectangle alloc;\n    if (bounds instanceof Rectangle)     alloc=(Rectangle)bounds;\n else     alloc=bounds.getBounds();\n    g2d.fillRect(alloc.x,alloc.y,alloc.width,alloc.height);\n    if (getAlpha() < 1.0f)     g2d.setComposite(originalComposite);\n    return alloc;\n  }\n else {\n    try {\n      Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds);\n      Rectangle r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();\n      if (roundedEdges) {\n        g2d.fillRoundRect(r.x,r.y,r.width,r.height,ARCWIDTH,ARCHEIGHT);\n      }\n else {\n        g2d.fillRect(r.x,r.y,r.width,r.height);\n      }\n      if (getAlpha() < 1.0f)       g2d.setComposite(originalComposite);\n      return r;\n    }\n catch (    BadLocationException ble) {\n      ble.printStackTrace();\n    }\n finally {\n      if (getAlpha() < 1.0f)       g2d.setComposite(originalComposite);\n    }\n  }\n  return null;\n}"}
{"ids": "24984", "raw_code": "private void createContainerIfNecessary(){\n  if (container.isFull()) {\n    container=new TimerRawContainer();\n    data.add(container);\n  }\n}"}
{"ids": "54441", "raw_code": "private void processUpdateCounts(int[] updateCounts,int commandsInBatch){\n  if (updateCounts.length < commandsInBatch) {\n    error.emit(tuples.get(updateCounts.length + batchStartIdx));\n    errorTuples++;\n    tuplesWrittenSuccessfully+=updateCounts.length;\n    batchStartIdx+=updateCounts.length + 1;\n    if ((tuples.size() - batchStartIdx) > 0) {\n      processBatch();\n    }\n  }\n else {\n    tuplesWrittenSuccessfully=commandsInBatch;\n    for (int i=0; i < commandsInBatch; i++) {\n      if (updateCounts[i] == Statement.EXECUTE_FAILED) {\n        error.emit(tuples.get(i + batchStartIdx));\n        errorTuples++;\n        tuplesWrittenSuccessfully--;\n      }\n    }\n  }\n}"}
{"ids": "31102", "raw_code": "public int chooseProtocolVersion(){\n  return preferredProtocolVersion;\n}"}
{"ids": "73669", "raw_code": "public Sensor createNewSensor(String systemName,String userName){\n  Sensor s;\n  String sName=AcelaAddress.normalizeSystemName(systemName);\n  if (sName.equals(\"\")) {\n    log.error(\"Invalid Acela Sensor system name: \" + systemName);\n    return null;\n  }\n  s=getBySystemName(sName);\n  if (s != null) {\n    log.error(\"Sensor with this name already exists: \" + systemName);\n    return null;\n  }\n  String altName=AcelaAddress.convertSystemNameToAlternate(sName);\n  s=getBySystemName(altName);\n  if (s != null) {\n    log.error(\"Sensor with name: '\" + systemName + \"' already exists as: '\"+ altName+ \"'\");\n    return null;\n  }\n  int bit=AcelaAddress.getBitFromSystemName(sName);\n  if ((bit < 0) || (bit >= 1023)) {\n    log.error(\"Sensor bit number: \" + Integer.toString(bit) + \", is outside the supported range, 1-1024\");\n    return null;\n  }\n  if (userName == null) {\n    s=new AcelaSensor(sName);\n  }\n else {\n    s=new AcelaSensor(sName,userName);\n  }\n  AcelaNode node=AcelaAddress.getNodeFromSystemName(sName,_memo);\n  if (node == null) {\n    log.warn(\"Sensor: \" + sName + \", refers to an undefined Acela Node.\");\n    return s;\n  }\n  if (!node.hasActiveSensors) {\n    int newnodeaddress;\n    newnodeaddress=node.getNodeAddress();\n    log.warn(\"We got the wrong node: \" + newnodeaddress);\n    return s;\n  }\n  node.registerSensor(s,bit);\n  return s;\n}"}
{"ids": "12942", "raw_code": "public static InputStream needStream(String propertyName) throws NoSuchPropertyException, FileNotFoundException, MaryConfigurationException {\n  MaryProperties.needProperty(propertyName);\n  return getStream(propertyName);\n}"}
{"ids": "17500", "raw_code": "public static boolean equal(Object a,Object b){\n  return a == b || (a != null && a.equals(b));\n}"}
{"ids": "76598", "raw_code": "public static String networkNameToString(byte[] data,int offset,int length){\n  String ret;\n  if ((data[offset] & 0x80) != 0x80 || length < 1) {\n    return \"\";\n  }\nswitch ((data[offset] >>> 4) & 0x7) {\ncase 0:\n    int countSeptets;\n  int unusedBits=data[offset] & 7;\ncountSeptets=(((length - 1) * 8) - unusedBits) / 7;\nret=GsmAlphabet.gsm7BitPackedToString(data,offset + 1,countSeptets);\nbreak;\ncase 1:\ntry {\nret=new String(data,offset + 1,length - 1,\"utf-16\");\n}\n catch (UnsupportedEncodingException ex) {\nret=\"\";\nLog.e(LOG_TAG,\"implausible UnsupportedEncodingException\",ex);\n}\nbreak;\ndefault :\nret=\"\";\nbreak;\n}\nif ((data[offset] & 0x40) != 0) {\n}\nreturn ret;\n}"}
{"ids": "71754", "raw_code": "public void add(Marker marker){\n  mItems.add(marker);\n}"}
{"ids": "83891", "raw_code": "private static Map.Entry<DateTime,TimeSeriesValue> findName(List<TimeSeriesCollection> c,GroupName name){\n  ListIterator<TimeSeriesCollection> iter=c.listIterator();\n  while (iter.hasNext()) {\n    final int idx=iter.nextIndex();\n    final TimeSeriesCollection tsdata=iter.next();\n    final Optional<TimeSeriesValue> found=tsdata.get(name);\n    if (found.isPresent())     return SimpleMapEntry.create(tsdata.getTimestamp(),found.get());\n  }\n  throw new IllegalStateException(\"name not present in list of time series collections\");\n}"}
{"ids": "26185", "raw_code": "public Map<String,Object> finalizeOrderEntryPayment(String checkOutPaymentId,BigDecimal amount,boolean singleUse,boolean append){\n  Map<String,Object> result=ServiceUtil.returnSuccess();\n  if (UtilValidate.isNotEmpty(checkOutPaymentId)) {\n    if (!append) {\n      cart.clearPayments();\n    }\n    cart.addPaymentAmount(checkOutPaymentId,amount,singleUse);\n  }\n  return result;\n}"}
{"ids": "44713", "raw_code": "public void deploy(String routeId,String routeName,JsonValue routeConfig) throws RouterHandlerException {\n  Reject.ifNull(routeName);\n  write.lock();\n  try {\n    load(routeId,routeName,routeConfig.copy());\n    directoryMonitor.store(routeId,routeConfig);\n    logger.info(\"Deployed the route with id '{}' named '{}'\",routeId,routeName);\n  }\n catch (  IOException e) {\n    throw new RouterHandlerException(format(\"An error occurred while storing the route '%s'\",routeId),e);\n  }\n finally {\n    write.unlock();\n  }\n}"}
{"ids": "69847", "raw_code": "private static char[] subscriptForDigit(int digit){\n  return Character.toChars(0x2080 + digit);\n}"}
{"ids": "31734", "raw_code": "private FsPermission permission(IgfsFile file){\n  String perm=file.property(IgfsUtils.PROP_PERMISSION,null);\n  if (perm == null)   return FsPermission.getDefault();\n  try {\n    return new FsPermission((short)Integer.parseInt(perm,8));\n  }\n catch (  NumberFormatException ignore) {\n    return FsPermission.getDefault();\n  }\n}"}
{"ids": "44412", "raw_code": "public SimpleMailboxACL(){\n  this.entries=Collections.emptyMap();\n}"}
{"ids": "3924", "raw_code": "private void readStreamResult(InH3 hIn,HeadersAmp headers) throws IOException {\n  ServiceRefAmp serviceRef=readToAddress(hIn);\n  long id=hIn.readLong();\n  QueryRefAmp queryRef=serviceRef.getQueryRef(id);\n  if (queryRef != null) {\n    ClassLoader loader=queryRef.getClassLoader();\n    Thread thread=Thread.currentThread();\n    thread.setContextClassLoader(loader);\n  }\n  int sequence=hIn.readInt();\n  List<Object> values=(List)hIn.readObject();\n  Throwable exn=(Throwable)hIn.readObject(Throwable.class);\n  boolean isComplete=hIn.readBoolean();\n  if (log.isLoggable(_logLevel)) {\n    log.log(_logLevel,\"stream-result-r \" + values + \",\"+ isComplete+ \" (in \"+ this+ \")\"+ \"\\n  {id:\"+ id+ \", to:\"+ serviceRef+ \",\"+ headers+ \"}\");\n  }\n  if (queryRef != null) {\n    if (queryRef.accept(headers,values,sequence,isComplete)) {\n      serviceRef.removeQueryRef(id);\n    }\n    if (exn != null) {\n      serviceRef.removeQueryRef(id);\n      queryRef.fail(headers,exn);\n    }\n  }\n else   if (log.isLoggable(Level.WARNING)) {\n    log.warning(\"query-result qid=\" + id + \" for service \"+ serviceRef+ \" does not match any known queries.\\n\"+ headers);\n  }\n}"}
{"ids": "48869", "raw_code": "public static int rectCrossingsForPath(PathIterator pi,double rxmin,double rymin,double rxmax,double rymax){\n  if (rxmax <= rxmin || rymax <= rymin) {\n    return 0;\n  }\n  if (pi.isDone()) {\n    return 0;\n  }\n  double coords[]=new double[6];\n  if (pi.currentSegment(coords) != PathIterator.SEG_MOVETO) {\n    throw new IllegalPathStateException(\"missing initial moveto \" + \"in path definition\");\n  }\n  pi.next();\n  double curx, cury, movx, movy, endx, endy;\n  curx=movx=coords[0];\n  cury=movy=coords[1];\n  int crossings=0;\n  while (crossings != RECT_INTERSECTS && !pi.isDone()) {\nswitch (pi.currentSegment(coords)) {\ncase PathIterator.SEG_MOVETO:\n      if (curx != movx || cury != movy) {\n        crossings=rectCrossingsForLine(crossings,rxmin,rymin,rxmax,rymax,curx,cury,movx,movy);\n      }\n    movx=curx=coords[0];\n  movy=cury=coords[1];\nbreak;\ncase PathIterator.SEG_LINETO:\nendx=coords[0];\nendy=coords[1];\ncrossings=rectCrossingsForLine(crossings,rxmin,rymin,rxmax,rymax,curx,cury,endx,endy);\ncurx=endx;\ncury=endy;\nbreak;\ncase PathIterator.SEG_QUADTO:\nendx=coords[2];\nendy=coords[3];\ncrossings=rectCrossingsForQuad(crossings,rxmin,rymin,rxmax,rymax,curx,cury,coords[0],coords[1],endx,endy,0);\ncurx=endx;\ncury=endy;\nbreak;\ncase PathIterator.SEG_CUBICTO:\nendx=coords[4];\nendy=coords[5];\ncrossings=rectCrossingsForCubic(crossings,rxmin,rymin,rxmax,rymax,curx,cury,coords[0],coords[1],coords[2],coords[3],endx,endy,0);\ncurx=endx;\ncury=endy;\nbreak;\ncase PathIterator.SEG_CLOSE:\nif (curx != movx || cury != movy) {\ncrossings=rectCrossingsForLine(crossings,rxmin,rymin,rxmax,rymax,curx,cury,movx,movy);\n}\ncurx=movx;\ncury=movy;\nbreak;\n}\npi.next();\n}\nif (crossings != RECT_INTERSECTS && (curx != movx || cury != movy)) {\ncrossings=rectCrossingsForLine(crossings,rxmin,rymin,rxmax,rymax,curx,cury,movx,movy);\n}\nreturn crossings;\n}"}
{"ids": "73399", "raw_code": "public void updateFieldVisibility(NeuronUpdateRule rule){\n  boolean bounded=rule instanceof BoundedUpdateRule;\n  boolean clip=false;\n  setBoundsPanelVisible(bounded);\n  if (bounded) {\n    clip=rule instanceof ClippableUpdateRule;\n    clippingDropDown.setSelected(clip);\n  }\n  setClippingPanelVisible(clip);\n  setBoundsEnabled(bounded);\n}"}
{"ids": "67611", "raw_code": "@Override public int hashCode(){\n  int hash=0;\n  if (altFormat != null) {\n    hash+=altFormat.hashCode();\n  }\n  if (projection != null) {\n    hash=hash * 37;\n    hash+=projection.hashCode();\n  }\n  if (version != null) {\n    hash=hash * 37;\n    hash+=version.hashCode();\n  }\n  return hash;\n}"}
{"ids": "38388", "raw_code": "public void removeOkListener(ActionListener a){\n  m_okBut.removeActionListener(a);\n}"}
{"ids": "4923", "raw_code": "void change_item_shape(BrdItem p_item,int p_shape_no,ShapeTile p_new_shape){\n  AwtreeNodeLeaf[] old_entries=p_item.get_search_tree_entries(this);\n  AwtreeNodeLeaf[] new_leaf_arr=new AwtreeNodeLeaf[old_entries.length];\n  ShapeTile[] new_precalculated_tree_shapes=new ShapeTile[old_entries.length];\n  remove_leaf(old_entries[p_shape_no]);\n  for (int i=0; i < new_precalculated_tree_shapes.length; ++i) {\n    if (i == p_shape_no) {\n      new_precalculated_tree_shapes[i]=p_new_shape;\n    }\n else {\n      new_precalculated_tree_shapes[i]=p_item.get_tree_shape(this,i);\n      new_leaf_arr[i]=old_entries[i];\n    }\n  }\n  p_item.set_precalculated_tree_shapes(new_precalculated_tree_shapes,this);\n  new_leaf_arr[p_shape_no]=insert(p_item,p_shape_no);\n  p_item.set_search_tree_entries(this,new_leaf_arr);\n}"}
{"ids": "9655", "raw_code": "public JQuickStartPane(KseFrame kseFrame){\n  super(GRADIENT_COLOR_1,GRADIENT_COLOR_2);\n  this.kseFrame=kseFrame;\n  new DropTarget(this,this);\n  initComponents();\n}"}
{"ids": "362", "raw_code": "protected String decode(String urlString){\n  try {\n    Class clazz=URLDecoder.class;\n    Method method=clazz.getDeclaredMethod(\"decode\",new Class[]{String.class,String.class});\n    if (urlString.indexOf('+') >= 0) {\n      int len=urlString.length();\n      StringBuffer buf=new StringBuffer(len);\n      for (int i=0; i < len; i++) {\n        char c=urlString.charAt(i);\n        if (c == '+')         buf.append(\"%2B\");\n else         buf.append(c);\n      }\n      urlString=buf.toString();\n    }\n    Object result=method.invoke(null,new Object[]{urlString,\"UTF-8\"});\n    if (result != null)     return (String)result;\n  }\n catch (  Exception e) {\n  }\n  boolean replaced=false;\n  byte[] encodedBytes=urlString.getBytes();\n  int encodedLength=encodedBytes.length;\n  byte[] decodedBytes=new byte[encodedLength];\n  int decodedLength=0;\n  for (int i=0; i < encodedLength; i++) {\n    byte b=encodedBytes[i];\n    if (b == '%') {\n      if (i + 2 >= encodedLength)       throw new IllegalArgumentException(\"Malformed URL (\\\"\" + urlString + \"\\\"): % must be followed by 2 digits.\");\n      byte enc1=encodedBytes[++i];\n      byte enc2=encodedBytes[++i];\n      b=(byte)((hexToByte(enc1) << 4) + hexToByte(enc2));\n      replaced=true;\n    }\n    decodedBytes[decodedLength++]=b;\n  }\n  if (!replaced)   return urlString;\n  try {\n    return new String(decodedBytes,0,decodedLength,\"UTF-8\");\n  }\n catch (  UnsupportedEncodingException e) {\n    return new String(decodedBytes,0,decodedLength);\n  }\n}"}
{"ids": "27476", "raw_code": "public static String indent(final int depth){\n  if (depth < 0) {\n    return \"\";\n  }\n  return ws.substring(0,Math.min(ws.length(),depth * 2));\n}"}
{"ids": "4858", "raw_code": "public ExceptionlessOutputStream(OutputStream out){\n  super(new DataOutputStream(out));\n  dos=(DataOutputStream)this.out;\n}"}
{"ids": "69749", "raw_code": "public T advanceToElement(Predicate<T> predicate){\n  Node<T> start=head;\n  if (head == null)   return null;\n  do {\n    T currElement=advance();\n    if (predicate.test(currElement)) {\n      return currElement;\n    }\n  }\n while (head != start);\n  return null;\n}"}
{"ids": "54203", "raw_code": "public void addTrace(final Trace trace){\n  traceList.add(trace);\n  add(trace);\n  revalidate();\n}"}
{"ids": "26640", "raw_code": "public static void pingAllDevices(String message) throws IOException {\n  Sender sender=new Sender(Ids.API_KEY);\n  for (  DeviceInfo deviceInfo : endpoint.listDeviceInfo()) {\n    doSendViaGcm(message,sender,deviceInfo);\n  }\n}"}
{"ids": "40722", "raw_code": "public static void w(String tag,String msg,Object... args){\n  if (sLevel > LEVEL_WARNING) {\n    return;\n  }\n  if (args.length > 0) {\n    msg=String.format(msg,args);\n  }\n  Log.w(tag,msg);\n}"}
{"ids": "10025", "raw_code": "private void findMatchesInContexts(List<NumberContext> contexts,boolean isValid,boolean isPossible,String region,String number){\n  if (isValid) {\n    doTestInContext(number,region,contexts,Leniency.VALID);\n  }\n else {\n    for (    NumberContext context : contexts) {\n      String text=context.leadingText + number + context.trailingText;\n      assertTrue(\"Should not have found a number in \" + text,hasNoMatches(phoneUtil.findNumbers(text,region)));\n    }\n  }\n  if (isPossible) {\n    doTestInContext(number,region,contexts,Leniency.POSSIBLE);\n  }\n else {\n    for (    NumberContext context : contexts) {\n      String text=context.leadingText + number + context.trailingText;\n      assertTrue(\"Should not have found a number in \" + text,hasNoMatches(phoneUtil.findNumbers(text,region,Leniency.POSSIBLE,Long.MAX_VALUE)));\n    }\n  }\n}"}
{"ids": "14479", "raw_code": "@Override public int hashCode(){\n  int code=0;\n  if (eSubjects != null) {\n    for (    EntitlementSubject eSubject : eSubjects) {\n      code+=eSubject.hashCode();\n    }\n  }\n  if (pSubjectName != null) {\n    code+=pSubjectName.hashCode();\n  }\n  return code;\n}"}
{"ids": "15893", "raw_code": "private void assignRandomLowerTriangularMatrix(int n,SecureRandom sr){\n  numRows=n;\n  numColumns=n;\n  length=(n + 31) >>> 5;\n  matrix=new int[numRows][length];\n  for (int i=0; i < numRows; i++) {\n    int q=i >>> 5;\n    int r=i & 0x1f;\n    int s=31 - r;\n    r=1 << r;\n    for (int j=0; j < q; j++) {\n      matrix[i][j]=sr.nextInt();\n    }\n    matrix[i][q]=(sr.nextInt() >>> s) | r;\n    for (int j=q + 1; j < length; j++) {\n      matrix[i][j]=0;\n    }\n  }\n}"}
{"ids": "25029", "raw_code": "private boolean loadWithInspectItClassLoader(String className){\n  return className.startsWith(CLASS_NAME_PREFIX);\n}"}
{"ids": "55524", "raw_code": "public static void addCustomCommands(String commands,ContextMenu m){\n  Matcher matcher=CUSTOM_COMMANDS_PATTERN.matcher(commands);\n  boolean sep=false;\n  while (matcher.find()) {\n    String match=matcher.group();\n    if (match.equals(\"|\")) {\n      sep=true;\n    }\n else {\n      String command=matcher.group(2);\n      String submenu=null;\n      if (match.startsWith(\"//\")) {\n        submenu=CUSTOM_COMMANDS_SUBMENU;\n      }\n      if (sep) {\n        m.addSeparator(submenu);\n      }\n      m.addSubItem(\"command\" + command,Helper.replaceUnderscoreWithSpace(command),submenu);\n      sep=false;\n    }\n  }\n}"}
{"ids": "46692", "raw_code": "public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){\n  Border border=getBorder();\n  String title=getTitle();\n  if ((title != null) && !title.isEmpty()) {\n    int edge=(border instanceof TitledBorder) ? 0 : EDGE_SPACING;\n    JLabel label=getLabel(c);\n    Dimension size=label.getPreferredSize();\n    Insets insets=getBorderInsets(border,c,new Insets(0,0,0,0));\n    int borderX=x + edge;\n    int borderY=y + edge;\n    int borderW=width - edge - edge;\n    int borderH=height - edge - edge;\n    int labelY=y;\n    int labelH=size.height;\n    int position=getPosition();\nswitch (position) {\ncase ABOVE_TOP:\n      insets.left=0;\n    insets.right=0;\n  borderY+=labelH - edge;\nborderH-=labelH - edge;\nbreak;\ncase TOP:\ninsets.top=edge + insets.top / 2 - labelH / 2;\nif (insets.top < edge) {\nborderY-=insets.top;\nborderH+=insets.top;\n}\n else {\nlabelY+=insets.top;\n}\nbreak;\ncase BELOW_TOP:\nlabelY+=insets.top + edge;\nbreak;\ncase ABOVE_BOTTOM:\nlabelY+=height - labelH - insets.bottom- edge;\nbreak;\ncase BOTTOM:\nlabelY+=height - labelH;\ninsets.bottom=edge + (insets.bottom - labelH) / 2;\nif (insets.bottom < edge) {\nborderH+=insets.bottom;\n}\n else {\nlabelY-=insets.bottom;\n}\nbreak;\ncase BELOW_BOTTOM:\ninsets.left=0;\ninsets.right=0;\nlabelY+=height - labelH;\nborderH-=labelH - edge;\nbreak;\n}\ninsets.left+=edge + TEXT_INSET_H;\ninsets.right+=edge + TEXT_INSET_H;\nint labelX=x;\nint labelW=width - insets.left - insets.right;\nif (labelW > size.width) {\nlabelW=size.width;\n}\nswitch (getJustification(c)) {\ncase LEFT:\nlabelX+=insets.left;\nbreak;\ncase RIGHT:\nlabelX+=width - insets.right - labelW;\nbreak;\ncase CENTER:\nlabelX+=(width - labelW) / 2;\nbreak;\n}\nif (border != null) {\nif ((position != TOP) && (position != BOTTOM)) {\nborder.paintBorder(c,g,borderX,borderY,borderW,borderH);\n}\n else {\nGraphics g2=g.create();\nif (g2 instanceof Graphics2D) {\nGraphics2D g2d=(Graphics2D)g2;\nPath2D path=new Path2D.Float();\npath.append(new Rectangle(borderX,borderY,borderW,labelY - borderY),false);\npath.append(new Rectangle(borderX,labelY,labelX - borderX - TEXT_SPACING,labelH),false);\npath.append(new Rectangle(labelX + labelW + TEXT_SPACING,labelY,borderX - labelX + borderW - labelW - TEXT_SPACING,labelH),false);\npath.append(new Rectangle(borderX,labelY + labelH,borderW,borderY - labelY + borderH - labelH),false);\ng2d.clip(path);\n}\nborder.paintBorder(c,g2,borderX,borderY,borderW,borderH);\ng2.dispose();\n}\n}\ng.translate(labelX,labelY);\nlabel.setSize(labelW,labelH);\nlabel.paint(g);\ng.translate(-labelX,-labelY);\n}\n else if (border != null) {\nborder.paintBorder(c,g,x,y,width,height);\n}\n}"}
{"ids": "63138", "raw_code": "public int nextClearBit(int fromIndex){\n  int i=fromIndex >> ADDRESS_BITS;\n  int max=data.length;\n  for (; i < max; i++) {\n    if (data[i] == -1) {\n      continue;\n    }\n    int j=Math.max(fromIndex,i << ADDRESS_BITS);\n    for (int end=j + 64; j < end; j++) {\n      if (!get(j)) {\n        return j;\n      }\n    }\n  }\n  return max << ADDRESS_BITS;\n}"}
{"ids": "73789", "raw_code": "private final void nextRequest(){\n  pacingTimer.stop();\n  pacingTimer.restart();\n  replyTryCount=0;\n}"}
{"ids": "7134", "raw_code": "@Override public boolean equals(Object o){\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  Account account=(Account)o;\n  if (username != null ? !username.equals(account.username) : account.username != null) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "23953", "raw_code": "public static int identifyPid(final String name) throws PidUnavailableException {\n  try {\n    final int index=name.indexOf(\"@\");\n    if (index < 0) {\n      throw new PidUnavailableException(\"Unable to parse pid from \" + name);\n    }\n    return Integer.valueOf(name.substring(0,index));\n  }\n catch (  NumberFormatException e) {\n    throw new PidUnavailableException(\"Unable to parse pid from \" + name,e);\n  }\n}"}
{"ids": "11094", "raw_code": "protected Object next(){\n  int i=0;\n  char[] c;\n  try {\n    i=st.nextToken();\n  }\n catch (  IOException e) {\n    Debug.error(\"NetMapReader: \" + e.toString() + \" in toktest\\n\");\n  }\n  if ((i == StreamTokenizer.TT_EOF) || (i == 0))   return EOF;\n  if (i == StreamTokenizer.TT_WORD)   return new Symbol(st.sval,1);\n  if ((i == '\\'') || (i == '\\\"'))   return st.sval;\n  if (i == StreamTokenizer.TT_NUMBER)   return new Double(st.nval);\n  if ((i == '(') || (i == '[') || (i == '{'))   return LP;\n  if ((i == ')') || (i == ']') || (i == '}'))   return RP;\n  c=new char[1];\n  c[0]=(char)i;\n  return new Symbol(new String(c),2);\n}"}
{"ids": "23666", "raw_code": "public static void copy(File source,File dest) throws IOException {\n  if (source.isDirectory()) {\n    dest.mkdir();\n    for (    File child : listFiles(source)) {\n      copy(child,new File(dest,child.getName()));\n    }\n  }\n else {\n    if (source.exists()) {\n      long lm=source.lastModified();\n      if (dest.isDirectory()) {\n        dest=new File(dest,source.getName());\n      }\n      FileOutputStream fos=new FileOutputStream(dest);\n      try {\n        FileInputStream fis=new FileInputStream(source);\n        try {\n          if (USE_NIO) {\n            nioCopy(fos,fis);\n          }\n else {\n            oioCopy(source,fos,fis);\n          }\n        }\n  finally {\n          fis.close();\n        }\n      }\n  finally {\n        fos.close();\n      }\n      dest.setExecutable(source.canExecute(),true);\n      dest.setLastModified(lm);\n    }\n  }\n}"}
{"ids": "24097", "raw_code": "private void notifyResourceEventListeners(ResourceEvent event,Object resource){\n  for (Iterator<ResourceEventsListener> iter=resourceListeners.iterator(); iter.hasNext(); ) {\n    try {\n      ResourceEventsListener listener=(ResourceEventsListener)iter.next();\n      listener.handleEvent(event,resource);\n    }\n catch (    CancelException e) {\n    }\ncatch (    GemFireSecurityException|ManagementException ex) {\n      if (event == ResourceEvent.CACHE_CREATE) {\n        throw ex;\n      }\n else {\n        logger.warn(ex.getMessage(),ex);\n      }\n    }\ncatch (    Exception err) {\n      logger.warn(err.getMessage(),err);\n    }\ncatch (    VirtualMachineError e) {\n      SystemFailure.initiateFailure(e);\n      throw e;\n    }\ncatch (    Throwable t) {\n      SystemFailure.checkFailure();\n      logger.warn(t.getMessage(),t);\n    }\n  }\n}"}
{"ids": "56293", "raw_code": "private void inferCaller(){\n  needToInferCaller=false;\n  Throwable throwable=new Throwable();\n  boolean lookingForLogger=true;\n  for (  final StackTraceElement frame : throwable.getStackTrace()) {\n    String cname=frame.getClassName();\n    boolean isLoggerImpl=isLoggerImplFrame(cname);\n    if (lookingForLogger) {\n      if (isLoggerImpl) {\n        lookingForLogger=false;\n      }\n    }\n else {\n      if (!isLoggerImpl) {\n        if (!cname.startsWith(\"java.lang.reflect.\") && !cname.startsWith(\"sun.reflect.\")) {\n          setSourceClassName(cname);\n          setSourceMethodName(frame.getMethodName());\n          return;\n        }\n      }\n    }\n  }\n}"}
{"ids": "2164", "raw_code": "final int recordExceptionalCompletion(Throwable ex){\n  int s;\n  if ((s=status) >= 0) {\n    int h=System.identityHashCode(this);\n    final ReentrantLock lock=exceptionTableLock;\n    lock.lock();\n    try {\n      expungeStaleExceptions();\n      ExceptionNode[] t=exceptionTable;\n      int i=h & (t.length - 1);\n      for (ExceptionNode e=t[i]; ; e=e.next) {\n        if (e == null) {\n          t[i]=new ExceptionNode(this,ex,t[i],exceptionTableRefQueue);\n          break;\n        }\n        if (e.get() == this)         break;\n      }\n    }\n  finally {\n      lock.unlock();\n    }\n    s=setCompletion(EXCEPTIONAL);\n  }\n  return s;\n}"}
{"ids": "34056", "raw_code": "private void analyzeResultingTlsContextAndWriteFile(TlsContext tlsContext,String folder,String fieldName,String workflowName,long phase) throws JAXBException, IOException {\n  if (TlsContextAnalyzer.containsFullWorkflowWithMissingMessage(tlsContext) || TlsContextAnalyzer.containsServerFinishedWithModifiedHandshake(tlsContext) || TlsContextAnalyzer.containsFullWorkflowWithModifiedMessage(tlsContext)) {\n    String fileNameBasic=createFileName(folder,phase,tlsContext,fieldName);\n    FileOutputStream fos=new FileOutputStream(fileNameBasic + workflowName + \".xml\");\n    WorkflowTraceSerializer.write(fos,tlsContext.getWorkflowTrace());\n  }\n}"}
{"ids": "1062", "raw_code": "private static String toVariableName(String str){\n  StringBuffer rtn=new StringBuffer();\n  char[] chars=str.toCharArray();\n  long changes=0;\n  boolean doCorrect=true;\n  for (int i=0; i < chars.length; i++) {\n    char c=chars[i];\n    if (i == 0 && (c >= '0' && c <= '9'))     rtn.append(\"_\" + c);\n else     if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| c == '_' || c == '$')     rtn.append(c);\n else {\n      doCorrect=false;\n      rtn.append('_');\n      changes+=(c * (i + 1));\n    }\n  }\n  if (changes > 0)   rtn.append(changes);\n  if (doCorrect)   return correctReservedWord(rtn.toString());\n  return rtn.toString();\n}"}
{"ids": "7889", "raw_code": "public Year(int year){\n  if ((year < Year.MINIMUM_YEAR) || (year > Year.MAXIMUM_YEAR)) {\n    throw new IllegalArgumentException(\"Year constructor: year (\" + year + \") outside valid range.\");\n  }\n  this.year=(short)year;\n  peg(Calendar.getInstance());\n}"}
{"ids": "21948", "raw_code": "@SuppressWarnings(\"unused\") public List<String> hostVcenterChangeDetails(URI hostId,URI clusterId,URI datacenterId,boolean isVcenter){\n  List<String> result=Lists.newArrayList();\n  Host host=_dbClient.queryObject(Host.class,hostId);\n  VcenterDataCenter datacenter=_dbClient.queryObject(VcenterDataCenter.class,datacenterId);\n  if (host != null && datacenter != null) {\n    result.add(ComputeSystemDialogProperties.getMessage(\"ComputeSystem.hostVcenterChangeDetails\",host.getLabel(),datacenter.getLabel()));\n    result.addAll(hostClusterChangeDetails(hostId,clusterId,datacenterId,isVcenter));\n  }\n  return result;\n}"}
{"ids": "76271", "raw_code": "public boolean deleteStatement(TestCase test,int position) throws ConstructionFailedException {\n  if (!ConstraintVerifier.canDelete(test,position)) {\n    return false;\n  }\n  logger.debug(\"Deleting target statement - {}\",position);\n  Set<Integer> toDelete=new LinkedHashSet<>();\n  recursiveDeleteInclusion(test,toDelete,position);\n  List<Integer> pos=new ArrayList<>(toDelete);\n  Collections.sort(pos,Collections.reverseOrder());\n  for (  Integer i : pos) {\n    logger.debug(\"Deleting statement: {}\",i);\n    test.remove(i);\n  }\n  return true;\n}"}
{"ids": "43313", "raw_code": "public boolean isCompound(){\n  return splits.size() != 1;\n}"}
{"ids": "28138", "raw_code": "@Override public Set<Statement> sum(final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> state,final Set<Statement> left,final Set<Statement> right){\n  final Set<Statement> tmp=new LinkedHashSet<Statement>(left);\n  tmp.addAll(right);\n  return tmp;\n}"}
{"ids": "30137", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return HOST;\ncase 2:\n  return PORT;\ncase 3:\nreturn ID;\ncase 4:\nreturn V_NODES;\ncase 5:\nreturn PING_FREQUENCY;\ncase 6:\nreturn SERVICE_NAME;\ncase 7:\nreturn STATE;\ncase 8:\nreturn TIMESTAMP;\ndefault :\nreturn null;\n}\n}"}
{"ids": "19544", "raw_code": "private static int categorizeByYear2014Method(Context c){\n  ArrayList<Integer> componentYears=new ArrayList<Integer>();\n  conditionallyAdd(componentYears,getNumCoresYear());\n  conditionallyAdd(componentYears,getClockSpeedYear());\n  conditionallyAdd(componentYears,getRamYear(c));\n  if (componentYears.isEmpty())   return CLASS_UNKNOWN;\n  Collections.sort(componentYears);\n  if ((componentYears.size() & 0x01) == 1) {\n    return componentYears.get(componentYears.size() / 2);\n  }\n else {\n    int baseIndex=componentYears.size() / 2 - 1;\n    return componentYears.get(baseIndex) + (componentYears.get(baseIndex + 1) - componentYears.get(baseIndex)) / 2;\n  }\n}"}
{"ids": "15843", "raw_code": "public Time(Date time){\n  SimpleTimeZone tz=new SimpleTimeZone(0,\"Z\");\n  SimpleDateFormat dateF=new SimpleDateFormat(\"yyyyMMddHHmmss\");\n  dateF.setTimeZone(tz);\n  String d=dateF.format(time) + \"Z\";\n  int year=Integer.parseInt(d.substring(0,4));\n  if (year < 1950 || year > 2049) {\n    this.time=new DERGeneralizedTime(d);\n  }\n else {\n    this.time=new DERUTCTime(d.substring(2));\n  }\n}"}
{"ids": "16922", "raw_code": "public ActionRequestHelper then(ActionRequestHelper nextAction){\n  mNext.add(nextAction);\n  return this;\n}"}
{"ids": "68289", "raw_code": "protected int[] readColorTable(final int ncolors){\n  final int nbytes=3 * ncolors;\n  int[] tab=null;\n  final byte[] c=new byte[nbytes];\n  try {\n    rawData.get(c);\n    tab=new int[256];\n    int i=0;\n    int j=0;\n    while (i < ncolors) {\n      final int r=(c[j++]) & 0xff;\n      final int g=(c[j++]) & 0xff;\n      final int b=(c[j++]) & 0xff;\n      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;\n    }\n  }\n catch (  final BufferUnderflowException e) {\n    Log.w(TAG,\"Format Error Reading Color Table\",e);\n    status=STATUS_FORMAT_ERROR;\n  }\n  return tab;\n}"}
{"ids": "1435", "raw_code": "public boolean isCurrent(String str){\n  if (pos + str.length() > lcText.length)   return false;\n  for (int i=str.length() - 1; i >= 0; i--) {\n    if (str.charAt(i) != lcText[pos + i])     return false;\n  }\n  return true;\n}"}
{"ids": "44047", "raw_code": "private static String matchablePath(String path){\n  if (path == null) {\n    return \"/\";\n  }\n else   if (path.endsWith(\"/\")) {\n    return path;\n  }\n else {\n    return path + \"/\";\n  }\n}"}
{"ids": "82595", "raw_code": "public void assertUsable() throws IOException {\n  if (throwable.get() == null) {\n    if (connection == null) {\n      throw new IOException(\"Connection is not open\");\n    }\n    return;\n  }\n  Throwable t=throwable.get();\n  if (t instanceof IOException) {\n    throw (IOException)t;\n  }\n else {\n    throw Throwables.propagate(t);\n  }\n}"}
{"ids": "52755", "raw_code": "protected static double computeH(final int i,double[] dist_i,double[] pij_i,double mbeta){\n  double sumP=0.;\n  for (int j=0; j < i; j++) {\n    sumP+=(pij_i[j]=Math.exp(dist_i[j] * mbeta));\n  }\n  for (int j=i + 1; j < dist_i.length; j++) {\n    sumP+=(pij_i[j]=Math.exp(dist_i[j] * mbeta));\n  }\n  if (!(sumP > 0)) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  final double s=1. / sumP;\n  double sum=0.;\n  for (int j=0; j < dist_i.length; j++) {\n    sum+=dist_i[j] * (pij_i[j]*=s);\n  }\n  return Math.log(sumP) - mbeta * sum;\n}"}
{"ids": "77390", "raw_code": "private Collection<Insanity> checkSubreaders(MapOfSets<Integer,CacheEntry> valIdToItems,MapOfSets<ReaderField,Integer> readerFieldToValIds){\n  final List<Insanity> insanity=new ArrayList<>(23);\n  Map<ReaderField,Set<ReaderField>> badChildren=new HashMap<>(17);\n  MapOfSets<ReaderField,ReaderField> badKids=new MapOfSets<>(badChildren);\n  Map<Integer,Set<CacheEntry>> viToItemSets=valIdToItems.getMap();\n  Map<ReaderField,Set<Integer>> rfToValIdSets=readerFieldToValIds.getMap();\n  Set<ReaderField> seen=new HashSet<>(17);\n  Set<ReaderField> readerFields=rfToValIdSets.keySet();\n  for (  final ReaderField rf : readerFields) {\n    if (seen.contains(rf))     continue;\n    List<Object> kids=getAllDescendantReaderKeys(rf.readerKey);\n    for (    Object kidKey : kids) {\n      ReaderField kid=new ReaderField(kidKey,rf.fieldName);\n      if (badChildren.containsKey(kid)) {\n        badKids.put(rf,kid);\n        badKids.putAll(rf,badChildren.get(kid));\n        badChildren.remove(kid);\n      }\n else       if (rfToValIdSets.containsKey(kid)) {\n        badKids.put(rf,kid);\n      }\n      seen.add(kid);\n    }\n    seen.add(rf);\n  }\n  for (  final ReaderField parent : badChildren.keySet()) {\n    Set<ReaderField> kids=badChildren.get(parent);\n    List<CacheEntry> badEntries=new ArrayList<>(kids.size() * 2);\n{\n      for (      final Integer value : rfToValIdSets.get(parent)) {\n        badEntries.addAll(viToItemSets.get(value));\n      }\n    }\n    for (    final ReaderField kid : kids) {\n      for (      final Integer value : rfToValIdSets.get(kid)) {\n        badEntries.addAll(viToItemSets.get(value));\n      }\n    }\n    CacheEntry[] badness=new CacheEntry[badEntries.size()];\n    badness=badEntries.toArray(badness);\n    insanity.add(new Insanity(InsanityType.SUBREADER,\"Found caches for descendants of \" + parent.toString(),badness));\n  }\n  return insanity;\n}"}
{"ids": "25119", "raw_code": "public static String addProtocolToUrl(String url){\n  if (!url.startsWith(HTTP_PROTOCOL_PREFIX) && !url.startsWith(HTTPS_PROTOCOL_PREFIX) && !url.startsWith(FILE_PROTOCOL_PREFIX)) {\n    if (url.startsWith(FILE_PREFIX)) {\n      url=FILE_PROTOCOL_PREFIX + url;\n    }\n else {\n      url=HTTP_PROTOCOL_PREFIX + url;\n    }\n  }\n  return url;\n}"}
{"ids": "81057", "raw_code": "public static String methodNameToPropertyName(String methodName){\n  if (methodName.startsWith(\"get\"))   methodName=methodName.substring(3);\n else   if (methodName.startsWith(\"set\"))   methodName=methodName.substring(3);\n else   if (methodName.startsWith(\"is\"))   methodName=methodName.substring(2);\n  if (methodName.length() == 0)   return null;\n  char ch=methodName.charAt(0);\n  if (Character.isUpperCase(ch) && (methodName.length() == 1 || !Character.isUpperCase(methodName.charAt(1)))) {\n    methodName=Character.toLowerCase(ch) + methodName.substring(1);\n  }\n  return methodName;\n}"}
{"ids": "80999", "raw_code": "private StringBuilder createIndent(int indent){\n  StringBuilder oneIndent=createIndent();\n  StringBuilder ret=new StringBuilder();\n  while (indent-- > 0) {\n    ret.append(oneIndent);\n  }\n  return ret;\n}"}
{"ids": "42252", "raw_code": "protected ClassLoader(){\n  this(getSystemClassLoader());\n}"}
{"ids": "21706", "raw_code": "public static void matchvPoolWithStoragePools(VirtualPool vpool,List<StoragePool> pools,DbClient dbClient,CoordinatorClient coordinator,String matcherGroupName,StringBuffer errorMessage){\n  List<StoragePool> filterPools=getMatchedPoolWithStoragePools(vpool,pools,VirtualPool.getProtectionSettings(vpool,dbClient),VirtualPool.getRemoteProtectionSettings(vpool,dbClient),VirtualPool.getFileRemoteProtectionSettings(vpool,dbClient),dbClient,coordinator,matcherGroupName,errorMessage);\n  updateInvalidAndMatchedPoolsForVpool(vpool,filterPools,pools,dbClient);\n}"}
{"ids": "66618", "raw_code": "private static int[] trimArray(int[] array,int size){\n  if (size < 0) {\n    throw new IllegalArgumentException();\n  }\n  if (size == 0) {\n    return NO_ERRORS;\n  }\n  int[] a=new int[size];\n  System.arraycopy(array,0,a,0,size);\n  return a;\n}"}
{"ids": "34865", "raw_code": "static <T>boolean removeIf(Iterable<T> removeFrom,Predicate<? super T> predicate){\n  if (removeFrom instanceof RandomAccess && removeFrom instanceof List) {\n    return removeIfFromRandomAccessList((List<T>)removeFrom,checkNotNull(predicate));\n  }\n  return Iterators.removeIf(removeFrom.iterator(),predicate);\n}"}
{"ids": "22503", "raw_code": "@BeforeClass public static void createEcomConnection(){\n  boolean wasException=false;\n  try {\n    _connection=new EcomConnection(createConnectionInfo(),createListener(),new CimFilterMap());\n  }\n catch (  Exception e) {\n    wasException=true;\n  }\n  Assert.assertFalse(wasException);\n}"}
{"ids": "36744", "raw_code": "public mxRectangle graphModelChanged(mxIGraphModel sender,List<mxUndoableChange> changes,Boolean rv){\n  int thresh=getChangesRepaintThreshold();\n  boolean ignoreDirty=thresh > 0 && changes.size() > thresh;\n  if (!ignoreDirty) {\n    Iterator<mxUndoableChange> it=changes.iterator();\n    while (it.hasNext()) {\n      if (it.next() instanceof mxRootChange) {\n        ignoreDirty=true;\n        break;\n      }\n    }\n  }\n  ArrayList<Object> changedCells=new ArrayList<Object>();\n  mxRectangle dirty=processChanges(changes,true,ignoreDirty,changedCells);\n  if (!rv) {\n    if (changedCells != null) {\n      for (      Object changedCell : changedCells) {\n        mxCellState parentState=view.getState(model.getParent(changedCell),true);\n        view.validate(parentState,changedCell,false);\n      }\n    }\n  }\n else   view.validate();\n  if (!ignoreDirty) {\n    mxRectangle tmp=processChanges(changes,false,ignoreDirty);\n    if (tmp != null) {\n      if (dirty == null) {\n        dirty=tmp;\n      }\n else {\n        dirty.add(tmp);\n      }\n    }\n  }\n  removeSelectionCells(getRemovedCellsForChanges(changes));\n  return dirty;\n}"}
{"ids": "27456", "raw_code": "public void guard(final Guard r) throws InterruptedException {\n  incThread();\n  try {\n    r.run();\n  }\n catch (  InterruptedException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n finally {\n    decThread();\n  }\n}"}
{"ids": "39965", "raw_code": "public void log(Date time,String message){\n  try {\n    PrintWriter w=new PrintWriter(new FileWriter(filename,true));\n    w.println(\"\\n\\u001b[32m\" + format.format(time) + \"\\u001b[0m \"+ message);\n    w.close();\n  }\n catch (  IOException e) {\n  }\n}"}
{"ids": "33122", "raw_code": "protected ResourceInfo newElement(int type){\n  ResourceInfo result=null;\nswitch (type) {\ncase IResource.FILE:\ncase IResource.FOLDER:\n    result=new ResourceInfo(type);\n  break;\ncase IResource.PROJECT:\nresult=new ResourceInfo(type);\nbreak;\ncase IResource.ROOT:\nresult=new ResourceInfo(type);\nbreak;\n}\nreturn result;\n}"}
{"ids": "36186", "raw_code": "private boolean isModelUseful(ContingencyMatrix cm){\n  return true;\n}"}
{"ids": "54651", "raw_code": "public void registerPlayerObserver(PlayerEventsObserver observer,boolean replyImmediately){\n  if (this.connection == null)   return;\n  playerEventsObservers.add(observer);\n  if (replyImmediately)   replyWithLastResult(observer);\n  if (playerEventsObservers.size() == 1) {\n    if (connection.getProtocol() == HostConnection.PROTOCOL_TCP) {\n      connection.registerPlayerNotificationsObserver(this,checkerHandler);\n      connection.registerSystemNotificationsObserver(this,checkerHandler);\n      connection.registerInputNotificationsObserver(this,checkerHandler);\n      checkerHandler.post(tcpCheckerRunnable);\n    }\n else {\n      checkerHandler.post(httpCheckerRunnable);\n    }\n  }\n}"}
{"ids": "37786", "raw_code": "@Override public int numElements() throws Exception {\n  if (m_zeroR != null) {\n    return 1;\n  }\n  return m_Tree.numNodes();\n}"}
{"ids": "11658", "raw_code": "public boolean isHighlightable(OMGraphic omg){\n  return true;\n}"}
{"ids": "9306", "raw_code": "public RpcClient peerWith(PeerInfo serverInfo,Bootstrap bootstrap,Map<String,Object> attributes) throws IOException {\n  InetSocketAddress remoteAddress=new InetSocketAddress(serverInfo.getHostName(),serverInfo.getPort());\n  return peerWith(remoteAddress,bootstrap,attributes);\n}"}
{"ids": "32078", "raw_code": "public GridReversedLinesFileReader(final File file,final int blockSize,final String encoding) throws IOException {\n  this(file,blockSize,Charset.forName(encoding));\n}"}
{"ids": "28568", "raw_code": "private void beforeName() throws IOException {\n  int context=peek();\n  if (context == NONEMPTY_OBJECT) {\n    out.write(',');\n  }\n else   if (context != EMPTY_OBJECT) {\n    throw new IllegalStateException(\"Nesting problem.\");\n  }\n  newline();\n  replaceTop(DANGLING_NAME);\n}"}
{"ids": "60497", "raw_code": "protected String constName(){\n  return \"ZZ_\" + name.toUpperCase();\n}"}
{"ids": "76484", "raw_code": "public boolean isTimestampWithinInterval(DateTime timestamp,String intervalString) throws IllegalArgumentException {\n  Interval interval=Interval.parse(intervalString);\n  return interval.contains(timestamp);\n}"}
{"ids": "2503", "raw_code": "private void processAnsiOsCommand(){\n  if (ansiOsCommand.charAt(0) != '0' || ansiOsCommand.charAt(1) != ';') {\n    Logger.log(\"Ignoring unsupported ANSI OSC sequence: '\" + ansiOsCommand + \"'\");\n    return;\n  }\n}"}
{"ids": "80773", "raw_code": "private void addToRenaming(Renaming renaming,HashSet<String> prevDeclared,ExprNode expr){\n  if (!(expr instanceof OpApplNode)) {\n    return;\n  }\n  HashSet<String> newDeclared=(HashSet<String>)prevDeclared.clone();\n  OpApplNode node=(OpApplNode)expr;\n  if (node.getUnbdedQuantSymbols() != null) {\n    for (int i=0; i < node.getUnbdedQuantSymbols().length; i++) {\n      FormalParamNode id=node.getUnbdedQuantSymbols()[i];\n      if (newDeclared.contains(getCurrentName(id,renaming))) {\n        String newname=getNewName(id,newDeclared,renaming);\n        newDeclared.add(newname);\n        addCurrentName(id,newname,renaming);\n      }\n    }\n  }\n  if (node.getBdedQuantSymbolLists() != null) {\n    for (int i=0; i < node.getBdedQuantSymbolLists().length; i++) {\n      addToRenaming(renaming,prevDeclared,node.getBdedQuantBounds()[i]);\n      FormalParamNode[] nodeList=node.getBdedQuantSymbolLists()[i];\n      for (int j=0; j < nodeList.length; j++) {\n        FormalParamNode id=nodeList[j];\n        if (newDeclared.contains(getCurrentName(id,renaming))) {\n          String newname=getNewName(id,newDeclared,renaming);\n          newDeclared.add(newname);\n          addCurrentName(id,newname,renaming);\n        }\n      }\n    }\n  }\n  for (int i=0; i < node.getArgs().length; i++) {\n    if (node.getArgs()[i] instanceof ExprNode) {\n      addToRenaming(renaming,newDeclared,(ExprNode)node.getArgs()[i]);\n    }\n  }\n}"}
{"ids": "33648", "raw_code": "public boolean removeTriggerGroupToNeverDelete(String group){\n  if (group != null)   return triggerGroupsToNeverDelete.remove(group);\n  return false;\n}"}
{"ids": "42916", "raw_code": "public void remove(Rule rule){\n  rules.remove(rule);\n}"}
{"ids": "69359", "raw_code": "private boolean uploadAllTrackPoints(Fusiontables fusiontables,String tableId,Track track) throws IOException {\n  int numberOfPoints=track.getNumberOfPoints();\n  List<Location> locations=new ArrayList<Location>(MAX_POINTS_PER_UPLOAD);\n  Location lastValidLocation=null;\n  boolean sentStartMarker=false;\n  int readCount=0;\n  LocationIterator locationIterator=null;\n  try {\n    locationIterator=myTracksProviderUtils.getTrackPointLocationIterator(trackId,-1L,false,MyTracksProviderUtils.DEFAULT_LOCATION_FACTORY);\n    while (locationIterator.hasNext()) {\n      Location location=locationIterator.next();\n      locations.add(location);\n      if (LocationUtils.isValidLocation(location)) {\n        lastValidLocation=location;\n      }\n      if (!sentStartMarker && lastValidLocation != null) {\n        String name=context.getString(R.string.marker_label_start,track.getName());\n        createNewPoint(fusiontables,tableId,name,\"\",lastValidLocation,MARKER_TYPE_START);\n        sentStartMarker=true;\n      }\n      readCount++;\n      if (readCount % MAX_POINTS_PER_UPLOAD == 0) {\n        if (!prepareAndUploadPoints(fusiontables,tableId,track,locations,false)) {\n          Log.d(TAG,\"Unable to upload points\");\n          return false;\n        }\n        updateProgress(readCount,numberOfPoints);\n        locations.clear();\n      }\n    }\n    if (!prepareAndUploadPoints(fusiontables,tableId,track,locations,true)) {\n      Log.d(TAG,\"Unable to upload points\");\n      return false;\n    }\n    if (lastValidLocation != null) {\n      String name=context.getString(R.string.marker_label_end,track.getName());\n      DescriptionGenerator descriptionGenerator=new DescriptionGeneratorImpl(context);\n      String description=descriptionGenerator.generateTrackDescription(track,null,null,true);\n      createNewPoint(fusiontables,tableId,name,description,lastValidLocation,MARKER_TYPE_END);\n    }\n    return true;\n  }\n  finally {\n    if (locationIterator != null) {\n      locationIterator.close();\n    }\n  }\n}"}
{"ids": "74004", "raw_code": "@CheckReturnValue @Deprecated @Nonnull public static String join(@Nonnull String[] s,@Nonnull String delimiter){\n  StringBuilder buffer=new StringBuilder();\n  for (int i=0; i < s.length; i++) {\n    buffer.append(s[i]);\n    if (i < s.length - 1) {\n      buffer.append(delimiter);\n    }\n  }\n  return buffer.toString();\n}"}
{"ids": "64967", "raw_code": "private void initSelectPosition(int position){\n  if (mSelectMode == ISelectable.SELECT_MODE_SINGLE) {\n    if (mSelectedPosition == ISelectable.INVALID_POSITION) {\n      mSelectedPosition=position;\n    }\n  }\n else   if (mSelectMode == ISelectable.SELECT_MODE_MULTI) {\n    if (!mSelectedPositions.contains(position))     mSelectedPositions.add(position);\n  }\n else {\n    throw new RuntimeException();\n  }\n}"}
{"ids": "3737", "raw_code": "@Override public PathImpl schemeWalk(String userPath,Map<String,Object> attributes,String filePath,int offset){\n  if (!isWindows()) {\n    return super.schemeWalk(userPath,attributes,filePath,offset);\n  }\n  String canonicalPath;\n  if (filePath.length() < offset + 2) {\n    return super.schemeWalk(userPath,attributes,filePath,offset);\n  }\n  char ch1=filePath.charAt(offset + 1);\n  char ch2=filePath.charAt(offset);\n  if ((ch2 == '/' || ch2 == _separatorChar) && (ch1 == '/' || ch1 == _separatorChar))   return super.schemeWalk(userPath,attributes,convertFromWindowsPath(filePath.substring(offset)),0);\n else   return super.schemeWalk(userPath,attributes,filePath,offset);\n}"}
{"ids": "57659", "raw_code": "void initProperties(String defaultLevel,String defaultFilter,String defaultFormatter,String defaultEncoding){\n  LogManager manager=LogManager.getLogManager();\n  final String filterName=manager.getProperty(prefix + \".filter\");\n  if (filterName != null) {\n    try {\n      filter=(Filter)getCustomizeInstance(filterName);\n    }\n catch (    Exception e1) {\n      printInvalidPropMessage(\"filter\",filterName,e1);\n      filter=(Filter)getDefaultInstance(defaultFilter);\n    }\n  }\n else {\n    filter=(Filter)getDefaultInstance(defaultFilter);\n  }\n  String levelName=manager.getProperty(prefix + \".level\");\n  if (levelName != null) {\n    try {\n      level=Level.parse(levelName);\n    }\n catch (    Exception e) {\n      printInvalidPropMessage(\"level\",levelName,e);\n      level=Level.parse(defaultLevel);\n    }\n  }\n else {\n    level=Level.parse(defaultLevel);\n  }\n  final String formatterName=manager.getProperty(prefix + \".formatter\");\n  if (formatterName != null) {\n    try {\n      formatter=(Formatter)getCustomizeInstance(formatterName);\n    }\n catch (    Exception e) {\n      printInvalidPropMessage(\"formatter\",formatterName,e);\n      formatter=(Formatter)getDefaultInstance(defaultFormatter);\n    }\n  }\n else {\n    formatter=(Formatter)getDefaultInstance(defaultFormatter);\n  }\n  final String encodingName=manager.getProperty(prefix + \".encoding\");\n  try {\n    internalSetEncoding(encodingName);\n  }\n catch (  UnsupportedEncodingException e) {\n    printInvalidPropMessage(\"encoding\",encodingName,e);\n  }\n}"}
{"ids": "23597", "raw_code": "public static void writeUnsignedVL(long data,DataOutput out) throws IOException {\n  while (true) {\n    if ((data & ~0x7FL) == 0) {\n      out.writeByte((int)data);\n      return;\n    }\n else {\n      out.writeByte(((int)data & 0x7F) | 0x80);\n      data>>>=7;\n    }\n  }\n}"}
{"ids": "83415", "raw_code": "public JSONArray names(){\n  JSONArray ja=new JSONArray();\n  Iterator keys=keys();\n  while (keys.hasNext()) {\n    ja.put(keys.next());\n  }\n  return ja.length() == 0 ? null : ja;\n}"}
{"ids": "30530", "raw_code": "public void addTableWithAlias(String table,String alias){\n  QueryTableData tableData=new QueryTableData();\n  tableData.setTableName(table);\n  tableData.setTableAlias(alias);\n  tableData.setTableIndex(_tablesData.size());\n  _tablesData.add(tableData);\n  if (alias == null)   tables.put(table,tableData);\n else {\n    tables.put(alias,tableData);\n    tables.put(table,tableData);\n  }\n}"}
{"ids": "17962", "raw_code": "private int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {\n  if ((inOff + blockSize) > in.length) {\n    throw new DataLengthException(\"input buffer too short\");\n  }\n  for (int i=0; i < blockSize; i++) {\n    cbcV[i]^=in[inOff + i];\n  }\n  int length=cipher.processBlock(cbcV,0,out,outOff);\n  System.arraycopy(out,outOff,cbcV,0,cbcV.length);\n  return length;\n}"}
{"ids": "6208", "raw_code": "private void renderAxes(Camera camera){\n  glPushMatrix();\n  glLoadIdentity();\n  float rotX=camera.getRotation().x;\n  float rotY=camera.getRotation().y;\n  float rotZ=0;\n  glRotatef(rotX,1.0f,0.0f,0.0f);\n  glRotatef(rotY,0.0f,1.0f,0.0f);\n  glRotatef(rotZ,0.0f,0.0f,1.0f);\n  glLineWidth(2.0f);\n  glBegin(GL_LINES);\n  glColor3f(1.0f,0.0f,0.0f);\n  glVertex3f(0.0f,0.0f,0.0f);\n  glVertex3f(1.0f,0.0f,0.0f);\n  glColor3f(0.0f,1.0f,0.0f);\n  glVertex3f(0.0f,0.0f,0.0f);\n  glVertex3f(0.0f,1.0f,0.0f);\n  glColor3f(1.0f,1.0f,1.0f);\n  glVertex3f(0.0f,0.0f,0.0f);\n  glVertex3f(0.0f,0.0f,1.0f);\n  glEnd();\n  glPopMatrix();\n}"}
{"ids": "7736", "raw_code": "@Override public Object clone() throws CloneNotSupportedException {\n  PeriodAxisLabelInfo clone=(PeriodAxisLabelInfo)super.clone();\n  return clone;\n}"}
{"ids": "47302", "raw_code": "public long skip(long n) throws IOException {\n  if (n < 0) {\n    throw new IllegalArgumentException(\"negative skip length\");\n  }\n  ensureOpen();\n  int max=(int)Math.min(n,Integer.MAX_VALUE);\n  int total=0;\n  while (total < max) {\n    int len=max - total;\n    if (len > tmpbuf.length) {\n      len=tmpbuf.length;\n    }\n    len=read(tmpbuf,0,len);\n    if (len == -1) {\n      entryEOF=true;\n      break;\n    }\n    total+=len;\n  }\n  return total;\n}"}
{"ids": "31749", "raw_code": "private Path convertPath(Path path) throws Exception {\n  if (mode != PROXY)   return path;\n else {\n    URI secondaryUri=new URI(SECONDARY_URI);\n    URI pathUri=path.toUri();\n    return new Path(new URI(pathUri.getScheme() != null ? secondaryUri.getScheme() : null,pathUri.getAuthority() != null ? secondaryUri.getAuthority() : null,pathUri.getPath(),null,null));\n  }\n}"}
{"ids": "86278", "raw_code": "private static String joinArray(String[] array,String delimiter){\n  StringBuffer buffer=new StringBuffer();\n  for (int index=0; index < array.length; index++) {\n    buffer.append(array[index]);\n    if (index < array.length - 1) {\n      buffer.append(delimiter);\n    }\n  }\n  return buffer.toString();\n}"}
{"ids": "66513", "raw_code": "private void outputPartners(Properties ctx,PrintWriter out,int partnerID,boolean includeAny){\n  out.println(\"<partners>\");\n  if (includeAny) {\n    out.println(\"<partner id='-1'\");\n    if (partnerID == 0)     out.println(\" selected='selected'\");\n    out.println(\">ANY</partner>\");\n  }\n  for (  MBPartner partner : getAllPartners(ctx)) {\n    out.print(\"<partner id='\" + partner.get_ID() + \"'\");\n    if (partnerID == partner.get_ID())     out.print(\" selected='selected'\");\n    out.println(\">\" + Util.maskHTML(partner.getName()) + \"</partner>\");\n  }\n  out.println(\"</partners>\");\n}"}
{"ids": "64901", "raw_code": "public void stop(){\n  mCancel=true;\n  if (mRunning.compareAndSet(true,false)) {\n    if (mSampleDispatcherTask != null) {\n      mSampleDispatcherTask.cancel(true);\n      mFilledBuffers.clear();\n    }\n  }\n}"}
{"ids": "40277", "raw_code": "public ChessSquare(Composite parent,ChessBoard chessBoard,int id,boolean isLight){\n  super(parent,SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND);\n  board=chessBoard;\n  this.id=id;\n  this.isLight=isLight;\n  addPaintListener(paintListener);\n  addControlListener(controlListener);\n  addMouseListener(mouseListener);\n  addListener(SWT.MouseWheel,mouseWheelListener);\n  addListener(SWT.MouseDown,dndListener);\n  addListener(SWT.MouseUp,dndListener);\n}"}
{"ids": "21227", "raw_code": "@Override protected void stopService(){\n  Thread t=keepAliveThread;\n  keepAliveThread=null;\n  if (t != null) {\n    t.interrupt();\n  }\n}"}
{"ids": "84521", "raw_code": "public static int truncatedCompareTo(final Calendar cal1,final Calendar cal2,final int field){\n  final Calendar truncatedCal1=truncate(cal1,field);\n  final Calendar truncatedCal2=truncate(cal2,field);\n  return truncatedCal1.compareTo(truncatedCal2);\n}"}
{"ids": "21541", "raw_code": "public boolean isPortUsable(StoragePort storagePort){\n  return isPortUsable(storagePort,true);\n}"}
{"ids": "28828", "raw_code": "public boolean isExpired(){\n  return this.ttl < System.currentTimeMillis();\n}"}
{"ids": "7396", "raw_code": "@Override public void actionPerformed(ActionEvent event){\n  String command=event.getActionCommand();\n  if (command.equals(\"SelectFont\")) {\n    attemptFontSelection();\n  }\n else   if (command.equals(\"SelectPaint\")) {\n    attemptPaintSelection();\n  }\n else   if (command.equals(\"ShowTitle\")) {\n    attemptModifyShowTitle();\n  }\n}"}
{"ids": "14799", "raw_code": "void removeAttributeValues(String attrName,Set values) throws SMSException {\n  if (attrName != null) {\n    Map attrs=getAttributes();\n    Set origValues=(Set)attrs.get(attrName);\n    if (origValues != null && !origValues.isEmpty()) {\n      Set newValues=new HashSet(origValues);\n      newValues.removeAll(values);\n      if (newValues.isEmpty()) {\n        removeAttribute(attrName);\n      }\n else {\n        Map newAttrs=new HashMap();\n        newAttrs.put(attrName,newValues);\n        setAttributes(newAttrs);\n      }\n    }\n  }\n}"}
{"ids": "74012", "raw_code": "private static boolean checkContentCharacters(String chars) throws CharConversionException {\n  boolean escape=false;\n  for (int i=0; i < chars.length(); i++) {\n    char ch=chars.charAt(i);\n    if (ch <= 93) {\nswitch (ch) {\ncase 0x9:\ncase 0xA:\ncase 0xD:\n        continue;\ncase '>':\n      if (escape) {\n        continue;\n      }\n    escape=(i > 0) && (chars.charAt(i - 1) == ']');\n  continue;\ncase '<':\ncase '&':\nescape=true;\ncontinue;\ndefault :\nif (ch < 0x20) {\nthrow new CharConversionException(\"Invalid XML character &#\" + ((int)ch) + \";.\");\n}\n}\n}\n}\nreturn escape == false;\n}"}
{"ids": "80283", "raw_code": "@Override public void drawTop(final Graphics2D g2d){\n  final Rectangle r=getArea();\n  if (isContained()) {\n    r.setLocation(0,0);\n  }\n else {\n    if (!isOnScreen(g2d,r)) {\n      return;\n    }\n  }\n  final Composite oldComposite=g2d.getComposite();\n  try {\n    g2d.setComposite(entityComposite);\n    drawTop(g2d,r.x,r.y,r.width,r.height);\n  }\n  finally {\n    g2d.setComposite(oldComposite);\n  }\n}"}
{"ids": "44380", "raw_code": "protected void initDebug(){\n  setDebug((getInitParameter(\"debug\") == null) ? false : Boolean.valueOf(getInitParameter(\"debug\")));\n}"}
{"ids": "11851", "raw_code": "protected void indexNulls(InputStream is,long ptr,List<Entry> entries){\n  boolean moreRecords=true;\n  byte rHdr[]=new byte[SHAPE_RECORD_HEADER_LENGTH];\n  int result;\n  int nRecords=0;\n  int recLengthWords, recLengthBytes;\n  long recOffset;\n  int recBufSize=20;\n  byte recBuf[]=new byte[recBufSize];\n  double x;\n  double y;\n  try {\n    while (moreRecords) {\n      result=is.read(rHdr,0,SHAPE_RECORD_HEADER_LENGTH);\n      if (result < 0) {\n        moreRecords=false;\n        if (logger.isLoggable(Level.FINE)) {\n          logger.fine(\"Found \" + nRecords + \" records\");\n          logger.fine(\"recBufSize = \" + recBufSize);\n        }\n      }\n else {\n        nRecords++;\n        recOffset=ptr;\n        readBEInt(rHdr,0);\n        recLengthWords=readBEInt(rHdr,4);\n        recLengthBytes=recLengthWords * 2;\n        if (recLengthBytes > recBufSize) {\n          if (logger.isLoggable(Level.FINE)) {\n            logger.fine(\"Shapefile SpatialIndex increasing recBufSize to \" + recLengthBytes);\n          }\n          recBufSize=recLengthBytes;\n          recBuf=new byte[recBufSize];\n        }\n        result=is.read(recBuf,0,recLengthBytes);\n        x=0;\n        y=0;\n        ptr+=recLengthBytes + 8;\n        Entry entry=new Entry(x,y,x,y,(int)recOffset);\n        entries.add(entry);\n      }\n    }\n  }\n catch (  java.io.IOException e) {\n    e.printStackTrace();\n  }\n finally {\n    try {\n      is.close();\n    }\n catch (    java.io.IOException e) {\n    }\n  }\n}"}
{"ids": "84957", "raw_code": "protected static RpcPair resolveRpcPair(ASTNode node,PeerTypeResolver peerResolver){\n  MethodDeclaration methodDecl=ASTResolving.findParentMethodDeclaration(node);\n  TypeDeclaration typeDecl=(TypeDeclaration)ASTResolving.findAncestor(node,ASTNode.TYPE_DECLARATION);\n  assert (typeDecl != null);\n  IType dstType=peerResolver.getPeerType(typeDecl);\n  if (dstType == null) {\n    return null;\n  }\n  CompilationUnit astRoot=ASTResolving.createQuickFixAST(dstType.getCompilationUnit(),null);\n  TypeDeclaration dstTypeDecl=JavaASTUtils.findTypeDeclaration(astRoot,dstType.getFullyQualifiedName('.'));\n  if (dstTypeDecl == null) {\n    return null;\n  }\n  return new RpcPair(typeDecl,methodDecl,dstTypeDecl);\n}"}
{"ids": "72462", "raw_code": "public static void assertEquals(FieldMatrix<? extends FieldElement<?>> expected,FieldMatrix<? extends FieldElement<?>> observed){\n  Assert.assertNotNull(\"Observed should not be null\",observed);\n  if (expected.getColumnDimension() != observed.getColumnDimension() || expected.getRowDimension() != observed.getRowDimension()) {\n    StringBuilder messageBuffer=new StringBuilder();\n    messageBuffer.append(\"Observed has incorrect dimensions.\");\n    messageBuffer.append(\"\\nobserved is \" + observed.getRowDimension() + \" x \"+ observed.getColumnDimension());\n    messageBuffer.append(\"\\nexpected \" + expected.getRowDimension() + \" x \"+ expected.getColumnDimension());\n    Assert.fail(messageBuffer.toString());\n  }\n  for (int i=0; i < expected.getRowDimension(); ++i) {\n    for (int j=0; j < expected.getColumnDimension(); ++j) {\n      FieldElement<?> eij=expected.getEntry(i,j);\n      FieldElement<?> oij=observed.getEntry(i,j);\n      Assert.assertEquals(eij,oij);\n    }\n  }\n}"}
{"ids": "83160", "raw_code": "public void addAddition(String addition){\n  additions.add(addition);\n}"}
{"ids": "71802", "raw_code": "private void startNewTransition(){\n  if (!hasBounds()) {\n    throw new UnsupportedOperationException(\"Can't start transition if the \" + \"drawable has no bounds!\");\n  }\n  mCurrentTrans=mTransGen.generateNextTransition(mDrawableRect,mViewportRect);\n  mElapsedTime=0;\n  mLastFrameTime=System.currentTimeMillis();\n  fireTransitionStart(mCurrentTrans);\n}"}
{"ids": "74366", "raw_code": "protected void rotateOrthogonal(){\n  active.setRotation(active.getRotation() + 1,this);\n  error.setRotation(error.getRotation() + 1,this);\n  displayState();\n  repaint();\n}"}
{"ids": "67606", "raw_code": "private String convertToElementName(String attributeName){\n  return attributeName.replace(' ','_');\n}"}
{"ids": "49940", "raw_code": "private boolean hasOtherMapAndReduceParentNode(Lop tmpNode,ArrayList<Lop> nodeList,Lop node){\n  if (tmpNode.getExecLocation() == ExecLocation.MapAndReduce)   return true;\n  for (  Lop n : tmpNode.getOutputs()) {\n    if (nodeList.contains(n) && isChild(n,node,IDMap)) {\n      if (!n.equals(node) && n.getExecLocation() == ExecLocation.MapAndReduce)       return true;\n else       return hasOtherMapAndReduceParentNode(n,nodeList,node);\n    }\n  }\n  return false;\n}"}
{"ids": "70458", "raw_code": "public synchronized void add(double value){\n  add(mCategories.size() + \"\",value);\n}"}
{"ids": "2645", "raw_code": "@Nullable String findLongestNamePrefix(Node name,Set<String> namespaces){\n  if (namespaces.contains(name.getQualifiedName())) {\n    return name.getQualifiedName();\n  }\n else   if (name.isGetProp()) {\n    return findLongestNamePrefix(name.getFirstChild(),namespaces);\n  }\n  return null;\n}"}
{"ids": "24386", "raw_code": "public static LogWriter createLogWriter(final Properties properties){\n  Properties nonDefault=properties;\n  if (nonDefault == null) {\n    nonDefault=new Properties();\n  }\n  DistributedTestUtils.addHydraProperties(nonDefault);\n  DistributionConfig dc=new DistributionConfigImpl(nonDefault);\n  LogWriter logger=LogWriterFactory.createLogWriterLogger(false,false,dc,false);\n  nonDefault.put(DistributionConfig.LOG_WRITER_NAME,logger);\n  return logger;\n}"}
{"ids": "24774", "raw_code": "public int session(){\n  return Integer.parseInt(fields[5]);\n}"}
{"ids": "69345", "raw_code": "private void writePhotoOverlay(String name,String category,String description,String styleName,Location location,String photoUrl,float heading){\n  if (location != null) {\n    printWriter.println(\"<PhotoOverlay>\");\n    printWriter.println(\"<name>\" + StringUtils.formatCData(name) + \"</name>\");\n    printWriter.println(\"<description>\" + StringUtils.formatCData(description) + \"</description>\");\n    printWriter.print(\"<Camera>\");\n    printWriter.print(\"<longitude>\" + location.getLongitude() + \"</longitude>\");\n    printWriter.print(\"<latitude>\" + location.getLatitude() + \"</latitude>\");\n    printWriter.print(\"<altitude>20</altitude>\");\n    printWriter.print(\"<heading>\" + heading + \"</heading>\");\n    printWriter.print(\"<tilt>90</tilt>\");\n    printWriter.println(\"</Camera>\");\n    printWriter.println(\"<TimeStamp><when>\" + StringUtils.formatDateTimeIso8601(location.getTime()) + \"</when></TimeStamp>\");\n    printWriter.println(\"<styleUrl>#\" + styleName + \"</styleUrl>\");\n    writeCategory(category);\n    if (playTrack) {\n      printWriter.println(\"<Icon><href>\" + Uri.decode(photoUrl) + \"</href></Icon>\");\n    }\n else {\n      Uri uri=Uri.parse(photoUrl);\n      printWriter.println(\"<Icon><href>\" + KmzTrackExporter.KMZ_IMAGES_DIR + File.separatorChar+ uri.getLastPathSegment()+ \"</href></Icon>\");\n    }\n    printWriter.print(\"<ViewVolume>\");\n    printWriter.print(\"<near>10</near>\");\n    printWriter.print(\"<leftFov>-60</leftFov>\");\n    printWriter.print(\"<rightFov>60</rightFov>\");\n    printWriter.print(\"<bottomFov>-45</bottomFov>\");\n    printWriter.print(\"<topFov>45</topFov>\");\n    printWriter.println(\"</ViewVolume>\");\n    printWriter.println(\"<Point>\");\n    printWriter.println(\"<coordinates>\" + getCoordinates(location,\",\") + \"</coordinates>\");\n    printWriter.println(\"</Point>\");\n    printWriter.println(\"</PhotoOverlay>\");\n  }\n}"}
{"ids": "56056", "raw_code": "public boolean onBackPressed(){\n  if (doesDrawerExist()) {\n    if (mDrawer.isDrawerVisible(Gravity.START)) {\n      mDrawer.closeDrawer(Gravity.START);\n      return true;\n    }\n  }\n  if (mContentView.onBackPressed())   return true;\n  if (!mStateStack.empty()) {\n    mStateStack.pop();\n    if (!mStateStack.empty()) {\n      setState(mStateStack.pop());\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "67070", "raw_code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n  if (subSignature.equals(\"java.lang.ClassLoader latestUserDefinedLoader()\")) {\n    java_io_ObjectInputStream_latestUserDefinedLoader(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"java.lang.Object allocateNewObject(java.lang.Class,java.lang.Class)\")) {\n    java_io_ObjectInputStream_allocateNewObject(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"java.lang.Object allocateNewArray(java.lang.Class,int)\")) {\n    java_io_ObjectInputStream_allocateNewArray(method,thisVar,returnVar,params);\n    return;\n  }\n else {\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}"}
{"ids": "56432", "raw_code": "public ShardIterator onlyNodeSelectorActiveInitializingShardsIt(String nodeAttribute,DiscoveryNodes discoveryNodes){\n  ArrayList<ShardRouting> ordered=new ArrayList<>(activeShards.size() + allInitializingShards.size());\n  Set<String> selectedNodes=Sets.newHashSet(discoveryNodes.resolveNodesIds(nodeAttribute));\n  for (  ShardRouting shardRouting : activeShards) {\n    if (selectedNodes.contains(shardRouting.currentNodeId())) {\n      ordered.add(shardRouting);\n    }\n  }\n  for (  ShardRouting shardRouting : allInitializingShards) {\n    if (selectedNodes.contains(shardRouting.currentNodeId())) {\n      ordered.add(shardRouting);\n    }\n  }\n  if (ordered.isEmpty()) {\n    throw new IllegalArgumentException(\"No data node with critera [\" + nodeAttribute + \"] found\");\n  }\n  return new PlainShardIterator(shardId,ordered);\n}"}
{"ids": "16807", "raw_code": "private void checkChanges(){\n  settings.clearMovieNfoFilenames();\n  if (cbMovieNfoFilename1.isSelected()) {\n    settings.addMovieNfoFilename(MovieNfoNaming.FILENAME_NFO);\n  }\n  if (cbMovieNfoFilename2.isSelected()) {\n    settings.addMovieNfoFilename(MovieNfoNaming.MOVIE_NFO);\n  }\n  if (cbMovieNfoFilename3.isSelected()) {\n    settings.addMovieNfoFilename(MovieNfoNaming.DISC_NFO);\n  }\n  CertificationStyleWrapper wrapper=(CertificationStyleWrapper)cbCertificationStyle.getSelectedItem();\n  if (wrapper != null && settings.getMovieCertificationStyle() != wrapper.style) {\n    settings.setMovieCertificationStyle(wrapper.style);\n  }\n}"}
{"ids": "49206", "raw_code": "XMenuItemPeer[] copyItems(){\nsynchronized (getMenuTreeLock()) {\n    return (XMenuItemPeer[])items.toArray(new XMenuItemPeer[]{});\n  }\n}"}
{"ids": "29644", "raw_code": "public static void connectionClosed(){\n  numConnections.getAndDecrement();\n}"}
{"ids": "23246", "raw_code": "public static String buildChatSDP(String ipAddress,int localPort,String protocol,String acceptTypes,String wrapperTypes,String setup,String path,String direction){\n  return buildSDP(ipAddress,localPort,protocol,acceptTypes,wrapperTypes,null,null,null,setup,path,direction,null,0);\n}"}
{"ids": "28265", "raw_code": "int[] determineDimensions(int sourceCodeWords,int errorCorrectionCodeWords) throws WriterException {\n  float ratio=0.0f;\n  int[] dimension=null;\n  for (int cols=minCols; cols <= maxCols; cols++) {\n    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,cols);\n    if (rows < minRows) {\n      break;\n    }\n    if (rows > maxRows) {\n      continue;\n    }\n    float newRatio=((17 * cols + 69) * DEFAULT_MODULE_WIDTH) / (rows * HEIGHT);\n    if (dimension != null && Math.abs(newRatio - PREFERRED_RATIO) > Math.abs(ratio - PREFERRED_RATIO)) {\n      continue;\n    }\n    ratio=newRatio;\n    dimension=new int[]{cols,rows};\n  }\n  if (dimension == null) {\n    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,minCols);\n    if (rows < minRows) {\n      dimension=new int[]{minCols,minRows};\n    }\n  }\n  if (dimension == null) {\n    throw new WriterException(\"Unable to fit message in columns\");\n  }\n  return dimension;\n}"}
{"ids": "51668", "raw_code": "public static DataDisplayTable listFontMetrics(Font font){\n  String[] header={\"Name\",\"Value\"};\n  Align[] displayAlignment={Align.Left,Align.Left};\n  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));\n  table.setAlignment(Arrays.asList(displayAlignment));\n  FontHeaderTable headTable=(FontHeaderTable)FontUtils.getTable(font,Tag.head);\n  HorizontalHeaderTable hheaTable=(HorizontalHeaderTable)FontUtils.getTable(font,Tag.hhea);\n  OS2Table os2Table=(OS2Table)FontUtils.getTable(font,Tag.OS_2);\n  table.add(Arrays.asList(new String[]{\"Units per em\",String.format(\"%d\",headTable.unitsPerEm())}));\n  table.add(Arrays.asList(new String[]{\"[xMin, xMax]\",String.format(\"[%d, %d]\",headTable.xMin(),headTable.xMax())}));\n  table.add(Arrays.asList(new String[]{\"[yMin, yMax]\",String.format(\"[%d, %d]\",headTable.yMin(),headTable.yMax())}));\n  table.add(Arrays.asList(new String[]{\"Smallest readable size (px per em)\",String.format(\"%d\",headTable.lowestRecPPEM())}));\n  table.add(Arrays.asList(new String[]{\"hhea ascender\",String.format(\"%d\",hheaTable.ascender())}));\n  table.add(Arrays.asList(new String[]{\"hhea descender\",String.format(\"%d\",hheaTable.descender())}));\n  table.add(Arrays.asList(new String[]{\"hhea typographic line gap\",String.format(\"%d\",hheaTable.lineGap())}));\n  table.add(Arrays.asList(new String[]{\"OS/2 Windows ascender\",String.format(\"%d\",os2Table.usWinAscent())}));\n  table.add(Arrays.asList(new String[]{\"OS/2 Windows descender\",String.format(\"%d\",os2Table.usWinDescent())}));\n  table.add(Arrays.asList(new String[]{\"OS/2 typographic ascender\",String.format(\"%d\",os2Table.sTypoAscender())}));\n  table.add(Arrays.asList(new String[]{\"OS/2 typographic ascender\",String.format(\"%d\",os2Table.sTypoDescender())}));\n  table.add(Arrays.asList(new String[]{\"OS/2 typographic line gap\",String.format(\"%d\",os2Table.sTypoLineGap())}));\n  return table;\n}"}
{"ids": "38045", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(5);\n  newVector.addElement(new Option(\"\\tIf set, distance is interpreted as branch length\\n\" + \"\\totherwise it is node height.\",\"B\",0,\"-B\"));\n  newVector.addElement(new Option(\"\\tnumber of clusters\",\"N\",1,\"-N <Nr Of Clusters>\"));\n  newVector.addElement(new Option(\"\\tFlag to indicate the cluster should be printed in Newick format.\",\"P\",0,\"-P\"));\n  newVector.addElement(new Option(\"Link type (Single, Complete, Average, Mean, Centroid, Ward, Adjusted complete, Neighbor joining)\",\"L\",1,\"-L [SINGLE|COMPLETE|AVERAGE|MEAN|CENTROID|WARD|ADJCOMPLETE|NEIGHBOR_JOINING]\"));\n  newVector.add(new Option(\"\\tDistance function to use.\\n\" + \"\\t(default: weka.core.EuclideanDistance)\",\"A\",1,\"-A <classname and options>\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "79233", "raw_code": "public static ShoppingCartItem makeItem(Integer cartLocation,String itemType,String itemDescription,String productCategoryId,BigDecimal basePrice,BigDecimal selectedAmount,BigDecimal quantity,Map<String,Object> attributes,String prodCatalogId,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool) throws CartItemModifyException {\n  Delegator delegator=cart.getDelegator();\n  ShoppingCartItem newItem=new ShoppingCartItem(delegator,itemType,itemDescription,productCategoryId,basePrice,attributes,prodCatalogId,cart.getLocale(),itemGroup);\n  if (cartLocation == null) {\n    cart.addItemToEnd(newItem);\n  }\n else {\n    cart.addItem(cartLocation.intValue(),newItem);\n  }\n  boolean triggerExternalOps=triggerExternalOpsBool == null ? true : triggerExternalOpsBool.booleanValue();\n  try {\n    newItem.setQuantity(quantity,dispatcher,cart,triggerExternalOps);\n  }\n catch (  CartItemModifyException e) {\n    cart.removeEmptyCartItems();\n    throw e;\n  }\n  if (selectedAmount != null) {\n    newItem.setSelectedAmount(selectedAmount);\n  }\n  return newItem;\n}"}
{"ids": "6367", "raw_code": "final void runWorker(Worker w){\n  Runnable task=w.firstTask;\n  w.firstTask=null;\n  boolean completedAbruptly=true;\n  try {\n    while (task != null || (task=getTask()) != null) {\n      w.lock();\n      clearInterruptsForTaskRun();\n      try {\n        beforeExecute(w.thread,task);\n        Throwable thrown=null;\n        try {\n          task.run();\n        }\n catch (        RuntimeException x) {\n          thrown=x;\n          throw x;\n        }\ncatch (        Error x) {\n          thrown=x;\n          throw x;\n        }\ncatch (        Throwable x) {\n          thrown=x;\n          throw new Error(x);\n        }\n finally {\n          afterExecute(task,thrown);\n        }\n      }\n  finally {\n        task=null;\n        w.completedTasks++;\n        w.unlock();\n      }\n    }\n    completedAbruptly=false;\n  }\n  finally {\n    processWorkerExit(w,completedAbruptly);\n  }\n}"}
{"ids": "31772", "raw_code": "private static ClusterProperties fromProperties(Properties props){\n  ClusterProperties prop=new ClusterProperties();\n  prop.clusterName=getStringProperty(IGNITE_CLUSTER_NAME,props,DEFAULT_CLUSTER_NAME);\n  prop.cpuPerNode=getDoubleProperty(IGNITE_RUN_CPU_PER_NODE,props,DEFAULT_CPU_PER_NODE);\n  prop.memPerNode=getDoubleProperty(IGNITE_MEMORY_PER_NODE,props,DEFAULT_MEM_PER_NODE);\n  prop.memOverHeadPerNode=getDoubleProperty(IGNITE_MEMORY_OVERHEAD_PER_NODE,props,Math.max(0.1 * prop.memPerNode,DEFAULT_MINIMUM_MEM_OVERHEAD_PER_NODE));\n  prop.nodeCnt=getDoubleProperty(IGNITE_NODE_COUNT,props,DEFAULT_IGNITE_NODE_COUNT);\n  prop.igniteUrl=getStringProperty(IGNITE_URL,props,null);\n  prop.ignitePath=getStringProperty(IGNITE_PATH,props,null);\n  prop.licencePath=getStringProperty(LICENCE_PATH,props,null);\n  prop.jvmOpts=getStringProperty(IGNITE_JVM_OPTS,props,null);\n  prop.igniteWorkDir=getStringProperty(IGNITE_WORKING_DIR,props,DEFAULT_IGNITE_WORK_DIR);\n  prop.igniteLocalWorkDir=getStringProperty(IGNITE_LOCAL_WORK_DIR,props,DEFAULT_IGNITE_LOCAL_WORK_DIR);\n  prop.igniteReleasesDir=getStringProperty(IGNITE_RELEASES_DIR,props,DEFAULT_IGNITE_RELEASES_DIR);\n  prop.igniteCfg=getStringProperty(IGNITE_CONFIG_XML,props,null);\n  prop.userLibs=getStringProperty(IGNITE_USERS_LIBS,props,null);\n  String pattern=getStringProperty(IGNITE_HOSTNAME_CONSTRAINT,props,null);\n  if (pattern != null) {\n    try {\n      prop.hostnameConstraint=Pattern.compile(pattern);\n    }\n catch (    PatternSyntaxException e) {\n      log.log(Level.WARNING,\"IGNITE_HOSTNAME_CONSTRAINT has invalid pattern. It will be ignore.\",e);\n    }\n  }\n  return prop;\n}"}
{"ids": "21682", "raw_code": "public static String generateNativeGuid(StorageSystem device){\n  return String.format(\"%s+%s\",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber());\n}"}
{"ids": "32210", "raw_code": "public CacheMetricsSnapshot(CacheMetrics loc,Collection<CacheMetrics> metrics){\n  cacheName=loc.name();\n  isEmpty=loc.isEmpty();\n  isWriteBehindEnabled=loc.isWriteBehindEnabled();\n  writeBehindFlushSize=loc.getWriteBehindFlushSize();\n  writeBehindFlushThreadCnt=loc.getWriteBehindFlushThreadCount();\n  writeBehindFlushFreq=loc.getWriteBehindFlushFrequency();\n  writeBehindStoreBatchSize=loc.getWriteBehindStoreBatchSize();\n  writeBehindBufSize=loc.getWriteBehindBufferSize();\n  size=loc.getSize();\n  keySize=loc.getKeySize();\n  keyType=loc.getKeyType();\n  valType=loc.getValueType();\n  isStoreByVal=loc.isStoreByValue();\n  isStatisticsEnabled=loc.isStatisticsEnabled();\n  isManagementEnabled=loc.isManagementEnabled();\n  isReadThrough=loc.isReadThrough();\n  isWriteThrough=loc.isWriteThrough();\n  offHeapMaxSize=loc.getOffHeapMaxSize();\n  for (  CacheMetrics e : metrics) {\n    reads+=e.getCacheGets();\n    puts+=e.getCachePuts();\n    hits+=e.getCacheHits();\n    misses+=e.getCacheMisses();\n    txCommits+=e.getCacheTxCommits();\n    txRollbacks+=e.getCacheTxRollbacks();\n    evicts+=e.getCacheEvictions();\n    removes+=e.getCacheRemovals();\n    putAvgTimeNanos+=e.getAveragePutTime();\n    getAvgTimeNanos+=e.getAverageGetTime();\n    rmvAvgTimeNanos+=e.getAverageRemoveTime();\n    commitAvgTimeNanos+=e.getAverageTxCommitTime();\n    rollbackAvgTimeNanos+=e.getAverageTxRollbackTime();\n    if (e.getOverflowSize() > -1)     overflowSize+=e.getOverflowSize();\n else     overflowSize=-1;\n    offHeapGets+=e.getOffHeapGets();\n    offHeapPuts+=e.getOffHeapPuts();\n    offHeapRemoves+=e.getOffHeapRemovals();\n    offHeapEvicts+=e.getOffHeapEvictions();\n    offHeapHits+=e.getOffHeapHits();\n    offHeapMisses+=e.getOffHeapMisses();\n    offHeapEntriesCnt+=e.getOffHeapEntriesCount();\n    offHeapPrimaryEntriesCnt+=e.getOffHeapPrimaryEntriesCount();\n    offHeapBackupEntriesCnt+=e.getOffHeapBackupEntriesCount();\n    offHeapAllocatedSize+=e.getOffHeapAllocatedSize();\n    swapGets+=e.getSwapGets();\n    swapPuts+=e.getSwapPuts();\n    swapRemoves+=e.getSwapRemovals();\n    swapHits+=e.getSwapHits();\n    swapMisses+=e.getSwapMisses();\n    swapEntriesCnt+=e.getSwapEntriesCount();\n    swapSize+=e.getSwapSize();\n    if (e.getDhtEvictQueueCurrentSize() > -1)     dhtEvictQueueCurrSize+=e.getDhtEvictQueueCurrentSize();\n else     dhtEvictQueueCurrSize=-1;\n    txThreadMapSize+=e.getTxThreadMapSize();\n    txXidMapSize+=e.getTxXidMapSize();\n    txCommitQueueSize+=e.getTxCommitQueueSize();\n    txPrepareQueueSize+=e.getTxPrepareQueueSize();\n    txStartVerCountsSize+=e.getTxStartVersionCountsSize();\n    txCommittedVersionsSize+=e.getTxCommittedVersionsSize();\n    txRolledbackVersionsSize+=e.getTxRolledbackVersionsSize();\n    if (e.getTxDhtThreadMapSize() > -1)     txDhtThreadMapSize+=e.getTxDhtThreadMapSize();\n else     txDhtThreadMapSize=-1;\n    if (e.getTxDhtXidMapSize() > -1)     txDhtXidMapSize+=e.getTxDhtXidMapSize();\n else     txDhtXidMapSize=-1;\n    if (e.getTxDhtCommitQueueSize() > -1)     txDhtCommitQueueSize+=e.getTxDhtCommitQueueSize();\n else     txDhtCommitQueueSize=-1;\n    if (e.getTxDhtPrepareQueueSize() > -1)     txDhtPrepareQueueSize+=e.getTxDhtPrepareQueueSize();\n else     txDhtPrepareQueueSize=-1;\n    if (e.getTxDhtStartVersionCountsSize() > -1)     txDhtStartVerCountsSize+=e.getTxDhtStartVersionCountsSize();\n else     txDhtStartVerCountsSize=-1;\n    if (e.getTxDhtCommittedVersionsSize() > -1)     txDhtCommittedVersionsSize+=e.getTxDhtCommittedVersionsSize();\n else     txDhtCommittedVersionsSize=-1;\n    if (e.getTxDhtRolledbackVersionsSize() > -1)     txDhtRolledbackVersionsSize+=e.getTxDhtRolledbackVersionsSize();\n else     txDhtRolledbackVersionsSize=-1;\n    if (e.getWriteBehindTotalCriticalOverflowCount() > -1)     writeBehindTotalCriticalOverflowCnt+=e.getWriteBehindTotalCriticalOverflowCount();\n else     writeBehindTotalCriticalOverflowCnt=-1;\n    if (e.getWriteBehindCriticalOverflowCount() > -1)     writeBehindCriticalOverflowCnt+=e.getWriteBehindCriticalOverflowCount();\n else     writeBehindCriticalOverflowCnt=-1;\n    if (e.getWriteBehindErrorRetryCount() > -1)     writeBehindErrorRetryCnt+=e.getWriteBehindErrorRetryCount();\n else     writeBehindErrorRetryCnt=-1;\n  }\n  int size=metrics.size();\n  if (size > 1) {\n    putAvgTimeNanos/=size;\n    getAvgTimeNanos/=size;\n    rmvAvgTimeNanos/=size;\n    commitAvgTimeNanos/=size;\n    rollbackAvgTimeNanos/=size;\n  }\n}"}
{"ids": "25252", "raw_code": "private void addReference(final int sourcePosition,final int referencePosition){\n  if (srcAndRefPositions == null) {\n    srcAndRefPositions=new int[6];\n  }\n  if (referenceCount >= srcAndRefPositions.length) {\n    int[] a=new int[srcAndRefPositions.length + 6];\n    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);\n    srcAndRefPositions=a;\n  }\n  srcAndRefPositions[referenceCount++]=sourcePosition;\n  srcAndRefPositions[referenceCount++]=referencePosition;\n}"}
{"ids": "2430", "raw_code": "public Vector2 floor(){\n  x=(float)Math.floor(x);\n  z=(float)Math.floor(z);\n  return this;\n}"}
{"ids": "25171", "raw_code": "public static Location createLocation(final String rawJSON) throws TwitterException {\n  try {\n    final JSONObject json=new JSONObject(rawJSON);\n    return locationConstructor.newInstance(json);\n  }\n catch (  final InstantiationException e) {\n    throw new TwitterException(e);\n  }\ncatch (  final IllegalAccessException e) {\n    throw new AssertionError(e);\n  }\ncatch (  final InvocationTargetException e) {\n    throw new TwitterException(e);\n  }\ncatch (  final JSONException e) {\n    throw new TwitterException(e);\n  }\n}"}
{"ids": "70151", "raw_code": "@Override protected int calcAttackValue(){\n  int av=100;\n  if (bDirect) {\n    av=Math.min(av + (toHit.getMoS() / 3),av * 2);\n  }\n  if (bGlancing) {\n    av=(int)Math.floor(av / 2.0);\n  }\n  av=(int)Math.floor(getBracketingMultiplier() * av);\n  return av;\n}"}
{"ids": "54534", "raw_code": "@Override public String queryToRetrieveData(){\n  String parameterizedQuery;\n  if (query.contains(\"%s\")) {\n    parameterizedQuery=query.replace(\"%s\",startRow + \"\");\n  }\n else {\n    parameterizedQuery=query;\n  }\n  return parameterizedQuery;\n}"}
{"ids": "20199", "raw_code": "private static void initialise(){\n  Hints hints=new Hints(Hints.CRS,DefaultGeographicCRS.WGS84);\n  PositionFactory positionFactory=GeometryFactoryFinder.getPositionFactory(hints);\n  GeometryFactory geometryFactory=GeometryFactoryFinder.getGeometryFactory(hints);\n  PrimitiveFactory primitiveFactory=GeometryFactoryFinder.getPrimitiveFactory(hints);\n  AggregateFactory aggregateFactory=GeometryFactoryFinder.getAggregateFactory(hints);\n  wktParser=new WKTParser(geometryFactory,primitiveFactory,positionFactory,aggregateFactory);\n  wktTypeList.add(new WKTType(WKT_POINT,false,1,\"Point\",false));\n  wktTypeList.add(new WKTType(WKT_MULTIPOINT,true,1,\"Point\",false));\n  wktTypeList.add(new WKTType(WKT_LINESTRING,false,2,\"Line\",false));\n  wktTypeList.add(new WKTType(\"LINEARRING\",false,2,\"Line\",false));\n  wktTypeList.add(new WKTType(WKT_MULTILINESTRING,true,2,\"Line\",false));\n  wktTypeList.add(new WKTType(WKT_POLYGON,false,-1,\"Polygon\",true));\n  wktTypeList.add(new WKTType(WKT_MULTIPOLYGON,true,-1,\"Polygon\",true,true));\n  for (  WKTType wkyType : wktTypeList) {\n    wktTypeMap.put(wkyType.getName(),wkyType);\n  }\n}"}
{"ids": "37909", "raw_code": "public Instances pruneToK(Instances neighbours,double[] distances,int k){\n  if (neighbours == null || distances == null || neighbours.numInstances() == 0) {\n    return null;\n  }\n  if (k < 1) {\n    k=1;\n  }\n  int currentK=0;\n  double currentDist;\n  for (int i=0; i < neighbours.numInstances(); i++) {\n    currentK++;\n    currentDist=distances[i];\n    if (currentK > k && currentDist != distances[i - 1]) {\n      currentK--;\n      neighbours=new Instances(neighbours,0,currentK);\n      break;\n    }\n  }\n  return neighbours;\n}"}
{"ids": "41172", "raw_code": "@Override protected String doInBackground(String... f_url){\n  int count;\n  InputStream input=null;\n  OutputStream output=null;\n  try {\n    URL url=new URL(f_url[0]);\n    URLConnection connection=url.openConnection();\n    connection.connect();\n    int lengthOfFile=connection.getContentLength();\n    input=new BufferedInputStream(url.openStream(),8192);\n    output=new FileOutputStream(f_url[1]);\n    byte data[]=new byte[1024];\n    long total=0;\n    while ((count=input.read(data)) != -1) {\n      total+=count;\n      publishProgress(Integer.toString((int)((total * 100) / lengthOfFile)));\n      output.write(data,0,count);\n    }\n    output.flush();\n  }\n catch (  Exception e) {\n    Log.e(\"Error: \",e.getMessage());\n  }\n finally {\n    try {\n      if (output != null)       output.close();\n    }\n catch (    Exception e) {\n      Log.e(\"Error: \",e.getMessage());\n    }\n    try {\n      if (input != null)       input.close();\n    }\n catch (    Exception e) {\n      Log.e(\"Error: \",e.getMessage());\n    }\n  }\n  return null;\n}"}
{"ids": "27129", "raw_code": "public void error(String msg){\n  print(\"[ERROR] \" + msg,out.err);\n}"}
{"ids": "78062", "raw_code": "public static void loadArmV7aLibrary(ApplicationLike applicationLike,String libName){\n  if (libName == null || libName.isEmpty() || applicationLike == null) {\n    throw new TinkerRuntimeException(\"libName or context is null!\");\n  }\n  if (TinkerApplicationHelper.isTinkerEnableForNativeLib(applicationLike)) {\n    if (TinkerApplicationHelper.loadLibraryFromTinker(applicationLike,\"lib/armeabi-v7a\",libName)) {\n      return;\n    }\n  }\n  System.loadLibrary(libName);\n}"}
{"ids": "86565", "raw_code": "AtomicSequence(final long initialValue){\n  UPDATER.lazySet(this,initialValue);\n}"}
{"ids": "64655", "raw_code": "protected static Long convertStringToBuckectingLong(String stringToBeConverted){\n  if (stringToBeConverted == null || stringToBeConverted.equals(\"\")) {\n    return null;\n  }\n  byte[] byteString=stringToBeConverted.getBytes();\n  if (byteString.length < 8) {\n    byte[] newByteString=new byte[8];\n    for (int i=0; i < newByteString.length; i++) {\n      if (i < byteString.length) {\n        newByteString[i]=byteString[i];\n      }\n else {\n        newByteString[i]=0;\n      }\n    }\n    byteString=newByteString;\n  }\n  ByteBuffer bb=ByteBuffer.wrap(byteString);\n  long byteMethod=bb.getLong();\n  byteMethod=Math.abs(byteMethod);\n  return byteMethod;\n}"}
{"ids": "30859", "raw_code": "private void pendingEvent(EventReg reg,ServiceID sid,Item item,int transition,boolean copyItem){\n  if (item != null && copyItem)   item=copyItem(item);\n  newNotifies.add(new EventTask(reg,sid,item,transition));\n}"}
{"ids": "5689", "raw_code": "public static void writeln(String fileName,Object[] objects){\n  if (writer == null) {\n    createWriter(fileName);\n    for (    Object obj : objects) {\n      writeln(obj.toString());\n    }\n    closeWriter();\n  }\n}"}
{"ids": "37942", "raw_code": "protected double regressionPrediction(Instance transformedInstance,boolean[] selectedAttributes,double[] coefficients) throws Exception {\n  double result=0;\n  int column=0;\n  for (int j=0; j < transformedInstance.numAttributes(); j++) {\n    if ((m_ClassIndex != j) && (selectedAttributes[j])) {\n      result+=coefficients[column] * transformedInstance.value(j);\n      column++;\n    }\n  }\n  result+=coefficients[column];\n  return result;\n}"}
{"ids": "78809", "raw_code": "public QLFDocument(List<F> list,String docno,Map<String,String> extraProps){\n  featureList=new MemoryLocalFeatureList<F>(list);\n  iterator=list.iterator();\n  if (extraProps != null)   props.putAll(extraProps);\n  props.put(\"docno\",docno);\n}"}
{"ids": "65254", "raw_code": "@Override protected TemplateModel invokeGenericGet(Map keyMap,Class clazz,String key) throws TemplateModelException {\n  Map map=(Map)object;\n  Object val=map.get(key);\n  if (val == null) {\n    if (key.length() == 1) {\n      Character charKey=Character.valueOf(key.charAt(0));\n      val=map.get(charKey);\n      if (val == null && !(map.containsKey(key) || map.containsKey(charKey))) {\n        return UNKNOWN;\n      }\n    }\n else     if (!map.containsKey(key)) {\n      return UNKNOWN;\n    }\n  }\n  return wrap(val);\n}"}
{"ids": "27271", "raw_code": "public byte[] toZOrderByteArray(final BigInteger bigInt){\n  final int numDimensions=datatypeConfig.getNumDimensions();\n  final byte[] bigIntAsByteArr=bigInt.toByteArray();\n  final int paddedArraySize=numDimensions * BASE_SIZE + 1;\n  final byte[] bigIntAsByteArrPad=new byte[paddedArraySize];\n  int idx=0;\n  for (int i=0; i < paddedArraySize - bigIntAsByteArr.length; i++) {\n    bigIntAsByteArrPad[idx++]=0;\n  }\n  for (int i=0; i < bigIntAsByteArr.length; i++) {\n    bigIntAsByteArrPad[idx++]=bigIntAsByteArr[i];\n  }\n  final byte[] bigIntAsByteArrUnsigned=unpadLeadingZero(bigIntAsByteArrPad);\n  return bigIntAsByteArrUnsigned;\n}"}
{"ids": "50876", "raw_code": "public void clearLogcat(@NotNull IDevice device,@NotNull Project project){\nsynchronized (myLock) {\n    ExecutorService executor=myExecutors.get(device);\n    if (executor != null) {\n      stopReceiving(device);\n      executor.submit(null);\n      startReceiving(device);\n    }\n  }\n}"}
{"ids": "6754", "raw_code": "public void expand(int level){\n  ArrayList<S2CellId> output=new ArrayList<S2CellId>();\n  long levelLsb=S2CellId.lowestOnBitForLevel(level);\n  int i=size() - 1;\n  do {\n    S2CellId id=cellId(i);\n    if (id.lowestOnBit() < levelLsb) {\n      id=id.parent(level);\n      while (i > 0 && id.contains(cellId(i - 1))) {\n        --i;\n      }\n    }\n    output.add(id);\n    id.getAllNeighbors(level,output);\n  }\n while (--i >= 0);\n  initSwap(output);\n}"}
{"ids": "21672", "raw_code": "private StringSet discoverVolumeSnaps(StorageSystem system,List<Snap> snaps,String parentGUID,StringSet parentMatchedVPools,VNXeApiClient apiClient,DbClient dbClient,Map<String,List<UnManagedVolume>> hostVolumesMap,VNXeLun lun,boolean isSnapInCG,String cgName) throws Exception {\n  StringSet snapsets=new StringSet();\n  for (  Snap snapDetail : snaps) {\n    UnManagedVolume unManagedVolume=null;\n    String managedSnapNativeGuid=NativeGUIDGenerator.generateNativeGuidForVolumeOrBlockSnapShot(system.getNativeGuid(),snapDetail.getId());\n    BlockSnapshot viprSnap=DiscoveryUtils.checkBlockSnapshotExistsInDB(dbClient,managedSnapNativeGuid);\n    if (null != viprSnap) {\n      log.info(\"Skipping snapshot {} as it is already managed by ViPR\",managedSnapNativeGuid);\n      snapsets.add(managedSnapNativeGuid);\n      continue;\n    }\n    String unManagedVolumeNatvieGuid=NativeGUIDGenerator.generateNativeGuidForPreExistingVolume(system.getNativeGuid(),snapDetail.getId());\n    unManagedVolume=DiscoveryUtils.checkUnManagedVolumeExistsInDB(dbClient,unManagedVolumeNatvieGuid);\n    unManagedVolume=createUnManagedVolumeForSnap(unManagedVolume,unManagedVolumeNatvieGuid,lun,system,dbClient,hostVolumesMap,snapDetail);\n    populateSnapInfo(unManagedVolume,snapDetail,parentGUID,parentMatchedVPools);\n    snapsets.add(unManagedVolumeNatvieGuid);\n    unManagedVolumesReturnedFromProvider.add(unManagedVolume.getId());\n    if (isSnapInCG) {\n      addObjectToUnManagedConsistencyGroup(apiClient,unManagedVolume,cgName,system,dbClient);\n    }\n  }\n  return snapsets;\n}"}
{"ids": "64774", "raw_code": "public void receive(final CallEvent event){\n  if (event.isValid()) {\n    if (!mEvents.contains(event)) {\n      mEvents.add(0,event);\n      fireTableRowsInserted(0,0);\n      prune();\n    }\n else {\n      int row=mEvents.indexOf(event);\n      fireTableRowsUpdated(row,row);\n    }\n  }\n else {\n    if (mEvents.contains(event)) {\n      int row=mEvents.indexOf(event);\n      mEvents.remove(event);\n      fireTableRowsDeleted(row,row);\n    }\n  }\n}"}
{"ids": "72249", "raw_code": "public Pet findOne(String id){\n  log.debug(\"Request to get Pet : {}\",id);\n  Pet pet=petRepository.findOne(UUID.fromString(id));\n  return pet;\n}"}
{"ids": "49617", "raw_code": "public final void clear(){\n  mActiveIssues.clear();\n}"}
{"ids": "52687", "raw_code": "public static void awaitDataReady(){\nsynchronized (mDbHelperLock) {\n    if (mDbHelper == null) {\n      try {\n        mDbHelperLock.wait();\n      }\n catch (      InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}"}
{"ids": "47343", "raw_code": "private String processFloatToken(String token){\n  String result=token.replaceAll(groupSeparator,\"\");\n  if (!decimalSeparator.equals(\"\\\\.\"))   result=result.replaceAll(decimalSeparator,\".\");\n  boolean isNegative=false;\n  int preLen=negativePrefix.length();\n  if ((preLen > 0) && result.startsWith(negativePrefix)) {\n    isNegative=true;\n    result=result.substring(preLen);\n  }\n  int sufLen=negativeSuffix.length();\n  if ((sufLen > 0) && result.endsWith(negativeSuffix)) {\n    isNegative=true;\n    result=result.substring(result.length() - sufLen,result.length());\n  }\n  if (result.equals(nanString))   result=\"NaN\";\n  if (result.equals(infinityString))   result=\"Infinity\";\n  if (isNegative)   result=\"-\" + result;\n  Matcher m=NON_ASCII_DIGIT.matcher(result);\n  if (m.find()) {\n    StringBuilder inASCII=new StringBuilder();\n    for (int i=0; i < result.length(); i++) {\n      char nextChar=result.charAt(i);\n      if (Character.isDigit(nextChar)) {\n        int d=Character.digit(nextChar,10);\n        if (d != -1)         inASCII.append(d);\n else         inASCII.append(nextChar);\n      }\n else {\n        inASCII.append(nextChar);\n      }\n    }\n    result=inASCII.toString();\n  }\n  return result;\n}"}
{"ids": "80179", "raw_code": "InternalWindow(String title){\n  setLayout(new BorderLayout());\n  titleBar=new TitleBar();\n  add(titleBar,BorderLayout.NORTH);\n  titleBar.setLayout(new SBoxLayout(SBoxLayout.HORIZONTAL,TITLEBAR_PADDING));\n  titleLabel=new JLabel();\n  setTitle(title);\n  titleLabel.setMinimumSize(new Dimension(0,0));\n  titleBar.add(titleLabel);\n  SBoxLayout.addSpring(titleBar);\n  minimizeButton=new JButton(minimizeIcon);\n  minimizeButton.setMargin(new Insets(0,0,0,0));\n  minimizeButton.setBorder(BorderFactory.createEmptyBorder());\n  minimizeButton.setFocusable(false);\n  minimizeButton.addActionListener(new MinimizeListener());\n  titleBar.add(minimizeButton);\n  closeButton=new JButton(closeIcon);\n  closeButton.setMargin(new Insets(0,0,0,0));\n  closeButton.setBorder(BorderFactory.createEmptyBorder());\n  closeButton.setFocusable(false);\n  closeButton.addActionListener(new CloseActionListener());\n  titleBar.add(closeButton);\n  cache=new ComponentPaintCache(this);\n}"}
{"ids": "26903", "raw_code": "@SuppressWarnings(\"unchecked\") public static Map<String,Object> loadStream(InputStream inputStream){\n  LOG.fine(\"Reading config stream\");\n  Yaml yaml=new Yaml();\n  Map<Object,Object> propsYaml=(Map<Object,Object>)yaml.load(inputStream);\n  LOG.fine(\"Successfully read config\");\n  Map<String,Object> typedMap=new HashMap<>();\n  for (  Object key : propsYaml.keySet()) {\n    typedMap.put(key.toString(),propsYaml.get(key));\n  }\n  return typedMap;\n}"}
{"ids": "39831", "raw_code": "String[] split(final String stringToSplit){\n  if (StringUtils.isNotBlank(stringToSplit)) {\n    int strLenght=stringToSplit.length();\n    int splitNum=strLenght / chunkSize;\n    if (strLenght % chunkSize > 0) {\n      splitNum+=1;\n    }\n    String[] result=new String[splitNum];\n    for (int i=0; i < splitNum; i++) {\n      int startPos=i * chunkSize;\n      int endPos=startPos + chunkSize;\n      if (endPos > strLenght) {\n        endPos=strLenght;\n      }\n      result[i]=stringToSplit.substring(startPos,endPos);\n    }\n    return result;\n  }\n  return null;\n}"}
{"ids": "40916", "raw_code": "public void removeAllAddresses(){\n  addresses.clear();\n}"}
{"ids": "82103", "raw_code": "public static boolean isShowTooltips(){\n  return showTooltips;\n}"}
{"ids": "42017", "raw_code": "public void dispose(){\n  logDebug(\"Disposing.\");\n  mSetupDone=false;\n  if (mServiceConn != null) {\n    logDebug(\"Unbinding from service.\");\n    if (mContext != null)     mContext.unbindService(mServiceConn);\n  }\n  mDisposed=true;\n  mContext=null;\n  mServiceConn=null;\n  mService=null;\n  mPurchaseListener=null;\n}"}
{"ids": "82484", "raw_code": "public static java.lang.String toBinaryString(int i){\n  return intToBinaryString(i);\n}"}
{"ids": "43820", "raw_code": "public static boolean isPropertyField(String fieldName){\n  return !ID_FIELD_NAME.equals(fieldName) && !URI_FIELD_NAME.equals(fieldName) && !TEXT_FIELD_NAME.equals(fieldName)&& !CONTEXT_FIELD_NAME.equals(fieldName)&& fieldName.charAt(0) != '_';\n}"}
{"ids": "48439", "raw_code": "public static void checkAccess(int modifiers){\n  if (System.getSecurityManager() != null && !Modifier.isPublic(modifiers)) {\n    throw new SecurityException(\"Resource is not accessible\");\n  }\n}"}
{"ids": "71633", "raw_code": "protected void printIndent(StringBuilder ddl){\n  ddl.append(getIndent());\n}"}
{"ids": "45795", "raw_code": "public NType merge(NType a,NType b) throws MergeFailed {\n  if (a != null && b == null)   return a;\n  if (a == null && b != null)   return b;\n  if (a == null && b == null)   return null;\n  if (a.equals(b))   return a;\n  try {\n    return Dispatcher.dispatch(getClass(),this,\"accept\",a,b);\n  }\n catch (  NoSuchMethodException e) {\n    throw new MergeFailed(\"a and b are of different NType\",a,b);\n  }\n}"}
{"ids": "76709", "raw_code": "public static String format(String s,String col){\n  String s1=(s + padd);\n  return s1.substring(0,Math.min(col.length(),s1.length()));\n}"}
{"ids": "66091", "raw_code": "protected static void loadEnd(MLookupInfo info,HashMap lookup){\n  if (info.IsValidated && lookup.size() > 0)   s_loadedLookups.put(getKey(info),lookup);\n}"}
{"ids": "67464", "raw_code": "public static void info(final String message){\n  infoLogger.accept(message);\n}"}
{"ids": "57654", "raw_code": "private void rotateRight(Node<K,V> root){\n  Node<K,V> pivot=root.left;\n  Node<K,V> right=root.right;\n  Node<K,V> pivotLeft=pivot.left;\n  Node<K,V> pivotRight=pivot.right;\n  root.left=pivotRight;\n  if (pivotRight != null) {\n    pivotRight.parent=root;\n  }\n  replaceInParent(root,pivot);\n  pivot.right=root;\n  root.parent=pivot;\n  root.height=Math.max(right != null ? right.height : 0,pivotRight != null ? pivotRight.height : 0) + 1;\n  pivot.height=Math.max(root.height,pivotLeft != null ? pivotLeft.height : 0) + 1;\n}"}
{"ids": "6863", "raw_code": "private void checkNoCharactersMissing(int totalLength,List<Token> tokens){\n  if (!tokens.isEmpty() && tokens.get(tokens.size() - 1).right != totalLength) {\n    String error=String.format(\"Lengths don't match: %s instead of %s\",tokens.get(tokens.size() - 1).right,totalLength);\n    throw new RuntimeException(error);\n  }\n  int start=0;\n  for (int i=0; i < tokens.size(); i++) {\n    Token token=tokens.get(i);\n    if (token.left != start) {\n      throw new RuntimeException(\"Gap/inconsistency at: \" + start);\n    }\n    start=token.right;\n  }\n}"}
{"ids": "14770", "raw_code": "public boolean validateServiceAttributes(String token,String validatorClass,Set values) throws SMSException, SSOException, RemoteException {\n  initialize();\n  if (debug.messageEnabled()) {\n    debug.message(\"SMSJAXRPCObjectImpl::validateServiceAttributes: \" + validatorClass + \" Values: \"+ values);\n  }\n  try {\n    Class clazz=Class.forName(validatorClass);\n    ServiceAttributeValidator v=(ServiceAttributeValidator)clazz.newInstance();\n    return v.validate(values);\n  }\n catch (  InstantiationException ex) {\n    throw new SMSException(\"sms-validator_cannot_instantiate_class\");\n  }\ncatch (  IllegalAccessException ex) {\n    throw new SMSException(\"sms-validator_cannot_instantiate_class\");\n  }\ncatch (  ClassNotFoundException ex) {\n    throw new SMSException(\"sms-validator_cannot_instantiate_class\");\n  }\n}"}
{"ids": "623", "raw_code": "public synchronized void animatePanTo(Point2D p,long duration){\n  Point2D pp=new Point2D.Double();\n  m_itransform.transform(p,pp);\n  animatePanToAbs(pp,duration);\n}"}
{"ids": "60401", "raw_code": "protected void assertException(final AbstractExceptionCase exceptionCase) throws Throwable {\n  assertException(exceptionCase,null);\n}"}
{"ids": "50195", "raw_code": "@Override public ServiceHost start() throws Throwable {\n  super.start();\n  startDefaultCoreServicesSynchronously();\n  super.startService(new RootNamespaceService());\n  super.startService(new SampleServiceWithSharedCustomUi());\n  super.startService(new SampleFactoryServiceWithCustomUi());\n  super.startFactory(new SampleSimpleEchoService());\n  super.startFactory(new SamplePreviousEchoService());\n  super.startFactory(new ExampleService());\n  super.startFactory(new ExampleTaskService());\n  super.startService(new UiService());\n  startSwaggerDescriptorService();\n  return this;\n}"}
{"ids": "9241", "raw_code": "@Override public void endOfStream() throws AdeException {\n  for (  MsgData data : m_msgData.values()) {\n    if (data.m_totalLogCounts > 0) {\n      data.m_lambda=data.m_totalLogCounts / data.m_intervalCount;\n      m_minLambda=Math.min(data.m_lambda,m_minLambda);\n      if (locateMismatchingDistributions(data)) {\n        data.m_badFit=true;\n      }\n    }\n  }\n  m_trained=true;\n}"}
{"ids": "5582", "raw_code": "static BinaryTree<Integer> buildComplete(int n){\n  BinaryTree<Integer> bt=new BinaryTree<Integer>();\n  int b=(int)Math.pow(2,n - 1);\n  for (int i=0; i < n; i++) {\n    bt.insert(b);\n    for (int j=1; j <= Math.pow(2,i) - 1; j++) {\n      bt.insert(b + 2 * b * j);\n    }\n    b=b / 2;\n  }\n  return bt;\n}"}
{"ids": "20860", "raw_code": "public void erase(){\n  byte[] bytes=null;\n  for (  ByteBuffer buffer : buffers) {\n    if (bytes == null || bytes.length < buffer.limit())     bytes=new byte[buffer.limit()];\n    buffer.position(0);\n    buffer.put(bytes,0,buffer.limit());\n    buffer.position(0);\n  }\n}"}
{"ids": "41820", "raw_code": "@Override boolean resurrectSelection(){\n  final int childCount=getChildCount();\n  if (childCount <= 0) {\n    return false;\n  }\n  int selectedTop=0;\n  int selectedPos;\n  int childrenTop=mListPadding.top;\n  int childrenBottom=getBottom() - getTop() - mListPadding.bottom;\n  final int firstPosition=mFirstPosition;\n  final int toPosition=mResurrectToPosition;\n  boolean down=true;\n  if (toPosition >= firstPosition && toPosition < firstPosition + childCount) {\n    selectedPos=toPosition;\n    final View selected=getChildAt(selectedPos - mFirstPosition);\n    selectedTop=selected.getTop();\n    int selectedBottom=selected.getBottom();\n    if (selectedTop < childrenTop) {\n      selectedTop=childrenTop + getVerticalFadingEdgeLength();\n    }\n else     if (selectedBottom > childrenBottom) {\n      selectedTop=childrenBottom - selected.getMeasuredHeight() - getVerticalFadingEdgeLength();\n    }\n  }\n else {\n    if (toPosition < firstPosition) {\n      selectedPos=firstPosition;\n      for (int i=0; i < childCount; i++) {\n        final View v=getChildAt(i);\n        final int top=v.getTop();\n        if (i == 0) {\n          selectedTop=top;\n          if (firstPosition > 0 || top < childrenTop) {\n            childrenTop+=getVerticalFadingEdgeLength();\n          }\n        }\n        if (top >= childrenTop) {\n          selectedPos=firstPosition + i;\n          selectedTop=top;\n          break;\n        }\n      }\n    }\n else {\n      final int itemCount=mItemCount;\n      down=false;\n      selectedPos=firstPosition + childCount - 1;\n      for (int i=childCount - 1; i >= 0; i--) {\n        final View v=getChildAt(i);\n        final int top=v.getTop();\n        final int bottom=v.getBottom();\n        if (i == childCount - 1) {\n          selectedTop=top;\n          if (firstPosition + childCount < itemCount || bottom > childrenBottom) {\n            childrenBottom-=getVerticalFadingEdgeLength();\n          }\n        }\n        if (bottom <= childrenBottom) {\n          selectedPos=firstPosition + i;\n          selectedTop=top;\n          break;\n        }\n      }\n    }\n  }\n  mResurrectToPosition=INVALID_POSITION;\n  removeCallbacks(mFlingRunnable);\n  mTouchMode=TOUCH_MODE_REST;\n  clearScrollingCache();\n  mSpecificTop=selectedTop;\n  selectedPos=lookForSelectablePosition(selectedPos,down);\n  if (selectedPos >= firstPosition && selectedPos <= getLastVisiblePosition()) {\n    mLayoutMode=LAYOUT_SPECIFIC;\n    setSelectionInt(selectedPos);\n    invokeOnItemScrollListener();\n  }\n else {\n    selectedPos=INVALID_POSITION;\n  }\n  reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);\n  return selectedPos >= 0;\n}"}
{"ids": "23353", "raw_code": "public void logPurchase(BigDecimal purchaseAmount,Currency currency,Bundle parameters){\n  if (purchaseAmount == null) {\n    notifyDeveloperError(\"purchaseAmount cannot be null\");\n    return;\n  }\n else   if (currency == null) {\n    notifyDeveloperError(\"currency cannot be null\");\n    return;\n  }\n  if (parameters == null) {\n    parameters=new Bundle();\n  }\n  parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY,currency.getCurrencyCode());\n  logEvent(AppEventsConstants.EVENT_NAME_PURCHASED,purchaseAmount.doubleValue(),parameters);\n  eagerFlush();\n}"}
{"ids": "86682", "raw_code": "public static String padBetween(final String first,final int length,final String last){\n  final int padlen=length - (first.length() + last.length());\n  return first + (padlen > 0 ? getSpaceString(padlen) : \"\") + last;\n}"}
{"ids": "75286", "raw_code": "public void applyFromResolveInfo(PackageManager pm,ResolveInfo info,WidgetPreviewLoader loader){\n  mInfo=info;\n  CharSequence label=info.loadLabel(pm);\n  mWidgetName.setText(label);\n  mWidgetDims.setText(String.format(mDimensionsFormatString,1,1));\n  mWidgetPreviewLoader=loader;\n}"}
{"ids": "23997", "raw_code": "private QueueConnectionImpl createNewPrimary(Set excludedServers){\n  QueueConnectionImpl primary=null;\n  while (primary == null && pool.getPoolOrCacheCancelInProgress() == null) {\n    List servers=findQueueServers(excludedServers,1,false,printPrimaryNotFoundError,LocalizedStrings.QueueManagerImpl_COULD_NOT_FIND_SERVER_TO_CREATE_PRIMARY_CLIENT_QUEUE);\n    printPrimaryNotFoundError=false;\n    if (servers == null || servers.isEmpty()) {\n      break;\n    }\n    Connection connection=null;\n    try {\n      connection=factory.createClientToServerConnection((ServerLocation)servers.get(0),true);\n    }\n catch (    GemFireSecurityException e) {\n      throw e;\n    }\ncatch (    Exception e) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"SubscriptionManagerImpl - error creating a connection to server {}\",servers.get(0));\n      }\n    }\n    if (connection != null) {\n      primary=initializeQueueConnection(connection,true,queueConnections.getFailedUpdater());\n    }\n    excludedServers.addAll(servers);\n  }\n  if (primary != null && sentClientReady && primary.sendClientReady()) {\n    readyForEventsAfterFailover(primary);\n  }\n  return primary;\n}"}
{"ids": "32829", "raw_code": "public static int readInt(){\n  return scanner.nextInt();\n}"}
{"ids": "40518", "raw_code": "public CSVConfig guess(){\n  try {\n    BufferedReader bIn=new BufferedReader(new InputStreamReader(getInputStream(),StandardCharsets.UTF_8));\n    String[] lines=new String[10];\n    String line=null;\n    int counter=0;\n    while ((line=bIn.readLine()) != null && counter <= 10) {\n      lines[counter]=line;\n      counter++;\n    }\n    if (counter < 10) {\n      String[] newLines=new String[counter];\n      System.arraycopy(lines,0,newLines,0,counter);\n      lines=newLines;\n    }\n    analyseLines(lines);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    if (in != null) {\n      try {\n        in.close();\n      }\n catch (      Exception e) {\n      }\n    }\n  }\n  CSVConfig conf=config;\n  config=null;\n  return conf;\n}"}
{"ids": "78406", "raw_code": "private void updateDesign(DataSetDesign dataSetDesign,IConnection conn,String queryText) throws OdaException {\n  IQuery query=conn.newQuery(null);\n  query.prepare(queryText);\n  query.setProperty(Query.PROP_SETUP_QUERY_TEXT,getSetupQueryText());\n  try {\n    IResultSetMetaData md=query.getMetaData();\n    updateResultSetDesign(md,dataSetDesign);\n  }\n catch (  OdaException e) {\n    dataSetDesign.setResultSets(null);\n    e.printStackTrace();\n  }\n  try {\n    IParameterMetaData paramMd=query.getParameterMetaData();\n    updateParameterDesign(paramMd,dataSetDesign);\n  }\n catch (  OdaException ex) {\n    dataSetDesign.setParameters(null);\n    ex.printStackTrace();\n  }\n}"}
{"ids": "52784", "raw_code": "@Override public OutlierResult run(Database db,Relation<V> relation){\n  DBIDs ids=relation.getDBIDs();\n  SimilarityQuery<V> sq=db.getSimilarityQuery(relation,kernelFunction);\n  KernelMatrix kernelMatrix=new KernelMatrix(sq,relation,ids);\n  WritableDoubleDataStore abodvalues=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_STATIC);\n  DoubleMinMax minmaxabod=new DoubleMinMax();\n  MeanVariance s=new MeanVariance();\n  KNNHeap nn=DBIDUtil.newHeap(k);\n  for (DBIDIter pA=ids.iter(); pA.valid(); pA.advance()) {\n    final double simAA=kernelMatrix.getSimilarity(pA,pA);\n    nn.clear();\n    for (DBIDIter nB=relation.iterDBIDs(); nB.valid(); nB.advance()) {\n      if (DBIDUtil.equal(nB,pA)) {\n        continue;\n      }\n      double simBB=kernelMatrix.getSimilarity(nB,nB);\n      double simAB=kernelMatrix.getSimilarity(pA,nB);\n      double sqdAB=simAA + simBB - simAB - simAB;\n      if (!(sqdAB > 0.)) {\n        continue;\n      }\n      nn.insert(sqdAB,nB);\n    }\n    KNNList nl=nn.toKNNList();\n    s.reset();\n    DoubleDBIDListIter iB=nl.iter(), iC=nl.iter();\n    for (; iB.valid(); iB.advance()) {\n      double sqdAB=iB.doubleValue();\n      double simAB=kernelMatrix.getSimilarity(pA,iB);\n      if (!(sqdAB > 0.)) {\n        continue;\n      }\n      for (iC.seek(iB.getOffset() + 1); iC.valid(); iC.advance()) {\n        double sqdAC=iC.doubleValue();\n        double simAC=kernelMatrix.getSimilarity(pA,iC);\n        if (!(sqdAC > 0.)) {\n          continue;\n        }\n        double simBC=kernelMatrix.getSimilarity(iB,iC);\n        double numerator=simBC - simAB - simAC + simAA;\n        double div=1. / (sqdAB * sqdAC);\n        s.put(numerator * div,Math.sqrt(div));\n      }\n    }\n    final double abof=s.getNaiveVariance();\n    minmaxabod.put(abof);\n    abodvalues.putDouble(pA,abof);\n  }\n  DoubleRelation scoreResult=new MaterializedDoubleRelation(\"Angle-Based Outlier Degree\",\"abod-outlier\",abodvalues,relation.getDBIDs());\n  OutlierScoreMeta scoreMeta=new InvertedOutlierScoreMeta(minmaxabod.getMin(),minmaxabod.getMax(),0.0,Double.POSITIVE_INFINITY);\n  return new OutlierResult(scoreMeta,scoreResult);\n}"}
{"ids": "47479", "raw_code": "@Override public boolean equals(Object otherRule){\n  if (otherRule == this) {\n    return true;\n  }\n  if (otherRule instanceof ZoneOffsetTransitionRule) {\n    ZoneOffsetTransitionRule other=(ZoneOffsetTransitionRule)otherRule;\n    return month == other.month && dom == other.dom && dow == other.dow && timeDefinition == other.timeDefinition && time.equals(other.time) && timeEndOfDay == other.timeEndOfDay && standardOffset.equals(other.standardOffset) && offsetBefore.equals(other.offsetBefore) && offsetAfter.equals(other.offsetAfter);\n  }\n  return false;\n}"}
{"ids": "72564", "raw_code": "private void initializeMembershipMatrix(){\n  for (int i=0; i < points.size(); i++) {\n    for (int j=0; j < k; j++) {\n      membershipMatrix[i][j]=random.nextDouble();\n    }\n    membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);\n  }\n}"}
{"ids": "39075", "raw_code": "public static void writeAll(OutputStream stream,Object[] o) throws Exception {\n  ObjectOutputStream oos;\n  int i;\n  if (!(stream instanceof BufferedOutputStream)) {\n    stream=new BufferedOutputStream(stream);\n  }\n  oos=new ObjectOutputStream(stream);\n  for (i=0; i < o.length; i++) {\n    oos.writeObject(o[i]);\n  }\n  oos.flush();\n  oos.close();\n}"}
{"ids": "31606", "raw_code": "public synchronized void reset(){\n  mBufVertices.position(0);\n  mBufColors.position(0);\n  if (DRAW_TEXTURE) {\n    mBufTexCoords.position(0);\n  }\n  for (int i=0; i < 4; ++i) {\n    Vertex tmp=mArrTempVertices.get(0);\n    tmp.set(mRectangle[i]);\n    if (mFlipTexture) {\n      tmp.mTexX*=mTextureRectBack.right;\n      tmp.mTexY*=mTextureRectBack.bottom;\n      tmp.mColor=mTexturePage.getColor(CurlPage.SIDE_BACK);\n    }\n else {\n      tmp.mTexX*=mTextureRectFront.right;\n      tmp.mTexY*=mTextureRectFront.bottom;\n      tmp.mColor=mTexturePage.getColor(CurlPage.SIDE_FRONT);\n    }\n    addVertex(tmp);\n  }\n  mVerticesCountFront=4;\n  mVerticesCountBack=0;\n  mBufVertices.position(0);\n  mBufColors.position(0);\n  if (DRAW_TEXTURE) {\n    mBufTexCoords.position(0);\n  }\n  mDropShadowCount=mSelfShadowCount=0;\n}"}
{"ids": "69146", "raw_code": "public B css(@NonNls String classes){\n  return css(classes,null);\n}"}
{"ids": "72066", "raw_code": "public static ArgumentException adaptPropertyException(PropertyException e,AbstractManagedObjectDefinition<?,?> d){\n  return new ArgumentException(e.getMessageObject());\n}"}
{"ids": "50192", "raw_code": "private Consumer<Operation> createNotificationTarget(){\n  return null;\n}"}
{"ids": "20066", "raw_code": "public void write(byte[] bytes) throws IOException {\n  dataOutput.write(bytes);\n  offset+=bytes.length;\n}"}
{"ids": "49153", "raw_code": "static synchronized boolean isShapingSupported(){\n  if (isShapingSupported == null) {\n    XToolkit.awtLock();\n    try {\n      isShapingSupported=XlibWrapper.XShapeQueryExtension(XToolkit.getDisplay(),XlibWrapper.larg1,XlibWrapper.larg2);\n    }\n  finally {\n      XToolkit.awtUnlock();\n    }\n  }\n  return isShapingSupported.booleanValue();\n}"}
{"ids": "40319", "raw_code": "protected String handleTimeseal(String text) throws IOException {\n  String result=text;\n  if (LOG.isDebugEnabled())   LOG.debug(\"Entering handleTimeseal \" + result);\n  while (result.contains(\"[G]\\0\")) {\n    sendAck();\n    result=result.replaceFirst(\"\\\\[G\\\\]\\0\",\"\");\n    if (LOG.isDebugEnabled())     LOG.debug(\"Handled ack new result \" + result);\n  }\n  if (LOG.isDebugEnabled())   LOG.debug(\"Leaving handleTimeseal \" + result);\n  return result;\n}"}
{"ids": "60618", "raw_code": "public BerInputStream(InputStream in,int initialSize) throws IOException {\n  this.in=in;\n  buffer=new byte[initialSize];\n  next();\n  if (length != INDEFINIT_LENGTH) {\n    if (buffer.length < (length + offset)) {\n      byte[] newBuffer=new byte[length + offset];\n      System.arraycopy(buffer,0,newBuffer,0,offset);\n      buffer=newBuffer;\n    }\n  }\n else {\n    isIndefinedLength=true;\n    throw new ASN1Exception(\"Decoding indefinite length encoding is not supported\");\n  }\n}"}
{"ids": "84336", "raw_code": "protected LocationHandler(Location location,Option... options){\n  this.location=location;\n  this.options=options.length == 0 ? EnumSet.noneOf(Option.class) : EnumSet.copyOf(Arrays.asList(options));\n}"}
{"ids": "21454", "raw_code": "private void init(){\n  _logger.debug(\"Initializing....\");\n  list=new ConcurrentLinkedQueue<ArrivedIndication>();\n  IntermediateProcessor intermediateProcessor=new IntermediateProcessor(list,_processor);\n  indicationProcessTimer=Executors.newSingleThreadScheduledExecutor();\n  indicationProcessTimer.scheduleWithFixedDelay(intermediateProcessor,CIMConstants.INDICATION_PROCESS_INTERVAL,PERIODIC_DELAY,TimeUnit.SECONDS);\n}"}
{"ids": "51095", "raw_code": "public static final String longToHexString(long a){\n  StringBuffer sb=new StringBuffer(16);\n  for (int i=0; i < 16; i++)   sb.append(NIBBLE[(int)(a >>> (60 - 4 * i)) & 0xf]);\n  return sb.toString();\n}"}
{"ids": "40689", "raw_code": "private Date watchCoreStartAt(SolrServer client,final long timeout,final Date min) throws InterruptedException, IOException, SolrServerException {\n  final long sleepInterval=200;\n  long timeSlept=0;\n  SolrParams p=params(\"action\",\"status\",\"core\",\"collection1\");\n  while (timeSlept < timeout) {\n    QueryRequest req=new QueryRequest(p);\n    req.setPath(\"/admin/cores\");\n    try {\n      NamedList data=client.request(req);\n      for (      String k : new String[]{\"status\",\"collection1\"}) {\n        Object o=data.get(k);\n        assertNotNull(\"core status rsp missing key: \" + k,o);\n        data=(NamedList)o;\n      }\n      Date startTime=(Date)data.get(\"startTime\");\n      assertNotNull(\"core has null startTime\",startTime);\n      if (null == min || startTime.after(min)) {\n        return startTime;\n      }\n    }\n catch (    SolrException e) {\n      if (500 != e.code()) {\n        throw e;\n      }\n    }\n    timeSlept+=sleepInterval;\n    Thread.sleep(sleepInterval);\n  }\n  fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n  return min;\n}"}
{"ids": "34304", "raw_code": "@Override public ParamsRequestCondition combine(ParamsRequestCondition other){\n  Set<ParamExpression> set=new LinkedHashSet<>(this.expressions);\n  set.addAll(other.expressions);\n  return new ParamsRequestCondition(set);\n}"}
{"ids": "7916", "raw_code": "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof TimeSeriesCollection)) {\n    return false;\n  }\n  TimeSeriesCollection that=(TimeSeriesCollection)obj;\n  if (this.xPosition != that.xPosition) {\n    return false;\n  }\n  if (this.domainIsPointsInTime != that.domainIsPointsInTime) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.data,that.data)) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "29238", "raw_code": "private void parseRules(Attributes attributes){\n  startMode=getModeAttribute(attributes,\"startMode\");\n  if (startMode == null) {\n    startMode=lookupCreateMode(IMPLICIT_MODE_NAME);\n    md.currentMode=startMode;\n    startMode.noteDefined(null);\n  }\n  startMode.noteUsed(locator);\n  if (attributesSchema) {\n    Mode wrapper=lookupCreateMode(WRAPPER_MODE_NAME);\n    ActionSet actions=new ActionSet();\n    actions.addNoResultAction(new AllowAction(new ModeUsage(startMode,startMode)));\n    wrapper.bindElement(NamespaceSpecification.ANY_NAMESPACE,NamespaceSpecification.DEFAULT_WILDCARD,actions);\n    wrapper.noteDefined(null);\n    startMode=wrapper;\n  }\n  defaultSchemaType=getSchemaType(attributes);\n}"}
{"ids": "79167", "raw_code": "public void fill(byte value){\n  value&=0xf;\n  Arrays.fill(data,(byte)(value << 4 | value));\n}"}
{"ids": "19180", "raw_code": "private static void parse(InputStream in,Encoding encoding,ContentHandler contentHandler) throws IOException, SAXException {\n  try {\n    XMLReader reader=new ExpatReader();\n    reader.setContentHandler(contentHandler);\n    InputSource source=new InputSource(in);\n    source.setEncoding(encoding.expatName);\n    reader.parse(source);\n  }\n catch (  IOException e) {\n    throw new AssertionError(e);\n  }\n}"}
{"ids": "9954", "raw_code": "public void addToAssociated(Message asMessage){\n  associatedMessages.add(asMessage);\n}"}
{"ids": "61006", "raw_code": "private static void parsePropertyAssignments(Properties p,String[] assignments){\n  for (  String assignment : assignments) {\n    int split=assignment.indexOf('=');\n    String key=assignment.substring(0,split);\n    String value=assignment.substring(split + 1);\n    p.put(key,value);\n  }\n}"}
{"ids": "2133", "raw_code": "protected boolean switchProfiles(IProfile newSelection){\n  if (newSelection == null) {\n    return false;\n  }\n  if (mCurrentProfile == newSelection) {\n    return true;\n  }\n  if (mAlternativeProfileHeaderSwitching) {\n    int prevSelection=-1;\n    if (mProfileFirst == newSelection) {\n      prevSelection=1;\n    }\n else     if (mProfileSecond == newSelection) {\n      prevSelection=2;\n    }\n else     if (mProfileThird == newSelection) {\n      prevSelection=3;\n    }\n    IProfile tmp=mCurrentProfile;\n    mCurrentProfile=newSelection;\n    if (prevSelection == 1) {\n      mProfileFirst=tmp;\n    }\n else     if (prevSelection == 2) {\n      mProfileSecond=tmp;\n    }\n else     if (prevSelection == 3) {\n      mProfileThird=tmp;\n    }\n  }\n else {\n    if (mProfiles != null) {\n      ArrayList<IProfile> previousActiveProfiles=new ArrayList<>(Arrays.asList(mCurrentProfile,mProfileFirst,mProfileSecond,mProfileThird));\n      if (previousActiveProfiles.contains(newSelection)) {\n        int position=-1;\n        for (int i=0; i < 4; i++) {\n          if (previousActiveProfiles.get(i) == newSelection) {\n            position=i;\n            break;\n          }\n        }\n        if (position != -1) {\n          previousActiveProfiles.remove(position);\n          previousActiveProfiles.add(0,newSelection);\n          mCurrentProfile=previousActiveProfiles.get(0);\n          mProfileFirst=previousActiveProfiles.get(1);\n          mProfileSecond=previousActiveProfiles.get(2);\n          mProfileThird=previousActiveProfiles.get(3);\n        }\n      }\n else {\n        mProfileThird=mProfileSecond;\n        mProfileSecond=mProfileFirst;\n        mProfileFirst=mCurrentProfile;\n        mCurrentProfile=newSelection;\n      }\n    }\n  }\n  if (mOnlySmallProfileImagesVisible) {\n    mProfileThird=mProfileSecond;\n    mProfileSecond=mProfileFirst;\n    mProfileFirst=mCurrentProfile;\n  }\n  buildProfiles();\n  return false;\n}"}
{"ids": "71898", "raw_code": "public static SearchScope valueOf(final int intValue){\n  SearchScope result=null;\n  if (0 <= intValue && intValue < ELEMENTS.length) {\n    result=ELEMENTS[intValue];\n  }\n  if (result == null) {\n    result=new SearchScope(intValue,\"unknown(\" + intValue + \")\",Enum.UNKNOWN);\n  }\n  return result;\n}"}
{"ids": "28902", "raw_code": "public static IPackageFragmentRoot addClassFolder(IJavaProject jproject,String containerName,IPath sourceAttachPath,IPath sourceAttachRoot) throws CoreException {\n  IProject project=jproject.getProject();\n  IContainer container=null;\n  if (containerName == null || containerName.length() == 0) {\n    container=project;\n  }\n else {\n    IFolder folder=project.getFolder(containerName);\n    if (!folder.exists()) {\n      CoreUtility.createFolder(folder,false,true,null);\n    }\n    container=folder;\n  }\n  IClasspathEntry cpe=JavaCore.newLibraryEntry(container.getFullPath(),sourceAttachPath,sourceAttachRoot);\n  addToClasspath(jproject,cpe);\n  return jproject.getPackageFragmentRoot(container);\n}"}
{"ids": "21043", "raw_code": "private void previousWindow(Calendar startTime){\n  if (isDaily()) {\n    startTime.add(Calendar.DAY_OF_MONTH,-1);\n  }\n else   if (isWeekly()) {\n    startTime.add(Calendar.WEEK_OF_MONTH,-1);\n  }\n else   if (isMonthly()) {\n    int month=startTime.get(Calendar.MONTH);\n    adjustDayOfMonth(startTime,month + -1);\n  }\n}"}
{"ids": "19594", "raw_code": "private <T>T[] copyElements(T[] a){\n  if (head < tail) {\n    System.arraycopy(elements,head,a,0,size());\n  }\n else   if (head > tail) {\n    int headPortionLen=elements.length - head;\n    System.arraycopy(elements,head,a,0,headPortionLen);\n    System.arraycopy(elements,0,a,headPortionLen,tail);\n  }\n  return a;\n}"}
{"ids": "39019", "raw_code": "public Instance calcPivot(MyIdxList list1,MyIdxList list2,Instances insts){\n  int classIdx=m_Instances.classIndex();\n  double[] attrVals=new double[insts.numAttributes()];\n  Instance temp;\n  for (int i=0; i < list1.length(); i++) {\n    temp=insts.instance(list1.get(i).idx);\n    for (int k=0; k < temp.numValues(); k++) {\n      if (temp.index(k) == classIdx) {\n        continue;\n      }\n      attrVals[k]+=temp.valueSparse(k);\n    }\n  }\n  for (int j=0; j < list2.length(); j++) {\n    temp=insts.instance(list2.get(j).idx);\n    for (int k=0; k < temp.numValues(); k++) {\n      if (temp.index(k) == classIdx) {\n        continue;\n      }\n      attrVals[k]+=temp.valueSparse(k);\n    }\n  }\n  for (int j=0, numInsts=list1.length() + list2.length(); j < attrVals.length; j++) {\n    attrVals[j]/=numInsts;\n  }\n  temp=new DenseInstance(1.0,attrVals);\n  return temp;\n}"}
{"ids": "68210", "raw_code": "default Optional<List<T>> parseOptional(byte[] parseMessage){\n  return Optional.ofNullable(parse(parseMessage));\n}"}
{"ids": "14573", "raw_code": "public static void initializeForClientUse(){\n  EmbeddedUtils.initializeForClientUse();\n}"}
{"ids": "15037", "raw_code": "private void createUser(SSOToken token,PersistentObject parentObj,Map attributes,String profileName) throws UMSException, AMEntryExistsException, AMException {\n  String orgDN=getOrganizationDN(internalToken,parentObj.getDN());\n  String entryDN=getNamingAttribute(AMObject.USER) + \"=\" + profileName+ \",\"+ parentObj.getDN();\n  attributes=callBackHelper.preProcess(token,entryDN,orgDN,null,attributes,CallBackHelper.CREATE,AMObject.USER,false);\n  AttrSet attrSet=CommonUtils.mapToAttrSet(attributes);\n  makeNamingFirst(attrSet,getNamingAttribute(AMObject.USER),profileName);\n  UserPasswordValidationHelper pluginImpl=new UserPasswordValidationHelper(token,orgDN);\n  try {\n    pluginImpl.validate(CommonUtils.attrSetToMap(attrSet));\n  }\n catch (  AMException ame) {\n    debug.error(\"DirectoryServicesImpl.createUser(): Invalid \" + \"characters for user\",ame);\n    throw ame;\n  }\n  TemplateManager tempMgr=TemplateManager.getTemplateManager();\n  CreationTemplate creationTemp=tempMgr.getCreationTemplate(\"BasicUser\",new Guid(orgDN),TemplateManager.SCOPE_ANCESTORS);\n  attrSet=combineOCs(creationTemp,attrSet);\n  PersistentObject user=new PersistentObject(creationTemp,attrSet);\n  try {\n    parentObj.addChild(user);\n  }\n catch (  AccessRightsException e) {\n    if (debug.warningEnabled()) {\n      debug.warning(\"DirectoryServicesImpl.createUser(): Insufficient \" + \"Access rights to create user\",e);\n    }\n    throw new AMException(token,\"460\");\n  }\ncatch (  EntryAlreadyExistsException ee) {\n    if (ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {\n      complianceImpl.checkIfDeletedUser(token,user.getDN());\n    }\n    if (debug.warningEnabled()) {\n      debug.warning(\"DirectoryServicesImpl.createUser() User \" + \"already exists: \",ee);\n    }\n    throw new AMEntryExistsException(token,\"328\",ee);\n  }\ncatch (  UMSException ue) {\n    if (debug.warningEnabled()) {\n      debug.warning(\"DirectoryServicesImpl.createUser(): Internal \" + \"Error occurred. Unable to create User Entry\",ue);\n    }\n    processInternalException(token,ue,\"324\");\n  }\n  callBackHelper.postProcess(token,user.getDN(),orgDN,null,attributes,CallBackHelper.CREATE,AMObject.USER,false);\n  AMUserEntryProcessed postPlugin=getUserPostPlugin();\n  if (postPlugin != null) {\n    Map attrMap=CommonUtils.attrSetToMap(attrSet);\n    postPlugin.processUserAdd(token,user.getDN(),attrMap);\n  }\n  EmailNotificationHelper mailerObj=new EmailNotificationHelper(user.getDN());\n  mailerObj.setUserCreateNotificationList();\n  mailerObj.sendUserCreateNotification(attributes);\n}"}
{"ids": "37993", "raw_code": "public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(2);\n  newVector.addElement(new Option(\"\\tNumber of folds used for cross validation (default 10).\",\"X\",1,\"-X <number of folds>\"));\n  newVector.addElement(new Option(\"\\tClassifier parameter options.\\n\" + \"\\teg: \\\"N 1 5 10\\\" Sets an optimisation parameter for the\\n\" + \"\\tclassifier with name -N, with lower bound 1, upper bound\\n\"+ \"\\t5, and 10 optimisation steps. The upper bound may be the\\n\"+ \"\\tcharacter 'A' or 'I' to substitute the number of\\n\"+ \"\\tattributes or instances in the training data,\\n\"+ \"\\trespectively. This parameter may be supplied more than\\n\"+ \"\\tonce to optimise over several classifier options\\n\"+ \"\\tsimultaneously.\",\"P\",1,\"-P <classifier parameter>\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "78822", "raw_code": "public void addAll(@NonNull List<T> itemList){\nsynchronized (lock) {\n    if (items == null) {\n      items=new ArrayList<>();\n    }\n    items.addAll(itemList);\n  }\n  if (notifyOnChange) {\n    if (items.size() - itemList.size() != 0) {\n      notifyItemRangeChanged(items.size() - itemList.size(),itemList.size());\n    }\n else {\n      notifyDataSetChanged();\n    }\n  }\n}"}
{"ids": "20853", "raw_code": "public void write(int a) throws IOException {\n  outs.write(a);\n  position++;\n}"}
{"ids": "82211", "raw_code": "public boolean isStartsWithMode(){\n  return startsWithMode;\n}"}
{"ids": "70032", "raw_code": "public Builder withThreads(int threads){\n  properties.setProperty(NettyOptions.THREADS,String.valueOf(Assert.argNot(threads,threads <= 0,\"threads must be positive\")));\n  return this;\n}"}
{"ids": "82700", "raw_code": "public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  if (orientation == JTabbedPane.LEFT) {\n    AffineTransform transform=new AffineTransform();\n    transform.scale(-1,1);\n    transform.rotate(Math.toRadians(90));\n    paintBackground(context,g,y,x,h,w,transform);\n  }\n else   if (orientation == JTabbedPane.RIGHT) {\n    AffineTransform transform=new AffineTransform();\n    transform.rotate(Math.toRadians(90));\n    transform.translate(0,-(x + w));\n    paintBackground(context,g,y,0,h,w,transform);\n  }\n else   if (orientation == JTabbedPane.BOTTOM) {\n    AffineTransform transform=new AffineTransform();\n    transform.translate(x,y);\n    paintBackground(context,g,0,0,w,h,transform);\n  }\n else {\n    paintBackground(context,g,x,y,w,h,null);\n  }\n}"}
{"ids": "13282", "raw_code": "@Override public void endCDATA(Augmentations augs) throws XNIException {\n  try {\n    if (fLexicalHandler != null) {\n      fLexicalHandler.endCDATA();\n    }\n  }\n catch (  SAXException e) {\n    throw new XNIException(e);\n  }\n}"}
{"ids": "24672", "raw_code": "public static MediaLocator createMediaLocator(String url){\n  MediaLocator ml;\n  if (url.indexOf(\":\") > 0 && (ml=new MediaLocator(url)) != null)   return ml;\n  if (url.startsWith(File.separator)) {\n    if ((ml=new MediaLocator(\"file:\" + url)) != null)     return ml;\n  }\n else {\n    String file=\"file:\" + System.getProperty(\"user.dir\") + File.separator+ url;\n    if ((ml=new MediaLocator(file)) != null)     return ml;\n  }\n  return null;\n}"}
{"ids": "24338", "raw_code": "private static void invokeRemoteClearAndWait(VM remoteVM,VM thisVM){\n  remoteVM.invoke(null);\n  try {\n    clearLatch.await();\n  }\n catch (  InterruptedException e) {\n    fail(\"wait for remote clear to complete failed\");\n  }\n}"}
{"ids": "58368", "raw_code": "public void key(String skey) throws SQLite.Exception {\nsynchronized (this) {\n    byte ekey[]=null;\n    if (skey != null && skey.length() > 0) {\n      ekey=new byte[skey.length()];\n      for (int i=0; i < skey.length(); i++) {\n        char c=skey.charAt(i);\n        ekey[i]=(byte)((c & 0xff) ^ (c >> 8));\n      }\n    }\n    _key(ekey);\n  }\n}"}
{"ids": "6076", "raw_code": "public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){\n  Random random=new Random();\n  Cache.Entry entry=new Cache.Entry();\n  if (data != null) {\n    entry.data=data;\n  }\n else {\n    entry.data=new byte[random.nextInt(1024)];\n  }\n  entry.etag=String.valueOf(random.nextLong());\n  entry.serverDate=random.nextLong();\n  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;\n  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;\n  return entry;\n}"}
{"ids": "13020", "raw_code": "public static final void isCDataWF(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,String datavalue,boolean isXML11Version){\n  if (datavalue == null || (datavalue.length() == 0)) {\n    return;\n  }\n  char[] dataarray=datavalue.toCharArray();\n  int datalength=dataarray.length;\n  if (isXML11Version) {\n    int i=0;\n    while (i < datalength) {\n      char c=dataarray[i++];\n      if (XML11Char.isXML11Invalid(c)) {\n        if (XMLChar.isHighSurrogate(c) && i < datalength) {\n          char c2=dataarray[i++];\n          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {\n            continue;\n          }\n        }\n        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,\"InvalidCharInCDSect\",new Object[]{Integer.toString(c,16)});\n        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"wf-invalid-character\");\n      }\n else       if (c == ']') {\n        int count=i;\n        if (count < datalength && dataarray[count] == ']') {\n          while (++count < datalength && dataarray[count] == ']') {\n          }\n          if (count < datalength && dataarray[count] == '>') {\n            String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,\"CDEndInContent\",null);\n            reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"wf-invalid-character\");\n          }\n        }\n      }\n    }\n  }\n else {\n    int i=0;\n    while (i < datalength) {\n      char c=dataarray[i++];\n      if (XMLChar.isInvalid(c)) {\n        if (XMLChar.isHighSurrogate(c) && i < datalength) {\n          char c2=dataarray[i++];\n          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {\n            continue;\n          }\n        }\n        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,\"InvalidCharInCDSect\",new Object[]{Integer.toString(c,16)});\n        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"wf-invalid-character\");\n      }\n else       if (c == ']') {\n        int count=i;\n        if (count < datalength && dataarray[count] == ']') {\n          while (++count < datalength && dataarray[count] == ']') {\n          }\n          if (count < datalength && dataarray[count] == '>') {\n            String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,\"CDEndInContent\",null);\n            reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"wf-invalid-character\");\n          }\n        }\n      }\n    }\n  }\n}"}
{"ids": "69224", "raw_code": "public void characters(char ch[],int start,int length){\n  if (titlePending) {\n    title.append(ch,start,length);\n  }\n else   if (descPending) {\n    desc.append(ch,start,length);\n  }\n}"}
{"ids": "38104", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(1);\n  newVector.addElement(new Option(\"\\tIf set, estimator is run in debug mode and\\n\" + \"\\tmay output additional info to the console\",\"D\",0,\"-D\"));\n  return newVector.elements();\n}"}
{"ids": "56345", "raw_code": "private void closeInjectorResource(ShardId shardId,Injector shardInjector,Class<? extends Closeable>... toClose){\n  for (  Class<? extends Closeable> closeable : toClose) {\n    if (closeInjectorOptionalResource(shardId,shardInjector,closeable) == false) {\n      logger.warn(\"[{}] no instance available for [{}], ignoring... \",shardId,closeable.getSimpleName());\n    }\n  }\n}"}
{"ids": "34637", "raw_code": "public final void incrementIdCounterTo(int id){\n  int diff=id - mIdCounter.get();\n  if (diff < 0)   return;\n  mIdCounter.addAndGet(diff);\n  updateSharedPreference();\n}"}
{"ids": "52700", "raw_code": "private static int clearBrandingResourceMapCache(ContentResolver cr,long providerId){\n  StringBuilder where=new StringBuilder();\n  where.append(Imps.BrandingResourceMapCache.PROVIDER_ID);\n  where.append('=');\n  where.append(providerId);\n  return cr.delete(Imps.BrandingResourceMapCache.CONTENT_URI,where.toString(),null);\n}"}
{"ids": "15160", "raw_code": "protected int checkLastLogin(){\n  DateFormat formatter=new SimpleDateFormat(\"yyyy.MM.dd.HH.mm.ss\");\n  Date now=newDate();\n  Date loginTime=null;\n  String lastLoginEnc=null;\n  String lastLogin=null;\n  String savedUserName=null;\n  int retVal=0;\n  if (timeSinceLastLoginAttribute != null) {\n    HttpServletRequest req=getHttpServletRequest();\n    if (req != null) {\n      Cookie cookie=CookieUtils.getCookieFromReq(req,timeSinceLastLoginAttribute);\n      if (cookie != null) {\n        if (debug.messageEnabled()) {\n          debug.message(\"{}.checkLastLogin: Found Cookie : {}\",ADAPTIVE,timeSinceLastLoginAttribute);\n        }\n        lastLoginEnc=CookieUtils.getCookieValue(cookie);\n        lastLogin=AccessController.doPrivileged(new DecodeAction(lastLoginEnc));\n      }\n      if (lastLogin != null) {\n        String[] tokens=lastLogin.split(\"\\\\|\");\n        if (tokens.length == 3) {\n          lastLogin=tokens[1];\n          savedUserName=tokens[2];\n        }\n        if (!userName.equalsIgnoreCase(savedUserName)) {\n          lastLogin=null;\n        }\n        if (lastLogin != null) {\n          try {\n            loginTime=formatter.parse(lastLogin);\n            if ((now.getTime() - loginTime.getTime()) < timeSinceLastLoginValue * 1000 * 60* 60* 24L) {\n              retVal=timeSinceLastLoginScore;\n            }\n          }\n catch (          ParseException pe) {\n            if (debug.messageEnabled()) {\n              debug.message(\"{}.checkLastLogin: lastLogin '{}' can't be parsed\",ADAPTIVE,lastLogin,pe);\n            }\n          }\n        }\n      }\n    }\n    if (timeSinceLastLoginSave) {\n      postAuthNMap.put(\"LOGINNAME\",timeSinceLastLoginAttribute);\n      lastLogin=formatter.format(now);\n      lastLogin=UUID.randomUUID() + \"|\" + lastLogin+ \"|\"+ userName;\n      lastLoginEnc=AccessController.doPrivileged(new EncodeAction(lastLogin));\n      postAuthNMap.put(\"LOGINVALUE\",lastLoginEnc);\n    }\n  }\n  if (!timeSinceLastLoginInvert) {\n    retVal=timeSinceLastLoginScore - retVal;\n  }\n  return retVal;\n}"}
{"ids": "84241", "raw_code": "public byte[] toByteArray(){\n  final int outLen=nonce_.length + (Long.SIZE / Byte.SIZE);\n  final ByteBuffer out=ByteBuffer.allocate(outLen);\n  out.put(nonce_);\n  out.putLong(contentLength_);\n  return out.array();\n}"}
{"ids": "69468", "raw_code": "public void addInterface(CP ifc){\n  addCPItem(ifc);\n  interfaces.addElement(ifc);\n}"}
{"ids": "2793", "raw_code": "public Builder addConstraint(@JobConstraint int constraint){\n  int[] newConstraints=new int[mConstraints == null ? 1 : mConstraints.length + 1];\n  if (mConstraints != null && mConstraints.length != 0) {\n    System.arraycopy(mConstraints,0,newConstraints,0,mConstraints.length);\n  }\n  newConstraints[newConstraints.length - 1]=constraint;\n  mConstraints=newConstraints;\n  return this;\n}"}
{"ids": "14101", "raw_code": "void cleanupParameters(String relayState){\n  if (debug.messageEnabled()) {\n    debug.message(\"SingleLogoutManager.cleanupParameters:\" + \" new relayState=\" + relayState);\n  }\n  relayStateMap.remove(relayState);\n  userSessionMap.remove(relayState);\n  userIDMap.remove(relayState);\n  isSOAPInitiatedMap.remove(relayState);\n  isSOAPInitiatedMap.remove(relayState);\n  isIDPInitiatedMap.remove(relayState);\n  origProtocolMap.remove(relayState);\n  protocolListMap.remove(relayState);\n  realmMap.remove(relayState);\n  idpEntityIDMap.remove(relayState);\n  spEntityIDMap.remove(relayState);\n  sloRequestXMLMap.remove(relayState);\n  sloResponseXMLMap.remove(relayState);\n  currentStatusMap.remove(relayState);\n}"}
{"ids": "61358", "raw_code": "private boolean extraEntity(String outputString,int charToMap){\n  boolean extra=false;\n  if (charToMap < ASCII_MAX) {\nswitch (charToMap) {\ncase '\"':\n      if (!outputString.equals(\"&quot;\"))       extra=true;\n    break;\ncase '&':\n  if (!outputString.equals(\"&amp;\"))   extra=true;\nbreak;\ncase '<':\nif (!outputString.equals(\"&lt;\")) extra=true;\nbreak;\ncase '>':\nif (!outputString.equals(\"&gt;\")) extra=true;\nbreak;\ndefault :\nextra=true;\n}\n}\nreturn extra;\n}"}
{"ids": "36569", "raw_code": "protected void drawPoint(Graphics2D g,PointStyle pointStyle,double x,double y,Color color,Color borderColor){\n  Shape pointShape=pointStyle.createShape(x,y);\n  g.setColor(color);\n  g.fill(pointShape);\n  g.setColor(borderColor);\n  g.draw(pointShape);\n}"}
{"ids": "26864", "raw_code": "int retryTime(){\n  return retryTime.decrementAndGet();\n}"}
{"ids": "4626", "raw_code": "public DatepickerCombo(final Composite parent,final int style){\n  this(parent,style,DateFormat.getDateTimeInstance());\n}"}
{"ids": "84706", "raw_code": "protected void drawMarkHilighted(Graphics2D g2,float x,float y){\n  Rectangle2D bounds=mark.getBounds2D();\n  float w=(float)bounds.getWidth();\n  float h=(float)bounds.getHeight();\n  x=x - (w / 2);\n  y=y - (h / 2);\n  g2.translate(x,y);\n  if (hilightedMarkFillPaint != null) {\n    g2.setPaint(hilightedMarkFillPaint);\n    g2.fill(mark);\n  }\n  g2.setPaint(hilightedMarkPaint);\n  g2.setStroke(hilightedMarkStroke);\n  g2.draw(mark);\n  g2.translate(-x,-y);\n  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);\n  markBounds.add(rect);\n}"}
{"ids": "50368", "raw_code": "public static String trimTrailingWhitespace(String str){\n  if (!hasLength(str)) {\n    return str;\n  }\n  StringBuilder sb=new StringBuilder(str);\n  while (sb.length() > 0 && Character.isWhitespace(sb.charAt(sb.length() - 1))) {\n    sb.deleteCharAt(sb.length() - 1);\n  }\n  return sb.toString();\n}"}
{"ids": "59970", "raw_code": "private static MksTicketResponse checkGetMksTicketResponse(MksTicketResponse mksTicketResponse) throws RpcException {\n  logger.info(\"Checking {}\",mksTicketResponse);\nswitch (mksTicketResponse.getResult()) {\ncase OK:\n    break;\ncase SYSTEM_ERROR:\n  throw new SystemErrorException(mksTicketResponse.getError());\ncase VM_NOT_FOUND:\nthrow new VmNotFoundException(mksTicketResponse.getError());\ncase INVALID_VM_POWER_STATE:\nthrow new InvalidVmPowerStateException(mksTicketResponse.getError());\ndefault :\nthrow new RpcException(String.format(\"Unknown result: %s\",mksTicketResponse.getResult()));\n}\nreturn mksTicketResponse;\n}"}
{"ids": "72695", "raw_code": "@NotNull default B append(double d,int decimalPlaces) throws BufferOverflowException {\n  if (decimalPlaces < 20) {\n    double d2=d * Maths.tens(decimalPlaces);\n    if (d2 <= Long.MAX_VALUE && d2 >= Long.MIN_VALUE) {\n      return appendDecimal(Math.round(d2),decimalPlaces);\n    }\n  }\n  return append(d);\n}"}
{"ids": "2138", "raw_code": "public CompletableFuture<T> completeAsync(Supplier<? extends T> supplier,Executor executor){\n  if (supplier == null || executor == null)   throw new NullPointerException();\n  executor.execute(new AsyncSupply<T>(this,supplier));\n  return this;\n}"}
{"ids": "16805", "raw_code": "private MovieSubtitleChooserModel(){\n  name=BUNDLE.getString(\"chooser.nothingfound\");\n}"}
{"ids": "61510", "raw_code": "protected SuballocatedIntVector findNamespaceContext(int elementNodeIndex){\n  if (null != m_namespaceDeclSetElements) {\n    int wouldBeAt=findInSortedSuballocatedIntVector(m_namespaceDeclSetElements,elementNodeIndex);\n    if (wouldBeAt >= 0)     return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);\n    if (wouldBeAt == -1)     return null;\n    wouldBeAt=-1 - wouldBeAt;\n    int candidate=m_namespaceDeclSetElements.elementAt(--wouldBeAt);\n    int ancestor=_parent(elementNodeIndex);\n    if (wouldBeAt == 0 && candidate < ancestor) {\n      int rootHandle=getDocumentRoot(makeNodeHandle(elementNodeIndex));\n      int rootID=makeNodeIdentity(rootHandle);\n      int uppermostNSCandidateID;\n      if (getNodeType(rootHandle) == DTM.DOCUMENT_NODE) {\n        int ch=_firstch(rootID);\n        uppermostNSCandidateID=(ch != DTM.NULL) ? ch : rootID;\n      }\n else {\n        uppermostNSCandidateID=rootID;\n      }\n      if (candidate == uppermostNSCandidateID) {\n        return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);\n      }\n    }\n    while (wouldBeAt >= 0 && ancestor > 0) {\n      if (candidate == ancestor) {\n        return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);\n      }\n else       if (candidate < ancestor) {\n        do {\n          ancestor=_parent(ancestor);\n        }\n while (candidate < ancestor);\n      }\n else       if (wouldBeAt > 0) {\n        candidate=m_namespaceDeclSetElements.elementAt(--wouldBeAt);\n      }\n else       break;\n    }\n  }\n  return null;\n}"}
{"ids": "26426", "raw_code": "public static java.sql.Timestamp nowTimestamp(){\n  return getTimestamp(System.currentTimeMillis());\n}"}
{"ids": "59786", "raw_code": "public int diff_commonSuffix(String text1,String text2){\n  int text1_length=text1.length();\n  int text2_length=text2.length();\n  int n=Math.min(text1_length,text2_length);\n  for (int i=1; i <= n; i++) {\n    if (text1.charAt(text1_length - i) != text2.charAt(text2_length - i)) {\n      return i - 1;\n    }\n  }\n  return n;\n}"}
{"ids": "52334", "raw_code": "private void translateMatrixAfterRotate(int axis,float trans,float prevImageSize,float imageSize,int prevViewSize,int viewSize,int drawableSize){\n  if (imageSize < viewSize) {\n    m[axis]=(viewSize - (drawableSize * m[Matrix.MSCALE_X])) * 0.5f;\n  }\n else   if (trans > 0) {\n    m[axis]=-((imageSize - viewSize) * 0.5f);\n  }\n else {\n    float percentage=(Math.abs(trans) + (0.5f * prevViewSize)) / prevImageSize;\n    m[axis]=-((percentage * imageSize) - (viewSize * 0.5f));\n  }\n}"}
{"ids": "41295", "raw_code": "private void revokeEncryptPolicy(org.wso2.emm.agent.beans.Operation operation){\n  boolean encryptStatus=(devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && (devicePolicyManager.getStorageEncryptionStatus() == devicePolicyManager.ENCRYPTION_STATUS_ACTIVE || devicePolicyManager.getStorageEncryptionStatus() == devicePolicyManager.ENCRYPTION_STATUS_ACTIVATING));\n  if (operation.isEnabled() && encryptStatus) {\n    devicePolicyManager.setStorageEncryption(deviceAdmin,false);\n  }\n}"}
{"ids": "52979", "raw_code": "public JSONBuffer closeHash(){\n  if (stack.empty() || stack.peek() != Operand.HASH) {\n    throw new JSONException(\"Not in array context when closing.\");\n  }\n  removeSeparator();\n  buffer.append(\"}\");\n  stack.pop();\n  addSeparator();\n  return this;\n}"}
{"ids": "40122", "raw_code": "private static byte[] generateSeed(){\n  try {\n    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();\n    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);\n    seedBufferOut.writeLong(System.currentTimeMillis());\n    seedBufferOut.writeLong(System.nanoTime());\n    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);\n    seedBufferOut.close();\n    return seedBuffer.toByteArray();\n  }\n catch (  IOException e) {\n    throw new SecurityException(\"Failed to generate seed\",e);\n  }\n}"}
{"ids": "14314", "raw_code": "private void init(SnmpMib myMib){\n  if (debug == null) {\n    final Key<Debug> key=Key.get(Debug.class,Names.named(CoreTokenConstants.CTS_MONITOR_DEBUG));\n    debug=InjectorHolder.getInstance(key);\n  }\n  final List<OperationEntry> operationEntries=new ArrayList<OperationEntry>();\n  final List<TokenEntry> tokenEntries=new ArrayList<TokenEntry>();\n  for (  Enum e : crudItems) {\n    final OperationEntry entry=new OperationEntry(myMib);\n    entry.OperationType=e.name();\n    entry.OperationTableIndex=(long)e.ordinal() + 1;\n    operationEntries.add(entry);\n  }\n  for (  Enum e : tokenItems) {\n    final TokenEntry entry=new TokenEntry(myMib);\n    entry.TokenType=e.name();\n    entry.TokenTableIndex=(long)e.ordinal() + 1;\n    tokenEntries.add(entry);\n  }\n  try {\n    for (    OperationEntry ce : operationEntries) {\n      OperationTable.addEntry(ce);\n    }\n    for (    TokenEntry te : tokenEntries) {\n      TokenTable.addEntry(te);\n    }\n    createCRUDOperationsPerTokenTypeTable(myMib,CtsCRUDOperationsPerTokenTypeTable,operationEntries,tokenEntries);\n    createCRUDOperationsTable(myMib,CtsCRUDOperationsTable,operationEntries);\n    createTokenOperationsTable(myMib,CtsTokenOperationsTable,tokenEntries);\n  }\n catch (  SnmpStatusException e) {\n    if (debug.messageEnabled()) {\n      debug.error(\"Unable to set up CTS Monitoring tables. CTS monitoring not available.\",e);\n    }\n  }\n}"}
{"ids": "38701", "raw_code": "@Override public void disconnectionNotification(String eventName,Object source){\n  m_listenees.remove(source);\n  if (m_listenees.size() == 0) {\n    m_listeneeTypes.clear();\n  }\n}"}
{"ids": "50216", "raw_code": "@Override public ToDoubleFunction<Stream<Tuple2<F,Double>>> dist(Stream<Tuple2<F,Double>> features1){\n  Object2DoubleMap<F> auxMap=new Object2DoubleOpenHashMap<>();\n  auxMap.defaultReturnValue(0.0);\n  DoubleAdder norm1=new DoubleAdder();\n  features1.forEach(null);\n  if (norm1.doubleValue() == 0) {\n    return null;\n  }\n  return null;\n}"}
{"ids": "78983", "raw_code": "public LoadMetadataDetails[] readLoadMetadata(String tableFolderPath){\n  Gson gsonObjectToRead=new Gson();\n  DataInputStream dataInputStream=null;\n  BufferedReader buffReader=null;\n  InputStreamReader inStream=null;\n  String metadataFileName=tableFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.LOADMETADATA_FILENAME;\n  LoadMetadataDetails[] listOfLoadFolderDetailsArray;\n  AtomicFileOperations fileOperation=new AtomicFileOperationsImpl(metadataFileName,FileFactory.getFileType(metadataFileName));\n  try {\n    if (!FileFactory.isFileExist(metadataFileName,FileFactory.getFileType(metadataFileName))) {\n      return new LoadMetadataDetails[0];\n    }\n    dataInputStream=fileOperation.openForRead();\n    inStream=new InputStreamReader(dataInputStream,Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));\n    buffReader=new BufferedReader(inStream);\n    listOfLoadFolderDetailsArray=gsonObjectToRead.fromJson(buffReader,LoadMetadataDetails[].class);\n  }\n catch (  IOException e) {\n    return new LoadMetadataDetails[0];\n  }\n finally {\n    closeStreams(buffReader,inStream,dataInputStream);\n  }\n  return listOfLoadFolderDetailsArray;\n}"}
{"ids": "10116", "raw_code": "public String toInnerHtml(Node node,Appendable appendable){\n  NodeVisitor renderer=createRenderer(appendable);\n  node.visitChildren(renderer);\n  return appendable.toString();\n}"}
{"ids": "22459", "raw_code": "private void updateStorageViewInfo(VPlexStorageViewInfo storageViewInfo){\n  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();\n  discoveryMgr.updateStorageViewInfo(storageViewInfo);\n}"}
{"ids": "12308", "raw_code": "static List<String> decodeAll(Collection<String> eventKeys){\n  List<String> eventIds=Lists.newArrayList();\n  for (  String eventKey : eventKeys) {\n    decodeTo(eventKey,eventIds);\n  }\n  return eventIds;\n}"}
{"ids": "5879", "raw_code": "public Object[] toArray(){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    Object[] a=new Object[count];\n    int k=0;\n    for (Node<E> p=first; p != null; p=p.next)     a[k++]=p.item;\n    return a;\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "61584", "raw_code": "public byte[] toByteArray(String ascii){\n  if (ascii == null) {\n    return EMPTY_BYTE_ARRAY;\n  }\n  return fromAscii(ascii.toCharArray());\n}"}
{"ids": "82374", "raw_code": "public static boolean[] copyOfRange(boolean[] original,int start,int end){\n  if (start <= end) {\n    if (original.length >= start && 0 <= start) {\n      int length=end - start;\n      int copyLength=Math.min(length,original.length - start);\n      boolean[] copy=new boolean[length];\n      System.arraycopy(original,start,copy,0,copyLength);\n      return copy;\n    }\n    throw new ArrayIndexOutOfBoundsException();\n  }\n  throw new IllegalArgumentException();\n}"}
{"ids": "64007", "raw_code": "private void onColumnSync(){\n  int syncPosition=Math.min(mSyncPosition,getCount() - 1);\n  SparseArray<Double> positionHeightRatios=new SparseArray<Double>(syncPosition);\n  for (int pos=0; pos < syncPosition; pos++) {\n    final GridItemRecord rec=mPositionData.get(pos);\n    if (rec == null)     break;\n    Log.d(TAG,\"onColumnSync:\" + pos + \" ratio:\"+ rec.heightRatio);\n    positionHeightRatios.append(pos,rec.heightRatio);\n  }\n  mPositionData.clear();\n  if (DBG)   Log.d(TAG,\"onColumnSync column width:\" + mColumnWidth);\n  for (int pos=0; pos < syncPosition; pos++) {\n    final GridItemRecord rec=getOrCreateRecord(pos);\n    final double heightRatio=positionHeightRatios.get(pos);\n    final int height=(int)(mColumnWidth * heightRatio);\n    rec.heightRatio=heightRatio;\n    int top;\n    int bottom;\n    if (isHeaderOrFooter(pos)) {\n      top=getLowestPositionedBottom();\n      bottom=top + height;\n      for (int i=0; i < mColumnCount; i++) {\n        mColumnTops[i]=top;\n        mColumnBottoms[i]=bottom;\n      }\n    }\n else {\n      final int column=getHighestPositionedBottomColumn();\n      top=mColumnBottoms[column];\n      bottom=top + height + getChildTopMargin(pos)+ getChildBottomMargin();\n      mColumnTops[column]=top;\n      mColumnBottoms[column]=bottom;\n      rec.column=column;\n    }\n    if (DBG)     Log.d(TAG,\"onColumnSync position:\" + pos + \" top:\"+ top+ \" bottom:\"+ bottom+ \" height:\"+ height+ \" heightRatio:\"+ heightRatio);\n  }\n  final int syncColumn=getHighestPositionedBottomColumn();\n  setPositionColumn(syncPosition,syncColumn);\n  int syncToBottom=mColumnBottoms[syncColumn];\n  int offset=-syncToBottom + mSpecificTop;\n  offsetAllColumnsTopAndBottom(offset);\n  mDistanceToTop=-syncToBottom;\n  System.arraycopy(mColumnBottoms,0,mColumnTops,0,mColumnCount);\n}"}
{"ids": "80260", "raw_code": "private static Map<Direction,Sprite[]> splitTiles(SpriteStore st,Sprite orig){\n  int twidth=NUM_ATTACK_FRAMES * TILE_SIZE;\n  int theight=4 * TILE_SIZE;\n  Map<Direction,Sprite[]> map=new EnumMap<Direction,Sprite[]>(Direction.class);\n  int y=0;\n  map.put(Direction.UP,st.getTiles(orig,0,y,NUM_ATTACK_FRAMES,twidth,theight));\n  y+=theight;\n  map.put(Direction.RIGHT,st.getTiles(orig,0,y,NUM_ATTACK_FRAMES,twidth,theight));\n  y+=theight;\n  map.put(Direction.DOWN,st.getTiles(orig,0,y,NUM_ATTACK_FRAMES,twidth,theight));\n  y+=theight;\n  map.put(Direction.LEFT,st.getTiles(orig,0,y,NUM_ATTACK_FRAMES,twidth,theight));\n  return map;\n}"}
{"ids": "19779", "raw_code": "void incrementSchema(String schemaName){\n  if (schemaName != null) {\n    Integer count=dbMap.get(schemaName);\n    if (count == null)     dbMap.put(schemaName,1);\n else     dbMap.put(schemaName,count.intValue() + 1);\n  }\n  lastDb=schemaName;\n}"}
{"ids": "21103", "raw_code": "private String buildEventData() throws JAXBException {\n  if (_eventParameters != null) {\n    try {\n      JAXBContext jaxbContext=JAXBContext.newInstance(EventParameters.class);\n      Marshaller marshaller=jaxbContext.createMarshaller();\n      marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);\n      Writer outWriter=new StringWriter();\n      StreamResult result=new StreamResult(outWriter);\n      marshaller.marshal(_eventParameters,result);\n      return outWriter.toString();\n    }\n catch (    JAXBException e) {\n      _log.error(\"Failed to generate user message file. \" + e.getMessage());\n      throw e;\n    }\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "55749", "raw_code": "public boolean isProjected(){\n  return projected;\n}"}
{"ids": "13209", "raw_code": "private boolean normalizeAttrValue(XMLAttributes attributes,int index){\n  boolean leadingSpace=true;\n  boolean spaceStart=false;\n  boolean readingNonSpace=false;\n  int count=0;\n  int eaten=0;\n  String attrValue=attributes.getValue(index);\n  char[] attValue=new char[attrValue.length()];\n  fBuffer.setLength(0);\n  attrValue.getChars(0,attrValue.length(),attValue,0);\n  for (int i=0; i < attValue.length; i++) {\n    if (attValue[i] == ' ') {\n      if (readingNonSpace) {\n        spaceStart=true;\n        readingNonSpace=false;\n      }\n      if (spaceStart && !leadingSpace) {\n        spaceStart=false;\n        fBuffer.append(attValue[i]);\n        count++;\n      }\n else {\n        if (leadingSpace || !spaceStart) {\n          eaten++;\n        }\n      }\n    }\n else {\n      readingNonSpace=true;\n      spaceStart=false;\n      leadingSpace=false;\n      fBuffer.append(attValue[i]);\n      count++;\n    }\n  }\n  if (count > 0 && fBuffer.charAt(count - 1) == ' ') {\n    fBuffer.setLength(count - 1);\n  }\n  String newValue=fBuffer.toString();\n  attributes.setValue(index,newValue);\n  return !attrValue.equals(newValue);\n}"}
{"ids": "82759", "raw_code": "private Shape decodeMarkInterior(int width,int height){\n  double left=width / 2.0 - 4;\n  double top=height / 2.0 - 4;\n  path.reset();\n  path.moveTo(left + 1,top + 1);\n  path.lineTo(left + 8,top + 1);\n  path.lineTo(left + 4,top + 6);\n  path.closePath();\n  return path;\n}"}
{"ids": "36896", "raw_code": "public MonotoneSolver(final ILatticeGraph<GraphNode> graph,final Lattice lattice,final IStateVector<GraphNode,LatticeElement> startVector,final ITransformationProvider<GraphNode,LatticeElement> transformationProvider,final IGraphWalker<GraphNode,ObjectType> walker){\n  if (graph == null) {\n    throw new IllegalArgumentException(\"Error: Graph argument can not be null\");\n  }\n  if (lattice == null) {\n    throw new IllegalArgumentException(\"Error: Lattice argument can not be null\");\n  }\n  if (startVector == null) {\n    throw new IllegalArgumentException(\"Error: Start vector argument can not be null\");\n  }\n  if (transformationProvider == null) {\n    throw new IllegalArgumentException(\"Error: Transformation list argument can not be null\");\n  }\n  final List<GraphNode> nodes=graph.getNodes();\n  if (nodes.size() != startVector.size()) {\n    throw new IllegalArgumentException(String.format(\"Error: Invalid start vector (%d states for %d nodes)\",startVector.size(),nodes.size()));\n  }\n  for (  final GraphNode node : nodes) {\n    if (!startVector.hasState(node)) {\n      throw new IllegalArgumentException(\"Error: Node \" + node + \" does not have a state in the initial state vector\");\n    }\n  }\n  this.graph=graph;\n  this.lattice=lattice;\n  this.state=startVector;\n  this.transformationList=transformationProvider;\n  this.walker=walker;\n}"}
{"ids": "21533", "raw_code": "private Stat preparePortStatInfo(String nativeId,URI resourceId,long iops,long timeSample){\n  Stat ipPortStat=new Stat();\n  ipPortStat.setServiceType(Constants._File);\n  ipPortStat.setTimeCollected(timeSample);\n  ipPortStat.setResourceId(resourceId);\n  ipPortStat.setNativeGuid(nativeId);\n  ipPortStat.setTotalIOs(iops);\n  return ipPortStat;\n}"}
{"ids": "43952", "raw_code": "public int compareTo(AppVersion other){\n  int result=major - other.major;\n  if (result == 0) {\n    result=minor - other.minor;\n  }\n  if (result == 0) {\n    result=patch - other.patch;\n  }\n  if (result == 0 && (milestone > -1 || other.milestone > -1)) {\n    if (milestone > -1) {\n      if (other.milestone == -1) {\n        result=-1;\n      }\n else {\n        result=milestone - other.milestone;\n      }\n    }\n else {\n      if (other.milestone > -1) {\n        result=1;\n      }\n    }\n  }\n  if (result == 0 && !ObjectUtil.nullEquals(modifier,other.modifier)) {\n    if (modifier == null) {\n      result=1;\n    }\n else     if (other.modifier == null) {\n      result=-1;\n    }\n else {\n      result=modifier.compareToIgnoreCase(other.modifier);\n    }\n  }\n  return result;\n}"}
{"ids": "21323", "raw_code": "public StreamConsumer(InputStream stream,String charset){\n  in=new BufferedInputStream(stream);\n  this.charset=charset;\n  thread.start();\n}"}
{"ids": "46316", "raw_code": "public MediaSize(int x,int y,int units){\n  super(x,y,units);\n  if (x > y) {\n    throw new IllegalArgumentException(\"X dimension > Y dimension\");\n  }\n  sizeVector.add(this);\n}"}
{"ids": "10624", "raw_code": "private Peer constructPeerPojo(final PeerData peerData) throws PeerException {\n  Preconditions.checkNotNull(peerData,\"Peer info could not be null.\");\n  try {\n    PeerInfo peerInfo=fromJson(peerData.getInfo(),PeerInfo.class);\n    if (localPeerId.equals(peerData.getId())) {\n      localPeer.setPeerInfo(peerInfo);\n      return localPeer;\n    }\n    RemotePeerImpl remotePeer=new RemotePeerImpl(localPeerId,securityManager,peerInfo,messenger,commandResponseListener,messageResponseListener,provider,this);\n    RelationInfoMeta relationInfoMeta=new RelationInfoMeta();\n    Map<String,String> traits=relationInfoMeta.getRelationTraits();\n    traits.put(\"receiveHeartbeats\",\"allow\");\n    traits.put(\"sendHeartbeats\",\"allow\");\n    traits.put(\"hostTemplates\",\"allow\");\n    User peerOwner=identityManager.getUserByKeyId(identityManager.getPeerOwnerId());\n    RelationMeta relationMeta=new RelationMeta(peerOwner,localPeer,remotePeer,localPeer.getKeyId());\n    Relation relation=relationManager.buildRelation(relationInfoMeta,relationMeta);\n    relation.setRelationStatus(RelationStatus.VERIFIED);\n    relationManager.saveRelation(relation);\n    return remotePeer;\n  }\n catch (  Exception e) {\n    throw new PeerException(\"Could not create peer instance.\",e);\n  }\n}"}
{"ids": "69690", "raw_code": "public void loadWorkspaceContents(String xml) throws BlocklyParserException {\n  loadWorkspaceContents(new ByteArrayInputStream(xml.getBytes()));\n}"}
{"ids": "47081", "raw_code": "private boolean compareAndDecrementWorkerCount(int expect){\n  return ctl.compareAndSet(expect,expect - 1);\n}"}
{"ids": "29768", "raw_code": "public boolean load(String fileLocation,int type){\n  if (mHasLoaded) {\n    return false;\n  }\n  String shaderCode;\n  try {\n    shaderCode=ShaderUtils.getStringFromFileInAssets(mContext,fileLocation,true);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    mIsCompiled=false;\n    return false;\n  }\n  mHasLoaded=true;\n  mShaderId=GLES20.glCreateShader(type);\n  if (mShaderId == 0) {\n    String msg=(type == GLES20.GL_VERTEX_SHADER ? \"Vertex\" : \"Fragment\");\n    Log.e(TAG,\"Error creating shader of type \" + msg);\n    return false;\n  }\n  GLES20.glShaderSource(mShaderId,shaderCode);\n  GLES20.glCompileShader(mShaderId);\n  int[] compileStatus=new int[1];\n  GLES20.glGetShaderiv(mShaderId,GLES20.GL_COMPILE_STATUS,compileStatus,0);\n  mIsCompiled=(compileStatus[0] == GLES20.GL_TRUE);\n  if (!mIsCompiled) {\n    String compileError=GLES20.glGetShaderInfoLog(mShaderId);\n    Log.e(TAG,compileError);\n    GLES20.glDeleteShader(mShaderId);\n  }\n  return mIsCompiled && mHasLoaded;\n}"}
{"ids": "85166", "raw_code": "public void addChild(PdfLayer childLayer){\n  if (childLayer.parent != null)   throw new IllegalArgumentException(\"Illegal argument: childLayer\");\n  childLayer.parent=this;\n  if (children == null)   children=new ArrayList<>();\n  children.add(childLayer);\n}"}
{"ids": "11714", "raw_code": "protected void moveRandomly(OMPoint point,double factor,Projection proj){\n  double hor=Math.random() - .5;\n  double vert=Math.random() - .5;\n  Point2D mapPoint=proj.forward(point.getLat(),point.getLon());\n  mapPoint.setLocation(mapPoint.getX() + (hor * factor),mapPoint.getY() + (vert * factor));\n  Point2D llp=proj.inverse(mapPoint);\n  point.setLat(llp.getY());\n  point.setLon(llp.getX());\n}"}
{"ids": "25113", "raw_code": "private void initializeContext() throws IOException {\n  String workingDir=System.getProperty(\"user.dir\");\n  File dataset=FileUtils.getFile(workingDir + \"/src/main/resources/dataset/emptyFlatXmlDataSet.xml\");\n  File log4jFile=FileUtils.getFile(workingDir + \"/src/main/resources/log4j/log4j.properties\");\n  File datasetFolder=new File(destinationFolder + \"/src/test/resources/dataSets\");\n  File log4jFolder=new File(destinationFolder + \"/src/test/resources\");\n  dataset.mkdirs();\n  log4jFile.mkdirs();\n  FileUtils.copyFileToDirectory(dataset,datasetFolder);\n  FileUtils.copyFileToDirectory(log4jFile,log4jFolder);\n}"}
{"ids": "58298", "raw_code": "protected boolean isTokenChar(char ch){\n  if (Character.isLetterOrDigit(ch))   return true;\n  if (Character.isISOControl(ch))   return false;\n  if (isHttpSeparator(ch))   return false;\n  return true;\n}"}
{"ids": "54827", "raw_code": "public static int parseInt(FXGNode node,String value,String name){\n  try {\n    return Integer.parseInt(value);\n  }\n catch (  NumberFormatException e) {\n    throw new FXGException(node.getStartLine(),node.getStartColumn(),\"InvalidIntegerValue\",name,value);\n  }\n}"}
{"ids": "74976", "raw_code": "public static double invSqrtQuick(final double value){\n  if (USE_JDK_MATH) {\n    return 1 / Math.sqrt(value);\n  }\n  return Double.longBitsToDouble(0x5FE6EB50C7B537A9L - (Double.doubleToRawLongBits(value) >> 1));\n}"}
{"ids": "15775", "raw_code": "public void close() throws IOException {\n  articleIdxWriter.close();\n  chronoIdxWriter.close();\n  revisionIdxWriter.close();\n}"}
{"ids": "66678", "raw_code": "private final byte[] zeroExtend(byte[] dataToPad){\n  assert null != dataToPad;\n  final int targetLength=4;\n  if (targetLength <= dataToPad.length)   return dataToPad;\n  byte padded[]=new byte[targetLength];\n  for (int i=0; i < dataToPad.length; i++)   padded[i]=dataToPad[i];\n  for (int i=dataToPad.length; i < padded.length; i++)   padded[i]=(byte)0;\n  return padded;\n}"}
{"ids": "23243", "raw_code": "private static boolean isCertificateEntry(String alias) throws KeyStoreException {\n  return sKeyStore.isCertificateEntry(alias);\n}"}
{"ids": "62582", "raw_code": "public static Window windowForWordInPosition(int windowSize,int wordPos,List<String> sentence){\n  List<String> window=new ArrayList<>();\n  List<String> onlyTokens=new ArrayList<>();\n  int contextSize=(int)Math.floor((windowSize - 1) / 2);\n  for (int i=wordPos - contextSize; i <= wordPos + contextSize; i++) {\n    if (i < 0)     window.add(\"<s>\");\n else     if (i >= sentence.size())     window.add(\"</s>\");\n else {\n      onlyTokens.add(sentence.get(i));\n      window.add(sentence.get(i));\n    }\n  }\n  String wholeSentence=StringUtils.join(sentence);\n  String window2=StringUtils.join(onlyTokens);\n  int begin=wholeSentence.indexOf(window2);\n  int end=begin + window2.length();\n  return new Window(window,begin,end);\n}"}
{"ids": "85474", "raw_code": "private void fillIn(ClassSymbol c){\n  if (completionFailureName == c.fullname) {\n    throw new CompletionFailure(c,\"user-selected completion failure by class name\");\n  }\n  currentOwner=c;\n  warnedAttrs.clear();\n  JavaFileObject classfile=c.classfile;\n  if (classfile != null) {\n    JavaFileObject previousClassFile=currentClassFile;\n    try {\n      if (filling) {\n        Assert.error(\"Filling \" + classfile.toUri() + \" during \"+ previousClassFile);\n      }\n      currentClassFile=classfile;\n      if (verbose) {\n        log.printVerbose(\"loading\",currentClassFile.toString());\n      }\n      if (classfile.getKind() == JavaFileObject.Kind.CLASS) {\n        filling=true;\n        try {\n          bp=0;\n          buf=readInputStream(buf,classfile.openInputStream());\n          readClassFile(c);\n          if (!missingTypeVariables.isEmpty() && !foundTypeVariables.isEmpty()) {\n            List<Type> missing=missingTypeVariables;\n            List<Type> found=foundTypeVariables;\n            missingTypeVariables=List.nil();\n            foundTypeVariables=List.nil();\n            filling=false;\n            ClassType ct=(ClassType)currentOwner.type;\n            ct.supertype_field=types.subst(ct.supertype_field,missing,found);\n            ct.interfaces_field=types.subst(ct.interfaces_field,missing,found);\n          }\n else           if (missingTypeVariables.isEmpty() != foundTypeVariables.isEmpty()) {\n            Name name=missingTypeVariables.head.tsym.name;\n            throw badClassFile(\"undecl.type.var\",name);\n          }\n        }\n  finally {\n          missingTypeVariables=List.nil();\n          foundTypeVariables=List.nil();\n          filling=false;\n        }\n      }\n else {\n        if (sourceCompleter != null) {\n          sourceCompleter.complete(c);\n        }\n else {\n          throw new IllegalStateException(\"Source completer required to read \" + classfile.toUri());\n        }\n      }\n      return;\n    }\n catch (    IOException ex) {\n      throw badClassFile(\"unable.to.access.file\",ex.getMessage());\n    }\n finally {\n      currentClassFile=previousClassFile;\n    }\n  }\n else {\n    JCDiagnostic diag=diagFactory.fragment(\"class.file.not.found\",c.flatname);\n    throw newCompletionFailure(c,diag);\n  }\n}"}
{"ids": "36041", "raw_code": "public void enable(){\n  List<Entry> entries=removeIntersectedEntries(tree.getSelectedEntries());\n  boolean enable=true;\n  for (  Entry entry : entries) {\n    if (entry == null) {\n      enable=false;\n      break;\n    }\n    if (!requiredSelectionType.isInstance(entry)) {\n      enable=false;\n      break;\n    }\n    if (needsWriteAccess && entry.isReadOnly()) {\n      enable=false;\n      break;\n    }\n  }\n  if (entries.isEmpty()) {\n    enable=false;\n  }\n  setEnabled(enable);\n}"}
{"ids": "8108", "raw_code": "protected void mark() throws CompilationFailedException {\n  applyToSourceUnits(mark);\n}"}
{"ids": "20795", "raw_code": "private boolean labelToKeepRec(Node v,Set<Integer> ids,NodeSet keep){\n  boolean hasBelow=false;\n  int id=(Integer)v.getInfo();\n  if (ids.size() == 0 || ids.contains(id))   hasBelow=true;\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    Node w=e.getTarget();\n    if (labelToKeepRec(w,ids,keep))     hasBelow=true;\n  }\n  if (hasBelow)   keep.add(v);\n  return hasBelow;\n}"}
{"ids": "14878", "raw_code": "public void putExternalProperty(SSOToken clientToken,String key,String value) throws SessionException {\n  try {\n    sessionUtilsWrapper.checkPermissionToSetProperty(clientToken,key,value);\n  }\n catch (  SessionException se) {\n    fireSessionEvent(SessionEventType.PROTECTED_PROPERTY);\n    sessionLogging.logEvent(toSessionInfo(),SessionEventType.PROTECTED_PROPERTY);\n    throw se;\n  }\n  internalPutProperty(key,value);\n  debug.message(\"Updated protected property after validating client identity and permissions\");\n}"}
{"ids": "28940", "raw_code": "void addEdge(MethodParameter in,MethodParameter out){\n  Set<MethodParameter> outs=graph.get(in);\n  if (outs == null) {\n    outs=new HashSet<>();\n    graph.put(in,outs);\n  }\n  outs.add(out);\n}"}
{"ids": "5566", "raw_code": "public static int[] randomNumber(int n){\n  int[] num=new int[n];\n  for (int i=0; i < num.length; i++) {\n    num[i]=(int)(rGen.nextDouble() * 10);\n  }\n  return num;\n}"}
{"ids": "41517", "raw_code": "public boolean isDeviceTV(Context context){\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    UiModeManager uiManager=(UiModeManager)context.getSystemService(Context.UI_MODE_SERVICE);\n    return uiManager != null && uiManager.getCurrentModeType() == Configuration.UI_MODE_TYPE_TELEVISION;\n  }\n  return false;\n}"}
{"ids": "67262", "raw_code": "protected void rcptToAuthors(final RecipientType rt){\n  for (  final Account.Id id : authors) {\n    add(rt,id);\n  }\n}"}
{"ids": "73100", "raw_code": "public Object createShapeData(Shape shape){\n  return null;\n}"}
{"ids": "21937", "raw_code": "private ProtectionSet createProtectionSet(RecoverPointVolumeIngestionContext volumeContext){\n  UnManagedProtectionSet umpset=volumeContext.getUnManagedProtectionSet();\n  ProtectionSet pset=VolumeIngestionUtil.findOrCreateProtectionSet(volumeContext,volumeContext.getUnmanagedVolume(),umpset,_dbClient);\n  volumeContext.setManagedProtectionSet(pset);\n  return pset;\n}"}
{"ids": "63386", "raw_code": "public synchronized void dispose(){\n  if (isDisposed) {\n    return;\n  }\n  isDisposed=true;\n  ArrayList<PooledConnection> list=recycledConnections;\n  for (int i=0, size=list.size(); i < size; i++) {\n    closeConnection(list.get(i));\n  }\n}"}
{"ids": "54349", "raw_code": "public static String appendParameter(CtClass type,String descriptor){\n  int i=descriptor.indexOf(')');\n  if (i < 0)   return descriptor;\n else {\n    StringBuffer newdesc=new StringBuffer();\n    newdesc.append(descriptor.substring(0,i));\n    toDescriptor(newdesc,type);\n    newdesc.append(descriptor.substring(i));\n    return newdesc.toString();\n  }\n}"}
{"ids": "77117", "raw_code": "public void writeTo(byte[] bytes,int offset) throws IOException {\n  flush();\n  final long end=file.length;\n  long pos=0;\n  int buffer=0;\n  int bytesUpto=offset;\n  while (pos < end) {\n    int length=BUFFER_SIZE;\n    long nextPos=pos + length;\n    if (nextPos > end) {\n      length=(int)(end - pos);\n    }\n    System.arraycopy(file.getBuffer(buffer++),0,bytes,bytesUpto,length);\n    bytesUpto+=length;\n    pos=nextPos;\n  }\n}"}
{"ids": "70155", "raw_code": "protected int calcnCluster(){\n  return 1;\n}"}
{"ids": "29638", "raw_code": "public static void validateServiceName(String serviceCode,String serviceName){\n  if (!serviceName.startsWith(serviceCode)) {\n    throw new CodedException(X_INCONSISTENT_HEADERS,\"Malformed SOAP message: \" + \"service code does not match in header and body\");\n  }\n}"}
{"ids": "74782", "raw_code": "protected static void initCMYKColorspace(){\n  if (ICCProfileForRGB == null) {\n    rgbModel=new ComponentColorModel(rgbCS,new int[]{8,8,8},false,false,ColorModel.OPAQUE,DataBuffer.TYPE_BYTE);\n  }\n else {\n    final int compCount=rgbCS.getNumComponents();\n    final int[] values=new int[compCount];\n    for (int i=0; i < compCount; i++) {\n      values[i]=8;\n    }\n    rgbModel=new ComponentColorModel(rgbCS,values,false,false,ColorModel.OPAQUE,DataBuffer.TYPE_BYTE);\n  }\n  final FastColorSpaceCMYK cmykCS=new FastColorSpaceCMYK();\n  CSToRGB=new ColorConvertOp(cmykCS,rgbCS,ColorSpaces.hints);\n}"}
{"ids": "44850", "raw_code": "private void addNotificationCategorySeparator(JPanel panel){\n  JSeparator jsep=new JSeparator(SwingConstants.HORIZONTAL);\n  jsep.setMaximumSize(new Dimension(Short.MAX_VALUE,7));\n  panel.add(jsep);\n}"}
{"ids": "36417", "raw_code": "public void clearDraggedOperators(){\n  this.draggedOperators=Collections.unmodifiableList(Collections.<Operator>emptyList());\n}"}
{"ids": "19473", "raw_code": "public FakeClock resetTime(){\n  fakeNowMs.set(baseTimeMs);\n  return this;\n}"}
{"ids": "71883", "raw_code": "public GSERParser(CharSequence value){\n  Reject.checkNotNull(value);\n  this.gserValue=value.toString();\n  this.pos=0;\n  this.length=value.length();\n}"}
{"ids": "28398", "raw_code": "public Slice(double start,double end,boolean visible){\n  this.start=start;\n  this.end=end;\n  this.visible=visible;\n}"}
{"ids": "67398", "raw_code": "public static void injectToTarget(Object target,Bundle data){\n  if (target == null || data == null)   return;\n  ParcelInjector injector;\n  try {\n    injector=getInjectorByClass(target.getClass());\n    injector.injectDataToTarget(target,data);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(String.format(\"inject failed : %s\",e.getMessage()),e);\n  }\n}"}
{"ids": "21729", "raw_code": "public static boolean areBackendInitiators(List<Initiator> initiators){\n  boolean backend=true;\n  for (  Initiator initiator : initiators) {\n    if (!NullColumnValueGetter.isNullURI(initiator.getHost()) && URIUtil.isType(initiator.getHost(),Host.class)) {\n      backend=false;\n      break;\n    }\n  }\n  return backend;\n}"}
{"ids": "31358", "raw_code": "public boolean containsValue(Object value){\n  return map.containsValue(value);\n}"}
{"ids": "81562", "raw_code": "public boolean hasSkins(){\n  return System.getProperty(\"skin\") != null || System.getProperty(\"dskin\") != null;\n}"}
{"ids": "3198", "raw_code": "public void makeImmutable(){\n  if (!isImmutable) {\n    overflowEntries=overflowEntries.isEmpty() ? Collections.<K,V>emptyMap() : Collections.unmodifiableMap(overflowEntries);\n    isImmutable=true;\n  }\n}"}
{"ids": "35250", "raw_code": "protected void parseNames(){\n  while (reader.hasNextCharacter()) {\n    final char character=next();\n    if (Strings.isWhitespace(character)) {\n      addName();\n      continue;\n    }\n else     if (character == blockOpening) {\n      addName();\n      break;\n    }\n else {\n      builder.append(character);\n    }\n  }\n  if (GdxArrays.isEmpty(tags)) {\n    throwException(\"No tag names chosen.\");\n  }\n}"}
{"ids": "44594", "raw_code": "protected void writeZip64CentralDirectory() throws IOException {\n  if (zip64Mode == Zip64Mode.Never) {\n    return;\n  }\n  if (!hasUsedZip64 && (cdOffset >= ZIP64_MAGIC || cdLength >= ZIP64_MAGIC || entries.size() >= ZIP64_MAGIC_SHORT)) {\n    hasUsedZip64=true;\n  }\n  if (!hasUsedZip64) {\n    return;\n  }\n  long offset=written;\n  writeOut(ZIP64_EOCD_SIG);\n  writeOut(ZipEightByteInteger.getBytes(SHORT + SHORT + WORD+ WORD+ DWORD+ DWORD+ DWORD+ DWORD));\n  writeOut(ZipShort.getBytes(ZIP64_MIN_VERSION));\n  writeOut(ZipShort.getBytes(ZIP64_MIN_VERSION));\n  writeOut(LZERO);\n  writeOut(LZERO);\n  byte[] num=ZipEightByteInteger.getBytes(entries.size());\n  writeOut(num);\n  writeOut(num);\n  writeOut(ZipEightByteInteger.getBytes(cdLength));\n  writeOut(ZipEightByteInteger.getBytes(cdOffset));\n  writeOut(ZIP64_EOCD_LOC_SIG);\n  writeOut(LZERO);\n  writeOut(ZipEightByteInteger.getBytes(offset));\n  writeOut(ONE);\n}"}
{"ids": "574", "raw_code": "public boolean isCacheValid(int row){\n  return m_valid.get(row);\n}"}
{"ids": "51303", "raw_code": "public void finish() throws IOException {\n  checkClosed();\n  write();\n}"}
{"ids": "82415", "raw_code": "public final void readFully(byte[] b,int off,int len) throws java.io.IOException {\n  if (len < 0) {\n    throw new IndexOutOfBoundsException();\n  }\n  int n=0;\n  while (n < len) {\n    int count=read(b,off + n,len - n);\n    if (count < 0) {\n      throw new EOFException();\n    }\n    n+=count;\n  }\n}"}
{"ids": "11869", "raw_code": "public SVGRasterizer(InputStream istream){\n  this.input=new TranscoderInput(istream);\n}"}
{"ids": "28248", "raw_code": "private static Future<?> directExecute(Runnable runnable,int delay){\n  Future<?> future=null;\n  if (delay > 0) {\n    if (!(executor instanceof ScheduledExecutorService)) {\n      throw new IllegalArgumentException(\"The executor set does not support scheduling\");\n    }\n    ScheduledExecutorService scheduledExecutorService=(ScheduledExecutorService)executor;\n    future=scheduledExecutorService.schedule(runnable,delay,TimeUnit.MILLISECONDS);\n  }\n else {\n    if (executor instanceof ExecutorService) {\n      ExecutorService executorService=(ExecutorService)executor;\n      future=executorService.submit(runnable);\n    }\n else {\n      executor.execute(runnable);\n    }\n  }\n  return future;\n}"}
{"ids": "78059", "raw_code": "@Override public void onPatchVersionCheckFail(File patchFile,SharePatchInfo oldPatchInfo,String patchFileVersion,boolean isUpgradePatch){\n  TinkerLog.i(TAG,\"patchReporter: patch version exist. path:%s, version:%s, isUpgrade:%b\",patchFile.getAbsolutePath(),patchFileVersion,isUpgradePatch);\n}"}
{"ids": "16003", "raw_code": "public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {\n  if (!(params instanceof ParametersWithIV)) {\n    throw new IllegalArgumentException(\"Grain v1 Init parameters must include an IV\");\n  }\n  ParametersWithIV ivParams=(ParametersWithIV)params;\n  byte[] iv=ivParams.getIV();\n  if (iv == null || iv.length != 8) {\n    throw new IllegalArgumentException(\"Grain v1 requires exactly 8 bytes of IV\");\n  }\n  if (!(ivParams.getParameters() instanceof KeyParameter)) {\n    throw new IllegalArgumentException(\"Grain v1 Init parameters must include a key\");\n  }\n  KeyParameter key=(KeyParameter)ivParams.getParameters();\n  workingIV=new byte[key.getKey().length];\n  workingKey=new byte[key.getKey().length];\n  lfsr=new int[STATE_SIZE];\n  nfsr=new int[STATE_SIZE];\n  out=new byte[2];\n  System.arraycopy(iv,0,workingIV,0,iv.length);\n  System.arraycopy(key.getKey(),0,workingKey,0,key.getKey().length);\n  reset();\n}"}
{"ids": "79719", "raw_code": "public ExtensionForcedUser(){\n  super();\n  initialize();\n}"}
{"ids": "9532", "raw_code": "private String replacePlaceholders(String query,Map<String,String> replacements){\n  String resultQuery=query;\n  for (  Map.Entry<String,String> entry : replacements.entrySet()) {\n    resultQuery=resultQuery.replace(entry.getKey(),entry.getValue());\n  }\n  return resultQuery;\n}"}
{"ids": "24681", "raw_code": "protected int readFully(InputStream in,byte buffer[]) throws java.io.IOException {\n  for (int i=0; i < buffer.length; i++) {\n    int q=in.read();\n    if (q == -1)     return i;\n    buffer[i]=(byte)q;\n  }\n  return buffer.length;\n}"}
{"ids": "25285", "raw_code": "public void destroyBucket(AutoMixBucket bucket){\n  SharedPreferences prefs=getPrefs();\n  SharedPreferences.Editor editor=prefs.edit();\n  Set<String> set=new TreeSet<>(prefs.getStringSet(PREF_BUCKETS_IDS,new TreeSet<String>()));\n  set.remove(bucket.getSessionId());\n  editor.putStringSet(PREF_BUCKETS_IDS,set);\n  editor.apply();\n  mBuckets.remove(bucket);\n}"}
{"ids": "79391", "raw_code": "public void clearChanged(){\n  changed.set(false);\n}"}
{"ids": "85623", "raw_code": "public static Object[] convertParams(Object[] source,Class<?>[] target){\n  Object[] converted=new Object[target.length];\n  for (int i=0; i < target.length; i++) {\n    converted[i]=convert(source[i],target[i]);\n  }\n  return converted;\n}"}
{"ids": "80427", "raw_code": "List<String> asList(){\n  if (more) {\n    list.set(list.size() - 1,\"others\");\n  }\n  return Collections.unmodifiableList(list);\n}"}
{"ids": "25378", "raw_code": "public CacheStatResource(String resourceIdentifier,CacheResource cacheResource){\n  super(resourceIdentifier);\n  this.cacheResource=cacheResource;\n  relativeCacheStats=cacheResource.getCacheStats();\n}"}
{"ids": "21257", "raw_code": "public Map<URI,List<URI>> addTargetVolumeFullCopies(){\n  List<URI> fullCopies=Lists.newArrayList();\n  Map<URI,List<URI>> fullCopiesMap=new HashMap<>();\n  URI targetCG=null;\n  for (  URI volumeId : uris(volumeIds)) {\n    List<URI> targets=getTargets(volumeId);\n    for (    URI target : targets) {\n      if (targetCG == null) {\n        targetCG=getConsistencyGroup(target);\n      }\n      List<URI> volumeFullCopies=getFullCopies(target);\n      fullCopies.addAll(volumeFullCopies);\n      fullCopiesMap.put(target,volumeFullCopies);\n    }\n  }\n  if (!fullCopies.isEmpty() && targetCG != null) {\n    BlockStorageUtils.addVolumesToConsistencyGroup(targetCG,fullCopies);\n  }\n  return fullCopiesMap;\n}"}
{"ids": "80617", "raw_code": "WeatherAttribute(int max,String... desc){\n  maxValue=max;\n  value=Rand.rand(max + 1);\n  this.desc=desc;\n}"}
{"ids": "42253", "raw_code": "protected ClassLoader(ClassLoader parentLoader){\n  SecurityManager sc=System.getSecurityManager();\n  if (sc != null) {\n    sc.checkCreateClassLoader();\n  }\n  parentClassLoader=parentLoader;\n  definedPackages=new HashMap<String,Package>();\n  loadedClasses=new HashMap<String,Class<?>>();\n  packageCertificates=new Hashtable<String,Certificate[]>();\n}"}
{"ids": "84696", "raw_code": "static public double log10(double inValue){\n  return Math.log(inValue) / Math.log(10.0);\n}"}
{"ids": "43591", "raw_code": "void updateFeatureCounts(int[] translationIds,List<List<RichTranslation<IString,String>>> nbestLists){\n  for (int i=0; i < translationIds.length; i++) {\n    Set<String> features=new HashSet<String>();\n    for (    RichTranslation<IString,String> trans : nbestLists.get(i)) {\n      for (      FeatureValue<String> f : trans.features) {\n        features.add(f.name);\n      }\n    }\nsynchronized (clippedFeatureIndex) {\n      for (      String fName : features) {\n        Set<Integer> ids=clippedFeatureIndex.get(fName);\n        if (ids == null) {\n          ids=new TreeSet<Integer>();\n          clippedFeatureIndex.put(fName,ids);\n        }\n        if (ids.size() < minFeatureCount) {\n          ids.add(translationIds[i]);\n        }\n      }\n    }\n  }\n}"}
{"ids": "29821", "raw_code": "private void addNativeExpressAds(){\n  for (int i=0; i <= mRecyclerViewItems.size(); i+=ITEMS_PER_AD) {\n    final NativeExpressAdView adView=new NativeExpressAdView(MainActivity.this);\n    mRecyclerViewItems.add(i,adView);\n  }\n}"}
{"ids": "27234", "raw_code": "protected boolean accept(final IChangeRecord record){\n  return true;\n}"}
{"ids": "3958", "raw_code": "public final T allocate(){\n  AtomicInteger topRef=_top;\n  while (true) {\n    final int top=topRef.get();\n    if (top <= 0) {\n      return null;\n    }\n else     if (topRef.compareAndSet(top,top - 1)) {\n      T value=_freeStack.getAndSet(top - 1,null);\n      if (value != null) {\n        return value;\n      }\n    }\n  }\n}"}
{"ids": "65404", "raw_code": "public void putResponseGetAllResources(List<String> resources){\n  logger.debug(\"ResourceSet from ZeppelinServer\");\n  ResourceSet resourceSet=new ResourceSet();\n  for (  String res : resources) {\n    RemoteResource resource=gson.fromJson(res,RemoteResource.class);\n    resource.setResourcePoolConnector(this);\n    resourceSet.add(resource);\n  }\nsynchronized (getAllResourceResponse) {\n    getAllResourceResponse.add(resourceSet);\n    getAllResourceResponse.notify();\n  }\n}"}
{"ids": "15203", "raw_code": "public static Map<String,Set<String>> toAvPairMap(final Set<String> names,final String value){\n  if (value == null) {\n    return Collections.EMPTY_MAP;\n  }\n  if (names == null || names.isEmpty()) {\n    return new HashMap();\n  }\n  final Map<String,Set<String>> map=new HashMap<String,Set<String>>(names.size());\n  final Set<String> set=new HashSet<String>(1);\n  set.add(value);\n  for (  final String name : names) {\n    map.put(name,set);\n  }\n  return map;\n}"}
{"ids": "43633", "raw_code": "public PrefixTagger(MaxentTagger maxentTagger){\n  super(maxentTagger);\n  this.leftWindow=leftWindow();\n  this.rightWindow=rightWindow();\n  this.offset=leftWindow();\n}"}
{"ids": "38796", "raw_code": "@Override public void performRequest(String request){\n  if (request.compareTo(\"Stop\") == 0) {\n    stop();\n  }\n else {\n    throw new IllegalArgumentException(request + \" not supported (Associator)\");\n  }\n}"}
{"ids": "37694", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(4);\n  newVector.addElement(new Option(\"\\tMaximum number of parents\",\"P\",1,\"-P <nr of parents>\"));\n  newVector.addElement(new Option(\"\\tUse arc reversal operation.\\n\\t(default false)\",\"R\",0,\"-R\"));\n  newVector.addElement(new Option(\"\\tInitial structure is empty (instead of Naive Bayes)\",\"N\",0,\"-N\"));\n  newVector.addElement(new Option(\"\\tInitial structure specified in XML BIF file\",\"X\",1,\"-X\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "49728", "raw_code": "public synchronized void kill(){\n  running=false;\n  closed=true;\n  try {\n    STDIN.close();\n  }\n catch (  IOException e) {\n  }\n  try {\n    process.destroy();\n  }\n catch (  Exception e) {\n  }\n}"}
{"ids": "32528", "raw_code": "private Iterable<int[]> splitArray(int[] arr){\n  int len1=arr.length / 2;\n  int len2=len1 + arr.length % 2;\n  int[] a1=new int[len1];\n  int[] a2=new int[len2];\n  System.arraycopy(arr,0,a1,0,len1);\n  System.arraycopy(arr,len1,a2,0,len2);\n  return Arrays.asList(a1,a2);\n}"}
{"ids": "54119", "raw_code": "@Ignore @Test public void shouldCaptureQueryEventData() throws Exception {\n  startClient(null);\n  counters.consumeAll(5,TimeUnit.SECONDS);\n  List<QueryEventData> allQueryEvents=recordedEventData(QueryEventData.class,-1);\n  allQueryEvents.forEach(null);\n}"}
{"ids": "30362", "raw_code": "private List<ValidationError> checkForNoRatesPresent(){\n  if (overheadRates != null && overheadRates.isEmpty())   return Arrays.asList(new ValidationError(\"overheadrate\",\"estimate.overhead.altleastone_overheadrate_needed\"));\n else   return null;\n}"}
{"ids": "22431", "raw_code": "public void modifyExport(String id,String zoneName,IsilonExport exp) throws IsilonException {\n  String uriWithZoneName=getURIWithZoneName(id,zoneName);\n  modify(_baseUrl.resolve(URI_NFS_EXPORTS),uriWithZoneName,\"export\",exp);\n}"}
{"ids": "38007", "raw_code": "public double measureNumIterations(){\n  return m_Classifiers.size();\n}"}
{"ids": "81359", "raw_code": "public void markPotentiallyUnknownBit(LocalVariableBinding local){\n  if (this != DEAD_END) {\n    this.tagBits|=NULL_FLAG_MASK;\n    int position;\n    long mask;\n    if ((position=local.id + this.maxFieldCount) < BitCacheSize) {\n      mask=1L << position;\n      isTrue((this.nullBit1 & mask) == 0,\"Adding 'unknown' mark in unexpected state\");\n      this.nullBit4|=mask;\n      if (COVERAGE_TEST_FLAG) {\n        if (CoverageTestId == 46) {\n          this.nullBit4=~0;\n        }\n      }\n    }\n else {\n      int vectorIndex=(position / BitCacheSize) - 1;\n      if (this.extra == null) {\n        int length=vectorIndex + 1;\n        this.extra=new long[extraLength][];\n        for (int j=2; j < extraLength; j++) {\n          this.extra[j]=new long[length];\n        }\n      }\n else {\n        int oldLength;\n        if (vectorIndex >= (oldLength=this.extra[2].length)) {\n          for (int j=2; j < extraLength; j++) {\n            System.arraycopy(this.extra[j],0,(this.extra[j]=new long[vectorIndex + 1]),0,oldLength);\n          }\n        }\n      }\n      mask=1L << (position % BitCacheSize);\n      isTrue((this.extra[2][vectorIndex] & mask) == 0,\"Adding 'unknown' mark in unexpected state\");\n      this.extra[5][vectorIndex]|=mask;\n      if (COVERAGE_TEST_FLAG) {\n        if (CoverageTestId == 47) {\n          this.extra[5][vectorIndex]=~0;\n        }\n      }\n    }\n  }\n}"}
{"ids": "69631", "raw_code": "public int count(){\n  return dict.size();\n}"}
{"ids": "24527", "raw_code": "public static boolean aboveOrEqual(int a,int b){\n  return Integer.compareUnsigned(a,b) >= 0;\n}"}
{"ids": "66954", "raw_code": "protected void awaitCompletionComputeValuesAndShutdown(){\n{\n    runExecutorAndAwaitCompletion();\n  }\n  if (logger.isDebugEnabled())   printStats();\n  executor.shutdown();\n  while (!executor.isTerminated()) {\n    try {\n      Thread.sleep(100);\n    }\n catch (    InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"ids": "44467", "raw_code": "public Flags flagList() throws DecodingException {\n  Flags flags=new Flags();\n  nextWordChar();\n  consumeChar('(');\n  CharacterValidator validator=new NoopCharValidator();\n  String nextWord=consumeWord(validator);\n  while (!nextWord.endsWith(\")\")) {\n    DecoderUtils.setFlag(nextWord,flags);\n    nextWord=consumeWord(validator);\n  }\n  if (nextWord.length() > 1) {\n    int parenIndex=nextWord.indexOf(')');\n    if (parenIndex > 0) {\n      final String nextFlag=nextWord.substring(0,parenIndex);\n      DecoderUtils.setFlag(nextFlag,flags);\n    }\n  }\n  return flags;\n}"}
{"ids": "22556", "raw_code": "protected RestClientItf createNewRestClient(URI endpoint,String username,String password,String version,Client client){\n  XtremIOClient xioClient=null;\n  if (version != null && !version.isEmpty() && Integer.valueOf(version.split(DOT_OPERATOR)[0]) >= XIO_MIN_4X_VERSION) {\n    xioClient=new XtremIOV2Client(endpoint,username,password,client);\n  }\n else {\n    xioClient=new XtremIOV1Client(endpoint,username,password,client);\n  }\n  return xioClient;\n}"}
{"ids": "83566", "raw_code": "public String diff_text2(LinkedList<Diff> diffs){\n  StringBuilder text=new StringBuilder();\n  for (  Diff aDiff : diffs) {\n    if (aDiff.operation != Operation.DELETE) {\n      text.append(aDiff.text);\n    }\n  }\n  return text.toString();\n}"}
{"ids": "78725", "raw_code": "static private <E>List<E> toJavaList(List<E> values,int rows,int columns){\n  List<E> result=new ArrayList<>(values.size());\n  for (int i=0; i < values.size(); i++) {\n    int row=i / columns;\n    int column=i % columns;\n    E value=values.get((column * rows) + row);\n    result.add(value);\n  }\n  return result;\n}"}
{"ids": "6836", "raw_code": "public void lineArrow(final int x0,final int y0,final int x1,final int y1,final int sidelength,final int padding,final long lineColor,final long arrowColor){\n  final double dx=x1 - x0;\n  final double dy=y1 - y0;\n  final double angle=Math.atan2(dy,dx);\n  final double d=Math.sqrt((dx * dx + dy * dy));\n  final double arrowtip=d - padding;\n  final double arrowlength=TL * sidelength;\n  final double arrowbase=arrowtip - arrowlength;\n  final double xn=Math.cos(angle);\n  final double yn=Math.sin(angle);\n  final int xt=x0 + ((int)(arrowtip * xn));\n  final int yt=y0 + ((int)(arrowtip * yn));\n  final double xb=x0 + arrowbase * xn;\n  final double yb=y0 + arrowbase * yn;\n  final double sl2=sidelength / 2.0;\n  final double xk=sl2 * Math.cos(angle + PI2);\n  final double yk=sl2 * Math.sin(angle + PI2);\n  final int x2=(int)(xb + xk);\n  final int y2=(int)(yb + yk);\n  final int x3=(int)(xb - xk);\n  final int y3=(int)(yb - yk);\n  setColor(lineColor);\n  line(x0,y0,(int)xb,(int)yb,100);\n  setColor(arrowColor);\n  line(x2,y2,x3,y3,100);\n  line(x2,y2,xt,yt,100);\n  line(x3,y3,xt,yt,100);\n}"}
{"ids": "10115", "raw_code": "public String toHtml(Node node,Appendable appendable){\n  NodeVisitor renderer=createRenderer(appendable);\n  node.visit(renderer);\n  return appendable.toString();\n}"}
{"ids": "39543", "raw_code": "public static String[] toCommaSeparatedArray(String str) throws IOException {\n  return str.split(\"\\\\s*,\\\\s*\");\n}"}
{"ids": "44891", "raw_code": "@Override public final Object put(String key,Object value){\n  return set(key,value);\n}"}
{"ids": "5903", "raw_code": "private void appendFloatType(StringBuilder sb,FieldType fieldType,int fieldWidth){\n  sb.append(\"FLOAT\");\n}"}
{"ids": "6902", "raw_code": "private HttpEntity paramsToEntity(RequestParams params,ResponseHandlerInterface responseHandler){\n  HttpEntity entity=null;\n  try {\n    if (params != null) {\n      entity=params.getEntity(responseHandler);\n    }\n  }\n catch (  Throwable t) {\n    if (responseHandler != null)     responseHandler.sendFailureMessage(0,null,null,t);\n else     t.printStackTrace();\n  }\n  return entity;\n}"}
{"ids": "51699", "raw_code": "public static boolean isInstallableEditing(EnumSet<EmbeddingFlags> flagSet){\n  return flagSet.isEmpty();\n}"}
{"ids": "29091", "raw_code": "public Iterator<Resource> resourceIterator(){\n  return resourceList.iterator();\n}"}
{"ids": "72436", "raw_code": "public double nextUniform(double lower,double upper){\n  if (upper <= lower) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper);\n  }\n  if (Double.isInfinite(lower) || Double.isInfinite(upper)) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.INFINITE_BOUND);\n  }\n  if (Double.isNaN(lower) || Double.isNaN(upper)) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.NAN_NOT_ALLOWED);\n  }\n  final double u=randomGenerator.nextDouble();\n  return u * upper + (1 - u) * lower;\n}"}
{"ids": "5041", "raw_code": "public ShapeTileBox bounding_box(){\n  PlaPointInt lower_left=new PlaPointInt(Math.floor(v_x),Math.floor(v_y));\n  PlaPointInt upper_right=new PlaPointInt(Math.ceil(v_x),Math.ceil(v_y));\n  return new ShapeTileBox(lower_left,upper_right);\n}"}
{"ids": "54310", "raw_code": "public void addInterface(String name){\n  cachedInterfaces=null;\n  int info=constPool.addClassInfo(name);\n  if (interfaces == null) {\n    interfaces=new int[1];\n    interfaces[0]=info;\n  }\n else {\n    int n=interfaces.length;\n    int[] newarray=new int[n + 1];\n    System.arraycopy(interfaces,0,newarray,0,n);\n    newarray[n]=info;\n    interfaces=newarray;\n  }\n}"}
{"ids": "30149", "raw_code": "private void biomeFactor(final int x,final int z,final double addHeight){\n  float smoothVolatility=0.0F;\n  float smoothHeight=0.0F;\n  float biomeWeightSum=0.0F;\n  final Biome centerBiomeConfig=getCenterBiome(x,z);\n  final int lookRadius=this.maxSmoothRadius;\n  for (int nextX=-lookRadius; nextX <= lookRadius; nextX++) {\n    for (int nextZ=-lookRadius; nextZ <= lookRadius; nextZ++) {\n      final Biome biome=getOffsetBiome(x,z,nextX,nextZ);\n      final float biomeHeight=biome.getBaseHeight();\n      final float biomeVolatility=biome.getHeightVariation();\n      double biomeWeight=calcBiomeWeight(nextX,nextZ,biomeHeight);\n      biomeWeight=Math.abs(biomeWeight);\n      if (biomeHeight > centerBiomeConfig.getBaseHeight()) {\n        biomeWeight/=2.0F;\n      }\n      smoothVolatility+=biomeVolatility * biomeWeight;\n      smoothHeight+=biomeHeight * biomeWeight;\n      biomeWeightSum+=biomeWeight;\n    }\n  }\n  smoothVolatility/=biomeWeightSum;\n  smoothHeight/=biomeWeightSum;\n  this.biomeVolatility=smoothVolatility * 0.9 + 0.1;\n  this.biomeVolatility*=4.0 / 3.0;\n  this.biomeHeight=0.75 / 64.0;\n  this.biomeHeight+=smoothHeight * 17.0 / 64.0;\n  this.biomeHeight+=0.2 * addHeight * 17.0 / 64.0;\n}"}
{"ids": "66134", "raw_code": "@SuppressWarnings(\"unchecked\") public static MIssue create(Properties ctx,String hexInput){\n  HashMap hmIn=null;\n  try {\n    byte[] byteArray=Secure.convertHexString(hexInput);\n    ByteArrayInputStream bIn=new ByteArrayInputStream(byteArray);\n    ObjectInputStream oIn=new ObjectInputStream(bIn);\n    hmIn=(HashMap)oIn.readObject();\n  }\n catch (  Exception e) {\n    s_log.log(Level.SEVERE,\"\",e);\n    return null;\n  }\n  MIssue issue=new MIssue(ctx,(HashMap<String,String>)hmIn);\n  return issue;\n}"}
{"ids": "47679", "raw_code": "void flushBuffer() throws IOException {\n  se.flushBuffer();\n}"}
{"ids": "23483", "raw_code": "public static void showUnknownError(Context context,Throwable t,DialogInterface.OnCancelListener listener){\n  showError(context,String.format(context.getString(R.string.afc_pmsg_unknown_error),t),listener);\n}"}
{"ids": "73490", "raw_code": "public void addButton(final JButton theButton){\n  customButtonPanel.add(theButton);\n}"}
{"ids": "69371", "raw_code": "void swapCursor(long monthMillis,@Nullable EventCursor cursor,ContentObserver contentObserver){\n  for (int i=0; i < mMonths.size(); i++) {\n    if (CalendarUtils.sameMonth(monthMillis,mMonths.get(i))) {\n      swapCursor(i,cursor,contentObserver);\n      break;\n    }\n  }\n}"}
{"ids": "9535", "raw_code": "final boolean close(){\n  return !closed.getAndSet(true);\n}"}
{"ids": "48398", "raw_code": "public byte[] encryptRaw(byte[] baseKey,int usage,byte[] ivec,byte[] plaintext,int start,int len) throws GeneralSecurityException, KrbCryptoException {\n  if (!KeyUsage.isValid(usage)) {\n    throw new GeneralSecurityException(\"Invalid key usage number: \" + usage);\n  }\n  byte[] output=encryptCTS(baseKey,usage,ivec,null,plaintext,start,len,false);\n  return output;\n}"}
{"ids": "44094", "raw_code": "private void fixbug(Document doc){\n  Element element=doc.getDocumentElement();\n  if (element != null) {\n    fixbug(element);\n  }\n}"}
{"ids": "48365", "raw_code": "private String toHexString(byte[] block){\n  StringBuffer buf=new StringBuffer();\n  int len=block.length;\n  for (int i=0; i < len; i++) {\n    byte2hex(block[i],buf);\n    if (i < len - 1) {\n      buf.append(\":\");\n    }\n  }\n  return buf.toString();\n}"}
{"ids": "14158", "raw_code": "public static String removeDeployUri(String uri){\n  if ((uri == null) || (uri.length() == 0)) {\n    return uri;\n  }\n  int loc=uri.indexOf(\"/\",1);\n  if (loc == -1) {\n    return null;\n  }\n else {\n    return uri.substring(loc);\n  }\n}"}
{"ids": "9418", "raw_code": "public static double loss(double pred,double y){\n  return Math.abs(y - pred);\n}"}
{"ids": "48024", "raw_code": "public boolean needSignatureFileBytes(){\n  return sfBytes == null;\n}"}
{"ids": "63984", "raw_code": "public void insert(T object,int index){\nsynchronized (mLock) {\n    mObjects.add(index,object);\n  }\n  if (mNotifyOnChange)   notifyItemInserted(index);\n}"}
{"ids": "36961", "raw_code": "private void loadTargetModules(){\n  for (  final Module module : target.getModules()) {\n    module.addListener(moduleKeeperListener);\n    modules.add(module);\n    if (!module.isLoaded()) {\n      try {\n        module.load();\n      }\n catch (      final CouldntLoadDataException e) {\n        errorLoadingModule(module,e);\n        return;\n      }\n    }\n  }\n  step++;\n}"}
{"ids": "6676", "raw_code": "public BloomFilter(double falsePositiveProbability,int expectedNumberOfElements){\n  this(Math.ceil(-(Math.log(falsePositiveProbability) / Math.log(2))) / Math.log(2),expectedNumberOfElements,(int)Math.ceil(-(Math.log(falsePositiveProbability) / Math.log(2))));\n}"}
{"ids": "81198", "raw_code": "public synchronized void notifyBand(final int times,final int onTime,final int offTime,final int flashColour){\n  final List<BLEAction> list=new ArrayList<>();\n  byte[] colors=convertRgb(flashColour);\n  list.add(new WaitAction(150));\n  list.add(new WriteAction(Profile.UUID_CHAR_CONTROL_POINT,Protocol.VIBRATION_WITHOUT_LED));\n  list.add(new WaitAction(300));\n  list.add(new WriteAction(Profile.UUID_CHAR_CONTROL_POINT,colors));\n  queue(list);\n}"}
{"ids": "76541", "raw_code": "private static int buildRequestCode(long threadId,int action){\n  action++;\n  return (int)(action * 100000 + threadId);\n}"}
{"ids": "7230", "raw_code": "public OuterJoinQualifier add(String propertyLeft,String propertyRight){\n  additionalProperties.add(new PropertyValueExpressionPair(new PropertyValueExpression(propertyLeft),new PropertyValueExpression(propertyRight)));\n  return this;\n}"}
{"ids": "61482", "raw_code": "public void insertElementAt(int value,int at){\n  if (null == m_map) {\n    m_map=new int[m_blocksize];\n    m_mapSize=m_blocksize;\n  }\n else   if ((m_firstFree + 1) >= m_mapSize) {\n    m_mapSize+=m_blocksize;\n    int newMap[]=new int[m_mapSize];\n    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);\n    m_map=newMap;\n  }\n  if (at <= (m_firstFree - 1)) {\n    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);\n  }\n  m_map[at]=value;\n  m_firstFree++;\n}"}
{"ids": "72358", "raw_code": "protected static Dfp atanInternal(final Dfp a){\n  Dfp y=new Dfp(a);\n  Dfp x=new Dfp(y);\n  Dfp py=new Dfp(y);\n  for (int i=3; i < 90; i+=2) {\n    x=x.multiply(a);\n    x=x.multiply(a);\n    x=x.negate();\n    y=y.add(x.divide(i));\n    if (y.equals(py)) {\n      break;\n    }\n    py=new Dfp(y);\n  }\n  return y;\n}"}
{"ids": "77150", "raw_code": "public static String parseSegmentName(String filename){\n  int idx=indexOfSegmentName(filename);\n  if (idx != -1) {\n    filename=filename.substring(0,idx);\n  }\n  return filename;\n}"}
{"ids": "43630", "raw_code": "private static Tree generateSubTree(HashMap<Integer,Pair<IndexedWord,List<Integer>>> dependencies,int root){\n  List<Integer> children=dependencies.get(root).second;\n  IndexedWord tw=dependencies.get(root).first;\n  Tree tree=new LabeledScoredTreeNode(tw);\n  boolean addedHead=children.isEmpty();\n  List<Integer> sortedChildren=CollectionUtils.sorted(children);\n  for (  Integer c : sortedChildren) {\n    if (c > root && !addedHead) {\n      Tree child=new LabeledScoredTreeNode(tw);\n      tree.addChild(child);\n      addedHead=true;\n    }\n    Tree child=generateSubTree(dependencies,c);\n    tree.addChild(child);\n  }\n  if (!addedHead) {\n    Tree child=new LabeledScoredTreeNode(tw);\n    tree.addChild(child);\n  }\n  return tree;\n}"}
{"ids": "25483", "raw_code": "@HLEFunction(nid=0x267A6DD2,version=150,checkInsideInterrupt=true) public int __sceSasRevParam(int sasCore,int delay,int feedback){\n  checkSasHandleGood(sasCore);\n  waveformEffectDelay=delay;\n  waveformEffectFeedback=feedback;\n  return 0;\n}"}
{"ids": "13187", "raw_code": "static boolean isPossibleFP(String val){\n  final int length=val.length();\n  for (int i=0; i < length; ++i) {\n    char c=val.charAt(i);\n    if (!(c >= '0' && c <= '9' || c == '.' || c == '-' || c == '+' || c == 'E' || c == 'e')) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "12533", "raw_code": "public boolean deleteTrack(Track track){\nsynchronized (tracks) {\n    return tracks.removeElement(track);\n  }\n}"}
{"ids": "71736", "raw_code": "protected static ArrayList<GeoPoint> parseKmlCoordinates(String input){\n  LinkedList<GeoPoint> tmpCoords=new LinkedList<GeoPoint>();\n  int i=0;\n  int tupleStart=0;\n  int length=input.length();\n  boolean startReadingTuple=false;\n  while (i < length) {\n    char c=input.charAt(i);\n    if (c == ' ' || c == '\\n' || c == '\\t') {\n      if (startReadingTuple) {\n        String tuple=input.substring(tupleStart,i);\n        GeoPoint p=parseKmlCoord(tuple);\n        if (p != null)         tmpCoords.add(p);\n        startReadingTuple=false;\n      }\n    }\n else {\n      if (!startReadingTuple) {\n        startReadingTuple=true;\n        tupleStart=i;\n      }\n      if (i == length - 1) {\n        String tuple=input.substring(tupleStart,i + 1);\n        GeoPoint p=parseKmlCoord(tuple);\n        if (p != null)         tmpCoords.add(p);\n      }\n    }\n    i++;\n  }\n  ArrayList<GeoPoint> coordinates=new ArrayList<GeoPoint>(tmpCoords.size());\n  coordinates.addAll(tmpCoords);\n  return coordinates;\n}"}
{"ids": "65341", "raw_code": "ServerSessionContext registerRequest(long sequence,Runnable runnable){\n  commands.put(sequence,runnable);\n  return this;\n}"}
{"ids": "73150", "raw_code": "public void addPreferencesButton(){\n  JButton prefsButton=new JButton(\"Prefs\");\n  prefsButton.setHideActionText(true);\n  prefsButton.setAction(TimeSeriesPlotActions.getPropertiesDialogAction(this));\n  buttonPanel.add(prefsButton);\n}"}
{"ids": "81296", "raw_code": "public static void findIndexMatches(SearchPattern pattern,Index index,IndexQueryRequestor requestor,SearchParticipant participant,IJavaSearchScope scope,IProgressMonitor monitor) throws IOException {\n  pattern.findIndexMatches(index,requestor,participant,scope,monitor);\n}"}
{"ids": "85028", "raw_code": "public static void logInfo(String message,Object... args){\n  message=MessageFormat.format(message,args);\n  log(IStatus.INFO,IStatus.OK,message,null);\n}"}
{"ids": "40084", "raw_code": "public static boolean occupy(int waitMs){\n  if (occupiedUntil != null && occupiedUntil.after(new Date())) {\n    return false;\n  }\n  occupiedUntil=DateUtils.addMilliseconds(new Date(),waitMs);\n  return true;\n}"}
{"ids": "37679", "raw_code": "public boolean[][] moralize(BayesNet bayesNet){\n  int nNodes=bayesNet.getNrOfNodes();\n  boolean[][] bAdjacencyMatrix=new boolean[nNodes][nNodes];\n  for (int iNode=0; iNode < nNodes; iNode++) {\n    ParentSet parents=bayesNet.getParentSets()[iNode];\n    moralizeNode(parents,iNode,bAdjacencyMatrix);\n  }\n  return bAdjacencyMatrix;\n}"}
{"ids": "83609", "raw_code": "public void addDivider(ImageView v){\n  RelativeLayout.LayoutParams dividerParams=new RelativeLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);\n  if (mImageView != null) {\n    dividerParams.addRule(RelativeLayout.BELOW,mImageView.getId());\n  }\n else   if (mMissingImage != null) {\n    dividerParams.addRule(RelativeLayout.BELOW,mMissingImage.getId());\n  }\n else   if (mVideoButton != null) {\n    dividerParams.addRule(RelativeLayout.BELOW,mVideoButton.getId());\n  }\n else   if (mAudioButton != null) {\n    dividerParams.addRule(RelativeLayout.BELOW,mAudioButton.getId());\n  }\n else   if (mView_Text != null) {\n    dividerParams.addRule(RelativeLayout.BELOW,mView_Text.getId());\n  }\n else {\n    Log.e(t,\"Tried to add divider to uninitialized ATVWidget\");\n    return;\n  }\n  addView(v,dividerParams);\n}"}
{"ids": "63618", "raw_code": "private double findLength(Point originPoint,Point targetPoint){\n  int x1=originPoint.x;\n  int y1=originPoint.y;\n  int x2=targetPoint.x;\n  int y2=targetPoint.y;\n  double sideA=x2 - x1;\n  double sideB=(y1 > y2 ? (y1 - y2) : (y2 - y1));\n  if (sideB == 0) {\n    return sideA;\n  }\n  return Math.sqrt(Math.pow(sideA,2) + Math.pow(sideB,2));\n}"}
{"ids": "76933", "raw_code": "public static Automaton determinizeSimple(Automaton a,Set<Integer> initialset){\n  if (a.getNumStates() == 0) {\n    return a;\n  }\n  int[] points=a.getStartPoints();\n  Map<Set<Integer>,Set<Integer>> sets=new HashMap<>();\n  LinkedList<Set<Integer>> worklist=new LinkedList<>();\n  Map<Set<Integer>,Integer> newstate=new HashMap<>();\n  sets.put(initialset,initialset);\n  worklist.add(initialset);\n  Automaton.Builder result=new Automaton.Builder();\n  result.createState();\n  newstate.put(initialset,0);\n  Transition t=new Transition();\n  while (worklist.size() > 0) {\n    Set<Integer> s=worklist.removeFirst();\n    int r=newstate.get(s);\n    for (    int q : s) {\n      if (a.isAccept(q)) {\n        result.setAccept(r,true);\n        break;\n      }\n    }\n    for (int n=0; n < points.length; n++) {\n      Set<Integer> p=new HashSet<>();\n      for (      int q : s) {\n        int count=a.initTransition(q,t);\n        for (int i=0; i < count; i++) {\n          a.getNextTransition(t);\n          if (t.min <= points[n] && points[n] <= t.max) {\n            p.add(t.dest);\n          }\n        }\n      }\n      if (!sets.containsKey(p)) {\n        sets.put(p,p);\n        worklist.add(p);\n        newstate.put(p,result.createState());\n      }\n      int q=newstate.get(p);\n      int min=points[n];\n      int max;\n      if (n + 1 < points.length) {\n        max=points[n + 1] - 1;\n      }\n else {\n        max=Character.MAX_CODE_POINT;\n      }\n      result.addTransition(r,q,min,max);\n    }\n  }\n  return Operations.removeDeadStates(result.finish());\n}"}
{"ids": "15637", "raw_code": "public static void write(InputStream in,OutputStream out,boolean closeBoth) throws IOException {\n  byte[] buff=new byte[1024];\n  int read=0;\n  while ((read=in.read(buff)) > 0) {\n    out.write(buff,0,read);\n  }\n  out.flush();\n  if (closeBoth) {\n    safeCloseStreams(in,out);\n  }\n}"}
{"ids": "27267", "raw_code": "public static double distance(CoordinateDD p1,CoordinateDD p2,UNITS units){\n  final double latP1=p1.northSouth;\n  final double latP2=p2.northSouth;\n  final double lonP1=p1.eastWest;\n  final double lonP2=p2.eastWest;\n  if (latP1 == latP2 && lonP1 == lonP2)   return 0;\n  double distRad=Math.acos(Math.sin(toRadians(latP1)) * Math.sin(toRadians(latP2)) + Math.cos(toRadians(latP1)) * Math.cos(toRadians(latP2)) * Math.cos(toRadians(lonP1 - lonP2)));\n  final double distAsDegree=toDegrees(distRad);\n  return metersToUnits(distAsDegree * 60 * 1.1515* 1609.344,units);\n}"}
{"ids": "43468", "raw_code": "public static LiquidNetwork initNetwork(){\n  Random random=new Random(System.currentTimeMillis());\n  int id=random.nextInt();\n  while (usedIds.contains(id)) {\n    id=random.nextInt();\n  }\n  ;\n  LiquidNetwork net=new LiquidNetwork();\n  usedIds.add(id);\n  net.networkID=id;\n  return net;\n}"}
{"ids": "67882", "raw_code": "public String exportXml() throws IOException {\n  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();\n  exportXml(outputStream);\n  return outputStream.toString();\n}"}
{"ids": "76730", "raw_code": "public PatternReplaceFilter(TokenStream in,Pattern p,String replacement,boolean all){\n  super(in);\n  this.replacement=(null == replacement) ? \"\" : replacement;\n  this.all=all;\n  this.m=p.matcher(termAtt);\n}"}
{"ids": "1999", "raw_code": "public static int[] stableSort(double[] array){\n  int[] index=new int[array.length];\n  int[] newIndex=new int[array.length];\n  int[] helpIndex;\n  int numEqual;\n  array=(double[])array.clone();\n  for (int i=0; i < index.length; i++) {\n    index[i]=i;\n    if (Double.isNaN(array[i])) {\n      array[i]=Double.MAX_VALUE;\n    }\n  }\n  quickSort(array,index,0,array.length - 1);\n  int i=0;\n  while (i < index.length) {\n    numEqual=1;\n    for (int j=i + 1; ((j < index.length) && Utils.eq(array[index[i]],array[index[j]])); j++)     numEqual++;\n    if (numEqual > 1) {\n      helpIndex=new int[numEqual];\n      for (int j=0; j < numEqual; j++)       helpIndex[j]=i + j;\n      quickSort(index,helpIndex,0,numEqual - 1);\n      for (int j=0; j < numEqual; j++)       newIndex[i + j]=index[helpIndex[j]];\n      i+=numEqual;\n    }\n else {\n      newIndex[i]=index[i];\n      i++;\n    }\n  }\n  return newIndex;\n}"}
{"ids": "65035", "raw_code": "public void reopenReadWrite(){\nsynchronized (mLock) {\n    throwIfNotOpenLocked();\n    if (!isReadOnlyLocked()) {\n      return;\n    }\n    final int oldOpenFlags=mConfigurationLocked.openFlags;\n    mConfigurationLocked.openFlags=(mConfigurationLocked.openFlags & ~OPEN_READ_MASK) | OPEN_READWRITE;\n    try {\n      mConnectionPoolLocked.reconfigure(mConfigurationLocked);\n    }\n catch (    RuntimeException ex) {\n      mConfigurationLocked.openFlags=oldOpenFlags;\n      throw ex;\n    }\n  }\n}"}
{"ids": "43882", "raw_code": "public static int readChars(Reader r,char[] charArray) throws IOException {\n  int totalCharsRead=0;\n  int charsRead=r.read(charArray);\n  while (charsRead >= 0) {\n    totalCharsRead+=charsRead;\n    if (totalCharsRead == charArray.length) {\n      break;\n    }\n    charsRead=r.read(charArray,totalCharsRead,charArray.length - totalCharsRead);\n  }\n  return totalCharsRead;\n}"}
{"ids": "80329", "raw_code": "public void removeDirection(final Direction dir,final boolean face){\n  RPAction action;\n  int size;\n  action=new RPAction();\n  action.put(\"type\",\"move\");\n  action.put(\"dir\",-dir.get());\n  send(action);\n  directions.remove(dir);\n  size=directions.size();\n  if (size == 0) {\n    action=new RPAction();\n    action.put(\"type\",\"stop\");\n  }\n else {\n    if (face) {\n      action=new FaceRPAction(directions.get(size - 1));\n    }\n else {\n      action=new MoveRPAction(directions.get(size - 1));\n    }\n  }\n  send(action);\n}"}
{"ids": "12474", "raw_code": "public static double[] ndary(int n){\n  double d[]=new double[n];\n  for (int i=0; i < n; i++) {\n    d[i]=R.nextGaussian();\n  }\n  return d;\n}"}
{"ids": "71497", "raw_code": "private float applyBounce(float velocity,float distOutOfBounds,float simulationRate){\n  if (isZero(distOutOfBounds)) {\n    return velocity;\n  }\n  velocity*=-1;\n  float bounce=BOUNCE_MULTIPLIER * Math.abs(distOutOfBounds / mIrisRadius);\n  if (velocity > 0) {\n    velocity+=bounce * simulationRate;\n  }\n else {\n    velocity-=bounce * simulationRate;\n  }\n  return velocity;\n}"}
{"ids": "9399", "raw_code": "private double dot(final int k0,final int k1,final int[] assignment0,final int[] assignment1){\n  double dot=0;\n  final int N=X.size();\n  int a=0, b=0;\n  for (int i=0; i < N; i++) {\n    if (assignment0[i] != k0)     continue;\n    a++;\n    for (int j=0; j < N; j++) {\n      if (assignment1[j] != k1)       continue;\n      dot+=kernel.eval(i,j,X,accel);\n    }\n  }\n  for (int j=0; j < N; j++)   if (assignment1[j] == k1)   b++;\n  return dot / (a * b);\n}"}
{"ids": "6918", "raw_code": "public void removeAllTextures(){\n  for (  WeakReference<CCTexture2D> texSR : textures.values()) {\n    CCTexture2D tex=texSR.get();\n    if (tex != null)     tex.releaseTexture(CCDirector.gl);\n  }\n  textures.clear();\n}"}
{"ids": "68378", "raw_code": "public synchronized void addToQueue(final ImageResourceLoader imageResourceLoader,final String uri,final MutableFSImage mfsi,final int width,final int height){\n  XRLog.general(Level.FINE,\"Queueing load for image uri \" + uri);\n  _loadQueue.addLast(new ImageLoadItem(imageResourceLoader,uri,mfsi,width,height));\n  notifyAll();\n}"}
{"ids": "84318", "raw_code": "private JNIWriter(Context context){\n  context.put(jniWriterKey,this);\n  fileManager=context.get(JavaFileManager.class);\n  log=Log.instance(context);\n  Options options=Options.instance(context);\n  verbose=options.isSet(VERBOSE);\n  checkAll=options.isSet(\"javah:full\");\n  this.context=context;\n  syms=Symtab.instance(context);\n  lineSep=System.getProperty(\"line.separator\");\n}"}
{"ids": "83290", "raw_code": "public JOSMTolerantFastXMLParser(Sink sink,XMLStreamReader reader,boolean enableDateParsing){\n  this.sink=sink;\n  this.enableDateParsing=enableDateParsing;\n  this.reader=reader;\n  if (enableDateParsing) {\n    timestampFormat=new XmlTimestampFormat();\n  }\n else {\n    Calendar calendar;\n    calendar=Calendar.getInstance();\n    calendar.set(Calendar.MILLISECOND,0);\n    dummyTimestampContainer=new SimpleTimestampContainer(calendar.getTime());\n  }\n  memberTypeParser=new MemberTypeParser();\n}"}
{"ids": "33858", "raw_code": "public Hashtable(int initialCapacity,float loadFactor){\n  if (initialCapacity < 0) {\n    throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n  }\n  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {\n    throw new IllegalArgumentException(\"Illegal Load: \" + loadFactor);\n  }\n  if (initialCapacity == 0)   initialCapacity=1;\n  this.loadFactor=loadFactor;\n  table=new Entry[initialCapacity];\n  threshold=(int)(initialCapacity * loadFactor);\n}"}
{"ids": "49871", "raw_code": "public static String extractReminder(String publicURL,String accessURL){\n  return publicURL.substring(accessURL.length());\n}"}
{"ids": "75580", "raw_code": "public void createUnderlying(){\n  if (options != null) {\n    options.createUnderlying();\n    if (Platform.isFxApplicationThread()) {\n      line=new com.lynden.gmapsfx.shapes.Polyline(options.convert());\n    }\n  }\n}"}
{"ids": "40020", "raw_code": "private void initRasterProgram(){\n  IntBuffer props=BufferUtils.createIntBuffer(1);\n  IntBuffer params=BufferUtils.createIntBuffer(1);\n  int uniformsResourceIndex=glGetProgramResourceIndex(rasterProgram,GL_UNIFORM_BLOCK,\"Uniforms\");\n  computeUboBinding=params.get(0);\n  props.put(0,GL_BUFFER_BINDING);\n  glGetProgramResourceiv(rasterProgram,GL_UNIFORM_BLOCK,uniformsResourceIndex,props,null,params);\n  rasterUboBinding=params.get(0);\n}"}
{"ids": "83646", "raw_code": "private void installVoiceData(){\n  if (TextUtils.isEmpty(getEngineName()))   return;\n  Intent intent=new Intent(TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA);\n  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  intent.setPackage(getEngineName());\n  try {\n    Log.v(TAG,\"Installing voice data: \" + intent.toUri(0));\n    startActivity(intent);\n  }\n catch (  ActivityNotFoundException ex) {\n    Log.e(TAG,\"Failed to install TTS data, no acitivty found for \" + intent + \")\");\n  }\n}"}
{"ids": "85575", "raw_code": "@SuppressWarnings(\"fallthrough\") Symbol selectBest(Env<AttrContext> env,Type site,List<Type> argtypes,List<Type> typeargtypes,Symbol sym,Symbol bestSoFar,boolean allowBoxing,boolean useVarargs,boolean operator){\n  if (sym.kind == ERR || !sym.isInheritedIn(site.tsym,types)) {\n    return bestSoFar;\n  }\n else   if (useVarargs && (sym.flags() & VARARGS) == 0) {\n    return bestSoFar.kind >= ERRONEOUS ? new BadVarargsMethod((ResolveError)bestSoFar.baseSymbol()) : bestSoFar;\n  }\n  Assert.check(sym.kind < AMBIGUOUS);\n  try {\n    Type mt=rawInstantiate(env,site,sym,null,argtypes,typeargtypes,allowBoxing,useVarargs,types.noWarnings);\n    if (!operator || verboseResolutionMode.contains(VerboseResolutionMode.PREDEF))     currentResolutionContext.addApplicableCandidate(sym,mt);\n  }\n catch (  InapplicableMethodException ex) {\n    if (!operator)     currentResolutionContext.addInapplicableCandidate(sym,ex.getDiagnostic());\nswitch (bestSoFar.kind) {\ncase ABSENT_MTH:\n      return new InapplicableSymbolError(currentResolutionContext);\ncase WRONG_MTH:\n    if (operator)     return bestSoFar;\n  bestSoFar=new InapplicableSymbolsError(currentResolutionContext);\ndefault :\nreturn bestSoFar;\n}\n}\nif (!isAccessible(env,site,sym)) {\nreturn (bestSoFar.kind == ABSENT_MTH) ? new AccessError(env,site,sym) : bestSoFar;\n}\nreturn (bestSoFar.kind > AMBIGUOUS) ? sym : mostSpecific(argtypes,sym,bestSoFar,env,site,allowBoxing && operator,useVarargs);\n}"}
{"ids": "42752", "raw_code": "public Bitmap loadBitmap(String uri,int reqWidth,int reqHeight){\n  Bitmap bitmap=loadBitmapFromMemCache(uri);\n  if (bitmap != null) {\n    Log.d(TAG,\"loadBitmapFromMemCache,url:\" + uri);\n    return bitmap;\n  }\n  try {\n    bitmap=loadBitmapFromDiskCache(uri,reqWidth,reqHeight);\n    if (bitmap != null) {\n      Log.d(TAG,\"loadBitmapFromDisk,url:\" + uri);\n      return bitmap;\n    }\n    bitmap=loadBitmapFromHttp(uri,reqWidth,reqHeight);\n    Log.d(TAG,\"loadBitmapFromHttp,url:\" + uri);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  if (bitmap == null && !mIsDiskLruCacheCreated) {\n    Log.w(TAG,\"encounter error, DiskLruCache is not created.\");\n    bitmap=downloadBitmapFromUrl(uri);\n  }\n  return bitmap;\n}"}
{"ids": "76350", "raw_code": "public boolean isSafeToExecuteSUTCode(){\n  Thread current=Thread.currentThread();\n  if (!privilegedThreads.contains(current)) {\n    return true;\n  }\n else {\n    return privilegedThreadToIgnore == current;\n  }\n}"}
{"ids": "57333", "raw_code": "public String[] readDirectory(String dir){\n  if (dir == null) {\n    throw new NullPointerException(\"dir\");\n  }\n  StringArrayOut listOut=new StringArrayOut();\n  try {\n    checkResult(LibIMobileDevice.afc_read_directory(getRef(),dir,listOut));\n    StringArray list=listOut.getValue();\n    ArrayList<String> result=new ArrayList<String>();\n    if (list != null) {\n      for (int i=0; ; i++) {\n        String s=list.get(i);\n        if (s == null) {\n          break;\n        }\n        result.add(s);\n      }\n    }\n    return result.toArray(new String[result.size()]);\n  }\n  finally {\n    LibIMobileDevice.delete_StringArray_values_z(listOut.getValue());\n    listOut.delete();\n  }\n}"}
{"ids": "84988", "raw_code": "public static String createArgsString(List<String> args){\n  if (args == null) {\n    return \"\";\n  }\n  StringBuilder argsSb=new StringBuilder();\n  for (  String arg : args) {\n    if ((arg.contains(\" \") || arg.contains(\"${\")) && !StringUtilities.isQuoted(arg)) {\n      argsSb.append(StringUtilities.quote(arg));\n    }\n else {\n      argsSb.append(arg);\n    }\n    argsSb.append(' ');\n  }\n  if (argsSb.length() > 0) {\n    argsSb.setLength(argsSb.length() - 1);\n  }\n  return argsSb.toString();\n}"}
{"ids": "61437", "raw_code": "public void addElement(int value){\n  int indexRelativeToCache=m_firstFree - m_buildCacheStartIndex;\n  if (indexRelativeToCache >= 0 && indexRelativeToCache < m_blocksize) {\n    m_buildCache[indexRelativeToCache]=value;\n    ++m_firstFree;\n  }\n else {\n    int index=m_firstFree >>> m_SHIFT;\n    int offset=m_firstFree & m_MASK;\n    if (index >= m_map.length) {\n      int newsize=index + m_numblocks;\n      int[][] newMap=new int[newsize][];\n      System.arraycopy(m_map,0,newMap,0,m_map.length);\n      m_map=newMap;\n    }\n    int[] block=m_map[index];\n    if (null == block)     block=m_map[index]=new int[m_blocksize];\n    block[offset]=value;\n    m_buildCache=block;\n    m_buildCacheStartIndex=m_firstFree - offset;\n    ++m_firstFree;\n  }\n}"}
{"ids": "73578", "raw_code": "public static <T>List<List<T>> overlap(List<List<T>> lists,int before,int after){\n  if (before < 0) {\n    throw new IllegalArgumentException(\"Value of before cannot be negative\");\n  }\n  if (after < 0) {\n    throw new IllegalArgumentException(\"Value of after cannot be negative\");\n  }\n  ListIterator<List<T>> iter=lists.listIterator();\n  List<List<T>> result=new ArrayList<List<T>>();\n  for (; iter.hasNext(); ) {\n    List<T> current=new ArrayList<T>(iter.next());\n    List<T> prev=before > 0 ? findPrevious(iter) : null;\n    List<T> next=after > 0 ? findNext(iter) : null;\n    if (prev != null) {\n      List<T> overlap=prev.subList(prev.size() - before,prev.size());\n      current.addAll(0,overlap);\n    }\n    if (next != null) {\n      List<T> overlap=next.subList(0,after);\n      current.addAll(overlap);\n    }\n    result.add(current);\n  }\n  return result;\n}"}
{"ids": "72487", "raw_code": "public double[][] extractMainSetJacobian(final ODEState state){\n  final double[] p=state.getSecondaryState(index);\n  final double[][] dYdY0=new double[stateDim][stateDim];\n  int j=0;\n  for (int i=0; i < stateDim; i++) {\n    System.arraycopy(p,j,dYdY0[i],0,stateDim);\n    j+=stateDim;\n  }\n  return dYdY0;\n}"}
{"ids": "60026", "raw_code": "private void handleGetCandidateResult(PlacementTask currentState,Operation postOperation,Map<String,ServerAddress> candidates,Stopwatch placementWatch){\n  ServiceUtils.logInfo(this,\"elapsed-time flat-place-get-candidates %d milliseconds\",placementWatch.elapsed(TimeUnit.MILLISECONDS));\n  if (candidates.isEmpty()) {\n    String msg=String.format(\"Place failure, constraints cannot be satisfied for request: %s\",currentState.resource);\n    PlacementTask patchState=buildPatch(TaskState.TaskStage.FAILED,currentState.taskState.isDirect,null);\n    patchState.resultCode=PlaceResultCode.NO_SUCH_RESOURCE;\n    patchState.error=msg;\n    failTask(patchState,new Throwable(msg),postOperation);\n    return;\n  }\n  ServiceUtils.logInfo(this,\"Sending place requests to %s with timeout %d ms\",candidates,currentState.timeoutMs);\n  Stopwatch scoreCandidatesStopwatch=Stopwatch.createStarted();\n  queryHostsForScores(currentState.resource,candidates,null);\n}"}
{"ids": "28561", "raw_code": "public boolean contains(JsonElement element){\n  return elements.contains(element);\n}"}
{"ids": "60564", "raw_code": "private void appendPath(Path cp,final Path p){\n  if (p != null && p.size() > 0) {\n    cp.append(p);\n  }\n}"}
{"ids": "2516", "raw_code": "public static void doDefaultLayout(Composite parent,DialogField[] editors,boolean labelOnTop){\n  doDefaultLayout(parent,editors,labelOnTop,0,0);\n}"}
{"ids": "36820", "raw_code": "protected static final List<CView> processQueryResults(final ResultSet resultSet,final INaviProject project,final Map<Integer,Set<CTag>> tags,final ITagManager nodeTagManager,final SQLProvider provider,final List<CView> views,final ViewType viewType,final GraphType graphType) throws SQLException {\n  final Map<Integer,Set<CTag>> nodeTagMap=getNodeTags(provider.getConnection(),project,nodeTagManager);\n  try {\n    while (resultSet.next()) {\n      final int viewId=resultSet.getInt(\"view_id\");\n      final String name=PostgreSQLHelpers.readString(resultSet,\"name\");\n      final String description=PostgreSQLHelpers.readString(resultSet,\"description\");\n      final Timestamp creationDate=resultSet.getTimestamp(\"creation_date\");\n      final Timestamp modificationDate=resultSet.getTimestamp(\"modification_date\");\n      final boolean starState=resultSet.getBoolean(\"stared\");\n      final int nodeCount=resultSet.getInt(\"bbcount\");\n      final int edgeCount=resultSet.getInt(\"edgecount\");\n      final Set<CTag> viewTags=tags.containsKey(viewId) ? tags.get(viewId) : new HashSet<CTag>();\n      final Set<CTag> nodeTags=nodeTagMap.containsKey(viewId) ? nodeTagMap.get(viewId) : new HashSet<CTag>();\n      final CProjectViewGenerator generator=new CProjectViewGenerator(provider,project);\n      views.add(generator.generate(viewId,name,description,viewType,graphType,creationDate,modificationDate,nodeCount,edgeCount,viewTags,nodeTags,starState));\n    }\n    return views;\n  }\n  finally {\n    resultSet.close();\n  }\n}"}
{"ids": "81588", "raw_code": "private void drawString(Object nativeFont,String str,int x,int y,int textDecoration,int fontHeight){\n  if (str.length() == 0) {\n    return;\n  }\n  if (textDecoration != 0) {\n    boolean raised=(textDecoration & Style.TEXT_DECORATION_3D) != 0;\n    boolean lowerd=(textDecoration & Style.TEXT_DECORATION_3D_LOWERED) != 0;\n    boolean north=(textDecoration & Style.TEXT_DECORATION_3D_SHADOW_NORTH) != 0;\n    if (raised || lowerd || north) {\n      textDecoration=textDecoration & (~Style.TEXT_DECORATION_3D) & (~Style.TEXT_DECORATION_3D_LOWERED)& (~Style.TEXT_DECORATION_3D_SHADOW_NORTH);\n      int c=getColor();\n      int a=getAlpha();\n      int newColor=0;\n      int offset=-2;\n      if (lowerd) {\n        offset=2;\n        newColor=0xffffff;\n      }\n else       if (north) {\n        offset=2;\n      }\n      setColor(newColor);\n      if (a == 0xff) {\n        setAlpha(140);\n      }\n      drawString(nativeFont,str,x,y + offset,textDecoration,fontHeight);\n      setAlpha(a);\n      setColor(c);\n      drawString(nativeFont,str,x,y,textDecoration,fontHeight);\n      return;\n    }\n    canvas.drawText(str,x,y - font.getFontAscent(),font);\n    if ((textDecoration & Style.TEXT_DECORATION_UNDERLINE) != 0) {\n      paint.setStyle(Paint.Style.FILL);\n      canvas.drawLine(x,y + fontHeight - 1,x + impl.stringWidth(nativeFont,str),y + fontHeight - 1,paint);\n    }\n    if ((textDecoration & Style.TEXT_DECORATION_STRIKETHRU) != 0) {\n      paint.setStyle(Paint.Style.FILL);\n      canvas.drawLine(x,y + fontHeight / 2,x + impl.stringWidth(nativeFont,str),y + fontHeight / 2,paint);\n    }\n    if ((textDecoration & Style.TEXT_DECORATION_OVERLINE) != 0) {\n      paint.setStyle(Paint.Style.FILL);\n      canvas.drawLine(x,y,x + impl.stringWidth(nativeFont,str),y,paint);\n    }\n  }\n else {\n    canvas.drawText(str,x,y - font.getFontAscent(),font);\n  }\n}"}
{"ids": "29339", "raw_code": "public void removeDragEventHandlers(){\n  node.removeEventHandler(TouchEvent.ANY,touchHandler);\n  node.removeEventHandler(MouseEvent.ANY,mouseHandler);\n}"}
{"ids": "82834", "raw_code": "protected void installListeners(){\n  super.installListeners();\n  table.addPropertyChangeListener(this);\n}"}
{"ids": "22501", "raw_code": "public void shutdown() throws ConnectionManagerException {\n  s_logger.info(\"Shutting down CIM adapter.\");\n  connectionLock.lock();\n  try {\n    closeAllConnections();\n    if (_listener != null) {\n      _listener.stop();\n      _listener=null;\n    }\n    executorService.shutdown();\n  }\n catch (  Exception e) {\n    throw new ConnectionManagerException(\"An error occurred shutting down the connection manager\",e);\n  }\n finally {\n    connectionLock.unlock();\n  }\n}"}
{"ids": "25788", "raw_code": "private void closeWriterExecutionService(ExecutorService service) throws CarbonDataWriterException {\n  try {\n    service.shutdown();\n    service.awaitTermination(1,TimeUnit.DAYS);\n  }\n catch (  InterruptedException e) {\n    LOGGER.error(e,e.getMessage());\n    throw new CarbonDataWriterException(e.getMessage());\n  }\n}"}
{"ids": "76406", "raw_code": "public void removeJob(String jobId){\n  if (jobs.contains(jobId)) {\n    jobs.remove(jobId);\n  }\n}"}
{"ids": "23588", "raw_code": "public String formatTimeMillis(long ts){\nsynchronized (timeFormatter) {\n    return timeFormatter.format(new Date(ts));\n  }\n}"}
{"ids": "25501", "raw_code": "protected static final int positionCoordinate2D(float value){\n  return (int)(value + 0.437f);\n}"}
{"ids": "60720", "raw_code": "@Override public Object clone(){\n  try {\n    IdentityHashMap<K,V> cloneHashMap=(IdentityHashMap<K,V>)super.clone();\n    cloneHashMap.elementData=newElementArray(elementData.length);\n    System.arraycopy(elementData,0,cloneHashMap.elementData,0,elementData.length);\n    return cloneHashMap;\n  }\n catch (  CloneNotSupportedException e) {\n    throw new AssertionError(e);\n  }\n}"}
{"ids": "29323", "raw_code": "public int trap(int[] A){\n  if (A == null || A.length == 0)   return 0;\n  int l=0;\n  int r=A.length - 1;\n  int level=0;\n  int all=0;\n  int block=0;\n  while (l <= r) {\n    int curLevel=Math.min(A[l],A[r]);\n    if (curLevel > level) {\n      all+=(curLevel - level) * (r - l + 1);\n      level=curLevel;\n    }\n    if (A[l] < A[r])     block+=A[l++];\n else     block+=A[r--];\n  }\n  return all - block;\n}"}
{"ids": "75719", "raw_code": "public void search(){\n  performSearch();\n}"}
{"ids": "14316", "raw_code": "public RemoteSession(HttpSession session){\n  super();\n  debug=Debug.getInstance(\"remoteSession\");\n  this.session=(HttpSession)session;\n  creationTime=session.getCreationTime();\n  id=session.getId();\n  lastAccessedTime=session.getLastAccessedTime();\n  maxInactiveInterval=session.getMaxInactiveInterval();\n  isNew=session.isNew();\n  internalAttributes=new HashMap();\n  Enumeration aNames=getAttributeNames();\n  while (aNames.hasMoreElements()) {\n    String attributeName=(String)aNames.nextElement();\n    if (isSerializable(getAttribute(attributeName)) && !attributeName.equals(\"LoginCallbacks\") && !attributeName.equals(\"AuthContext\")) {\n      internalAttributes.put(attributeName,getAttribute(attributeName));\n      internalAttributeNames.add(attributeName);\n      debug.message(\"adding attr=\" + attributeName + \", \"+ getAttribute(attributeName));\n    }\n  }\n}"}
{"ids": "45989", "raw_code": "@Override public SnmpMibHandler addMib(SnmpMibAgent mib) throws IllegalArgumentException {\n  if (mib == null) {\n    throw new IllegalArgumentException();\n  }\n  if (!mibs.contains(mib))   mibs.addElement(mib);\n  root.register(mib);\n  return this;\n}"}
{"ids": "26243", "raw_code": "public boolean exist(){\n  return productionRun != null;\n}"}
{"ids": "34149", "raw_code": "public static String numberToString(Number number) throws JSONException {\n  if (number == null) {\n    throw new JSONException(\"Number must be non-null\");\n  }\n  double doubleValue=number.doubleValue();\n  JSON.checkDouble(doubleValue);\n  if (number.equals(NEGATIVE_ZERO)) {\n    return \"-0\";\n  }\n  long longValue=number.longValue();\n  if (doubleValue == (double)longValue) {\n    return Long.toString(longValue);\n  }\n  return number.toString();\n}"}
{"ids": "77325", "raw_code": "public static SortClause create(String item,String order){\n  return new SortClause(item,ORDER.valueOf(order));\n}"}
{"ids": "33", "raw_code": "public long endTime(){\n  return getTimestamp() + calculateDuration();\n}"}
{"ids": "39018", "raw_code": "protected void buildLeavesMiddleOut(BallNode node) throws Exception {\n  if (node.m_Left != null && node.m_Right != null) {\n    buildLeavesMiddleOut(node.m_Left);\n    buildLeavesMiddleOut(node.m_Right);\n  }\n else   if (node.m_Left != null || node.m_Right != null) {\n    throw new Exception(\"Invalid leaf assignment. Please check code\");\n  }\n else {\n    BallNode n2=buildTreeMiddleOut(node.m_Start,node.m_End);\n    if (n2.m_Left != null && n2.m_Right != null) {\n      node.m_Left=n2.m_Left;\n      node.m_Right=n2.m_Right;\n      buildLeavesMiddleOut(node);\n    }\n else     if (n2.m_Left != null || n2.m_Right != null) {\n      throw new Exception(\"Invalid leaf assignment. Please check code\");\n    }\n  }\n}"}
{"ids": "62726", "raw_code": "public WeightVector(WeightVector wv){\n  float in[]=wv.getInternalArray();\n  u=new float[in.length];\n  System.arraycopy(in,0,u,0,in.length);\n  size=in.length;\n}"}
{"ids": "69392", "raw_code": "public void waitUntilDone(){\n  countLock.lock();\n  try {\n    equalCountCv.await();\n  }\n catch (  InterruptedException e) {\n    throw new RuntimeException(\"Shouldn't happen!\");\n  }\n finally {\n    countLock.unlock();\n  }\n}"}
{"ids": "82475", "raw_code": "public java.lang.StringBuilder insert(int offset,long l){\n  return insert(offset,Long.toString(l));\n}"}
{"ids": "73141", "raw_code": "public ProjectionPreferencesDialog(Projector projector){\n  this.projector=projector;\n  String toleranceToolTip=\"Only add a new datapoint if it is at least this \" + \"far from an existing datapoint in the high-dim space\";\n  JLabel toleranceLabel=new JLabel(\"New datapoint tolerance\");\n  tolerance.setToolTipText(toleranceToolTip);\n  toleranceLabel.setToolTipText(toleranceToolTip);\n  mainPanel.addItemLabel(toleranceLabel,tolerance);\n  if (projector.getProjectionMethod() instanceof ProjectCoordinate) {\n    mainPanel.addItem(\"Coordinate projection auto-find mode\",autoFind);\n  }\n  fillFieldValues();\n  setContentPane(mainPanel);\n}"}
{"ids": "84688", "raw_code": "private Element generateBranch(TreeType treeType,RootedTree tree,Node node,String nodeName,double startLatitude,double finishLatitude,double startLongitude,double finishLongitude,double startAltitude,double finishAltitude,double peakPosition,double peakAltitude,double startDate,double finishDate,double ageCutOff,LineStyle startStyle,LineStyle finishStyle,int divisionCount,List<Element> styles){\n  Element element;\n  Double rate=(Double)node.getAttribute(\"rate\");\n  Double support=(Double)node.getAttribute(\"posterior\");\n  double height=tree.getHeight(node);\n  boolean hasDivisionStyles=startStyle != null && finishStyle != null;\n  if (divisionCount > 0) {\n    double latDiff=finishLatitude - startLatitude;\n    double latDelta=latDiff / divisionCount;\n    double longDiff=finishLongitude - startLongitude;\n    double longDelta=longDiff / divisionCount;\n    double altDiff=finishAltitude - startAltitude;\n    double altDelta=altDiff / divisionCount;\n    double dateDiff=finishDate - startDate;\n    double dateDelta=dateDiff / divisionCount;\n    double lastLatitude=startLatitude;\n    double latitude=startLatitude + latDelta;\n    double lastLongitude=startLongitude;\n    double longitude=startLongitude + longDelta;\n    double x=-peakPosition;\n    double xDelta=1.0 / divisionCount;\n    double a=peakAltitude - finishAltitude;\n    if (peakPosition == 0.5) {\n      a*=4;\n    }\n    double altitude=peakAltitude - (a * (x * x));\n    double lastAltitude=altitude;\n    x+=xDelta;\n    double date=startDate;\n    String styleName=null;\n    if (!hasDivisionStyles && startStyle != null) {\n      styleName=nodeName + \"_style\";\n      styles.add(generateLineStyle(styleName,startStyle.getWidth(),startStyle.getColor()));\n    }\n    element=generateContainer(\"Folder\",nodeName,null,(styleName != null ? \"#\" + styleName : null));\n    for (int division=0; division < divisionCount; division++) {\n      if (ageCutOff == 0.0 || date > ageCutOff) {\n        String partName=nodeName + \"_part\" + (division + 1);\n        styleName=null;\n        if (hasDivisionStyles) {\n          styleName=partName + \"_style\";\n        }\n        Element placeMark=generateContainer(\"Placemark\",partName,null,(styleName != null ? \"#\" + styleName : null));\n        annotateBranch(placeMark,height,startDate,finishDate,rate,support);\n        if (hasDivisionStyles) {\n          double width=startStyle.getWidth();\n          Color color=getBlendedColor(((float)division) / (divisionCount - 1),startStyle.getColor(),finishStyle.getColor());\n          styles.add(generateLineStyle(styleName,width,color));\n        }\n        if (dateDiff > 0.0) {\n          Element timeSpan=new Element(\"TimeSpan\");\n          timeSpan.addContent(generateElement(\"begin\",getKMLDate(date)));\n          placeMark.addContent(timeSpan);\n        }\n        Element lineString=new Element(\"LineString\");\n        Element coordinates=new Element(\"coordinates\");\n        if (altDiff > 0.0 || peakAltitude > 0.0) {\n          lineString.addContent(generateElement(\"altitudeMode\",altitudeMode));\n          altitude=peakAltitude - (a * (x * x));\n          coordinates.addContent(\"\" + lastLongitude + \",\"+ lastLatitude+ \",\"+ lastAltitude+ \"\\r\");\n          coordinates.addContent(\"\" + longitude + \",\"+ latitude+ \",\"+ altitude+ \"\\r\");\n        }\n else {\n          lineString.addContent(generateElement(\"altitudeMode\",\"clampToGround\"));\n          lineString.addContent(generateElement(\"tessellate\",true));\n          coordinates.addContent(\"\" + lastLongitude + \",\"+ lastLatitude+ \"\\r\");\n          coordinates.addContent(\"\" + longitude + \",\"+ latitude+ \"\\r\");\n        }\n        lastLatitude=latitude;\n        latitude+=latDelta;\n        lastLongitude=longitude;\n        longitude+=longDelta;\n        lastAltitude=altitude;\n        x+=xDelta;\n        date+=dateDelta;\n        lineString.addContent(coordinates);\n        placeMark.addContent(lineString);\n        element.addContent(placeMark);\n      }\n    }\n  }\n else {\n    String styleName=null;\n    if (startStyle != null) {\n      styleName=nodeName + \"_style\";\n      double width=startStyle.getWidth();\n      styles.add(generateLineStyle(styleName,width,startStyle.getColor()));\n    }\n    element=generateContainer(\"Placemark\",nodeName,null,(styleName != null ? \"#\" + styleName : null));\n    annotateBranch(element,height,startDate,finishDate,rate,support);\n    Element lineString=new Element(\"LineString\");\n    lineString.addContent(generateElement(\"altitudeMode\",altitudeMode));\n    Element coordinates=new Element(\"coordinates\");\n    if (treeType == TreeType.RECTANGLE_TREE) {\n      coordinates.addContent(\"\" + finishLongitude + \",\"+ finishLatitude+ \",\"+ finishAltitude+ \"\\r\");\n      coordinates.addContent(\"\" + finishLongitude + \",\"+ finishLatitude+ \",\"+ startAltitude+ \"\\r\");\n      coordinates.addContent(\"\" + startLongitude + \",\"+ startLatitude+ \",\"+ startAltitude+ \"\\r\");\n    }\n else {\n      coordinates.addContent(\"\" + finishLongitude + \",\"+ finishLatitude+ \",\"+ finishAltitude+ \"\\r\");\n      coordinates.addContent(\"\" + startLongitude + \",\"+ startLatitude+ \",\"+ startAltitude+ \"\\r\");\n    }\n    lineString.addContent(coordinates);\n    element.addContent(lineString);\n  }\n  return element;\n}"}
{"ids": "65595", "raw_code": "public void addTableValueChangeListener(TableValueChangeListener listener){\n  if (listener == null) {\n    return;\n  }\n  m_listeners.add(listener);\n}"}
{"ids": "37716", "raw_code": "@Override public int print(Graphics g,PageFormat pageFormat,int pageIndex){\n  if (pageIndex > 0) {\n    return (NO_SUCH_PAGE);\n  }\n else {\n    Graphics2D g2d=(Graphics2D)g;\n    g2d.translate(pageFormat.getImageableX(),pageFormat.getImageableY());\n    double fHeight=pageFormat.getImageableHeight();\n    double fWidth=pageFormat.getImageableWidth();\n    int xMax=1;\n    int yMax=1;\n    for (int iNode=0; iNode < m_BayesNet.getNrOfNodes(); iNode++) {\n      if (xMax < m_BayesNet.getPositionX(iNode)) {\n        xMax=m_BayesNet.getPositionX(iNode);\n      }\n      if (yMax < m_BayesNet.getPositionY(iNode)) {\n        yMax=m_BayesNet.getPositionY(iNode);\n      }\n    }\n    double fCurrentScale=m_fScale;\n    xMax+=m_nPaddedNodeWidth + 100;\n    if (fWidth / xMax < fHeight / yMax) {\n      m_fScale=fWidth / xMax;\n    }\n else {\n      m_fScale=fHeight / yMax;\n    }\n    paint(g2d);\n    m_fScale=fCurrentScale;\n    return (PAGE_EXISTS);\n  }\n}"}
{"ids": "43144", "raw_code": "public LinkedHashMap<Pokemon,NicknamePokemonResponse.Result> bulkRenameWithPattern(final String pattern,final BiConsumer<NicknamePokemonResponse.Result,Pokemon> perPokeCallback){\n  final LinkedHashMap<Pokemon,NicknamePokemonResponse.Result> results=new LinkedHashMap<>();\n  mons.forEach(null);\n  return results;\n}"}
{"ids": "46040", "raw_code": "protected static byte[][] parseDirectives(byte[] buf,String[] keyTable,List<byte[]> realmChoices,int realmIndex) throws SaslException {\n  byte[][] valueTable=new byte[keyTable.length][];\n  ByteArrayOutputStream key=new ByteArrayOutputStream(10);\n  ByteArrayOutputStream value=new ByteArrayOutputStream(10);\n  boolean gettingKey=true;\n  boolean gettingQuotedValue=false;\n  boolean expectSeparator=false;\n  byte bch;\n  int i=skipLws(buf,0);\n  while (i < buf.length) {\n    bch=buf[i];\n    if (gettingKey) {\n      if (bch == ',') {\n        if (key.size() != 0) {\n          throw new SaslException(\"Directive key contains a ',':\" + key);\n        }\n        i=skipLws(buf,i + 1);\n      }\n else       if (bch == '=') {\n        if (key.size() == 0) {\n          throw new SaslException(\"Empty directive key\");\n        }\n        gettingKey=false;\n        i=skipLws(buf,i + 1);\n        if (i < buf.length) {\n          if (buf[i] == '\"') {\n            gettingQuotedValue=true;\n            ++i;\n          }\n        }\n else {\n          throw new SaslException(\"Valueless directive found: \" + key.toString());\n        }\n      }\n else       if (isLws(bch)) {\n        i=skipLws(buf,i + 1);\n        if (i < buf.length) {\n          if (buf[i] != '=') {\n            throw new SaslException(\"'=' expected after key: \" + key.toString());\n          }\n        }\n else {\n          throw new SaslException(\"'=' expected after key: \" + key.toString());\n        }\n      }\n else {\n        key.write(bch);\n        ++i;\n      }\n    }\n else     if (gettingQuotedValue) {\n      if (bch == '\\\\') {\n        ++i;\n        if (i < buf.length) {\n          value.write(buf[i]);\n          ++i;\n        }\n else {\n          throw new SaslException(\"Unmatched quote found for directive: \" + key.toString() + \" with value: \"+ value.toString());\n        }\n      }\n else       if (bch == '\"') {\n        ++i;\n        gettingQuotedValue=false;\n        expectSeparator=true;\n      }\n else {\n        value.write(bch);\n        ++i;\n      }\n    }\n else     if (isLws(bch) || bch == ',') {\n      extractDirective(key.toString(),value.toByteArray(),keyTable,valueTable,realmChoices,realmIndex);\n      key.reset();\n      value.reset();\n      gettingKey=true;\n      gettingQuotedValue=expectSeparator=false;\n      i=skipLws(buf,i + 1);\n    }\n else     if (expectSeparator) {\n      throw new SaslException(\"Expecting comma or linear whitespace after quoted string: \\\"\" + value.toString() + \"\\\"\");\n    }\n else {\n      value.write(bch);\n      ++i;\n    }\n  }\n  if (gettingQuotedValue) {\n    throw new SaslException(\"Unmatched quote found for directive: \" + key.toString() + \" with value: \"+ value.toString());\n  }\n  if (key.size() > 0) {\n    extractDirective(key.toString(),value.toByteArray(),keyTable,valueTable,realmChoices,realmIndex);\n  }\n  return valueTable;\n}"}
{"ids": "62059", "raw_code": "public static Assignment createDefault(String... variables){\n  return createDefault(Arrays.asList(variables));\n}"}
{"ids": "80150", "raw_code": "private void onStopAttack(){\n  attacking=null;\n}"}
{"ids": "77888", "raw_code": "public JSONTokener(Reader reader){\n  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);\n  this.eof=false;\n  this.usePrevious=false;\n  this.previous=0;\n  this.index=0;\n  this.character=1;\n  this.line=1;\n}"}
{"ids": "74505", "raw_code": "void calculatePressed(ActionEvent e){\n  if (checkEditConditional()) {\n    return;\n  }\n  if (numConditionals > 0) {\n    String cName=\"\";\n    Conditional c=null;\n    for (int i=0; i < numConditionals; i++) {\n      cName=_curLogix.getConditionalByNumberOrder(i);\n      if (cName != null) {\n        c=_conditionalManager.getBySystemName(cName);\n        if (c == null) {\n          log.error(\"Invalid conditional system name when calculating - \" + cName);\n        }\n else {\n          c.calculate(false,null);\n        }\n      }\n else {\n        log.error(\"null conditional system name when calculating\");\n      }\n    }\n    conditionalTableModel.fireTableDataChanged();\n  }\n}"}
{"ids": "63474", "raw_code": "public static FunctionAlias newInstance(Schema schema,int id,String name,String javaClassMethod,boolean force,boolean bufferResultSetToLocalTemp){\n  FunctionAlias alias=new FunctionAlias(schema,id,name);\n  int paren=javaClassMethod.indexOf('(');\n  int lastDot=javaClassMethod.lastIndexOf('.',paren < 0 ? javaClassMethod.length() : paren);\n  if (lastDot < 0) {\n    throw DbException.get(ErrorCode.SYNTAX_ERROR_1,javaClassMethod);\n  }\n  alias.className=javaClassMethod.substring(0,lastDot);\n  alias.methodName=javaClassMethod.substring(lastDot + 1);\n  alias.bufferResultSetToLocalTemp=bufferResultSetToLocalTemp;\n  alias.init(force);\n  return alias;\n}"}
{"ids": "75656", "raw_code": "protected void updateMenu(){\n  boolean present;\n  boolean initializing;\n  boolean running;\n  boolean stopping;\n  boolean active;\n  if (m_MenuBar == null)   return;\n  present=(m_Experiment != null);\n  initializing=present && m_Experiment.isInitializing();\n  running=present && m_Experiment.isRunning();\n  stopping=present && m_Experiment.isStopping();\n  active=initializing || running || stopping;\n  m_MenuItemFileNew.setEnabled(!active);\n  m_MenuItemFileOpen.setEnabled(!active);\n  m_MenuItemFileSave.setEnabled(present && (getCurrentFile() != null));\n  m_MenuItemFileSaveAs.setEnabled(present);\n  m_MenuItemFileClose.setEnabled(!active);\n  m_MenuItemExecutionStart.setEnabled(present && !active);\n  m_MenuItemExecutionStop.setEnabled(present && running);\n  for (  AbstractExperimenterMenuItem item : m_AdditionalMenuItems.keySet())   item.update(this,m_AdditionalMenuItems.get(item));\n}"}
{"ids": "34168", "raw_code": "@NotNull @ObjectiveCName(\"addAutoJoinGroupWithToken:\") public ConfigurationBuilder addAutoJoinGroup(String groupTokenOrShortName){\n  autoJoinGroups.add(groupTokenOrShortName);\n  return this;\n}"}
{"ids": "66811", "raw_code": "public boolean hasValueInfo(){\n  return !receiverValue.equals(\"\") || methodArgumentValues != null;\n}"}
{"ids": "57971", "raw_code": "public boolean nextIsSep(){\n  if (Character.isLetterOrDigit(str.charAt(currentPosition)))   return false;\n else   return true;\n}"}
{"ids": "74320", "raw_code": "protected void dropCar(PrintWriter file,Car car,boolean isManifest){\n  if (isManifest) {\n    StringBuffer buf=new StringBuffer(padAndTruncateString(Setup.getDropCarPrefix(),Setup.getManifestPrefixLength()));\n    String[] format=Setup.getDropManifestMessageFormat();\n    boolean isLocal=isLocalMove(car);\n    if (isLocal) {\n      buf=new StringBuffer(padAndTruncateString(Setup.getLocalPrefix(),Setup.getManifestPrefixLength()));\n      format=Setup.getLocalManifestMessageFormat();\n    }\n    dropCar(file,car,buf,format,isLocal,isManifest);\n  }\n else {\n    StringBuffer buf=new StringBuffer(padAndTruncateString(Setup.getSwitchListDropCarPrefix(),Setup.getSwitchListPrefixLength()));\n    String[] format=Setup.getDropSwitchListMessageFormat();\n    boolean isLocal=isLocalMove(car);\n    if (isLocal) {\n      buf=new StringBuffer(padAndTruncateString(Setup.getSwitchListLocalPrefix(),Setup.getSwitchListPrefixLength()));\n      format=Setup.getLocalSwitchListMessageFormat();\n    }\n    dropCar(file,car,buf,format,isLocal,isManifest);\n  }\n}"}
{"ids": "24899", "raw_code": "@AfterMethod public void deleteStorage() throws BusinessException, IOException, SerializationException {\n  if (null != storageData) {\n    if (storageManager.getRecordingState() == RecordingState.ON) {\n      storageManager.stopRecording();\n    }\n    if (!storageManager.isStorageClosed(storageData)) {\n      storageManager.closeStorage(storageData);\n    }\n    storageManager.deleteStorage(storageData);\n    storageData=null;\n  }\n  assertThat(storageManager.getExistingStorages(),is(empty()));\n}"}
{"ids": "18285", "raw_code": "public final void removeElementAt(int i){\n  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree);\n else   m_map[i]=java.lang.Integer.MIN_VALUE;\n  m_firstFree--;\n}"}
{"ids": "11562", "raw_code": "protected int keyOnList(String key,List<String> list){\n  int ret=-1;\n  int index=0;\n  if (list != null) {\n    for (    String listKey : list) {\n      if (listKey.equalsIgnoreCase(key)) {\n        ret=index;\n        break;\n      }\n      index++;\n    }\n  }\n  return ret;\n}"}
{"ids": "76739", "raw_code": "private boolean incrementSentence() throws IOException {\n  if (length == 0)   return false;\n  while (true) {\n    int start=iterator.current();\n    if (start == BreakIterator.DONE)     return false;\n    int end=iterator.next();\n    if (end == BreakIterator.DONE)     return false;\n    setNextSentence(start,end);\n    if (incrementWord()) {\n      return true;\n    }\n  }\n}"}
{"ids": "46754", "raw_code": "Enumeration<CryptoPermissionEntry> permissionElements(){\n  return permissionEntries.elements();\n}"}
{"ids": "45148", "raw_code": "private static char[] zzUnpackCMap(String packed){\n  char[] map=new char[0x10000];\n  int i=0;\n  int j=0;\n  while (i < 164) {\n    int count=packed.charAt(i++);\n    char value=packed.charAt(i++);\n    do     map[j++]=value;\n while (--count > 0);\n  }\n  return map;\n}"}
{"ids": "43238", "raw_code": "private static void populateAccessRequest(AccessRequest accessRequest){\n  accessRequest.setAccessLicenseNumber(props.getProperty(LICENSE_NUMBER));\n  accessRequest.setUserId(props.getProperty(USER_NAME));\n  accessRequest.setPassword(props.getProperty(PASSWORD));\n}"}
{"ids": "25692", "raw_code": "public BinaryTable(Header myHeader) throws FitsException {\n  long heapSizeL=myHeader.getLongValue(PCOUNT);\n  long heapOffsetL=myHeader.getLongValue(THEAP);\n  if (heapOffsetL > MAX_INTEGER_VALUE) {\n    throw new FitsException(\"Heap Offset > 2GB\");\n  }\n  if (heapSizeL > MAX_INTEGER_VALUE) {\n    throw new FitsException(\"Heap size > 2 GB\");\n  }\n  if (heapSizeL - heapOffsetL > MAX_INTEGER_VALUE) {\n    throw new FitsException(\"Unable to allocate heap > 2GB\");\n  }\n  this.heapOffset=(int)heapOffsetL;\n  int heapSize=(int)heapSizeL;\n  int rwsz=myHeader.getIntValue(NAXIS1);\n  this.nRow=myHeader.getIntValue(NAXIS2);\n  if (this.heapOffset > 0) {\n    this.heapOffset-=this.nRow * rwsz;\n  }\n  if (this.heapOffset < 0 || this.heapOffset > heapSize) {\n    throw new FitsException(\"Inconsistent THEAP and PCOUNT\");\n  }\n  this.heap=new FitsHeap(heapSize - this.heapOffset);\n  int nCol=myHeader.getIntValue(TFIELDS);\n  this.rowLen=0;\n  for (int col=0; col < nCol; col++) {\n    this.rowLen+=processCol(myHeader,col);\n  }\n  HeaderCard card=myHeader.findCard(NAXIS1);\n  card.setValue(String.valueOf(this.rowLen));\n  myHeader.updateLine(NAXIS1,card);\n}"}
{"ids": "42000", "raw_code": "public static TaskContext current(){\n  final Deque<TaskContext> stack=contextStacks.get();\n  if (stack == null) {\n    return null;\n  }\n  return stack.peekLast();\n}"}
{"ids": "10778", "raw_code": "public static byte[] concat(final byte[]... arrays){\n  int totalSize=0;\n  for (  final byte[] array : arrays) {\n    totalSize+=array.length;\n  }\n  int startIndex=0;\n  final byte[] result=new byte[totalSize];\n  for (  final byte[] array : arrays) {\n    System.arraycopy(array,0,result,startIndex,array.length);\n    startIndex+=array.length;\n  }\n  return result;\n}"}
{"ids": "42902", "raw_code": "public JKNamespace(final String url,final String prefix){\n  logger.info(String.format(\"create Namespace with url(%s) and Prefix(%s) \",url,prefix));\n  this.url=url;\n  this.prefix=prefix;\n}"}
{"ids": "31693", "raw_code": "public static void main(String[] args) throws Exception {\n  final String cfg=\"modules/yardstick/config/ignite-localhost-config.xml\";\n  final Class<? extends BenchmarkDriver> benchmark=IgniteSqlQueryBenchmark.class;\n  final int threads=1;\n  final boolean clientDriverNode=true;\n  final int extraNodes=2;\n  final int warmUp=5;\n  final int duration=5;\n  final int range=100_000;\n  final boolean throughputLatencyProbe=false;\n  for (int i=0; i < extraNodes; i++) {\n    IgniteConfiguration nodeCfg=Ignition.loadSpringBean(cfg,\"grid.cfg\");\n    nodeCfg.setGridName(\"node-\" + i);\n    nodeCfg.setMetricsLogFrequency(0);\n    Ignition.start(nodeCfg);\n  }\n  ArrayList<String> args0=new ArrayList<>();\n  addArg(args0,\"-t\",threads);\n  addArg(args0,\"-w\",warmUp);\n  addArg(args0,\"-d\",duration);\n  addArg(args0,\"-r\",range);\n  addArg(args0,\"-dn\",benchmark.getSimpleName());\n  addArg(args0,\"-sn\",\"IgniteNode\");\n  addArg(args0,\"-cfg\",cfg);\n  if (throughputLatencyProbe)   addArg(args0,\"-pr\",\"ThroughputLatencyProbe\");\n  if (clientDriverNode)   args0.add(\"-cl\");\n  BenchmarkDriverStartUp.main(args0.toArray(new String[args0.size()]));\n}"}
{"ids": "75537", "raw_code": "public static boolean safeNavigationOperatorDefined(String nestedFieldName){\n  if (nestedFieldName.contains(SAFE_NAVIGATION_OPERATOR))   if (!nestedFieldName.startsWith(SAFE_NAVIGATION_OPERATOR))   throw new MappingException(\"Safe navigation operator must be the first symbol after dot notation\");\n else   return true;\n  return false;\n}"}
{"ids": "55976", "raw_code": "public static boolean isEnabled(){\n  if (sEnabled == null) {\n    sEnabled=detectEnabled();\n  }\n  return sEnabled.booleanValue();\n}"}
{"ids": "64752", "raw_code": "public boolean intersects(GeoBounds other){\n  boolean rv=false;\n  for (  Rectangle2D r1 : rects) {\n    for (    Rectangle2D r2 : other.rects) {\n      rv=r1.intersects(r2);\n      if (rv) {\n        break;\n      }\n    }\n    if (rv) {\n      break;\n    }\n  }\n  return rv;\n}"}
{"ids": "64837", "raw_code": "public void dispose(){\n  mListeners.clear();\n}"}
{"ids": "81867", "raw_code": "public void openImageGallery(final ActionListener response){\n  openGallery(response,Display.GALLERY_IMAGE);\n}"}
{"ids": "34397", "raw_code": "private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\n  inequalitySymbol=(String)in.readObject();\n  timeStamp=in.readLong();\n}"}
{"ids": "18096", "raw_code": "String popBaseIndentifier(){\n  return (String)m_baseIdentifiers.pop();\n}"}
{"ids": "50861", "raw_code": "@Nullable public static File resolveDrawable(@NotNull RenderResources resources,@Nullable ResourceValue drawable,@NotNull Project project){\n  if (drawable != null) {\n    drawable=resources.resolveResValue(drawable);\n  }\n  if (drawable == null) {\n    return null;\n  }\n  String result=drawable.getValue();\n  StateList stateList=resolveStateList(resources,drawable,project);\n  if (stateList != null) {\n    List<StateListState> states=stateList.getStates();\n    if (!states.isEmpty()) {\n      StateListState state=states.get(states.size() - 1);\n      result=state.getValue();\n    }\n  }\n  if (result == null) {\n    return null;\n  }\n  final File file=new File(result);\n  return file.isFile() ? file : null;\n}"}
{"ids": "7083", "raw_code": "public static void delete(String code,JDA jda){\n  Invite invite=resolve(code);\n  if (invite == null)   throw new IllegalArgumentException(\"The provided Invite code was invalid, thus JDA cannot attempt\" + \"to delete it! Provided Code: \" + code);\n  delete(invite,jda);\n}"}
{"ids": "5152", "raw_code": "private void updateHeaderSeparator(){\n  final String bestDateTimePattern=DateFormatUtils.getBestDateTimePattern(mCurrentLocale,(mIs24HourView) ? \"Hm\" : \"hm\");\n  final String separatorText;\n  final char[] hourFormats={'H','h','K','k'};\n  int hIndex=lastIndexOfAny(bestDateTimePattern,hourFormats);\n  if (hIndex == -1) {\n    separatorText=\":\";\n  }\n else {\n    separatorText=Character.toString(bestDateTimePattern.charAt(hIndex + 1));\n  }\n  mSeparatorView.setText(separatorText);\n}"}
{"ids": "1762", "raw_code": "protected void connectionFailed(Channel failedChannel,IOException cause){\n  failureCause=IOExceptionSupport.create(cause);\n  channel=failedChannel;\n  connected.set(false);\n  connectLatch.countDown();\n}"}
{"ids": "6061", "raw_code": "public Drawable createFromPath(String pathName){\n  return Drawable.createFromPath(pathName);\n}"}
{"ids": "43971", "raw_code": "@Override public void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {\n  if (reader == null) {\n    throw new IllegalArgumentException(\"Reader cannot be 'null'\");\n  }\n  if (baseURI == null) {\n    throw new IllegalArgumentException(\"Base URI cannot be 'null'\");\n  }\n  InputSource inputSource=new InputSource(reader);\n  inputSource.setSystemId(baseURI);\n  parse(inputSource);\n}"}
{"ids": "3776", "raw_code": "final public void print(double v){\n  try {\n    _out.print(v);\n  }\n catch (  IOException e) {\n    log.log(Level.FINE,e.toString(),e);\n  }\n}"}
{"ids": "24250", "raw_code": "public static boolean isEmpty(String string){\n  return string == null || string.length() == 0;\n}"}
{"ids": "18253", "raw_code": "public static boolean isXML11ValidName(String name){\n  int length=name.length();\n  if (length == 0)   return false;\n  int i=1;\n  char ch=name.charAt(0);\n  if (!isXML11NameStart(ch)) {\n    if (length > 1 && isXML11NameHighSurrogate(ch)) {\n      char ch2=name.charAt(1);\n      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NameStart(XMLChar.supplemental(ch,ch2))) {\n        return false;\n      }\n      i=2;\n    }\n else {\n      return false;\n    }\n  }\n  while (i < length) {\n    ch=name.charAt(i);\n    if (!isXML11Name(ch)) {\n      if (++i < length && isXML11NameHighSurrogate(ch)) {\n        char ch2=name.charAt(i);\n        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {\n          return false;\n        }\n      }\n else {\n        return false;\n      }\n    }\n    ++i;\n  }\n  return true;\n}"}
{"ids": "8819", "raw_code": "public void reset(){\n  mExpectedEvents.clear();\n  mExpectedInterrupt=false;\n  mReplaying=false;\n}"}
{"ids": "45364", "raw_code": "String generateDigest(File fileDir,String fileName){\n  final String algorithm=\"SHA-1\";\n  InputStream fileStream=null;\n  DigestInputStream d=null;\n  try {\n    fileStream=getFileStream(fileDir,fileName);\n    MessageDigest md=MessageDigest.getInstance(algorithm);\n    d=new DigestInputStream(fileStream,md);\n    byte[] buffer=new byte[8196];\n    while (d.read(buffer) != -1) {\n    }\n    return toHexString(md.digest());\n  }\n catch (  NoSuchAlgorithmException e) {\n    return algorithm + \" not found\";\n  }\ncatch (  IOException e) {\n    CLog.e(e);\n  }\n finally {\n    StreamUtil.closeStream(d);\n    StreamUtil.closeStream(fileStream);\n  }\n  return \"failed to generate digest\";\n}"}
{"ids": "24889", "raw_code": "public AgentConfig environmentToConfiguration(Environment environment,long platformId){\n  AgentConfig agentConfiguration=new AgentConfig();\n  agentConfiguration.setPlatformId(platformId);\n  if (CollectionUtils.isNotEmpty(environment.getPlatformSensorConfigs())) {\n    Collection<PlatformSensorTypeConfig> platformSensorTypeConfigs=new ArrayList<>();\n    for (    IPlatformSensorConfig platformSensorConfig : environment.getPlatformSensorConfigs()) {\n      if (platformSensorConfig.isActive()) {\n        platformSensorTypeConfigs.add(getPlatformSensorTypeConfig(platformId,platformSensorConfig));\n      }\n    }\n    agentConfiguration.setPlatformSensorTypeConfigs(platformSensorTypeConfigs);\n  }\n else {\n    agentConfiguration.setPlatformSensorTypeConfigs(Collections.<PlatformSensorTypeConfig>emptyList());\n  }\n  if (CollectionUtils.isNotEmpty(environment.getMethodSensorConfigs())) {\n    Collection<MethodSensorTypeConfig> methodSensorTypeConfigs=new ArrayList<>();\n    for (    IMethodSensorConfig methodSensorConfig : environment.getMethodSensorConfigs()) {\n      methodSensorTypeConfigs.add(getMethodSensorTypeConfig(platformId,methodSensorConfig));\n    }\n    agentConfiguration.setMethodSensorTypeConfigs(methodSensorTypeConfigs);\n  }\n else {\n    agentConfiguration.setMethodSensorTypeConfigs(Collections.<MethodSensorTypeConfig>emptyList());\n  }\n  IExceptionSensorConfig exceptionSensorConfig=environment.getExceptionSensorConfig();\n  if (null != exceptionSensorConfig) {\n    agentConfiguration.setExceptionSensorTypeConfig(getExceptionSensorTypeConfig(platformId,exceptionSensorConfig));\n  }\n  JmxSensorConfig jmxSensorConfig=environment.getJmxSensorConfig();\n  if (null != jmxSensorConfig) {\n    agentConfiguration.setJmxSensorTypeConfig(getJmxSensorTypeConfig(platformId,jmxSensorConfig));\n  }\n  IStrategyConfig bufferStrategyConfig=environment.getBufferStrategyConfig();\n  agentConfiguration.setBufferStrategyConfig(new StrategyConfig(bufferStrategyConfig.getClassName(),bufferStrategyConfig.getSettings()));\n  IStrategyConfig sendingStrategyConfig=environment.getSendingStrategyConfig();\n  agentConfiguration.setSendingStrategyConfig(new StrategyConfig(sendingStrategyConfig.getClassName(),sendingStrategyConfig.getSettings()));\n  Collection<ExcludeRule> excludeRules=configurationResolver.getAllExcludeRules(environment);\n  if (CollectionUtils.isNotEmpty(excludeRules)) {\n    Collection<IMatchPattern> excludeClassesPatterns=new ArrayList<>();\n    for (    ExcludeRule excludeRule : excludeRules) {\n      excludeClassesPatterns.add(PatternFactory.getPattern(excludeRule.getClassName()));\n    }\n    agentConfiguration.setExcludeClassesPatterns(excludeClassesPatterns);\n  }\n else {\n    agentConfiguration.setExcludeClassesPatterns(Collections.<IMatchPattern>emptyList());\n  }\n  agentConfiguration.setConfigurationInfo(configurationResolver.getConfigurationInfo(environment));\n  return agentConfiguration;\n}"}
{"ids": "82573", "raw_code": "public static java.lang.Double valueOf(java.lang.String s) throws java.lang.NumberFormatException {\n  return new Double(parseDouble(s));\n}"}
{"ids": "69593", "raw_code": "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    s.defaultWriteObject();\n    for (Node<E> p=first; p != null; p=p.next)     s.writeObject(p.item);\n    s.writeObject(null);\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "79768", "raw_code": "public boolean isParseRobotsTxt(){\n  return parseRobotsTxt;\n}"}
{"ids": "44938", "raw_code": "public String byteArrayToBase64(byte[] bytes){\n  return Base64.encodeBase64String(bytes);\n}"}
{"ids": "24362", "raw_code": "private void validateIndexStorage(){\n  CloseableIterator<IndexStoreEntry> iterator=null;\n  try {\n    ArrayList structureList=new ArrayList();\n    iterator=indexDataStructure.iterator(null);\n    while (iterator.hasNext()) {\n      IndexStoreEntry ie=iterator.next();\n      if (entriesContains(ie)) {\n        structureList.add(ie);\n      }\n else {\n        fail(\"IndexDataStructure returned an IndexEntry that should not be present:\" + ie);\n      }\n    }\n    assertEquals(\"Expected Number of entries did not match\",entries.size(),structureList.size());\n  }\n  finally {\n    if (iterator != null) {\n      iterator.close();\n    }\n  }\n}"}
{"ids": "68092", "raw_code": "protected void onException(final WroRuntimeException e){\n  throw e;\n}"}
{"ids": "16703", "raw_code": "private int quantize(long x){\n  return 1 + (int)Math.floor(Math.log(x) / Math.log(quantizationBase));\n}"}
{"ids": "86806", "raw_code": "public static boolean validateOutputDirectory(File directory){\n  if (directory.exists()) {\n    Diagnostic.error(ErrorType.DIRECTORY_EXISTS,directory.getPath());\n    return false;\n  }\n  return true;\n}"}
{"ids": "38123", "raw_code": "@Override public double logDensity(double value){\n  updateBoundariesAndOrWeights();\n  if (m_Boundaries == null) {\n    return Math.log(Double.MIN_VALUE);\n  }\n  int index=Arrays.binarySearch(m_Boundaries,value);\n  if ((index == -1) || (index == -m_Boundaries.length - 1)) {\n    double val=0;\n    if (index == -1) {\n      val=m_TM.firstKey() - value;\n    }\n else {\n      val=value - m_TM.lastKey();\n    }\n    return (CONST - Math.log(m_Width) - 0.5 * (val * val / (m_Width * m_Width))) - Math.log(m_SumOfWeights + 2);\n  }\n  if (index == m_Boundaries.length - 1) {\n    index--;\n  }\n else {\n    if (index < 0) {\n      index=-index - 2;\n    }\n  }\n  double width=m_Boundaries[index + 1] - m_Boundaries[index];\n  double densSmearedOut=1.0 / ((m_SumOfWeights + 2) * (m_Boundaries[m_Boundaries.length - 1] - m_Boundaries[0]));\n  if (m_Weights[index] <= 0) {\n    return Math.log(densSmearedOut);\n  }\n else {\n    return Math.log(densSmearedOut + m_Weights[index] / ((m_SumOfWeights + 2) * width));\n  }\n}"}
{"ids": "5445", "raw_code": "public void drawPoint(Graphics sc,IPoint p){\n  double x1=p.getX();\n  double y1=p.getY();\n  sc.drawOval((int)x1 - 2,(int)y1 - 2,5,5);\n}"}
{"ids": "72376", "raw_code": "private static int computeCapacity(final int expectedSize){\n  if (expectedSize == 0) {\n    return 1;\n  }\n  final int capacity=(int)FastMath.ceil(expectedSize / LOAD_FACTOR);\n  final int powerOfTwo=Integer.highestOneBit(capacity);\n  if (powerOfTwo == capacity) {\n    return capacity;\n  }\n  return nextPowerOfTwo(capacity);\n}"}
{"ids": "46174", "raw_code": "protected void a_processJunction_nns(String name,Continuation cont) throws NamingException {\n  if (name.equals(\"\")) {\n    NameNotFoundException e=new NameNotFoundException();\n    cont.setErrorNNS(this,name);\n    throw cont.fillInException(e);\n  }\n  try {\n    Object target=a_lookup(name,cont);\n    if (cont.isContinue())     cont.appendRemainingComponent(\"\");\n else {\n      cont.setContinueNNS(target,name,this);\n    }\n  }\n catch (  NamingException e) {\n    e.appendRemainingComponent(\"\");\n    throw e;\n  }\n}"}
{"ids": "57323", "raw_code": "public void addCallback(Callback callback){\n  if (!mCallbacks.contains(callback)) {\n    mCallbacks.add(callback);\n  }\n}"}
{"ids": "18458", "raw_code": "public JTidyDocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {\n  super(settings);\n  try {\n    ClassLoader classLoader=ClassLoader.getSystemClassLoader();\n    Class tidyClass=classLoader.loadClass(\"org.w3c.tidy.Tidy\");\n    tidyConstructor=tidyClass.getConstructor(NO_CLASSES);\n    parseDOMMethod=tidyClass.getMethod(\"parseDOM\",new Class[]{java.io.InputStream.class,java.io.OutputStream.class});\n    domImpl=new JTidyDOMImplementation();\n  }\n catch (  Exception ex) {\n    throw new DOMTestIncompatibleException(ex,null);\n  }\n  if (settings != null) {\n    for (int i=0; i < settings.length; i++) {\n    }\n  }\n}"}
{"ids": "11786", "raw_code": "public void enqueue(TerminatingRunnable r){\nsynchronized (queue) {\n    queue.add(r);\n    queue.notifyAll();\n  }\n}"}
{"ids": "57805", "raw_code": "public void addCertificatesAndCRLs(CertStore certStore) throws CertStoreException, CMSException {\n  certs.addAll(CMSUtils.getCertificatesFromStore(certStore));\n  crls.addAll(CMSUtils.getCRLsFromStore(certStore));\n}"}
{"ids": "48987", "raw_code": "void disconnect(){\nsynchronized (lock) {\n    disconnected=true;\n    lock.notifyAll();\n  }\n}"}
{"ids": "77112", "raw_code": "public SimpleRateLimiter(double mbPerSec){\n  setMBPerSec(mbPerSec);\n  lastNS=System.nanoTime();\n}"}
{"ids": "86090", "raw_code": "private long wc(String text){\n  long wc=0;\n  String[] lines=text.split(\"\\n\");\n  for (  String line : lines) {\n    wc+=line.split(\"\\\\s+\").length;\n  }\n  return wc;\n}"}
{"ids": "54771", "raw_code": "public boolean unbind(){\n  boolean worked=true;\n  if (m_rxThread == null)   worked=false;\n else   m_stopRx=true;\n  return worked;\n}"}
{"ids": "74278", "raw_code": "public void register(Schedule schedule){\n  Integer oldSize=Integer.valueOf(_scheduleHashTable.size());\n  _scheduleHashTable.put(schedule.getId(),schedule);\n  int id=Integer.parseInt(schedule.getId());\n  if (id > _id) {\n    _id=id;\n  }\n  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_scheduleHashTable.size()));\n}"}
{"ids": "44659", "raw_code": "public final void writeMapleAsciiString(final String s){\n  writeShort((short)s.length());\n  writeAsciiString(s);\n}"}
{"ids": "39071", "raw_code": "public static boolean hasUID(String classname){\n  boolean result;\n  try {\n    result=hasUID(Class.forName(classname));\n  }\n catch (  Exception e) {\n    result=false;\n  }\n  return result;\n}"}
{"ids": "12142", "raw_code": "public static boolean removeDirectory(String pathToDir){\n  return deleteRecursive(new File(pathToDir));\n}"}
{"ids": "73813", "raw_code": "public static final boolean validateGroupName(String sGroupName){\n  if (sGroupName.length() == 0) {\n    return false;\n  }\n  return sGroupName.matches(\"^.{8}$\");\n}"}
{"ids": "44857", "raw_code": "private void _init(Configuration conf){\n  try {\n    if (this.id > 0) {\n      DefaultListener d=new DefaultListener();\n      d.upgrade(conf,this);\n    }\n    if (!X.isEmpty(listener)) {\n      String name=listener;\n      if (name != null) {\n        try {\n          Class<?> c=Class.forName(name,true,classLoader);\n          Object o=c.newInstance();\n          if (o instanceof IListener) {\n            log.info(\"initializing: \" + name);\n            IListener l=(IListener)o;\n            l.upgrade(conf,this);\n            l.onStart(conf,this);\n          }\n        }\n catch (        Throwable e) {\n          log.error(this.name + \", listener=\" + name,e);\n        }\n      }\n    }\n  }\n catch (  Throwable e) {\n    log.error(e.getMessage(),e);\n  }\n}"}
{"ids": "4001", "raw_code": "private boolean isScanRootAvailable(URL url){\n  for (  ScanRoot scanRoot : _pendingScanRoots) {\n    if (url.equals(scanRoot.getUrl()))     return false;\n  }\n  return true;\n}"}
{"ids": "10428", "raw_code": "public SequentialListenerManager addListenerExecutor(int index,Listener listener,ListenerExecutor executor){\n  if (listeners.contains(listener))   throw new IllegalArgumentException(\"Cannot add listener twice \" + listener);\n  listeners.add(index,listener);\n  listenerExecutors.add(index,executor);\n  return this;\n}"}
{"ids": "35310", "raw_code": "private boolean hasAsParent(INode child,ICompositeNode directParent){\n  INode parent=child;\n  while (parent != null) {\n    if (parent == directParent)     return true;\n    parent=parent.getParent();\n  }\n  return false;\n}"}
{"ids": "79900", "raw_code": "public void clearMarkers(){\n  mGoogleMap.clear();\n  markers.clear();\n}"}
{"ids": "22787", "raw_code": "@Override public double cloudletSubmit(Cloudlet cl){\n  return cloudletSubmit(cl,0);\n}"}
{"ids": "55449", "raw_code": "public void verifyingToken(){\n  setTokenInfo(\"Verifying login..\");\n  verifyToken.setEnabled(false);\n}"}
{"ids": "22258", "raw_code": "public Certificate buildCertificate(String certString) throws InvalidCertificate {\n  try {\n    String base64Cert=formatCertificate(certString);\n    InputStream inBytes=new ByteArrayInputStream(base64Cert.getBytes());\n    CertificateFactory cf=CertificateFactory.getInstance(\"X.509\");\n    assert inBytes.available() > 0;\n    Certificate certificate=cf.generateCertificate(inBytes);\n    inBytes.close();\n    return certificate;\n  }\n catch (  Exception e) {\n    log.debug(\"buildCertificate: error \" + e + \" converted to InvalidCertificate.\");\n    throw FaultUtil.InvalidCertificate(\"Could not build certificate\");\n  }\n}"}
{"ids": "3363", "raw_code": "private PageLeafImpl compact(TableKelp table){\n  long now=CurrentTime.currentTime() / 1000;\n  Set<PageLeafEntry> entries=fillEntries(table);\n  ArrayList<BlockLeaf> blocks=new ArrayList<>();\n  BlockLeaf block=new BlockLeaf(getId());\n  blocks.add(block);\n  Row row=table.row();\n  for (  PageLeafEntry entry : entries) {\n    if (entry.getCode() != INSERT && entry.getExpires() <= now) {\n      continue;\n    }\n    while (!block.addEntry(row,entry)) {\n      block=new BlockLeaf(getId());\n      blocks.add(block);\n    }\n  }\n  PageLeafImpl newPage=new PageLeafImpl(getId(),getNextId(),getSequence(),_table,getMinKey(),getMaxKey(),blocks);\n  newPage.validate(table);\n  newPage.toSorted(table);\n  if (isDirty()) {\n    newPage.setDirty();\n  }\n  if (_stub != null) {\n    _stub.copyToCompact(newPage);\n  }\n  return newPage;\n}"}
{"ids": "62139", "raw_code": "public SabresQuery(Class<T> clazz){\n  this.clazz=clazz;\n  name=clazz.getSimpleName();\n  innerQueries=null;\n}"}
{"ids": "57583", "raw_code": "SNode awaitFulfill(SNode s,boolean timed,long nanos){\n  final long deadline=timed ? System.nanoTime() + nanos : 0L;\n  Thread w=Thread.currentThread();\n  int spins=(shouldSpin(s) ? (timed ? maxTimedSpins : maxUntimedSpins) : 0);\n  for (; ; ) {\n    if (w.isInterrupted())     s.tryCancel();\n    SNode m=s.match;\n    if (m != null)     return m;\n    if (timed) {\n      nanos=deadline - System.nanoTime();\n      if (nanos <= 0L) {\n        s.tryCancel();\n        continue;\n      }\n    }\n    if (spins > 0)     spins=shouldSpin(s) ? (spins - 1) : 0;\n else     if (s.waiter == null)     s.waiter=w;\n else     if (!timed)     LockSupport.park(this);\n else     if (nanos > spinForTimeoutThreshold)     LockSupport.parkNanos(this,nanos);\n  }\n}"}
{"ids": "39987", "raw_code": "public String backupNow(String backupFilePrefix) throws McException, IOException {\n  _logger.debug(\"Backup triggered.\");\n  return Backup.backup(backupFilePrefix);\n}"}
{"ids": "43057", "raw_code": "public static void CF7(double[] x,double[] f,double[] c,int nx){\n  double sum1=0.0;\n  double sum2=0.0;\n  double yj;\n  for (int j=2; j <= nx; j++) {\n    if (j % 2 == 1) {\n      yj=x[j - 1] - Math.cos(6.0 * PI * x[0] + j * PI / nx);\n      sum1+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;\n    }\n else {\n      yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);\n      if (j == 2 || j == 4) {\n        sum2+=yj * yj;\n      }\n else {\n        sum2+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;\n      }\n    }\n  }\n  f[0]=x[0] + sum1;\n  f[1]=(1.0 - x[0]) * (1.0 - x[0]) + sum2;\n  c[0]=x[1] - Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - MYSIGN((x[0] - 0.5) * (1.0 - x[0])) * Math.sqrt(Math.abs((x[0] - 0.5) * (1.0 - x[0])));\n  c[1]=x[3] - Math.sin(6.0 * x[0] * PI + 4.0 * PI / nx) - MYSIGN(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])) * Math.sqrt(Math.abs(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])));\n}"}
{"ids": "72661", "raw_code": "void fullyUnlock(){\n  takeLock.unlock();\n  putLock.unlock();\n}"}
{"ids": "21549", "raw_code": "public boolean isClusteredHost(StorageSystem storage,List<Initiator> initiators){\n  return isClusteredHost(storage,initiators,null);\n}"}
{"ids": "38755", "raw_code": "public static List<SubstringReplacerMatchRule> matchRulesFromInternal(String matchReplaceDetails,Instances inputStructure,String statusMessagePrefix,Logger log,Environment env){\n  List<SubstringReplacerMatchRule> matchRules=new ArrayList<SubstringReplacerMatchRule>();\n  String[] mrParts=matchReplaceDetails.split(\"@@match-replace@@\");\n  for (  String p : mrParts) {\n    SubstringReplacerMatchRule mr=new SubstringReplacerMatchRule(p.trim());\n    mr.m_statusMessagePrefix=statusMessagePrefix;\n    mr.m_logger=log;\n    mr.init(env,inputStructure);\n    matchRules.add(mr);\n  }\n  return matchRules;\n}"}
{"ids": "56169", "raw_code": "private static void time(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO,boolean reducedPrec,boolean datePresent){\n  boolean hour=fields.remove(DateTimeFieldType.hourOfDay());\n  boolean minute=fields.remove(DateTimeFieldType.minuteOfHour());\n  boolean second=fields.remove(DateTimeFieldType.secondOfMinute());\n  boolean milli=fields.remove(DateTimeFieldType.millisOfSecond());\n  if (!hour && !minute && !second&& !milli) {\n    return;\n  }\n  if (hour || minute || second|| milli) {\n    if (strictISO && reducedPrec) {\n      throw new IllegalArgumentException(\"No valid ISO8601 format for fields because Date was reduced precision: \" + fields);\n    }\n    if (datePresent) {\n      bld.appendLiteral('T');\n    }\n  }\n  if (hour && minute && second || (hour && !second && !milli)) {\n  }\n else {\n    if (strictISO && datePresent) {\n      throw new IllegalArgumentException(\"No valid ISO8601 format for fields because Time was truncated: \" + fields);\n    }\n    if (!hour && (minute && second || (minute && !milli) || second)) {\n    }\n else {\n      if (strictISO) {\n        throw new IllegalArgumentException(\"No valid ISO8601 format for fields: \" + fields);\n      }\n    }\n  }\n  if (hour) {\n    bld.appendHourOfDay(2);\n  }\n else   if (minute || second || milli) {\n    bld.appendLiteral('-');\n  }\n  if (extended && hour && minute) {\n    bld.appendLiteral(':');\n  }\n  if (minute) {\n    bld.appendMinuteOfHour(2);\n  }\n else   if (second || milli) {\n    bld.appendLiteral('-');\n  }\n  if (extended && minute && second) {\n    bld.appendLiteral(':');\n  }\n  if (second) {\n    bld.appendSecondOfMinute(2);\n  }\n else   if (milli) {\n    bld.appendLiteral('-');\n  }\n  if (milli) {\n    bld.appendLiteral('.');\n    bld.appendMillisOfSecond(3);\n  }\n}"}
{"ids": "26067", "raw_code": "public static Object[] mergeAndExtractParams(Map<String,? extends Object> globalConfig,Map<String,? extends Object> localParams,Collection<String> ignoreParams,Map<String,ExternalResourceDescription> resources){\n  Set<String> uniqueParams=new HashSet<>();\n  uniqueParams.addAll(localParams.keySet());\n  uniqueParams.addAll(globalConfig.keySet());\n  if (ignoreParams != null) {\n    uniqueParams.removeAll(ignoreParams);\n  }\n  Object[] params=new Object[resources.size() * 2 + uniqueParams.size() * 2];\n  int i=0;\n  for (  Entry<String,ExternalResourceDescription> entry : resources.entrySet()) {\n    params[i++]=entry.getKey();\n    params[i++]=entry.getValue();\n  }\n  for (  String key : uniqueParams) {\n    params[i++]=key;\n    if (localParams.containsKey(key)) {\n      params[i++]=CpeBuilderUtils.convertToParameterValue(localParams.get(key));\n    }\n else {\n      params[i++]=CpeBuilderUtils.convertToParameterValue(globalConfig.get(key));\n    }\n  }\n  return params;\n}"}
{"ids": "72878", "raw_code": "public void storeProperties(String artifact,String version,Properties props) throws IOException {\n  Path propertiesFile=getPropertiesFile(artifact,version);\n  Path dir=propertiesFile.getParent();\n  if (!Files.exists(dir)) {\n    Files.createDirectories(dir);\n  }\n  try (OutputStream out=new BufferedOutputStream(newOutputStream(propertiesFile))){\n    props.store(out,null);\n  }\n }"}
{"ids": "54269", "raw_code": "public static String makeDescriptor(Class[] params,Class retType){\n  StringBuffer sbuf=new StringBuffer();\n  sbuf.append('(');\n  for (int i=0; i < params.length; i++)   makeDesc(sbuf,params[i]);\n  sbuf.append(')');\n  if (retType != null)   makeDesc(sbuf,retType);\n  return sbuf.toString();\n}"}
{"ids": "53106", "raw_code": "public boolean isLoggable(Level lev){\n  return logger.isLoggable(lev);\n}"}
{"ids": "81749", "raw_code": "int parseHour(String source,char patternChar,int offset) throws ParseException {\n  int min=(patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER) ? 1 : 0;\n  int max=((patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER) ? 23 : 11) + min;\n  return parseNumber(source,offset,\"hour\",min,max) - min;\n}"}
{"ids": "52238", "raw_code": "@Override public boolean supportsKnowledge(){\n  return false;\n}"}
{"ids": "67235", "raw_code": "@DataProvider public Object[][] invalidIdProvider(){\n  return new Object[][]{new Object[]{\"31455824-6676-4cd8-8fd1-85ce0013f2d7\",\"Experiment \\\"31455824-6676-4cd8-8fd1-85ce0013f2d7\\\" not found\",HttpStatus.SC_NOT_FOUND},new Object[]{\"00000000-0000-0000-0000-000000000000\",\"Experiment \\\"00000000-0000-0000-0000-000000000000\\\" not found\",HttpStatus.SC_NOT_FOUND},new Object[]{\"foobar\",\"com.intuit.wasabi.experimentobjects.exceptions.InvalidIdentifierException: Invalid experiment identifier \\\"foobar\\\"\",HttpStatus.SC_INTERNAL_SERVER_ERROR},new Object[]{\"0\",\"com.intuit.wasabi.experimentobjects.exceptions.InvalidIdentifierException: Invalid experiment identifier \\\"0\\\"\",HttpStatus.SC_INTERNAL_SERVER_ERROR},new Object[]{\"../applications\",\"The server was unable to process the request\",HttpStatus.SC_INTERNAL_SERVER_ERROR}};\n}"}
{"ids": "18366", "raw_code": "public final static HeaderElement parseHeaderElement(final String value,HeaderValueParser parser) throws ParseException {\n  if (value == null) {\n    throw new IllegalArgumentException(\"Value to parse may not be null\");\n  }\n  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;\n  CharArrayBuffer buffer=new CharArrayBuffer(value.length());\n  buffer.append(value);\n  ParserCursor cursor=new ParserCursor(0,value.length());\n  return parser.parseHeaderElement(buffer,cursor);\n}"}
{"ids": "77956", "raw_code": "private void clearState(){\n  allocatedResources.clear();\n  requestsToCountMap.clear();\n  requestsQueue.clear();\n}"}
{"ids": "77377", "raw_code": "public static double[] vectorBoxCorner(double[] center,double[] result,double distance,boolean upperRight){\n  if (result == null || result.length != center.length) {\n    result=new double[center.length];\n  }\n  if (upperRight == false) {\n    distance=-distance;\n  }\n  distance=SIN_PI_DIV_4 * distance;\n  for (int i=0; i < center.length; i++) {\n    result[i]=center[i] + distance;\n  }\n  return result;\n}"}
{"ids": "63197", "raw_code": "public void toArray(int[] array){\n  System.arraycopy(data,0,array,0,size);\n}"}
{"ids": "15940", "raw_code": "public FixedSecureRandom(boolean intPad,byte[][] values){\n  ByteArrayOutputStream bOut=new ByteArrayOutputStream();\n  for (int i=0; i != values.length; i++) {\n    try {\n      bOut.write(values[i]);\n    }\n catch (    IOException e) {\n      throw new IllegalArgumentException(\"can't save value array.\");\n    }\n  }\n  _data=bOut.toByteArray();\n  if (intPad) {\n    _intPad=_data.length % 4;\n  }\n}"}
{"ids": "36238", "raw_code": "@Override protected void ensureNumberOfColumns(int numberOfColumns){\n  if (data.length >= numberOfColumns) {\n    return;\n  }\n  long[] newData=new long[numberOfColumns];\n  System.arraycopy(data,0,newData,0,data.length);\n  data=newData;\n}"}
{"ids": "26896", "raw_code": "public void invokeHookSpoutAck(Object messageId,long completeLatencyNs){\n  if (taskHooks.size() != 0) {\n    SpoutAckInfo ackInfo=new SpoutAckInfo(messageId,getThisTaskId(),completeLatencyNs / Constants.MILLISECONDS_TO_NANOSECONDS);\n    for (    ITaskHook taskHook : taskHooks) {\n      taskHook.spoutAck(ackInfo);\n    }\n  }\n}"}
{"ids": "25498", "raw_code": "public static float wrap(float value){\n  if (value >= 0.f) {\n    return value - (int)value;\n  }\n  float wrappedValue=value - (float)Math.floor(value);\n  if (wrappedValue >= 1.f) {\n    wrappedValue-=1.f;\n  }\n  return wrappedValue;\n}"}
{"ids": "48950", "raw_code": "StubSkeletonWriter(BatchEnvironment env,RemoteClass remoteClass,StubVersion version){\n  this.env=env;\n  this.remoteClass=remoteClass;\n  this.version=version;\n  stubClassName=Util.binaryNameOf(remoteClass.classDoc()) + \"_Stub\";\n  skeletonClassName=Util.binaryNameOf(remoteClass.classDoc()) + \"_Skel\";\n  int i=stubClassName.lastIndexOf('.');\n  packageName=(i != -1 ? stubClassName.substring(0,i) : \"\");\n  stubClassSimpleName=stubClassName.substring(i + 1);\n  skeletonClassSimpleName=skeletonClassName.substring(i + 1);\n  remoteMethods=remoteClass.remoteMethods();\n  methodFieldNames=nameMethodFields(remoteMethods);\n}"}
{"ids": "65016", "raw_code": "public void put(String key,Object value,boolean errorOnFail){\n  if (value == null) {\n    putNull(key);\n  }\n else   if (value instanceof Boolean) {\n    put(key,(Boolean)value);\n  }\n else   if (value instanceof Byte) {\n    put(key,(Byte)value);\n  }\n else   if (value instanceof Double) {\n    put(key,(Double)value);\n  }\n else   if (value instanceof Float) {\n    put(key,(Float)value);\n  }\n else   if (value instanceof Integer) {\n    put(key,(Integer)value);\n  }\n else   if (value instanceof Long) {\n    put(key,(Long)value);\n  }\n else   if (value instanceof Short) {\n    put(key,(Short)value);\n  }\n else   if (value instanceof String) {\n    put(key,(String)value);\n  }\n else   if (value instanceof byte[]) {\n    put(key,(byte[])value);\n  }\n else   if (errorOnFail) {\n    throw new UnsupportedOperationException(\"Could not handle type \" + value.getClass());\n  }\n}"}
{"ids": "86895", "raw_code": "private void step(){\n  casings.forEach(null);\n  casings.forEach(null);\n  casings.forEach(null);\n  stepPipes();\n  stepForwarders();\n}"}
{"ids": "30138", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return HOST;\ncase 2:\n  return PORT;\ncase 3:\nreturn ID;\ncase 4:\nreturn STATE;\ncase 5:\nreturn TIMESTAMP;\ncase 6:\nreturn VERSION;\ndefault :\nreturn null;\n}\n}"}
{"ids": "28042", "raw_code": "private static DoubleMatrix2D xdistanceOld(DoubleMatrix2D matrix,int norm){\n  return null;\n}"}
{"ids": "20021", "raw_code": "public Map<String,String> map(){\n  return hashMap();\n}"}
{"ids": "45158", "raw_code": "private String discoverTagName(RSyntaxDocument doc,int dot){\n  Stack stack=new Stack();\n  Element root=doc.getDefaultRootElement();\n  int curLine=root.getElementIndex(dot);\n  for (int i=0; i <= curLine; i++) {\n    Token t=doc.getTokenListForLine(i);\n    while (t != null && t.isPaintable()) {\n      if (t.type == Token.MARKUP_TAG_DELIMITER) {\n        if (t.isSingleChar('<') || t.isSingleChar('[')) {\n          t=t.getNextToken();\n          while (t != null && t.isPaintable()) {\n            if (t.type == Token.MARKUP_TAG_NAME || t.type == Token.MARKUP_TAG_ATTRIBUTE) {\n              stack.push(t.getLexeme());\n              break;\n            }\n            t=t.getNextToken();\n          }\n        }\n else         if (t.textCount == 2 && t.text[t.textOffset] == '/' && (t.text[t.textOffset + 1] == '>' || t.text[t.textOffset + 1] == ']')) {\n          if (!stack.isEmpty()) {\n            stack.pop();\n          }\n        }\n else         if (t.textCount == 2 && (t.text[t.textOffset] == '<' || t.text[t.textOffset] == '[') && t.text[t.textOffset + 1] == '/') {\n          String tagName=null;\n          if (!stack.isEmpty()) {\n            tagName=(String)stack.pop();\n          }\n          if (t.offset + t.textCount >= dot) {\n            return tagName;\n          }\n        }\n      }\n      t=t.getNextToken();\n    }\n  }\n  return null;\n}"}
{"ids": "31637", "raw_code": "private static void addQueryFields(Document doc,Node parent,Collection<PojoField> fields){\n  if (!fields.isEmpty()) {\n    Element prop=addProperty(doc,parent,\"fields\",null);\n    Element map=addElement(doc,prop,\"util:map\",\"map-class\",\"java.util.LinkedHashMap\");\n    for (    PojoField field : fields)     addElement(doc,map,\"entry\",\"key\",field.javaName(),\"value\",GeneratorUtils.boxPrimitiveType(field.javaTypeName()));\n  }\n}"}
{"ids": "4041", "raw_code": "protected boolean doStart(){\n  if (!_lifecycle.isActive()) {\n    return false;\n  }\n  if (!isEnable()) {\n    return false;\n  }\n  int startingCount=_startingCount.getAndIncrement();\n  int threadCount=_threadCount.get() + startingCount;\n  if (_threadMax < threadCount) {\n    _startingCount.decrementAndGet();\n    onThreadMax();\n    return false;\n  }\n else   if (isIdleTooLow(startingCount)) {\n    return true;\n  }\n else {\n    _startingCount.decrementAndGet();\n    return false;\n  }\n}"}
{"ids": "38899", "raw_code": "@Override public String globalInfo(){\n  return \"Visualize incoming data/training/test sets in a scatter \" + \"plot matrix.\";\n}"}
{"ids": "86760", "raw_code": "public static long streamSkip(InputStream stream,long count) throws IOException {\n  long skipped=stream.skip(count);\n  if (skipped < 1) {\n    final byte[] temp=new byte[1024];\n    skipped=stream.read(temp,0,Math.min((int)count,1024));\n  }\n  return skipped;\n}"}
{"ids": "72084", "raw_code": "public boolean managedObjectExists(ManagedObjectPath<?,?> path){\n  DN targetDN=DNBuilder.create(path);\n  try {\n    return configRepository.getEntry(targetDN) != null;\n  }\n catch (  ConfigException e) {\n    return false;\n  }\n}"}
{"ids": "42118", "raw_code": "public Vector2 rotate(double theta){\n  double cos=Math.cos(theta);\n  double sin=Math.sin(theta);\n  double x=this.x;\n  double y=this.y;\n  this.x=x * cos - y * sin;\n  this.y=x * sin + y * cos;\n  return this;\n}"}
{"ids": "46278", "raw_code": "private static int[][] regroupHistogram(int[][] matrix,int[] groups){\n  long oldEntries=0;\n  for (int i=0; i < matrix.length; i++) {\n    oldEntries+=matrix[i].length - 1;\n  }\n  long newEntries=0;\n  for (int ni=0; ni < groups.length; ni++) {\n    newEntries+=groups[ni];\n  }\n  if (newEntries > oldEntries) {\n    int newlen=groups.length;\n    long ok=oldEntries;\n    for (int ni=0; ni < groups.length; ni++) {\n      if (ok < groups[ni]) {\n        int[] newGroups=new int[ni + 1];\n        System.arraycopy(groups,0,newGroups,0,ni + 1);\n        groups=newGroups;\n        groups[ni]=(int)ok;\n        ok=0;\n        break;\n      }\n      ok-=groups[ni];\n    }\n  }\n else {\n    long excess=oldEntries - newEntries;\n    int[] newGroups=new int[groups.length + 1];\n    System.arraycopy(groups,0,newGroups,0,groups.length);\n    newGroups[groups.length]=(int)excess;\n    groups=newGroups;\n  }\n  int[][] newMatrix=new int[groups.length][];\n  int i=0;\n  int jMin=1;\n  int jMax=matrix[i].length;\n  for (int ni=0; ni < groups.length; ni++) {\n    int groupLength=groups[ni];\n    int[] group=new int[1 + groupLength];\n    long groupWeight=0;\n    newMatrix[ni]=group;\n    int njFill=1;\n    while (njFill < group.length) {\n      int len=group.length - njFill;\n      while (jMin == jMax) {\n        jMin=1;\n        jMax=matrix[++i].length;\n      }\n      if (len > jMax - jMin)       len=jMax - jMin;\n      groupWeight+=(long)matrix[i][0] * len;\n      System.arraycopy(matrix[i],jMax - len,group,njFill,len);\n      jMax-=len;\n      njFill+=len;\n    }\n    Arrays.sort(group,1,group.length);\n    group[0]=(int)((groupWeight + groupLength / 2) / groupLength);\n  }\n  assert (jMin == jMax);\n  assert (i == matrix.length - 1);\n  return newMatrix;\n}"}
{"ids": "83517", "raw_code": "public void removePermission(PermissionType permission){\n  removedPermissions.add(permission);\n}"}
{"ids": "17695", "raw_code": "static void exportPrefs(Preferences prefs,OutputStream stream,boolean withSubTree) throws IOException, BackingStoreException {\n  indent=-1;\n  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(stream,\"UTF-8\"));\n  out.write(HEADER);\n  out.newLine();\n  out.newLine();\n  out.write(DOCTYPE);\n  out.write(\" '\");\n  out.write(PREFS_DTD_NAME);\n  out.write(\"'>\");\n  out.newLine();\n  out.newLine();\n  flushStartTag(\"preferences\",new String[]{\"EXTERNAL_XML_VERSION\"},new String[]{String.valueOf(XML_VERSION)},out);\n  flushStartTag(\"root\",new String[]{\"type\"},new String[]{prefs.isUserNode() ? \"user\" : \"system\"},out);\n  flushEmptyElement(\"map\",out);\n  StringTokenizer ancestors=new StringTokenizer(prefs.absolutePath(),\"/\");\n  exportNode(ancestors,prefs,withSubTree,out);\n  flushEndTag(\"root\",out);\n  flushEndTag(\"preferences\",out);\n  out.flush();\n  out=null;\n}"}
{"ids": "14923", "raw_code": "protected void storeInProfilesMap(Client client){\n  Set parentSet=client.getProperties(PARENT_ID);\n  String clientType=client.getClientType();\n  Map m=getStylesProfileMap(clientType,parentSet);\n  if (m != null) {\n    m.put(clientType,client);\n  }\n  return;\n}"}
{"ids": "49330", "raw_code": "public static int optionLength(String option){\n  if (option.equals(\"-t\"))   return 2;\n  if (option.equals(\"-d\"))   return 2;\n  if (option.equals(\"-x\"))   return 2;\n  return 0;\n}"}
{"ids": "27013", "raw_code": "public final double cos(){\n  return Math.cos(this.radians);\n}"}
{"ids": "35111", "raw_code": "public static FloatBuffer createFloatBuffer(float[] coords){\n  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * SIZEOF_FLOAT);\n  bb.order(ByteOrder.nativeOrder());\n  FloatBuffer fb=bb.asFloatBuffer();\n  fb.put(coords);\n  fb.position(0);\n  return fb;\n}"}
{"ids": "43344", "raw_code": "public IntStreamEx remove(IntPredicate predicate){\n  return filter(predicate.negate());\n}"}
{"ids": "59416", "raw_code": "static void sendRawLine(PircBot bot,BufferedWriter bwriter,String line){\n  if (line.length() > bot.getMaxLineLength() - 2) {\n    line=line.substring(0,bot.getMaxLineLength() - 2);\n  }\nsynchronized (bwriter) {\n    try {\n      bwriter.write(line + \"\\r\\n\");\n      bwriter.flush();\n    }\n catch (    Exception e) {\n    }\n  }\n}"}
{"ids": "70660", "raw_code": "Entry kill(){\n  Entry entry;\n  for (int i=entries.size() - 1; i >= 0; i--) {\n    entry=entries.get(i);\n    if (!entry.dead) {\n      entry.dead=true;\n      return entry;\n    }\n  }\n  throw new IllegalStateException(\"There is no entry to kill\");\n}"}
{"ids": "73829", "raw_code": "public void slotFromLocoAddress(int i,SlotListener l){\n  mLocoAddrHash.put(Integer.valueOf(i),l);\n  LocoNetMessage m=new LocoNetMessage(4);\n  m.setOpCode(LnConstants.OPC_LOCO_ADR);\n  m.setElement(1,(i / 128) & 0x7F);\n  m.setElement(2,i & 0x7F);\n  tc.sendLocoNetMessage(m);\n}"}
{"ids": "66413", "raw_code": "protected void uninstallComponents(){\n  if (scrollableTabLayoutEnabled()) {\n    tabPane.remove(tabScroller.viewport);\n    tabPane.remove(tabScroller.scrollForwardButton);\n    tabPane.remove(tabScroller.scrollBackwardButton);\n    tabScroller=null;\n  }\n}"}
{"ids": "68367", "raw_code": "public void reset(){\n  forms=null;\n}"}
{"ids": "30229", "raw_code": "public static Map<String,String> populateRequestProperties(Map<String,String> requestProperties,int bodyLength,MediaType contentType,MediaType acceptType){\n  Map<String,String> properties;\n  if (requestProperties == null || requestProperties.isEmpty()) {\n    properties=new HashMap<>();\n  }\n else {\n    properties=new HashMap<>(requestProperties);\n  }\n  if (acceptType != null) {\n    properties.put(HeaderNames.ACCEPT,acceptType.toString());\n  }\n  if (contentType != null) {\n    properties.put(HeaderNames.CONTENT_TYPE,contentType.toString());\n  }\n  if (bodyLength > -1) {\n    properties.put(HeaderNames.CONTENT_LENGTH,String.valueOf(bodyLength));\n  }\n  return properties;\n}"}
{"ids": "21619", "raw_code": "public static BlockSnapshotDeleteCompleter createCompleter(DbClient dbClient,BlockSnapshot snapshot,String task){\n  BlockSnapshotDeleteCompleter completer=new BlockSnapshotDeleteCompleter(snapshot,task);\n  if (snapshot.getConsistencyGroup() != null) {\n    List<URI> snapIds=new ArrayList<URI>();\n    List<BlockSnapshot> snaps=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshot,dbClient);\n    for (    BlockSnapshot snap : snaps) {\n      snapIds.add(snap.getId());\n    }\n    completer.addIds(snapIds);\n  }\n  return completer;\n}"}
{"ids": "21504", "raw_code": "private void checkProtocolAlreadyExists(Set<String> protocols,String protocolType){\n  if (!protocols.contains(protocolType)) {\n    protocols.add(protocolType);\n  }\n}"}
{"ids": "85353", "raw_code": "public static boolean isCompositionPlaylist(ResourceByteRangeProvider resourceByteRangeProvider) throws IOException {\n  return IMFCompositionPlaylistType.isCompositionPlaylist(resourceByteRangeProvider);\n}"}
{"ids": "83767", "raw_code": "public static MasterPrivateKey decrypt(String passphrase,byte[] encrypted) throws HyperLedgerException {\n  try {\n    byte[] key=SCrypt.generate(passphrase.getBytes(\"UTF-8\"),BITCOIN_SEED,16384,8,8,32);\n    SecretKeySpec keyspec=new SecretKeySpec(key,\"AES\");\n    Cipher cipher=Cipher.getInstance(\"AES/CBC/PKCS5Padding\",\"BC\");\n    byte[] iv=Arrays.copyOfRange(encrypted,0,16);\n    byte[] data=Arrays.copyOfRange(encrypted,16,encrypted.length);\n    cipher.init(Cipher.DECRYPT_MODE,keyspec,new IvParameterSpec(iv));\n    return MasterPrivateKey.parse(new String(cipher.doFinal(data)));\n  }\n catch (  UnsupportedEncodingException|InvalidAlgorithmParameterException|NoSuchPaddingException|NoSuchProviderException|NoSuchAlgorithmException|InvalidKeyException|BadPaddingException|IllegalBlockSizeException e) {\n    throw new HyperLedgerException(e);\n  }\n}"}
{"ids": "56295", "raw_code": "protected boolean beforeRelease(){\n  return deque.size() < maxSize;\n}"}
{"ids": "16028", "raw_code": "public void reset(){\n  System.arraycopy(initialState,0,chain,0,chain.length);\n  ubiInit(PARAM_TYPE_MESSAGE);\n}"}
{"ids": "78565", "raw_code": "public int updateWithOnConflict(String table,ContentValues values,String whereClause,String[] whereArgs,@ConflictAlgorithm int conflictAlgorithm){\n  if (values == null || values.size() == 0) {\n    throw new IllegalArgumentException(\"Empty values\");\n  }\n  acquireReference();\n  try {\n    StringBuilder sql=new StringBuilder(120);\n    sql.append(\"UPDATE \");\n    sql.append(CONFLICT_VALUES[conflictAlgorithm]);\n    sql.append(table);\n    sql.append(\" SET \");\n    int setValuesSize=values.size();\n    int bindArgsSize=(whereArgs == null) ? setValuesSize : (setValuesSize + whereArgs.length);\n    Object[] bindArgs=new Object[bindArgsSize];\n    int i=0;\n    for (    Map.Entry<String,Object> entry : values.valueSet()) {\n      sql.append((i > 0) ? \",\" : \"\");\n      sql.append(entry.getKey());\n      bindArgs[i++]=entry.getValue();\n      sql.append(\"=?\");\n    }\n    if (whereArgs != null) {\n      for (i=setValuesSize; i < bindArgsSize; i++) {\n        bindArgs[i]=whereArgs[i - setValuesSize];\n      }\n    }\n    if (!TextUtils.isEmpty(whereClause)) {\n      sql.append(\" WHERE \");\n      sql.append(whereClause);\n    }\n    SQLiteStatement statement=new SQLiteStatement(this,sql.toString(),bindArgs);\n    try {\n      return statement.executeUpdateDelete();\n    }\n  finally {\n      statement.close();\n    }\n  }\n  finally {\n    releaseReference();\n  }\n}"}
{"ids": "31042", "raw_code": "public synchronized void addURLs(List<URL> urls){\n  for (  URL url : urls)   super.addURL(url);\n  ArrayList searchList=new ArrayList();\n  searchList.addAll(searchPath);\n  searchList.addAll(urls);\n  searchPath=Collections.unmodifiableList(searchPath);\n}"}
{"ids": "34237", "raw_code": "protected byte[] httpGet(final String url){\n  HttpGet httpRequest=null;\n  HttpResponse httpResponse=null;\n  CloseableHttpClient client=null;\n  try {\n    final URI uri=new URI(url.trim());\n    httpRequest=new HttpGet(uri);\n    if (contentType != null) {\n      httpRequest.setHeader(CONTENT_TYPE,contentType);\n    }\n    client=getHttpClient(url);\n    httpResponse=getHttpResponse(client,httpRequest,url);\n    final byte[] returnedBytes=readHttpResponse(url,httpResponse);\n    return returnedBytes;\n  }\n catch (  URISyntaxException e) {\n    throw new DSSException(e);\n  }\n finally {\n    try {\n      if (httpRequest != null) {\n        httpRequest.releaseConnection();\n      }\n      if (httpResponse != null) {\n        EntityUtils.consumeQuietly(httpResponse.getEntity());\n      }\n    }\n  finally {\n      closeClient(client);\n    }\n  }\n}"}
{"ids": "3676", "raw_code": "public final int readChar() throws IOException {\n  if (_readEncoding != null) {\n    int ch=_readEncoding.read();\n    return ch;\n  }\n  if (_readLength <= _readOffset) {\n    if (!readBuffer())     return -1;\n  }\n  return _readBuffer[_readOffset++] & 0xff;\n}"}
{"ids": "59837", "raw_code": "public void writeExif(String jpegFileName,String exifOutFileName) throws FileNotFoundException, IOException {\n  if (jpegFileName == null || exifOutFileName == null) {\n    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);\n  }\n  InputStream is=null;\n  try {\n    is=new FileInputStream(jpegFileName);\n    writeExif(is,exifOutFileName);\n  }\n catch (  IOException e) {\n    closeSilently(is);\n    throw e;\n  }\n  is.close();\n}"}
{"ids": "9685", "raw_code": "public DGeneralSubtreeChooser(JFrame parent,String title,GeneralSubtree generalSubtree){\n  super(parent,title,ModalityType.DOCUMENT_MODAL);\n  initComponents(generalSubtree);\n}"}
{"ids": "4973", "raw_code": "public void insert(UndoObjectStorable p_object){\n  if (p_object == null)   throw new IllegalArgumentException(classname + \"insert p_object is null\");\n  disable_redo();\n  UndoObjectNode undoable_object=new UndoObjectNode(p_object,stack_level);\n  objects_map.put(p_object,undoable_object);\n}"}
{"ids": "38923", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=enumToVector(super.listOptions());\n  result.add(new Option(\"\\tThe noise percentage. (default \" + defaultNoisePercent() + \")\",\"N\",1,\"-N <num>\"));\n  return result.elements();\n}"}
{"ids": "73775", "raw_code": "@SuppressWarnings(\"unchecked\") protected void notifyPropertyChangeListener(String property,Object oldValue,Object newValue){\n  if ((oldValue != null && oldValue.equals(newValue)) || oldValue == newValue) {\n    log.error(\"notifyPropertyChangeListener without change\");\n  }\n  Vector<PropertyChangeListener> v;\nsynchronized (this) {\n    v=(Vector<PropertyChangeListener>)listeners.clone();\n  }\n  if (log.isDebugEnabled()) {\n    log.debug(\"notify \" + v.size() + \" listeners about property \"+ property);\n  }\n  int cnt=v.size();\n  for (int i=0; i < cnt; i++) {\n    PropertyChangeListener client=v.elementAt(i);\n    client.propertyChange(new PropertyChangeEvent(this,property,oldValue,newValue));\n  }\n}"}
{"ids": "38897", "raw_code": "public Element writeBeanVisual(Element parent,Object o,String name) throws Exception {\n  Element node;\n  BeanVisual visual;\n  if (DEBUG) {\n    trace(new Throwable(),name);\n  }\n  m_CurrentNode=parent;\n  visual=(BeanVisual)o;\n  node=writeToXML(parent,o,name);\n  invokeWriteToXML(node,visual.getIconPath(),VAL_ICONPATH);\n  invokeWriteToXML(node,visual.getAnimatedIconPath(),VAL_ANIMATEDICONPATH);\n  return node;\n}"}
{"ids": "4602", "raw_code": "private String displayNametoBackCompatName(String queryName){\n  final int lastBackSlash=queryName.lastIndexOf('\\\\');\n  if (lastBackSlash > 0 && lastBackSlash < queryName.length() - 1) {\n    queryName=(char)0x00ab + queryName;\n    queryName=queryName.substring(0,lastBackSlash + 1) + (char)0x00bb + ' '+ queryName.substring(lastBackSlash + 2);\n    queryName=queryName.replace('\\\\',(char)0x2044);\n  }\n  return queryName;\n}"}
{"ids": "64997", "raw_code": "public SQLiteDatabaseConfiguration(String path,int openFlags){\n  if (path == null) {\n    throw new IllegalArgumentException(\"path must not be null.\");\n  }\n  this.path=path;\n  label=stripPathForLogs(path);\n  this.openFlags=openFlags;\n  maxSqlCacheSize=25;\n  locale=Locale.getDefault();\n}"}
{"ids": "7649", "raw_code": "@Override public void drawRangeGridline(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Rectangle2D dataArea,double value){\n  Range range=axis.getRange();\n  if (!range.contains(value)) {\n    return;\n  }\n  Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());\n  Line2D line1=null;\n  Line2D line2=null;\n  PlotOrientation orientation=plot.getOrientation();\n  if (orientation == PlotOrientation.HORIZONTAL) {\n    double x0=axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());\n    double x1=x0 + getXOffset();\n    double y0=dataArea.getMaxY();\n    double y1=y0 - getYOffset();\n    double y2=dataArea.getMinY();\n    line1=new Line2D.Double(x0,y0,x1,y1);\n    line2=new Line2D.Double(x1,y1,x1,y2);\n  }\n else   if (orientation == PlotOrientation.VERTICAL) {\n    double y0=axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());\n    double y1=y0 - getYOffset();\n    double x0=dataArea.getMinX();\n    double x1=x0 + getXOffset();\n    double x2=dataArea.getMaxX();\n    line1=new Line2D.Double(x0,y0,x1,y1);\n    line2=new Line2D.Double(x1,y1,x2,y1);\n  }\n  Paint paint=plot.getRangeGridlinePaint();\n  Stroke stroke=plot.getRangeGridlineStroke();\n  g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);\n  g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);\n  g2.draw(line1);\n  g2.draw(line2);\n}"}
{"ids": "84445", "raw_code": "public static String dump(final EndpointDescriptor descriptor){\n  return String.format(\"Endpoint Descriptor:%n\" + \"  bLength %18d%n\" + \"  bDescriptorType %10d%n\"+ \"  bEndpointAddress %9s  EP %d %s%n\"+ \"  bmAttributes %13d%n\"+ \"    Transfer Type             %s%n\"+ \"    Synch Type                %s%n\"+ \"    Usage Type                %s%n\"+ \"  wMaxPacketSize %11d%n\"+ \"  bInterval %16d%n\",descriptor.bLength(),descriptor.bDescriptorType(),String.format(\"0x%02x\",descriptor.bEndpointAddress() & 0xff),descriptor.bEndpointAddress() & 0x0f,getDirectionName(descriptor.bEndpointAddress()),descriptor.bmAttributes() & 0xff,getTransferTypeName(descriptor.bmAttributes()),getSynchTypeName(descriptor.bmAttributes()),getUsageTypeName(descriptor.bmAttributes()),descriptor.wMaxPacketSize() & 0xffff,descriptor.bInterval() & 0xff);\n}"}
{"ids": "37725", "raw_code": "public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(2);\n  newVector.addElement(new Option(\"\\tNumber of execution slots.\\n\" + \"\\t(default 1 - i.e. no parallelism)\\n\" + \"\\t(use 0 to auto-detect number of cores)\",\"num-slots\",1,\"-num-slots <num>\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "9219", "raw_code": "public static void printPadding(PrintWriter out,int padding){\n  for (int i=0; i < padding; ++i) {\n    out.print(\" \");\n  }\n}"}
{"ids": "35308", "raw_code": "protected void sneakyClear(){\n  List<EObject> collection=new UnmodifiableEList<>(size,data);\n  sneakyDoClear();\n  for (Iterator<EObject> i=collection.iterator(); i.hasNext(); ) {\n    inverseRemove(i.next(),null);\n  }\n}"}
{"ids": "34728", "raw_code": "@CalledByNative public static Bitmap createHomeScreenIconFromWebIcon(Context context,Bitmap webIcon){\n  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);\n  int maxInnerSize=Math.round(am.getLauncherLargeIconSize() * MAX_INNER_SIZE_RATIO);\n  int innerSize=Math.min(maxInnerSize,Math.max(webIcon.getWidth(),webIcon.getHeight()));\n  int padding=Math.round(ICON_PADDING_RATIO * innerSize);\n  int outerSize=innerSize + 2 * padding;\n  Bitmap bitmap=null;\n  try {\n    bitmap=Bitmap.createBitmap(outerSize,outerSize,Bitmap.Config.ARGB_8888);\n  }\n catch (  OutOfMemoryError e) {\n    Log.w(TAG,\"OutOfMemoryError while creating bitmap for home screen icon.\");\n    return webIcon;\n  }\n  Canvas canvas=new Canvas(bitmap);\n  Rect innerBounds=new Rect(padding,padding,outerSize - padding,outerSize - padding);\n  Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);\n  paint.setFilterBitmap(true);\n  canvas.drawBitmap(webIcon,null,innerBounds,paint);\n  int cornerRadius=Math.round(ICON_CORNER_RADIUS_RATIO * outerSize);\n  Path path=new Path();\n  path.setFillType(Path.FillType.INVERSE_WINDING);\n  RectF innerBoundsF=new RectF(innerBounds);\n  path.addRoundRect(innerBoundsF,cornerRadius,cornerRadius,Path.Direction.CW);\n  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));\n  canvas.drawPath(path,paint);\n  return bitmap;\n}"}
{"ids": "29199", "raw_code": "private static boolean isInOverflow(MenuItem item){\n  return !isActionButton(item);\n}"}
{"ids": "29807", "raw_code": "private static int determineConsecutiveBinaryCount(CharSequence msg,byte[] bytes,int startpos) throws WriterException {\n  int len=msg.length();\n  int idx=startpos;\n  while (idx < len) {\n    char ch=msg.charAt(idx);\n    int numericCount=0;\n    while (numericCount < 13 && isDigit(ch)) {\n      numericCount++;\n      int i=idx + numericCount;\n      if (i >= len) {\n        break;\n      }\n      ch=msg.charAt(i);\n    }\n    if (numericCount >= 13) {\n      return idx - startpos;\n    }\n    int textCount=0;\n    while (textCount < 5 && isText(ch)) {\n      textCount++;\n      int i=idx + textCount;\n      if (i >= len) {\n        break;\n      }\n      ch=msg.charAt(i);\n    }\n    if (textCount >= 5) {\n      return idx - startpos;\n    }\n    ch=msg.charAt(idx);\n    if (bytes[idx] == 63 && ch != '?') {\n      throw new WriterException(\"Non-encodable character detected: \" + ch + \" (Unicode: \"+ (int)ch+ ')');\n    }\n    idx++;\n  }\n  return idx - startpos;\n}"}
{"ids": "85553", "raw_code": "void pluginMessage(Throwable ex){\n  log.printLines(PrefixKind.JAVAC,\"msg.plugin.uncaught.exception\");\n  ex.printStackTrace(log.getWriter(WriterKind.NOTICE));\n}"}
{"ids": "54071", "raw_code": "public Builder map(String fullyQualifiedColumnNames,ColumnMapper mapper){\n  Predicate<ColumnId> columnMatcher=Predicates.includes(fullyQualifiedColumnNames,null);\n  rules.add(new MapperRule(columnMatcher,mapper));\n  return this;\n}"}
{"ids": "40380", "raw_code": "public double theta(){\n  return Math.atan2(y,x);\n}"}
{"ids": "62948", "raw_code": "public static int hash32(final String text,int from,int length){\n  return hash32(text.substring(from,from + length));\n}"}
{"ids": "79936", "raw_code": "protected void sendClosingMessage(){\n  try {\n    send(ConnectionMessage.CLOSING,NetworkProtocol.TCP);\n  }\n catch (  Exception e) {\n    log.warning(\"TCP already disconnected or error: \" + e.getMessage());\n  }\n  try {\n    send(ConnectionMessage.CLOSING,NetworkProtocol.UDP);\n  }\n catch (  Exception e) {\n    log.warning(\"UDP already disconnected or error: \" + e.getMessage());\n  }\n}"}
{"ids": "25092", "raw_code": "public static String parseNumberToString(int aNumber){\n  boolean temp=true, negative=false;\n  if (aNumber < 0) {\n    aNumber*=-1;\n    negative=true;\n  }\n  StringBuilder tStringB=new StringBuilder();\n  for (int i=1000000000; i > 0; i/=10) {\n    int tDigit=(aNumber / i) % 10;\n    if (temp && tDigit != 0)     temp=false;\n    if (!temp) {\n      tStringB.append(tDigit);\n      if (i != 1)       for (int j=i; j > 0; j/=1000)       if (j == 1)       tStringB.append(\",\");\n    }\n  }\n  String tString=tStringB.toString();\n  if (tString.equals(E))   tString=\"0\";\n  return negative ? \"-\" + tString : tString;\n}"}
{"ids": "26630", "raw_code": "public void remove(T graphic){\nsynchronized (mLock) {\n    mGraphics.remove(graphic);\n    if (mFirstGraphic != null && mFirstGraphic.equals(graphic)) {\n      mFirstGraphic=null;\n    }\n  }\n  postInvalidate();\n}"}
{"ids": "73844", "raw_code": "public boolean validSystemNameConfig(String systemName){\n  return (true);\n}"}
{"ids": "54447", "raw_code": "public int read() throws IOException {\n  ensureOpen();\n  if (next >= length) {\n    return -1;\n  }\n  return str.charAt(next++);\n}"}
{"ids": "80216", "raw_code": "void addHiddenChannelListener(HiddenChannelListener listener){\n  listeners.add(listener);\n}"}
{"ids": "80480", "raw_code": "public boolean nextTo(final Entity entity,final double step){\n  final Rectangle2D thisArea=new Rectangle2D.Double(x - step,y - step,area.getWidth() + 2 * step,area.getHeight() + 2 * step);\n  return thisArea.intersects(entity.getArea());\n}"}
{"ids": "31875", "raw_code": "private long rebalance_nl(final long nParent,final long n,LongArray unlinked){\n  final long nL=unsharedLeft(n,unlinked);\n  final long nR=unsharedRight(n,unlinked);\n  if ((nL == 0 || nR == 0) && vOptIsNull(n)) {\n    if (attemptUnlink_nl(nParent,n,unlinked)) {\n      return fixHeight_nl(nParent);\n    }\n else {\n      return n;\n    }\n  }\n  final int hN=height(n);\n  final int hL0=height(nL);\n  final int hR0=height(nR);\n  final int hNRepl=1 + Math.max(hL0,hR0);\n  final int bal=hL0 - hR0;\n  if (bal > 1) {\n    return rebalanceToRight_nl(nParent,n,nL,hR0,unlinked);\n  }\n else   if (bal < -1) {\n    return rebalanceToLeft_nl(nParent,n,nR,hL0,unlinked);\n  }\n else   if (hNRepl != hN) {\n    height(n,hNRepl);\n    return fixHeight_nl(nParent);\n  }\n else {\n    return 0;\n  }\n}"}
{"ids": "80531", "raw_code": "private void addConversations(){\n  TPP_Phase myphase=AWAITING;\n  mainNPC.add(ConversationStates.ATTENDING,Arrays.asList(\"rats\",\"rats!\"),new TPPQuestInPhaseCondition(myphase),ConversationStates.ATTENDING,\"Well, we tried to clean up the city. \" + \"You can get a #reward for your help now, ask about #details \" + \"if you want to know more.\",null);\n  mainNPC.add(ConversationStates.ATTENDING,\"details\",new TPPQuestInPhaseCondition(myphase),ConversationStates.ATTENDING,null,new DetailsKillingsAction());\n  mainNPC.add(ConversationStates.ATTENDING,\"reward\",new TPPQuestInPhaseCondition(myphase),ConversationStates.ATTENDING,null,new RewardPlayerAction());\n}"}
{"ids": "31423", "raw_code": "public static void w(String tag,String s,Object... args){\n  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,String.format(s,args));\n}"}
{"ids": "24232", "raw_code": "@edu.umd.cs.findbugs.annotations.SuppressWarnings(value=\"BC_UNCONFIRMED_CAST\",justification=\"Only JMXConnectionNotification instances are used.\") public void handleNotification(Notification notification,Object handback){\n  if (handback instanceof AgentImpl) {\n    AgentImpl agent=(AgentImpl)handback;\n    JMXConnectionNotification jmxNotifn=(JMXConnectionNotification)notification;\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Connection notification for connection id : '{}'\",jmxNotifn.getConnectionId());\n    }\n    agent.updateRmiClientsCount();\n  }\n}"}
{"ids": "41409", "raw_code": "public static boolean isBlank(String s){\n  if (s == null) {\n    return true;\n  }\n  int sLen=s.length();\n  for (int i=0; i < sLen; i++) {\n    if (!Character.isWhitespace(s.charAt(i))) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "77001", "raw_code": "public PlainTextDictionary(Path path) throws IOException {\n  in=Files.newBufferedReader(path,StandardCharsets.UTF_8);\n}"}
{"ids": "70723", "raw_code": "public boolean addAliasByNumber(String aliasName,String number){\n  if (aliasName.contains(\"'\"))   return false;\n  String contactName=ContactsManager.getContactNameOrNull(ctx,number);\n  addOrUpdate(aliasName,number,contactName);\n  return true;\n}"}
{"ids": "34167", "raw_code": "@NotNull @ObjectiveCName(\"addTrustedKey:\") public ConfigurationBuilder addTrustedKey(String trustedKey){\n  trustedKeys.add(new TrustedKey(trustedKey));\n  return this;\n}"}
{"ids": "6", "raw_code": "private void checkIsCorrectClass(){\n  if (checkIsSubClass(ACT_NAME)) {\n    type=ElementType.ACTTIVITY;\n  }\n else   if (checkIsSubClass(FRAG_NAME) || checkIsSubClass(V4_FRAG_NAME)) {\n    type=ElementType.FRAGMENT;\n  }\n else {\n    throw new IllegalArgumentException(String.format(\"class %s must be extends from %s or %s or %s\",element.getQualifiedName(),ACT_NAME,FRAG_NAME,V4_FRAG_NAME));\n  }\n}"}
{"ids": "39869", "raw_code": "String transformResourceIdToFileName(final String resourceName){\n  return resourceName.replace('_','.');\n}"}
{"ids": "84381", "raw_code": "public void disable(RichFormatterFeature feature){\n  features.remove(feature);\n}"}
{"ids": "65386", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return SUCCESS;\ncase 2:\n  return MSG;\ndefault :\nreturn null;\n}\n}"}
{"ids": "79688", "raw_code": "private void fillNodesInContext(SiteNode rootNode,List<SiteNode> nodesList){\n  @SuppressWarnings(\"unchecked\") Enumeration<SiteNode> en=rootNode.children();\n  while (en.hasMoreElements()) {\n    SiteNode sn=en.nextElement();\n    if (isInContext(sn)) {\n      nodesList.add(sn);\n    }\n    fillNodesInContext(sn,nodesList);\n  }\n}"}
{"ids": "10412", "raw_code": "@SuppressWarnings({\"rawtypes\",\"unchecked\"}) public boolean matches(InventoryCrafting p_77569_1_,World p_77569_2_){\n  ArrayList arraylist=new ArrayList(this.recipeItems);\n  for (int i=0; i < 5; ++i) {\n    for (int j=0; j < 5; ++j) {\n      ItemStack itemstack=p_77569_1_.getStackInRowAndColumn(j,i);\n      if (itemstack != null) {\n        boolean flag=false;\n        Iterator iterator=arraylist.iterator();\n        while (iterator.hasNext()) {\n          ItemStack itemstack1=(ItemStack)iterator.next();\n          if (itemstack.getItem() == itemstack1.getItem() && (itemstack1.getItemDamage() == 32767 || itemstack.getItemDamage() == itemstack1.getItemDamage())) {\n            flag=true;\n            arraylist.remove(itemstack1);\n            break;\n          }\n        }\n        if (!flag) {\n          return false;\n        }\n      }\n    }\n  }\n  return arraylist.isEmpty();\n}"}
{"ids": "27341", "raw_code": "public StringBuilder dumpStatements(final IAccessPath<ISPO> accessPath){\n  final StringBuilder sb=new StringBuilder();\n  final BigdataStatementIterator itr=asStatementIterator(accessPath.iterator());\n  try {\n    while (itr.hasNext()) {\n      sb.append(\"\\n\" + itr.next());\n    }\n    return sb;\n  }\n  finally {\n    itr.close();\n  }\n}"}
{"ids": "53028", "raw_code": "public static Element svgWaitIcon(Document document,double x,double y,double w,double h){\n  Element g=SVGUtil.svgElement(document,SVGConstants.SVG_G_TAG);\n  setAtt(g,SVGConstants.SVG_TRANSFORM_ATTRIBUTE,\"translate(\" + x + \" \"+ y+ \") scale(\"+ w+ \" \"+ h+ \")\");\n  Element thro=SVGUtil.svgElement(document,SVGConstants.SVG_PATH_TAG);\n  setAtt(thro,SVGConstants.SVG_D_ATTRIBUTE,THROBBER_PATH);\n  setStyle(thro,THROBBER_STYLE);\n  Element anim=SVGUtil.svgElement(document,SVGConstants.SVG_ANIMATE_TRANSFORM_TAG);\n  setAtt(anim,SVGConstants.SVG_ATTRIBUTE_NAME_ATTRIBUTE,SVGConstants.SVG_TRANSFORM_ATTRIBUTE);\n  setAtt(anim,SVGConstants.SVG_ATTRIBUTE_TYPE_ATTRIBUTE,\"XML\");\n  setAtt(anim,SVGConstants.SVG_TYPE_ATTRIBUTE,SVGConstants.SVG_ROTATE_ATTRIBUTE);\n  setAtt(anim,SVGConstants.SVG_FROM_ATTRIBUTE,\"0 .5 .5\");\n  setAtt(anim,SVGConstants.SVG_TO_ATTRIBUTE,\"360 .5 .5\");\n  setAtt(anim,SVGConstants.SVG_BEGIN_ATTRIBUTE,fmt(Math.random() * 2) + \"s\");\n  setAtt(anim,SVGConstants.SVG_DUR_ATTRIBUTE,\"2s\");\n  setAtt(anim,SVGConstants.SVG_REPEAT_COUNT_ATTRIBUTE,\"indefinite\");\n  setAtt(anim,SVGConstants.SVG_FILL_ATTRIBUTE,\"freeze\");\n  thro.appendChild(anim);\n  g.appendChild(thro);\n  return g;\n}"}
{"ids": "63959", "raw_code": "protected void onEnd(Pcap pcap){\n  this.end=true;\n}"}
{"ids": "21847", "raw_code": "public void cd(String dir){\n  StringBuilder buf=new StringBuilder();\n  String command=String.format(ImageServerDialogProperties.getString(\"cmd.cd\"),dir);\n  sendWaitFor(command,defaultTimeout,prompts,buf);\n  log.debug(buf.toString());\n}"}
{"ids": "48757", "raw_code": "public void addRequestProperty(String key,String value){\n  jarFileURLConnection.addRequestProperty(key,value);\n}"}
{"ids": "28634", "raw_code": "public static String numberToString(Number number) throws JSONException {\n  if (number == null) {\n    throw new JSONException(\"Null pointer\");\n  }\n  testValidity(number);\n  String string=number.toString();\n  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {\n    while (string.endsWith(\"0\")) {\n      string=string.substring(0,string.length() - 1);\n    }\n    if (string.endsWith(\".\")) {\n      string=string.substring(0,string.length() - 1);\n    }\n  }\n  return string;\n}"}
{"ids": "66809", "raw_code": "public static void writeSpecInfoToFiles(SecuritySpecModel securitySpecModel,String app_ROOT_DIR){\n  writeInfoFlowSummaryToFile(securitySpecModel,Config.v().APP_ROOT_DIR);\n  writeInfoFlowDetailsToFile(securitySpecModel,Config.v().APP_ROOT_DIR);\n  writeValueInfoToFile(securitySpecModel,Config.v().APP_ROOT_DIR);\n  writePointsToInfoToFile(securitySpecModel,Config.v().APP_ROOT_DIR);\n}"}
{"ids": "55313", "raw_code": "private void handleCommand(int id,String command,String params){\n  String originCommand=commandId.get(id);\n  if (originCommand == null) {\n    originCommand=\"\";\n  }\n  handler.handleCommand(id,command,params,originCommand);\n  if (command.equals(\"error\")) {\n    LOGGER.warning(\"[FFZ-WS] Error: \" + params);\n  }\n}"}
{"ids": "10595", "raw_code": "private void closeAllDumps(){\n  Object[] options={\"Close all\",\"Cancel close\"};\n  int selectValue=JOptionPane.showOptionDialog(null,\"<html><body>Are you sure, you want to close all open dump files\",\"Confirm closing...\",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);\n  if (selectValue == 0) {\n    topNodes=new Vector();\n    resetMainPanel();\n  }\n}"}
{"ids": "68556", "raw_code": "private void closeCounterDataInputStream() throws DataFallbackException {\n  if (LOG.isDebugEnabled())   LOG.debug(\"Closing the counter file reader for the file \" + counterFile.getName());\n  if (dInput != null) {\n    try {\n      dInput.close();\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n finally {\n      dInput=null;\n    }\n  }\n}"}
{"ids": "33058", "raw_code": "private static String removeFileNameExtension(String fileName){\n  if (fileName.lastIndexOf(\".\") == -1)   return fileName;\n  return fileName.substring(0,fileName.lastIndexOf(\".\"));\n}"}
{"ids": "24564", "raw_code": "public void clear(){\n  read=write=count=0;\n  Arrays.fill(buffer,null);\n}"}
{"ids": "908", "raw_code": "private List<Entry> reduceWithDouglasPeuker(List<Entry> entries,double epsilon){\n  if (epsilon <= 0 || entries.size() < 3) {\n    return entries;\n  }\n  keep[0]=true;\n  keep[entries.size() - 1]=true;\n  algorithmDouglasPeucker(entries,epsilon,0,entries.size() - 1);\n  List<Entry> reducedEntries=new ArrayList<>();\n  for (int i=0; i < entries.size(); i++) {\n    if (keep[i]) {\n      Entry curEntry=entries.get(i);\n      reducedEntries.add(new Entry(curEntry.getVal(),curEntry.getXIndex()));\n    }\n  }\n  return reducedEntries;\n}"}
{"ids": "78141", "raw_code": "static int hiBitPos(long num){\n  return 63 - Long.numberOfLeadingZeros(num);\n}"}
{"ids": "26824", "raw_code": "public AdaptiveGridArchive(int capacity,Problem problem,int numberOfDivisions){\n  this.capacity=capacity;\n  this.problem=problem;\n  this.numberOfDivisions=numberOfDivisions;\n  minimum=new double[problem.getNumberOfObjectives()];\n  maximum=new double[problem.getNumberOfObjectives()];\n  density=new int[(int)Math.pow(numberOfDivisions,problem.getNumberOfObjectives())];\n  adaptGrid();\n}"}
{"ids": "46604", "raw_code": "BeginLineAction(String nm,boolean select){\n  super(nm);\n  this.select=select;\n}"}
{"ids": "6667", "raw_code": "private void adjustWindowSize(ContainerWrapper parent){\n  BoundSize wBounds=lc.getPackWidth();\n  BoundSize hBounds=lc.getPackHeight();\n  if (wBounds == null && hBounds == null)   return;\n  Window win=((Window)SwingUtilities.getAncestorOfClass(Window.class,(Component)parent.getComponent()));\n  if (win == null)   return;\n  Dimension prefSize=win.getPreferredSize();\n  int targW=constrain(checkParent(win),win.getWidth(),prefSize.width,wBounds);\n  int targH=constrain(checkParent(win),win.getHeight(),prefSize.height,hBounds);\n  int x=Math.round(win.getX() - ((targW - win.getWidth()) * (1 - lc.getPackWidthAlign())));\n  int y=Math.round(win.getY() - ((targH - win.getHeight()) * (1 - lc.getPackHeightAlign())));\n  win.setBounds(x,y,targW,targH);\n}"}
{"ids": "79065", "raw_code": "@Override public void write(List<byte[]> valueList) throws IOException {\n  if (isFirstTime) {\n    init();\n    isFirstTime=false;\n  }\n  for (  byte[] value : valueList) {\n    oneDictionaryChunkList.add(ByteBuffer.wrap(value));\n    totalRecordCount++;\n  }\n}"}
{"ids": "75568", "raw_code": "public void proceed(){\n  idle.set(true);\n  subject.onNext(null);\n}"}
{"ids": "13099", "raw_code": "private static boolean nsEquals(String nsURI_1,String nsURI_2){\n  if (nsURI_1 == null) {\n    return (nsURI_2 == null);\n  }\n else {\n    return nsURI_1.equals(nsURI_2);\n  }\n}"}
{"ids": "69586", "raw_code": "private boolean linkFirst(Node<E> node){\n  if (count >= capacity)   return false;\n  Node<E> f=first;\n  node.next=f;\n  first=node;\n  if (last == null)   last=node;\n else   f.prev=node;\n  ++count;\n  notEmpty.signal();\n  return true;\n}"}
{"ids": "259", "raw_code": "public static void sleep(long millis){\n  if (mockSleepQueue == null) {\n    sleepUninterruptibly(millis,TimeUnit.MILLISECONDS);\n  }\n else {\n    try {\n      boolean isMultiPass=mockSleepQueue.take();\n      rollMockClockMillis(millis);\n      if (isMultiPass)       mockSleepQueue.offer(true);\n    }\n catch (    InterruptedException e) {\n    }\n  }\n}"}
{"ids": "69869", "raw_code": "public boolean isHandle(String handle){\n  return clientHandle.equals(handle);\n}"}
{"ids": "1630", "raw_code": "public static void isGTE(String argName,long i,long min){\n  if (i < min) {\n    throw new IllegalArgumentException(String.format(\"%s must be >= %d; was %d\",argName,min,i));\n  }\n}"}
{"ids": "82850", "raw_code": "int adjustTextOffset(int offset){\n  maxTextOffset=Math.max(maxTextOffset,offset);\n  return maxTextOffset;\n}"}
{"ids": "68396", "raw_code": "public static Object valueFromClassConstant(String key,Object defaultValue){\n  Configuration conf=instance();\n  String val=valueFor(key);\n  if (val == null) {\n    return defaultValue;\n  }\n  int idx=val.lastIndexOf(\".\");\n  String klassname;\n  String cnst;\n  try {\n    klassname=val.substring(0,idx);\n    cnst=val.substring(idx + 1);\n  }\n catch (  IndexOutOfBoundsException e) {\n    conf.warning(\"Property key \" + key + \" for object value constant is not properly formatted; \"+ \"should be FQN<dot>constant, is \"+ val);\n    return defaultValue;\n  }\n  Class klass;\n  try {\n    klass=Class.forName(klassname);\n  }\n catch (  ClassNotFoundException e) {\n    conf.warning(\"Property for object value constant \" + key + \" is not a FQN: \"+ klassname);\n    return defaultValue;\n  }\n  Object cnstVal;\n  try {\n    Field fld=klass.getDeclaredField(cnst);\n    try {\n      cnstVal=fld.get(klass);\n    }\n catch (    IllegalAccessException e) {\n      conf.warning(\"Property for object value constant \" + key + \", field is not public: \"+ klassname+ \".\"+ cnst);\n      return defaultValue;\n    }\n  }\n catch (  NoSuchFieldException e) {\n    conf.warning(\"Property for object value constant \" + key + \" is not a FQN: \"+ klassname);\n    return defaultValue;\n  }\n  return cnstVal;\n}"}
{"ids": "49410", "raw_code": "public static boolean isWifiConnected(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();\n  return networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI;\n}"}
{"ids": "84467", "raw_code": "public StrBuilder insert(final int index,final char value){\n  validateIndex(index);\n  ensureCapacity(size + 1);\n  System.arraycopy(buffer,index,buffer,index + 1,size - index);\n  buffer[index]=value;\n  size++;\n  return this;\n}"}
{"ids": "7136", "raw_code": "public List<byte[]> tryDecode(final String targetToken){\n  final ByteBuffer payloadBuf=extractValidPayloadFields(targetToken);\n  if (payloadBuf == null) {\n    return null;\n  }\n  final List<byte[]> fields=new ArrayList<>();\n  try {\n    byte[] field=null;\n    while ((field=tryReadPayloadNextField(payloadBuf)).length > 0) {\n      fields.add(field);\n      if (fields.size() > MAX_FIELD_SIZE) {\n        return null;\n      }\n    }\n    return fields;\n  }\n catch (  final BufferUnderflowException e) {\n    return null;\n  }\n}"}
{"ids": "56790", "raw_code": "@NamespacePermission(fields=\"#request.namespace\",permissions=NamespacePermissionEnum.WRITE) @Override public BusinessObjectDefinition createBusinessObjectDefinition(BusinessObjectDefinitionCreateRequest request){\n  validateBusinessObjectDefinitionCreateRequest(request);\n  NamespaceEntity namespaceEntity=namespaceDaoHelper.getNamespaceEntity(request.getNamespace());\n  DataProviderEntity dataProviderEntity=dataProviderDaoHelper.getDataProviderEntity(request.getDataProviderName());\n  BusinessObjectDefinitionKey businessObjectDefinitionKey=new BusinessObjectDefinitionKey(request.getNamespace(),request.getBusinessObjectDefinitionName());\n  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(businessObjectDefinitionKey);\n  if (businessObjectDefinitionEntity != null) {\n    throw new AlreadyExistsException(String.format(\"Unable to create business object definition with name \\\"%s\\\" because it already exists for namespace \\\"%s\\\".\",businessObjectDefinitionKey.getBusinessObjectDefinitionName(),businessObjectDefinitionKey.getNamespace()));\n  }\n  businessObjectDefinitionEntity=createBusinessObjectDefinitionEntity(request,namespaceEntity,dataProviderEntity);\n  return createBusinessObjectDefinitionFromEntity(businessObjectDefinitionEntity);\n}"}
{"ids": "21086", "raw_code": "private void migrateBlockVolumes(){\n  log.info(\"Migrating BlockConsistencyGroup references on Volume objects.\");\n  DbClient dbClient=getDbClient();\n  List<URI> volumeURIs=dbClient.queryByType(Volume.class,false);\n  Iterator<Volume> volumes=dbClient.queryIterativeObjects(Volume.class,volumeURIs,true);\n  List<BlockObject> blockObjects=new ArrayList<BlockObject>();\n  while (volumes.hasNext()) {\n    blockObjects.add(volumes.next());\n  }\n  migrateBlockObjects(blockObjects);\n}"}
{"ids": "81980", "raw_code": "public static String decode(String s,String enc,boolean plusToSpace){\n  boolean modified=false;\n  if (enc == null || enc.length() == 0) {\n    enc=\"UTF-8\";\n  }\n  int numChars=s.length();\n  StringBuilder sb=new StringBuilder(numChars > 500 ? numChars / 2 : numChars);\n  int i=0;\n  char c;\n  byte[] bytes=null;\n  while (i < numChars) {\n    c=s.charAt(i);\nswitch (c) {\ncase '+':\n      if (plusToSpace) {\n        sb.append(' ');\n      }\n else {\n        sb.append('+');\n      }\n    i++;\n  modified=true;\nbreak;\ncase '%':\ntry {\nif (bytes == null) {\n  bytes=new byte[(numChars - i) / 3];\n}\nint pos=0;\nwhile (((i + 2) < numChars) && (c == '%')) {\n  bytes[pos++]=(byte)Integer.parseInt(s.substring(i + 1,i + 3),16);\n  i+=3;\n  if (i < numChars) {\n    c=s.charAt(i);\n  }\n}\nif ((i < numChars) && (c == '%')) {\n  throw new IllegalArgumentException(\"Illegal URL % character: \" + s);\n}\ntry {\n  sb.append(new String(bytes,0,pos,enc));\n}\n catch (UnsupportedEncodingException e) {\n  throw new RuntimeException(e.toString());\n}\n}\n catch (NumberFormatException e) {\nthrow new IllegalArgumentException(\"Illegal URL encoding: \" + s);\n}\nmodified=true;\nbreak;\ndefault :\nsb.append(c);\ni++;\nbreak;\n}\n}\nif (modified) {\nreturn sb.toString();\n}\nreturn s;\n}"}
{"ids": "16566", "raw_code": "@Override public String encode(){\n  return value == intValue() ? Integer.toString(intValue()) + unit.encode() : Double.toString(value) + unit.encode();\n}"}
{"ids": "23174", "raw_code": "public HostNameParser(LexerCore lexer){\n  this.lexer=lexer;\n  lexer.selectLexer(\"charLexer\");\n  stripAddressScopeZones=Boolean.getBoolean(\"gov2.nist.core.STRIP_ADDR_SCOPES\");\n}"}
{"ids": "12669", "raw_code": "private void loadText(InputStream is){\n  BufferedReader reader;\n  String line;\n  if (is == null) {\n    throw new Error(\"Can't load diphone db file.\");\n  }\n  reader=new BufferedReader(new InputStreamReader(is));\n  try {\n    line=reader.readLine();\n    lineCount++;\n    while (line != null) {\n      if (!line.startsWith(\"***\")) {\n        parseAndAdd(line,reader);\n      }\n      line=reader.readLine();\n    }\n    reader.close();\n  }\n catch (  IOException e) {\n    throw new Error(e.getMessage() + \" at line \" + lineCount);\n  }\n finally {\n  }\n}"}
{"ids": "7035", "raw_code": "public void addEmailAdress(String anEmailAddress){\n  if (mEmails.indexOf(anEmailAddress) < 0) {\n    mEmails.add(anEmailAddress);\n  }\n}"}
{"ids": "75624", "raw_code": "public static Instances loadDataset(String options[],char T) throws Exception {\n  Instances D=null;\n  String filename=Utils.getOption(T,options);\n  if (filename == null || filename.isEmpty())   throw new Exception(\"[Error] You did not specify a dataset!\");\n  File file=new File(filename);\n  if (!file.exists())   throw new Exception(\"[Error] File does not exist: \" + filename);\n  if (file.isDirectory())   throw new Exception(\"[Error] \" + filename + \" points to a directory!\");\n  try {\n    DataSource source=new DataSource(filename);\n    D=source.getDataSet();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    throw new Exception(\"[Error] Failed to load Instances from file '\" + filename + \"'.\");\n  }\n  return D;\n}"}
{"ids": "41844", "raw_code": "private boolean isTypedTimeFullyLegal(){\n  if (mIs24HourMode) {\n    int[] values=getEnteredTime(null);\n    return (values[0] >= 0 && values[1] >= 0 && values[1] < 60);\n  }\n else {\n    return (mTypedTimes.contains(getAmOrPmKeyCode(AM)) || mTypedTimes.contains(getAmOrPmKeyCode(PM)));\n  }\n}"}
{"ids": "36098", "raw_code": "@Override public void operate(Population pop) throws Exception {\n  List<Individual> newIndividuals=new LinkedList<Individual>();\n  for (int i=0; i < pop.getNumberOfIndividuals(); i++) {\n    List<Individual> individuals=operate(pop.get(i));\n    newIndividuals.addAll(individuals);\n  }\n  pop.clear();\n  pop.addAllIndividuals(newIndividuals);\n}"}
{"ids": "26049", "raw_code": "public int size(){\n  return encodedNames.size();\n}"}
{"ids": "199", "raw_code": "public static byte[] toSeed(List<String> words,String passphrase){\n  return toSeed(words,passphrase,Version.V0_6);\n}"}
{"ids": "42327", "raw_code": "private ArrayList<Interval> findOrCreateIntervalSet(Register r){\n  ArrayList<Interval> v=map.get(r);\n  if (v == null) {\n    v=new ArrayList<Interval>();\n    map.put(r,v);\n  }\n  return v;\n}"}
{"ids": "59677", "raw_code": "protected void removeColumns(Collection<String> removeColumnNames,String tableName){\n  if (removeColumnNames != null && !removeColumnNames.isEmpty()) {\n    execute(getRemoveColumnSQLs(removeColumnNames,tableName),mDb);\n  }\n}"}
{"ids": "38121", "raw_code": "@Override public double[][] predictIntervals(double conf){\n  updateBoundariesAndOrWeights();\n  double val=Statistics.normalInverse(1.0 - (1.0 - conf) / 2);\n  double min=m_TM.firstKey() - val * m_Width;\n  double max=m_TM.lastKey() + val * m_Width;\n  double delta=(max - min) / m_NumIntervals;\n  double[] probabilities=new double[m_NumIntervals];\n  double leftVal=Math.exp(logDensity(min));\n  for (int i=0; i < m_NumIntervals; i++) {\n    double rightVal=Math.exp(logDensity(min + (i + 1) * delta));\n    probabilities[i]=0.5 * (leftVal + rightVal) * delta;\n    leftVal=rightVal;\n  }\n  int[] sortedIndices=Utils.sort(probabilities);\n  double sum=0;\n  boolean[] toUse=new boolean[probabilities.length];\n  int k=0;\n  while ((sum < conf) && (k < toUse.length)) {\n    toUse[sortedIndices[toUse.length - (k + 1)]]=true;\n    sum+=probabilities[sortedIndices[toUse.length - (k + 1)]];\n    k++;\n  }\n  probabilities=null;\n  ArrayList<double[]> intervals=new ArrayList<double[]>();\n  double[] interval=null;\n  boolean haveStartedInterval=false;\n  for (int i=0; i < m_NumIntervals; i++) {\n    if (toUse[i]) {\n      if (haveStartedInterval == false) {\n        haveStartedInterval=true;\n        interval=new double[2];\n        interval[0]=min + i * delta;\n      }\n      interval[1]=min + (i + 1) * delta;\n    }\n else {\n      if (haveStartedInterval) {\n        haveStartedInterval=false;\n        intervals.add(interval);\n      }\n    }\n  }\n  if (haveStartedInterval) {\n    intervals.add(interval);\n  }\n  return intervals.toArray(new double[0][0]);\n}"}
{"ids": "43452", "raw_code": "public void registerAtmosphere(IAtmosphere atmosphere){\n  atmosphereRegistration.put(atmosphere.getUnlocalizedName(),atmosphere);\n  atmosphereList.add(atmosphere);\n}"}
{"ids": "6510", "raw_code": "public JXSearchField(){\n  this(\"\");\n}"}
{"ids": "66505", "raw_code": "private static void reply_Login2_Role(body body,MobileSessionCtx wsc,String roleId){\n  String form=null;\n  Login login=new Login(wsc.ctx);\n  KeyNamePair[] clients=login.getClients(new KeyNamePair(Integer.parseInt(roleId),roleId));\n  StringBuffer script=new StringBuffer(\"{\\\"options\\\":[\");\n  for (int i=0; i < clients.length; i++) {\n    if (i > 0)     script.append(\",\");\n    KeyNamePair p=clients[i];\n    script.append(\"{\\\"text\\\":\\\"\");\n    script.append(p.getName());\n    script.append(\"\\\",\\\"value\\\":\\\"\");\n    script.append(p.getKey());\n    script.append(\"\\\"}); \");\n  }\n  script.append(\"]}\");\n}"}
{"ids": "66368", "raw_code": "public final void run(){\n  if (m_start == 0)   m_start=System.currentTimeMillis();\n  m_canContinue=true;\n  while (m_canContinue) {\n    if (isInterrupted())     return;\n    m_lastStart=System.currentTimeMillis();\n    m_working=true;\n    try {\n      m_pollCount++;\n      if (canDoWork()) {\n        m_canContinue=doWork();\n        m_count++;\n      }\n    }\n catch (    Exception e) {\n      log.log(Level.SEVERE,\"run\",e);\n    }\n    m_working=false;\n    long end=System.currentTimeMillis();\n    m_time+=(end - m_lastStart);\n    if (isInterrupted())     return;\n    try {\n      log.fine(\"sleeping ... \" + m_sleepSeconds);\n      sleep(m_sleepSeconds * 1000);\n    }\n catch (    InterruptedException e1) {\n      log.warning(\"run - \" + e1.getLocalizedMessage());\n      return;\n    }\n  }\n}"}
{"ids": "77597", "raw_code": "public static SolrDocument assertSearchOneDoc(SolrParams p) throws Exception {\n  SolrDocumentList docs=assertSearch(p);\n  assertEquals(\"does not match exactly one doc: \" + p.toString() + \" => \"+ docs.toString(),1,docs.getNumFound());\n  assertEquals(\"does not contain exactly one doc: \" + p.toString() + \" => \"+ docs.toString(),1,docs.size());\n  return docs.get(0);\n}"}
{"ids": "77626", "raw_code": "private static ValueSource buildSourceTree(IndexSchema schema,String expression,int sourceType){\n  int expressionType=getSourceType(expression);\n  if (sourceType != FIELD_TYPE && expressionType != FIELD_TYPE && expressionType != FILTER_TYPE && expressionType != sourceType) {\n    return null;\n  }\nswitch (expressionType) {\ncase NUMBER_TYPE:\n    return buildNumericSource(schema,expression);\ncase DATE_TYPE:\n  return buildDateSource(schema,expression);\ncase STRING_TYPE:\nreturn buildStringSource(schema,expression);\ncase FIELD_TYPE:\nreturn buildFieldSource(schema,expression,sourceType);\ncase FILTER_TYPE:\nreturn buildFilterSource(schema,expression.substring(expression.indexOf('(') + 1,expression.lastIndexOf(')')),sourceType);\ndefault :\nthrow new SolrException(ErrorCode.BAD_REQUEST,expression + \" is not a valid operation.\");\n}\n}"}
{"ids": "28133", "raw_code": "public Value predecessor(){\n  return predecessor.get();\n}"}
{"ids": "84779", "raw_code": "public static double logPdf(double x,double m,double sd){\n  double a=1.0 / (Math.sqrt(2.0 * Math.PI) * sd);\n  double b=-(x - m) * (x - m) / (2.0 * sd * sd);\n  return Math.log(a) + b;\n}"}
{"ids": "39166", "raw_code": "public int valueSparseInt(int indexOfIndex) throws Exception {\n  return Integer.parseInt(actualValue(indexOfIndex));\n}"}
{"ids": "24540", "raw_code": "public static int scan(long v){\n  return 63 - Long.numberOfLeadingZeros(v);\n}"}
{"ids": "1155", "raw_code": "public static boolean isAllUpperCase(String str){\n  if (str == null)   return false;\n  boolean hasLetters=false;\n  char c;\n  for (int i=str.length() - 1; i >= 0; i--) {\n    c=str.charAt(i);\n    if (Character.isLetter(c)) {\n      if (!Character.isUpperCase(c))       return false;\n      hasLetters=true;\n    }\n  }\n  return hasLetters;\n}"}
{"ids": "48961", "raw_code": "public static ClassPath createClassPath(String classPathString,String sysClassPathString,String extDirsString){\n  Path path=new Path();\n  if (sysClassPathString == null) {\n    sysClassPathString=System.getProperty(\"sun.boot.class.path\");\n  }\n  if (sysClassPathString != null) {\n    path.addFiles(sysClassPathString);\n  }\n  path.expandJarClassPaths(true);\n  if (extDirsString == null) {\n    extDirsString=System.getProperty(\"java.ext.dirs\");\n  }\n  if (extDirsString != null) {\n    path.addDirectories(extDirsString);\n  }\n  path.emptyPathDefault(\".\");\n  if (classPathString == null) {\n    classPathString=System.getProperty(\"env.class.path\");\n    if (classPathString == null) {\n      classPathString=\".\";\n    }\n  }\n  path.addFiles(classPathString);\n  return new ClassPath(path.toArray(new String[path.size()]));\n}"}
{"ids": "2177", "raw_code": "protected AbstractSpinedBuffer(int initialCapacity){\n  if (initialCapacity < 0)   throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n  this.initialChunkPower=Math.max(MIN_CHUNK_POWER,Integer.SIZE - Integer.numberOfLeadingZeros(initialCapacity - 1));\n}"}
{"ids": "26791", "raw_code": "public static void UF9(double[] x,double[] f,int nx){\n  int count1=0;\n  int count2=0;\n  int count3=0;\n  double sum1=0.0;\n  double sum2=0.0;\n  double sum3=0.0;\n  double yj;\n  double E=0.1;\n  for (int j=3; j <= nx; j++) {\n    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);\n    if (j % 3 == 1) {\n      sum1+=yj * yj;\n      count1++;\n    }\n else     if (j % 3 == 2) {\n      sum2+=yj * yj;\n      count2++;\n    }\n else {\n      sum3+=yj * yj;\n      count3++;\n    }\n  }\n  yj=(1.0 + E) * (1.0 - 4.0 * (2.0 * x[0] - 1.0) * (2.0 * x[0] - 1.0));\n  if (yj < 0.0) {\n    yj=0.0;\n  }\n  f[0]=0.5 * (yj + 2 * x[0]) * x[1] + 2.0 * sum1 / (double)count1;\n  f[1]=0.5 * (yj - 2 * x[0] + 2.0) * x[1] + 2.0 * sum2 / (double)count2;\n  f[2]=1.0 - x[1] + 2.0 * sum3 / (double)count3;\n}"}
{"ids": "28729", "raw_code": "private void cleaningText(){\n  int latinCount=0, nonLatinCount=0;\n  for (int i=0; i < text.length(); ++i) {\n    char c=text.charAt(i);\n    if (c <= 'z' && c >= 'A') {\n      ++latinCount;\n    }\n else     if (c >= '\\u0300' && UnicodeBlock.of(c) != UnicodeBlock.LATIN_EXTENDED_ADDITIONAL) {\n      ++nonLatinCount;\n    }\n  }\n  if (latinCount * 2 < nonLatinCount) {\n    StringBuffer textWithoutLatin=new StringBuffer();\n    for (int i=0; i < text.length(); ++i) {\n      char c=text.charAt(i);\n      if (c > 'z' || c < 'A')       textWithoutLatin.append(c);\n    }\n    text=textWithoutLatin;\n  }\n}"}
{"ids": "19671", "raw_code": "public void beginApplyInterval(){\n  intervalStartMillis=System.currentTimeMillis();\n  endMillis=intervalStartMillis;\n  state=TaskState.apply;\n}"}
{"ids": "31977", "raw_code": "void handshake() throws IgniteCheckedException, SSLException {\n  if (log.isDebugEnabled())   log.debug(\"Entered handshake(): [handshakeStatus=\" + handshakeStatus + \", ses=\"+ ses+ ']');\n  lock();\n  try {\n    boolean loop=true;\n    while (loop) {\nswitch (handshakeStatus) {\ncase NOT_HANDSHAKING:\ncase FINISHED:\n{\n          SSLSession sslSes=sslEngine.getSession();\n          if (log.isDebugEnabled())           log.debug(\"Finished ssl handshake [protocol=\" + sslSes.getProtocol() + \", cipherSuite=\"+ sslSes.getCipherSuite()+ \", ses=\"+ ses+ ']');\n          handshakeFinished=true;\n          if (!initHandshakeComplete) {\n            initHandshakeComplete=true;\n            GridNioFutureImpl<?> fut=ses.removeMeta(HANDSHAKE_FUT_META_KEY);\n            if (fut != null)             fut.onDone();\n            parent.proceedSessionOpened(ses);\n          }\n          loop=false;\n          break;\n        }\ncase NEED_TASK:\n{\n        if (log.isDebugEnabled())         log.debug(\"Need to run ssl tasks: \" + ses);\n        handshakeStatus=runTasks();\n        break;\n      }\ncase NEED_UNWRAP:\n{\n      if (log.isDebugEnabled())       log.debug(\"Need to unwrap incoming data: \" + ses);\n      Status status=unwrapHandshake();\n      if (status == BUFFER_UNDERFLOW && handshakeStatus != FINISHED || sslEngine.isInboundDone())       loop=false;\n      break;\n    }\ncase NEED_WRAP:\n{\n    if (outNetBuf.hasRemaining())     U.warn(log,\"Output net buffer has unsent bytes during handshake (will clear): \" + ses);\n    outNetBuf.clear();\n    SSLEngineResult res=sslEngine.wrap(handshakeBuf,outNetBuf);\n    outNetBuf.flip();\n    handshakeStatus=res.getHandshakeStatus();\n    if (log.isDebugEnabled())     log.debug(\"Wrapped handshake data [status=\" + res.getStatus() + \", handshakeStatus=\"+ handshakeStatus+ \", ses=\"+ ses+ ']');\n    writeNetBuffer();\n    break;\n  }\ndefault :\n{\n  throw new IllegalStateException(\"Invalid handshake status in handshake method [handshakeStatus=\" + handshakeStatus + \", ses=\"+ ses+ ']');\n}\n}\n}\n}\n  finally {\nunlock();\n}\nif (log.isDebugEnabled()) log.debug(\"Leaved handshake(): [handshakeStatus=\" + handshakeStatus + \", ses=\"+ ses+ ']');\n}"}
{"ids": "31691", "raw_code": "public void sendMessages(List<ProducerRecord<String,String>> records){\n  Producer<String,String> producer=new KafkaProducer<>(getProducerConfig());\n  for (  ProducerRecord<String,String> rec : records)   producer.send(rec);\n  producer.flush();\n  producer.close();\n}"}
{"ids": "7981", "raw_code": "private static JFreeChart createChart(){\n  XYSeries series1=new XYSeries(\"Series 1\");\n  series1.add(1.0,1.0);\n  series1.add(2.0,2.0);\n  series1.add(3.0,3.0);\n  XYDataset dataset=new XYSeriesCollection(series1);\n  return ChartFactory.createXYStepChart(\"Step Chart\",\"Domain\",\"Range\",dataset,PlotOrientation.VERTICAL,true,true,true);\n}"}
{"ids": "70529", "raw_code": "public void appendToNalUnit(byte[] data,int offset,int limit){\n  if (!isFilling) {\n    return;\n  }\n  int readLength=limit - offset;\n  if (nalData.length < nalLength + readLength) {\n    nalData=Arrays.copyOf(nalData,(nalLength + readLength) * 2);\n  }\n  System.arraycopy(data,offset,nalData,nalLength,readLength);\n  nalLength+=readLength;\n}"}
{"ids": "10004", "raw_code": "public boolean isNumberGeographical(PhoneNumber phoneNumber){\n  return isNumberGeographical(getNumberType(phoneNumber),phoneNumber.getCountryCode());\n}"}
{"ids": "38251", "raw_code": "protected int weightedDistribution(int[] weights){\n  int sum=0;\n  for (  int weight : weights) {\n    sum+=weight;\n  }\n  int val=(int)Math.floor(m_random.nextDouble() * sum);\n  for (int i=0; i < weights.length; i++) {\n    val-=weights[i];\n    if (val < 0) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"ids": "30656", "raw_code": "public static boolean isAssignable(Class targetType,Class valueType){\n  Assert.notNull(targetType,\"Target type must not be null\");\n  Assert.notNull(valueType,\"Value type must not be null\");\n  return (targetType.isAssignableFrom(valueType) || targetType.equals(primitiveWrapperTypeMap.get(valueType)));\n}"}
{"ids": "50776", "raw_code": "public DialogCheckBox addDialogCheckBox(String description,String labelText,boolean initialState){\n  String[] args=new String[4];\n  args[0]=\"checkbox\";\n  args[1]=description;\n  args[2]=labelText;\n  args[3]=Boolean.toString(initialState);\n  DialogCheckBox dcb=new DialogCheckBox();\n  dcb.setArgs(args);\n  components.add(dcb);\n  mainPanel.add(dcb);\n  return dcb;\n}"}
{"ids": "24319", "raw_code": "private void performRestore(File memberDir,File backupDir) throws Exception {\n  List<File> ifFiles=FileUtil.findAll(memberDir,\".*\\\\.if$\");\n  for (  File file : ifFiles) {\n    file.delete();\n  }\n  List<File> oplogs=FileUtil.findAll(memberDir,OPLOG_REGEX);\n  for (  File file : oplogs) {\n    file.delete();\n  }\n  File restoreScript=new File(backupDir,\"restore.sh\");\n  if (!restoreScript.exists()) {\n    restoreScript=new File(backupDir,\"restore.bat\");\n  }\n  assertTrue(restoreScript.exists());\n  assertEquals(0,execute(restoreScript.getAbsolutePath()));\n}"}
{"ids": "64038", "raw_code": "public static boolean downloadUrlToStream(String urlString,OutputStream outputStream){\n  disableConnectionReuseIfNecessary();\n  HttpURLConnection urlConnection=null;\n  BufferedOutputStream out=null;\n  BufferedInputStream in=null;\n  try {\n    final URL url=new URL(urlString);\n    urlConnection=(HttpURLConnection)url.openConnection();\n    in=new BufferedInputStream(urlConnection.getInputStream(),IO_BUFFER_SIZE);\n    out=new BufferedOutputStream(outputStream,IO_BUFFER_SIZE);\n    int b;\n    while ((b=in.read()) != -1) {\n      out.write(b);\n    }\n    return true;\n  }\n catch (  final IOException e) {\n    Log.e(TAG,\"Error in downloadBitmap - \" + e);\n  }\n finally {\n    if (urlConnection != null) {\n      urlConnection.disconnect();\n    }\n    try {\n      if (out != null) {\n        out.close();\n      }\n      if (in != null) {\n        in.close();\n      }\n    }\n catch (    final IOException e) {\n    }\n  }\n  return false;\n}"}
{"ids": "69883", "raw_code": "@Override public void transactionCommited(final long commitTime){\n  if (listeners.isEmpty()) {\n    records.reset();\n  }\n else {\n    records.flush();\n    listeners.forEach(null);\n  }\n}"}
{"ids": "66052", "raw_code": "public static MWarehousePrice[] find(MBPartner bPartner,boolean IsSOTrx,Timestamp valid,int M_Warehouse_ID,String Value,String Name,String UPC,String SKU,String trxName){\n  int M_PriceList_ID=IsSOTrx ? bPartner.getM_PriceList_ID() : bPartner.getPO_PriceList_ID();\n  MPriceList pl=null;\n  if (M_PriceList_ID == 0)   pl=MPriceList.getDefault(bPartner.getCtx(),IsSOTrx);\n else   pl=MPriceList.get(bPartner.getCtx(),M_PriceList_ID,trxName);\n  if (pl == null) {\n    s_log.severe(\"No PriceList found\");\n    return null;\n  }\n  MPriceListVersion plv=pl.getPriceListVersion(valid);\n  if (plv == null) {\n    s_log.severe(\"No PriceListVersion found for M_PriceList_ID=\" + pl.getM_PriceList_ID());\n    return null;\n  }\n  return find(bPartner.getCtx(),plv.getM_PriceList_Version_ID(),M_Warehouse_ID,Value,Name,UPC,SKU,trxName);\n}"}
{"ids": "83662", "raw_code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  COUNTER=new AtomicInteger();\n  serializers=new HashMap<Class,SerializerWrapper>();\n  serializersArray=new Serializer[0];\n  deserialize(in,this);\n}"}
{"ids": "33657", "raw_code": "public static Date translateTime(Date date,TimeZone src,TimeZone dest){\n  Date newDate=new Date();\n  int offset=(dest.getOffset(date.getTime()) - src.getOffset(date.getTime()));\n  newDate.setTime(date.getTime() - offset);\n  return newDate;\n}"}
{"ids": "37239", "raw_code": "private void showPopupMenu(final MouseEvent event){\n  final CTracesTableFilterMenu menu=new CTracesTableFilterMenu(getFilterField());\n  menu.show(event.getComponent(),event.getX(),event.getY());\n}"}
{"ids": "21930", "raw_code": "private TaskResourceRep finishDeactivateTask(BlockConsistencyGroup consistencyGroup,String task){\n  URI id=consistencyGroup.getId();\n  Operation op=new Operation();\n  op.ready();\n  op.setProgress(100);\n  op.setResourceType(ResourceOperationTypeEnum.DELETE_CONSISTENCY_GROUP);\n  Operation status=_dbClient.createTaskOpStatus(BlockConsistencyGroup.class,id,task,op);\n  return toTask(consistencyGroup,task,status);\n}"}
{"ids": "8579", "raw_code": "public static Severity parseSeverity(String str) throws IllegalSeverityException {\n  if (str.equalsIgnoreCase(Messages.ERROR)) {\n    return ERROR;\n  }\n else   if (str.equalsIgnoreCase(Messages.WARNING)) {\n    return WARNING;\n  }\n else {\n    throw new IllegalSeverityException();\n  }\n}"}
{"ids": "42790", "raw_code": "private void restoreFromKeypress(final KeyEvent keyEvent,final int keyNumber){\n  if (keyEvent.isAltDown()) {\n    final int arrayIndex=(keyNumber > 0 ? keyNumber : MAX_RECENT_MESSAGES) - 1;\n    if (arrayIndex < recentMessages.size()) {\n      displayMessage(recentMessages.get(arrayIndex));\n    }\n    keyEvent.consume();\n  }\n}"}
{"ids": "41972", "raw_code": "public void removeScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.remove(listener);\n}"}
{"ids": "63106", "raw_code": "public void fire(Session session,int type,boolean beforeAction){\n  if (rowBased || before != beforeAction || (typeMask & type) == 0) {\n    return;\n  }\n  load();\n  Connection c2=session.createConnection(false);\n  boolean old=false;\n  if (type != Trigger.SELECT) {\n    old=session.setCommitOrRollbackDisabled(true);\n  }\n  Value identity=session.getLastScopeIdentity();\n  try {\n    triggerCallback.fire(c2,null,null);\n  }\n catch (  Throwable e) {\n    throw DbException.get(ErrorCode.ERROR_EXECUTING_TRIGGER_3,e,getName(),triggerClassName != null ? triggerClassName : \"..source..\",e.toString());\n  }\n finally {\n    if (session.getLastTriggerIdentity() != null) {\n      session.setLastScopeIdentity(session.getLastTriggerIdentity());\n      session.setLastTriggerIdentity(null);\n    }\n else {\n      session.setLastScopeIdentity(identity);\n    }\n    if (type != Trigger.SELECT) {\n      session.setCommitOrRollbackDisabled(old);\n    }\n  }\n}"}
{"ids": "43413", "raw_code": "public MqttDevice mqttDevice(){\n  return mqttDevice;\n}"}
{"ids": "74298", "raw_code": "public boolean skipsLocation(String locationId){\n  return _skipLocationsList.contains(locationId);\n}"}
{"ids": "55317", "raw_code": "private List<Race> parseRaces(String json){\n  List<Race> result=new ArrayList<>();\n  if (json == null) {\n    return null;\n  }\n  JSONParser parser=new JSONParser();\n  try {\n    JSONObject root=(JSONObject)parser.parse(json.trim());\n    JSONArray races=(JSONArray)root.get(\"races\");\n    for (    Object o : races) {\n      if (o instanceof JSONObject) {\n        Race race=parseRace((JSONObject)o);\n        if (race != null) {\n          result.add(race);\n        }\n      }\n    }\n  }\n catch (  ParseException|ClassCastException|NullPointerException ex) {\n    LOGGER.warning(\"Error parsing SRL: \" + ex);\n    return null;\n  }\n  return result;\n}"}
{"ids": "56943", "raw_code": "public boolean isConnected(short nodeId){\n  NodeConnection nc=connections.get(nodeId);\n  return (nc != null && nc.state == NodeConnectionState.CONNECTED);\n}"}
{"ids": "24222", "raw_code": "public ObjectName manageSystemMember(DistributedMember distributedMember) throws AdminException, MalformedObjectNameException {\n  try {\n    SystemMember member=lookupSystemMember(distributedMember);\n    if (member == null)     return null;\n    SystemMemberJmxImpl jmx=(SystemMemberJmxImpl)member;\n    ObjectName oname=new ObjectName(jmx.getMBeanName());\n    return oname;\n  }\n catch (  AdminException e) {\n    logger.warn(e.getMessage(),e);\n    throw e;\n  }\ncatch (  RuntimeException e) {\n    logger.warn(e.getMessage(),e);\n    throw e;\n  }\ncatch (  VirtualMachineError err) {\n    SystemFailure.initiateFailure(err);\n    throw err;\n  }\ncatch (  Error e) {\n    SystemFailure.checkFailure();\n    logger.error(e.getMessage(),e);\n    throw e;\n  }\n}"}
{"ids": "44521", "raw_code": "private void connect() throws IOException {\n  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port));\n  jmxc=JMXConnectorFactory.connect(jmxUrl,null);\n  MBeanServerConnection mbeanServerConn=jmxc.getMBeanServerConnection();\n  try {\n    ObjectName name=new ObjectName(DOMAINLIST_OBJECT_NAME);\n    domainListProxy=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,DomainListManagementMBean.class,true);\n    name=new ObjectName(VIRTUALUSERTABLE_OBJECT_NAME);\n    virtualUserTableProxy=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,RecipientRewriteTableManagementMBean.class,true);\n    name=new ObjectName(USERSREPOSITORY_OBJECT_NAME);\n    usersRepositoryProxy=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,UsersRepositoryManagementMBean.class,true);\n    name=new ObjectName(MAILBOXCOPIER_OBJECT_NAME);\n    mailboxCopierManagement=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,MailboxCopierManagementMBean.class,true);\n    name=new ObjectName(MAILBOXMANAGER_OBJECT_NAME);\n    mailboxManagerManagement=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,MailboxManagerManagementMBean.class,true);\n    name=new ObjectName(QUOTAMANAGER_OBJECT_NAME);\n    quotaManagement=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,QuotaManagementMBean.class,true);\n    name=new ObjectName(REINDEXER_OBJECT_NAME);\n    reIndexerManagement=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,ReIndexerManagementMBean.class,true);\n    name=new ObjectName(SIEVEMANAGER_OBJECT_NAME);\n    sieveRepositoryManagement=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,SieveRepositoryManagementMBean.class,true);\n  }\n catch (  MalformedObjectNameException e) {\n    throw new RuntimeException(\"Invalid ObjectName? Please report this as a bug.\",e);\n  }\n}"}
{"ids": "60187", "raw_code": "public static void show(@NotNull final JComponent dataComponent,@Nullable final JComponent actionListenerComponent,@NotNull final String title,@NotNull final Project project,@Nullable final Collection<Runnable> closeListeners,@NotNull final AnAction... customActions){\n  final ToolWindowApi api=new ToolWindowApi(project,title);\n  final Collection<Runnable> closeListenersToAdd=new ArrayList<Runnable>(Collections.singleton(new MyToolWindowCloser(api)));\n  if (closeListeners != null) {\n    closeListenersToAdd.addAll(closeListeners);\n  }\n  api.add(PanelWithActions.wrap(dataComponent,closeListenersToAdd,actionListenerComponent,customActions));\n}"}
{"ids": "81612", "raw_code": "public IntentBuilder addEmailCc(String address){\n  if (mCcAddresses == null) {\n    mCcAddresses=new ArrayList<String>();\n  }\n  mCcAddresses.add(address);\n  return this;\n}"}
{"ids": "28732", "raw_code": "private ArrayList<String> extractNGrams(){\n  ArrayList<String> list=new ArrayList<String>();\n  NGram ngram=new NGram();\n  for (int i=0; i < text.length(); ++i) {\n    ngram.addChar(text.charAt(i));\n    for (int n=1; n <= NGram.N_GRAM; ++n) {\n      String w=ngram.get(n);\n      if (w != null && wordLangProbMap.containsKey(w))       list.add(w);\n    }\n  }\n  return list;\n}"}
{"ids": "8742", "raw_code": "protected void updateKeys(){\n  ButtonInfo[] buttons=NavigationButtons.loadButtonMap(mContext);\n  int visibleCount=0;\n  for (int i=0; i < buttons.length; i++) {\n    int id=BUTTON_IDS[i];\n    ButtonInfo info=buttons[mVertical ? buttons.length - i - 1 : i];\n    KeyButtonView button=(KeyButtonView)mParent.findViewById(id);\n    boolean isSmallButton=NavigationButtons.IS_SLOT_SMALL[i];\n    button.setInfo(info,mVertical,isSmallButton);\n    if (!info.equals(NavigationButtons.EMPTY) && !isSmallButton) {\n      visibleCount++;\n    }\n    button.setTranslationX(0);\n    mButtonViews.set(i,button);\n  }\n  if (isDevicePhone(mContext)) {\n    adjustPadding(visibleCount);\n  }\n  updateLowLights(visibleCount);\n}"}
{"ids": "26475", "raw_code": "public static final String readString(byte[] bytes,String charset) throws IOException {\n  return readString(bytes,0,bytes.length,Charset.forName(charset));\n}"}
{"ids": "25339", "raw_code": "private void updateCommandCache(String group,String command,boolean needNotify){\n  String oldCommand=commandCache.get(group);\n  if (!command.equals(oldCommand)) {\n    commandCache.put(group,command);\n    if (needNotify) {\n      notifyExecutor.execute(new NotifyCommand(group,command));\n      LoggerUtil.info(String.format(\"command data change: group=%s, command=%s: \",group,command));\n    }\n  }\n else {\n    LoggerUtil.info(String.format(\"command data not change: group=%s, command=%s: \",group,command));\n  }\n}"}
{"ids": "6466", "raw_code": "public void updateLanguage(){\n  createLegendPanel(legendPanel);\n  directoryTreeModel.changeRootText(I18n.tr(\"Library Folders\"));\n}"}
{"ids": "65443", "raw_code": "private synchronized void rebuildJournal() throws IOException {\n  if (journalWriter != null) {\n    journalWriter.close();\n  }\n  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));\n  try {\n    writer.write(MAGIC);\n    writer.write(\"\\n\");\n    writer.write(VERSION_1);\n    writer.write(\"\\n\");\n    writer.write(Integer.toString(appVersion));\n    writer.write(\"\\n\");\n    writer.write(Integer.toString(valueCount));\n    writer.write(\"\\n\");\n    writer.write(\"\\n\");\n    for (    Entry entry : lruEntries.values()) {\n      if (entry.currentEditor != null) {\n        writer.write(DIRTY + ' ' + entry.key+ '\\n');\n      }\n else {\n        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\\n');\n      }\n    }\n  }\n  finally {\n    writer.close();\n  }\n  if (journalFile.exists()) {\n    renameTo(journalFile,journalFileBackup,true);\n  }\n  renameTo(journalFileTmp,journalFile,false);\n  journalFileBackup.delete();\n  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));\n}"}
{"ids": "77754", "raw_code": "public static byte[] decompressForZlib(byte[] bytesToDecompress){\n  byte[] returnValues=null;\n  Inflater inflater=new Inflater();\n  int numberOfBytesToDecompress=bytesToDecompress.length;\n  inflater.setInput(bytesToDecompress,0,numberOfBytesToDecompress);\n  int bufferSizeInBytes=numberOfBytesToDecompress;\n  int numberOfBytesDecompressedSoFar=0;\n  List<Byte> bytesDecompressedSoFar=new ArrayList<Byte>();\n  try {\n    while (inflater.needsInput() == false) {\n      byte[] bytesDecompressedBuffer=new byte[bufferSizeInBytes];\n      int numberOfBytesDecompressedThisTime=inflater.inflate(bytesDecompressedBuffer);\n      numberOfBytesDecompressedSoFar+=numberOfBytesDecompressedThisTime;\n      for (int b=0; b < numberOfBytesDecompressedThisTime; b++) {\n        bytesDecompressedSoFar.add(bytesDecompressedBuffer[b]);\n      }\n    }\n    returnValues=new byte[bytesDecompressedSoFar.size()];\n    for (int b=0; b < returnValues.length; b++) {\n      returnValues[b]=(byte)(bytesDecompressedSoFar.get(b));\n    }\n  }\n catch (  DataFormatException dfe) {\n    dfe.printStackTrace();\n  }\n  inflater.end();\n  return returnValues;\n}"}
{"ids": "27508", "raw_code": "protected boolean acceptChunk(final IChunkMessage<IBindingSet> msg){\n  if (msg == null)   throw new IllegalArgumentException();\n  if (!msg.isMaterialized())   throw new IllegalStateException();\n  final AbstractRunningQuery q=getRunningQuery(msg.getQueryId());\n  if (q == null) {\n    throw new IllegalStateException();\n  }\n  if (!q.acceptChunk(msg)) {\n    msg.release();\n    return false;\n  }\n  if (!isRunning()) {\n    msg.release();\n    return false;\n  }\n  priorityQueue.add(q);\n  return true;\n}"}
{"ids": "82383", "raw_code": "public String format(Object obj,StringBuffer toAppendTo) throws IllegalArgumentException {\n  return format((Date)obj,toAppendTo);\n}"}
{"ids": "36938", "raw_code": "void addMember(final TypeMember member){\n  Preconditions.checkNotNull(member,\"Error: member argument can not be null.\");\n  Preconditions.checkArgument(member.getParentType() == this,\"Error: the member's parent type is not this type.\");\n  members.add(member);\n}"}
{"ids": "38740", "raw_code": "public synchronized void removeIncrementalClassifierListener(IncrementalClassifierListener cl){\n  m_incrementalClassifierListeners.remove(cl);\n}"}
{"ids": "42950", "raw_code": "public static Number asinh(Number a){\n  return FastMath.asinh(a.doubleValue());\n}"}
{"ids": "24147", "raw_code": "private String formatNames(String[] names,int startIndex){\n  StringBuilder sb=new StringBuilder();\n  if (names != null) {\n    for (    String name : names) {\n      sb.append(name.substring(startIndex));\n      sb.append('\\n');\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "61385", "raw_code": "public String lookupPrefix(String uri){\n  String foundPrefix=null;\n  Enumeration prefixes=m_namespaces.keys();\n  while (prefixes.hasMoreElements()) {\n    String prefix=(String)prefixes.nextElement();\n    String uri2=lookupNamespace(prefix);\n    if (uri2 != null && uri2.equals(uri)) {\n      foundPrefix=prefix;\n      break;\n    }\n  }\n  return foundPrefix;\n}"}
{"ids": "16860", "raw_code": "public void removeAllTrailers(){\n  trailer.clear();\n  firePropertyChange(TRAILER,null,trailer);\n}"}
{"ids": "34909", "raw_code": "public Builder clear(){\n  localeBuilder.clear();\n  return this;\n}"}
{"ids": "48424", "raw_code": "private static boolean versionMatches(Integer v1,Integer v2){\n  if (v1 == null || v1 == 0 || v2 == null || v2 == 0) {\n    return true;\n  }\n  return v1.equals(v2);\n}"}
{"ids": "41384", "raw_code": "public static Optional<String> packageName(String longName){\n  if (longName.contains(DOT)) {\n    return Optional.of(longName.substring(0,longName.lastIndexOf(DOT)));\n  }\n else {\n    return Optional.empty();\n  }\n}"}
{"ids": "43653", "raw_code": "public int[][] e2f(){\n  int eDim=tgtEndExclusive - tgtStartInclusive;\n  int[][] e2f=new int[eDim][];\n  for (int i=tgtStartInclusive; i < tgtEndExclusive; ++i) {\n    int localIdx=i - tgtStartInclusive;\n    int[] e2fI=sentencePair.e2f(i);\n    int srcAlignDim=e2fI.length;\n    e2f[localIdx]=new int[srcAlignDim];\n    if (srcAlignDim > 0) {\n      System.arraycopy(e2fI,0,e2f[localIdx],0,srcAlignDim);\n      for (int j=0; j < srcAlignDim; ++j) {\n        e2f[localIdx][j]-=srcStartInclusive;\n      }\n    }\n  }\n  return e2f;\n}"}
{"ids": "85852", "raw_code": "public void readExif(String inFileName) throws FileNotFoundException, IOException {\n  if (inFileName == null) {\n    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);\n  }\n  InputStream is=null;\n  try {\n    is=(InputStream)new BufferedInputStream(new FileInputStream(inFileName));\n    readExif(is);\n  }\n catch (  IOException e) {\n    closeSilently(is);\n    throw e;\n  }\n  is.close();\n}"}
{"ids": "18547", "raw_code": "private void assertWriteResult(int size) throws IOException {\n  ByteBuffer buf=ByteBuffer.allocate(size + 1);\n  int count=0;\n  int total=0;\n  long beginTime=System.currentTimeMillis();\n  while ((count=clientChannel.read(buf)) != -1) {\n    total=total + count;\n    if (System.currentTimeMillis() - beginTime > 10000) {\n      break;\n    }\n  }\n  assertEquals(total,size);\n  buf.flip();\n  for (int i=0; i < count; i++) {\n    assertEquals((byte)i,buf.get(i));\n  }\n}"}
{"ids": "44913", "raw_code": "public static boolean isFileUploadAvailable(final boolean needsCorrectMimeType){\n  if (Build.VERSION.SDK_INT == 19) {\n    final String platformVersion=(Build.VERSION.RELEASE == null) ? \"\" : Build.VERSION.RELEASE;\n    return !needsCorrectMimeType && (platformVersion.startsWith(\"4.4.3\") || platformVersion.startsWith(\"4.4.4\"));\n  }\n else {\n    return true;\n  }\n}"}
{"ids": "73032", "raw_code": "private boolean menuItemAction(int screenX,int screenY,int action){\n  ListView listView=mAppMenu.getPopup().getListView();\n  ArrayList<View> itemViews=new ArrayList<View>();\n  for (int i=0; i < listView.getChildCount(); ++i) {\n    boolean hasImageButtons=false;\n    if (listView.getChildAt(i) instanceof LinearLayout) {\n      LinearLayout layout=(LinearLayout)listView.getChildAt(i);\n      for (int j=0; j < layout.getChildCount(); ++j) {\n        itemViews.add(layout.getChildAt(j));\n        if (layout.getChildAt(j) instanceof ImageButton)         hasImageButtons=true;\n      }\n    }\n    if (!hasImageButtons)     itemViews.add(listView.getChildAt(i));\n  }\n  boolean didPerformClick=false;\n  for (int i=0; i < itemViews.size(); ++i) {\n    View itemView=itemViews.get(i);\n    boolean shouldPerform=itemView.isEnabled() && itemView.isShown() && getScreenVisibleRect(itemView).contains(screenX,screenY);\nswitch (action) {\ncase ITEM_ACTION_HIGHLIGHT:\n      itemView.setPressed(shouldPerform);\n    break;\ncase ITEM_ACTION_PERFORM:\n  if (shouldPerform) {\n    itemView.performClick();\n    didPerformClick=true;\n  }\nbreak;\ncase ITEM_ACTION_CLEAR_HIGHLIGHT_ALL:\nitemView.setPressed(false);\nbreak;\ndefault :\nassert false;\nbreak;\n}\n}\nreturn didPerformClick;\n}"}
{"ids": "8602", "raw_code": "public void toggle(JFXDrawer drawer){\n  if (!drawers.contains(drawer))   addDrawer(drawer);\n  if (drawer.isShown() || drawer.isShowing())   drawer.close();\n else {\n    updateDrawerPosition(drawer);\n    drawer.open();\n  }\n}"}
{"ids": "22175", "raw_code": "public static boolean isVMwareVapp(){\n  if (isVMwareVapp != null) {\n    log.info(\"Return value {} from cached result\",isVMwareVapp.booleanValue());\n    return isVMwareVapp.booleanValue();\n  }\n  final String[] cmd={GET_OVF_PROPERTY_CMD,IS_VAPP};\n  Exec.Result result=Exec.sudo(CMD_TIMEOUT,cmd);\n  if (!result.exitedNormally()) {\n    log.error(\"Failed to check if it's vApp {}\",result.getStdError());\n    throw new IllegalStateException(\"Failed to check platform\");\n  }\n  if (result.getExitValue() == 0) {\n    log.info(\"Current platform is VMware vApp\");\n    isVMwareVapp=Boolean.TRUE;\n    return isVMwareVapp.booleanValue();\n  }\n  log.info(\"The exit value of platform check: {}\",result.getExitValue());\n  isVMwareVapp=Boolean.FALSE;\n  return isVMwareVapp.booleanValue();\n}"}
{"ids": "59487", "raw_code": "protected String toBase64(byte[] data){\n  return Base64.encodeToString(data,Base64.DEFAULT);\n}"}
{"ids": "19618", "raw_code": "@Override public String toVerboseString(){\n  final StringBuilder sb=new StringBuilder();\n  print(sb,0,Verbosity.LOG_WITH_STACKTRACE);\n  return sb.toString();\n}"}
{"ids": "57086", "raw_code": "public static long quantile(long[] values,double quantile){\n  if (values == null)   throw new IllegalArgumentException(\"Values cannot be null.\");\n  if (quantile < 0.0 || quantile > 1.0)   throw new IllegalArgumentException(\"Quantile must be between 0.0 and 1.0\");\n  long[] copy=new long[values.length];\n  System.arraycopy(values,0,copy,0,copy.length);\n  Arrays.sort(copy);\n  int index=(int)(copy.length * quantile);\n  return copy[index];\n}"}
{"ids": "20255", "raw_code": "public void addTreeUpdate(SLDTreeUpdatedInterface sldTree){\n  treeUpdateList.add(sldTree);\n}"}
{"ids": "715", "raw_code": "public static double distance(VisualItem vi1,VisualItem vi2){\n  double dx=vi1.getX() - vi2.getX();\n  double dy=vi1.getY() - vi2.getY();\n  return Math.sqrt(dx * dx + dy * dy);\n}"}
{"ids": "10407", "raw_code": "@Override public void validateRequest(GenericAttributeResolveRequest request) throws BadAttributeResolveRequestException {\n  if (LOG.isDebugEnabled())   LOG.debug(\" validating HDFS Resource Resolve  request ...\");\n  String siteId=request.getSite();\n  if (null == siteId)   throw new BadAttributeResolveRequestException(HDFSResourceConstants.HDFS_RESOURCE_RESOLVE_FORMAT_HINT);\n  String filePath=request.getQuery();\n  if (null == filePath || !filePath.startsWith(\"/\"))   throw new BadAttributeResolveRequestException(HDFSResourceConstants.HDFS_RESOURCE_RESOLVE_FORMAT_HINT);\n  if (LOG.isDebugEnabled())   LOG.debug(\" HDFS Resource Resolve request validated successfully...\");\n}"}
{"ids": "65023", "raw_code": "public Trigger when(Criterion criterion){\n  if (criterion != null) {\n    criterions.add(criterion);\n  }\n  return this;\n}"}
{"ids": "39392", "raw_code": "public void clear(){\n  m_ReadMethods.clear();\n  m_WriteMethods.clear();\n  try {\n    addMethods();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "35079", "raw_code": "public static String join(CharSequence delimiter,Object[] tokens){\n  StringBuilder sb=new StringBuilder();\n  boolean firstTime=true;\n  for (  Object token : tokens) {\n    if (firstTime) {\n      firstTime=false;\n    }\n else {\n      sb.append(delimiter);\n    }\n    sb.append(token);\n  }\n  return sb.toString();\n}"}
{"ids": "15348", "raw_code": "public static Packet toPacket(ByteBuffer data){\n  final byte code=data.get();\n  final short id=(short)((data.get()) & 0xFF);\n  final short datalen=data.getShort();\n  final byte[] authData=new byte[16];\n  data.get(authData);\n  final PacketType type=PacketType.getPacketType(code);\n  Packet pkt=null;\nswitch (type) {\ncase ACCESS_ACCEPT:\n    pkt=new AccessAccept();\n  pkt.setAuthenticator(new ResponseAuthenticator(authData));\nbreak;\ncase ACCESS_CHALLENGE:\npkt=new AccessChallenge();\npkt.setAuthenticator(new ResponseAuthenticator(authData));\nbreak;\ncase ACCESS_REJECT:\npkt=new AccessReject();\npkt.setAuthenticator(new ResponseAuthenticator(authData));\nbreak;\ncase ACCESS_REQUEST:\npkt=new AccessRequest();\npkt.setAuthenticator(new RequestAuthenticator(authData));\nbreak;\ncase UNKNOWN:\ndefault :\nLOG.log(Level.WARNING,\"Unsupported packet type code '\" + code + \"' received. Unable to handle packet.\");\nreturn null;\n}\npkt.setIdentifier(id);\nAttribute a=null;\nwhile ((a=PacketFactory.nextAttribute(data)) != null) {\npkt.addAttribute(a);\n}\nreturn pkt;\n}"}
{"ids": "63466", "raw_code": "public void unlockReadLocks(){\n  if (database.isMultiVersion()) {\n    return;\n  }\n  for (int i=0; i < locks.size(); i++) {\n    Table t=locks.get(i);\n    if (!t.isLockedExclusively()) {\nsynchronized (database) {\n        t.unlock(this);\n        locks.remove(i);\n      }\n      i--;\n    }\n  }\n}"}
{"ids": "35253", "raw_code": "protected void processAttributes(){\n  for (  final String tag : tags) {\n    for (    final String inherit : inherits) {\n      styleSheet.addStyles(tag,styleSheet.getStyles(inherit));\n    }\n    styleSheet.addStyles(tag,attributes);\n  }\n}"}
{"ids": "19505", "raw_code": "private boolean isImage(String url){\n  return url.matches(Regex.IMAGE_PATTERN);\n}"}
{"ids": "17741", "raw_code": "public void addAttribute(AttributedCharacterIterator.Attribute attribute,Object value,int start,int end){\n  if (attribute == null) {\n    throw new NullPointerException(\"attribute == null\");\n  }\n  if (start < 0 || end > text.length() || start >= end) {\n    throw new IllegalArgumentException();\n  }\n  if (value == null) {\n    return;\n  }\n  List<Range> ranges=attributeMap.get(attribute);\n  if (ranges == null) {\n    ranges=new ArrayList<Range>(1);\n    ranges.add(new Range(start,end,value));\n    attributeMap.put(attribute,ranges);\n    return;\n  }\n  ListIterator<Range> it=ranges.listIterator();\n  while (it.hasNext()) {\n    Range range=it.next();\n    if (end <= range.start) {\n      it.previous();\n      break;\n    }\n else     if (start < range.end || (start == range.end && value.equals(range.value))) {\n      Range r1=null, r3;\n      it.remove();\n      r1=new Range(range.start,start,range.value);\n      r3=new Range(end,range.end,range.value);\n      while (end > range.end && it.hasNext()) {\n        range=it.next();\n        if (end <= range.end) {\n          if (end > range.start || (end == range.start && value.equals(range.value))) {\n            it.remove();\n            r3=new Range(end,range.end,range.value);\n            break;\n          }\n        }\n else {\n          it.remove();\n        }\n      }\n      if (value.equals(r1.value)) {\n        if (value.equals(r3.value)) {\n          it.add(new Range(r1.start < start ? r1.start : start,r3.end > end ? r3.end : end,r1.value));\n        }\n else {\n          it.add(new Range(r1.start < start ? r1.start : start,end,r1.value));\n          if (r3.start < r3.end) {\n            it.add(r3);\n          }\n        }\n      }\n else {\n        if (value.equals(r3.value)) {\n          if (r1.start < r1.end) {\n            it.add(r1);\n          }\n          it.add(new Range(start,r3.end > end ? r3.end : end,r3.value));\n        }\n else {\n          if (r1.start < r1.end) {\n            it.add(r1);\n          }\n          it.add(new Range(start,end,value));\n          if (r3.start < r3.end) {\n            it.add(r3);\n          }\n        }\n      }\n      return;\n    }\n  }\n  it.add(new Range(start,end,value));\n}"}
{"ids": "59818", "raw_code": "public static boolean pointInRotatedRect(float[] point,RectF bound,float rot){\n  Matrix m=new Matrix();\n  float[] p=Arrays.copyOf(point,2);\n  m.setRotate(rot,bound.centerX(),bound.centerY());\n  Matrix m0=new Matrix();\n  if (!m.invert(m0))   return false;\n  m0.mapPoints(p);\n  return inclusiveContains(bound,p[0],p[1]);\n}"}
{"ids": "13062", "raw_code": "@Override public void warning(String domain,String key,XMLParseException exception) throws XNIException {\n  if (fErrorHandler != null) {\n    SAXParseException saxException=createSAXParseException(exception);\n    try {\n      fErrorHandler.warning(saxException);\n    }\n catch (    SAXParseException e) {\n      throw createXMLParseException(e);\n    }\ncatch (    SAXException e) {\n      throw createXNIException(e);\n    }\n  }\n}"}
{"ids": "67947", "raw_code": "public void modifyAll(Map<String,Collection<DynamicModification>> modifications,Collection<Throwable> problems) throws CannotCompileException {\n  for (  String className : modifications.keySet()) {\n    try {\n      modify(className,modifications.get(className));\n    }\n catch (    NotFoundException e) {\n      log.warn(\"Unable to modify \" + className,e);\n      problems.add(e);\n    }\ncatch (    ClassNotFoundException e) {\n      log.warn(\"Unable to modify \" + className,e);\n      problems.add(e);\n    }\ncatch (    IOException e) {\n      log.warn(\"Unable to modify \" + className,e);\n      problems.add(e);\n    }\n  }\n}"}
{"ids": "41718", "raw_code": "public MutableLocation toMutableLocation(World w){\n  return new MutableLocation(x,y,z,w);\n}"}
{"ids": "48337", "raw_code": "public boolean verify(GeneralNameInterface name) throws IOException {\n  if (name == null) {\n    throw new IOException(\"name is null\");\n  }\n  if (excluded != null && excluded.size() > 0) {\n    for (int i=0; i < excluded.size(); i++) {\n      GeneralSubtree gs=excluded.get(i);\n      if (gs == null)       continue;\n      GeneralName gn=gs.getName();\n      if (gn == null)       continue;\n      GeneralNameInterface exName=gn.getName();\n      if (exName == null)       continue;\nswitch (exName.constrains(name)) {\ncase GeneralNameInterface.NAME_DIFF_TYPE:\ncase GeneralNameInterface.NAME_WIDENS:\ncase GeneralNameInterface.NAME_SAME_TYPE:\n        break;\ncase GeneralNameInterface.NAME_MATCH:\ncase GeneralNameInterface.NAME_NARROWS:\n      return false;\n  }\n}\n}\nif (permitted != null && permitted.size() > 0) {\nboolean sameType=false;\nfor (int i=0; i < permitted.size(); i++) {\n  GeneralSubtree gs=permitted.get(i);\n  if (gs == null)   continue;\n  GeneralName gn=gs.getName();\n  if (gn == null)   continue;\n  GeneralNameInterface perName=gn.getName();\n  if (perName == null)   continue;\nswitch (perName.constrains(name)) {\ncase GeneralNameInterface.NAME_DIFF_TYPE:\n    continue;\ncase GeneralNameInterface.NAME_WIDENS:\ncase GeneralNameInterface.NAME_SAME_TYPE:\n  sameType=true;\ncontinue;\ncase GeneralNameInterface.NAME_MATCH:\ncase GeneralNameInterface.NAME_NARROWS:\nreturn true;\n}\n}\nif (sameType) {\nreturn false;\n}\n}\nreturn true;\n}"}
{"ids": "11137", "raw_code": "public void readGraphics(ObjectInputStream objstream) throws IOException {\n  Debug.message(\"omgraphics\",\"OMGraphicList: Reading cached graphics\");\n  try {\n    while (true) {\n      try {\n        OMGraphic omg=(OMGraphic)objstream.readObject();\n        graphics.add(omg);\n      }\n catch (      ClassNotFoundException e) {\n        e.printStackTrace();\n      }\ncatch (      OptionalDataException ode) {\n        ode.printStackTrace();\n      }\n    }\n  }\n catch (  EOFException e) {\n  }\n}"}
{"ids": "54097", "raw_code": "public void createTopics(int numPartitions,int replicationFactor,Set<String> topics){\n  createTopics(numPartitions,replicationFactor,topics.toArray(new String[topics.size()]));\n}"}
{"ids": "17115", "raw_code": "public synchronized void removeListener(Listener l){\n  listeners.remove(l);\n}"}
{"ids": "33257", "raw_code": "public CommandLine add(String... args){\n  if (args != null && args.length > 0) {\n    Collections.addAll(arguments,args);\n  }\n  return this;\n}"}
{"ids": "85839", "raw_code": "private void restoreIcon(BackupProtos.Key key,byte[] buffer,int dataSize) throws IOException {\n  if (VERBOSE)   Log.v(TAG,\"unpacking icon \" + key.id);\n  if (DEBUG)   Log.d(TAG,\"read (\" + buffer.length + \"): \"+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));\n  BackupProtos.Resource res=unpackProto(new BackupProtos.Resource(),buffer,dataSize);\n  if (DEBUG) {\n    Log.d(TAG,\"unpacked \" + res.dpi + \" dpi icon\");\n  }\n  Bitmap icon=BitmapFactory.decodeByteArray(res.data,0,res.data.length);\n  if (icon == null) {\n    Log.w(TAG,\"failed to unpack icon for \" + key.name);\n  }\n else {\n    if (VERBOSE)     Log.v(TAG,\"saving restored icon as: \" + key.name);\n    mIconCache.preloadIcon(ComponentName.unflattenFromString(key.name),icon,res.dpi,\"\",mUserSerial,mIdp);\n  }\n}"}
{"ids": "29791", "raw_code": "public static int determineConsecutiveDigitCount(CharSequence msg,int startpos){\n  int count=0;\n  int len=msg.length();\n  int idx=startpos;\n  if (idx < len) {\n    char ch=msg.charAt(idx);\n    while (isDigit(ch) && idx < len) {\n      count++;\n      idx++;\n      if (idx < len) {\n        ch=msg.charAt(idx);\n      }\n    }\n  }\n  return count;\n}"}
{"ids": "24743", "raw_code": "public EventStoreBuilder useSslConnection(String certificateCommonName){\n  settingsBuilder.sslSettings(SslSettings.trustCertificateCN(certificateCommonName));\n  return this;\n}"}
{"ids": "82719", "raw_code": "ActionMap createActionMap(){\n  ActionMap map=new ActionMapUIResource();\n  map.put(\"showSystemMenu\",new ShowSystemMenuAction(true));\n  map.put(\"hideSystemMenu\",new ShowSystemMenuAction(false));\n  return map;\n}"}
{"ids": "66422", "raw_code": "protected void paintContentBorderLeftEdge(Graphics g,int x,int y,int w,int h,boolean drawBroken,Rectangle selRect,boolean isContentBorderPainted){\n  if (isContentBorderPainted) {\n    g.setColor(selectHighlight);\n    g.fillRect(x,y,1,h - 1);\n  }\n}"}
{"ids": "50439", "raw_code": "private String fieldParamComment(Field field,String paramComment){\n  String commentType=fieldTypeCardinalityComment(field);\n  String comment=String.format(\"@param %s [%s]\",wrapIfKeywordOrBuiltIn(field.getSimpleName()),commentType);\n  if (paramComment == null) {\n    paramComment=DocumentationUtil.getScopedDescription(field);\n  }\n  if (!Strings.isNullOrEmpty(paramComment)) {\n    paramComment=RDocCommentFixer.rdocify(paramComment);\n    comment+=\"\\n  \" + paramComment.replaceAll(\"(\\\\r?\\\\n)\",\"\\n  \");\n  }\n  return comment + \"\\n\";\n}"}
{"ids": "3498", "raw_code": "public static long periodEnd(long now,long period){\n  LocalDateTime time=LocalDateTime.ofEpochSecond(now / 1000,0,ZoneOffset.UTC);\n  long endTime=periodEnd(now,period,time);\n  return endTime;\n}"}
{"ids": "4493", "raw_code": "public static String generateChatId(final String receiverId,final String senderId){\n  String combined=null;\n  if (receiverId.compareTo(senderId) < 0) {\n    combined=String.format(Locale.US,AppConstants.CHAT_ID_FORMAT,receiverId,senderId);\n  }\n else {\n    combined=String.format(Locale.US,AppConstants.CHAT_ID_FORMAT,senderId,receiverId);\n  }\n  String hashed=null;\n  try {\n    hashed=Utils.sha1(combined);\n  }\n catch (  final NoSuchAlgorithmException e) {\n    hashed=combined;\n  }\n  return hashed;\n}"}
{"ids": "48657", "raw_code": "void extract(String fname,String files[]) throws IOException {\n  ZipFile zf=new ZipFile(fname);\n  Set<ZipEntry> dirs=newDirSet();\n  Enumeration<? extends ZipEntry> zes=zf.entries();\n  while (zes.hasMoreElements()) {\n    ZipEntry e=zes.nextElement();\n    if (files == null) {\n      dirs.add(extractFile(zf.getInputStream(e),e));\n    }\n else {\n      String name=e.getName();\n      for (      String file : files) {\n        if (name.startsWith(file)) {\n          dirs.add(extractFile(zf.getInputStream(e),e));\n          break;\n        }\n      }\n    }\n  }\n  zf.close();\n  updateLastModifiedTime(dirs);\n}"}
{"ids": "47818", "raw_code": "public void remove(MenuComponent m){\nsynchronized (getTreeLock()) {\n    int index=menus.indexOf(m);\n    if (index >= 0) {\n      remove(index);\n    }\n  }\n}"}
{"ids": "36367", "raw_code": "public XMLImporter(ProgressListener listener){\n  progressListener=listener;\n}"}
{"ids": "77800", "raw_code": "private static TreeMap<Integer,Long> loadWorkspaceScreensDb(Context context){\n  final ContentResolver contentResolver=context.getContentResolver();\n  final Uri screensUri=LauncherSettings.WorkspaceScreens.CONTENT_URI;\n  final Cursor sc=contentResolver.query(screensUri,null,null,null,null);\n  TreeMap<Integer,Long> orderedScreens=new TreeMap<Integer,Long>();\n  try {\n    final int idIndex=sc.getColumnIndexOrThrow(LauncherSettings.WorkspaceScreens._ID);\n    final int rankIndex=sc.getColumnIndexOrThrow(LauncherSettings.WorkspaceScreens.SCREEN_RANK);\n    while (sc.moveToNext()) {\n      try {\n        long screenId=sc.getLong(idIndex);\n        int rank=sc.getInt(rankIndex);\n        orderedScreens.put(rank,screenId);\n      }\n catch (      Exception e) {\n        Launcher.addDumpLog(TAG,\"Desktop items loading interrupted - invalid screens: \" + e,true);\n      }\n    }\n  }\n  finally {\n    sc.close();\n  }\n  Launcher.addDumpLog(TAG,\"11683562 - loadWorkspaceScreensDb()\",true);\n  ArrayList<String> orderedScreensPairs=new ArrayList<String>();\n  for (  Integer i : orderedScreens.keySet()) {\n    orderedScreensPairs.add(\"{ \" + i + \": \"+ orderedScreens.get(i)+ \" }\");\n  }\n  Launcher.addDumpLog(TAG,\"11683562 -   screens: \" + TextUtils.join(\", \",orderedScreensPairs),true);\n  return orderedScreens;\n}"}
{"ids": "28314", "raw_code": "public Observable<DriveId> createFile(DriveFolder folder,final File file){\n  return createFile(folder,file,file.getName());\n}"}
{"ids": "48507", "raw_code": "public static void validateContext(AccelSurface srcData,AccelSurface dstData,Region clip,Composite comp,AffineTransform xform,Paint paint,SunGraphics2D sg2d,int flags){\n  BufferedContext context=dstData.getContext();\n  context.validate(srcData,dstData,clip,comp,xform,paint,sg2d,flags);\n}"}
{"ids": "74244", "raw_code": "public void changeDefaultNames(String type){\n  String[] convert=CONVERT_TYPES.split(\",\");\n  String[] types=TYPES.split(\",\");\n  if (convert.length != types.length) {\n    log.error(\"Properties file doesn't have equal length conversion strings, carTypeNames {}, carTypeConvert {}\",types.length,convert.length);\n    return;\n  }\n  if (type.equals(Setup.DESCRIPTIVE)) {\n    for (int i=0; i < convert.length; i++) {\n      replaceName(convert[i],types[i]);\n    }\n    String[] aarTypes=ARR_TYPES.split(\",\");\n    for (int i=0; i < aarTypes.length; i++) {\n      list.remove(aarTypes[i]);\n    }\n    for (int i=0; i < types.length; i++) {\n      if (!list.contains(types[i])) {\n        list.add(types[i]);\n      }\n    }\n  }\n else {\n    for (int i=0; i < convert.length; i++) {\n      replaceName(types[i],convert[i]);\n    }\n    for (int i=0; i < types.length; i++) {\n      list.remove(types[i]);\n    }\n    types=ARR_TYPES.split(\",\");\n    for (int i=0; i < types.length; i++) {\n      if (!list.contains(types[i])) {\n        list.add(types[i]);\n      }\n    }\n  }\n}"}
{"ids": "41360", "raw_code": "public LabelValueComparator(final Locale locale){\n  c=Collator.getInstance(locale);\n}"}
{"ids": "17356", "raw_code": "public Refresher(GLScene scene){\n  Preconditions.checkNotNull(scene);\n  this.scene=scene;\n}"}
{"ids": "75318", "raw_code": "public Rect updateFastScrollerBounds(int lastTouchY){\n  mInvalidateRect.set(mBgBounds);\n  if (isVisible()) {\n    int edgePadding=mRv.getMaxScrollbarWidth();\n    int bgPadding=(mBgOriginalSize - mTextBounds.height()) / 2;\n    int bgHeight=mBgOriginalSize;\n    int bgWidth=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgPadding));\n    if (Utilities.isRtl(mRes)) {\n      mBgBounds.left=mRv.getBackgroundPadding().left + (2 * mRv.getMaxScrollbarWidth());\n      mBgBounds.right=mBgBounds.left + bgWidth;\n    }\n else {\n      mBgBounds.right=mRv.getWidth() - mRv.getBackgroundPadding().right - (2 * mRv.getMaxScrollbarWidth());\n      mBgBounds.left=mBgBounds.right - bgWidth;\n    }\n    mBgBounds.top=lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight);\n    mBgBounds.top=Math.max(edgePadding,Math.min(mBgBounds.top,mRv.getHeight() - edgePadding - bgHeight));\n    mBgBounds.bottom=mBgBounds.top + bgHeight;\n  }\n else {\n    mBgBounds.setEmpty();\n  }\n  mInvalidateRect.union(mBgBounds);\n  return mInvalidateRect;\n}"}
{"ids": "22445", "raw_code": "public void buildUniqueId() throws VPlexApiException {\n  String name=getName();\n  if (!name.contains(VPLEX_NAME_DELIM)) {\n    s_logger.warn(\"unexpected native guid format: \" + name);\n    uniqueId=name;\n    return;\n  }\n  int lastDelimIndex=name.lastIndexOf(VPLEX_NAME_DELIM);\n  String suffix=name.substring(lastDelimIndex + 1);\n  s_logger.info(\"setting unique id for {} to {}\",name,suffix);\n  uniqueId=suffix;\n}"}
{"ids": "33699", "raw_code": "public static String createBase64(Bitmap mBitmap){\n  ByteArrayOutputStream baos1=new ByteArrayOutputStream();\n  mBitmap.compress(Bitmap.CompressFormat.JPEG,100,baos1);\n  byte[] b1=baos1.toByteArray();\n  return Base64.encodeToString(b1,Base64.DEFAULT);\n}"}
{"ids": "32636", "raw_code": "public DiceServerEditor(final IRemoteDiceServer diceServer){\n  m_bean=diceServer;\n  final int bottomSpace=1;\n  final int labelSpace=2;\n  int row=0;\n  if (m_bean.sendsEmail()) {\n    add(m_toLabel,new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));\n    add(m_toAddress,new GridBagConstraints(1,row,2,1,1.0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));\n    m_toAddress.setText(m_bean.getToAddress());\n    row++;\n    add(m_ccLabel,new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));\n    add(m_ccAddress,new GridBagConstraints(1,row,2,1,1.0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));\n    m_ccAddress.setText(m_bean.getCcAddress());\n    row++;\n  }\n  if (m_bean.supportsGameId()) {\n    final JLabel m_gameIdLabel=new JLabel(\"Game ID:\");\n    add(m_gameIdLabel,new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));\n    add(m_gameId,new GridBagConstraints(1,row,2,1,1.0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));\n    m_gameId.setText(m_bean.getGameId());\n    row++;\n  }\n  add(m_testDiceyButton,new GridBagConstraints(2,row,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,0),0,0));\n  setupListeners();\n}"}
{"ids": "7699", "raw_code": "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof CandlestickRenderer)) {\n    return false;\n  }\n  CandlestickRenderer that=(CandlestickRenderer)obj;\n  if (this.candleWidth != that.candleWidth) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.upPaint,that.upPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.downPaint,that.downPaint)) {\n    return false;\n  }\n  if (this.drawVolume != that.drawVolume) {\n    return false;\n  }\n  if (this.maxCandleWidthInMilliseconds != that.maxCandleWidthInMilliseconds) {\n    return false;\n  }\n  if (this.autoWidthMethod != that.autoWidthMethod) {\n    return false;\n  }\n  if (this.autoWidthFactor != that.autoWidthFactor) {\n    return false;\n  }\n  if (this.autoWidthGap != that.autoWidthGap) {\n    return false;\n  }\n  if (this.useOutlinePaint != that.useOutlinePaint) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.volumePaint,that.volumePaint)) {\n    return false;\n  }\n  return super.equals(obj);\n}"}
{"ids": "61527", "raw_code": "public HeaderIterator iterator(){\n  return new BasicListHeaderIterator(this.headers,null);\n}"}
{"ids": "23410", "raw_code": "@SuppressWarnings(\"deprecation\") @SuppressLint(\"ClickableViewAccessibility\") @Override public boolean onTouchEvent(MotionEvent event){\n  PointF vCenterEnd;\n  float vDistEnd;\n  if (anim != null && !anim.interruptible) {\n    return true;\n  }\n else {\n    anim=null;\n  }\n  if (vTranslate == null) {\n    return true;\n  }\n  if (detector == null || detector.onTouchEvent(event)) {\n    return true;\n  }\n  int touchCount=event.getPointerCount();\nswitch (event.getAction()) {\ncase MotionEvent.ACTION_DOWN:\ncase MotionEvent.ACTION_POINTER_1_DOWN:\ncase MotionEvent.ACTION_POINTER_2_DOWN:\n    anim=null;\n  maxTouchCount=Math.max(maxTouchCount,touchCount);\nif (touchCount >= 2) {\n  if (zoomEnabled) {\n    float distance=distance(event.getX(0),event.getX(1),event.getY(0),event.getY(1));\n    scaleStart=scale;\n    vDistStart=distance;\n    vTranslateStart=new PointF(vTranslate.x,vTranslate.y);\n    vCenterStart=new PointF((event.getX(0) + event.getX(1)) / 2,(event.getY(0) + event.getY(1)) / 2);\n  }\n else {\n    maxTouchCount=0;\n  }\n  handler.removeMessages(MESSAGE_LONG_CLICK);\n}\n else {\n  vTranslateStart=new PointF(vTranslate.x,vTranslate.y);\n  vCenterStart=new PointF(event.getX(),event.getY());\n  handler.sendEmptyMessageDelayed(MESSAGE_LONG_CLICK,600);\n}\nreturn true;\ncase MotionEvent.ACTION_MOVE:\nboolean consumed=false;\nif (maxTouchCount > 0) {\nif (touchCount >= 2) {\nvDistEnd=distance(event.getX(0),event.getX(1),event.getY(0),event.getY(1));\nvCenterEnd=new PointF((event.getX(0) + event.getX(1)) / 2,(event.getY(0) + event.getY(1)) / 2);\nif (zoomEnabled && (distance(vCenterStart.x,vCenterEnd.x,vCenterStart.y,vCenterEnd.y) > 5 || Math.abs(vDistEnd - vDistStart) > 5 || isPanning)) {\nisZooming=true;\nisPanning=true;\nconsumed=true;\nscale=Math.min(maxScale,(vDistEnd / vDistStart) * scaleStart);\nif (scale <= minScale()) {\n  vDistStart=vDistEnd;\n  scaleStart=minScale();\n  vCenterStart=vCenterEnd;\n  vTranslateStart=vTranslate;\n}\n else if (panEnabled) {\n  float vLeftStart=vCenterStart.x - vTranslateStart.x;\n  float vTopStart=vCenterStart.y - vTranslateStart.y;\n  float vLeftNow=vLeftStart * (scale / scaleStart);\n  float vTopNow=vTopStart * (scale / scaleStart);\n  vTranslate.x=vCenterEnd.x - vLeftNow;\n  vTranslate.y=vCenterEnd.y - vTopNow;\n}\n else if (sRequestedCenter != null) {\n  vTranslate.x=(getWidth() / 2) - (scale * sRequestedCenter.x);\n  vTranslate.y=(getHeight() / 2) - (scale * sRequestedCenter.y);\n}\n else {\n  vTranslate.x=(getWidth() / 2) - (scale * (sWidth() / 2));\n  vTranslate.y=(getHeight() / 2) - (scale * (sHeight() / 2));\n}\nfitToBounds(true);\nrefreshRequiredTiles(false);\n}\n}\n else if (!isZooming) {\nfloat dx=Math.abs(event.getX() - vCenterStart.x);\nfloat dy=Math.abs(event.getY() - vCenterStart.y);\nif (dx > 5 || dy > 5 || isPanning) {\nconsumed=true;\nvTranslate.x=vTranslateStart.x + (event.getX() - vCenterStart.x);\nvTranslate.y=vTranslateStart.y + (event.getY() - vCenterStart.y);\nfloat lastX=vTranslate.x;\nfloat lastY=vTranslate.y;\nfitToBounds(true);\nif (lastX == vTranslate.x || (lastY == vTranslate.y && dy > 10) || isPanning) {\n  isPanning=true;\n}\n else if (dx > 5) {\n  maxTouchCount=0;\n  handler.removeMessages(MESSAGE_LONG_CLICK);\n}\nif (!panEnabled) {\n  vTranslate.x=vTranslateStart.x;\n  vTranslate.y=vTranslateStart.y;\n}\nrefreshRequiredTiles(false);\n}\n}\n}\nif (consumed) {\nhandler.removeMessages(MESSAGE_LONG_CLICK);\ninvalidate();\nreturn true;\n}\nbreak;\ncase MotionEvent.ACTION_UP:\ncase MotionEvent.ACTION_POINTER_UP:\ncase MotionEvent.ACTION_POINTER_2_UP:\nhandler.removeMessages(MESSAGE_LONG_CLICK);\nif (maxTouchCount > 0 && (isZooming || isPanning)) {\nif (isZooming && touchCount == 2) {\nisPanning=true;\nvTranslateStart=new PointF(vTranslate.x,vTranslate.y);\nif (event.getActionIndex() == 1) {\nvCenterStart=new PointF(event.getX(0),event.getY(0));\n}\n else {\nvCenterStart=new PointF(event.getX(1),event.getY(1));\n}\n}\nif (touchCount < 3) {\nisZooming=false;\n}\nif (touchCount < 2) {\nisPanning=false;\nmaxTouchCount=0;\n}\nrefreshRequiredTiles(true);\nreturn true;\n}\nif (touchCount == 1) {\nisZooming=false;\nisPanning=false;\nmaxTouchCount=0;\n}\nreturn true;\n}\nreturn super.onTouchEvent(event);\n}"}
{"ids": "23634", "raw_code": "public static <T1,T2>void transform(Collection<T1> from,Collection<T2> to,Transformer<T1,T2> transformer){\n  for (  T1 instance : from) {\n    to.add(transformer.transform(instance));\n  }\n}"}
{"ids": "4399", "raw_code": "public static String generateCode(){\n  return generateCode(CODESIZE);\n}"}
{"ids": "31515", "raw_code": "public static boolean isBookSearchUrl(String url){\n  return url.startsWith(\"http://google.com/books\") || url.startsWith(\"http://books.google.\");\n}"}
{"ids": "58197", "raw_code": "public void flush() throws java.io.IOException {\n  m_os.flush();\n}"}
{"ids": "63382", "raw_code": "private void combineEntries(ArrayList<long[]> list,int total){\n  Collections.sort(list,this);\n  for (int minGap=10; minGap < total; minGap+=minGap / 2) {\n    for (int i=0; i < list.size() - 1; i++) {\n      long[] current=list.get(i);\n      long[] next=list.get(i + 1);\n      if (current[1] + minGap >= next[0]) {\n        current[1]=next[1];\n        list.remove(i + 1);\n        i--;\n      }\n    }\n    int searched=0;\n    for (    long[] range : list) {\n      searched+=range[1] - range[0] + 1;\n    }\n    if (searched > 2 * total || list.size() < 100) {\n      break;\n    }\n  }\n}"}
{"ids": "20857", "raw_code": "@Override public void writeString(byte[] str,int offset,int length) throws IOException {\n  if (str == null)   writeInt(0);\n else {\n    if (useCompression && length >= Compressor.MIN_SIZE_FOR_DEFLATION) {\n      if (byteBuffer.length < length)       byteBuffer=new byte[2 * length];\n      int numberOfBytes=compressor.deflateString2ByteArray(str,offset,length,byteBuffer);\n      writeInt(numberOfBytes);\n      io.write(byteBuffer,0,Math.abs(numberOfBytes));\n    }\n else {\n      writeInt(length);\n      io.write(str,offset,length);\n    }\n  }\n}"}
{"ids": "71623", "raw_code": "protected void writeColumnNotNullableStmt(StringBuilder ddl){\n  ddl.append(\"NOT NULL\");\n}"}
{"ids": "71273", "raw_code": "private static OutputStream wrapOutputStream(final OutputStream stream){\n  String os=System.getProperty(\"os.name\");\n  if (os.startsWith(\"Windows\")) {\n    try {\n      return new WindowsAnsiOutputStream(stream);\n    }\n catch (    Throwable ignore) {\n    }\n    return new AnsiOutputStream(stream);\n  }\n  return stream;\n}"}
{"ids": "4200", "raw_code": "@Override public Set<Location> unmarshal(LocationsType locationsType){\n  Set<Location> locations=new LinkedHashSet<Location>();\n  locations.addAll(locationsType.getRpsBlastLocations());\n  locations.addAll(locationsType.getHmmer2Locations());\n  locations.addAll(locationsType.getHmmer3Locations());\n  locations.addAll(locationsType.getSuperFamilyHmmer3Locations());\n  locations.addAll(locationsType.getFingerPrintsLocations());\n  locations.addAll(locationsType.getBlastProDomLocations());\n  locations.addAll(locationsType.getPatternScanLocations());\n  locations.addAll(locationsType.getProfileScanLocations());\n  locations.addAll(locationsType.getPhobiusLocations());\n  locations.addAll(locationsType.getCoilsLocations());\n  locations.addAll(locationsType.getPantherLocations());\n  locations.addAll(locationsType.getSignalPLocations());\n  locations.addAll(locationsType.getTMHMMLocations());\n  return locations;\n}"}
{"ids": "54430", "raw_code": "public int writeKey(OutputStream out) throws IOException {\n  out.write(blockBuffer,keyOffset,klen);\n  return klen;\n}"}
{"ids": "67112", "raw_code": "boolean descendsFrom(ClassFile cf){\n  return descendsFrom(cf.toString());\n}"}
{"ids": "39399", "raw_code": "protected Object writePreProcess(Object o) throws Exception {\n  return o;\n}"}
{"ids": "38003", "raw_code": "public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(1);\n  newVector.addElement(new Option(\"\\tUse cross validation for model selection using the\\n\" + \"\\tgiven number of folds. (default 0, is to\\n\" + \"\\tuse training error)\",\"X\",1,\"-X <number of folds>\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "36286", "raw_code": "public ExpressionParserBuilder withDynamics(Resolver resolver){\n  dynamicsResolvers.add(resolver);\n  return this;\n}"}
{"ids": "74076", "raw_code": "void warnMissingNames(File file){\n  String result=checkMissingNames(file);\n  if (result.equals(\"\")) {\n    JOptionPane.showMessageDialog(_who,\"OK, all variables in file are known\");\n  }\n else {\n    JOptionPane.showMessageDialog(_who,result);\n  }\n}"}
{"ids": "50231", "raw_code": "public void add(int position,WishlistItem wishlistItem){\n  notifyItemInserted(position);\n  wishlistItems.add(position,wishlistItem);\n}"}
{"ids": "47976", "raw_code": "protected void printBand(byte[] bgrData,int x,int y,int width,int height) throws PrinterException {\n  mPSStream.println(IMAGE_SAVE);\n  int psBytesPerRow=3 * width;\n  while (psBytesPerRow > MAX_PSSTR) {\n    psBytesPerRow/=2;\n  }\n  mPSStream.println(psBytesPerRow + IMAGE_STR);\n  mPSStream.println(\"[\" + width + \" 0 \"+ \"0 \"+ height+ \" \"+ x+ \" \"+ y+ \"]concat\");\n  mPSStream.println(width + \" \" + height+ \" \"+ 8+ \"[\"+ width+ \" 0 \"+ \"0 \"+ -height+ \" 0 \"+ height+ \"]\"+ \"/imageSrc load false 3 colorimage\");\n  int index=0;\n  byte[] rgbData=new byte[width * 3];\n  try {\n    for (int i=0; i < height; i++) {\n      index=swapBGRtoRGB(bgrData,index,rgbData);\n      byte[] encodedData=rlEncode(rgbData);\n      byte[] asciiData=ascii85Encode(encodedData);\n      mPSStream.write(asciiData);\n      mPSStream.println(\"\");\n    }\n  }\n catch (  IOException e) {\n    throw new PrinterIOException(e);\n  }\n  mPSStream.println(IMAGE_RESTORE);\n}"}
{"ids": "37257", "raw_code": "private void initPanel(final ITreeNode<CTag> rootTag){\n  final JPanel mainPanel=new JPanel(new BorderLayout());\n  mainPanel.setBorder(new TitledBorder(\"Edit Tag Condition\"));\n  createTree(rootTag);\n  final JScrollPane pane=new JScrollPane(m_tagTree);\n  pane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\n  pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n  final JPanel anyTagPanel=new JPanel();\n  anyTagPanel.add(m_anyTagBox);\n  mainPanel.add(pane,BorderLayout.CENTER);\n  mainPanel.add(m_anyTagBox,BorderLayout.SOUTH);\n  add(mainPanel,BorderLayout.CENTER);\n}"}
{"ids": "61460", "raw_code": "public final void append(String value){\n  if (value == null)   return;\n  int strlen=value.length();\n  if (0 == strlen)   return;\n  int copyfrom=0;\n  char[] chunk=m_array[m_lastChunk];\n  int available=m_chunkSize - m_firstFree;\n  while (strlen > 0) {\n    if (available > strlen)     available=strlen;\n    value.getChars(copyfrom,copyfrom + available,m_array[m_lastChunk],m_firstFree);\n    strlen-=available;\n    copyfrom+=available;\n    if (strlen > 0) {\n      int i=m_array.length;\n      if (m_lastChunk + 1 == i) {\n        char[][] newarray=new char[i + 16][];\n        System.arraycopy(m_array,0,newarray,0,i);\n        m_array=newarray;\n      }\n      chunk=m_array[++m_lastChunk];\n      if (chunk == null) {\n        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {\n          m_innerFSB=new FastStringBuffer(this);\n        }\n        chunk=m_array[m_lastChunk]=new char[m_chunkSize];\n      }\n      available=m_chunkSize;\n      m_firstFree=0;\n    }\n  }\n  m_firstFree+=available;\n}"}
{"ids": "77006", "raw_code": "protected void addPrefixMatch(StringBuilder sb,String surface,String analyzed,String prefixToken){\n  if (prefixToken.length() >= surface.length()) {\n    addWholeMatch(sb,surface,analyzed);\n    return;\n  }\n  sb.append(\"<b>\");\n  sb.append(surface.substring(0,prefixToken.length()));\n  sb.append(\"</b>\");\n  sb.append(surface.substring(prefixToken.length()));\n}"}
{"ids": "277", "raw_code": "public WalletData addWallet(final BitcoinController bitcoinController,Wallet wallet,String walletFilename){\n  if (walletFilename == null) {\n    return null;\n  }\n  for (  WalletData loopModelData : perWalletModelDataList) {\n    if (walletFilename.equals(loopModelData.getWalletFilename())) {\n      return loopModelData;\n    }\n  }\n  WalletData newPerWalletModelData=new WalletData();\n  newPerWalletModelData.setWallet(wallet);\n  newPerWalletModelData.setWalletFilename(walletFilename);\n  newPerWalletModelData.setWalletTableDataList(new ArrayList<WalletTableData>());\n  if (thereIsNoActiveWallet()) {\n    perWalletModelDataList.remove(activeWalletModelData);\n    activeWalletModelData=newPerWalletModelData;\n  }\n  perWalletModelDataList.add(newPerWalletModelData);\n  if (wallet != null) {\n    wallet.addEventListener(bitcoinController);\n  }\n  createWalletTableData(bitcoinController,walletFilename);\n  createAddressBookReceivingAddresses(walletFilename);\n  return newPerWalletModelData;\n}"}
{"ids": "22702", "raw_code": "public void add(T object){\nsynchronized (mLock) {\n    if (mOriginalValues != null) {\n      mOriginalValues.add(object);\n    }\n else {\n      mObjects.add(object);\n    }\n  }\n  if (mNotifyOnChange)   notifyDataSetChanged();\n}"}
{"ids": "12151", "raw_code": "public static String toHumanSize(long bytesValue){\n  if (0 == bytesValue) {\n    return \"0B\";\n  }\n  boolean powerOfTwo=false;\n  if ((bytesValue & (bytesValue - 1L)) == 0) {\n    powerOfTwo=true;\n  }\n  long multiple=(long)(bytesValue / 1.5);\n  if ((multiple & (multiple - 1L)) == 0) {\n    powerOfTwo=true;\n  }\n  Unit unit=Unit.B;\n  if (powerOfTwo) {\n    if (bytesValue >= Unit.EiB.value) {\n      unit=Unit.EiB;\n    }\n else     if (bytesValue >= Unit.PiB.value) {\n      unit=Unit.PiB;\n    }\n else     if (bytesValue >= Unit.TiB.value) {\n      unit=Unit.TiB;\n    }\n else     if (bytesValue >= Unit.GiB.value) {\n      unit=Unit.GiB;\n    }\n else     if (bytesValue >= Unit.MiB.value) {\n      unit=Unit.MiB;\n    }\n else     if (bytesValue >= Unit.KiB.value) {\n      unit=Unit.KiB;\n    }\n  }\n else {\n    if (bytesValue >= Unit.EB.value) {\n      unit=Unit.EB;\n    }\n else     if (bytesValue >= Unit.PB.value) {\n      unit=Unit.PB;\n    }\n else     if (bytesValue >= Unit.TB.value) {\n      unit=Unit.TB;\n    }\n else     if (bytesValue >= Unit.GB.value) {\n      unit=Unit.GB;\n    }\n else     if (bytesValue >= Unit.MB.value) {\n      unit=Unit.MB;\n    }\n else     if (bytesValue >= Unit.KB.value) {\n      unit=Unit.KB;\n    }\n  }\n  double val=(bytesValue / unit.getValue());\n  double roundedValue=Math.round(val * 10.0) / 10.0;\n  BigDecimal myDecimal=BigDecimal.valueOf(roundedValue);\n  BigDecimal updated=myDecimal.stripTrailingZeros();\n  return updated.toPlainString() + unit.name();\n}"}
{"ids": "48015", "raw_code": "public boolean equals(Object another){\n  if (another instanceof Permission) {\n    Permission p=(Permission)another;\n    return permission.equals(p.toString());\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "75902", "raw_code": "public static Intent buildStartInTerminalIntent(File script){\n  final ComponentName componentName=Constants.SL4A_SERVICE_LAUNCHER_COMPONENT_NAME;\n  Intent intent=new Intent();\n  intent.setComponent(componentName);\n  intent.setAction(Constants.ACTION_LAUNCH_FOREGROUND_SCRIPT);\n  intent.putExtra(Constants.EXTRA_SCRIPT_PATH,script.getAbsolutePath());\n  return intent;\n}"}
{"ids": "1339", "raw_code": "public Document loadDocument(Resource file) throws SAXException, IOException {\n  DOMParser parser=new DOMParser();\n  InputStream in=null;\n  try {\n    in=file.getInputStream();\n    InputSource source=new InputSource(in);\n    parser.parse(source);\n  }\n  finally {\n    IOUtil.closeEL(in);\n  }\n  return parser.getDocument();\n}"}
{"ids": "11586", "raw_code": "public void resetFilters(Boolean enabled){\n  if (logger.isLoggable(Level.FINE)) {\n    logger.fine(\"enabled = \" + enabled);\n  }\n  Set keys=filters.keySet();\n  for (Iterator it=keys.iterator(); it.hasNext(); ) {\n    String title=(String)it.next();\n    setFilterValue(title,enabled);\n  }\n  updateInterface();\n}"}
{"ids": "23774", "raw_code": "@Override public boolean generateEventID(){\n  return true;\n}"}
{"ids": "26781", "raw_code": "private void updateUtility(){\n  for (  Individual individual : population) {\n    double oldFitness=individual.getFitness();\n    double newFitness=fitness(individual.getSolution(),idealPoint);\n    double relativeDecrease=oldFitness - newFitness;\n    if (relativeDecrease > 0.001) {\n      individual.setUtility(1.0);\n    }\n else {\n      double utility=Math.min(1.0,0.95 * (1.0 + delta / 0.001) * individual.getUtility());\n      individual.setUtility(utility);\n    }\n    individual.setFitness(newFitness);\n  }\n}"}
{"ids": "80351", "raw_code": "private void writeKeysWithPrefix(String prefix){\n  for (  String key : keys) {\n    if (key.startsWith(prefix)) {\n      ps.println(key + \"=\" + prop.getProperty(key));\n    }\n  }\n  ps.println();\n}"}
{"ids": "50185", "raw_code": "public List<Operation> sendAndWait(List<Operation> ops){\n  return sendAndWait(ops,true);\n}"}
{"ids": "50361", "raw_code": "public static void copy(byte[] in,OutputStream out) throws IOException {\n  Assert.notNull(in,\"No input byte array specified\");\n  Assert.notNull(out,\"No OutputStream specified\");\n  try {\n    out.write(in);\n  }\n  finally {\n    try {\n      out.close();\n    }\n catch (    IOException ex) {\n    }\n  }\n}"}
{"ids": "14222", "raw_code": "public Action mapToXACMLAction(String nativeActionName,String serviceName) throws XACMLException {\n  return null;\n}"}
{"ids": "46376", "raw_code": "private int nextInt(StringTokenizer tok,String errorMsg) throws SAXException {\n  if (!tok.hasMoreTokens()) {\n    throw new SAXException(errorMsg);\n  }\n  try {\n    return Integer.parseInt(tok.nextToken());\n  }\n catch (  NumberFormatException nfe) {\n    throw new SAXException(errorMsg);\n  }\n}"}
{"ids": "30488", "raw_code": "public Calculable(String id,double value){\n  setId(id);\n  setValue(value);\n  setWhen(System.currentTimeMillis());\n}"}
{"ids": "34596", "raw_code": "public static boolean bookmarkNodeExists(Context context,long nodeId){\n  Boolean result=chromeBrowserProviderCall(Boolean.class,ChromeBrowserProvider.CLIENT_API_BOOKMARK_NODE_EXISTS,context,argsToBundle(nodeId));\n  return result != null ? result.booleanValue() : false;\n}"}
{"ids": "72822", "raw_code": "private void executeTasksSimultaneouslyWithBarrier(Runnable... tasks) throws InterruptedException {\n  CountDownLatch latch=new CountDownLatch(tasks.length);\n  for (  Runnable task : tasks) {\n    executor.execute(null);\n  }\n  latch.await();\n}"}
{"ids": "39050", "raw_code": "private boolean isOperator(char tok){\n  if (OPERATORS.indexOf(tok) == -1) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "85501", "raw_code": "protected String formatIterable(JCDiagnostic d,Iterable<?> it,Locale l){\n  StringBuilder sbuf=new StringBuilder();\n  String sep=\"\";\n  for (  Object o : it) {\n    sbuf.append(sep);\n    sbuf.append(formatArgument(d,o,l));\n    sep=\",\";\n  }\n  return sbuf.toString();\n}"}
{"ids": "29930", "raw_code": "public void endRepresentation(){\n  if (!representationProtectionsSet) {\n    if (currentRepresentationProtections != null) {\n      Collections.sort(currentRepresentationProtections,this);\n    }\n    representationProtections=currentRepresentationProtections;\n    representationProtectionsSet=true;\n  }\n else {\n    if (currentRepresentationProtections == null) {\n      Assertions.checkState(representationProtections == null);\n    }\n else {\n      Collections.sort(currentRepresentationProtections,this);\n      Assertions.checkState(currentRepresentationProtections.equals(representationProtections));\n    }\n  }\n  currentRepresentationProtections=null;\n}"}
{"ids": "5021", "raw_code": "private static char[] zzUnpackCMap(String packed){\n  char[] map=new char[0x110000];\n  int i=0;\n  int j=0;\n  while (i < 246) {\n    int count=packed.charAt(i++);\n    char value=packed.charAt(i++);\n    do     map[j++]=value;\n while (--count > 0);\n  }\n  return map;\n}"}
{"ids": "85578", "raw_code": "public static ModuleVersion valueOf(String string){\n  return parseVersion(string);\n}"}
{"ids": "374", "raw_code": "@Override public boolean equals(Object otherObj){\n  if (otherObj instanceof P2Model) {\n    return content.equals(((P2Model)otherObj).content);\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "59419", "raw_code": "public boolean showIcons(){\n  return preferences.getBoolean(resources.getString(R.string.key_show_icons),Boolean.parseBoolean(resources.getString(R.string.default_show_icons)));\n}"}
{"ids": "39342", "raw_code": "private boolean checkForKey() throws Exception {\n  String query=m_query;\n  query=query.replaceAll(\" +\",\" \");\n  if (!query.startsWith(\"SELECT *\")) {\n    return false;\n  }\n  m_orderBy.clear();\n  if (!m_DataBaseConnection.isConnected()) {\n    m_DataBaseConnection.connectToDatabase();\n  }\n  DatabaseMetaData dmd=m_DataBaseConnection.getMetaData();\n  String table=endOfQuery(true);\n  ResultSet rs=dmd.getPrimaryKeys(null,null,table);\n  while (rs.next()) {\n    m_orderBy.add(rs.getString(4));\n  }\n  rs.close();\n  if (m_orderBy.size() != 0) {\n    return true;\n  }\n  rs=dmd.getBestRowIdentifier(null,null,table,DatabaseMetaData.bestRowSession,false);\n  ResultSetMetaData rmd=rs.getMetaData();\n  int help=0;\n  while (rs.next()) {\n    m_orderBy.add(rs.getString(2));\n    help++;\n  }\n  rs.close();\n  if (help == rmd.getColumnCount()) {\n    m_orderBy.clear();\n  }\n  if (m_orderBy.size() != 0) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "32394", "raw_code": "public IgniteStripedThreadPoolExecutor(int concurrentLvl,String gridName,String threadNamePrefix){\n  execs=new ExecutorService[concurrentLvl];\n  ThreadFactory factory=new IgniteThreadFactory(gridName,threadNamePrefix);\n  for (int i=0; i < concurrentLvl; i++)   execs[i]=Executors.newSingleThreadExecutor(factory);\n}"}
{"ids": "4316", "raw_code": "public static boolean isZip(BufferedInputStream in){\n  in.mark(4);\n  byte[] b=new byte[4];\n  byte[] zipSig=new byte[4];\n  zipSig[0]=0x50;\n  zipSig[1]=0x4b;\n  zipSig[2]=0x03;\n  zipSig[3]=0x04;\n  try {\n    in.read(b,0,4);\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(\"Couldn't read header from stream \",ex);\n  }\n  try {\n    in.reset();\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(\"Couldn't reset stream \",ex);\n  }\n  return Arrays.equals(b,zipSig);\n}"}
{"ids": "5708", "raw_code": "public List<String> extract(Configuration config){\n  List<String> features=new ArrayList<String>();\n  for (  Extractor fe : extractors) {\n    features.add(fe.extract(config));\n  }\n  return features;\n}"}
{"ids": "13773", "raw_code": "public void handleTblDataActionHrefRequest(RequestInvocationEvent event){\n  AgentsModel model=(AgentsModel)getModel();\n  String agentType=getDisplayIDType();\n  String universalId=hexToString((String)getDisplayFieldValue(TBL_DATA_ACTION_HREF));\n  setPageSessionAttribute(AgentProfileViewBean.UNIVERSAL_ID,universalId);\n  SSOToken ssoToken=model.getUserSSOToken();\n  String realm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);\n  StringTokenizer st=new StringTokenizer(universalId,\"=,\");\n  st.nextToken();\n  String agentName=st.nextToken();\n  try {\n    AMIdentity amid=new AMIdentity(ssoToken,agentName,IdType.AGENTONLY,realm,null);\n    if (agentType.equals(AgentsViewBean.AGENT_WEB) || (agentType.equals(AgentsViewBean.DEFAULT_ID_TYPE))) {\n      if (isPropertiesLocallyStored(amid)) {\n        setPageSessionAttribute(LOCAL_OR_NOT,PROP_LOCAL);\n      }\n else {\n        setPageSessionAttribute(LOCAL_OR_NOT,PROP_CENTRAL);\n      }\n    }\n    Class clazz=getAgentCustomizedViewBean(model.getAgentType(amid));\n    AMViewBeanBase vb=(AMViewBeanBase)getViewBean(clazz);\n    setPageSessionAttribute(PG_SESSION_SUPERCEDE_AGENT_TYPE,model.getAgentType(amid));\n    removePageSessionAttribute(GenericAgentProfileViewBean.PS_TABNAME);\n    passPgSessionMap(vb);\n    vb.forwardTo(getRequestContext());\n  }\n catch (  IdRepoException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",model.getErrorString(e));\n    forwardTo();\n  }\ncatch (  SSOException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",model.getErrorString(e));\n    forwardTo();\n  }\ncatch (  AMConsoleException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",model.getErrorString(e));\n    forwardTo();\n  }\ncatch (  ClassNotFoundException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",model.getErrorString(e));\n    forwardTo();\n  }\n}"}
{"ids": "75746", "raw_code": "@Override protected boolean check(File item){\n  return item.exists();\n}"}
{"ids": "72059", "raw_code": "public PropertyValueEditor(ConsoleApplication app,ManagementContext context){\n  this.app=app;\n  this.context=context;\n}"}
{"ids": "23505", "raw_code": "@Override public void toData(DataOutput out) throws IOException {\n  out.writeInt(maxInactiveInterval);\n  out.writeLong(lastAccessedTime);\nsynchronized (attributes) {\n    out.writeInt(attributes.size());\n    for (    Map.Entry<String,Object> entry : attributes.entrySet()) {\n      DeltaEvent delta=new DeltaEvent(true,entry.getKey(),entry.getValue());\n      DataSerializer.writeObject(delta,out);\n    }\n  }\n  out.writeUTF(jvmOwnerId);\n}"}
{"ids": "70268", "raw_code": "public void createVictoryConditions(){\n  victory=vf.createVictory(\"this string should be taken from game options\");\n}"}
{"ids": "84963", "raw_code": "public static IStatus validateQualifiedModuleName(String qualifiedName){\n  String pckg=Signature.getQualifier(qualifiedName);\n  if (!Util.isValidPackageName(pckg)) {\n    return Util.newErrorStatus(\"The module package name is invalid\");\n  }\n  return validateSimpleModuleName(Signature.getSimpleName(qualifiedName));\n}"}
{"ids": "55726", "raw_code": "public static <T1,T2>Map<T1,T2> synchronizedMap(){\n  return Collections.synchronizedMap(new HashMap<T1,T2>());\n}"}
{"ids": "33820", "raw_code": "private final int filterStatusBytes(byte[] src,byte[] dest,int totalBytesRead,int maxPacketSize){\n  final int packetsCount=totalBytesRead / maxPacketSize + (totalBytesRead % maxPacketSize == 0 ? 0 : 1);\n  for (int packetIdx=0; packetIdx < packetsCount; ++packetIdx) {\n    final int count=(packetIdx == (packetsCount - 1)) ? (totalBytesRead % maxPacketSize) - MODEM_STATUS_HEADER_LENGTH : maxPacketSize - MODEM_STATUS_HEADER_LENGTH;\n    if (count > 0) {\n      System.arraycopy(src,packetIdx * maxPacketSize + MODEM_STATUS_HEADER_LENGTH,dest,packetIdx * (maxPacketSize - MODEM_STATUS_HEADER_LENGTH),count);\n    }\n  }\n  return totalBytesRead - (packetsCount * 2);\n}"}
{"ids": "37517", "raw_code": "public boolean contains(String key){\n  return mSharedPreferences.contains(key);\n}"}
{"ids": "22721", "raw_code": "int registerMiss(){\n  return misses.incrementAndGet();\n}"}
{"ids": "82612", "raw_code": "private void updateBaseMatrix(Drawable d){\n  ImageView imageView=getImageView();\n  if (null == imageView || null == d) {\n    return;\n  }\n  final float viewWidth=imageView.getWidth();\n  final float viewHeight=imageView.getHeight();\n  final int drawableWidth=d.getIntrinsicWidth();\n  final int drawableHeight=d.getIntrinsicHeight();\n  mBaseMatrix.reset();\n  final float widthScale=viewWidth / drawableWidth;\n  final float heightScale=viewHeight / drawableHeight;\n  if (mScaleType == ScaleType.CENTER) {\n    mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F);\n  }\n else   if (mScaleType == ScaleType.CENTER_CROP) {\n    float scale=Math.max(widthScale,heightScale);\n    mBaseMatrix.postScale(scale,scale);\n    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);\n  }\n else   if (mScaleType == ScaleType.CENTER_INSIDE) {\n    float scale=Math.min(1.0f,Math.min(widthScale,heightScale));\n    mBaseMatrix.postScale(scale,scale);\n    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);\n  }\n else {\n    RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight);\n    RectF mTempDst=new RectF(0,0,viewWidth,viewHeight);\nswitch (mScaleType) {\ncase FIT_CENTER:\n      mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER);\n    break;\ncase FIT_START:\n  mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START);\nbreak;\ncase FIT_END:\nmBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END);\nbreak;\ncase FIT_XY:\nmBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL);\nbreak;\ndefault :\nbreak;\n}\n}\nresetMatrix();\n}"}
{"ids": "40592", "raw_code": "public static CharSequence partialEscape(CharSequence s){\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < s.length(); i++) {\n    char c=s.charAt(i);\n    if (c == '\\\\' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '/' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?') {\n      sb.append('\\\\');\n    }\n    sb.append(c);\n  }\n  return sb;\n}"}
{"ids": "67912", "raw_code": "public void finished(long work,long latency){\n  finishedUpdater.getAndIncrement(this);\n  totalWorkUpdater.getAndAdd(this,work);\n  totalWorkSquaredUpdater.getAndAdd(this,work * work);\n  totalLatencyUpdater.getAndAdd(this,latency);\n  totalLatencySquaredUpdater.getAndAdd(this,latency * latency);\n}"}
{"ids": "64871", "raw_code": "public void close() throws IOException {\n  if (mInputStream != null) {\n    mInputStream.close();\n  }\n else {\n    throw new IOException(\"Can't close wave source - was not opened\");\n  }\n  mInputStream=null;\n}"}
{"ids": "49276", "raw_code": "private WindowsSecurityDescriptor(){\n  this.sidList=null;\n  this.aclBuffer=null;\n  this.sdBuffer=null;\n}"}
{"ids": "29106", "raw_code": "public void printUsage(OutputStream os){\n  int count=0;\n  PrintStream out=UTF8.printStream(os);\n  for (  String option : optionList) {\n    if (optionGroups.containsKey(count)) {\n      out.println(\"  \" + optionGroups.get(count));\n    }\n    count++;\n    if (unlistedOptions.contains(option)) {\n      continue;\n    }\n    out.print(\"    \");\n    StringBuilder buf=new StringBuilder();\n    buf.append(option);\n    if (optionExtraPartSynopsisMap.get(option) != null) {\n      String optionExtraPartSynopsis=optionExtraPartSynopsisMap.get(option);\n      buf.append(\"[:\");\n      buf.append(optionExtraPartSynopsis);\n      buf.append(\"]\");\n    }\n    if (requiresArgumentSet.contains(option)) {\n      buf.append(\" <\");\n      buf.append(argumentDescriptionMap.get(option));\n      buf.append(\">\");\n    }\n    printField(out,buf.toString(),maxWidth + 1);\n    out.println(optionDescriptionMap.get(option));\n  }\n  out.flush();\n}"}
{"ids": "65279", "raw_code": "public void clearSharedVariables(){\n  sharedVariables.clear();\n  loadBuiltInSharedVariables();\n}"}
{"ids": "64275", "raw_code": "public final void sendPacket(LsServerPacket bp){\nsynchronized (guard) {\n    if (isWriteDisabled()) {\n      return;\n    }\n    log.debug(\"sending packet: \" + bp);\n    sendMsgQueue.addLast(bp);\n    enableWriteInterest();\n  }\n}"}
{"ids": "31888", "raw_code": "private static Map<String,Object> processSection(String section,Collection<Map<String,Object>> hosts,Map<String,Object> dflts,Map<String,Object> props) throws IgniteCheckedException {\n  if (section == null || props == null)   return null;\n  if (DFLT_SECTION.equalsIgnoreCase(section)) {\n    if (dflts != null)     throw new IgniteCheckedException(\"Only one '\" + DFLT_SECTION + \"' section is allowed.\");\n    return props;\n  }\n else {\n    hosts.add(props);\n    return null;\n  }\n}"}
{"ids": "39819", "raw_code": "public boolean isSet(final OPTION option){\n  return options == null ? false : options.contains(option);\n}"}
{"ids": "13724", "raw_code": "public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {\n  List optionData=restoreOptionsData();\n  CCCheckBox cbForceResetPwd=(CCCheckBox)getChild(CB_FORCE_RESET_PWD);\n  boolean forceResetPwd=cbForceResetPwd.isChecked();\n  UMUserPasswordResetOptionsModel model=(UMUserPasswordResetOptionsModel)getModel();\n  String userId=(String)getPageSessionAttribute(EntityEditViewBean.UNIVERSAL_ID);\n  try {\n    model.modifyUserOption(optionData,userId,forceResetPwd);\n    setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",model.getLocalizedString(\"profile.updated\"));\n  }\n catch (  AMConsoleException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());\n  }\n  forwardTo();\n}"}
{"ids": "13626", "raw_code": "NumberStrategy(final int field){\n  this.field=field;\n}"}
{"ids": "37709", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(0);\n  newVector.addElement(new Option(\"\\tInitial structure is empty (instead of Naive Bayes)\",\"N\",0,\"-N\"));\n  newVector.addElement(new Option(\"\\tMaximum number of parents\",\"P\",1,\"-P <nr of parents>\"));\n  newVector.addElement(new Option(\"\\tRandom order.\\n\" + \"\\t(default false)\",\"R\",0,\"-R\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "50179", "raw_code": "@Override public boolean queueRequest(Operation op){\n  AuthorizationContext ctx=op.getAuthorizationContext();\n  if (ctx == null) {\n    op.fail(new IllegalArgumentException(\"no authorization context\"));\n    return true;\n  }\n  Claims claims=ctx.getClaims();\n  if (claims == null) {\n    op.fail(new IllegalArgumentException(\"no claims\"));\n    return true;\n  }\n  String subject=claims.getSubject();\n  if (subject == null) {\n    op.fail(new IllegalArgumentException(\"no subject\"));\n    return true;\n  }\n  if (op.hasPragmaDirective(Operation.PRAGMA_DIRECTIVE_CLEAR_AUTH_CACHE)) {\n    return handleCacheClearRequest(op,subject);\n  }\n  if (subject.equals(SystemUserService.SELF_LINK)) {\n    op.complete();\n    return true;\n  }\n  if (ctx.getResourceQueryFilter(op.getAction()) != null) {\n    op.complete();\n    return true;\n  }\n  return false;\n}"}
{"ids": "75940", "raw_code": "public SpannableStringBuilder(CharSequence text){\n  this(text,0,text.length());\n}"}
{"ids": "23986", "raw_code": "public boolean hasExtraFields(PdxType other){\n  for (  PdxField ft : this.fields) {\n    if (!ft.isDeleted() && other.getPdxField(ft.getFieldName()) == null) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "49365", "raw_code": "public void put(String id,String str){\n  tab.put(id,str);\n  if (str.endsWith(\".dtd\")) {\n    int i=str.lastIndexOf(File.separator);\n    if (i >= 0) {\n      tab.put(str.substring(i + 1,str.length() - 4),str);\n    }\n  }\n}"}
{"ids": "33784", "raw_code": "private void assertReadVarint(byte[] data,long value) throws Exception {\n  CodedInputStream input=CodedInputStream.newInstance(data);\n  assertEquals((int)value,input.readRawVarint32());\n  assertDataConsumed(data,input);\n  input=CodedInputStream.newInstance(data);\n  assertEquals(value,input.readRawVarint64());\n  assertDataConsumed(data,input);\n  input=CodedInputStream.newInstance(data);\n  assertEquals(value,input.readRawVarint64SlowPath());\n  assertDataConsumed(data,input);\n  input=CodedInputStream.newInstance(data);\n  assertTrue(input.skipField(WireFormat.WIRETYPE_VARINT));\n  assertDataConsumed(data,input);\n  for (int blockSize=1; blockSize <= 16; blockSize*=2) {\n    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));\n    assertEquals((int)value,input.readRawVarint32());\n    assertDataConsumed(data,input);\n    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));\n    assertEquals(value,input.readRawVarint64());\n    assertDataConsumed(data,input);\n    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));\n    assertEquals(value,input.readRawVarint64SlowPath());\n    assertDataConsumed(data,input);\n    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));\n    assertTrue(input.skipField(WireFormat.WIRETYPE_VARINT));\n    assertDataConsumed(data,input);\n  }\n  byte[] longerData=new byte[data.length + 1];\n  System.arraycopy(data,0,longerData,0,data.length);\n  InputStream rawInput=new ByteArrayInputStream(longerData);\n  assertEquals((int)value,CodedInputStream.readRawVarint32(rawInput));\n  assertEquals(1,rawInput.available());\n}"}
{"ids": "83207", "raw_code": "public void reportOccurences(List<Map<Id<Vehicle>,Integer>> maps){\n  for (int m=0; m < maps.size(); m++) {\n    Map<Id<Vehicle>,Integer> theMap=maps.get(m);\n    log.info(\" Map \" + (m + 1) + \" (\"+ theMap.size()+ \" agents)\");\n    Integer min=Integer.MAX_VALUE;\n    Integer max=Integer.MIN_VALUE;\n    for (    Id<Vehicle> id : theMap.keySet()) {\n      min=Math.min(min,theMap.get(id));\n      max=Math.max(max,theMap.get(id));\n    }\n    log.info(\"    Min usage: \" + min + \"; Max usage: \"+ max);\n    List<Id<Link>> histList=new ArrayList<>();\n    Map<Id<Link>,Integer> histMap=new HashMap<Id<Link>,Integer>();\n    for (long h=min; h <= max; h++) {\n      Id<Link> id=Id.create(h,Link.class);\n      histList.add(id);\n      histMap.put(id,new Integer(0));\n    }\n    for (    Id<Vehicle> id : theMap.keySet()) {\n      int value=theMap.get(id);\n      histMap.put(Id.create(value,Link.class),new Integer(histMap.get(Id.create(value,Link.class)) + 1));\n    }\n    String s=\"\";\n    for (    Id<Link> id : histList) {\n      s+=id.toString() + \" (\" + histMap.get(id)+ \"); \";\n    }\n    log.info(\"    Link usage histogram:\");\n    log.info(\"    \" + s);\n  }\n}"}
{"ids": "21300", "raw_code": "public static List<URI> refIds(Collection<? extends RelatedResourceRep> refs){\n  List<URI> ids=new ArrayList<URI>();\n  if (refs != null) {\n    for (    RelatedResourceRep ref : refs) {\n      ids.add(ref.getId());\n    }\n  }\n  return ids;\n}"}
{"ids": "68221", "raw_code": "public static void cacheImgs(String skinImgDir,Iterable<String> baseImageURLs){\n  String skinDir=getSkinDir();\n  for (  String img : baseImageURLs) {\n    img=img.replace(\"[SKINIMG]\",skinDir + \"images/\");\n    img=img.replace(\"[SKIN]\",skinDir + skinImgDir);\n    Image.prefetch(img);\n  }\n}"}
{"ids": "69440", "raw_code": "public static String separatorsToUnix(String path){\n  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {\n    return path;\n  }\n  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);\n}"}
{"ids": "59445", "raw_code": "public void clearBuffer(){\n  buffer.clear();\n}"}
{"ids": "42337", "raw_code": "@Override public final void perform(IR ir){\n  java.util.HashMap<Register,Register> newMap=new java.util.HashMap<Register,Register>(5);\n  for (Enumeration<BasicBlock> be=ir.getBasicBlocks(); be.hasMoreElements(); ) {\n    BasicBlock bb=be.nextElement();\n    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {\n      Instruction s=ie.nextElement();\n      ;\n      newMap.clear();\n      if (s.isPEI() && s.operator() != IR_PROLOGUE) {\n        if (bb.hasApplicableExceptionalOut(s) || !RegisterRestrictions.SCRATCH_IN_PEI) {\n          splitAllLiveRanges(s,newMap,ir,false);\n        }\n      }\nswitch (s.getOpcode()) {\ncase MIR_LOWTABLESWITCH_opcode:\n{\n          RegisterOperand rOp=MIR_LowTableSwitch.getIndex(s);\n          RegisterOperand temp=findOrCreateTemp(rOp,newMap,ir);\n          insertMoveBefore(temp,rOp.copyRO(),s);\n          rOp.setRegister(temp.getRegister());\n        }\n      break;\n  }\n}\n}\n}"}
{"ids": "80219", "raw_code": "protected void appendString(final String text){\n  final HTMLDocument doc=(HTMLDocument)textPane.getDocument();\n  try {\n    final Element root=doc.getParagraphElement(0);\n    doc.insertBeforeEnd(root,text);\n  }\n catch (  final BadLocationException e) {\n    logger.error(e,e);\n  }\ncatch (  final IOException e) {\n    logger.error(e,e);\n  }\n}"}
{"ids": "67027", "raw_code": "public void scaleToSamples(int usrSamples){\n  double ratio;\n  ratio=(double)usrSamples / count;\n  count=0;\n  for (int i=0; i <= limits.length; ++i) {\n    results[i]=(int)Math.round(results[i] * ratio);\n    count+=results[i];\n  }\n}"}
{"ids": "67154", "raw_code": "private void refreshSelected(int offsetX){\n  int offset=(int)(offsetX + mMaxOverScrollDistance);\n  int tempIndex=Math.round(offset / mIntervalDis);\n  tempIndex=clampSelectedIndex(tempIndex);\n  if (mSelectedIndex == tempIndex) {\n    return;\n  }\n  mSelectedIndex=tempIndex;\n  if (null != onValueChangeListener) {\n    onValueChangeListener.onChange(this,mSelectedIndex,Float.parseFloat(format(mSelectedIndex * mIntervalValue + mMinValue)));\n  }\n}"}
{"ids": "74116", "raw_code": "@Override @SuppressWarnings(\"UnnecessaryBoxing\") public void resetFrame(){\nsynchronized (lock) {\n    sysName.setText(\"IAB\" + counter++);\n  }\n  userName.setText(null);\n  url.setText(null);\n  stream.setSelected(false);\n  stream.setEnabled(false);\n  loopStart.setValue(Long.valueOf(0));\n  loopEnd.setValue(Long.valueOf(0));\n  this.newBuffer=true;\n}"}
{"ids": "72932", "raw_code": "public ExpectedRecords<T> repeatAll(int times){\n  List<T> toAppend=new ArrayList<>();\n  for (int i=0; i < times; i++) {\n    toAppend.addAll(expectedRecords);\n  }\n  expectedRecords.addAll(toAppend);\n  return this;\n}"}
{"ids": "71735", "raw_code": "protected static GeoPoint parseKmlCoord(String input){\n  int end1=input.indexOf(',');\n  int end2=input.indexOf(',',end1 + 1);\n  try {\n    if (end2 == -1) {\n      double lon=Double.parseDouble(input.substring(0,end1));\n      double lat=Double.parseDouble(input.substring(end1 + 1,input.length()));\n      return new GeoPoint(lat,lon);\n    }\n else {\n      double lon=Double.parseDouble(input.substring(0,end1));\n      double lat=Double.parseDouble(input.substring(end1 + 1,end2));\n      double alt=Double.parseDouble(input.substring(end2 + 1,input.length()));\n      return new GeoPoint(lat,lon,alt);\n    }\n  }\n catch (  NumberFormatException e) {\n    return null;\n  }\ncatch (  IndexOutOfBoundsException e) {\n    return null;\n  }\n}"}
{"ids": "84017", "raw_code": "@Nullable public Calendar detectDate(String input){\n  checkNotNull(input);\n  Time.setTimeZone(getTimeZone());\n  Options opt=new com.sk89q.jchronic.Options();\n  opt.setNow(Calendar.getInstance(getTimeZone()));\n  Span date=Chronic.parse(input,opt);\n  if (date == null) {\n    return null;\n  }\n else {\n    return date.getBeginCalendar();\n  }\n}"}
{"ids": "77536", "raw_code": "public synchronized void saveCommitPoint(Long indexCommitGen){\n  AtomicInteger reserveCount=savedCommits.get(indexCommitGen);\n  if (reserveCount == null)   reserveCount=new AtomicInteger();\n  reserveCount.incrementAndGet();\n  savedCommits.put(indexCommitGen,reserveCount);\n}"}
{"ids": "1588", "raw_code": "public void removeSearchable(SearchResult searchable){\n  if (searchables.contains(searchable))   searchables.remove(search);\n}"}
{"ids": "35414", "raw_code": "public static boolean is64bit(){\n  boolean is64bit=false;\n  if (isWindows()) {\n    is64bit=(System.getenv(\"ProgramFiles(x86)\") != null);\n  }\n else {\n    is64bit=(OS_ARCH.contains(\"64\"));\n  }\n  return is64bit;\n}"}
{"ids": "81166", "raw_code": "private int resolveSizeAndStateRespectingMinSize(int minSize,int measuredSize,int measureSpec){\n  if (minSize != SIZE_UNSPECIFIED) {\n    final int desiredWidth=Math.max(minSize,measuredSize);\n    return resolveSizeAndState(desiredWidth,measureSpec,0);\n  }\n else {\n    return measuredSize;\n  }\n}"}
{"ids": "52656", "raw_code": "public static boolean deleteDirectoryAndContents(File rootDirectory){\n  if ((rootDirectory == null) || !rootDirectory.isDirectory()) {\n    return false;\n  }\n  try {\n    String[] directoryContents=rootDirectory.list();\n    for (int i=0; i < directoryContents.length; i++) {\n      boolean success=deleteDirectoryAndContents(new File(rootDirectory,directoryContents[i]));\n      if (!success) {\n        return false;\n      }\n    }\n    return rootDirectory.delete();\n  }\n catch (  Exception e) {\n    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));\n    return false;\n  }\n}"}
{"ids": "23933", "raw_code": "public static void nanosleep(long nanos) throws InterruptedException {\n  if (Thread.interrupted())   throw new InterruptedException();\n  if (nanos <= 0) {\n    return;\n  }\n  if (nanos >= 1000000) {\n    Thread.sleep(nanos / 1000000,(int)(nanos % 1000000));\n  }\n else {\n    if (pureMode) {\n      Thread.yield();\n    }\n else {\n      _nanosleep((int)nanos);\n    }\n  }\n}"}
{"ids": "33192", "raw_code": "int pureLength(){\n  return length - delimiter.length();\n}"}
{"ids": "38398", "raw_code": "protected void drawArrow(Graphics g,int x1,int y1,int x2,int y2){\n  if (x1 == x2) {\n    if (y1 < y2) {\n      g.drawLine(x2,y2,x2 + 4,y2 - 8);\n      g.drawLine(x2,y2,x2 - 4,y2 - 8);\n    }\n else {\n      g.drawLine(x2,y2,x2 + 4,y2 + 8);\n      g.drawLine(x2,y2,x2 - 4,y2 + 8);\n    }\n  }\n else {\n    double hyp=0, base=0, perp=0, theta, beta;\n    int x3=0, y3=0;\n    if (x2 < x1) {\n      base=x1 - x2;\n      hyp=Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      theta=Math.acos(base / hyp);\n    }\n else {\n      base=x1 - x2;\n      hyp=Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      theta=Math.acos(base / hyp);\n    }\n    beta=30 * Math.PI / 180;\n    hyp=8;\n    base=Math.cos(theta - beta) * hyp;\n    perp=Math.sin(theta - beta) * hyp;\n    x3=(int)(x2 + base);\n    if (y1 < y2) {\n      y3=(int)(y2 - perp);\n    }\n else {\n      y3=(int)(y2 + perp);\n    }\n    g.drawLine(x2,y2,x3,y3);\n    base=Math.cos(theta + beta) * hyp;\n    perp=Math.sin(theta + beta) * hyp;\n    x3=(int)(x2 + base);\n    if (y1 < y2) {\n      y3=(int)(y2 - perp);\n    }\n else {\n      y3=(int)(y2 + perp);\n    }\n    g.drawLine(x2,y2,x3,y3);\n  }\n}"}
{"ids": "58203", "raw_code": "private void addElements(int value,int numberOfElements){\n  if (m_firstFree + numberOfElements < m_blocksize)   for (int i=0; i < numberOfElements; i++) {\n    m_map0[m_firstFree++]=value;\n  }\n else {\n    int index=m_firstFree >>> m_SHIFT;\n    int offset=m_firstFree & m_MASK;\n    m_firstFree+=numberOfElements;\n    while (numberOfElements > 0) {\n      if (index >= m_map.length) {\n        int newsize=index + m_numblocks;\n        int[][] newMap=new int[newsize][];\n        System.arraycopy(m_map,0,newMap,0,m_map.length);\n        m_map=newMap;\n      }\n      int[] block=m_map[index];\n      if (null == block)       block=m_map[index]=new int[m_blocksize];\n      int copied=(m_blocksize - offset < numberOfElements) ? m_blocksize - offset : numberOfElements;\n      numberOfElements-=copied;\n      while (copied-- > 0)       block[offset++]=value;\n      ++index;\n      offset=0;\n    }\n  }\n}"}
{"ids": "53356", "raw_code": "public static StringBuilder formatTo(StringBuilder buf,double[] d,String sep){\n  if (d == null) {\n    return buf.append(\"null\");\n  }\n  if (d.length == 0) {\n    return buf;\n  }\n  buf.append(d[0]);\n  for (int i=1; i < d.length; i++) {\n    buf.append(sep);\n    buf.append(d[i]);\n  }\n  return buf;\n}"}
{"ids": "81736", "raw_code": "@SuppressWarnings(\"unchecked\") private static void mergeSort(Object[] in,Object[] out,int start,int end,Comparator c){\n  int len=end - start;\n  if (len <= SIMPLE_LENGTH) {\n    for (int i=start + 1; i < end; i++) {\n      Object current=out[i];\n      Object prev=out[i - 1];\n      if (c.compare(prev,current) > 0) {\n        int j=i;\n        do {\n          out[j--]=prev;\n        }\n while (j > start && (c.compare(prev=out[j - 1],current) > 0));\n        out[j]=current;\n      }\n    }\n    return;\n  }\n  int med=(end + start) >>> 1;\n  mergeSort(out,in,start,med,c);\n  mergeSort(out,in,med,end,c);\n  if (c.compare(in[med - 1],in[med]) <= 0) {\n    System.arraycopy(in,start,out,start,len);\n    return;\n  }\n  int r=med, i=start;\n  do {\n    Object fromVal=in[start];\n    Object rVal=in[r];\n    if (c.compare(fromVal,rVal) <= 0) {\n      int l_1=find(in,rVal,-1,start + 1,med - 1,c);\n      int toCopy=l_1 - start + 1;\n      System.arraycopy(in,start,out,i,toCopy);\n      i+=toCopy;\n      out[i++]=rVal;\n      r++;\n      start=l_1 + 1;\n    }\n else {\n      int r_1=find(in,fromVal,0,r + 1,end - 1,c);\n      int toCopy=r_1 - r + 1;\n      System.arraycopy(in,r,out,i,toCopy);\n      i+=toCopy;\n      out[i++]=fromVal;\n      start++;\n      r=r_1 + 1;\n    }\n  }\n while ((end - r) > 0 && (med - start) > 0);\n  if ((end - r) <= 0) {\n    System.arraycopy(in,start,out,i,med - start);\n  }\n else {\n    System.arraycopy(in,r,out,i,end - r);\n  }\n}"}
{"ids": "72895", "raw_code": "private View fillFromLeft(int nextLeft){\n  mFirstPosition=Math.min(mFirstPosition,mSelectedPosition);\n  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);\n  if (mFirstPosition < 0) {\n    mFirstPosition=0;\n  }\n  return fillRight(mFirstPosition,nextLeft);\n}"}
{"ids": "61848", "raw_code": "public TomcatSlf4jLogbackFactoryAccessor(ClassLoader cl) throws ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n  Class clazz=cl.loadClass(\"org.apache.juli.logging.org.slf4j.impl.StaticLoggerBinder\");\n  Method getSingleton=MethodUtils.getAccessibleMethod(clazz,\"getSingleton\",new Class[0]);\n  Object singleton=getSingleton.invoke(null);\n  Method getLoggerFactory=MethodUtils.getAccessibleMethod(clazz,\"getLoggerFactory\",new Class[0]);\n  Object loggerFactory=getLoggerFactory.invoke(singleton);\n  Class loggerFactoryClass=cl.loadClass(\"org.apache.juli.logging.ch.qos.logback.classic.LoggerContext\");\n  if (!loggerFactoryClass.isInstance(loggerFactory)) {\n    throw new RuntimeException(\"The singleton SLF4J binding was not Logback\");\n  }\n  setTarget(loggerFactory);\n}"}
{"ids": "7738", "raw_code": "public QuarterDateFormat(TimeZone zone,String[] quarterSymbols,boolean quarterFirst){\n  ParamChecks.nullNotPermitted(zone,\"zone\");\n  this.calendar=new GregorianCalendar(zone);\n  this.quarters=quarterSymbols;\n  this.quarterFirst=quarterFirst;\n  this.numberFormat=NumberFormat.getNumberInstance();\n}"}
{"ids": "31381", "raw_code": "public long restart(){\n  long start=_startTimeNanos;\n  _startTimeNanos=System.nanoTime();\n  return _startTimeNanos - start;\n}"}
{"ids": "49244", "raw_code": "private static byte[] stringToByteArray(String str){\n  byte[] result=new byte[str.length() + 1];\n  for (int i=0; i < str.length(); i++) {\n    result[i]=(byte)str.charAt(i);\n  }\n  result[str.length()]=0;\n  return result;\n}"}
{"ids": "38593", "raw_code": "@Override public void actionPerformed(ActionEvent e){\n  Object o;\n  o=e.getSource();\n  if (o == menuFileOpen) {\n    loadFile();\n  }\n else   if (o == menuFileSave) {\n    saveFile();\n  }\n else   if (o == menuFileSaveAs) {\n    saveFileAs();\n  }\n else   if (o == menuFileClose) {\n    closeFile();\n  }\n else   if (o == menuFileCloseAll) {\n    closeAllFiles();\n  }\n else   if (o == menuFileProperties) {\n    showProperties();\n  }\n else   if (o == menuFileExit) {\n    close();\n  }\n else   if (o == menuEditUndo) {\n    undo();\n  }\n else   if (o == menuEditCopy) {\n    copyContent();\n  }\n else   if (o == menuEditSearch) {\n    search();\n  }\n else   if (o == menuEditClearSearch) {\n    clearSearch();\n  }\n else   if (o == menuEditDeleteAttribute) {\n    deleteAttribute(false);\n  }\n else   if (o == menuEditDeleteAttributes) {\n    deleteAttribute(true);\n  }\n else   if (o == menuEditRenameAttribute) {\n    renameAttribute();\n  }\n else   if (o == menuEditAttributeAsClass) {\n    attributeAsClass();\n  }\n else   if (o == menuEditDeleteInstance) {\n    deleteInstance(false);\n  }\n else   if (o == menuEditDeleteInstances) {\n    deleteInstance(true);\n  }\n else   if (o == menuEditSortInstances) {\n    sortInstances();\n  }\n else   if (o == menuViewAttributes) {\n    showAttributes();\n  }\n else   if (o == menuViewValues) {\n    showValues();\n  }\n else   if (o == menuViewOptimalColWidths) {\n    setOptimalColWidths();\n  }\n  updateMenu();\n}"}
{"ids": "19573", "raw_code": "public static boolean hasJoda(){\n  try {\n    Class.forName(\"org.joda.time.LocalDate\");\n    return true;\n  }\n catch (  ClassNotFoundException e) {\n    return false;\n  }\n}"}
{"ids": "12106", "raw_code": "public RemoteServiceDescriptor(String baseUrl,HttpJsonRequestFactory requestFactory) throws IllegalArgumentException {\n  this.baseUrl=baseUrl;\n  try {\n    baseUrlURL=new URL(baseUrl);\n    final String protocol=baseUrlURL.getProtocol();\n    if (!(protocol.equals(\"http\") || protocol.equals(\"https\"))) {\n      throw new IllegalArgumentException(String.format(\"Invalid URL: %s\",baseUrl));\n    }\n  }\n catch (  MalformedURLException e) {\n    throw new IllegalArgumentException(String.format(\"Invalid URL: %s\",baseUrl));\n  }\n  this.requestFactory=requestFactory;\n}"}
{"ids": "34590", "raw_code": "private int findActivityElement(int activityIndex){\n  for (int elementIndex=0; elementIndex < mActivityList.size(); elementIndex++) {\n    if (mActivityList.get(elementIndex).mActivityIndex == activityIndex) {\n      return elementIndex;\n    }\n  }\n  return -1;\n}"}
{"ids": "22478", "raw_code": "public void mapVolumeToSDC(String volumeId,String sdcId) throws Exception {\n  log.info(\"mapping to sdc\");\n  String uri=ScaleIOConstants.getMapVolumeToSDCURI(volumeId);\n  ScaleIOMapVolumeToSDC mapParm=new ScaleIOMapVolumeToSDC();\n  mapParm.setSdcId(sdcId);\n  mapParm.setAllowMultipleMappings(\"TRUE\");\n  post(URI.create(uri),getJsonForEntity(mapParm));\n}"}
{"ids": "60217", "raw_code": "private static void replaceCollapsedByEclipseSourceRoots(Element libElement,Library.ModifiableModel modifiableModel){\n  String[] srcUrlsFromClasspath=modifiableModel.getUrls(OrderRootType.SOURCES);\n  LOG.assertTrue(srcUrlsFromClasspath.length <= 1);\n  final String eclipseUrl=srcUrlsFromClasspath.length > 0 ? srcUrlsFromClasspath[0] : null;\n  for (  Element r : libElement.getChildren(SRCROOT_ATTR)) {\n    final String url=r.getAttributeValue(\"url\");\n    final String bindAttr=r.getAttributeValue(SRCROOT_BIND_ATTR);\n    boolean notBind=bindAttr != null && !Boolean.parseBoolean(bindAttr);\n    if (notBind) {\n      modifiableModel.addRoot(url,OrderRootType.SOURCES);\n    }\n else     if (eclipseUrl != null && areUrlsPointTheSame(url,eclipseUrl) && !Comparing.strEqual(url,eclipseUrl)) {\n      modifiableModel.addRoot(url,OrderRootType.SOURCES);\n      if (srcUrlsFromClasspath != null && srcUrlsFromClasspath.length == 1) {\n        modifiableModel.removeRoot(eclipseUrl,OrderRootType.SOURCES);\n        srcUrlsFromClasspath=null;\n      }\n    }\n  }\n}"}
{"ids": "77998", "raw_code": "public static byte[] hexToBytes(String hexString){\n  byte[] result=new byte[hexString.length() / 2];\n  for (int i=0; i < result.length; ++i) {\n    int offset=i * 2;\n    result[i]=(byte)Integer.parseInt(hexString.substring(offset,offset + 2),16);\n  }\n  return result;\n}"}
{"ids": "1060", "raw_code": "private static String replaceLast(String str,char from,char to){\n  int index=str.lastIndexOf(from);\n  if (index == -1)   return str;\n  return str.substring(0,index) + to + str.substring(index + 1);\n}"}
{"ids": "21356", "raw_code": "private static void cleanStaleInitiatorReferences(ExportGroup exportGroup,DbClient dbClient){\n  StringSet exportGroupInitiators=exportGroup.getInitiators();\n  if (!CollectionUtils.isEmpty(exportGroupInitiators) && !CollectionUtils.isEmpty(exportGroup.getExportMasks())) {\n    Set<String> allMaskInitiators=new HashSet<>();\n    for (    String mask : exportGroup.getExportMasks()) {\n      ExportMask maskObj=dbClient.queryObject(ExportMask.class,URI.create(mask));\n      if (maskObj != null && !CollectionUtils.isEmpty(maskObj.getInitiators())) {\n        allMaskInitiators.addAll(maskObj.getInitiators());\n      }\n    }\n    Set<String> staleInitiators=Sets.difference(exportGroupInitiators,allMaskInitiators);\n    if (!CollectionUtils.isEmpty(staleInitiators)) {\n      Collection<URI> staleInitiatorURIS=Collections2.transform(staleInitiators,CommonTransformerFunctions.FCTN_STRING_TO_URI);\n      exportGroup.removeInitiators(new ArrayList<>(staleInitiatorURIS));\n      _log.info(\"Stale initiators {} will be removed from Export Group {}\",staleInitiatorURIS,exportGroup.getId());\n    }\n  }\n}"}
{"ids": "10479", "raw_code": "public static <T>T findResourceByName(Iterable<HasMetadata> entities,Class<T> clazz,String name){\n  if (entities != null) {\n    for (    HasMetadata entity : entities) {\n      if (clazz.isInstance(entity) && Objects.equals(name,getName(entity))) {\n        return clazz.cast(entity);\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "706", "raw_code": "public static Map ordinalMap(Iterator tuples,String field,Comparator cmp){\n  Object[] o=ordinalArray(tuples,field,cmp);\n  HashMap map=new HashMap();\n  for (int i=0; i < o.length; ++i)   map.put(o[i],new Integer(i));\n  return map;\n}"}
{"ids": "46228", "raw_code": "void addLineMonitor(LineMonitor lm){\n  if (Printer.trace)   Printer.trace(\"> EventDispatcher.addLineMonitor(\" + lm + \")\");\nsynchronized (lineMonitors) {\n    if (lineMonitors.indexOf(lm) >= 0) {\n      if (Printer.trace)       Printer.trace(\"< EventDispatcher.addLineMonitor finished -- this monitor already exists!\");\n      return;\n    }\n    if (Printer.debug)     Printer.debug(\"EventDispatcher: adding line monitor \" + lm);\n    lineMonitors.add(lm);\n  }\nsynchronized (this) {\n    notifyAll();\n  }\n  if (Printer.debug)   Printer.debug(\"< EventDispatcher.addLineMonitor finished -- now (\" + lineMonitors.size() + \" monitors)\");\n}"}
{"ids": "49875", "raw_code": "public static String toChar(byte b){\n  if (b >= 0x20) {\n    return Character.toString((char)b);\n  }\n else {\n    return String.format(\"%02x\",b);\n  }\n}"}
{"ids": "61296", "raw_code": "public void addNodes(NodeIterator iterator){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));\n  if (null != iterator) {\n    Node obj;\n    while (null != (obj=iterator.nextNode())) {\n      addElement(obj);\n    }\n  }\n}"}
{"ids": "47806", "raw_code": "public static double ptSegDist(double x1,double y1,double x2,double y2,double px,double py){\n  return Math.sqrt(ptSegDistSq(x1,y1,x2,y2,px,py));\n}"}
{"ids": "47922", "raw_code": "MethodType asSpreaderType(Class<?> arrayType,int arrayLength){\n  assert (parameterCount() >= arrayLength);\n  int spreadPos=ptypes.length - arrayLength;\n  if (arrayLength == 0)   return this;\n  if (arrayType == Object[].class) {\n    if (isGeneric())     return this;\n    if (spreadPos == 0) {\n      MethodType res=genericMethodType(arrayLength);\n      if (rtype != Object.class) {\n        res=res.changeReturnType(rtype);\n      }\n      return res;\n    }\n  }\n  Class<?> elemType=arrayType.getComponentType();\n  assert (elemType != null);\n  for (int i=spreadPos; i < ptypes.length; i++) {\n    if (ptypes[i] != elemType) {\n      Class<?>[] fixedPtypes=ptypes.clone();\n      Arrays.fill(fixedPtypes,i,ptypes.length,elemType);\n      return methodType(rtype,fixedPtypes);\n    }\n  }\n  return this;\n}"}
{"ids": "36626", "raw_code": "public static mxICell resolve(mxICell root,String path){\n  mxICell parent=root;\n  String[] tokens=path.split(Pattern.quote(PATH_SEPARATOR));\n  for (int i=0; i < tokens.length; i++) {\n    parent=parent.getChildAt(Integer.parseInt(tokens[i]));\n  }\n  return parent;\n}"}
{"ids": "19982", "raw_code": "private static int nextNonQuoteIndex(String trimmed,int i,boolean forward){\n  while (trimmed.charAt(i) == '\\u0022' || trimmed.charAt(i) == '\\'' || trimmed.charAt(i) == '\\u0060' || trimmed.charAt(i) == '\\u00B4' || trimmed.charAt(i) == '\\u2018' || trimmed.charAt(i) == '\\u2019' || trimmed.charAt(i) == '\\u201C' || trimmed.charAt(i) == '\\u201D') {\n    if (forward)     i++;\n else     i--;\n  }\n  return i;\n}"}
{"ids": "80", "raw_code": "public static void reset(){\n  traceState.remove();\n  suspendedState.clear();\n}"}
{"ids": "42729", "raw_code": "private String inclusiveSlice(){\n  if (mark >= pos) {\n    return \"\";\n  }\n  return sign.substring(mark,pos + 1);\n}"}
{"ids": "17206", "raw_code": "public byte[] toBytecode() throws IOException, CannotCompileException {\n  ByteArrayOutputStream barray=new ByteArrayOutputStream();\n  DataOutputStream out=new DataOutputStream(barray);\n  try {\n    toBytecode(out);\n  }\n  finally {\n    out.close();\n  }\n  return barray.toByteArray();\n}"}
{"ids": "74854", "raw_code": "public static void serializePath(final ObjectOutput os,final PathIterator pi) throws IOException {\n  os.writeObject(pi.getWindingRule());\n  final List<java.io.Serializable> list=new ArrayList<java.io.Serializable>();\n  while (!pi.isDone()) {\n    final float[] array=new float[6];\n    final int type=pi.currentSegment(array);\n    list.add(type);\n    list.add(array);\n    pi.next();\n  }\n  os.writeObject(list);\n}"}
{"ids": "16628", "raw_code": "public double calculateLocalSwapTotalCapacity(int hostcount,int hostlocalswapsize){\n  double d=(double)(hostcount * hostlocalswapsize) / 1024;\n  d*=-1;\n  d=(double)Math.round(d * 100) / 100;\n  return d;\n}"}
{"ids": "27437", "raw_code": "boolean findMarker() throws IOException {\n  if (markerIndex == marker.length) {\n    return true;\n  }\n  if (log.isDebugEnabled())   log.debug(\"Looking for token, \" + BytesUtil.toHexString(marker) + \", reads: \"+ nreads);\n  while (markerIndex < marker.length) {\n    final int remtok=marker.length - markerIndex;\n    markerBB.limit(remtok);\n    markerBB.position(0);\n    final int rdLen=client.read(markerBB);\n    if (rdLen == -1) {\n      throw new IOException(\"EOF: nreads=\" + nreads + \", bytesRead=\"+ bytesRead);\n    }\n    nreads++;\n    bytesRead+=rdLen;\n    for (int i=0; i < rdLen; i++) {\n      if (markerBuffer[i] != marker[markerIndex]) {\n        if (foundMarkerInInitialPosition) {\n          foundMarkerInInitialPosition=false;\n          log.error(\"Marker not found: skipping\");\n        }\n        markerIndex=0;\n        if (markerBuffer[i] == marker[markerIndex]) {\n          markerIndex++;\n        }\n      }\n else {\n        markerIndex++;\n        nmarkerbytematches++;\n      }\n    }\n    if (nreads % 10000 == 0) {\n      if (log.isDebugEnabled())       log.debug(\"...still looking: reads=\" + nreads + \", bytesRead=\"+ bytesRead);\n    }\n  }\n  if (markerIndex != marker.length) {\n    if (log.isDebugEnabled())     log.debug(\"Not found token yet!\");\n    return false;\n  }\n else {\n    if (log.isDebugEnabled())     log.debug(\"Found token after \" + nreads + \" token reads and \"+ nmarkerbytematches+ \" byte matches\");\n    return true;\n  }\n}"}
{"ids": "10621", "raw_code": "public void parseLoggcFile(InputStream loggcFileStream,DefaultMutableTreeNode root){\n  BufferedReader bis=new BufferedReader(new InputStreamReader(loggcFileStream));\n  Vector histograms=new Vector();\n  try {\n    while (bis.ready()) {\n      bis.mark(getMarkSize());\n      String nextLine=bis.readLine();\n      if (nextLine.startsWith(\"num   #instances    #bytes  class name\")) {\n        bis.reset();\n        histograms.add(parseNextClassHistogram(bis));\n      }\n    }\n    for (int i=histograms.size() - 1; i >= 0; i--) {\n      DefaultMutableTreeNode dump=getNextDumpForHistogram(root);\n      if (dump != null) {\n        addHistogramToDump(dump,(HistogramTableModel)histograms.get(i));\n      }\n    }\n  }\n catch (  IOException ex) {\n    ex.printStackTrace();\n  }\n}"}
{"ids": "36268", "raw_code": "private void resolveTimeMacro(StringBuffer result){\n  Calendar calendar=new GregorianCalendar();\n  result.append(calendar.get(Calendar.YEAR) + \"_\");\n  String month=calendar.get(Calendar.MONTH) + 1 + \"\";\n  if (month.length() < 2) {\n    month=\"0\" + month;\n  }\n  result.append(month + \"_\");\n  String day=calendar.get(Calendar.DAY_OF_MONTH) + \"\";\n  if (day.length() < 2) {\n    day=\"0\" + day;\n  }\n  result.append(day + \"-\");\n  int amPm=calendar.get(Calendar.AM_PM);\n  String amPmString=amPm == Calendar.AM ? \"AM\" : \"PM\";\n  result.append(amPmString + \"_\");\n  String hour=calendar.get(Calendar.HOUR) + \"\";\n  if (hour.length() < 2) {\n    hour=\"0\" + hour;\n  }\n  result.append(hour + \"_\");\n  String minute=calendar.get(Calendar.MINUTE) + \"\";\n  if (minute.length() < 2) {\n    minute=\"0\" + minute;\n  }\n  result.append(minute + \"_\");\n  String second=calendar.get(Calendar.SECOND) + \"\";\n  if (second.length() < 2) {\n    second=\"0\" + second;\n  }\n  result.append(second);\n}"}
{"ids": "36423", "raw_code": "public boolean isEmpty(){\nsynchronized (lock) {\n    return annotationsDrawOrder.isEmpty();\n  }\n}"}
{"ids": "72697", "raw_code": "default B append8bit(@NotNull CharSequence cs,int start,int end) throws IllegalArgumentException, BufferOverflowException, BufferUnderflowException, IndexOutOfBoundsException {\n  if (cs instanceof BytesStore) {\n    return write((BytesStore)cs,(long)start,end);\n  }\n  for (int i=start; i < end; i++) {\n    char c=cs.charAt(i);\n    if (c > 255)     c='?';\n    writeByte((byte)c);\n  }\n  return (B)this;\n}"}
{"ids": "51048", "raw_code": "static void zero(float[][] array){\n  for (  float[] aFloat : array) {\n    Arrays.fill(aFloat,-1);\n  }\n}"}
{"ids": "39459", "raw_code": "@Override public boolean contains(Point2D.Double p){\n  RoundRectangle2D.Double r=(RoundRectangle2D.Double)roundrect.clone();\n  double grow=AttributeKeys.getPerpendicularHitGrowth(this);\n  r.x-=grow;\n  r.y-=grow;\n  r.width+=grow * 2;\n  r.height+=grow * 2;\n  r.arcwidth+=grow * 2;\n  r.archeight+=grow * 2;\n  return r.contains(p);\n}"}
{"ids": "80100", "raw_code": "private void downloadUpdateProp(final boolean initialDownload){\n  if (bootProp != null) {\n    serverFolder=bootProp.getProperty(\"server.folder-1.20\",ClientGameConfiguration.get(\"UPDATE_SERVER_FOLDER\")) + \"/\";\n    String updatePropertiesFile=bootProp.getProperty(\"server.update-prop-1.20\",serverFolder + \"update-1.20.properties\");\n    final HttpClient httpClient=new HttpClient(updatePropertiesFile,initialDownload);\n    updateProp=httpClient.fetchProperties();\n    if (updateProp != null && updateProp.containsKey(\"init.version\")) {\n      return;\n    }\n  }\n  String updatePropertiesFile=ClientGameConfiguration.get(\"UPDATE_SERVER_FOLDER\") + \"/update-1.20.properties\";\n  HttpClient httpClient=new HttpClient(updatePropertiesFile,initialDownload);\n  updateProp=httpClient.fetchProperties();\n  if (updateProp != null && updateProp.containsKey(\"init.version\")) {\n    return;\n  }\n  updatePropertiesFile=ClientGameConfiguration.get(\"UPDATE_SERVER_FOLDER_FALLBACK\") + \"/update-1.20.properties\";\n  httpClient=new HttpClient(updatePropertiesFile,initialDownload);\n  updateProp=httpClient.fetchProperties();\n}"}
{"ids": "67461", "raw_code": "private void mergeMethodHandleStore(final int index,final MethodHandle methodHandle){\n  localVariables.merge(index,new MethodHandle(methodHandle),null);\n}"}
{"ids": "77015", "raw_code": "public ContextSuggestField(String name,String value,int weight,CharSequence... contexts){\n  super(name,value,weight);\n  validate(value);\n  this.contexts=new HashSet<>((contexts != null) ? contexts.length : 0);\n  if (contexts != null) {\n    Collections.addAll(this.contexts,contexts);\n  }\n}"}
{"ids": "60592", "raw_code": "@Override protected byte[] decrypt(byte type,byte[] fragment,int offset,int len){\n  byte[] data=decCipher.update(fragment,offset,len);\n  byte[] content;\n  if (block_size != 0) {\n    int padding_length=data[data.length - 1] & 0xFF;\n    for (int i=0; i < padding_length; i++) {\n      if ((data[data.length - 2 - i] & 0xFF) != padding_length) {\n        throw new AlertException(AlertProtocol.DECRYPTION_FAILED,new SSLProtocolException(\"Received message has bad padding\"));\n      }\n    }\n    content=new byte[data.length - hash_size - padding_length- 1];\n  }\n else {\n    content=new byte[data.length - hash_size];\n  }\n  byte[] mac_value;\n  mac_material_part[0]=type;\n  mac_material_part[1]=(byte)((0x00FF00 & content.length) >> 8);\n  mac_material_part[2]=(byte)(0x0000FF & content.length);\n  messageDigest.update(mac_read_secret);\n  messageDigest.update(pad_1);\n  messageDigest.update(read_seq_num);\n  messageDigest.update(mac_material_part);\n  messageDigest.update(data,0,content.length);\n  mac_value=messageDigest.digest();\n  messageDigest.update(mac_read_secret);\n  messageDigest.update(pad_2);\n  messageDigest.update(mac_value);\n  mac_value=messageDigest.digest();\n  if (logger != null) {\n    logger.println(\"Decrypted:\");\n    logger.print(data);\n    logger.println(\"Expected mac value:\");\n    logger.print(mac_value);\n  }\n  for (int i=0; i < hash_size; i++) {\n    if (mac_value[i] != data[i + content.length]) {\n      throw new AlertException(AlertProtocol.BAD_RECORD_MAC,new SSLProtocolException(\"Bad record MAC\"));\n    }\n  }\n  System.arraycopy(data,0,content,0,content.length);\n  incSequenceNumber(read_seq_num);\n  return content;\n}"}
{"ids": "776", "raw_code": "public Activity put(String key,Activity activity){\n  return (Activity)m_map.put(key,activity);\n}"}
{"ids": "4065", "raw_code": "public boolean isAbstract(){\n  return Modifier.isAbstract(getAccessFlags());\n}"}
{"ids": "78657", "raw_code": "public void clearCurrentRequestTimedOut(){\n  if (currentRequestTimedOut != null)   currentRequestTimedOut.clear();\n  currentRequestTimedOut=null;\n}"}
{"ids": "66800", "raw_code": "protected void showPage(int page){\n  boolean isEmpty=page == PAGE_EMPTY;\n  Control control=isEmpty ? (Control)fEmptyPageLabel : getControl();\n  if (isEmpty) {\n    setContentDescription(\"\");\n    clearViewer();\n  }\n  fPagebook.showPage(control);\n}"}
{"ids": "8586", "raw_code": "@Override public boolean equals(Object o){\n  if (this == o)   return true;\n  if (o == null || getClass() != o.getClass())   return false;\n  Insets insets=(Insets)o;\n  if (bottom != insets.bottom)   return false;\n  if (left != insets.left)   return false;\n  if (right != insets.right)   return false;\n  if (top != insets.top)   return false;\n  return true;\n}"}
{"ids": "45223", "raw_code": "public void removeDocuments(List<Query> queries){\n  IndexWriter writer=getWriter();\n  for (  Query query : queries) {\n    try {\n      writer.deleteDocuments(query);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n      closeWriter(writer);\n      throw new RuntimeException(e);\n    }\n  }\n  closeWriter(writer);\n}"}
{"ids": "9625", "raw_code": "public static SecretKey generateSecretKey(SecretKeyType secretKeyType,int keySize) throws CryptoException {\n  try {\n    KeyGenerator keyGenerator=KeyGenerator.getInstance(secretKeyType.jce(),BOUNCY_CASTLE.jce());\n    keyGenerator.init(keySize,SecureRandom.getInstance(\"SHA1PRNG\"));\n    return keyGenerator.generateKey();\n  }\n catch (  GeneralSecurityException ex) {\n    throw new CryptoException(MessageFormat.format(res.getString(\"NoGenerateSecretKey.exception.message\"),secretKeyType),ex);\n  }\n}"}
{"ids": "10657", "raw_code": "public CML deleteCML(ISicresAbstractDocumentVO document){\n  String id=document.getId();\n  Reference reference=new Reference(STORE,id,null);\n  Predicate predicate=new Predicate(new Reference[]{reference},null,null);\n  CMLDelete delete=new CMLDelete(predicate);\n  CML cml=new CML();\n  cml.setDelete(new CMLDelete[]{delete});\n  return cml;\n}"}
{"ids": "9288", "raw_code": "private synchronized void eval() throws MetadataEvaluationException {\n  if (cacheStrategy == CacheStrategy.NEVER_CACHE || internalValue.get() == null) {\n    try {\n      Object value=lazyValue.call();\n      if (value == null) {\n        value=ACTUALLY_NULL;\n      }\n      internalValue=new SoftReference<Object>(value);\n    }\n catch (    Exception e) {\n      throw new MetadataEvaluationException(e);\n    }\n  }\n}"}
{"ids": "6756", "raw_code": "public void addEdgeToBounds(S2Point from,S2Point to){\n  if (!boundSet) {\n    boundSet=true;\n    xmin=xmax=from.x;\n    ymin=ymax=from.y;\n    zmin=zmax=from.z;\n  }\n  xmin=Math.min(xmin,Math.min(to.x,from.x));\n  ymin=Math.min(ymin,Math.min(to.y,from.y));\n  zmin=Math.min(zmin,Math.min(to.z,from.z));\n  xmax=Math.max(xmax,Math.max(to.x,from.x));\n  ymax=Math.max(ymax,Math.max(to.y,from.y));\n  zmax=Math.max(zmax,Math.max(to.z,from.z));\n  double approxArcLen=Math.abs(from.x - to.x) + Math.abs(from.y - to.y) + Math.abs(from.z - to.z);\n  if (approxArcLen < 0.025) {\n    maxDeformation=Math.max(maxDeformation,approxArcLen * 0.0025);\n  }\n else   if (approxArcLen < 1.0) {\n    maxDeformation=Math.max(maxDeformation,approxArcLen * 0.11);\n  }\n else {\n    maxDeformation=approxArcLen * 0.5;\n  }\n}"}
{"ids": "15252", "raw_code": "public static String hash(String string){\n  try {\n    MessageDigest sha1=MessageDigest.getInstance(\"SHA-1\");\n    sha1.update(string.getBytes(\"UTF-8\"));\n    return Base64.encode(sha1.digest());\n  }\n catch (  Exception ex) {\n    Debug debug=Debug.getInstance(\"amSDK\");\n    if (debug.warningEnabled()) {\n      debug.warning(\"Hash.hash:\",ex);\n    }\n    return null;\n  }\n}"}
{"ids": "71844", "raw_code": "static List<String> readExtensions(final SubstringReader reader) throws DecodeException {\n  int length=0;\n  List<String> values;\n  reader.skipWhitespaces();\n  reader.mark();\n  try {\n    char c=reader.read();\n    if (c == '\\'') {\n      reader.mark();\n      while (reader.read() != '\\'') {\n        length++;\n      }\n      reader.reset();\n      values=Collections.singletonList(reader.read(length));\n      reader.read();\n    }\n else     if (c == '(') {\n      reader.skipWhitespaces();\n      reader.mark();\n      c=reader.read();\n      if (c == ')') {\n        values=Collections.emptyList();\n      }\n else {\n        values=new ArrayList<>();\n        do {\n          reader.reset();\n          values.add(readQuotedString(reader));\n          reader.skipWhitespaces();\n          reader.mark();\n        }\n while (reader.read() != ')');\n        values=Collections.unmodifiableList(values);\n      }\n    }\n else {\n      do {\n        length++;\n      }\n while (reader.read() != ' ');\n      reader.reset();\n      values=Collections.singletonList(reader.read(length));\n    }\n    return values;\n  }\n catch (  final StringIndexOutOfBoundsException e) {\n    throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get());\n  }\n}"}
{"ids": "69921", "raw_code": "public int read(ByteBuffer dst) throws IOException {\n  if (!dst.hasRemaining())   return 0;\n  if (!isHandShakeComplete()) {\n    if (isBlocking()) {\n      while (!isHandShakeComplete()) {\n        processHandshake();\n      }\n    }\n else {\n      processHandshake();\n      if (!isHandShakeComplete()) {\n        return 0;\n      }\n    }\n  }\n  int purged=readRemaining(dst);\n  if (purged != 0)   return purged;\n  assert (inData.position() == 0);\n  inData.clear();\n  if (!inCrypt.hasRemaining())   inCrypt.clear();\n else   inCrypt.compact();\n  if (isBlocking() || readEngineResult.getStatus() == Status.BUFFER_UNDERFLOW)   if (socketChannel.read(inCrypt) == -1) {\n    return -1;\n  }\n  inCrypt.flip();\n  unwrap();\n  int transfered=transfereTo(inData,dst);\n  if (transfered == 0 && isBlocking()) {\n    return read(dst);\n  }\n  return transfered;\n}"}
{"ids": "76977", "raw_code": "private List<FacetResult> search() throws IOException {\n  DirectoryReader indexReader=DirectoryReader.open(indexDir);\n  IndexSearcher searcher=new IndexSearcher(indexReader);\n  SortedSetDocValuesReaderState state=new DefaultSortedSetDocValuesReaderState(indexReader);\n  FacetsCollector fc=new FacetsCollector();\n  FacetsCollector.search(searcher,new MatchAllDocsQuery(),10,fc);\n  Facets facets=new SortedSetDocValuesFacetCounts(state,fc);\n  List<FacetResult> results=new ArrayList<>();\n  results.add(facets.getTopChildren(10,\"Author\"));\n  results.add(facets.getTopChildren(10,\"Publish Year\"));\n  indexReader.close();\n  return results;\n}"}
{"ids": "26162", "raw_code": "public Resource mapRelations(Resource object,JSONObject jsonObject,List<Resource> included) throws Exception {\n  HashMap<String,String> relationshipNames=getRelationshipNames(object.getClass());\n  for (  String relationship : relationshipNames.keySet()) {\n    JSONObject relationJsonObject=null;\n    try {\n      relationJsonObject=jsonObject.getJSONObject(relationship);\n    }\n catch (    JSONException e) {\n      Logger.debug(\"Relationship named \" + relationship + \"not found in JSON\");\n      continue;\n    }\n    JSONObject relationDataObject=null;\n    try {\n      relationDataObject=relationJsonObject.getJSONObject(\"data\");\n      Resource relationObject=Factory.newObjectFromJSONObject(relationDataObject,null);\n      relationObject=matchIncludedToRelation(relationObject,included);\n      mDeserializer.setField(object,relationshipNames.get(relationship),relationObject);\n    }\n catch (    JSONException e) {\n      Logger.debug(\"JSON relationship does not contain data\");\n    }\n    JSONArray relationDataArray=null;\n    try {\n      relationDataArray=relationJsonObject.getJSONArray(\"data\");\n      List<Resource> relationArray=Factory.newObjectFromJSONArray(relationDataArray,null);\n      relationArray=matchIncludedToRelation(relationArray,included);\n      mDeserializer.setField(object,relationshipNames.get(relationship),relationArray);\n    }\n catch (    JSONException e) {\n      Logger.debug(\"JSON relationship does not contain data\");\n    }\n  }\n  return object;\n}"}
{"ids": "46780", "raw_code": "public int size(){\n  return rdns.size();\n}"}
{"ids": "26104", "raw_code": "@Override public void doInitialize(UimaContext aContext) throws ResourceInitializationException {\n  DB db=mongoResource.getDB();\n  collection=db.getCollection(collectionName);\n  collection.createIndex(new BasicDBObject(FIELD_UNIQUE_ID,1));\n  collection.createIndex(new BasicDBObject(FIELD_PUBLISHEDIDS,1));\n  stopFeatures=new HashSet<String>();\n  stopFeatures.add(\"uima.cas.AnnotationBase:sofa\");\n  stopFeatures.add(\"uk.gov.dstl.baleen.types.BaleenAnnotation:internalId\");\n  maxContentLength=ConfigUtils.stringToInteger(maxContentLengthString,0);\n}"}
{"ids": "7717", "raw_code": "protected void drawHighFarOut(double aRadius,Graphics2D g2,double xx,double m){\n  double side=aRadius * 2;\n  g2.draw(new Line2D.Double(xx - side,m + side,xx + side,m + side));\n  g2.draw(new Line2D.Double(xx - side,m + side,xx,m));\n  g2.draw(new Line2D.Double(xx + side,m + side,xx,m));\n}"}
{"ids": "38130", "raw_code": "private void findLargeItemSets() throws Exception {\n  ArrayList<Object> kMinusOneSets, kSets;\n  Hashtable<ItemSet,Integer> hashtable;\n  int necSupport, i=0;\n  necSupport=(int)(m_minSupport * m_instances.numInstances() + 0.5);\n  kSets=AprioriItemSet.singletons(m_instances,m_treatZeroAsMissing);\n  if (m_treatZeroAsMissing) {\n    AprioriItemSet.upDateCountersTreatZeroAsMissing(kSets,m_instances);\n  }\n else {\n    AprioriItemSet.upDateCounters(kSets,m_instances);\n  }\n  kSets=AprioriItemSet.deleteItemSets(kSets,necSupport,m_instances.numInstances());\n  if (kSets.size() == 0) {\n    return;\n  }\n  do {\n    m_Ls.add(kSets);\n    kMinusOneSets=kSets;\n    kSets=AprioriItemSet.mergeAllItemSets(kMinusOneSets,i,m_instances.numInstances());\n    hashtable=AprioriItemSet.getHashtable(kMinusOneSets,kMinusOneSets.size());\n    m_hashtables.add(hashtable);\n    kSets=AprioriItemSet.pruneItemSets(kSets,hashtable);\n    if (m_treatZeroAsMissing) {\n      AprioriItemSet.upDateCountersTreatZeroAsMissing(kSets,m_instances);\n    }\n else {\n      AprioriItemSet.upDateCounters(kSets,m_instances);\n    }\n    kSets=AprioriItemSet.deleteItemSets(kSets,necSupport,m_instances.numInstances());\n    i++;\n  }\n while (kSets.size() > 0);\n}"}
{"ids": "80590", "raw_code": "public boolean isInAllowed(int x,int y){\n  for (  Shape r : arrivingBarriers) {\n    if (r.contains(x,y)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "14780", "raw_code": "public void removePluginInterface(String interfacename) throws SMSException, SSOException {\n  SMSEntry.validateToken(token);\n  validateServiceSchemaManagerImpl();\n  Document schemaDoc=ssm.getDocumentCopy();\n  Node schemaNode=XMLUtils.getRootNode(schemaDoc,SMSUtils.SCHEMA);\n  Node pluginNode=XMLUtils.getNamedChildNode(schemaNode,SMSUtils.PLUGIN_INTERFACE,SMSUtils.NAME,interfacename);\n  if (pluginNode != null) {\n    schemaNode.removeChild(pluginNode);\n    replaceSchema(schemaDoc);\n  }\n}"}
{"ids": "48279", "raw_code": "public IPAddressName(String name) throws IOException {\n  if (name == null || name.length() == 0) {\n    throw new IOException(\"IPAddress cannot be null or empty\");\n  }\n  if (name.charAt(name.length() - 1) == '/') {\n    throw new IOException(\"Invalid IPAddress: \" + name);\n  }\n  if (name.indexOf(':') >= 0) {\n    parseIPv6(name);\n    isIPv4=false;\n  }\n else   if (name.indexOf('.') >= 0) {\n    parseIPv4(name);\n    isIPv4=true;\n  }\n else {\n    throw new IOException(\"Invalid IPAddress: \" + name);\n  }\n}"}
{"ids": "56280", "raw_code": "private boolean isSameFile(Path first,Path second) throws IOException {\n  boolean sameFileSize=Files.size(first) == Files.size(second);\n  if (!sameFileSize) {\n    return false;\n  }\n  byte[] firstBytes=Files.readAllBytes(first);\n  byte[] secondBytes=Files.readAllBytes(second);\n  return Arrays.equals(firstBytes,secondBytes);\n}"}
{"ids": "12068", "raw_code": "public static org.opcfoundation.ua.transport.security.KeyPair loadKeyPairFromProtectedStore(String storeLocation,String alias,String storePW,String privatePW) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableKeyException {\n  KeyStore store=null;\n  store=KeyStore.getInstance(\"JKS\");\n  File keystoreFile=new File(storeLocation);\n  FileInputStream in=new FileInputStream(keystoreFile);\n  store.load(in,storePW.toCharArray());\n  in.close();\n  X509Certificate cert=(X509Certificate)store.getCertificate(alias);\n  RSAPrivateKey key=(RSAPrivateKey)store.getKey(alias,privatePW.toCharArray());\n  return new org.opcfoundation.ua.transport.security.KeyPair(new Cert(cert),new PrivKey(key));\n}"}
{"ids": "28143", "raw_code": "@Override public GraphQuery hasNot(final String key,final Object value){\n  criteria.add(new HasNot(key,value));\n  return this;\n}"}
{"ids": "40021", "raw_code": "private void initComputeProgram(){\n  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);\n  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);\n  workGroupSizeX=workGroupSize.get(0);\n  workGroupSizeY=workGroupSize.get(1);\n  int boxesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,\"Boxes\");\n  IntBuffer props=BufferUtils.createIntBuffer(1);\n  IntBuffer params=BufferUtils.createIntBuffer(1);\n  props.put(0,GL_BUFFER_BINDING);\n  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,boxesResourceIndex,props,null,params);\n  boxesSsboBinding=params.get(0);\n  int uniformsResourceIndex=glGetProgramResourceIndex(computeProgram,GL_UNIFORM_BLOCK,\"Uniforms\");\n  glGetProgramResourceiv(computeProgram,GL_UNIFORM_BLOCK,uniformsResourceIndex,props,null,params);\n  computeUboBinding=params.get(0);\n  int loc=glGetUniformLocation(computeProgram,\"framebufferImage\");\n  glGetUniformiv(computeProgram,loc,params);\n  framebufferImageBinding=params.get(0);\n  loc=glGetUniformLocation(computeProgram,\"worldPositionImage\");\n  glGetUniformiv(computeProgram,loc,params);\n  worldPositionImageBinding=params.get(0);\n  loc=glGetUniformLocation(computeProgram,\"worldNormalImage\");\n  glGetUniformiv(computeProgram,loc,params);\n  worldNormalImageBinding=params.get(0);\n}"}
{"ids": "48139", "raw_code": "TSResponse(byte[] tsReply) throws IOException {\n  parse(tsReply);\n}"}
{"ids": "70787", "raw_code": "public static void executeCommand(ProcessBuilder p) throws IOException {\n  Process proc=p.start();\n  try (BufferedReader stdInput=new BufferedReader(new InputStreamReader(proc.getInputStream()));BufferedReader stdError=new BufferedReader(new InputStreamReader(proc.getErrorStream()))){\n    logger.info(\"Standard output of the command:\\n\");\n    String s;\n    while ((s=stdInput.readLine()) != null) {\n      logger.info(s);\n    }\n    logger.info(\"Standard error of the command (if any):\\n\");\n    while ((s=stdError.readLine()) != null) {\n      logger.info(s);\n    }\n  }\n }"}
{"ids": "65955", "raw_code": "public boolean pageSetupDialog(PrinterJob job){\n  PrintRequestAttributeSet prats=getPrintRequestAttributeSet();\n  PageFormat pf=job.pageDialog(prats);\n  setPrintRequestAttributeSet(prats);\n  return true;\n}"}
{"ids": "28413", "raw_code": "public static void assertNotEquals(BufferedImage image1,BufferedImage image2){\n  assertNotEquals(\"\",image1,image2);\n}"}
{"ids": "3762", "raw_code": "public Depend(PathImpl source,long digest,boolean requireSource){\n  this(source);\n  long newDigest=source.getCrc64();\n  _requireSource=requireSource;\n  if (newDigest == digest) {\n  }\n else   if (!requireSource && newDigest == 0) {\n  }\n else   if (newDigest == 0) {\n    if (log.isLoggable(Level.FINE))     log.fine(_source.getNativePath() + \" source is deleted.\");\n    _isDigestModified=true;\n  }\n else {\n    _isDigestModified=true;\n  }\n}"}
{"ids": "78779", "raw_code": "public static boolean stringToFile(final String data,final File targetFile,final boolean doAppend){\n  if (targetFile == null || !isWritable(targetFile,true)) {\n    Log.e(FileUtils.class,\"stringToFile(): File is null or cant make path dirs\");\n    return false;\n  }\n  boolean isSucceed=true;\n  try {\n    final FileWriter out=new FileWriter(targetFile,doAppend);\n    out.write(data);\n    out.flush();\n    out.close();\n  }\n catch (  IOException e) {\n    isSucceed=false;\n  }\n  return isSucceed;\n}"}
{"ids": "14659", "raw_code": "public void initialize(Map configParams) throws PolicyException {\n  if (configParams == null) {\n    throw (new PolicyException(ResBundleUtils.rbName,\"ldapusers_initialization_failed\",null,null));\n  }\n  String configuredLdapServer=(String)configParams.get(PolicyConfig.LDAP_SERVER);\n  if (configuredLdapServer == null) {\n    debug.error(\"LDAPUsers.initialize(): failed to get LDAP \" + \"server name. If you enter more than one server name \" + \"in the policy config service's Primary LDAP Server \"+ \"field, please make sure the ldap server name is preceded \"+ \"with the local server name.\");\n    throw (new PolicyException(ResBundleUtils.rbName,\"invalid_ldap_server_host\",null,null));\n  }\n  ldapServer=configuredLdapServer.toLowerCase();\n  localDS=PolicyUtils.isLocalDS(ldapServer);\n  aliasEnabled=Boolean.valueOf((String)configParams.get(PolicyConfig.USER_ALIAS_ENABLED));\n  String authid=(String)configParams.get(PolicyConfig.LDAP_BIND_DN);\n  String authpw=(String)configParams.get(PolicyConfig.LDAP_BIND_PASSWORD);\n  if (authpw != null) {\n    authpw=PolicyUtils.decrypt(authpw);\n  }\n  baseDN=(String)configParams.get(PolicyConfig.LDAP_USERS_BASE_DN);\n  userSearchFilter=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_FILTER);\n  String scope=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_SCOPE);\n  if (scope.equalsIgnoreCase(LDAP_SCOPE_BASE)) {\n    userSearchScope=SearchScope.BASE_OBJECT;\n  }\n else   if (scope.equalsIgnoreCase(LDAP_SCOPE_ONE)) {\n    userSearchScope=SearchScope.SINGLE_LEVEL;\n  }\n else {\n    userSearchScope=SearchScope.WHOLE_SUBTREE;\n  }\n  userRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_USER_SEARCH_ATTRIBUTE);\n  int minPoolSize;\n  int maxPoolSize;\n  try {\n    timeLimit=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_TIME_OUT));\n    maxResults=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_LIMIT));\n    minPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MIN_SIZE));\n    maxPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MAX_SIZE));\n  }\n catch (  NumberFormatException nfe) {\n    throw (new PolicyException(nfe));\n  }\n  boolean sslEnabled=Boolean.valueOf((String)configParams.get(PolicyConfig.LDAP_SSL_ENABLED));\n  Set orgNameSet=(Set)configParams.get(PolicyManager.ORGANIZATION_NAME);\n  if ((orgNameSet != null) && (!orgNameSet.isEmpty())) {\n    Iterator items=orgNameSet.iterator();\n    orgName=(String)items.next();\n  }\n  if (debug.messageEnabled()) {\n    debug.message(\"LDAPUsers.initialize(): getting params\" + \"\\nldapServer: \" + ldapServer + \"\\nauthid: \"+ authid+ \"\\nbaseDN: \"+ baseDN+ \"\\nuserSearchFilter: \"+ userSearchFilter+ \"\\nuserRDNAttrName: \"+ userRDNAttrName+ \"\\ntimeLimit: \"+ timeLimit+ \"\\nmaxResults: \"+ maxResults+ \"\\nminPoolSize: \"+ minPoolSize+ \"\\nmaxPoolSize: \"+ maxPoolSize+ \"\\nSSLEnabled: \"+ sslEnabled+ \"\\nOrgName: \"+ orgName);\n  }\n  LDAPConnectionPools.initConnectionPool(ldapServer,authid,authpw,sslEnabled,minPoolSize,maxPoolSize);\n  connPool=LDAPConnectionPools.getConnectionPool(ldapServer);\n  initialized=true;\n}"}
{"ids": "42520", "raw_code": "private static void readDNA(String filename){\n  try {\n    LineNumberReader in=new LineNumberReader(new FileReader(filename));\n    processOneLine(in,\"CompilationRates\",compilationRates);\n    processOneLine(in,\"SpeedupRates\",speedupRates);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    VM.sysFail(\"Failed to open controller DNA file\");\n  }\n}"}
{"ids": "8734", "raw_code": "Builder(URL swaggerUrl){\n  try {\n    this.swaggerLocation=swaggerUrl.toURI();\n  }\n catch (  URISyntaxException e) {\n    throw new IllegalArgumentException(\"swaggerURL is in a wrong format\",e);\n  }\n  this.swagger=readSwagger(swaggerUrl.toString());\n}"}
{"ids": "23467", "raw_code": "@Override public void onSaveInstanceState(@NonNull Bundle savedInstanceState){\n  savedInstanceState.putParcelable(LOCATION_KEY,currentLocation);\n  if (lastLocationUpdateTime != null) {\n    savedInstanceState.putLong(LAST_LOCATION_UPDATE_TIME_STRING_KEY,lastLocationUpdateTime.getTime());\n  }\n  if (lastWifiScanTime != null) {\n    savedInstanceState.putLong(LAST_WIFI_SCAN_TIME_STRING_KEY,lastWifiScanTime.getTime());\n  }\n  savedInstanceState.putBoolean(LOGGING_ENABLED_KEY,loggingEnabled);\n  super.onSaveInstanceState(savedInstanceState);\n}"}
{"ids": "42059", "raw_code": "public static String removeEmptyLines(String text){\n  text=text.replaceAll(\"^[ \" + ChineseLanguageConstants.SPACE[0] + \"\\t\\u000B\\u000C\\u00A0\\uE5F1\\r\\n]*\\n\",\"\");\n  text=text.replaceAll(\"[\\r\\n][ \" + ChineseLanguageConstants.SPACE[0] + \"\\t\\u000B\\u000C\\u00A0\\uE5F1\\r\\n]*\\n\",\"\\n\");\n  return text;\n}"}
{"ids": "67022", "raw_code": "public void keepOnly(Set<IVarAbstraction> usefulPointers){\n  Set<IVarAbstraction> reps=new HashSet<IVarAbstraction>();\n  for (  IVarAbstraction pn : usefulPointers) {\n    reps.add(pn.getRepresentative());\n  }\n  usefulPointers.addAll(reps);\n  reps=null;\n  for (  IVarAbstraction pn : pointers) {\n    if (!usefulPointers.contains(pn))     pn.deleteAll();\n  }\n  System.gc();\n}"}
{"ids": "49824", "raw_code": "public static String encryptCFB(final byte[] concatenatedHashValue,final Long turnoverCounter,final SecretKey symmetricKey,int turnOverCounterLengthInBytes) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {\n  final ByteBuffer byteBufferIV=ByteBuffer.allocate(16);\n  byteBufferIV.put(concatenatedHashValue);\n  final byte[] IV=byteBufferIV.array();\n  final ByteBuffer byteBufferData=ByteBuffer.allocate(16);\n  byteBufferData.putLong(turnoverCounter);\n  final byte[] data=byteBufferData.array();\n  byte[] turnOverCounterByteRep=get2ComplementRepForLong(turnoverCounter,turnOverCounterLengthInBytes);\n  System.arraycopy(turnOverCounterByteRep,0,data,0,turnOverCounterByteRep.length);\n  final IvParameterSpec ivSpec=new IvParameterSpec(IV);\n  final Cipher cipher=Cipher.getInstance(\"AES/CFB/NoPadding\",\"BC\");\n  cipher.init(Cipher.ENCRYPT_MODE,symmetricKey,ivSpec);\n  final byte[] encryptedTurnOverValueComplete=cipher.doFinal(data);\n  final byte[] encryptedTurnOverValue=new byte[turnOverCounterLengthInBytes];\n  System.arraycopy(encryptedTurnOverValueComplete,0,encryptedTurnOverValue,0,turnOverCounterLengthInBytes);\n  final String base64EncryptedTurnOverValue=CashBoxUtils.base64Encode(encryptedTurnOverValue,false);\n  return base64EncryptedTurnOverValue;\n}"}
{"ids": "14412", "raw_code": "public void resetLockoutAttempts(String userDN,AMIdentity amIdentity,AccountLockoutInfo acInfo,boolean resetDuration){\n  debug.message(\"entering ISAccountLockout.resetLockoutAttempts\");\n  if (debug.messageEnabled()) {\n    debug.message(\"ISAccountLockout.resetLockoutAttempts:: \" + \"resetDuration =\" + resetDuration);\n  }\n  int fail_count=0;\n  long lastFailTime=0;\n  long locked_out_at=0;\n  long actualLockoutDuration=failureLockoutDuration;\n  long currentLockoutDuration=acInfo.getActualLockoutDuration();\n  if (acInfo != null) {\n    fail_count=acInfo.getFailCount();\n    lastFailTime=acInfo.getLastFailTime();\n    locked_out_at=acInfo.getLockoutAt();\n    long now=currentTimeMillis();\n    if (!resetDuration) {\n      actualLockoutDuration=currentLockoutDuration;\n      if (debug.messageEnabled()) {\n        debug.message(\"ISAccountLockout.resetLockoutAttempts::\" + \"Locked out At =\" + locked_out_at);\n      }\n      if (locked_out_at > 0) {\n        if (debug.messageEnabled()) {\n          debug.message(\"ISAccountLockout.resetLockoutAttempts::\" + \" Using the multiplier\");\n        }\n        actualLockoutDuration=failureLockoutMultiplier * (currentLockoutDuration);\n      }\n    }\n  }\n  if (storeInvalidAttemptsInDS) {\n    try {\n      if ((fail_count != 0) || (lastFailTime != 0) || (locked_out_at != 0)|| (actualLockoutDuration != currentLockoutDuration)) {\n        Map attrMap=new HashMap();\n        Set invalidAttempts=new HashSet();\n        String invalidXML=createInvalidAttemptsXML(0,0,0,actualLockoutDuration);\n        invalidAttempts.add(invalidXML);\n        attrMap.put(invalidAttemptsDataAttrName,invalidAttempts);\n        setLockoutObjectClass(amIdentity);\n        amIdentity.setAttributes(attrMap);\n        debug.message(\"Saving XML = \" + invalidXML);\n        amIdentity.store();\n      }\n      debug.message(\"ISAccountLockout::resetLockoutAttempts done\");\n    }\n catch (    Exception exp) {\n      debug.message(\"error reseting Lockout Attempts\");\n    }\n  }\n  acInfo.setFailCount(0);\n  acInfo.setLastFailTime(0);\n  acInfo.setLockoutAt(0);\n  acInfo.setLockout(false);\n  acInfo.setActualLockoutDuration(actualLockoutDuration);\n}"}
{"ids": "8830", "raw_code": "String publicNameFromDiskName(String diskName){\n  if (!shouldDiskNameBeVisible(diskName)) {\n    throw new IllegalArgumentException(\"disk file should not be visible: \" + diskName);\n  }\n  return diskName.substring(mFilePrefix.length(),diskName.length());\n}"}
{"ids": "78715", "raw_code": "public double[] predict(FVec feat){\n  return predict(feat,false);\n}"}
{"ids": "86694", "raw_code": "public static <A>A[] append(final A[] a,final A[] b){\n  final int alen=a.length;\n  final int blen=b.length;\n  final A[] res=Arrays.copyOf(a,alen + blen);\n  System.arraycopy(b,0,res,alen,blen);\n  return res;\n}"}
{"ids": "60475", "raw_code": "public boolean addListener(@NotNull SoftWrapAwareDocumentParsingListener listener){\n  return myListeners.add(listener);\n}"}
{"ids": "25736", "raw_code": "private void assertArrayEquals(double[] expected,double[] actual,double delta,boolean checkNaN){\n  Assert.assertEquals(expected.length,actual.length);\n  for (int index=0; index < actual.length; index++) {\n    double d1=expected[index];\n    double d2=actual[index];\n    if (Double.isNaN(d1) || Double.isNaN(d2)) {\n      if (checkNaN) {\n        Assert.assertTrue(Double.isNaN(d1) == Double.isNaN(d2));\n      }\n      Assert.assertTrue(true);\n    }\n else {\n      Assert.assertEquals(d1,d2,delta);\n    }\n  }\n}"}
{"ids": "26765", "raw_code": "protected void addToPopulation(Solution newSolution){\n  List<Integer> dominates=new ArrayList<Integer>();\n  boolean dominated=false;\n  for (int i=0; i < population.size(); i++) {\n    int flag=dominanceComparator.compare(newSolution,population.get(i));\n    if (flag < 0) {\n      dominates.add(i);\n    }\n else     if (flag > 0) {\n      dominated=true;\n    }\n  }\n  if (!dominates.isEmpty()) {\n    population.remove(dominates.get(PRNG.nextInt(dominates.size())));\n    population.add(newSolution);\n  }\n else   if (!dominated) {\n    population.remove(PRNG.nextInt(population.size()));\n    population.add(newSolution);\n  }\n}"}
{"ids": "55997", "raw_code": "public void updateMaxTextWidths(float requiredWidth,float matchContentsWidth){\n  mMaxRequiredWidth=Math.max(mMaxRequiredWidth,requiredWidth);\n  mMaxMatchContentsWidth=Math.max(mMaxMatchContentsWidth,matchContentsWidth);\n}"}
{"ids": "55028", "raw_code": "private String generateBlendModeImport(BlendMode blendMode){\n  if (blendMode == BlendMode.COLOR)   return \"import mx.graphics.shaderClasses.ColorShader;\\n\\n\";\n else   if (blendMode == BlendMode.COLORBURN)   return \"import mx.graphics.shaderClasses.ColorBurnShader;\\n\\n\";\n else   if (blendMode == BlendMode.COLORDODGE)   return \"import mx.graphics.shaderClasses.ColorDodgeShader;\\n\\n\";\n else   if (blendMode == BlendMode.EXCLUSION)   return \"import mx.graphics.shaderClasses.ExclusionShader;\\n\\n\";\n else   if (blendMode == BlendMode.HUE)   return \"import mx.graphics.shaderClasses.HueShader;\\n\\n\";\n else   if (blendMode == BlendMode.LUMINOSITY)   return \"import mx.graphics.shaderClasses.LuminosityShader;\\n\\n\";\n else   if (blendMode == BlendMode.SATURATION)   return \"import mx.graphics.shaderClasses.SaturationShader;\\n\\n\";\n else   if (blendMode == BlendMode.SOFTLIGHT)   return \"import mx.graphics.shaderClasses.SoftLightShader;\\n\\n\";\n else   return null;\n}"}
{"ids": "14220", "raw_code": "public SmAuthStatus query(String parameter,String secret,SmAuthQueryCode request,SmAuthQueryResponse response){\n  if (null == response) {\n    return SmAuthStatus.SMAUTH_FAILURE;\n  }\n  if (SmAuthQueryCode.SMAUTH_QUERY_DESCRIPTION == request) {\n    response.setResponseBuffer(SCHEME_DESCRIPTION);\n    response.setResponseCode(SCHEME_VERSION);\n  }\n else   if (SmAuthQueryCode.SMAUTH_QUERY_CREDENTIALS_REQ == request) {\n    response.setResponseCode(SmAuthQueryResponse.SMAUTH_CRED_BASIC);\n  }\n else {\n    return SmAuthStatus.SMAUTH_FAILURE;\n  }\n  return SmAuthStatus.SMAUTH_SUCCESS;\n}"}
{"ids": "5177", "raw_code": "protected void addAllTransitiveJars(WarArchiveMerger wam) throws MojoExecutionException {\n  DependencyCalculator dc=new DependencyCalculator(artifactFactory,resolver,localRepository,remoteRepositories,mavenProject,mavenProjectBuilder,installer,container);\n  try {\n    for (    File f : dc.execute()) {\n      wam.addMergeItem(f);\n    }\n  }\n catch (  Exception ex) {\n    throw new MojoExecutionException(\"Problem merging dependent JAR files\",ex);\n  }\n}"}
{"ids": "16959", "raw_code": "private void add(int col,GraphicalNode graphicalNode){\n  myGraphicalNodes.remove(graphicalNode);\n  if (nbCols - 1 < col) {\n    nbCols=col + 1;\n  }\n  int row=0;\n  while (isOccupied(row,col)) {\n    row++;\n  }\n  graphicalNode.row=row;\n  graphicalNode.col=col;\n  myGraphicalNodes.add(graphicalNode);\n}"}
{"ids": "25547", "raw_code": "private int addTonalComponents(float[] spectrum,int numComponents,TonalComponent[] components){\n  int lastPos=-1;\n  for (int i=0; i < numComponents; i++) {\n    lastPos=Math.max(components[i].pos + components[i].numCoefs,lastPos);\n    for (int j=0; j < components[i].numCoefs; j++) {\n      spectrum[components[i].pos + j]+=components[i].coef[j];\n    }\n  }\n  return lastPos;\n}"}
{"ids": "20246", "raw_code": "public static List<UserLayer> extractUserLayers(StyledLayerDescriptor sld){\n  List<UserLayer> userLayerList=new ArrayList<UserLayer>();\n  if (sld != null) {\n    for (    StyledLayer layer : sld.layers()) {\n      if (layer instanceof UserLayer) {\n        UserLayer userLayer=(UserLayer)layer;\n        userLayerList.add(userLayer);\n      }\n    }\n  }\n  return userLayerList;\n}"}
{"ids": "31923", "raw_code": "public static void closeQuiet(@Nullable Selector rsrc){\n  if (rsrc != null)   try {\n    if (rsrc.isOpen())     rsrc.close();\n  }\n catch (  IOException ignored) {\n  }\n}"}
{"ids": "83554", "raw_code": "private LinkedList<Diff> diff_main(String text1,String text2,boolean checklines,long deadline){\n  if (text1 == null || text2 == null) {\n    throw new IllegalArgumentException(\"Null inputs. (diff_main)\");\n  }\n  LinkedList<Diff> diffs;\n  if (text1.equals(text2)) {\n    diffs=new LinkedList<Diff>();\n    if (text1.length() != 0) {\n      diffs.add(new Diff(Operation.EQUAL,text1));\n    }\n    return diffs;\n  }\n  int commonlength=diff_commonPrefix(text1,text2);\n  String commonprefix=text1.substring(0,commonlength);\n  text1=text1.substring(commonlength);\n  text2=text2.substring(commonlength);\n  commonlength=diff_commonSuffix(text1,text2);\n  String commonsuffix=text1.substring(text1.length() - commonlength);\n  text1=text1.substring(0,text1.length() - commonlength);\n  text2=text2.substring(0,text2.length() - commonlength);\n  diffs=diff_compute(text1,text2,checklines,deadline);\n  if (commonprefix.length() != 0) {\n    diffs.addFirst(new Diff(Operation.EQUAL,commonprefix));\n  }\n  if (commonsuffix.length() != 0) {\n    diffs.addLast(new Diff(Operation.EQUAL,commonsuffix));\n  }\n  diff_cleanupMerge(diffs);\n  return diffs;\n}"}
{"ids": "79004", "raw_code": "public static boolean createCompactionRequiredFile(String metaFolderPath,CompactionType compactionType){\n  String statusFile;\n  if (compactionType.equals(CompactionType.MINOR_COMPACTION)) {\n    statusFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.minorCompactionRequiredFile;\n  }\n else {\n    statusFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.majorCompactionRequiredFile;\n  }\n  try {\n    if (!FileFactory.isFileExist(statusFile,FileFactory.getFileType(statusFile))) {\n      if (FileFactory.createNewFile(statusFile,FileFactory.getFileType(statusFile))) {\n        LOGGER.info(\"successfully created a compaction required file - \" + statusFile);\n        return true;\n      }\n else {\n        LOGGER.error(\"Not able to create a compaction required file - \" + statusFile);\n        return false;\n      }\n    }\n else {\n      LOGGER.info(\"Compaction request file : \" + statusFile + \" already exist.\");\n    }\n  }\n catch (  IOException e) {\n    LOGGER.error(\"Exception in creating the compaction request file \" + e.getMessage());\n  }\n  return false;\n}"}
{"ids": "46020", "raw_code": "private boolean allowNotificationEmission(ObjectName name,TargetedNotification tn){\n  try {\n    if (checkNotificationEmission) {\n      checkMBeanPermission(name,\"addNotificationListener\");\n    }\n    if (notificationAccessController != null) {\n      notificationAccessController.fetchNotification(connectionId,name,tn.getNotification(),getSubject());\n    }\n    return true;\n  }\n catch (  SecurityException e) {\n    if (logger.debugOn()) {\n      logger.debug(\"fetchNotifs\",\"Notification \" + tn.getNotification() + \" not forwarded: the \"+ \"caller didn't have the required access rights\");\n    }\n    return false;\n  }\ncatch (  Exception e) {\n    if (logger.debugOn()) {\n      logger.debug(\"fetchNotifs\",\"Notification \" + tn.getNotification() + \" not forwarded: \"+ \"got an unexpected exception: \"+ e);\n    }\n    return false;\n  }\n}"}
{"ids": "2847", "raw_code": "public void updateThroughput(long currentTime){\n  throughputCalculationLock.lock();\n  try {\n    int interval=(int)(currentTime - lastThroughputCalculationTime);\n    long minInterval=getThroughputCalculationIntervalInMillis();\n    if ((minInterval == 0) || (interval < minInterval)) {\n      return;\n    }\n    long readBytes=this.readBytes;\n    long writtenBytes=this.writtenBytes;\n    long readMessages=this.readMessages;\n    long writtenMessages=this.writtenMessages;\n    readBytesThroughput=(readBytes - lastReadBytes) * 1000.0 / interval;\n    writtenBytesThroughput=(writtenBytes - lastWrittenBytes) * 1000.0 / interval;\n    readMessagesThroughput=(readMessages - lastReadMessages) * 1000.0 / interval;\n    writtenMessagesThroughput=(writtenMessages - lastWrittenMessages) * 1000.0 / interval;\n    if (readBytesThroughput > largestReadBytesThroughput) {\n      largestReadBytesThroughput=readBytesThroughput;\n    }\n    if (writtenBytesThroughput > largestWrittenBytesThroughput) {\n      largestWrittenBytesThroughput=writtenBytesThroughput;\n    }\n    if (readMessagesThroughput > largestReadMessagesThroughput) {\n      largestReadMessagesThroughput=readMessagesThroughput;\n    }\n    if (writtenMessagesThroughput > largestWrittenMessagesThroughput) {\n      largestWrittenMessagesThroughput=writtenMessagesThroughput;\n    }\n    lastReadBytes=readBytes;\n    lastWrittenBytes=writtenBytes;\n    lastReadMessages=readMessages;\n    lastWrittenMessages=writtenMessages;\n    lastThroughputCalculationTime=currentTime;\n  }\n  finally {\n    throughputCalculationLock.unlock();\n  }\n}"}
{"ids": "85242", "raw_code": "public List<VerificationOK> verify(X509Certificate signCert,X509Certificate issuerCert,Date signDate) throws GeneralSecurityException, IOException {\n  RootStoreVerifier rootStoreVerifier=new RootStoreVerifier(verifier);\n  rootStoreVerifier.setRootStore(rootStore);\n  CRLVerifier crlVerifier=new CRLVerifier(rootStoreVerifier,getCRLsFromDSS());\n  crlVerifier.setRootStore(rootStore);\n  crlVerifier.setOnlineCheckingAllowed(latestRevision || onlineCheckingAllowed);\n  OCSPVerifier ocspVerifier=new OCSPVerifier(crlVerifier,getOCSPResponsesFromDSS());\n  ocspVerifier.setRootStore(rootStore);\n  ocspVerifier.setOnlineCheckingAllowed(latestRevision || onlineCheckingAllowed);\n  return ocspVerifier.verify(signCert,issuerCert,signDate);\n}"}
{"ids": "8331", "raw_code": "public void println(){\n  if (addNewlines) {\n    try {\n      out.write(\"\\n\");\n    }\n catch (    IOException ioe) {\n      throw new GroovyRuntimeException(ioe);\n    }\n  }\n}"}
{"ids": "42812", "raw_code": "public void deliveryComplete(final IMqttDeliveryToken token){\n  logger.trace(\"Delivery complete for {}\",token.getMessageId());\n}"}
{"ids": "9803", "raw_code": "public DExportPublicKeyOpenSsl(JFrame parent,String entryAlias){\n  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);\n  this.entryAlias=entryAlias;\n  initComponents();\n}"}
{"ids": "84378", "raw_code": "public static String escapeUnicode(String s){\n  int len=s.length();\n  int i=0;\n  while (i < len) {\n    char ch=s.charAt(i);\n    if (ch > 255) {\n      StringBuilder buf=new StringBuilder();\n      buf.append(s.substring(0,i));\n      while (i < len) {\n        ch=s.charAt(i);\n        if (ch > 255) {\n          buf.append(\"\\\\u\");\n          buf.append(Character.forDigit((ch >> 12) % 16,16));\n          buf.append(Character.forDigit((ch >> 8) % 16,16));\n          buf.append(Character.forDigit((ch >> 4) % 16,16));\n          buf.append(Character.forDigit((ch) % 16,16));\n        }\n else {\n          buf.append(ch);\n        }\n        i++;\n      }\n      s=buf.toString();\n    }\n else {\n      i++;\n    }\n  }\n  return s;\n}"}
{"ids": "82064", "raw_code": "public void keyPressed(final int keyCode){\n  if (impl.getCurrentForm() == null) {\n    return;\n  }\n  addSingleArgumentEvent(KEY_PRESSED,keyCode);\n  lastInteractionWasKeypad=lastInteractionWasKeypad || (keyCode != MenuBar.leftSK && keyCode != MenuBar.clearSK && keyCode != MenuBar.backSK);\n  keyRepeatCharged=(keyCode >= 0 || getGameAction(keyCode) > 0) || keyCode == impl.getClearKeyCode();\n  longPressCharged=keyRepeatCharged;\n  longKeyPressTime=System.currentTimeMillis();\n  keyRepeatValue=keyCode;\n  nextKeyRepeatEvent=System.currentTimeMillis() + keyRepeatInitialIntervalTime;\n  previousKeyPressed=lastKeyPressed;\n  lastKeyPressed=keyCode;\n}"}
{"ids": "77934", "raw_code": "public boolean isEmpty(){\n  return filter.isEmpty() && query.isEmpty() && sort.isEmpty();\n}"}
{"ids": "49904", "raw_code": "public void registerInput(String varName,JavaRDD<String> rddIn,String format,long rlen,long clen,FileFormatProperties props,List<ValueType> schema) throws DMLRuntimeException {\n  if (!(DMLScript.rtplatform == RUNTIME_PLATFORM.SPARK || DMLScript.rtplatform == RUNTIME_PLATFORM.HYBRID_SPARK)) {\n    throw new DMLRuntimeException(\"The registerInput functionality only supported for spark runtime. Please use MLContext(sc) instead of default constructor.\");\n  }\n  long nnz=-1;\n  if (_variables == null)   _variables=new LocalVariableMap();\n  if (_inVarnames == null)   _inVarnames=new ArrayList<String>();\n  JavaPairRDD<LongWritable,Text> rddText=rddIn.mapToPair(new ConvertStringToLongTextPair());\n  int blksz=ConfigurationManager.getBlocksize();\n  MatrixCharacteristics mc=new MatrixCharacteristics(rlen,clen,blksz,blksz,nnz);\n  FrameObject fo=null;\n  if (format.equals(\"csv\")) {\n    CSVFileFormatProperties csvprops=(props != null) ? (CSVFileFormatProperties)props : new CSVFileFormatProperties();\n    fo=new FrameObject(OptimizerUtils.getUniqueTempFileName(),new MatrixFormatMetaData(mc,OutputInfo.CSVOutputInfo,InputInfo.CSVInputInfo));\n    fo.setFileFormatProperties(csvprops);\n  }\n else   if (format.equals(\"text\")) {\n    if (rlen == -1 || clen == -1) {\n      throw new DMLRuntimeException(\"The metadata is required in registerInput for format:\" + format);\n    }\n    fo=new FrameObject(null,new MatrixFormatMetaData(mc,OutputInfo.TextCellOutputInfo,InputInfo.TextCellInputInfo));\n  }\n else {\n    throw new DMLRuntimeException(\"Incorrect format in registerInput: \" + format);\n  }\n  if (props != null)   fo.setFileFormatProperties(props);\n  fo.setRDDHandle(new RDDObject(rddText,varName));\n  fo.setSchema(\"String\");\n  _variables.put(varName,fo);\n  _inVarnames.add(varName);\n  checkIfRegisteringInputAllowed();\n}"}
{"ids": "18163", "raw_code": "public void checkNumberArgs(int argNum) throws WrongNumberArgsException {\n  if (argNum < 2)   reportWrongNumberArgs();\n}"}
{"ids": "81051", "raw_code": "public static String fixLineFeeds(String sql){\n  if (sql.indexOf('\\r') == -1) {\n    return sql;\n  }\n  boolean hasFixes=false;\n  char[] fixed=sql.toCharArray();\n  for (int i=0; i < fixed.length; i++) {\n    if (fixed[i] == '\\r' && (i == fixed.length - 1 || fixed[i + 1] != '\\n')) {\n      fixed[i]='\\n';\n      hasFixes=true;\n    }\n  }\n  return hasFixes ? String.valueOf(fixed) : sql;\n}"}
{"ids": "1323", "raw_code": "public static String mergePath(String current,String realPath) throws MalformedURLException {\n  String currDir;\n  if (current == null || current.indexOf('/') == -1)   currDir=\"/\";\n else   if (current.endsWith(\"/\"))   currDir=current;\n else   currDir=current.substring(0,current.lastIndexOf('/') + 1);\n  String path;\n  if (realPath.startsWith(\"./\"))   path=currDir + realPath.substring(2);\n else   if (realPath.startsWith(\"/\"))   path=realPath;\n else   if (!realPath.startsWith(\"../\"))   path=currDir + realPath;\n else {\n    while (realPath.startsWith(\"../\") || currDir.length() == 0) {\n      realPath=realPath.substring(3);\n      currDir=currDir.substring(0,currDir.length() - 1);\n      int index=currDir.lastIndexOf('/');\n      if (index == -1)       throw new MalformedURLException(\"invalid realpath definition for URL\");\n      currDir=currDir.substring(0,index + 1);\n    }\n    path=currDir + realPath;\n  }\n  return path;\n}"}
{"ids": "8487", "raw_code": "public void rollback() throws SQLException {\n  if (useConnection == null) {\n    LOG.info(\"Rollback operation not supported when using datasets unless using withTransaction or cacheConnection - attempt to rollback ignored\");\n    return;\n  }\n  try {\n    useConnection.rollback();\n  }\n catch (  SQLException e) {\n    LOG.warning(\"Caught exception rolling back connection: \" + e.getMessage());\n    throw e;\n  }\n}"}
{"ids": "84249", "raw_code": "public byte[] toByteArray(){\n  if (headerNonce_ == null || headerTag_ == null) {\n    throw new AwsCryptoException(\"Header nonce and tag cannot be null.\");\n  }\n  final byte[] serializedFields=serializeAuthenticatedFields();\n  final int outLen=serializedFields.length + headerNonce_.length + headerTag_.length;\n  final ByteBuffer serializedBytes=ByteBuffer.allocate(outLen);\n  serializedBytes.put(serializedFields);\n  serializedBytes.put(headerNonce_);\n  serializedBytes.put(headerTag_);\n  return serializedBytes.array();\n}"}
{"ids": "869", "raw_code": "public boolean containsKey(Object key){\n  return context.getAttribute((String)key) != null;\n}"}
{"ids": "41493", "raw_code": "private void updateLimit(int limit){\n  currentCycle.setLimit(limit);\n  updatePlanCycles();\n  confirmUpdate.setTextColor(resources.getColor(R.color.light_gray));\n}"}
{"ids": "13506", "raw_code": "@SuppressWarnings(\"unchecked\") public Set<S> descendants(){\n  Set<S> perms=new HashSet<>();\n  for (  S child : children) {\n    perms.add(child);\n    perms.addAll(child.descendants());\n  }\n  return perms;\n}"}
{"ids": "82896", "raw_code": "private String extractUrl(String sharedUrl){\n  String finalUrl;\n  finalUrl=sharedUrl.trim();\n  String[] possible_urls=finalUrl.split(\" \");\n  for (  String url : possible_urls) {\n    if (NetworkManager.isUrl(url)) {\n      finalUrl=url;\n      break;\n    }\n  }\n  finalUrl=finalUrl.substring(finalUrl.lastIndexOf(\" \") + 1);\n  finalUrl=finalUrl.substring(finalUrl.lastIndexOf(\"\\n\") + 1);\n  if (NetworkManager.isUrl(\"http://\" + finalUrl) && !NetworkManager.isUrl(finalUrl)) {\n    finalUrl=\"http://\" + finalUrl;\n  }\n  if (finalUrl.contains(\"&utm_source=\")) {\n    finalUrl=finalUrl.substring(0,finalUrl.indexOf(\"&utm_source=\"));\n  }\n  if (finalUrl.contains(\"?utm_source=\")) {\n    finalUrl=finalUrl.substring(0,finalUrl.indexOf(\"?utm_source=\"));\n  }\n  if (finalUrl.contains(\"#xtor=RSS-\")) {\n    finalUrl=finalUrl.substring(0,finalUrl.indexOf(\"#xtor=RSS-\"));\n  }\n  return finalUrl;\n}"}
{"ids": "15285", "raw_code": "public Set entrySet(){\n  return map.entrySet();\n}"}
{"ids": "39845", "raw_code": "public static String encode(String input){\n  return Base64.encodeBase64String(input.getBytes(StandardCharsets.UTF_8));\n}"}
{"ids": "77724", "raw_code": "public void addSplit(String splitLabel){\n  if (mDisabled)   return;\n  long now=SystemClock.elapsedRealtime();\n  mSplits.add(now);\n  mSplitLabels.add(splitLabel);\n}"}
{"ids": "39834", "raw_code": "protected String encode(final String value){\n  try {\n    return URLEncoder.encode(value,\"UTF-8\");\n  }\n catch (  Exception exp) {\n    return value;\n  }\n}"}
{"ids": "48979", "raw_code": "private void checkConnectPermission() throws SecurityException {\n  SecurityManager security=System.getSecurityManager();\n  if (security == null)   return;\n  if (security != cacheSecurityManager) {\n    okContext=null;\n    authcache=new WeakHashMap<AccessControlContext,Reference<AccessControlContext>>();\n    cacheSecurityManager=security;\n  }\n  AccessControlContext ctx=AccessController.getContext();\n  if (okContext == null || !(okContext.equals(ctx) || authcache.containsKey(ctx))) {\n    security.checkConnect(ep.getHost(),ep.getPort());\n    authcache.put(ctx,new SoftReference<AccessControlContext>(ctx));\n  }\n  okContext=ctx;\n}"}
{"ids": "61586", "raw_code": "private boolean conditionL0(String value,int index){\n  if (index == value.length() - 3 && contains(value,index - 1,4,\"ILLO\",\"ILLA\",\"ALLE\")) {\n    return true;\n  }\n else   if ((contains(value,index - 1,2,\"AS\",\"OS\") || contains(value,value.length() - 1,1,\"A\",\"O\")) && contains(value,index - 1,4,\"ALLE\")) {\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "75837", "raw_code": "public static PaginationContext fromContext(RoutingContext context){\n  HttpServerRequest request=context.request();\n  String pageStr=request.getParam(PaginationContext.CURRENT_PAGE_QUERY_PARAM);\n  String perPageStr=request.getParam(PaginationContext.PER_PAGE_QUERY_PARAM);\n  Integer page=null;\n  Integer perPage=null;\n  try {\n    if (pageStr != null) {\n      page=Integer.parseInt(pageStr);\n    }\n    if (perPageStr != null) {\n      perPage=Integer.parseInt(perPageStr);\n    }\n  }\n catch (  NumberFormatException e) {\n    DefaultErrorHandler.badRequest(context,\"Invalid pagination parameters : expecting integers\");\n  }\n  if (perPage != null && perPage > PaginationContext.MAX_PER_PAGE) {\n    DefaultErrorHandler.badRequest(context,\"Invalid \" + PaginationContext.PER_PAGE_QUERY_PARAM + \" parameter, max is \"+ PaginationContext.MAX_PER_PAGE);\n  }\n  return new PaginationContext(page,perPage);\n}"}
{"ids": "34628", "raw_code": "private void updateDataTypeState(){\n  boolean isSyncEnabled=mSyncSwitchPreference.isChecked();\n  boolean syncEverything=mSyncEverything.isChecked();\n  boolean passwordSyncConfigurable=mProfileSyncService.isBackendInitialized() && mProfileSyncService.isCryptographerReady();\n  for (  CheckBoxPreference pref : mAllTypes) {\n    boolean canSyncType=pref != mSyncPasswords || passwordSyncConfigurable;\n    if (!isSyncEnabled) {\n      pref.setChecked(true);\n    }\n else     if (syncEverything) {\n      pref.setChecked(canSyncType);\n    }\n    pref.setEnabled(isSyncEnabled && !syncEverything && canSyncType);\n  }\n  if (isSyncEnabled && !syncEverything) {\n    Set<Integer> syncTypes=mProfileSyncService.getPreferredDataTypes();\n    mSyncAutofill.setChecked(syncTypes.contains(ModelType.AUTOFILL));\n    mSyncBookmarks.setChecked(syncTypes.contains(ModelType.BOOKMARKS));\n    mSyncOmnibox.setChecked(syncTypes.contains(ModelType.TYPED_URLS));\n    mSyncPasswords.setChecked(passwordSyncConfigurable && syncTypes.contains(ModelType.PASSWORDS));\n    mSyncRecentTabs.setChecked(syncTypes.contains(ModelType.PROXY_TABS));\n    mSyncSettings.setChecked(syncTypes.contains(ModelType.PRIORITY_PREFERENCES));\n  }\n}"}
{"ids": "4277", "raw_code": "public static void writeProteinBestMatchesToFile(String filePath,Map<String,PIRSFHmmer2RawMatch> proteinIdBestMatchMap) throws IOException {\n  BufferedWriter writer=null;\n  try {\n    File file=createTmpFile(filePath);\n    if (!file.exists()) {\n      throw new IllegalStateException(\"Could not create file: \" + filePath);\n    }\n    writer=new BufferedWriter(new FileWriter(file));\n    for (    String proteinId : proteinIdBestMatchMap.keySet()) {\n      PIRSFHmmer2RawMatch bestMatch=proteinIdBestMatchMap.get(proteinId);\n      if (bestMatch != null) {\n        writer.write(proteinId);\n        writer.write('-');\n        writer.write(bestMatch.getModelId());\n        writer.write(',');\n        writer.write(bestMatch.getSignatureLibraryRelease());\n        writer.write(',');\n        writer.write(String.valueOf(bestMatch.getLocationStart()));\n        writer.write(',');\n        writer.write(String.valueOf(bestMatch.getLocationEnd()));\n        writer.write(',');\n        writer.write(String.valueOf(bestMatch.getEvalue()));\n        writer.write(',');\n        writer.write(String.valueOf(bestMatch.getScore()));\n        writer.write(',');\n        writer.write(String.valueOf(bestMatch.getHmmStart()));\n        writer.write(',');\n        writer.write(String.valueOf(bestMatch.getHmmEnd()));\n        writer.write(',');\n        writer.write(bestMatch.getHmmBounds());\n        writer.write(',');\n        writer.write(String.valueOf(bestMatch.getLocationEvalue()));\n        writer.write(',');\n        writer.write(String.valueOf(bestMatch.getLocationScore()));\n        writer.write('\\n');\n      }\n    }\n  }\n  finally {\n    if (writer != null) {\n      writer.close();\n    }\n  }\n}"}
{"ids": "37762", "raw_code": "public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(2);\n  newVector.addElement(new Option(\"\\tNumber of iterations.\\n\" + \"\\t(default 10)\",\"I\",1,\"-I <num>\"));\n  newVector.addAll(Collections.list(super.listOptions()));\n  return newVector.elements();\n}"}
{"ids": "80707", "raw_code": "void refreshUI(String xml,DOMTree m_tree){\n  if ((xml == null) || xml.equals(\"\")) {\n    setErrorMessage(\"Error\",\"No input XML  specified \\n\");\n    return;\n  }\n  final Document newRoot=getRoot(xml);\n  if (newRoot == null) {\n    setErrorMessage(\"Error\",\"Unable to get new DOM Tree \\n\");\n    return;\n  }\n  m_tree.setDocument(newRoot);\n}"}
{"ids": "21362", "raw_code": "private void cleanupProtectionSetVolumes(ProtectionSet protectionSet,List<String> volumeIDs,boolean markProtectionSetForDeletion){\n  if (protectionSet != null) {\n    _log.info(\"Removing the following volumes from protection set {}: {}\",protectionSet.getLabel(),volumeIDs.toString());\n    StringSet psetVolumes=protectionSet.getVolumes();\n    psetVolumes.removeAll(volumeIDs);\n    protectionSet.setVolumes(psetVolumes);\n    if (markProtectionSetForDeletion) {\n      protectionSet.setInactive(true);\n    }\n    _dbClient.updateObject(protectionSet);\n  }\n}"}
{"ids": "37878", "raw_code": "private static Normalization determineNormalization(Element model){\n  Normalization normMethod=Normalization.NONE;\n  String normName=model.getAttribute(\"normalizationMethod\");\n  if (normName.equals(\"simplemax\")) {\n    normMethod=Normalization.SIMPLEMAX;\n  }\n else   if (normName.equals(\"softmax\")) {\n    normMethod=Normalization.SOFTMAX;\n  }\n else   if (normName.equals(\"logit\")) {\n    normMethod=Normalization.LOGIT;\n  }\n else   if (normName.equals(\"probit\")) {\n    normMethod=Normalization.PROBIT;\n  }\n else   if (normName.equals(\"cloglog\")) {\n    normMethod=Normalization.CLOGLOG;\n  }\n else   if (normName.equals(\"exp\")) {\n    normMethod=Normalization.EXP;\n  }\n else   if (normName.equals(\"loglog\")) {\n    normMethod=Normalization.LOGLOG;\n  }\n else   if (normName.equals(\"cauchit\")) {\n    normMethod=Normalization.CAUCHIT;\n  }\n  return normMethod;\n}"}
{"ids": "42347", "raw_code": "Operand pop(Register s){\n  Stack<Operand> stack=get(s);\n  if (stack == null) {\n    throw new OptimizingCompilerException(\"Failure in translating out of SSA form: trying to pop operand from non-existant stack\");\n  }\n else {\n    return stack.pop();\n  }\n}"}
{"ids": "30187", "raw_code": "public static void backAndForth(HGSearchResult<?> rs,int windowSize,int iteration){\n  boolean advance=true;\n  for (int i=0; i < iteration; i++) {\n    Object x=rs.current();\n    int steps=random(windowSize);\n    steps=forward(rs,steps);\n    if (back(rs,steps) != steps)     throw new RuntimeException(\"Moved \" + steps + \" forward, but not backward.\");\n    if (!x.equals(rs.current()))     throw new RuntimeException(\"Moving \" + steps + \" steps forward and backward missed current \"+ x);\n    if (advance) {\n      forward(rs,random(windowSize));\n      if (!rs.hasNext()) {\n        back(rs,random(windowSize));\n        advance=false;\n      }\n    }\n else {\n      back(rs,random(windowSize));\n      if (!rs.hasPrev()) {\n        forward(rs,random(windowSize));\n        advance=true;\n      }\n    }\n  }\n}"}
{"ids": "57732", "raw_code": "@Override public void close() throws IOException {\nsynchronized (lock) {\n    if (decoder != null) {\n      decoder.reset();\n    }\n    decoder=null;\n    if (in != null) {\n      in.close();\n      in=null;\n    }\n  }\n}"}
{"ids": "75564", "raw_code": "public List<String> provideWhiteList(){\n  LinkedList<String> whiteList=new LinkedList<>();\n  whiteList.add(\"org.chromium\");\n  return whiteList;\n}"}
{"ids": "78736", "raw_code": "@Override public Double zincrby(final String key,final double score,final String member){\n  checkIsInMultiOrPipeline();\n  client.zincrby(key,score,member);\n  String newscore=client.getBulkReply();\n  return Double.valueOf(newscore);\n}"}
{"ids": "48470", "raw_code": "private StringBuffer _toPattern(StringBuffer result,boolean escapeUnprintable){\n  if (pat != null) {\n    int i;\n    int backslashCount=0;\n    for (i=0; i < pat.length(); ) {\n      int c=UTF16.charAt(pat,i);\n      i+=UTF16.getCharCount(c);\n      if (escapeUnprintable && Utility.isUnprintable(c)) {\n        if ((backslashCount % 2) == 1) {\n          result.setLength(result.length() - 1);\n        }\n        Utility.escapeUnprintable(result,c);\n        backslashCount=0;\n      }\n else {\n        UTF16.append(result,c);\n        if (c == '\\\\') {\n          ++backslashCount;\n        }\n else {\n          backslashCount=0;\n        }\n      }\n    }\n    return result;\n  }\n  return _generatePattern(result,escapeUnprintable,true);\n}"}
{"ids": "35386", "raw_code": "private static Version readWorkspaceVersion(final URL workspace){\n  final File versionFile=getVersionFile(workspace,false);\n  if (versionFile == null || !versionFile.exists()) {\n    return null;\n  }\n  try {\n    final Properties props=new Properties();\n    final FileInputStream is=new FileInputStream(versionFile);\n    try {\n      props.load(is);\n    }\n  finally {\n      is.close();\n    }\n    String versionString=props.getProperty(WORKSPACE_CHECK_REFERENCE_BUNDLE_NAME);\n    if (versionString != null) {\n      return Version.parseVersion(versionString);\n    }\n    versionString=props.getProperty(WORKSPACE_CHECK_REFERENCE_BUNDLE_NAME_LEGACY);\n    if (versionString != null) {\n      return Version.parseVersion(versionString);\n    }\n    return null;\n  }\n catch (  final IOException e) {\n    IDEWorkbenchPlugin.log(\"Could not read version file \" + versionFile,new Status(IStatus.ERROR,IDEWorkbenchPlugin.IDE_WORKBENCH,IStatus.ERROR,e.getMessage() == null ? \"\" : e.getMessage(),e));\n    return null;\n  }\ncatch (  final IllegalArgumentException e) {\n    IDEWorkbenchPlugin.log(\"Could not parse version in \" + versionFile,new Status(IStatus.ERROR,IDEWorkbenchPlugin.IDE_WORKBENCH,IStatus.ERROR,e.getMessage() == null ? \"\" : e.getMessage(),e));\n    return null;\n  }\n}"}
{"ids": "52928", "raw_code": "public VectorApproximation calculateApproximation(DBID id,V dv){\n  int[] approximation=new int[dv.getDimensionality()];\n  for (int d=0; d < splitPositions.length; d++) {\n    final double val=dv.doubleValue(d);\n    final int lastBorderIndex=splitPositions[d].length - 1;\n    if (val < splitPositions[d][0]) {\n      approximation[d]=0;\n      if (id != null) {\n        LOG.warning(\"Vector outside of VAFile grid!\");\n      }\n    }\n else     if (val > splitPositions[d][lastBorderIndex]) {\n      approximation[d]=lastBorderIndex - 1;\n      if (id != null) {\n        LOG.warning(\"Vector outside of VAFile grid!\");\n      }\n    }\n else {\n      int pos=Arrays.binarySearch(splitPositions[d],val);\n      pos=(pos >= 0) ? pos : ((-pos) - 2);\n      approximation[d]=pos;\n    }\n  }\n  return new VectorApproximation(id,approximation);\n}"}
{"ids": "21559", "raw_code": "private boolean checkIfVolumeSizeExceedingPoolSize(CIMArgument[] inArgs,CIMArgument[] outArgs){\n  if (getVolumeSize(inArgs) > getVolumeSize(outArgs)) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "64906", "raw_code": "@SuppressWarnings(\"unused\") private void log(String label,ByteBuffer buffer){\n  StringBuilder sb=new StringBuilder();\n  sb.append(label);\n  sb.append(\" \");\n  sb.append(buffer.get(0));\n  sb.append(\" | \");\n  for (int x=0; x < 64; x++) {\n    sb.append(String.format(\"%02X\",(int)(buffer.get(x) & 0xFF)));\n    sb.append(\" \");\n  }\n  mLog.debug(sb.toString());\n}"}
{"ids": "11174", "raw_code": "private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {\n  ois.defaultReadObject();\n  boolean hasFont=ois.readBoolean();\n  if (hasFont) {\n    String name=(String)ois.readObject();\n    int size=ois.readInt();\n    int style=ois.readInt();\n    font=new Font(name,style,size);\n  }\n else {\n    font=OMText.DEFAULT_FONT;\n  }\n}"}
{"ids": "8111", "raw_code": "public void addFile(String filename){\n  if (filename != null)   addFile(new File(filename));\n}"}
{"ids": "47536", "raw_code": "public String format(TemporalAccessor temporal){\n  StringBuilder buf=new StringBuilder(32);\n  formatTo(temporal,buf);\n  return buf.toString();\n}"}
{"ids": "82702", "raw_code": "public void paintToggleButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}"}
{"ids": "15128", "raw_code": "void saveDeviceProfile(@Nonnull String user,@Nonnull String realm,@Nonnull OathDeviceSettings deviceSettings) throws AuthLoginException {\n  Reject.ifNull(user,realm,deviceSettings);\n  try {\n    devicesDao.saveDeviceProfiles(user,realm,jsonUtils.toJsonValues(Collections.singletonList(deviceSettings)));\n  }\n catch (  IOException e) {\n    debug.error(\"OathMaker.createDeviceProfile(): Unable to save device profile for user {} in realm {}\",user,realm,e);\n    throw new AuthLoginException(e);\n  }\n}"}
{"ids": "56867", "raw_code": "protected List<String> parametersToStringList(List<Parameter> parameters){\n  List<String> list=new ArrayList<>();\n  for (  Parameter parameter : parameters) {\n    list.add(String.format(\"\\\"%s\\\"=\\\"%s\\\"\",parameter.getName(),parameter.getValue()));\n  }\n  return list;\n}"}
{"ids": "33105", "raw_code": "public static boolean isMatchingName(String nameA,String nameB){\n  int a=nameA.length();\n  int b=nameB.length();\n  if (a == b) {\n    return nameA.equals(nameB);\n  }\n else   if (a < b - 1) {\n    return nameB.endsWith(nameA) && nameB.charAt(b - a - 1) == '.';\n  }\n else   if (b < a - 1) {\n    return nameA.endsWith(nameB) && nameA.charAt(a - b - 1) == '.';\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "49499", "raw_code": "private void validateWill(String dest,Object payload){\n  if ((dest == null) || (payload == null)) {\n    throw new IllegalArgumentException();\n  }\n  MqttAsyncClient.validateTopic(dest);\n}"}
{"ids": "6908", "raw_code": "public static float ccpCalcRotate(final CGPoint from,final CGPoint to){\n  float o=to.x - from.x;\n  float a=to.y - from.y;\n  float at=ccMacros.CC_RADIANS_TO_DEGREES((float)Math.atan(o / a));\n  if (a < 0) {\n    if (o < 0)     at=180 + Math.abs(at);\n else     at=180 - Math.abs(at);\n  }\n  return at;\n}"}
{"ids": "26074", "raw_code": "public static String cleanTabs(String yaml){\n  if (yaml.contains(\"\\t\")) {\n    LOGGER.warn(\"Yaml contains a tab characters, automatically converting to {} spaces \" + \"(if they occur at the beginning of a sentence). This may cause parsing\" + \" errors, please reformat the Yaml to use spaces only.\",TAB_AS_SPACES.length());\n    List<String> lines=NEWLINE_SPLITTER.splitToList(yaml);\n    StringBuilder sb=new StringBuilder();\n    for (    String line : lines) {\n      String cleanLine=replaceStartingTabsWithSpaces(line);\n      sb.append(cleanLine);\n      sb.append(\"\\n\");\n    }\n    return sb.toString();\n  }\n else {\n    return yaml;\n  }\n}"}
{"ids": "7507", "raw_code": "private static Paint darkerRadialGradientPaint(RadialGradientPaint paint){\n  final Color[] paintColors=paint.getColors();\n  for (int i=0; i < paintColors.length; i++) {\n    paintColors[i]=darker(paintColors[i]);\n  }\n  return new RadialGradientPaint(paint.getCenterPoint(),paint.getRadius(),paint.getFocusPoint(),paint.getFractions(),paintColors,paint.getCycleMethod(),paint.getColorSpace(),paint.getTransform());\n}"}
{"ids": "47447", "raw_code": "private void checkAndSetFastPathStatus(){\n  boolean fastPathWasOn=isFastPath;\n  if ((roundingMode == RoundingMode.HALF_EVEN) && (isGroupingUsed()) && (groupingSize == 3)&& (multiplier == 1)&& (!decimalSeparatorAlwaysShown)&& (!useExponentialNotation)) {\n    isFastPath=((minimumIntegerDigits == 1) && (maximumIntegerDigits >= 10));\n    if (isFastPath) {\n      if (isCurrencyFormat) {\n        if ((minimumFractionDigits != 2) || (maximumFractionDigits != 2))         isFastPath=false;\n      }\n else       if ((minimumFractionDigits != 0) || (maximumFractionDigits != 3))       isFastPath=false;\n    }\n  }\n else   isFastPath=false;\n  if (isFastPath) {\n    if (fastPathData == null)     fastPathData=new FastPathData();\n    fastPathData.zeroDelta=symbols.getZeroDigit() - '0';\n    fastPathData.groupingChar=symbols.getGroupingSeparator();\n    fastPathData.fractionalMaxIntBound=(isCurrencyFormat) ? 99 : 999;\n    fastPathData.fractionalScaleFactor=(isCurrencyFormat) ? 100.0d : 1000.0d;\n    fastPathData.positiveAffixesRequired=(positivePrefix.length() != 0) || (positiveSuffix.length() != 0);\n    fastPathData.negativeAffixesRequired=(negativePrefix.length() != 0) || (negativeSuffix.length() != 0);\n    int maxNbIntegralDigits=10;\n    int maxNbGroups=3;\n    int containerSize=Math.max(positivePrefix.length(),negativePrefix.length()) + maxNbIntegralDigits + maxNbGroups+ 1+ maximumFractionDigits+ Math.max(positiveSuffix.length(),negativeSuffix.length());\n    fastPathData.fastPathContainer=new char[containerSize];\n    fastPathData.charsPositiveSuffix=positiveSuffix.toCharArray();\n    fastPathData.charsNegativeSuffix=negativeSuffix.toCharArray();\n    fastPathData.charsPositivePrefix=positivePrefix.toCharArray();\n    fastPathData.charsNegativePrefix=negativePrefix.toCharArray();\n    int longestPrefixLength=Math.max(positivePrefix.length(),negativePrefix.length());\n    int decimalPointIndex=maxNbIntegralDigits + maxNbGroups + longestPrefixLength;\n    fastPathData.integralLastIndex=decimalPointIndex - 1;\n    fastPathData.fractionalFirstIndex=decimalPointIndex + 1;\n    fastPathData.fastPathContainer[decimalPointIndex]=isCurrencyFormat ? symbols.getMonetaryDecimalSeparator() : symbols.getDecimalSeparator();\n  }\n else   if (fastPathWasOn) {\n    fastPathData.fastPathContainer=null;\n    fastPathData.charsPositiveSuffix=null;\n    fastPathData.charsNegativeSuffix=null;\n    fastPathData.charsPositivePrefix=null;\n    fastPathData.charsNegativePrefix=null;\n  }\n  fastPathCheckNeeded=false;\n}"}
{"ids": "81568", "raw_code": "public boolean isClickTouchScreen(){\n  String s=DeviceInfo.getSoftwareVersion();\n  if (s.length() > 0) {\n    int v=Integer.parseInt(s.substring(0,1));\n    return v <= 5;\n  }\n  return false;\n}"}
{"ids": "58467", "raw_code": "public DOMTestDocumentBuilderFactory newInstance(DocumentBuilderSetting[] newSettings) throws DOMTestIncompatibleException {\n  if (newSettings == null) {\n    return this;\n  }\n  DocumentBuilderSetting[] mergedSettings=mergeSettings(newSettings);\n  return new LSDocumentBuilderFactory(mergedSettings);\n}"}
{"ids": "63109", "raw_code": "public void reset(){\n  index=0;\n  if (file != null) {\n    listIndex=0;\n    if (!written) {\n      writeAllRows();\n      written=true;\n    }\n    list.clear();\n    file.seek(FileStore.HEADER_LENGTH);\n  }\n}"}
{"ids": "71059", "raw_code": "public void add(GeometryFunction func){\n  functions.add(func);\n  sortedFunctions.put(func.getName(),func);\n  categorizedFunctions.put(func.getCategory(),func.getName(),func);\n  if (hasGeometryResult(func))   categorizedGeometryFunctions.put(func.getCategory(),func.getName(),func);\n}"}
{"ids": "52178", "raw_code": "public static Clusters convertToClusters(Graph clusterGraph,List<Node> measuredVariables){\n  List<String> latents=new ArrayList<>();\n  Clusters clusters=new Clusters();\n  clusterGraph=GraphUtils.replaceNodes(clusterGraph,measuredVariables);\n  for (  Node node : clusterGraph.getNodes()) {\n    if (!measuredVariables.contains(node)) {\n      latents.add(node.getName());\n    }\n  }\n  Collections.sort(latents);\n  for (int i=0; i < latents.size(); i++) {\n    String name=latents.get(i);\n    clusters.setClusterName(i,name);\n    Node latent=clusterGraph.getNode(name);\n    List<Node> measured=clusterGraph.getNodesOutTo(latent,Endpoint.ARROW);\n    for (    Node _node : measured) {\n      if (measuredVariables.contains(_node)) {\n        clusters.addToCluster(i,_node.getName());\n      }\n    }\n  }\n  return clusters;\n}"}
{"ids": "46244", "raw_code": "final short rlshort(DataInputStream dis) throws IOException {\n  short s=0;\n  short high, low;\n  s=dis.readShort();\n  high=(short)((s & 0xFF) << 8);\n  low=(short)((s & 0xFF00) >>> 8);\n  s=(short)(high | low);\n  return s;\n}"}
{"ids": "36733", "raw_code": "public void encodeCell(mxICell cell,Node node,boolean includeChildren){\n  node.appendChild(encode(cell));\n  if (includeChildren) {\n    int childCount=cell.getChildCount();\n    for (int i=0; i < childCount; i++) {\n      encodeCell(cell.getChildAt(i),node,includeChildren);\n    }\n  }\n}"}
{"ids": "16080", "raw_code": "public DateTimeFormatter withLocale(Locale locale){\n  if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\n    return this;\n  }\n  return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);\n}"}
{"ids": "77889", "raw_code": "public String nextString(char quote) throws JSONException {\n  char c;\n  StringBuilder sb=new StringBuilder();\n  for (; ; ) {\n    c=next();\nswitch (c) {\ncase 0:\ncase '\\n':\ncase '\\r':\n      throw syntaxError(\"Unterminated string\");\ncase '\\\\':\n    c=next();\nswitch (c) {\ncase 'b':\n    sb.append('\\b');\n  break;\ncase 't':\nsb.append('\\t');\nbreak;\ncase 'n':\nsb.append('\\n');\nbreak;\ncase 'f':\nsb.append('\\f');\nbreak;\ncase 'r':\nsb.append('\\r');\nbreak;\ncase 'u':\nsb.append((char)Integer.parseInt(next(4),16));\nbreak;\ncase '\"':\ncase '\\'':\ncase '\\\\':\ncase '/':\nsb.append(c);\nbreak;\ndefault :\nthrow syntaxError(\"Illegal escape.\");\n}\nbreak;\ndefault :\nif (c == quote) {\nreturn sb.toString();\n}\nsb.append(c);\n}\n}\n}"}
{"ids": "13962", "raw_code": "public static Response parseXML(String xml) throws SAMLException {\n  Document doc=XMLUtils.toDOMDocument(xml,SAMLUtils.debug);\n  Element root=doc.getDocumentElement();\n  return new Response(root);\n}"}
{"ids": "68625", "raw_code": "public CompiledSQL registerParamType(String paramName,String dataType){\n  if (paramTypes == null) {\n    paramTypes=new HashMap();\n  }\n  paramTypes.put(paramName,dataType);\n  return this;\n}"}
{"ids": "53105", "raw_code": "public void beginStep(int step,String stepTitle,Logging logger){\n  setProcessed(step - 1);\n  this.stepTitle=stepTitle;\n  logger.progress(this);\n}"}
{"ids": "31138", "raw_code": "public boolean equals(Object obj){\n  if (this == obj) {\n    return true;\n  }\n else   if (!(obj instanceof MethodDesc)) {\n    return false;\n  }\n  MethodDesc od=(MethodDesc)obj;\n  return ((name == null ? od.name == null : name.equals(od.name)) && Arrays.equals(types,od.types) && (constraints == null ? od.constraints == null : constraints.equals(od.constraints)));\n}"}
{"ids": "61883", "raw_code": "public Set<String> addContent(DialogueState newState){\n  if (!paused) {\n    curState.addToState(newState);\n    return update();\n  }\n else {\n    log.info(\"system is paused, ignoring content \" + newState);\n    return Collections.emptySet();\n  }\n}"}
{"ids": "6967", "raw_code": "public long removeIndex(int index){\n  if (index >= size)   throw new IndexOutOfBoundsException(String.valueOf(index));\n  long[] items=this.items;\n  long value=items[index];\n  size--;\n  if (ordered)   System.arraycopy(items,index + 1,items,index,size - index);\n else   items[index]=items[size];\n  return value;\n}"}
{"ids": "51587", "raw_code": "public FDModel loadModel(String filename,String cwd){\n  String fn=filename;\n  if (fn == null)   return null;\n  if (!fn.endsWith(\".\" + fileExtension)) {\n    fn+=\".\" + fileExtension;\n  }\n  ModelPersistenceHandler persistenceHandler=createModelPersistenceHandler(resourceSetProvider.get());\n  return (FDModel)persistenceHandler.loadModel(fn,cwd);\n}"}
{"ids": "69060", "raw_code": "public boolean saveCurrentConfiguration(){\n  if (currentConfig.toString() == null) {\n    return (true);\n  }\n  int answer=JOptionPane.showConfirmDialog(null,\"Save current configuration?\",\"Save Configuration\",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,Icons.getImageIcon(\"dert_24.png\"));\n  if (answer == JOptionPane.CANCEL_OPTION) {\n    return (false);\n  }\n else   if (answer == JOptionPane.NO_OPTION) {\n    return (true);\n  }\n  return (saveCurrentConfigurationAs(false));\n}"}
{"ids": "62047", "raw_code": "public static double[] normalise(double[] initProbs){\n  for (int i=0; i < initProbs.length; i++) {\n    if (initProbs[i] < 0) {\n      initProbs[i]=0.0;\n    }\n  }\n  double sum=0.0;\n  for (  double prob : initProbs) {\n    sum+=prob;\n  }\n  double[] result=new double[initProbs.length];\n  if (sum > 0.001) {\n    for (int i=0; i < initProbs.length; i++) {\n      result[i]=initProbs[i] / sum;\n    }\n  }\n else {\n    for (int i=0; i < initProbs.length; i++) {\n      result[i]=1.0 / initProbs.length;\n    }\n  }\n  return result;\n}"}
{"ids": "64111", "raw_code": "public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){\n  if (file == null) {\n    throw new NullPointerException(\"The file must not be null\");\n  }\n  addTracker(file.getPath(),marker,deleteStrategy);\n}"}
{"ids": "9504", "raw_code": "protected StringBuilder appendSearchStringParamIfNecessary(StringBuilder sb){\n  String searchStringParam=getEncodedSearchStringParam();\n  if (searchStringParam != null) {\n    if (sb.indexOf(\"?\") == -1) {\n      sb.append('?');\n    }\n else {\n      sb.append('&');\n    }\n    sb.append(searchStringParam);\n  }\n  return sb;\n}"}
{"ids": "62260", "raw_code": "public static ClassInfo findOrCreateClass(String fullName){\n  ClassInfo u=findClass(fullName);\n  if (u == null) {\n    u=new ClassInfo(fullName);\n    if (u.isArray()) {\n      findOrCreateClass(fullName.substring(1));\n    }\n  }\n  return u;\n}"}
{"ids": "5052", "raw_code": "PlaPointRational(BigInteger p_x,BigInteger p_y,BigInteger p_z){\n  rp_x=p_x;\n  rp_y=p_y;\n  rp_z=p_z;\n  is_nan=p_z.signum() <= 0;\n}"}
{"ids": "4420", "raw_code": "public boolean isNullValue(){\n  return StringUtils.trimToNull(value) == null && StringUtils.trimToNull(comment) == null;\n}"}
{"ids": "1671", "raw_code": "private Map<Long,Pair<String,Long>> recoverPendingLargeMessages() throws Exception {\n  Map<Long,Pair<String,Long>> largeMessages=new HashMap<>();\n  List<String> filenames=largeMessagesFactory.listFiles(\"msg\");\n  List<Long> idList=new ArrayList<>();\n  for (  String filename : filenames) {\n    Long id=getLargeMessageIdFromFilename(filename);\n    if (!largeMessagesToDelete.contains(id)) {\n      idList.add(id);\n      SequentialFile seqFile=largeMessagesFactory.createSequentialFile(filename);\n      long size=seqFile.size();\n      largeMessages.put(id,new Pair<>(filename,size));\n    }\n  }\n  return largeMessages;\n}"}
{"ids": "18088", "raw_code": "private void checkForFragmentID(Attributes attributes){\n  if (!m_shouldProcess) {\n    if ((null != attributes) && (null != m_fragmentIDString)) {\n      int n=attributes.getLength();\n      for (int i=0; i < n; i++) {\n        String name=attributes.getQName(i);\n        if (name.equals(Constants.ATTRNAME_ID)) {\n          String val=attributes.getValue(i);\n          if (val.equalsIgnoreCase(m_fragmentIDString)) {\n            m_shouldProcess=true;\n            m_fragmentID=m_elementID;\n          }\n        }\n      }\n    }\n  }\n}"}
{"ids": "54996", "raw_code": "public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augs) throws XNIException {\n  try {\n    if (fDTDHandler != null) {\n      String publicId=identifier.getPublicId();\n      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();\n      fDTDHandler.unparsedEntityDecl(name,publicId,systemId,notation);\n    }\n  }\n catch (  SAXException e) {\n    throw new XNIException(e);\n  }\n}"}
{"ids": "78669", "raw_code": "public void waitForPaxosToFinish(){\n  proposeLock.lock();\n  canPropose.awaitUninterruptibly();\n  proposeLock.unlock();\n}"}
{"ids": "5777", "raw_code": "public static ResponseData parse(String responseData){\n  int index=responseData.indexOf(':');\n  String mainData, extraData;\n  if (-1 == index) {\n    mainData=responseData;\n    extraData=\"\";\n  }\n else {\n    mainData=responseData.substring(0,index);\n    extraData=index >= responseData.length() ? \"\" : responseData.substring(index + 1);\n  }\n  String[] fields=TextUtils.split(mainData,Pattern.quote(\"|\"));\n  if (fields.length < 6) {\n    throw new IllegalArgumentException(\"Wrong number of fields.\");\n  }\n  ResponseData data=new ResponseData();\n  data.extra=extraData;\n  data.responseCode=Integer.parseInt(fields[0]);\n  data.nonce=Integer.parseInt(fields[1]);\n  data.packageName=fields[2];\n  data.versionCode=fields[3];\n  data.userId=fields[4];\n  data.timestamp=Long.parseLong(fields[5]);\n  return data;\n}"}
{"ids": "13722", "raw_code": "public void validate() throws AMConsoleException {\n  if (isSelected()) {\n    if (isPersonalQuestion()) {\n      if ((question.length() == 0) || (answer.length() == 0)) {\n        throw new AMConsoleException(\"user.password.reset.missing.personal.question.answer.message\");\n      }\n    }\n else {\n      if (answer.length() == 0) {\n        throw new AMConsoleException(\"user.password.reset.missing.answer.message\");\n      }\n    }\n  }\n}"}
{"ids": "23932", "raw_code": "public static void assertTrue(boolean b,Object message){\n  if (!b) {\n    throwError(message);\n  }\n}"}
{"ids": "35107", "raw_code": "private String[] spliterator(String phrase){\n  String[] split=phrase.split(\" \");\n  String[] out=new String[split.length];\n  for (int ix=1; ix < split.length; ix++) {\n    String temp=split[ix - 1];\n    temp+=\" \" + split[ix];\n    out[ix - 1]=temp;\n  }\n  return out;\n}"}
{"ids": "47005", "raw_code": "protected Signature(String algorithm){\n  this.algorithm=algorithm;\n}"}
{"ids": "45096", "raw_code": "private final void augmentTokenList(){\n  Token[] temp=new Token[size + increment];\n  System.arraycopy(tokenList,0,temp,0,size);\n  size+=increment;\n  tokenList=temp;\n  for (int i=0; i < increment; i++) {\n    tokenList[size - i - 1]=createInternalUseOnlyToken();\n  }\n}"}
{"ids": "29648", "raw_code": "public String calculateFromString(String data) throws Exception {\n  log.trace(\"Calculating digest with algorithm URI '{}' for data:\\n{}\",algoURI,data);\n  return calculateFromBytes(data.getBytes(StandardCharsets.UTF_8));\n}"}
{"ids": "64858", "raw_code": "public void addChannels(List<Channel> channels){\n  for (  Channel channel : channels) {\n    addChannel(channel);\n  }\n}"}
{"ids": "50382", "raw_code": "public static String[] mergeStringArrays(String[] array1,String[] array2){\n  if (ObjectUtils.isEmpty(array1)) {\n    return array2;\n  }\n  if (ObjectUtils.isEmpty(array2)) {\n    return array1;\n  }\n  List<String> result=new ArrayList<String>();\n  result.addAll(Arrays.asList(array1));\n  for (  String str : array2) {\n    if (!result.contains(str)) {\n      result.add(str);\n    }\n  }\n  return toStringArray(result);\n}"}
{"ids": "36454", "raw_code": "private double damp(double value){\n  return Math.sqrt(value);\n}"}
{"ids": "34480", "raw_code": "public void addMeasurement(double measurement){\n  double keepConstant=1 - mDecayConstant;\n  if (mCount > mCutover) {\n    mValue=Math.exp(keepConstant * Math.log(mValue) + mDecayConstant * Math.log(measurement));\n  }\n else   if (mCount > 0) {\n    double retained=keepConstant * mCount / (mCount + 1.0);\n    double newcomer=1.0 - retained;\n    mValue=Math.exp(retained * Math.log(mValue) + newcomer * Math.log(measurement));\n  }\n else {\n    mValue=measurement;\n  }\n  mCount++;\n}"}
{"ids": "28564", "raw_code": "@SuppressWarnings(\"fallthrough\") private String nextUnquotedValue() throws IOException {\n  StringBuilder builder=null;\n  int i=0;\n  findNonLiteralCharacter:   while (true) {\n    for (; pos + i < limit; i++) {\nswitch (buffer[pos + i]) {\ncase '/':\ncase '\\\\':\ncase ';':\ncase '#':\ncase '=':\n        checkLenient();\ncase '{':\ncase '}':\ncase '[':\ncase ']':\ncase ':':\ncase ',':\ncase ' ':\ncase '\\t':\ncase '\\f':\ncase '\\r':\ncase '\\n':\n      break findNonLiteralCharacter;\n  }\n}\nif (i < buffer.length) {\n  if (fillBuffer(i + 1)) {\n    continue;\n  }\n else {\n    break;\n  }\n}\nif (builder == null) {\n  builder=new StringBuilder();\n}\nbuilder.append(buffer,pos,i);\npos+=i;\ni=0;\nif (!fillBuffer(1)) {\n  break;\n}\n}\nString result;\nif (builder == null) {\nresult=new String(buffer,pos,i);\n}\n else {\nbuilder.append(buffer,pos,i);\nresult=builder.toString();\n}\npos+=i;\nreturn result;\n}"}
{"ids": "24813", "raw_code": "public long arg_end(){\n  return Long.parseLong(fields[48]);\n}"}
{"ids": "84961", "raw_code": "static List<IRuntimeClasspathEntry> computeClasspath(IJavaProject javaProject) throws CoreException {\n  IRuntimeClasspathEntry[] unresolvedRuntimeClasspath=JavaRuntime.computeUnresolvedRuntimeClasspath(javaProject);\n  List<IRuntimeClasspathEntry> resolvedRuntimeClasspath=new ArrayList<IRuntimeClasspathEntry>();\n  for (  IRuntimeClasspathEntry unresolvedClasspathEntry : unresolvedRuntimeClasspath) {\n    if (JavaRuntime.isVMInstallReference(unresolvedClasspathEntry)) {\n      continue;\n    }\n    resolvedRuntimeClasspath.addAll(Arrays.asList(JavaRuntime.resolveRuntimeClasspathEntry(unresolvedClasspathEntry,javaProject)));\n  }\n  try {\n    resolvedRuntimeClasspath.addAll(0,GWTProjectUtilities.getGWTSourceFolderPathsFromProjectAndDependencies(javaProject,false));\n  }\n catch (  SdkException e) {\n    throw new CoreException(new Status(IStatus.ERROR,GWTPlugin.PLUGIN_ID,e.getLocalizedMessage(),e));\n  }\n  GwtSdk gwtRuntime=GwtSdk.findSdkFor(javaProject);\n  if (gwtRuntime == null) {\n    GWTPluginLog.logWarning(\"Unable to find GWT runtime for project \" + javaProject.getElementName() + \", will try to continue GWT compilation..\");\n    return resolvedRuntimeClasspath;\n  }\n  IStatus validationStatus=gwtRuntime.validate();\n  if (!validationStatus.isOK()) {\n    GWTPluginLog.logWarning(\"GWT runtime for project \" + javaProject.getElementName() + \" is not valid: \"+ validationStatus.getMessage()+ \". Will attempt to proceed with GWT compilation anyway.\");\n    return resolvedRuntimeClasspath;\n  }\n  try {\n    File gwtDevJar=gwtRuntime.getDevJar();\n    resolvedRuntimeClasspath.add(JavaRuntime.newArchiveRuntimeClasspathEntry(Path.fromOSString(gwtDevJar.getAbsolutePath())));\n  }\n catch (  SdkException e) {\n    GWTPluginLog.logWarning(e,\"Unable to add gwt-dev.jar to the compiler's classpath; will attempt GWT compilation anyway.\");\n  }\n  return resolvedRuntimeClasspath;\n}"}
{"ids": "77592", "raw_code": "@SuppressWarnings(\"unchecked\") public ThrowingMockTokenFilterFactory(Map<String,String> args){\n  super(args);\n  String exceptionClassName=args.get(\"exceptionClassName\");\n  if (exceptionClassName == null) {\n    throw new RuntimeException(\"Required parameter exceptionClassName is missing\");\n  }\n  try {\n    exceptionClass=(Class<? extends RuntimeException>)Class.forName(exceptionClassName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "7229", "raw_code": "public PatternGuardExpr(String namespace,String name,List<Expression> parameters,PatternExpr guardedPattern){\n  super(namespace,name,parameters);\n  this.guarded=new ArrayList<PatternExpr>();\n  guarded.add(guardedPattern);\n}"}
{"ids": "69328", "raw_code": "private long startNewTrack(){\n  if (isRecording()) {\n    Log.d(TAG,\"Ignore startNewTrack. Already recording.\");\n    return -1L;\n  }\n  long now=System.currentTimeMillis();\n  trackTripStatisticsUpdater=new TripStatisticsUpdater(now);\n  markerTripStatisticsUpdater=new TripStatisticsUpdater(now);\n  Track track=new Track();\n  Uri uri=myTracksProviderUtils.insertTrack(track);\n  long trackId=Long.parseLong(uri.getLastPathSegment());\n  updateRecordingState(trackId,false);\n  PreferencesUtils.setInt(this,R.string.auto_resume_track_current_retry_key,0);\n  PreferencesUtils.setInt(this,R.string.activity_recognition_type_key,PreferencesUtils.ACTIVITY_RECOGNITION_TYPE_DEFAULT);\n  track.setId(trackId);\n  track.setName(TrackNameUtils.getTrackName(this,trackId,now,null));\n  String category=PreferencesUtils.getString(this,R.string.default_activity_key,PreferencesUtils.DEFAULT_ACTIVITY_DEFAULT);\n  track.setCategory(category);\n  track.setIcon(TrackIconUtils.getIconValue(this,category));\n  track.setTripStatistics(trackTripStatisticsUpdater.getTripStatistics());\n  myTracksProviderUtils.updateTrack(track);\n  insertWaypoint(WaypointCreationRequest.DEFAULT_START_TRACK);\n  startRecording(true);\n  return trackId;\n}"}
{"ids": "73854", "raw_code": "protected AbstractMRMessage pollMessage(){\n  if (disablePoll) {\n    return null;\n  }\n  if (!pollQueue.isEmpty()) {\n    PollMessage pm=pollQueue.peek();\n    if (pm != null) {\n      return pm.getMessage();\n    }\n  }\n  return null;\n}"}
{"ids": "24197", "raw_code": "protected static String applyLimitClause(final String query,int limit,final int queryResultSetLimit){\n  Matcher matcher=SELECT_EXPR_PATTERN.matcher(query);\n  if (matcher.matches()) {\n    Matcher limit_matcher=SELECT_WITH_LIMIT_EXPR_PATTERN.matcher(query);\n    boolean queryAlreadyHasLimitClause=limit_matcher.matches();\n    if (!queryAlreadyHasLimitClause) {\n      if (limit == 0) {\n        limit=queryResultSetLimit;\n      }\n      String result=query;\n      result+=\" LIMIT \" + limit;\n      return result;\n    }\n  }\n  return query;\n}"}
{"ids": "79777", "raw_code": "public void unmaximiseComponent(){\n  if (maximisedComponent == null) {\n    return;\n  }\n  container.remove(maximisedComponent);\n  container.add(containerChild);\n  parentMaximisedComponent.add(maximisedComponent);\n  container.validate();\n  containerChild=null;\n  parentMaximisedComponent=null;\n  maximisedComponent=null;\n}"}
{"ids": "49808", "raw_code": "default CharSeq join(CharSequence delimiter,CharSequence prefix,CharSequence suffix){\n  StringBuilder stringBuilder=new StringBuilder(prefix);\n  forEach(null);\n  stringBuilder.append(suffix);\n  return CharSeq.of(stringBuilder.toString());\n}"}
{"ids": "57174", "raw_code": "public void removeListener(T listener){\n  if (listeners != null) {\n    List<T> newlisteners=new ArrayList<T>();\n    newlisteners.addAll(listeners);\n    newlisteners.remove(listener);\n    listeners=newlisteners;\n  }\n}"}
{"ids": "35809", "raw_code": "public static void saveAsASCII(NSArray root,File out) throws IOException {\n  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),\"ASCII\");\n  w.write(root.toASCIIPropertyList());\n  w.close();\n}"}
{"ids": "40314", "raw_code": "public static void filterOutbound(StringBuilder message){\n  for (int i=0; i < message.length(); i++) {\n    char currentChar=message.charAt(i);\n    if (LEGAL_CHARACTERS.indexOf(currentChar) == -1) {\n      if (currentChar > 256) {\n        int charAsInt=currentChar;\n        String stringVersion=Integer.toString(charAsInt,16);\n        String replacement=\"&#x\" + stringVersion + \";\";\n        message.replace(i,i + 1,replacement);\n        i+=replacement.length() - 1;\n      }\n else {\n        message.deleteCharAt(i);\n        i--;\n      }\n    }\n  }\n}"}
{"ids": "5160", "raw_code": "private void drawDays(Canvas canvas){\n  final TextPaint p=mDayPaint;\n  final int headerHeight=mMonthHeight + mDayOfWeekHeight;\n  final int rowHeight=mDayHeight;\n  final int colWidth=mCellWidth;\n  final float halfLineHeight=(p.ascent() + p.descent()) / 2f;\n  int rowCenter=headerHeight + rowHeight / 2;\n  for (int day=1, col=findDayOffset(); day <= mDaysInMonth; day++) {\n    final int colCenter=colWidth * col + colWidth / 2;\n    final int colCenterRtl;\n    if (ViewCompatUtils.isLayoutRtl(this)) {\n      colCenterRtl=mPaddedWidth - colCenter;\n    }\n else {\n      colCenterRtl=colCenter;\n    }\n    int state=0;\n    final boolean isDayEnabled=isDayEnabled(day);\n    final boolean isDayActivated=mActivatedDay == day;\n    if (isDayActivated) {\n      state=VIEW_STATE_SELECTED;\n      canvas.drawCircle(colCenterRtl,rowCenter,mDaySelectorRadius,mDaySelectorPaint);\n    }\n else     if (mTouchedItem == day) {\n      state=VIEW_STATE_PRESSED;\n      if (isDayEnabled) {\n        canvas.drawCircle(colCenterRtl,rowCenter,mDaySelectorRadius,mDayHighlightPaint);\n      }\n    }\n    final boolean isDayToday=mToday == day;\n    final int dayTextColor;\n    if (isDayToday && !isDayActivated) {\n      dayTextColor=mDaySelectorPaint.getColor();\n    }\n else {\n      final int[] stateSet=buildState(isDayEnabled,state);\n      dayTextColor=mDayTextColor.getColorForState(stateSet,0);\n    }\n    p.setColor(dayTextColor);\n    canvas.drawText(mDayFormatter.format(day),colCenterRtl,rowCenter - halfLineHeight,p);\n    col++;\n    if (col == DAYS_IN_WEEK) {\n      col=0;\n      rowCenter+=rowHeight;\n    }\n  }\n}"}
{"ids": "69188", "raw_code": "public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {\n  if (ch == null || start < 0 || length >= (ch.length - start) || length < 0)   return;\n  append(m_doc.createComment(new String(ch,start,length)));\n}"}
{"ids": "7347", "raw_code": "public boolean isEmpty(){\n  return arrayList.isEmpty();\n}"}
{"ids": "27289", "raw_code": "public ArbitraryLengthPathNode(final TermNode left,final TermNode right,final VarNode tVarLeft,final VarNode tVarRight,final PathMod mod){\n  this(new BOp[]{new JoinGroupNode()},NV.asMap(new NV(Annotations.LEFT_TERM,left),new NV(Annotations.RIGHT_TERM,right),new NV(Annotations.TRANSITIVITY_VAR_LEFT,tVarLeft),new NV(Annotations.TRANSITIVITY_VAR_RIGHT,tVarRight),new NV(Annotations.LOWER_BOUND,mod == PathMod.ONE_OR_MORE ? 1L : 0L),new NV(Annotations.UPPER_BOUND,mod == PathMod.ZERO_OR_ONE ? 1L : Long.MAX_VALUE)));\n  final Set<VarNode> dropVars=new LinkedHashSet<>();\n  dropVars.add(tVarLeft);\n  dropVars.add(tVarRight);\n  setProperty(Annotations.DROP_VARS,dropVars);\n}"}
{"ids": "78137", "raw_code": "static void checkFlags(int flags){\n  int allowedFlags=READ_ONLY_FLAG_MASK | EMPTY_FLAG_MASK | COMPACT_FLAG_MASK| ORDERED_FLAG_MASK;\n  int flagsMask=~allowedFlags;\n  if ((flags & flagsMask) > 0) {\n    throw new SketchesArgumentException(\"Possible corruption: Invalid flags field: \" + Integer.toBinaryString(flags));\n  }\n}"}
{"ids": "38167", "raw_code": "public static ArrayList<Object> deleteItemSets(ArrayList<Object> itemSets,int minSupport,int maxSupport){\n  ArrayList<Object> newVector=new ArrayList<Object>(itemSets.size());\n  for (int i=0; i < itemSets.size(); i++) {\n    LabeledItemSet current=(LabeledItemSet)itemSets.get(i);\n    if ((current.m_ruleSupCounter >= minSupport) && (current.m_ruleSupCounter <= maxSupport)) {\n      newVector.add(current);\n    }\n  }\n  return newVector;\n}"}
{"ids": "69634", "raw_code": "private static synchronized String makeDateString(Date date){\n  return sdfDefault.format(date);\n}"}
{"ids": "21694", "raw_code": "public static String generateNativeGuid(DbClient dbClient,FileShare fileShare) throws IOException {\n  StorageSystem device=dbClient.queryObject(StorageSystem.class,fileShare.getStorageDevice());\n  return String.format(\"%s+%s+\" + FILESYSTEM + \"+%s\",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber(),fileShare.getNativeId());\n}"}
{"ids": "70106", "raw_code": "private static double distance(Point p1,Point p2){\n  double x=p1.x - p2.x;\n  double y=p1.y - p2.y;\n  return Math.sqrt(x * x + y * y);\n}"}
{"ids": "16672", "raw_code": "public void addHyperedgeInNode(HyperEdge hyperEdge){\n  if (hyperEdge != null) {\n    if (null == hyperedges)     hyperedges=new ArrayList<>();\n    hyperedges.add(hyperEdge);\n    semiringPlus(hyperEdge);\n  }\n}"}
{"ids": "43070", "raw_code": "public RotatedProblems(){\n  super();\n}"}
{"ids": "43204", "raw_code": "public DockerPortMapping withHostPort(int hostPort){\n  DockerPortMapping newMapping=new DockerPortMapping();\n  newMapping.protocol=protocol;\n  newMapping.containerPort=containerPort;\n  newMapping.hostIp=hostIp;\n  newMapping.hostPort=String.valueOf(hostPort);\n  return newMapping;\n}"}
{"ids": "29192", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return ID1;\ncase 2:\n  return ID2;\ndefault :\nreturn null;\n}\n}"}
{"ids": "61949", "raw_code": "@Override public int length(){\n  return str.length();\n}"}
{"ids": "86407", "raw_code": "public void clearAllHaptics(){\n  mHaptics.clear();\n}"}
{"ids": "1712", "raw_code": "public void encode(final ActiveMQBuffer buffer){\n  buffer.writeString(name);\n  buffer.writeString(factoryClassName);\n  buffer.writeInt(params == null ? 0 : params.size());\n  if (params != null) {\n    encodeMap(buffer,params);\n  }\n  if (extraProps != null) {\n    encodeMap(buffer,extraProps);\n  }\n}"}
{"ids": "16464", "raw_code": "@Override public void write(byte[] b,int off,int len) throws IOException {\n  flushBits();\n  out.write(b,off,len);\n}"}
{"ids": "698", "raw_code": "public static double log2(double x){\n  return Math.log(x) / LOG2;\n}"}
{"ids": "36021", "raw_code": "boolean isNameUsed(String name){\n  List<Integer> columnsWithName=columnNames.get(name);\n  return columnsWithName != null && !columnsWithName.isEmpty();\n}"}
{"ids": "5136", "raw_code": "public StateInteractive complete(){\n  if (return_state != this && actlog != null) {\n    actlog.start_scope(LogfileScope.COMPLETE_SCOPE);\n  }\n  return return_state;\n}"}
{"ids": "2148", "raw_code": "private WorkQueue findNonEmptyStealQueue(){\n  WorkQueue[] ws;\n  int wl;\n  int r=TLRandom.nextSecondarySeed();\n  if ((ws=workQueues) != null && (wl=ws.length) > 0) {\n    int m=wl - 1, origin=r & m;\n    for (int k=origin, oldSum=0, checkSum=0; ; ) {\n      WorkQueue q;\n      int b;\n      if ((q=ws[k]) != null) {\n        if ((b=q.base) - q.top < 0)         return q;\n        checkSum+=b;\n      }\n      if ((k=(k + 1) & m) == origin) {\n        if (oldSum == (oldSum=checkSum))         break;\n        checkSum=0;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "52126", "raw_code": "private void doDdpOrientation(Node d,Node a,Node b,Node c,Graph graph){\n  List<Node> sepset=getSepset(d,c);\n  if (sepset == null) {\n    return;\n  }\n  if (sepset.contains(b)) {\n    graph.setEndpoint(c,b,Endpoint.TAIL);\n    if (verbose) {\n      logger.log(\"impliedOrientations\",SearchLogUtils.edgeOrientedMsg(\"Definite discriminating path d = \" + d,graph.getEdge(b,c)));\n      out.println(SearchLogUtils.edgeOrientedMsg(\"Definite discriminating path d = \" + d,graph.getEdge(b,c)));\n    }\n    changeFlag=true;\n  }\n else {\n    if (!isArrowpointAllowed(a,b,graph)) {\n      return;\n    }\n    if (!isArrowpointAllowed(c,b,graph)) {\n      return;\n    }\n    graph.setEndpoint(a,b,Endpoint.ARROW);\n    graph.setEndpoint(c,b,Endpoint.ARROW);\n    logger.log(\"colliderOrientations\",SearchLogUtils.colliderOrientedMsg(\"Definite discriminating path.. d = \" + d,a,b,c));\n    changeFlag=true;\n  }\n}"}
{"ids": "13887", "raw_code": "public void handleTblBootstrapResOffHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {\n  try {\n    Map values=getValues();\n    onBeforeSaveProfile(values);\n    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);\n    SMDiscoveryBootstrapRefOffEditViewBean vb=(SMDiscoveryBootstrapRefOffEditViewBean)getViewBean(SMDiscoveryBootstrapRefOffEditViewBean.class);\n    unlockPageTrail();\n    passPgSessionMap(vb);\n    vb.populateValues((String)getDisplayFieldValue(TBL_BOOTSTRAP_RES_OFF_HREF_ACTION));\n    vb.forwardTo(getRequestContext());\n  }\n catch (  AMConsoleException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());\n  }\n}"}
{"ids": "56063", "raw_code": "@VisibleForTesting String postRequest(long timestamp,String xml) throws RequestFailureException {\n  String response=null;\n  HttpURLConnection urlConnection=null;\n  try {\n    urlConnection=createConnection();\n    setUpPostRequest(timestamp,urlConnection,xml);\n    sendRequestToServer(urlConnection,xml);\n    response=readResponseFromServer(urlConnection);\n  }\n  finally {\n    if (urlConnection != null) {\n      urlConnection.disconnect();\n    }\n  }\n  return response;\n}"}
{"ids": "21062", "raw_code": "private void generateKey() throws Exception {\n  KeyGenerator keygen=KeyGenerator.getInstance(ALGO);\n  SecretKey key=keygen.generateKey();\n  persistKey(key);\n}"}
{"ids": "11062", "raw_code": "public HttpRequestEvent fireHttpRequestEvent(String request,OutputStream output) throws IOException {\n  HttpRequestEvent event=new HttpRequestEvent(this,request,output);\n  HttpRequestListener listener;\n  Vector list=(Vector)listeners.clone();\n  Enumeration e=list.elements();\n  while (e.hasMoreElements()) {\n    listener=(HttpRequestListener)e.nextElement();\n    listener.httpRequest(event);\n  }\n  return event;\n}"}
{"ids": "70219", "raw_code": "private void parseRecord(Element unitNode){\n  NodeList nl=unitNode.getChildNodes();\n  for (int i=0; i < nl.getLength(); i++) {\n    Node currNode=nl.item(i);\n    if (currNode.getParentNode() != unitNode) {\n      continue;\n    }\n    int nodeType=currNode.getNodeType();\n    if (nodeType == Node.ELEMENT_NODE) {\n      String nodeName=currNode.getNodeName();\n      if (nodeName.equalsIgnoreCase(UNIT)) {\n        parseUnit((Element)currNode,entities);\n      }\n else       if (nodeName.equalsIgnoreCase(SURVIVORS)) {\n        parseUnit((Element)currNode,survivors);\n      }\n else       if (nodeName.equalsIgnoreCase(ALLIES)) {\n        parseUnit((Element)currNode,allies);\n      }\n else       if (nodeName.equalsIgnoreCase(SALVAGE)) {\n        parseUnit((Element)currNode,salvage);\n      }\n else       if (nodeName.equalsIgnoreCase(DEVASTATED)) {\n        parseUnit((Element)currNode,devastated);\n      }\n else       if (nodeName.equalsIgnoreCase(KILLS)) {\n        parseKills((Element)currNode);\n      }\n else       if (nodeName.equalsIgnoreCase(ENTITY)) {\n        parseUnit((Element)currNode,entities);\n      }\n else       if (nodeName.equalsIgnoreCase(PILOT)) {\n        parsePilot((Element)currNode);\n      }\n    }\n else {\n      continue;\n    }\n  }\n}"}
{"ids": "48559", "raw_code": "public void cancel(){\nsynchronized (lock) {\n    if (this.latency == NO_TARGET) {\n      throw new IllegalStateException(\"Request already\" + \" cancelled\");\n    }\n    if (!requests.remove(this)) {\n      throw new InternalError(\"Latency request \" + this + \" not found\");\n    }\n    if (requests.isEmpty())     requests=null;\n    this.latency=NO_TARGET;\n    adjustLatencyIfNeeded();\n  }\n}"}
{"ids": "59483", "raw_code": "void startEventTracker(){\n  List<EventTrackingService> services=getEnabledServicesForType(EventTrackingService.class);\n  if (services != null && !services.isEmpty()) {\n    if (eventTracker == null) {\n      eventTracker=new EventTracker(context,services,foamApiKeys.wifiOnly());\n    }\n    if (!eventTracker.isRunning()) {\n      eventTracker.start();\n    }\n  }\n}"}
{"ids": "48446", "raw_code": "@Override public int preceding(int offset){\n  CharacterIterator text=getText();\n  checkOffset(offset,text);\n  if (cachedBreakPositions == null || offset <= cachedBreakPositions[0] || offset > cachedBreakPositions[cachedBreakPositions.length - 1]) {\n    cachedBreakPositions=null;\n    return super.preceding(offset);\n  }\n else {\n    positionInCache=0;\n    while (positionInCache < cachedBreakPositions.length && offset > cachedBreakPositions[positionInCache]) {\n      ++positionInCache;\n    }\n    --positionInCache;\n    text.setIndex(cachedBreakPositions[positionInCache]);\n    return text.getIndex();\n  }\n}"}
{"ids": "41156", "raw_code": "protected static boolean signedFitsInNibble(int value){\n  return (value >= -8) && (value <= 7);\n}"}
{"ids": "49307", "raw_code": "@Override public void mousePressed(MouseEvent e){\n  events.clear();\n  if (mapDragOperationFromModifiers(e) != DnDConstants.ACTION_NONE) {\n    try {\n      motionThreshold=DragSource.getDragThreshold();\n    }\n catch (    Exception exc) {\n      motionThreshold=5;\n    }\n    appendEvent(e);\n  }\n}"}
{"ids": "67732", "raw_code": "public void simpleElement(String name,String value) throws IOException {\n  simpleElement(null,name,null,value);\n}"}
{"ids": "17923", "raw_code": "public static boolean isValidIPv4(String address){\n  if (address.length() == 0) {\n    return false;\n  }\n  int octet;\n  int octets=0;\n  String temp=address + \".\";\n  int pos;\n  int start=0;\n  while (start < temp.length() && (pos=temp.indexOf('.',start)) > start) {\n    if (octets == 4) {\n      return false;\n    }\n    try {\n      octet=Integer.parseInt(temp.substring(start,pos));\n    }\n catch (    NumberFormatException ex) {\n      return false;\n    }\n    if (octet < 0 || octet > 255) {\n      return false;\n    }\n    start=pos + 1;\n    octets++;\n  }\n  return octets == 4;\n}"}
{"ids": "25779", "raw_code": "private void validateDimensionCSV(SchemaInfo schemaInfo,String factTableName,String dimTableName,CarbonFile dimFile,String partitionId,CarbonDataLoadSchema schema,String delimiter) throws DataLoadingException {\n  String[] columnNames=getDimColumnNames(schemaInfo,factTableName,dimTableName,partitionId,schema);\n  if (null == columnNames || columnNames.length < 1) {\n    return;\n  }\n  if (!checkAllColumnsPresent(columnNames,dimFile.getAbsolutePath(),delimiter)) {\n    LOGGER.error(\"CSV File provided is not proper. Column names in schema and csv header are not same. \" + \"CSVFile Name : \" + dimFile.getName());\n    throw new DataLoadingException(DataProcessorConstants.CSV_VALIDATION_ERRROR_CODE,\"Dimension CSV file provided is not proper. Column names in Schema and csv header are \" + \"not same. CSVFile Name : \" + dimFile.getName());\n  }\n}"}
{"ids": "73446", "raw_code": "private DataPoint isUnique(Node from,DataPoint point,double tolerance){\n  if (logger.isDebugEnabled())   logger.debug(\"is unique? tolerance \" + tolerance + \" - \"+ point);\n  while (from.type == Type.branch) {\n    Branch branch=(Branch)from;\n    double d=point.get(branch.splitDimension);\n    if (Math.abs(d - branch.midPoint) < tolerance) {\n      if (logger.isDebugEnabled())       logger.debug(\"at branch : \" + branch + \" - recursing both paths\");\n      DataPoint leftCheck=isUnique(branch.left,point,tolerance);\n      DataPoint rightCheck=isUnique(branch.right,point,tolerance);\n      if ((leftCheck == null) && (rightCheck == null)) {\n        return null;\n      }\n else {\n        if (leftCheck != null) {\n          return leftCheck;\n        }\n else {\n          return rightCheck;\n        }\n      }\n    }\n else     if (point.getVector()[branch.splitDimension] < branch.midPoint) {\n      if (logger.isDebugEnabled())       logger.debug(\"at branch : \" + branch + \" - going left\");\n      from=branch.left;\n    }\n else {\n      if (logger.isDebugEnabled())       logger.debug(\"at branch : \" + branch + \" - going right\");\n      from=branch.right;\n    }\n  }\n  Leaf leaf=(Leaf)from;\n  for (  DataPoint p : leaf.points) {\n    for (int i=0; i < p.getDimension(); i++) {\n      if (Math.abs(p.get(i) - point.get(i)) >= tolerance) {\n        break;\n      }\n    }\n    if (getDistance(p,point) < tolerance) {\n      return p;\n    }\n  }\n  return null;\n}"}
{"ids": "63655", "raw_code": "public boolean removeTuple(Tuple t){\n  Table table=t.getTable();\n  if (m_sets.contains(table)) {\n    return table.removeTuple(t);\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "16988", "raw_code": "private boolean isDarkThemeSet(){\n  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(getActivity());\n  String key=getString(R.string.theme_preference_key);\n  String defaultValue=getString(R.string.theme_preference_default_value);\n  return Integer.valueOf(sharedPreferences.getString(key,defaultValue)) != 0;\n}"}
{"ids": "65286", "raw_code": "@Deprecated public void addPrefixNSMapping(String prefix,String nsURI){\n  if (nsURI.length() == 0) {\n    throw new IllegalArgumentException(\"Cannot map empty string URI\");\n  }\n  if (prefix.length() == 0) {\n    throw new IllegalArgumentException(\"Cannot map empty string prefix\");\n  }\n  if (prefix.equals(NO_NS_PREFIX)) {\n    throw new IllegalArgumentException(\"The prefix: \" + prefix + \" cannot be registered, it's reserved for special internal use.\");\n  }\n  if (prefixToNamespaceURILookup.containsKey(prefix)) {\n    throw new IllegalArgumentException(\"The prefix: '\" + prefix + \"' was repeated. This is illegal.\");\n  }\n  if (namespaceURIToPrefixLookup.containsKey(nsURI)) {\n    throw new IllegalArgumentException(\"The namespace URI: \" + nsURI + \" cannot be mapped to 2 different prefixes.\");\n  }\n  if (prefix.equals(DEFAULT_NAMESPACE_PREFIX)) {\n    this.defaultNS=nsURI;\n  }\n else {\n    prefixToNamespaceURILookup.put(prefix,nsURI);\n    namespaceURIToPrefixLookup.put(nsURI,prefix);\n  }\n}"}
{"ids": "23994", "raw_code": "protected Message createResponseMessage(){\n  return new Message(1,Version.CURRENT);\n}"}
{"ids": "12458", "raw_code": "public static void o(double a){\n  o(a,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);\n}"}
{"ids": "5204", "raw_code": "public void writeField(String name,String value) throws IOException {\n  if (name == null) {\n    throw new IllegalArgumentException(\"Name cannot be null or empty.\");\n  }\n  out.writeBytes(PREFIX);\n  out.writeBytes(boundary);\n  out.writeBytes(NEWLINE);\n  out.writeBytes(\"Content-Disposition: form-data; name=\\\"\" + name + \"\\\"\");\n  out.writeBytes(NEWLINE);\n  out.writeBytes(NEWLINE);\n  if (value != null) {\n    out.writeBytes(value);\n  }\n  out.writeBytes(NEWLINE);\n  out.flush();\n}"}
{"ids": "26890", "raw_code": "public int drainTo(Collection<? super E> c){\n  int result=buffer.drainTo(c);\n  if (producer != null) {\n    producer.wakeUp();\n  }\n  return result;\n}"}
{"ids": "53453", "raw_code": "protected void grow(){\n  if (dists == EMPTY_DISTS) {\n    dists=new double[INITIAL_SIZE];\n    ids=new int[INITIAL_SIZE];\n    return;\n  }\n  final int len=dists.length;\n  final int newlength=len + (len >> 1);\n  double[] odists=dists;\n  dists=new double[newlength];\n  System.arraycopy(odists,0,dists,0,odists.length);\n  int[] oids=ids;\n  ids=new int[newlength];\n  System.arraycopy(oids,0,ids,0,oids.length);\n}"}
{"ids": "32148", "raw_code": "IgfsInputStreamImpl(IgfsContext igfsCtx,IgfsPath path,@Nullable IgfsEntryInfo fileInfo,int prefetchBlocks,int seqReadsBeforePrefetch,@Nullable IgfsSecondaryFileSystemPositionedReadable secReader,long len,int blockSize,long blocksCnt,boolean proxy){\n  assert igfsCtx != null;\n  assert path != null;\n  this.igfsCtx=igfsCtx;\n  this.path=path;\n  this.fileInfo=fileInfo;\n  this.prefetchBlocks=prefetchBlocks;\n  this.seqReadsBeforePrefetch=seqReadsBeforePrefetch;\n  this.secReader=secReader;\n  this.len=len;\n  this.blockSize=blockSize;\n  this.blocksCnt=blocksCnt;\n  this.proxy=proxy;\n  log=igfsCtx.kernalContext().log(IgfsInputStream.class);\n  maxLocCacheSize=(prefetchBlocks > 0 ? prefetchBlocks : 1) * 3 / 2;\n  locCache=new LinkedHashMap<>(maxLocCacheSize,1.0f);\n  pendingFuts=new GridConcurrentHashSet<>(prefetchBlocks > 0 ? prefetchBlocks : 1);\n  igfsCtx.metrics().incrementFilesOpenedForRead();\n}"}
{"ids": "27612", "raw_code": "public AbstractScaleOutClientIndexView(final AbstractScaleOutFederation fed,final String name,final long timestamp,final IMetadataIndex metadataIndex){\n  if (fed == null)   throw new IllegalArgumentException();\n  if (name == null)   throw new IllegalArgumentException();\n  if (metadataIndex == null)   throw new IllegalArgumentException();\n  this.fed=fed;\n  this.name=name;\n  this.timestamp=timestamp;\n  this.metadataIndex=metadataIndex;\n  this.metadataIndexMetadata=metadataIndex.getIndexMetadata();\n  final AbstractClient<?> client=fed.getClient();\n  this.capacity=client.getDefaultRangeQueryCapacity();\n  this.batchOnly=client.getBatchApiOnly();\n  this.taskTimeout=client.getTaskTimeout();\n  this.readConsistent=client.isReadConsistent();\n}"}
{"ids": "21105", "raw_code": "public boolean canSendEvent(){\n  try {\n    validateSendEvent();\n    return true;\n  }\n catch (  Exception e) {\n    return false;\n  }\n}"}
{"ids": "6694", "raw_code": "public static final String capitalize(String str,char... delimiters){\n  final int delimLen=delimiters == null ? -1 : delimiters.length;\n  if (TextUtils.isEmpty(str) || delimLen == 0) {\n    return str;\n  }\n  final char[] buffer=str.toCharArray();\n  boolean capitalizeNext=true;\n  for (int i=0; i < buffer.length; i++) {\n    char ch=buffer[i];\n    if (isDelimiter(ch,delimiters)) {\n      capitalizeNext=true;\n    }\n else     if (capitalizeNext) {\n      buffer[i]=Character.toTitleCase(ch);\n      capitalizeNext=false;\n    }\n  }\n  return new String(buffer);\n}"}
{"ids": "45235", "raw_code": "public void write(OutputStream out) throws SocksException, IOException {\n  if (data == null) {\n    Socks5Message msg;\n    if (addrType == SOCKS_ATYP_DOMAINNAME)     msg=new Socks5Message(command,host,port);\n else {\n      if (ip == null) {\n        try {\n          ip=InetAddress.getByName(host);\n        }\n catch (        UnknownHostException uh_ex) {\n          throw new SocksException(SocksConstants.SOCKS_JUST_ERROR);\n        }\n      }\n      msg=new Socks5Message(command,ip,port);\n    }\n    data=msg.data;\n  }\n  out.write(data);\n}"}
{"ids": "57944", "raw_code": "TemplateSubPatternAssociation(ElemTemplate template,StepPattern pattern,String pat){\n  m_pattern=pat;\n  m_template=template;\n  m_stepPattern=pattern;\n  m_targetString=m_stepPattern.getTargetString();\n  m_wild=m_targetString.equals(\"*\");\n}"}
{"ids": "77755", "raw_code": "public static byte[] compressForZlib(byte[] bytesToCompress){\n  Deflater deflater=new Deflater();\n  deflater.setInput(bytesToCompress);\n  deflater.finish();\n  byte[] bytesCompressed=new byte[Short.MAX_VALUE];\n  int numberOfBytesAfterCompression=deflater.deflate(bytesCompressed);\n  byte[] returnValues=new byte[numberOfBytesAfterCompression];\n  System.arraycopy(bytesCompressed,0,returnValues,0,numberOfBytesAfterCompression);\n  return returnValues;\n}"}
{"ids": "35632", "raw_code": "private static ByteBuffer generateWavData(int sampleCount,int freqHz){\n  final int numDataBytes=sampleCount * NUM_CHANNELS * BITS_PER_SAMPLE / 8;\n  final double freq=freqHz;\n  ByteBuffer buf=ByteBuffer.allocate(numDataBytes);\n  buf.order(ByteOrder.LITTLE_ENDIAN);\n  if (BITS_PER_SAMPLE == 8) {\n    final double peak=127.0;\n    for (int i=0; i < sampleCount; i++) {\n      double timeSec=i / (double)SAMPLE_RATE;\n      double sinValue=Math.sin(2 * Math.PI * freq* timeSec);\n      if (GameSurfaceRenderer.EXTRA_CHECK) {\n        int output=(int)(peak * sinValue + 127.0);\n        if (output < 0 || output >= 256) {\n          throw new RuntimeException(\"bad byte gen\");\n        }\n      }\n      buf.put((byte)(peak * sinValue + 127.0));\n    }\n  }\n else   if (BITS_PER_SAMPLE == 16) {\n    final double peak=32767.0;\n    ShortBuffer sbuf=buf.asShortBuffer();\n    for (int i=0; i < sampleCount; i++) {\n      double timeSec=i / (double)SAMPLE_RATE;\n      double sinValue=Math.sin(2 * Math.PI * freq* timeSec);\n      sbuf.put((short)(peak * sinValue));\n    }\n  }\n  buf.position(0);\n  return buf;\n}"}
{"ids": "55100", "raw_code": "protected static String h2c(String hyphenated,boolean studly){\n  StringBuilder b=new StringBuilder(hyphenated.length());\n  boolean capNext=studly;\n  for (int i=0; i < hyphenated.length(); ++i) {\n    char c=hyphenated.charAt(i);\n    if (c == '-')     capNext=true;\n else {\n      b.append(capNext ? Character.toUpperCase(c) : c);\n      capNext=false;\n    }\n  }\n  return b.toString();\n}"}
{"ids": "30622", "raw_code": "public synchronized void onWriteEvent() throws IOException {\n  LRMIInvocationTrace trace=null;\n  try {\n    while (!_contexts.isEmpty()) {\n      Context current=_contexts.peek();\n      trace=current.getTrace();\n      if (trace != null)       LRMIInvocationContext.updateContext(trace,null,null,null,null,false,null,null);\n      noneBlockingWrite(current);\n      if (current.getPhase() != Context.Phase.FINISH) {\n        setWriteInterest();\n        break;\n      }\n else {\n        traceContextTotalWriteTime(current);\n        _contexts.poll();\n        pendingWrites.decrement();\n      }\n    }\n    if (_contexts.isEmpty()) {\n      removeWriteInterest(true);\n    }\n  }\n  finally {\n    if (trace != null)     LRMIInvocationContext.resetContext();\n  }\n}"}
{"ids": "86719", "raw_code": "public static void add(Object spy){\n  SPIES.add(spy);\n}"}
{"ids": "15865", "raw_code": "void initLeafCalc(byte[] seed0){\n  this.i=0;\n  this.j=0;\n  byte[] dummy=new byte[mdsize];\n  System.arraycopy(seed0,0,dummy,0,seed.length);\n  this.seed=gmssRandom.nextSeed(dummy);\n}"}
{"ids": "11934", "raw_code": "@Override public boolean downloadFile(String path,String dest){\n  try {\n    FileOutputStream fos=new FileOutputStream(new File(dest));\n    mDBApi.getFile(path,null,fos,null);\n    fos.close();\n    return true;\n  }\n catch (  DropboxException e) {\n    e.printStackTrace();\n    return false;\n  }\ncatch (  FileNotFoundException e) {\n    e.printStackTrace();\n    return false;\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n    return false;\n  }\n}"}
{"ids": "61221", "raw_code": "boolean doesOccur(QName refName){\n  return m_refs.contains(refName);\n}"}
{"ids": "62732", "raw_code": "public long loop(){\n  final long currentTimestamp=System.currentTimeMillis();\n  final long timeDiff=currentTimestamp - lastRunTimestamp;\n  final int shutdownDiff=(int)(System.currentTimeMillis() - gameShutdownRequestTimestamp);\n  final float shutdownProgress=shutdownDiff >= FLYING_SUPERMAN_DELAY && gameState.equals(GameState.SHUTDOWN_REQUESTED) ? (shutdownDiff - FLYING_SUPERMAN_DELAY) / (float)(GAME_SHUTDOWN_DELAY - FLYING_SUPERMAN_DELAY) : 0;\n  snowflakesCollection.onTimePassed(timeDiff);\n  presentsCollection.onTimePassed(timeDiff);\n  if (gameState.equals(GameState.SHUTDOWN_REQUESTED)) {\n    player.setyPos(getDefaultPlayerHeight() * (1 - shutdownProgress) - (player.getHeight() * shutdownProgress));\n    supermanClouds.setyPos(supermanClouds.getHeight() * (1 - shutdownProgress) - ((supermanClouds.getHeight() - fieldHeight) * shutdownProgress));\n    if (shutdownProgress >= 1) {\n      gameState=GameState.STOPPED;\n    }\n  }\n else {\n    if (player.isInState(PlayerState.CHEWING) && player.getChewingDuration() >= PLAYER_CHEWING_DURATION_IN_MS) {\n      player.setState(PlayerState.DEFAULT);\n    }\n    if (player.isInState(PlayerState.HIT) && player.getHitDuration() >= PLAYER_HIT_DURATION_IN_MS) {\n      player.setState(PlayerState.DEFAULT);\n    }\n    if (newPlayerLocation != null) {\n      player.setxPos(newPlayerLocation.x);\n      player.setyPos(newPlayerLocation.y);\n      newPlayerLocation=null;\n    }\n  }\n  boolean playerBelowObject=updateFallingObjects(timeDiff,shutdownProgress,snowflakesCollection,true,false) | updateFallingObjects(timeDiff,shutdownProgress,presentsCollection,false,true);\n  if (player.isInState(PlayerState.DEFAULT) || player.isInState(PlayerState.LOOKING_UP)) {\n    if (playerBelowObject) {\n      player.setState(PlayerState.LOOKING_UP);\n    }\n else {\n      player.setState(PlayerState.DEFAULT);\n    }\n  }\n  lastRunTimestamp=currentTimestamp;\n  return timeDiff;\n}"}
{"ids": "26444", "raw_code": "public static DateFormat toDateFormat(String dateFormat,TimeZone tz,Locale locale){\n  DateFormat df=null;\n  if (UtilValidate.isEmpty(dateFormat)) {\n    df=DateFormat.getDateInstance(DateFormat.SHORT,locale);\n  }\n else {\n    df=new SimpleDateFormat(dateFormat,locale == null ? Locale.getDefault() : locale);\n  }\n  df.setTimeZone(tz);\n  return df;\n}"}
{"ids": "10704", "raw_code": "public Integer loadIdNameValues(DbOutputStatement statement,Integer idx) throws Exception {\n  int index=idx.intValue();\n  if (_logger.isDebugEnabled())   _logger.debug(\"loadIdNameValue\");\n  _id=statement.getLongInteger(index++);\n  _name=statement.getShortText(index++);\n  return new Integer(index);\n}"}
{"ids": "68797", "raw_code": "private byte[] padPassword(byte[] password){\n  if (password == null) {\n    password=new byte[0];\n  }\n  byte[] padded=new byte[32];\n  final int numContributingPasswordBytes=password.length > padded.length ? padded.length : password.length;\n  System.arraycopy(password,0,padded,0,numContributingPasswordBytes);\n  if (password.length < padded.length) {\n    System.arraycopy(PW_PADDING,0,padded,password.length,padded.length - password.length);\n  }\n  return padded;\n}"}
{"ids": "52780", "raw_code": "private double maxDistLevel(DBID id,int level){\n  final NumberVector obj=relation.get(id);\n  final double r=1.0 / (1 << (level - 1));\n  double dist;\n  if (t == 1.0) {\n    dist=0.0;\n    for (int dim=0; dim < d; dim++) {\n      final double p_m_r=getDimForObject(obj,dim) % r;\n      dist+=Math.max(p_m_r,r - p_m_r);\n    }\n  }\n else   if (t == 2.0) {\n    dist=0.0;\n    for (int dim=0; dim < d; dim++) {\n      final double p_m_r=getDimForObject(obj,dim) % r;\n      double a=Math.max(p_m_r,r - p_m_r);\n      dist+=a * a;\n    }\n    dist=Math.sqrt(dist);\n  }\n else   if (!Double.isInfinite(t)) {\n    dist=0.0;\n    for (int dim=0; dim < d; dim++) {\n      final double p_m_r=getDimForObject(obj,dim) % r;\n      dist+=Math.pow(Math.max(p_m_r,r - p_m_r),t);\n    }\n    dist=Math.pow(dist,1.0 / t);\n  }\n else {\n    dist=Double.NEGATIVE_INFINITY;\n    for (int dim=0; dim < d; dim++) {\n      final double p_m_r=getDimForObject(obj,dim) % r;\n      dist=Math.max(dist,Math.max(p_m_r,r - p_m_r));\n    }\n  }\n  return dist * diameter;\n}"}
{"ids": "55848", "raw_code": "public final int moveMade(long now,boolean useIncrement){\n  stopTimer(now);\n  ArrayList<TimeControlField> tc=tcData.getTC(whiteToMove);\n  Pair<Integer,Integer> tcInfo=getCurrentTC(whiteToMove);\n  int tcIdx=tcInfo.first;\n  int movesToTc=tcInfo.second;\n  int remaining=getRemainingTime(whiteToMove,now);\n  if (useIncrement) {\n    remaining+=tc.get(tcIdx).increment;\n    if (movesToTc == 1) {\n      if (tcIdx + 1 < tc.size())       tcIdx++;\n      remaining+=tc.get(tcIdx).timeControl;\n    }\n  }\n  elapsed=0;\n  return remaining;\n}"}
{"ids": "33826", "raw_code": "public static Properties prefixProperties(Properties props,String prefix){\n  Properties prefixProps=new Properties();\n  for (  String key : props.stringPropertyNames()) {\n    if (key.startsWith(prefix)) {\n      String keyWithoutPrefix=key.substring(prefix.length());\n      prefixProps.setProperty(keyWithoutPrefix,props.getProperty(key));\n    }\n  }\n  return prefixProps;\n}"}
{"ids": "40110", "raw_code": "public synchronized void start(){\n  if (isStarted) {\n    return;\n  }\n  if (isStopped) {\n    throw new IllegalStateException(\"Cannot restart a TorClient instance.  Create a new instance instead.\");\n  }\n  logger.info(\"Starting Orchid (version: \" + Tor.getFullVersion() + \")\");\n  verifyUnlimitedStrengthPolicyInstalled();\n  directoryDownloader.start(directory);\n  circuitManager.startBuildingCircuits();\n  if (dashboard.isEnabledByProperty()) {\n    dashboard.startListening();\n  }\n  isStarted=true;\n}"}
{"ids": "57845", "raw_code": "public static CipherParameters makePBEParameters(PBEKeySpec keySpec,int type,int hash,int keySize,int ivSize){\n  PBEParametersGenerator generator=makePBEGenerator(type,hash);\n  byte[] key;\n  CipherParameters param;\n  key=convertPassword(type,keySpec);\n  generator.init(key,keySpec.getSalt(),keySpec.getIterationCount());\n  if (ivSize != 0) {\n    param=generator.generateDerivedParameters(keySize,ivSize);\n  }\n else {\n    param=generator.generateDerivedParameters(keySize);\n  }\n  for (int i=0; i != key.length; i++) {\n    key[i]=0;\n  }\n  return param;\n}"}
{"ids": "39279", "raw_code": "@Override public double value(int attIndex){\n  int index=locateIndex(attIndex);\n  if ((index >= 0) && (m_Indices[index] == attIndex)) {\n    return 1.0;\n  }\n else {\n    return 0.0;\n  }\n}"}
{"ids": "79747", "raw_code": "private void fetchFilterSeeds(){\n  if (seedList == null || seedList.isEmpty()) {\n    return;\n  }\n  for (Iterator<URI> it=seedList.iterator(); it.hasNext(); ) {\n    URI seed=it.next();\n    for (    FetchFilter filter : controller.getFetchFilters()) {\n      FetchStatus filterReason=filter.checkFilter(seed);\n      if (filterReason != FetchStatus.VALID) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Seed: \" + seed + \" was filtered with reason: \"+ filterReason);\n        }\n        it.remove();\n        break;\n      }\n    }\n  }\n}"}
{"ids": "7684", "raw_code": "public XYAreaRenderer2(XYToolTipGenerator labelGenerator,XYURLGenerator urlGenerator){\n  super();\n  this.showOutline=false;\n  setBaseToolTipGenerator(labelGenerator);\n  setURLGenerator(urlGenerator);\n  GeneralPath area=new GeneralPath();\n  area.moveTo(0.0f,-4.0f);\n  area.lineTo(3.0f,-2.0f);\n  area.lineTo(4.0f,4.0f);\n  area.lineTo(-4.0f,4.0f);\n  area.lineTo(-3.0f,-2.0f);\n  area.closePath();\n  this.legendArea=area;\n}"}
{"ids": "25602", "raw_code": "public static boolean isPrimitiveOrWrapper(Class<?> clazz){\n  Assert.notNull(clazz,\"Class must not be null\");\n  return (clazz.isPrimitive() || isPrimitiveWrapper(clazz));\n}"}
{"ids": "39687", "raw_code": "private void assertFileContains(List<String> expected,String filename) throws Exception {\n  try (BufferedReader reader=new BufferedReader(new FileReader(filename))){\n    List<String> actual=new ArrayList<>();\n    for (; ; ) {\n      String line=reader.readLine();\n      if (line == null) {\n        break;\n      }\n      actual.add(line);\n    }\n    assertEquals(expected,actual);\n  }\n }"}
{"ids": "24482", "raw_code": "private void reportException(Kind kind,Element element,Throwable t){\n  StringWriter buf=new StringWriter();\n  t.printStackTrace(new PrintWriter(buf));\n  buf.toString();\n  message(kind,element,\"Exception thrown during processing: %s\",buf.toString());\n}"}
{"ids": "83837", "raw_code": "public void add(String[] titles,double[] values){\n  add(mCategories.size() + \"\",titles,values);\n}"}
{"ids": "41475", "raw_code": "static String parseAuthority(String uriString,int ssi){\n  int length=uriString.length();\n  if (length > ssi + 2 && uriString.charAt(ssi + 1) == '/' && uriString.charAt(ssi + 2) == '/') {\n    int end=ssi + 3;\n    LOOP:     while (end < length) {\nswitch (uriString.charAt(end)) {\ncase '/':\ncase '?':\ncase '#':\n        break LOOP;\n    }\n    end++;\n  }\n  return uriString.substring(ssi + 3,end);\n}\n else {\n  return null;\n}\n}"}
{"ids": "72611", "raw_code": "public static void sort(List<?> list){\n  if (list.size() > 1) {\n    Collections.sort(list,INSTANCE);\n  }\n}"}
{"ids": "38208", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(5);\n  newVector.addElement(new Option(\"\\tChoose attribute to be used for selection.\",\"C\",1,\"-C <num>\"));\n  newVector.addElement(new Option(\"\\tNumber of values to retain for the sepcified attribute, \\n\" + \"\\ti.e. the ones with the most instances (default 2).\",\"N\",1,\"-N <num>\"));\n  newVector.addElement(new Option(\"\\tInstead of values with the most instances the ones with the \\n\" + \"\\tleast are retained.\\n\",\"L\",0,\"-L\"));\n  newVector.addElement(new Option(\"\\tWhen selecting on nominal attributes, removes header\\n\" + \"\\treferences to excluded values.\",\"H\",0,\"-H\"));\n  newVector.addElement(new Option(\"\\tInvert matching sense.\",\"V\",0,\"-V\"));\n  return newVector.elements();\n}"}
{"ids": "59501", "raw_code": "public void addDatatransferProgressListener(OnDatatransferProgressListener listener,OCUpload ocUpload){\n  if (ocUpload == null || listener == null)   return;\n  String targetKey=buildRemoteName(ocUpload.getAccountName(),ocUpload.getRemotePath());\n  mBoundListeners.put(targetKey,listener);\n}"}
{"ids": "45005", "raw_code": "private static char[] zzUnpackCMap(String packed){\n  char[] map=new char[0x10000];\n  int i=0;\n  int j=0;\n  while (i < 194) {\n    int count=packed.charAt(i++);\n    char value=packed.charAt(i++);\n    do     map[j++]=value;\n while (--count > 0);\n  }\n  return map;\n}"}
{"ids": "19740", "raw_code": "protected String[] readNext(LineNumberReader reader) throws IOException {\n  String[] rowDef=null;\n  do {\n    String nextLine=reader.readLine();\n    if (nextLine == null) {\n      hasNext=false;\n      return rowDef;\n    }\n    String[] r=parser.parseLineMulti(nextLine);\n    if (r.length > 0) {\n      if (rowDef == null) {\n        rowDef=r;\n      }\n else {\n        String[] t=new String[rowDef.length + r.length];\n        System.arraycopy(rowDef,0,t,0,rowDef.length);\n        System.arraycopy(r,0,t,rowDef.length,r.length);\n        rowDef=t;\n      }\n    }\n  }\n while (parser.isPending());\n  return rowDef;\n}"}
{"ids": "56903", "raw_code": "private void verifyPropertySourceValue(ReloadablePropertySource reloadablePropertySource,String expectedValue){\n  logger.debug(\"Reading key \" + TEST_KEY + \" and expecting value \"+ expectedValue);\n  logger.debug(\"Properties file value is \" + properties.get(TEST_KEY) + \" and reloadable property source value is \"+ reloadablePropertySource.getProperty(TEST_KEY));\n  String value=(String)reloadablePropertySource.getProperty(TEST_KEY);\n  assertEquals(expectedValue,value);\n}"}
{"ids": "6595", "raw_code": "private void updateCenterPanel(){\n  long now=System.currentTimeMillis();\n  if (_nextUpdateTime > now)   return;\n  _nextUpdateTime=now + 1000 * 5;\n  _centerPanel.removeAll();\n  _centerComponent=new JLabel();\n  GridBagConstraints gbc=new GridBagConstraints();\n  gbc.gridx=0;\n  gbc.gridy=0;\n  gbc.weightx=0;\n  gbc.fill=GridBagConstraints.NONE;\n  gbc.anchor=GridBagConstraints.CENTER;\n  _centerPanel.add(_centerComponent,gbc);\n  refresh();\n}"}
{"ids": "15453", "raw_code": "public void serviceRequestQueue() throws CLIException {\n  if (isVerbose()) {\n    outputWriter.printlnMessage(rbMessages.getString(\"verbose-processing-request\"));\n  }\n  try {\n    while (!requestQueue.isEmpty()) {\n      CLIRequest req=(CLIRequest)requestQueue.remove(0);\n      try {\n        req.process(this);\n        if (statusOS != null) {\n          String status=formatStatus(req.getOptions(),0);\n          statusOS.write(status.getBytes());\n        }\n      }\n catch (      CLIException e) {\n        if (isVerbose()) {\n          e.printStackTrace(System.out);\n        }\n        if (statusOS != null) {\n          String status=formatStatus(req.getOptions(),e.getExitCode());\n          statusOS.write(status.getBytes());\n        }\n        if (bContinue) {\n          outputWriter.printlnError(e.getMessage());\n        }\n else {\n          throw e;\n        }\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n  }\n finally {\n    if (statusOS != null) {\n      try {\n        statusOS.close();\n      }\n catch (      IOException ex) {\n      }\n      statusOS=null;\n    }\n  }\n}"}
{"ids": "9564", "raw_code": "AlwaysIdenticalKeyStoreState(){\n  super();\n}"}
{"ids": "25905", "raw_code": "public static byte[] packByteBufferIntoSingleByteArray(ByteBuffer[] byteBufferArr){\n  if (null == byteBufferArr || byteBufferArr.length == 0) {\n    return null;\n  }\n  int noOfCol=byteBufferArr.length;\n  short offsetLen=(short)(noOfCol * 2);\n  int totalBytes=calculateTotalBytes(byteBufferArr) + offsetLen;\n  ByteBuffer buffer=ByteBuffer.allocate(totalBytes);\n  buffer.putShort(offsetLen);\n  for (int index=0; index < byteBufferArr.length - 1; index++) {\n    ByteBuffer individualCol=byteBufferArr[index];\n    int noOfBytes=individualCol.capacity();\n    buffer.putShort((short)(offsetLen + noOfBytes));\n    offsetLen+=noOfBytes;\n    individualCol.rewind();\n  }\n  for (int index=0; index < byteBufferArr.length; index++) {\n    ByteBuffer individualCol=byteBufferArr[index];\n    buffer.put(individualCol.array());\n  }\n  buffer.rewind();\n  return buffer.array();\n}"}
{"ids": "64887", "raw_code": "public void stop(){\n  mCancel=true;\n  if (mRunning.compareAndSet(true,false)) {\n    if (mSampleDispatcherTask != null) {\n      mThreadPoolManager.cancel(mSampleDispatcherTask);\n      mSampleDispatcherTask=null;\n      mFilledBuffers.clear();\n    }\n  }\n}"}
{"ids": "33023", "raw_code": "public void add(SimpleName ref){\n  String typeName=ref.getIdentifier();\n  if (fImportsAdded.contains(typeName)) {\n    return;\n  }\n  IBinding binding=ref.resolveBinding();\n  if (binding != null) {\n    if (binding.getKind() != IBinding.TYPE) {\n      return;\n    }\n    ITypeBinding typeBinding=(ITypeBinding)binding;\n    if (typeBinding.isArray()) {\n      typeBinding=typeBinding.getElementType();\n    }\n    typeBinding=typeBinding.getTypeDeclaration();\n    if (!typeBinding.isRecovered()) {\n      if (needsImport(typeBinding,ref)) {\n        fImpStructure.addImport(typeBinding);\n        fImportsAdded.add(typeName);\n      }\n      return;\n    }\n  }\n else {\n    if (fDoIgnoreLowerCaseNames && typeName.length() > 0) {\n      char ch=typeName.charAt(0);\n      if (Strings.isLowerCase(ch) && Character.isLetter(ch)) {\n        return;\n      }\n    }\n  }\n  fImportsAdded.add(typeName);\n  fUnresolvedTypes.put(typeName,new UnresolvedTypeData(ref));\n}"}
{"ids": "25190", "raw_code": "public void addAllSearchables(ArrayList<? extends SearchResult> searchable){\n  mSearchableList.addAll(searchable);\n}"}
{"ids": "66842", "raw_code": "public List<ValueBox> addArgumentHotspots(String signature,int arg){\n  List<ValueBox> sigSpots=StringAnalysis.getArgumentExpressions(signature,arg);\n  return addArgumentHotspots(signature,arg,sigSpots);\n}"}
{"ids": "77331", "raw_code": "public static String JQ(String request) throws Exception {\n  int queryStartPos=request.indexOf('?');\n  String query;\n  String path;\n  if (-1 == queryStartPos) {\n    query=\"\";\n    path=request;\n  }\n else {\n    query=request.substring(queryStartPos + 1);\n    path=request.substring(0,queryStartPos);\n  }\n  query=setParam(query,\"wt\",\"json\");\n  request=path + '?' + setParam(query,\"indent\",\"on\");\n  String response;\n  boolean failed=true;\n  try {\n    response=restTestHarness.query(request);\n    failed=false;\n  }\n  finally {\n    if (failed) {\n      log.error(\"REQUEST FAILED: \" + request);\n    }\n  }\n  return response;\n}"}
{"ids": "2187", "raw_code": "static void sort(int[] a,int left,int right,int[] work,int workBase,int workLen){\n  if (right - left < QUICKSORT_THRESHOLD) {\n    sort(a,left,right,true);\n    return;\n  }\n  int[] run=new int[MAX_RUN_COUNT + 1];\n  int count=0;\n  run[0]=left;\n  for (int k=left; k < right; run[count]=k) {\n    while (k < right && a[k] == a[k + 1])     k++;\n    if (k == right)     break;\n    if (a[k] < a[k + 1]) {\n      while (++k <= right && a[k - 1] <= a[k])       ;\n    }\n else     if (a[k] > a[k + 1]) {\n      while (++k <= right && a[k - 1] >= a[k])       ;\n      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {\n        int t=a[lo];\n        a[lo]=a[hi];\n        a[hi]=t;\n      }\n    }\n    if (run[count] > left && a[run[count]] >= a[run[count] - 1]) {\n      count--;\n    }\n    if (++count == MAX_RUN_COUNT) {\n      sort(a,left,right,true);\n      return;\n    }\n  }\n  if (count == 0) {\n    return;\n  }\n else   if (count == 1 && run[count] > right) {\n    return;\n  }\n  right++;\n  if (run[count] < right) {\n    run[++count]=right;\n  }\n  byte odd=0;\n  for (int n=1; (n<<=1) < count; odd^=1)   ;\n  int[] b;\n  int ao, bo;\n  int blen=right - left;\n  if (work == null || workLen < blen || workBase + blen > work.length) {\n    work=new int[blen];\n    workBase=0;\n  }\n  if (odd == 0) {\n    System.arraycopy(a,left,work,workBase,blen);\n    b=a;\n    bo=0;\n    a=work;\n    ao=workBase - left;\n  }\n else {\n    b=work;\n    ao=0;\n    bo=workBase - left;\n  }\n  for (int last; count > 1; count=last) {\n    for (int k=(last=0) + 2; k <= count; k+=2) {\n      int hi=run[k], mi=run[k - 1];\n      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {\n        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {\n          b[i + bo]=a[p++ + ao];\n        }\n else {\n          b[i + bo]=a[q++ + ao];\n        }\n      }\n      run[++last]=hi;\n    }\n    if ((count & 1) != 0) {\n      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;\n      run[++last]=right;\n    }\n    int[] t=a;\n    a=b;\n    b=t;\n    int o=ao;\n    ao=bo;\n    bo=o;\n  }\n}"}
{"ids": "46609", "raw_code": "protected void shiftEnd(int newSize){\n  int oldSize=getArrayLength();\n  int oldGapEnd=g1;\n  int upperSize=oldSize - oldGapEnd;\n  int arrayLength=getNewArraySize(newSize);\n  int newGapEnd=arrayLength - upperSize;\n  resize(arrayLength);\n  g1=newGapEnd;\n  if (upperSize != 0) {\n    System.arraycopy(array,oldGapEnd,array,newGapEnd,upperSize);\n  }\n}"}
{"ids": "40330", "raw_code": "protected void processStyle12ExamineAndSetupAdjustment(Game game,Style12Message message,GameService service,String entireMessage){\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Processing bsetup/examine/obs examine position move.\");\n  }\n  if (game.isInState(Game.OBSERVING_EXAMINED_STATE) && message.relation == Style12Message.EXAMINING_GAME_RELATION) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Handling observer became examiner transition.\");\n    }\n    examineGamesWaitingOnMoves.put(game.getId(),message);\n    connector.sendMessage(\"moves \" + message.gameId,true,ChatType.MOVES);\n  }\n else   if (entireMessage.contains(\"- entering examine mode.\") || entireMessage.contains(\". Entering examine mode.\")) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Handling bsetup to examine mode transition.\");\n    }\n    Game examineGame=IcsUtils.createGame(message,entireMessage);\n    if (message.relation == Style12Message.EXAMINING_GAME_RELATION && !examineGame.isInState(Game.SETUP_STATE)) {\n      examineGamesWaitingOnMoves.put(game.getId(),message);\n      connector.sendMessage(\"moves \" + message.gameId,true,ChatType.MOVES);\n    }\n  }\n else   if (game.isInState(Game.EXAMINING_STATE) && (entireMessage.contains(\"Entering setup mode.\\n\") || entireMessage.contains(\"enters setup mode.\"))) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Handling examined game became setup game transition.\");\n    }\n    processExaminedGameBecameSetup();\n  }\n else   if (entireMessage.contains(\"entering examine mode.\\n\") || entireMessage.contains(\"Entering examine mode.\\n\")) {\n    examineGamesWaitingOnMoves.put(game.getId(),message);\n    connector.sendMessage(\"moves \" + message.gameId,true,ChatType.MOVES);\n  }\n else {\n    IcsUtils.resetGame(game,message);\n    service.fireGameStateChanged(message.gameId,false);\n    connector.sendMessage(\"moves \" + message.gameId,true,ChatType.MOVES);\n  }\n}"}
{"ids": "86770", "raw_code": "public SamFilterChain(Collection<SamFilter> filters){\n  mFilters=filters.toArray(new SamFilter[filters.size()]);\n}"}
{"ids": "46602", "raw_code": "PreviousWordAction(String nm,boolean select){\n  super(nm);\n  this.select=select;\n}"}
{"ids": "27081", "raw_code": "static UnixStream<String> cat(final String filePath) throws IOException {\n  Objects.requireNonNull(filePath,\"The file path must not be null\");\n  return new UnixStreamImpl<>(lines(Paths.get(filePath)));\n}"}
{"ids": "10162", "raw_code": "private static String encode_base64(byte d[],int len) throws IllegalArgumentException {\n  int off=0;\n  StringBuffer rs=new StringBuffer();\n  int c1, c2;\n  if (len <= 0 || len > d.length) {\n    throw new IllegalArgumentException(\"Invalid len\");\n  }\n  while (off < len) {\n    c1=d[off++] & 0xff;\n    rs.append(base64_code[(c1 >> 2) & 0x3f]);\n    c1=(c1 & 0x03) << 4;\n    if (off >= len) {\n      rs.append(base64_code[c1 & 0x3f]);\n      break;\n    }\n    c2=d[off++] & 0xff;\n    c1|=(c2 >> 4) & 0x0f;\n    rs.append(base64_code[c1 & 0x3f]);\n    c1=(c2 & 0x0f) << 2;\n    if (off >= len) {\n      rs.append(base64_code[c1 & 0x3f]);\n      break;\n    }\n    c2=d[off++] & 0xff;\n    c1|=(c2 >> 6) & 0x03;\n    rs.append(base64_code[c1 & 0x3f]);\n    rs.append(base64_code[c2 & 0x3f]);\n  }\n  return rs.toString();\n}"}
{"ids": "55464", "raw_code": "public void commercialResult(String stream,String resultText,RequestResult result){\n  setCommercialResult(DateTime.currentTime() + \" \" + resultText);\n  lastCommercialRunAttempt=System.currentTimeMillis();\n  setLoadingCommercial(false);\n  if (result == TwitchApi.RequestResult.RUNNING_COMMERCIAL) {\n    lastCommercial.put(stream,System.currentTimeMillis());\n    if (stream != null && stream.equals(currentChannel)) {\n      lastCommercialRun=System.currentTimeMillis();\n    }\n  }\n}"}
{"ids": "59966", "raw_code": "private static DetachISOResponse checkDetachISOResponse(DetachISOResponse detachISOResponse) throws RpcException {\n  logger.info(\"Checking {}\",detachISOResponse);\nswitch (detachISOResponse.getResult()) {\ncase OK:\n    break;\ncase ISO_NOT_ATTACHED:\n  logger.warn(\"detach_iso returned IsoNotAttachedException, response: {}\",detachISOResponse);\nthrow new IsoNotAttachedException(detachISOResponse.getError());\ncase SYSTEM_ERROR:\nlogger.warn(\"detach_iso returned SYSTEM_ERROR, response: {}\",detachISOResponse);\nthrow new SystemErrorException(detachISOResponse.getError());\ncase VM_NOT_FOUND:\nlogger.warn(\"detach_iso returned VmNotFoundException, response: {}\",detachISOResponse);\nthrow new VmNotFoundException(detachISOResponse.getError());\ndefault :\nthrow new RpcException(String.format(\"Unknown result: %s\",detachISOResponse.getResult()));\n}\nreturn detachISOResponse;\n}"}
{"ids": "66869", "raw_code": "public boolean is_terminal(MethodOrMethodContext mc){\n  Stack<SootMethod> sys_stack=new Stack<SootMethod>();\n  boolean result;\n  if (!is_system(mc.method()))   result=false;\n else {\n    if (!process_callbacks)     result=true;\n else {\n      if ((stack.size() > 0) && is_system(stack.peek()))       result=!calls_app_method(mc,sys_stack);\n else {\n        if (can_have_callbacks(mc.method()))         result=!calls_app_method(mc,sys_stack);\n else         result=true;\n      }\n    }\n  }\n  logger.info(\"  {} terminal = {}\",mc.method(),result);\n  return result;\n}"}
{"ids": "47181", "raw_code": "boolean tryMatch(SNode s){\n  if (match == null && UNSAFE.compareAndSwapObject(this,matchOffset,null,s)) {\n    Thread w=waiter;\n    if (w != null) {\n      waiter=null;\n      LockSupport.unpark(w);\n    }\n    return true;\n  }\n  return match == s;\n}"}
{"ids": "68750", "raw_code": "public void addItem(int position,M model){\n  mDatas.add(position,model);\n  notifyItemInserted(position);\n}"}
{"ids": "17751", "raw_code": "public final Set<String> aliases(){\n  return Collections.unmodifiableSet(this.aliasesSet);\n}"}
{"ids": "48210", "raw_code": "public void encode(OutputStream out) throws IOException {\n  DerOutputStream tmp=new DerOutputStream();\n  if (this.extensionValue == null) {\n    this.extensionId=PKIXExtensions.IssuingDistributionPoint_Id;\n    this.critical=false;\n    encodeThis();\n  }\n  super.encode(tmp);\n  out.write(tmp.toByteArray());\n}"}
{"ids": "47878", "raw_code": "public final void readChildren(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n  int count=serializable;\n  while (count-- > 0) {\n    Object child=null;\n    BeanContextSupport.BCSChild bscc=null;\n    try {\n      child=ois.readObject();\n      bscc=(BeanContextSupport.BCSChild)ois.readObject();\n    }\n catch (    IOException ioe) {\n      continue;\n    }\ncatch (    ClassNotFoundException cnfe) {\n      continue;\n    }\nsynchronized (child) {\n      BeanContextChild bcc=null;\n      try {\n        bcc=(BeanContextChild)child;\n      }\n catch (      ClassCastException cce) {\n      }\n      if (bcc != null) {\n        try {\n          bcc.setBeanContext(getBeanContextPeer());\n          bcc.addPropertyChangeListener(\"beanContext\",childPCL);\n          bcc.addVetoableChangeListener(\"beanContext\",childVCL);\n        }\n catch (        PropertyVetoException pve) {\n          continue;\n        }\n      }\n      childDeserializedHook(child,bscc);\n    }\n  }\n}"}
{"ids": "80526", "raw_code": "static boolean isChristmasTime(Calendar cal){\n  int month=cal.get(Calendar.MONTH);\n  int day=cal.get(Calendar.DAY_OF_MONTH);\n  if (month >= 1 && month < 10) {\n    return false;\n  }\n  if (month == 0) {\n    return day <= 6;\n  }\n  if (month == 10) {\n    return day >= 23;\n  }\n  return false;\n}"}
{"ids": "7430", "raw_code": "@Override public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source){\n  zoomRangeAxes(factor,info,source,false);\n}"}
{"ids": "70395", "raw_code": "private void boardSaveImage(){\n  if (curfileImage == null) {\n    boardSaveAsImage();\n    return;\n  }\n  JDialog waitD=new JDialog(frame,Messages.getString(\"BoardEditor.waitDialog.title\"));\n  waitD.add(new JLabel(Messages.getString(\"BoardEditor.waitDialog.message\")));\n  waitD.setSize(250,130);\n  waitD.setLocation((frame.getSize().width / 2) - (waitD.getSize().width / 2),(frame.getSize().height / 2) - (waitD.getSize().height / 2));\n  waitD.setVisible(true);\n  frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n  waitD.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n  try {\n    ImageIO.write(bv.getEntireBoardImage(),\"png\",curfileImage);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  waitD.setVisible(false);\n  frame.setCursor(Cursor.getDefaultCursor());\n}"}
{"ids": "74236", "raw_code": "public boolean containsName(String type,String name){\n  List<String> names=getNames(type);\n  return names.contains(name);\n}"}
{"ids": "52728", "raw_code": "@SuppressWarnings(\"unchecked\") public static <C extends Result>ArrayList<C> filterResults(ResultHierarchy hier,Result r,Class<? super C> restrictionClass){\n  ArrayList<C> res=new ArrayList<>();\n  if (restrictionClass.isInstance(r)) {\n    res.add((C)restrictionClass.cast(r));\n  }\n  for (Hierarchy.Iter<Result> iter=hier.iterDescendants(r); iter.valid(); iter.advance()) {\n    Result result=iter.get();\n    if (restrictionClass.isInstance(result)) {\n      res.add((C)restrictionClass.cast(result));\n    }\n  }\n  return res;\n}"}
{"ids": "34519", "raw_code": "private boolean hasNextProxy(){\n  return nextProxyIndex < proxies.size();\n}"}
{"ids": "37644", "raw_code": "protected boolean[] canHandleMissing(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing,int missingLevel){\n  if (missingLevel == 100) {\n    print(\"100% \");\n  }\n  print(\"missing\");\n  if (predictorMissing) {\n    print(\" predictor\");\n    if (classMissing) {\n      print(\" and\");\n    }\n  }\n  if (classMissing) {\n    print(\" class\");\n  }\n  print(\" values\");\n  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);\n  print(\"...\");\n  ArrayList<String> accepts=new ArrayList<String>();\n  accepts.add(\"missing\");\n  accepts.add(\"value\");\n  accepts.add(\"train\");\n  accepts.add(\"no attributes\");\n  int numTrain=getNumInstances(), numClasses=2;\n  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);\n}"}
{"ids": "4933", "raw_code": "public Set<BrdItem> pick_items(PlaPoint p_location,int p_layer,ItemSelectionFilter p_filter){\n  Set<BrdItem> result=new TreeSet<BrdItem>();\n  ShapeTileBox point_shape=p_location.to_box();\n  Collection<AwtreeObject> overlaps=overlapping_objects(point_shape,p_layer);\n  for (  AwtreeObject curr_object : overlaps) {\n    if (!(curr_object instanceof BrdItem))     continue;\n    BrdItem curr_item=(BrdItem)curr_object;\n    if (!curr_item.is_selected_by_filter(p_filter))     continue;\n    result.add(curr_item);\n  }\n  return result;\n}"}
{"ids": "84029", "raw_code": "public boolean isCollinearWith(Vector other){\n  if (x == 0 && y == 0 && z == 0) {\n    return true;\n  }\n  final double otherX=other.x;\n  final double otherY=other.y;\n  final double otherZ=other.z;\n  if (otherX == 0 && otherY == 0 && otherZ == 0) {\n    return true;\n  }\n  if ((x == 0) != (otherX == 0))   return false;\n  if ((y == 0) != (otherY == 0))   return false;\n  if ((z == 0) != (otherZ == 0))   return false;\n  final double quotientX=otherX / x;\n  if (!Double.isNaN(quotientX)) {\n    return other.equals(multiply(quotientX));\n  }\n  final double quotientY=otherY / y;\n  if (!Double.isNaN(quotientY)) {\n    return other.equals(multiply(quotientY));\n  }\n  final double quotientZ=otherZ / z;\n  if (!Double.isNaN(quotientZ)) {\n    return other.equals(multiply(quotientZ));\n  }\n  throw new RuntimeException(\"This should not happen\");\n}"}
{"ids": "64912", "raw_code": "public void receive(float[] currentFFTBins){\n  if (Float.isInfinite(currentFFTBins[0]) || Float.isNaN(currentFFTBins[0])) {\n    currentFFTBins=new float[currentFFTBins.length];\n  }\n  if (mDisplayFFTBins == null || mDisplayFFTBins.length != currentFFTBins.length) {\n    mDisplayFFTBins=currentFFTBins;\n  }\n  float[] smoothedBins=mSmoothingFilter.filter(currentFFTBins);\n  if (mAveraging > 1) {\n    float gain=1.0f / (float)mAveraging;\n    for (int x=0; x < mDisplayFFTBins.length; x++) {\n      mDisplayFFTBins[x]+=(smoothedBins[x] - mDisplayFFTBins[x]) * gain;\n    }\n  }\n else {\n    mDisplayFFTBins=smoothedBins;\n  }\n  repaint();\n}"}
{"ids": "36373", "raw_code": "@Override public void executionUnitImported(final ExecutionUnit process,final Element element){\n  NodeList children=element.getChildNodes();\n  children=element.getChildNodes();\n  for (int i=0; i < children.getLength(); i++) {\n    Node child=children.item(i);\n    if (child instanceof Element) {\n      Element backgroundElement=(Element)child;\n      if (XML_TAG_BACKGROUND.equals(backgroundElement.getTagName())) {\n        String xStr=backgroundElement.getAttribute(XML_ATTRIBUTE_X_POSITION);\n        String yStr=backgroundElement.getAttribute(XML_ATTRIBUTE_Y_POSITION);\n        String wStr=backgroundElement.getAttribute(XML_ATTRIBUTE_WIDTH);\n        String hStr=backgroundElement.getAttribute(XML_ATTRIBUTE_HEIGHT);\n        String imgLocStr=backgroundElement.getAttribute(XML_ATTRIBUTE_LOCATION);\n        try {\n          int xLoc=Integer.parseInt(xStr);\n          int yLoc=Integer.parseInt(yStr);\n          int wLoc=Integer.parseInt(wStr);\n          int hLoc=Integer.parseInt(hStr);\n          ProcessBackgroundImage bgImg=new ProcessBackgroundImage(xLoc,yLoc,wLoc,hLoc,imgLocStr,process);\n          setBackgroundImage(bgImg);\n        }\n catch (        NullPointerException|IllegalArgumentException e) {\n        }\n      }\n    }\n  }\n}"}
{"ids": "12288", "raw_code": "private void sendMailToQueue(String to,String subject,String content,boolean isMultipart,boolean isHtml){\n  EmailParams emailParams=new EmailParams(to,subject,content,isMultipart,isHtml);\n  rabbitTemplate.convertAndSend(RabbitmqConfiguration.QUEUE_SEND_EMAIL,emailParams);\n}"}
{"ids": "75002", "raw_code": "public MersenneTwisterRNG(final byte[] seed){\n  if (seed == null || seed.length != SEED_SIZE_BYTES) {\n    throw new IllegalArgumentException(\"Mersenne Twister RNG requires a 128-bit (16-byte) seed.\");\n  }\n  this.seed=seed.clone();\n  final int[] seedInts=convertBytesToInts(this.seed);\n  mt[0]=BOOTSTRAP_SEED;\n  for (mtIndex=1; mtIndex < N; mtIndex++) {\n    mt[mtIndex]=BOOTSTRAP_FACTOR * (mt[mtIndex - 1] ^ mt[mtIndex - 1] >>> 30) + mtIndex;\n  }\n  int i=1;\n  int j=0;\n  for (int k=Math.max(N,seedInts.length); k > 0; k--) {\n    mt[i]=(mt[i] ^ (mt[i - 1] ^ mt[i - 1] >>> 30) * SEED_FACTOR1) + seedInts[j] + j;\n    i++;\n    j++;\n    if (i >= N) {\n      mt[0]=mt[N - 1];\n      i=1;\n    }\n    if (j >= seedInts.length) {\n      j=0;\n    }\n  }\n  for (int k=N - 1; k > 0; k--) {\n    mt[i]=(mt[i] ^ (mt[i - 1] ^ mt[i - 1] >>> 30) * SEED_FACTOR2) - i;\n    i++;\n    if (i >= N) {\n      mt[0]=mt[N - 1];\n      i=1;\n    }\n  }\n  mt[0]=UPPER_MASK;\n}"}
{"ids": "46026", "raw_code": "private Set<ObjectInstance> filterListOfObjectInstances(Set<ObjectInstance> list,QueryExp query){\n  if (query == null) {\n    return list;\n  }\n else {\n    Set<ObjectInstance> result=new HashSet<ObjectInstance>();\n    for (    ObjectInstance oi : list) {\n      boolean res=false;\n      MBeanServer oldServer=QueryEval.getMBeanServer();\n      query.setMBeanServer(server);\n      try {\n        res=query.apply(oi.getObjectName());\n      }\n catch (      Exception e) {\n        res=false;\n      }\n finally {\n        query.setMBeanServer(oldServer);\n      }\n      if (res) {\n        result.add(oi);\n      }\n    }\n    return result;\n  }\n}"}
{"ids": "39790", "raw_code": "@Path(\"{secretId}\") @Timed @ExceptionMetered @GET public AutomationSecretResponse readSecretById(@Auth AutomationClient automationClient,@PathParam(\"secretId\") LongParam secretId){\n  Optional<Secret> secret=secretController.getSecretById(secretId.get());\n  if (!secret.isPresent()) {\n    throw new NotFoundException(\"Secret not found.\");\n  }\n  ImmutableList<Group> groups=ImmutableList.copyOf(aclDAO.getGroupsFor(secret.get()));\n  return AutomationSecretResponse.fromSecret(secret.get(),groups);\n}"}
{"ids": "10333", "raw_code": "protected void addActionExceptionWarning(Exception e){\n  String msg=e.getMessage();\n  if (msg != null) {\n    warnings.add(msg);\n  }\n}"}
{"ids": "81285", "raw_code": "private void generateFieldInfos(IType type,IBinaryType typeInfo,HashMap newElements,ArrayList childrenHandles){\n  IBinaryField[] fields=typeInfo.getFields();\n  if (fields == null) {\n    return;\n  }\n  JavaModelManager manager=((JavaElement)type).manager;\n  for (int i=0, fieldCount=fields.length; i < fieldCount; i++) {\n    IBinaryField fieldInfo=fields[i];\n    BinaryField field=new BinaryField((JavaElement)type,manager,manager.intern(new String(fieldInfo.getName())));\n    newElements.put(field,fieldInfo);\n    childrenHandles.add(field);\n    generateAnnotationsInfos(field,fieldInfo.getAnnotations(),fieldInfo.getTagBits(),newElements);\n  }\n}"}
{"ids": "63088", "raw_code": "public List<String> generateModel(String schema,String table,String packageName,boolean annotateSchema,boolean trimStrings){\n  try {\n    List<String> models=New.arrayList();\n    List<TableInspector> tables=getTables(schema,table);\n    for (    TableInspector t : tables) {\n      t.read(metaData);\n      String model=t.generateModel(packageName,annotateSchema,trimStrings);\n      models.add(model);\n    }\n    return models;\n  }\n catch (  SQLException s) {\n    throw new RuntimeException(s);\n  }\n}"}
{"ids": "10807", "raw_code": "public static Ed25519EncodedFieldElement toEncodedFieldElement(final BigInteger b){\n  return new Ed25519EncodedFieldElement(toByteArray(b));\n}"}
{"ids": "65739", "raw_code": "protected ArrayList<KeyNamePair> loadRMAData(int C_BPartner_ID){\n  ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>();\n  String sqlStmt=\"SELECT r.M_RMA_ID, r.DocumentNo || '-' || r.Amt from M_RMA r \" + \"WHERE ISSOTRX='Y' AND r.DocStatus in ('CO', 'CL') \" + \"AND r.C_BPartner_ID=? \"+ \"AND r.M_RMA_ID in (SELECT rl.M_RMA_ID FROM M_RMALine rl \"+ \"WHERE rl.M_RMA_ID=r.M_RMA_ID AND rl.QtyDelivered < rl.Qty \"+ \"AND rl.M_InOutLine_ID IS NOT NULL)\";\n  PreparedStatement pstmt=null;\n  try {\n    pstmt=DB.prepareStatement(sqlStmt,null);\n    pstmt.setInt(1,C_BPartner_ID);\n    ResultSet rs=pstmt.executeQuery();\n    while (rs.next()) {\n      list.add(new KeyNamePair(rs.getInt(1),rs.getString(2)));\n    }\n    rs.close();\n  }\n catch (  SQLException e) {\n    log.log(Level.SEVERE,sqlStmt.toString(),e);\n  }\n finally {\n    if (pstmt != null) {\n      try {\n        pstmt.close();\n      }\n catch (      Exception ex) {\n        log.severe(\"Could not close prepared statement\");\n      }\n    }\n  }\n  return list;\n}"}
{"ids": "69288", "raw_code": "private void checkSendTrackToGoogle(){\n  if (!sendToGoogle(activityMyTracks.getString(R.string.export_google_maps)) || !sendToGoogle(activityMyTracks.getString(R.string.export_google_fusion_tables)) || !sendToGoogle(activityMyTracks.getString(R.string.export_google_spreadsheets))) {\n    return;\n  }\n  assertTrue(GoogleUtils.deleteMaps(activityMyTracks.getApplicationContext(),GoogleUtils.ACCOUNT_1,EndToEndTestUtils.trackName));\n  assertTrue(GoogleUtils.deleteFusionTables(activityMyTracks.getApplicationContext(),GoogleUtils.ACCOUNT_1,EndToEndTestUtils.trackName));\n  assertTrue(GoogleUtils.deleteSpreadsheetsRow(activityMyTracks.getApplicationContext(),GoogleUtils.ACCOUNT_1,EndToEndTestUtils.trackName));\n}"}
{"ids": "29363", "raw_code": "private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {\n  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());\n  byte[] buffer=null;\n  try {\n    InputStream in=entity.getContent();\n    if (in == null) {\n      throw new ServerError();\n    }\n    buffer=mPool.getBuf(1024);\n    int count;\n    while ((count=in.read(buffer)) != -1) {\n      bytes.write(buffer,0,count);\n    }\n    return bytes.toByteArray();\n  }\n  finally {\n    try {\n      entity.consumeContent();\n    }\n catch (    IOException e) {\n      VolleyLog.v(\"Error occured when calling consumingContent\");\n    }\n    mPool.returnBuf(buffer);\n    bytes.close();\n  }\n}"}
{"ids": "65523", "raw_code": "public void onDependencyChanged(Preference dependency,boolean disableDependent){\n  if (mDependencyMet == disableDependent) {\n    mDependencyMet=!disableDependent;\n    notifyDependencyChange(shouldDisableDependents());\n    notifyChanged();\n  }\n}"}
{"ids": "12915", "raw_code": "@Override public Double analyse(double[] frame){\n  if (frame.length != getFrameLengthSamples())   throw new IllegalArgumentException(\"Expected frame of length \" + getFrameLengthSamples() + \", got \"+ frame.length);\n  double totalEnergy=0;\n  for (int i=0; i < frame.length; i++) {\n    totalEnergy+=frame[i] * frame[i];\n  }\n  rememberFrameEnergy(totalEnergy);\n  return new Double(totalEnergy);\n}"}
{"ids": "79368", "raw_code": "public static Element firstChildElement(Element element){\n  if (element == null)   return null;\n  Node node=element.getFirstChild();\n  if (node != null) {\n    do {\n      if (node.getNodeType() == Node.ELEMENT_NODE) {\n        Element childElement=(Element)node;\n        return childElement;\n      }\n    }\n while ((node=node.getNextSibling()) != null);\n  }\n  return null;\n}"}
{"ids": "5595", "raw_code": "private static void partialMatch(DimensionalNode node,boolean[] relevant,double[] keys,ArrayList<IMultiPoint> results){\n  IMultiPoint pt=node.point;\n  boolean match=true;\n  for (int i=0; i < relevant.length; i++) {\n    if (!relevant[i])     continue;\n    if (!FloatingPoint.same(pt.getCoordinate(i + 1),keys[i])) {\n      match=false;\n      break;\n    }\n  }\n  if (match) {\n    results.add(pt);\n  }\n  int d=node.dimension;\n  if (relevant[d - 1]) {\n    if (FloatingPoint.lesserEquals(keys[d - 1],pt.getCoordinate(d))) {\n      DimensionalNode below=node.getBelow();\n      if (below != null) {\n        partialMatch(below,relevant,keys,results);\n      }\n    }\n    if (FloatingPoint.greaterEquals(keys[d - 1],pt.getCoordinate(d))) {\n      DimensionalNode above=node.getAbove();\n      if (above != null) {\n        partialMatch(above,relevant,keys,results);\n      }\n    }\n  }\n else {\n    DimensionalNode below=node.getBelow();\n    if (below != null) {\n      partialMatch(below,relevant,keys,results);\n    }\n    DimensionalNode above=node.getAbove();\n    if (above != null) {\n      partialMatch(above,relevant,keys,results);\n    }\n  }\n}"}
{"ids": "14136", "raw_code": "public static String encodeForRedirect(final String str){\n  String classMethod=\"SAML2Utils.encodeForRedirect: \";\n  byte[] input;\n  try {\n    input=str.getBytes(\"UTF-8\");\n  }\n catch (  UnsupportedEncodingException uee) {\n    debug.error(classMethod + \"cannot get byte array: \",uee);\n    return null;\n  }\n  Deflater deflater=new Deflater(Deflater.DEFAULT_COMPRESSION,true);\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  DeflaterOutputStream deflaterOutputStream=new DeflaterOutputStream(out,deflater);\n  try {\n    deflaterOutputStream.write(input);\n  }\n catch (  IOException e) {\n    debug.error(classMethod + \"There was a problem compressing the input\",e);\n    return null;\n  }\n finally {\n    IOUtils.closeIfNotNull(deflaterOutputStream);\n  }\n  String encoded=URLEncDec.encode(Base64.encode(out.toByteArray()));\n  if (debug.messageEnabled()) {\n    debug.message(classMethod + \"out string length : \" + encoded.length());\n    debug.message(classMethod + \"out string is ===>\" + encoded+ \"<===\");\n  }\n  return encoded;\n}"}
{"ids": "901", "raw_code": "private void saveTouchStart(MotionEvent event){\n  mSavedMatrix.set(mMatrix);\n  mTouchStartPoint.set(event.getX(),event.getY());\n  mClosestDataSetToTouch=mChart.getDataSetByTouchPoint(event.getX(),event.getY());\n}"}
{"ids": "75536", "raw_code": "public static boolean isNestedMapping(String regex){\n  return regex.startsWith(NESTED_MAPPING_STARTS_SYMBOL) && regex.endsWith(NESTED_MAPPING_ENDS_SYMBOL);\n}"}
{"ids": "8554", "raw_code": "public static boolean nullEquals(String s1,String s2){\n  return (s1 == null ? s2 == null : s1.equals(s2));\n}"}
{"ids": "44109", "raw_code": "private boolean hasImages(IAction actionToCheck){\n  return actionToCheck.getImageDescriptor() != null || actionToCheck.getHoverImageDescriptor() != null || actionToCheck.getDisabledImageDescriptor() != null;\n}"}
{"ids": "20521", "raw_code": "public double calcAngleBetweenLines(Entry start1,Entry end1,Entry start2,Entry end2){\n  double angle1=calcAngleWithRatios(start1,end1);\n  double angle2=calcAngleWithRatios(start2,end2);\n  return Math.abs(angle1 - angle2);\n}"}
{"ids": "38412", "raw_code": "public double convertToAttribX(double scx){\n  double temp=m_XaxisEnd - m_XaxisStart;\n  double temp2=((scx - m_XaxisStart) * (m_maxX - m_minX)) / temp;\n  temp2=temp2 + m_minX;\n  return temp2;\n}"}
{"ids": "4030", "raw_code": "public void completeExecutorTask(){\n  ExecutorQueueItem item=null;\nsynchronized (_executorLock) {\n    _executorTaskCount--;\n    assert (_executorTaskCount >= 0);\n    if (_executorQueueHead != null) {\n      item=_executorQueueHead;\n      _executorQueueHead=item._next;\n      if (_executorQueueHead == null)       _executorQueueTail=null;\n    }\n  }\n  if (item != null) {\n    Runnable task=item.getRunnable();\n    ClassLoader loader=item.getLoader();\n    boolean isPriority=false;\n    boolean isQueue=true;\n    boolean isWake=true;\n    scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);\n  }\n}"}
{"ids": "6300", "raw_code": "public static void forceMkdir(File directory) throws IOException {\n  if (directory.exists()) {\n    if (!directory.isDirectory()) {\n      String message=\"File \" + directory + \" exists and is \"+ \"not a directory. Unable to create directory.\";\n      throw new IOException(message);\n    }\n  }\n else {\n    if (!directory.mkdirs()) {\n      if (!directory.isDirectory()) {\n        String message=\"Unable to create directory \" + directory;\n        throw new IOException(message);\n      }\n    }\n  }\n}"}
{"ids": "27685", "raw_code": "private <T>int countClearedRefs(List<WeakReference<T>> refs){\n  final Iterator<WeakReference<T>> itr=refs.iterator();\n  int n=0;\n  while (itr.hasNext()) {\n    final WeakReference<T> ref=itr.next();\n    if (ref.get() == null)     n++;\n  }\n  return n;\n}"}
{"ids": "1184", "raw_code": "protected void readImage(){\n  ix=readShort();\n  iy=readShort();\n  iw=readShort();\n  ih=readShort();\n  int packed=read();\n  lctFlag=(packed & 0x80) != 0;\n  interlace=(packed & 0x40) != 0;\n  lctSize=2 << (packed & 7);\n  if (lctFlag) {\n    lct=readColorTable(lctSize);\n    act=lct;\n  }\n else {\n    act=gct;\n    if (bgIndex == transIndex)     bgColor=0;\n  }\n  int save=0;\n  if (transparency) {\n    save=act[transIndex];\n    act[transIndex]=0;\n  }\n  if (act == null) {\n    status=STATUS_FORMAT_ERROR;\n  }\n  if (err())   return;\n  decodeImageData();\n  skip();\n  if (err())   return;\n  frameCount++;\n  image=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB_PRE);\n  setPixels();\n  frames.add(new GifFrame(image,delay));\n  if (transparency) {\n    act[transIndex]=save;\n  }\n  resetFrame();\n}"}
{"ids": "81790", "raw_code": "protected Object evaluateLeftGreaterRight(List elements,String lvalue,String rvalue){\n  List array;\n  if (elements instanceof java.util.Vector) {\n    array=new java.util.Vector();\n  }\n else {\n    array=new ArrayList();\n  }\n  for (Iterator e=elements.iterator(); e.hasNext(); ) {\n    Object o=e.next();\n    if (o instanceof StructuredContent) {\n      if ((o=evaluateLeftGreaterRight((StructuredContent)o,lvalue,rvalue)) != null) {\n        array.add(o);\n      }\n    }\n  }\n  if (array.size() == 1) {\n    return (StructuredContent)array.get(0);\n  }\n  return array;\n}"}
{"ids": "83921", "raw_code": "public Optional<Double> avg(){\n  if (isEmpty())   return Optional.empty();\n  return Optional.of(sum() / getEventCount());\n}"}
{"ids": "86075", "raw_code": "public static boolean isSU(String shell){\n  int pos=shell.indexOf(' ');\n  if (pos >= 0) {\n    shell=shell.substring(0,pos);\n  }\n  pos=shell.lastIndexOf('/');\n  if (pos >= 0) {\n    shell=shell.substring(pos + 1);\n  }\n  return shell.equals(\"su\");\n}"}
{"ids": "82150", "raw_code": "private boolean isValid(int type,String value){\n  if (value == null) {\n    return false;\n  }\n  if (ALLOWED_STRINGS[type] != null) {\n    return verifyStringGroup(value,ALLOWED_STRINGS[type]);\n  }\nswitch (type) {\ncase TYPE_NUMBER:\n    return verify(value,DIGITS,null);\ncase TYPE_PIXELS_OR_PERCENTAGE:\n  if (value.endsWith(\"%\")) {\n    value=value.substring(0,value.length() - 1);\n  }\n else   if (value.endsWith(\"px\")) {\n    value=value.substring(0,value.length() - 2);\n  }\nreturn verify(value,DIGITS,null);\ncase TYPE_CHAR:\nreturn verify(value,DIGITS | ABC,null,1,1);\ncase TYPE_COLOR:\nif (value.length() == 0) {\nreturn false;\n}\nif (value.charAt(0) != '#') {\nreturn verifyStringGroup(value,COLOR_STRINGS);\n}\n else {\nreturn verify(value.substring(1),HEX,null,3,6);\n}\ndefault :\nreturn true;\n}\n}"}
{"ids": "55269", "raw_code": "private int parseStreams(String json,Set<StreamInfo> streamInfos){\n  try {\n    JSONParser parser=new JSONParser();\n    JSONArray streamsArray;\n    try {\n      JSONObject root=(JSONObject)parser.parse(json);\n      streamsArray=(JSONArray)root.get(\"streams\");\n    }\n catch (    ClassCastException ex) {\n      LOGGER.warning(\"Error parsing streams: unexpected type\");\n      streamsRequestError(streamInfos);\n      return -1;\n    }\n    if (streamsArray == null) {\n      LOGGER.warning(\"Error parsing streams: streams array not found\");\n      streamsRequestError(streamInfos);\n      return -1;\n    }\n    for (    Object obj : streamsArray) {\n      if (obj instanceof JSONObject) {\n        StreamInfo parsedInfo=parseStream((JSONObject)obj,streamInfos == null);\n        if (parsedInfo == null) {\n          LOGGER.warning(\"Error parsing stream \" + (JSONObject)obj);\n        }\n        if (streamInfos != null) {\n          streamInfos.remove(parsedInfo);\n        }\n      }\n else {\n        LOGGER.warning(\"Element in array wasn't JSONObject \" + obj);\n      }\n    }\n    if (streamInfos != null) {\n      for (      StreamInfo info : streamInfos) {\n        info.setOffline();\n      }\n    }\n    return streamsArray.size();\n  }\n catch (  ParseException ex) {\n    LOGGER.warning(\"Error parsing streams info: \" + ex.getLocalizedMessage());\n    streamsRequestError(streamInfos);\n    return -1;\n  }\n}"}
{"ids": "84121", "raw_code": "public StrTokenizer reset(String input){\n  reset();\n  if (input != null) {\n    this.chars=input.toCharArray();\n  }\n else {\n    this.chars=null;\n  }\n  return this;\n}"}
{"ids": "36957", "raw_code": "public void removeListener(final IVisualCoverageListener listener){\n  listeners.remove(listener);\n}"}
{"ids": "34171", "raw_code": "@ObjectiveCName(\"isLargeDialogMessage:\") public boolean isLargeDialogMessage(ContentType contentType){\nswitch (contentType) {\ncase SERVICE:\ncase SERVICE_AVATAR:\ncase SERVICE_AVATAR_REMOVED:\ncase SERVICE_CREATED:\ncase SERVICE_TITLE:\ncase SERVICE_LEAVE:\ncase SERVICE_REGISTERED:\ncase SERVICE_KICK:\ncase SERVICE_ADD:\ncase SERVICE_JOINED:\ncase SERVICE_CALL_ENDED:\ncase SERVICE_CALL_MISSED:\ncase SERVICE_ABOUT:\ncase SERVICE_TOPIC:\n    return true;\ndefault :\n  return false;\n}\n}"}
{"ids": "87137", "raw_code": "public static boolean isLoggingBehaviorEnabled(LoggingBehavior behavior){\nsynchronized (loggingBehaviors) {\n    return FacebookSdk.isDebugEnabled() && loggingBehaviors.contains(behavior);\n  }\n}"}
{"ids": "80146", "raw_code": "private void onAttacked(final Entity attacker){\n  attackers.remove(attacker);\n  attackers.add(attacker);\n}"}
{"ids": "29995", "raw_code": "private void handleDisallow(ParseState state,RobotToken token){\n  if (state.isSkipAgents()) {\n    return;\n  }\n  state.setFinishedAgentFields(true);\n  if (!state.isAddingRules()) {\n    return;\n  }\n  String path=token.getData();\n  try {\n    path=URLDecoder.decode(path,\"UTF-8\");\n    if (path.length() == 0) {\n      state.clearRules();\n    }\n else {\n      state.addRule(path,false);\n    }\n  }\n catch (  Exception e) {\n    reportWarning(\"Error parsing robots rules - can't decode path: \" + path,state.getUrl());\n  }\n}"}
{"ids": "79715", "raw_code": "public void hideColumn(Object columnName){\n  if (columnName == null) {\n    return;\n  }\n  for (int i=0; i < columnModel.getColumnCount(); i++) {\n    TableColumn column=columnModel.getColumn(i);\n    if (columnName.equals(column.getHeaderValue())) {\n      hideColumn(column);\n      break;\n    }\n  }\n}"}
{"ids": "58146", "raw_code": "private boolean isASCIIDigit(char c){\n  return (c >= '0' && c <= '9');\n}"}
{"ids": "2738", "raw_code": "public static String separatorsToWindows(String path){\n  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {\n    return path;\n  }\n  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);\n}"}
{"ids": "8979", "raw_code": "public void accumulateAll(List<TaggedLogAPIEntity> entities) throws Exception {\n  for (  TaggedLogAPIEntity entity : entities) {\n    accumulate(entity);\n  }\n}"}
{"ids": "71631", "raw_code": "protected void printIdentifier(String identifier,StringBuilder ddl){\n  ddl.append(getDelimitedIdentifier(identifier));\n}"}
{"ids": "679", "raw_code": "public static int darker(int c){\n  return rgba(Math.max(0,(int)(scale * red(c))),Math.max(0,(int)(scale * green(c))),Math.max(0,(int)(scale * blue(c))),alpha(c));\n}"}
{"ids": "73806", "raw_code": "static public SdfMacro decodeInstruction(SdfBuffer buff){\n  SdfMacro m;\n  if ((m=ChannelStart.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=SdlVersion.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=SkemeStart.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=GenerateTrigger.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=EndSound.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=DelaySound.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=SkipOnTrigger.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=InitiateSound.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=MaskCompare.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=LoadModifier.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=BranchTo.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=Play.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=FourByteMacro.match(buff)) != null) {\n    return m;\n  }\n else   if ((m=TwoByteMacro.match(buff)) != null) {\n    return m;\n  }\n  log.warn(\"dropped through\");\n  return null;\n}"}
{"ids": "87063", "raw_code": "public SIPDate(long timeMillis){\n  javaCal=new GregorianCalendar(TimeZone.getTimeZone(\"GMT:0\"),Locale.getDefault());\n  java.util.Date date=new java.util.Date(timeMillis);\n  javaCal.setTime(date);\n  wkday=javaCal.get(Calendar.DAY_OF_WEEK);\nswitch (wkday) {\ncase Calendar.MONDAY:\n    sipWkDay=MON;\n  break;\ncase Calendar.TUESDAY:\nsipWkDay=TUE;\nbreak;\ncase Calendar.WEDNESDAY:\nsipWkDay=WED;\nbreak;\ncase Calendar.THURSDAY:\nsipWkDay=THU;\nbreak;\ncase Calendar.FRIDAY:\nsipWkDay=FRI;\nbreak;\ncase Calendar.SATURDAY:\nsipWkDay=SAT;\nbreak;\ncase Calendar.SUNDAY:\nsipWkDay=SUN;\nbreak;\ndefault :\nInternalErrorHandler.handleException(\"No date map for wkday \" + wkday);\n}\nday=javaCal.get(Calendar.DAY_OF_MONTH);\nmonth=javaCal.get(Calendar.MONTH);\nswitch (month) {\ncase Calendar.JANUARY:\nsipMonth=JAN;\nbreak;\ncase Calendar.FEBRUARY:\nsipMonth=FEB;\nbreak;\ncase Calendar.MARCH:\nsipMonth=MAR;\nbreak;\ncase Calendar.APRIL:\nsipMonth=APR;\nbreak;\ncase Calendar.MAY:\nsipMonth=MAY;\nbreak;\ncase Calendar.JUNE:\nsipMonth=JUN;\nbreak;\ncase Calendar.JULY:\nsipMonth=JUL;\nbreak;\ncase Calendar.AUGUST:\nsipMonth=AUG;\nbreak;\ncase Calendar.SEPTEMBER:\nsipMonth=SEP;\nbreak;\ncase Calendar.OCTOBER:\nsipMonth=OCT;\nbreak;\ncase Calendar.NOVEMBER:\nsipMonth=NOV;\nbreak;\ncase Calendar.DECEMBER:\nsipMonth=DEC;\nbreak;\ndefault :\nInternalErrorHandler.handleException(\"No date map for month \" + month);\n}\nyear=javaCal.get(Calendar.YEAR);\nhour=javaCal.get(Calendar.HOUR_OF_DAY);\nminute=javaCal.get(Calendar.MINUTE);\nsecond=javaCal.get(Calendar.SECOND);\n}"}
{"ids": "34801", "raw_code": "public static TypeMirror upperBound(TypeMirror type){\n  do {\n    if (type instanceof TypeVariable) {\n      TypeVariable tvar=(TypeVariable)type;\n      if (tvar.getUpperBound() != null) {\n        type=tvar.getUpperBound();\n      }\n else {\n        break;\n      }\n    }\n else     if (type instanceof WildcardType) {\n      WildcardType wc=(WildcardType)type;\n      if (wc.getExtendsBound() != null) {\n        type=wc.getExtendsBound();\n      }\n else {\n        break;\n      }\n    }\n else {\n      break;\n    }\n  }\n while (true);\n  return type;\n}"}
{"ids": "30866", "raw_code": "public synchronized Object remove(Object key){\n  removeBlanks();\n  WeakKeyReference keyRef=new WeakKeyReference(key);\n  WeakReference ref=(WeakReference)table.remove(keyRef);\n  if (ref == null)   return null;\n  return ref.get();\n}"}
{"ids": "58071", "raw_code": "public boolean removeElement(Node s){\n  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));\n  if (null == m_map)   return false;\n  for (int i=0; i < m_firstFree; i++) {\n    Node node=m_map[i];\n    if ((null != node) && node.equals(s)) {\n      if (i < m_firstFree - 1)       System.arraycopy(m_map,i + 1,m_map,i,m_firstFree - i - 1);\n      m_firstFree--;\n      m_map[m_firstFree]=null;\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "3596", "raw_code": "@Override public InetAddress addressLocal(){\n  Socket s=getSocket();\n  if (s != null) {\n    return s.getLocalAddress();\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "3809", "raw_code": "public boolean startConnection(){\n  State state=_state.get();\n  if (state.isActive()) {\n    _connectionCount.incrementAndGet();\n    return true;\n  }\n  long now=CurrentTime.currentTime();\n  long lastFailTime=_lastFailTime;\n  long recoverTimeout=_dynamicRecoverTimeout.get();\n  if (now < lastFailTime + recoverTimeout) {\n    return false;\n  }\n  int count;\n  do {\n    count=_connectionCount.get();\n    if (count > 0) {\n      return false;\n    }\n  }\n while (!_connectionCount.compareAndSet(count,count + 1));\n  return true;\n}"}
{"ids": "43797", "raw_code": "public AbstractNaryOperator(final Expr... args){\n  this(Arrays.asList(args));\n}"}
{"ids": "24255", "raw_code": "static boolean isRegistered(ObjectName objectName){\n  return mbeanServer != null && mbeanServer.isRegistered(objectName);\n}"}
{"ids": "22617", "raw_code": "public static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){\n  double wr=(double)actualWidth / desiredWidth;\n  double hr=(double)actualHeight / desiredHeight;\n  double ratio=Math.min(wr,hr);\n  float n=1.0f;\n  while ((n * 2) <= ratio) {\n    n*=2;\n  }\n  return (int)n;\n}"}
{"ids": "37311", "raw_code": "public SocketReader(final Socket socket) throws IOException {\n  Preconditions.checkNotNull(socket,\"IE00745: Socket can not be null\");\n  m_InputStream=new BufferedInputStream(socket.getInputStream());\n}"}
{"ids": "40804", "raw_code": "private boolean moveToFinalScrollerPosition(Scroller scroller){\n  scroller.forceFinished(true);\n  if (isHorizontalMode()) {\n    int amountToScroll=scroller.getFinalX() - scroller.getCurrX();\n    int futureScrollOffset=(mCurrentScrollOffset + amountToScroll) % mSelectorElementSize;\n    int overshootAdjustment=mInitialScrollOffset - futureScrollOffset;\n    if (overshootAdjustment != 0) {\n      if (Math.abs(overshootAdjustment) > mSelectorElementSize / 2) {\n        if (overshootAdjustment > 0) {\n          overshootAdjustment-=mSelectorElementSize;\n        }\n else {\n          overshootAdjustment+=mSelectorElementSize;\n        }\n      }\n      amountToScroll+=overshootAdjustment;\n      scrollBy(amountToScroll,0);\n      return true;\n    }\n  }\n else {\n    int amountToScroll=scroller.getFinalY() - scroller.getCurrY();\n    int futureScrollOffset=(mCurrentScrollOffset + amountToScroll) % mSelectorElementSize;\n    int overshootAdjustment=mInitialScrollOffset - futureScrollOffset;\n    if (overshootAdjustment != 0) {\n      if (Math.abs(overshootAdjustment) > mSelectorElementSize / 2) {\n        if (overshootAdjustment > 0) {\n          overshootAdjustment-=mSelectorElementSize;\n        }\n else {\n          overshootAdjustment+=mSelectorElementSize;\n        }\n      }\n      amountToScroll+=overshootAdjustment;\n      scrollBy(0,amountToScroll);\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "76927", "raw_code": "public void addLonLine(double minLat,double maxLat,double lon){\n  String name=\"lonline\" + nextShape;\n  nextShape++;\n  b.append(\"        var \" + name + \" = WE.polygon([\\n\");\n  double lat;\n  int steps=getStepCount(minLat,lon,maxLat,lon);\n  for (lat=minLat; lat <= maxLat; lat+=(maxLat - minLat) / steps) {\n    b.append(\"          [\" + lat + \", \"+ lon+ \"],\\n\");\n  }\n  b.append(\"          [\" + maxLat + \", \"+ lon+ \"],\\n\");\n  lat-=(maxLat - minLat) / 36;\n  for (; lat >= minLat; lat-=(maxLat - minLat) / steps) {\n    b.append(\"          [\" + lat + \", \"+ lon+ \"],\\n\");\n  }\n  b.append(\"        ], {color: \\\"#ff0000\\\", fillColor: \\\"#ffffff\\\", opacity: 1, fillOpacity: 0.0001});\\n\");\n  b.append(\"        \" + name + \".addTo(earth);\\n\");\n}"}
{"ids": "36158", "raw_code": "@Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){\n  double result=0;\n  double tmp;\n  int xpos=x_index.length - 1;\n  int ypos=y_index.length - 1;\n  int zeros=dim;\n  while ((xpos >= 0) && (ypos >= 0)) {\n    if (x_index[xpos] == y_index[ypos]) {\n      tmp=x_att[xpos] - y_att[ypos];\n      result+=Math.exp(-sigma * tmp * tmp);\n      xpos--;\n      ypos--;\n    }\n else     if (x_index[xpos] > y_index[ypos]) {\n      tmp=x_att[xpos];\n      result+=Math.exp(-sigma * tmp * tmp);\n      xpos--;\n    }\n else {\n      tmp=y_att[ypos];\n      result+=Math.exp(-sigma * tmp * tmp);\n      ypos--;\n    }\n    zeros--;\n  }\n  while (xpos >= 0) {\n    tmp=x_att[xpos];\n    result+=Math.exp(-sigma * tmp * tmp);\n    xpos--;\n    zeros--;\n  }\n  while (ypos >= 0) {\n    tmp=y_att[ypos];\n    result+=Math.exp(-sigma * tmp * tmp);\n    ypos--;\n    zeros--;\n  }\n  result+=zeros;\n  return Math.pow(result,degree);\n}"}
{"ids": "78876", "raw_code": "private float sweep(float tan1X,float tan1Y,float tan2X,float tan2Y){\n  final float minorSweep=(float)Math.toDegrees(2 * (Math.asin(.5 * Geometry.distance(tan1X,tan1Y,tan2X,tan2Y) / mScaledTouchSlop)));\n  return 360 - minorSweep;\n}"}
{"ids": "48093", "raw_code": "SunCertPathBuilderResult(CertPath certPath,TrustAnchor trustAnchor,PolicyNode policyTree,PublicKey subjectPublicKey,AdjacencyList adjList){\n  super(certPath,trustAnchor,policyTree,subjectPublicKey);\n  this.adjList=adjList;\n}"}
{"ids": "37215", "raw_code": "public static void attach(final JFrame parent,final IDebugger debugger,final CDebugEventNotifier notifier){\n  try {\n    notifier.start();\n    debugger.connect();\n  }\n catch (  final DebugExceptionWrapper exception) {\n    notifier.stop();\n    CUtilityFunctions.logException(exception);\n    final String innerMessage=\"E00082: \" + \"Could not attach to the debug client\";\n    final String innerDescription=CUtilityFunctions.createDescription(\"BinNavi could not attach to the debug client.\",new String[]{\"There was a problem with the connection to the debug client.\"},new String[]{\"The debugger process was not started yet. You can try to debug \" + \"the client again once you resolved the connection problems.\"});\n    NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);\n  }\n}"}
{"ids": "5627", "raw_code": "public boolean checkAddrPattern(final String theAddrPattern){\n  return theAddrPattern.equals(addrPattern());\n}"}
{"ids": "41823", "raw_code": "private View fillFromTop(int nextTop){\n  if (DEBUG)   Log.i(TAG,\"fillFromTop() nextLeft: \" + nextTop + M_FIRST_POSITION+ mFirstPosition);\n  mFirstPosition=Math.min(mFirstPosition,mSelectedPosition);\n  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);\n  if (mFirstPosition < 0) {\n    mFirstPosition=0;\n  }\n  mFirstPosition-=mFirstPosition % mNumColumns;\n  return fillDown(mFirstPosition,nextTop);\n}"}
{"ids": "15744", "raw_code": "public static String SITInfo(EnumMap<SIT,EnumMap<CIT,Boolean>> shp){\n  StringBuilder result=new StringBuilder();\n  for (  SIT key : shp.keySet()) {\n    result.append(\"\\t\" + key.toString() + \":\"+ CITInfo(shp.get(key))+ \"\\n\");\n  }\n  return result.toString();\n}"}
{"ids": "26277", "raw_code": "public static Map<String,Object> updateBinaryFile(DispatchContext dctx,Map<String,? extends Object> context){\n  Map<String,Object> result=null;\n  try {\n    result=updateBinaryFileMethod(dctx,context);\n  }\n catch (  GenericServiceException e) {\n    return ServiceUtil.returnError(e.getMessage());\n  }\n  return result;\n}"}
{"ids": "3743", "raw_code": "public int read(long fileOffset,byte[] buffer,int offset,int length) throws IOException {\n  log.info(\"random-read(0x\" + Long.toHexString(fileOffset) + \",\"+ length+ \")\");\n  return _file.read(fileOffset,buffer,offset,length);\n}"}
{"ids": "36467", "raw_code": "public boolean validateCurrentStep(int currentStep,int newStep){\n  return true;\n}"}
{"ids": "2776", "raw_code": "@NonNull protected static List<RaveError> mustBeTrue(boolean input,@NonNull ValidationContext validationContext){\n  return input ? Collections.<RaveError>emptyList() : createNewList(new RaveError(validationContext,RaveErrorStrings.MUST_BE_TRUE_ERROR));\n}"}
{"ids": "57114", "raw_code": "@LogMessageDoc(level=\"ERROR\",message=\"Failed to queue hint for store {storeName}\",explanation=\"There was an error synchronizing data to \" + \"remote nodes\",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public void queueHint(String storeName,ByteArray key,Versioned<byte[]> value){\n  try {\n    HintKey hk=new HintKey(storeName,key);\n    hintLock.lock();\n    try {\n      boolean needed=!hints.containsKey(hk);\n      needed&=hints.doput(hk,value);\n      if (needed) {\n        hintQueue.add(hk);\n        hintsAvailable.signal();\n      }\n    }\n  finally {\n      hintLock.unlock();\n    }\n  }\n catch (  SyncException e) {\n    logger.error(\"Failed to queue hint for store \" + storeName,e);\n  }\n}"}
{"ids": "53449", "raw_code": "public static DBIDVar randomSample(DBIDs ids,RandomFactory random){\n  return randomSample(ids,random.getSingleThreadedRandom());\n}"}
{"ids": "56309", "raw_code": "public void onResponse(DiscoveryNode node){\n  boolean found=pendingNodes.remove(node);\n  assert found : \"node [\" + node + \"] already responded or failed\";\n  latch.countDown();\n}"}
{"ids": "51344", "raw_code": "@Override public synchronized boolean add(E object){\n  if (elementCount == elementData.length) {\n    growByOne();\n  }\n  elementData[elementCount++]=object;\n  modCount++;\n  return true;\n}"}
{"ids": "26732", "raw_code": "private static long copy(InputStream from,OutputStream to) throws IOException {\n  byte[] buf=new byte[Settings.BUFFER_SIZE];\n  long total=0;\n  while (true) {\n    int r=from.read(buf);\n    if (r == -1) {\n      break;\n    }\n    to.write(buf,0,r);\n    total+=r;\n  }\n  return total;\n}"}
{"ids": "14940", "raw_code": "public void addValue(String value){\n  if (_stringValues == null) {\n    setupStringValues();\n  }\n  if (!_stringValues.contains(value)) {\n    _stringValues.add(value);\n  }\n}"}
{"ids": "1480", "raw_code": "public void writeRawLittleEndian32(final int value) throws IOException {\n  if (buffer.remaining() < 4) {\n    throw new OutOfSpaceException(buffer.position(),buffer.limit());\n  }\n  buffer.putInt(value);\n}"}
{"ids": "31150", "raw_code": "private static URL[] pathToURLs(String path) throws MalformedURLException {\n  if (path == null) {\n    return null;\n  }\nsynchronized (pathToURLsCache) {\n    Object[] v=(Object[])pathToURLsCache.get(path);\n    if (v != null) {\n      return ((URL[])v[0]);\n    }\n  }\n  StringTokenizer st=new StringTokenizer(path);\n  URL[] urls=new URL[st.countTokens()];\n  for (int i=0; st.hasMoreTokens(); i++) {\n    urls[i]=new URL(st.nextToken());\n  }\nsynchronized (pathToURLsCache) {\n    pathToURLsCache.put(path,new Object[]{urls,new SoftReference(path)});\n  }\n  return urls;\n}"}
{"ids": "24516", "raw_code": "public static int hash4(int hash,Object x,Object y,Object z,Object w){\n  return 0x40000000 | (hash + 7 * System.identityHashCode(x) + 11 * System.identityHashCode(y) + 13 * System.identityHashCode(z) + 17 * System.identityHashCode(w));\n}"}
{"ids": "47306", "raw_code": "public long skip(long n) throws IOException {\n  if (n < 0) {\n    throw new IllegalArgumentException(\"negative skip length\");\n  }\n  ensureOpen();\n  int max=(int)Math.min(n,Integer.MAX_VALUE);\n  int total=0;\n  while (total < max) {\n    int len=max - total;\n    if (len > b.length) {\n      len=b.length;\n    }\n    len=read(b,0,len);\n    if (len == -1) {\n      reachEOF=true;\n      break;\n    }\n    total+=len;\n  }\n  return total;\n}"}
{"ids": "57490", "raw_code": "private V doPut(K kkey,V value,boolean onlyIfAbsent){\n  Comparable<? super K> key=comparable(kkey);\n  for (; ; ) {\n    Node<K,V> b=findPredecessor(key);\n    Node<K,V> n=b.next;\n    for (; ; ) {\n      if (n != null) {\n        Node<K,V> f=n.next;\n        if (n != b.next)         break;\n        Object v=n.value;\n        if (v == null) {\n          n.helpDelete(b,f);\n          break;\n        }\n        if (v == n || b.value == null)         break;\n        int c=key.compareTo(n.key);\n        if (c > 0) {\n          b=n;\n          n=f;\n          continue;\n        }\n        if (c == 0) {\n          if (onlyIfAbsent || n.casValue(v,value))           return (V)v;\n else           break;\n        }\n      }\n      Node<K,V> z=new Node<K,V>(kkey,value,n);\n      if (!b.casNext(n,z))       break;\n      int level=randomLevel();\n      if (level > 0)       insertIndex(z,level);\n      return null;\n    }\n  }\n}"}
{"ids": "70516", "raw_code": "public void addFillOutsideLine(FillOutsideLine fill){\n  mFillBelowLine.add(fill);\n}"}
{"ids": "80110", "raw_code": "public void add(final PositionChangeListener listener){\n  listeners.add(listener);\n}"}
{"ids": "10533", "raw_code": "private void rehash(){\n  int size=_symbols.length;\n  int newSize=size + size;\n  if (newSize > MAX_TABLE_SIZE) {\n    _size=0;\n    Arrays.fill(_symbols,null);\n    Arrays.fill(_buckets,null);\n    _dirty=true;\n    return;\n  }\n  String[] oldSyms=_symbols;\n  Bucket[] oldBuckets=_buckets;\n  _symbols=new String[newSize];\n  _buckets=new Bucket[newSize >> 1];\n  _indexMask=newSize - 1;\n  _sizeThreshold=_thresholdSize(newSize);\n  int count=0;\n  int maxColl=0;\n  for (int i=0; i < size; ++i) {\n    String symbol=oldSyms[i];\n    if (symbol != null) {\n      ++count;\n      int index=_hashToIndex(calcHash(symbol));\n      if (_symbols[index] == null) {\n        _symbols[index]=symbol;\n      }\n else {\n        int bix=(index >> 1);\n        Bucket newB=new Bucket(symbol,_buckets[bix]);\n        _buckets[bix]=newB;\n        maxColl=Math.max(maxColl,newB.length());\n      }\n    }\n  }\n  size>>=1;\n  for (int i=0; i < size; ++i) {\n    Bucket b=oldBuckets[i];\n    while (b != null) {\n      ++count;\n      String symbol=b.getSymbol();\n      int index=_hashToIndex(calcHash(symbol));\n      if (_symbols[index] == null) {\n        _symbols[index]=symbol;\n      }\n else {\n        int bix=(index >> 1);\n        Bucket newB=new Bucket(symbol,_buckets[bix]);\n        _buckets[bix]=newB;\n        maxColl=Math.max(maxColl,newB.length());\n      }\n      b=b.getNext();\n    }\n  }\n  _longestCollisionList=maxColl;\n  if (count != _size) {\n    throw new Error(\"Internal error on SymbolTable.rehash(): had \" + _size + \" entries; now have \"+ count+ \".\");\n  }\n}"}
{"ids": "74804", "raw_code": "private void checkSize(final int i){\n  if (i >= max_size) {\n    final int old_size=max_size;\n    max_size+=increment_size;\n    if (max_size <= i) {\n      max_size=i + increment_size + 2;\n    }\n    final int[] temp=items;\n    items=new int[max_size];\n    System.arraycopy(temp,0,items,0,old_size);\n    increment_size=incrementSize(increment_size);\n  }\n}"}
{"ids": "80703", "raw_code": "public ComponentPrintService(Component c,PageFormat format){\n  setPageFormat(format);\n  setPrintable(this);\n  setComponent(c);\n  Rectangle componentBounds=c.getBounds(null);\n  setSize(componentBounds.width,componentBounds.height);\n  setScale(1,1);\n}"}
{"ids": "57059", "raw_code": "@Override public void reconcileFlow(OFMatchReconcile ofmRcIn,EventPriority priority){\n  if (ofmRcIn == null)   return;\n  OFMatchReconcile myOfmRc=new OFMatchReconcile(ofmRcIn);\n  flowQueue.offer(myOfmRc,priority);\n  ctrFlowReconcileRequest.increment();\n  Date currTime=new Date();\n  long delay=0;\n  if (currTime.after(new Date(lastReconcileTime.getTime() + 1000))) {\n    delay=0;\n  }\n else {\n    delay=FLOW_RECONCILE_DELAY_MILLISEC;\n  }\n  flowReconcileTask.reschedule(delay,TimeUnit.MILLISECONDS);\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Reconciling flow: {}, total: {}\",myOfmRc.toString(),flowQueue.size());\n  }\n}"}
{"ids": "42083", "raw_code": "public void flush() throws IOException {\n  if (writer != null) {\n    writer.flush();\n  }\n  outstr.flush();\n}"}
{"ids": "26460", "raw_code": "@SuppressWarnings(\"unchecked\") protected synchronized V removeInternal(Object key,boolean countRemove){\n  if (key == null) {\n    if (Debug.verboseOn())     Debug.logVerbose(\"In UtilCache tried to remove with null key, using NullObject\" + this.name,module);\n  }\n  Object nulledKey=fromKey(key);\n  CacheLine<V> oldCacheLine;\n  V oldValue;\n  if (fileTable != null) {\n    try {\nsynchronized (this) {\n        try {\n          oldValue=fileTable.get(nulledKey);\n        }\n catch (        IOException e) {\n          oldValue=null;\n          throw e;\n        }\n        fileTable.remove(nulledKey);\n        jdbmMgr.commit();\n      }\n    }\n catch (    IOException e) {\n      oldValue=null;\n      Debug.logError(e,module);\n    }\n    oldCacheLine=memoryTable.remove(nulledKey);\n  }\n else {\n    oldCacheLine=memoryTable.remove(nulledKey);\n    oldValue=oldCacheLine != null ? oldCacheLine.getValue() : null;\n  }\n  if (oldCacheLine != null) {\n    cancel(oldCacheLine);\n  }\n  if (oldValue != null) {\n    noteRemoval((K)key,oldValue);\n    if (countRemove)     removeHitCount.incrementAndGet();\n    return oldValue;\n  }\n else {\n    if (countRemove)     removeMissCount.incrementAndGet();\n    return null;\n  }\n}"}
{"ids": "7319", "raw_code": "public void remove(double value){\n  if (Double.isNaN(value)) {\n    return;\n  }\n  int index=findInsertIndex(value);\n  if (index == -1) {\n    throw new IllegalStateException(\"Value not found in collection\");\n  }\n  Double valueAtIndex=values.get(index);\n  if ((valueAtIndex != null) && (!valueAtIndex.equals(value))) {\n    throw new IllegalStateException(\"Value not found in collection\");\n  }\n  values.remove(index);\n}"}
{"ids": "47739", "raw_code": "void lightweightPaint(Graphics g){\n  super.lightweightPaint(g);\n  paintHeavyweightComponents(g);\n}"}
{"ids": "59415", "raw_code": "private final void removeChannel(String channel){\n  channel=channel.toLowerCase();\nsynchronized (_channels) {\n    _channels.remove(channel);\n  }\n}"}
{"ids": "63871", "raw_code": "public void addChangeListener(ChangeListener cl){\n  if (!listeners.contains(cl))   listeners.add(cl);\n}"}
{"ids": "12964", "raw_code": "public static void expandNumber(String numberString,WordRelation wordRelation,Item tokenItem){\n  int numDigits=numberString.length();\n  if (numDigits == 0) {\n  }\n else   if (numDigits == 1) {\n    expandDigits(numberString,wordRelation,tokenItem);\n  }\n else   if (numDigits == 2) {\n    expand2DigitNumber(numberString,wordRelation,tokenItem);\n  }\n else   if (numDigits == 3) {\n    expand3DigitNumber(numberString,wordRelation,tokenItem);\n  }\n else   if (numDigits < 7) {\n    expandBelow7DigitNumber(numberString,wordRelation,tokenItem);\n  }\n else   if (numDigits < 10) {\n    expandBelow10DigitNumber(numberString,wordRelation,tokenItem);\n  }\n else   if (numDigits < 13) {\n    expandBelow13DigitNumber(numberString,wordRelation,tokenItem);\n  }\n else {\n    expandDigits(numberString,wordRelation,tokenItem);\n  }\n}"}
{"ids": "59405", "raw_code": "private int measureShort(int measureSpec){\n  int result=0;\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  if (specMode == MeasureSpec.EXACTLY) {\n    result=specSize;\n  }\n else {\n    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);\n    if (specMode == MeasureSpec.AT_MOST) {\n      result=Math.min(result,specSize);\n    }\n  }\n  return result;\n}"}
{"ids": "25069", "raw_code": "protected boolean canTriggerWalking(){\n  return false;\n}"}
{"ids": "49822", "raw_code": "public static String encryptECB(final byte[] concatenatedHashValue,final Long turnoverCounter,final SecretKey symmetricKey,int turnOverCounterLengthInBytes) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n  final ByteBuffer byteBufferIV=ByteBuffer.allocate(16);\n  byteBufferIV.put(concatenatedHashValue);\n  final byte[] IV=byteBufferIV.array();\n  final ByteBuffer byteBufferData=ByteBuffer.allocate(16);\n  byteBufferData.putLong(turnoverCounter);\n  final byte[] data=byteBufferData.array();\n  byte[] turnOverCounterByteRep=get2ComplementRepForLong(turnoverCounter,turnOverCounterLengthInBytes);\n  System.arraycopy(turnOverCounterByteRep,0,data,0,turnOverCounterByteRep.length);\n  final Cipher cipher=Cipher.getInstance(\"AES/ECB/NoPadding\",\"BC\");\n  cipher.init(Cipher.ENCRYPT_MODE,symmetricKey);\n  final byte[] intermediateResult=cipher.doFinal(IV);\n  final byte[] result=new byte[data.length];\n  for (int i=0; i < data.length; i++) {\n    result[i]=(byte)((data[i]) ^ (intermediateResult[i]));\n  }\n  final byte[] encryptedTurnOverValue=new byte[turnOverCounterLengthInBytes];\n  System.arraycopy(result,0,encryptedTurnOverValue,0,turnOverCounterLengthInBytes);\n  return CashBoxUtils.base64Encode(encryptedTurnOverValue,false);\n}"}
{"ids": "6451", "raw_code": "private static boolean isFrostWireOld(String messageVersion){\n  if (messageVersion == null)   return false;\n  String currentVersion=FrostWireUtils.getFrostWireVersion();\n  if (currentVersion.equals(messageVersion)) {\n    return false;\n  }\n  try {\n    String[] fwVersionParts=currentVersion.split(\"\\\\.\");\n    int fw_major=Integer.parseInt(fwVersionParts[0]);\n    int fw_release=Integer.parseInt(fwVersionParts[1]);\n    int fw_service=Integer.parseInt(fwVersionParts[2]);\n    String[] msgVersionParts=messageVersion.split(\"\\\\.\");\n    int msg_major=Integer.parseInt(msgVersionParts[0]);\n    int msg_release=Integer.parseInt(msgVersionParts[1]);\n    int msg_service=Integer.parseInt(msgVersionParts[2]);\n    if (fw_major < msg_major) {\n      return true;\n    }\n    if (fw_major == msg_major && fw_release < msg_release) {\n      return true;\n    }\n    if (fw_major == msg_major && fw_release == msg_release && fw_service < msg_service) {\n      return true;\n    }\n  }\n catch (  Exception e) {\n    return false;\n  }\n  return false;\n}"}
{"ids": "54516", "raw_code": "public void selectTable2Column(Index column){\n  table2Columns.add(column);\n}"}
{"ids": "25185", "raw_code": "public List<String> extractURLs(final String text){\n  if (text == null || text.length() == 0)   return Collections.emptyList();\n  final ArrayList<String> urls=new ArrayList<String>();\n  for (  final Entity entity : extractURLsWithIndices(text)) {\n    urls.add(entity.value);\n  }\n  return urls;\n}"}
{"ids": "11600", "raw_code": "public void findAndUndo(Iterator it){\n  while (it.hasNext()) {\n    findAndUndo(it.next());\n  }\n}"}
{"ids": "69555", "raw_code": "public static int[] scaleDownInside(int inWidth,int inHeight,int maxWidth,int maxHeight){\n  int scaledWidth;\n  int scaledHeight;\n  if (inWidth <= maxWidth && inHeight <= maxHeight) {\n    scaledWidth=inWidth;\n    scaledHeight=inHeight;\n  }\n else {\n    double widthRatio=(double)inWidth / (double)maxWidth;\n    double heightRatio=(double)inHeight / (double)maxHeight;\n    if (widthRatio > heightRatio) {\n      scaledWidth=maxWidth;\n      scaledHeight=(int)Math.round((double)inHeight / widthRatio);\n    }\n else {\n      scaledHeight=maxHeight;\n      scaledWidth=(int)Math.round((double)inWidth / heightRatio);\n    }\n  }\n  return new int[]{scaledWidth,scaledHeight};\n}"}
{"ids": "21854", "raw_code": "public void rm(String fileOrDir){\n  StringBuilder buf=new StringBuilder();\n  String command=String.format(ImageServerDialogProperties.getString(\"cmd.rm\"),fileOrDir);\n  sendWaitFor(command,defaultTimeout,prompts,buf);\n  log.debug(buf.toString());\n}"}
{"ids": "27023", "raw_code": "private MGRSComponents breakMGRSString(String MGRSString){\n  int num_digits;\n  int num_letters;\n  int i=0;\n  int j=0;\n  long error_code=MGRS_NO_ERROR;\n  int zone=0;\n  int[] letters=new int[3];\n  long easting=0;\n  long northing=0;\n  int precision=0;\n  while (i < MGRSString.length() && MGRSString.charAt(i) == ' ') {\n    i++;\n  }\n  j=i;\n  while (i < MGRSString.length() && Character.isDigit(MGRSString.charAt(i))) {\n    i++;\n  }\n  num_digits=i - j;\n  if (num_digits <= 2)   if (num_digits > 0) {\n    zone=Integer.parseInt(MGRSString.substring(j,i));\n    if ((zone < 1) || (zone > 60))     error_code|=MGRS_STRING_ERROR;\n  }\n else   error_code|=MGRS_STRING_ERROR;\n  j=i;\n  while (i < MGRSString.length() && Character.isLetter(MGRSString.charAt(i))) {\n    i++;\n  }\n  num_letters=i - j;\n  if (num_letters == 3) {\n    letters[0]=alphabet.indexOf(Character.toUpperCase(MGRSString.charAt(j)));\n    if ((letters[0] == LETTER_I) || (letters[0] == LETTER_O))     error_code|=MGRS_STRING_ERROR;\n    letters[1]=alphabet.indexOf(Character.toUpperCase(MGRSString.charAt(j + 1)));\n    if ((letters[1] == LETTER_I) || (letters[1] == LETTER_O))     error_code|=MGRS_STRING_ERROR;\n    letters[2]=alphabet.indexOf(Character.toUpperCase(MGRSString.charAt(j + 2)));\n    if ((letters[2] == LETTER_I) || (letters[2] == LETTER_O))     error_code|=MGRS_STRING_ERROR;\n  }\n else   error_code|=MGRS_STRING_ERROR;\n  j=i;\n  while (i < MGRSString.length() && Character.isDigit(MGRSString.charAt(i))) {\n    i++;\n  }\n  num_digits=i - j;\n  if ((num_digits <= 10) && (num_digits % 2 == 0)) {\n    int n;\n    double multiplier;\n    n=num_digits / 2;\n    precision=n;\n    if (n > 0) {\n      easting=Integer.parseInt(MGRSString.substring(j,j + n));\n      northing=Integer.parseInt(MGRSString.substring(j + n,j + n + n));\n      multiplier=Math.pow(10.0,5 - n);\n      easting*=multiplier;\n      northing*=multiplier;\n    }\n else {\n      easting=0;\n      northing=0;\n    }\n  }\n else   error_code|=MGRS_STRING_ERROR;\n  last_error=error_code;\n  if (error_code == MGRS_NO_ERROR)   return new MGRSComponents(zone,letters[0],letters[1],letters[2],easting,northing,precision);\n  return null;\n}"}
{"ids": "1850", "raw_code": "public void putMap(Map<String,List<String>> m){\n  for (  String key : m.keySet()) {\n    SortedSet<String> vals=get(key);\n    if (vals == null) {\n      vals=new TreeSet<String>();\n      put(key,vals);\n    }\n    vals.addAll(m.get(key));\n  }\n}"}
{"ids": "67760", "raw_code": "protected void throwParseException(ParseException e) throws ParseException {\n  if (locator != null) {\n    String elementLocation=\"\";\n    if (curHandler != null) {\n      elementLocation+=\", element \" + curHandler.qName;\n    }\n    String location=\"[Line \" + String.valueOf(locator.getLineNumber()) + \", Column \"+ String.valueOf(locator.getColumnNumber())+ elementLocation+ \"] \";\n    LogUtils.logException(logger,Level.FINE,location,e);\n    throw new ParseException(location + e.getMessage(),e);\n  }\n else {\n    LogUtils.logException(logger,Level.FINE,null,e);\n    throw e;\n  }\n}"}
{"ids": "50976", "raw_code": "public void addAssetListener(@NotNull ActionListener listener){\n  myAssetListeners.add(listener);\n}"}
{"ids": "46625", "raw_code": "public UndoableEdit insertString(int where,String str) throws BadLocationException {\n  if (where > length() || where < 0) {\n    throw new BadLocationException(\"Invalid insert\",length());\n  }\n  char[] chars=str.toCharArray();\n  replace(where,0,chars,chars.length);\n  return new InsertUndo(where,str.length());\n}"}
{"ids": "50025", "raw_code": "public static JavaPairRDD<MatrixIndexes,MatrixBlock> toMatrixJavaPairRDD(JavaSparkContext sc,MatrixBlock src,int brlen,int bclen) throws DMLRuntimeException {\n  long t0=DMLScript.STATISTICS ? System.nanoTime() : 0;\n  LinkedList<Tuple2<MatrixIndexes,MatrixBlock>> list=new LinkedList<Tuple2<MatrixIndexes,MatrixBlock>>();\n  if (src.getNumRows() <= brlen && src.getNumColumns() <= bclen) {\n    list.addLast(new Tuple2<MatrixIndexes,MatrixBlock>(new MatrixIndexes(1,1),src));\n  }\n else {\n    boolean sparse=src.isInSparseFormat();\n    for (int blockRow=0; blockRow < (int)Math.ceil(src.getNumRows() / (double)brlen); blockRow++)     for (int blockCol=0; blockCol < (int)Math.ceil(src.getNumColumns() / (double)bclen); blockCol++) {\n      int maxRow=(blockRow * brlen + brlen < src.getNumRows()) ? brlen : src.getNumRows() - blockRow * brlen;\n      int maxCol=(blockCol * bclen + bclen < src.getNumColumns()) ? bclen : src.getNumColumns() - blockCol * bclen;\n      MatrixBlock block=new MatrixBlock(maxRow,maxCol,sparse);\n      int row_offset=blockRow * brlen;\n      int col_offset=blockCol * bclen;\n      src.sliceOperations(row_offset,row_offset + maxRow - 1,col_offset,col_offset + maxCol - 1,block);\n      MatrixIndexes indexes=new MatrixIndexes(blockRow + 1,blockCol + 1);\n      list.addLast(new Tuple2<MatrixIndexes,MatrixBlock>(indexes,block));\n    }\n  }\n  JavaPairRDD<MatrixIndexes,MatrixBlock> result=sc.parallelizePairs(list);\n  if (DMLScript.STATISTICS) {\n    Statistics.accSparkParallelizeTime(System.nanoTime() - t0);\n    Statistics.incSparkParallelizeCount(1);\n  }\n  return result;\n}"}
{"ids": "34119", "raw_code": "public static boolean isYouTubeUrl(String url){\n  if (TextUtils.isEmpty(url)) {\n    return false;\n  }\n  Uri uri=Uri.parse(url);\n  String authority=uri.getAuthority();\n  if (!TextUtils.isEmpty(authority) && authority.contains(\"youtube.com\")) {\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "83693", "raw_code": "public List<NamespaceVO> findNamespaces(String appId,Env env,String clusterName){\n  List<NamespaceDTO> namespaces=namespaceAPI.findNamespaceByCluster(appId,env,clusterName);\n  if (namespaces == null || namespaces.size() == 0) {\n    throw new BadRequestException(\"namespaces not exist\");\n  }\n  List<NamespaceVO> namespaceVOs=new LinkedList<>();\n  for (  NamespaceDTO namespace : namespaces) {\n    NamespaceVO namespaceVO=null;\n    try {\n      namespaceVO=parseNamespace(appId,env,clusterName,namespace);\n      namespaceVOs.add(namespaceVO);\n    }\n catch (    Exception e) {\n      logger.error(\"parse namespace error. app id:{}, env:{}, clusterName:{}, namespace:{}\",appId,env,clusterName,namespace.getNamespaceName(),e);\n      throw e;\n    }\n  }\n  return namespaceVOs;\n}"}
{"ids": "27564", "raw_code": "void unlink(Node<E> p,Node<E> trail){\n  p.item=null;\n  trail.next=p.next;\n  if (last == p)   last=trail;\n  if (count.getAndDecrement() == capacity)   notFull.signal();\n}"}
{"ids": "33700", "raw_code": "public static void openShareDialog(Context context,String title,@SuppressWarnings(\"SameParameterValue\") String uri,String shareText,String shareSubject){\n  Intent share=new Intent(Intent.ACTION_SEND);\n  share.setType(\"text/plain\");\n  share.putExtra(Intent.EXTRA_TEXT,shareText);\n  share.putExtra(Intent.EXTRA_SUBJECT,shareSubject);\n  if (!TextUtils.isEmpty(uri)) {\n    share.setType(\"image/*\");\n    share.putExtra(Intent.EXTRA_STREAM,Uri.parse(uri));\n  }\n  context.startActivity(Intent.createChooser(share,title));\n}"}
{"ids": "80448", "raw_code": "public void addMatching(final ConversationStates state,final String triggerString,final ExpressionMatcher matcher,final ChatCondition condition,boolean secondary,final ConversationStates nextState,final String reply,final ChatAction action){\n  Collection<Expression> triggerExpressions=createUniqueTriggerExpressions(state,Arrays.asList(triggerString),matcher,condition,reply,action);\n  add(triggerExpressions,state,condition,secondary,nextState,reply,action);\n}"}
{"ids": "80440", "raw_code": "boolean dropItems(final Player player,int itemCount){\n  boolean result=false;\n  final ItemCollection itemsTodo=new ItemCollection();\n  itemsTodo.addFromQuestStateString(player.getQuest(questSlot));\n  if (player.drop(itemName,itemCount)) {\n    if (itemsTodo.removeItem(itemName,itemCount)) {\n      result=true;\n    }\n  }\n else {\n    final List<Item> items=player.getAllEquipped(itemName);\n    if (items != null) {\n      for (      final Item item : items) {\n        final int quantity=item.getQuantity();\n        final int n=Math.min(itemCount,quantity);\n        if (player.drop(itemName,n)) {\n          itemCount-=n;\n          if (itemsTodo.removeItem(itemName,n)) {\n            result=true;\n          }\n        }\n        if (itemCount == 0) {\n          result=true;\n          break;\n        }\n      }\n    }\n  }\n  if (result) {\n    player.setQuest(questSlot,itemsTodo.toStringForQuestState());\n  }\n  return result;\n}"}
{"ids": "46198", "raw_code": "public void encodeOctetString(byte tb[],int tag,int tboffset,int length) throws EncodeException {\n  encodeByte(tag);\n  encodeLength(length);\n  if (length > 0) {\n    ensureFreeBytes(length);\n    System.arraycopy(tb,tboffset,buf,offset,length);\n    offset+=length;\n  }\n}"}
{"ids": "63072", "raw_code": "private void swapBlocks(int from,int second,int to){\n  int len1=second - from, len2=to - second + 1;\n  if (len1 == 0 || len2 == 0) {\n    return;\n  }\n  if (len1 < temp.length) {\n    System.arraycopy(data,from,temp,0,len1);\n    System.arraycopy(data,second,data,from,len2);\n    System.arraycopy(temp,0,data,from + len2,len1);\n    return;\n  }\n else   if (len2 < temp.length) {\n    System.arraycopy(data,second,temp,0,len2);\n    System.arraycopy(data,from,data,from + len2,len1);\n    System.arraycopy(temp,0,data,from,len2);\n    return;\n  }\n  reverseBlock(from,second - 1);\n  reverseBlock(second,to);\n  reverseBlock(from,to);\n}"}
{"ids": "69400", "raw_code": "private static long totalSize(Map<String,Long> relPathToSize){\n  long total=0;\n  for (  Long l : relPathToSize.values()) {\n    total+=l;\n  }\n  return total;\n}"}
{"ids": "76731", "raw_code": "public PatternTokenizer(AttributeFactory factory,Pattern pattern,int group){\n  super(factory);\n  this.group=group;\n  matcher=pattern.matcher(\"\");\n  if (group >= 0 && group > matcher.groupCount()) {\n    throw new IllegalArgumentException(\"invalid group specified: pattern only has: \" + matcher.groupCount() + \" capturing groups\");\n  }\n}"}
{"ids": "30366", "raw_code": "@Override public double totalEstimatedQuantityForPreviousREs(final Long woActivityId,Long estimateId,final Long activityId,final WorkOrder workOrder){\n  if (estimateId == null)   estimateId=-1l;\n  Object[] params=null;\n  Double estQuantity=null;\n  params=new Object[]{estimateId,workOrder,workOrder,woActivityId,activityId};\n  estQuantity=(Double)genericService.findByNamedQuery(\"totalEstimatedQuantityInRE\",params);\n  Double estQuantityRE=null;\n  params=new Object[]{estimateId,workOrder,workOrder,activityId};\n  estQuantityRE=(Double)genericService.findByNamedQuery(\"totalEstimatedQuantityForPreviousREs\",params);\n  if (estQuantity != null && estQuantityRE != null)   estQuantity=estQuantity + estQuantityRE;\n  if (estQuantity == null && estQuantityRE != null)   estQuantity=estQuantityRE;\n  if (estQuantity == null)   return 0.0d;\n else   return estQuantity.doubleValue();\n}"}
{"ids": "78951", "raw_code": "protected long writeDataToFile(NodeHolder nodeHolder,FileChannel channel) throws CarbonDataWriterException {\n  byte[][] compressedIndex=nodeHolder.getCompressedIndex();\n  byte[][] compressedIndexMap=nodeHolder.getCompressedIndexMap();\n  byte[][] compressedDataIndex=nodeHolder.getCompressedDataIndex();\n  int indexBlockSize=0;\n  int index=0;\n  for (int i=0; i < nodeHolder.getKeyBlockIndexLength().length; i++) {\n    indexBlockSize+=nodeHolder.getKeyBlockIndexLength()[index++] + CarbonCommonConstants.INT_SIZE_IN_BYTE;\n  }\n  for (int i=0; i < nodeHolder.getDataIndexMapLength().length; i++) {\n    indexBlockSize+=nodeHolder.getDataIndexMapLength()[i];\n  }\n  ByteBuffer byteBuffer=ByteBuffer.allocate(nodeHolder.getKeyArray().length + nodeHolder.getDataArray().length + indexBlockSize);\n  long offset=0;\n  try {\n    offset=channel.size();\n    byteBuffer.put(nodeHolder.getKeyArray());\n    byteBuffer.put(nodeHolder.getDataArray());\n    ByteBuffer buffer1=null;\n    for (int i=0; i < compressedIndex.length; i++) {\n      buffer1=ByteBuffer.allocate(nodeHolder.getKeyBlockIndexLength()[i]);\n      buffer1.putInt(compressedIndex[i].length);\n      buffer1.put(compressedIndex[i]);\n      if (compressedIndexMap[i].length > 0) {\n        buffer1.put(compressedIndexMap[i]);\n      }\n      buffer1.rewind();\n      byteBuffer.put(buffer1.array());\n    }\n    for (int i=0; i < compressedDataIndex.length; i++) {\n      byteBuffer.put(compressedDataIndex[i]);\n    }\n    byteBuffer.flip();\n    channel.write(byteBuffer);\n  }\n catch (  IOException exception) {\n    throw new CarbonDataWriterException(\"Problem in writing carbon file: \",exception);\n  }\n  return offset;\n}"}
{"ids": "35769", "raw_code": "public boolean eval(){\n  if (sourceFileSets.size() == 0 && sourceResources.size() == 0 && sourceFile == null) {\n    throw new BuildException(\"At least one srcfile or a nested <srcfiles> or <srcresources> element must be set.\");\n  }\n  if ((sourceFileSets.size() > 0 || sourceResources.size() > 0) && sourceFile != null) {\n    throw new BuildException(\"Cannot specify both the srcfile attribute and a nested <srcfiles> or <srcresources> element.\");\n  }\n  if (urlbase == null) {\n    throw new BuildException(\"The urlbase attribute must be set.\");\n  }\n  if (sourceFile != null && !sourceFile.exists()) {\n    throw new BuildException(sourceFile.getAbsolutePath() + \" not found.\");\n  }\n  boolean upToDate=true;\n  if (sourceFile != null) {\n    Resource fileResource=new FileResource(sourceFile);\n    upToDate=isUpToDate(fileResource);\n  }\n  if (upToDate) {\n    Enumeration e=sourceFileSets.elements();\n    while (upToDate && e.hasMoreElements()) {\n      FileSet fs=(FileSet)e.nextElement();\n      Iterator it=fs.iterator();\n      while (upToDate && it.hasNext()) {\n        Resource r=(Resource)it.next();\n        upToDate=isUpToDate(r);\n      }\n    }\n  }\n  if (upToDate) {\n    Resource[] r=sourceResources.listResources();\n    for (int i=0; upToDate && i < r.length; i++) {\n      upToDate=isUpToDate(r[i]);\n    }\n  }\n  return upToDate;\n}"}
{"ids": "23251", "raw_code": "private int handleAggregationPacket(Buffer input,Buffer output){\n  byte[] bufferData=(byte[])input.getData();\n  if (aggregationPositon + 1 >= bufferData.length) {\n    aggregationPositon=1;\n    output.setDiscard(true);\n    return BUFFER_PROCESSED_OK;\n  }\n  int nalu_size=(((bufferData[aggregationPositon] & 0xff) << 8) | (bufferData[aggregationPositon + 1] & 0xff));\n  aggregationPositon+=2;\n  if (aggregationPositon + nalu_size > bufferData.length) {\n    aggregationPositon=1;\n    return BUFFER_PROCESSED_FAILED;\n  }\n  extractNalUnitHeader(aggregationPositon,input);\n  if (mNalUnitHeader.isSingleNalUnitPacket()) {\n    byte[] data=new byte[nalu_size];\n    System.arraycopy(bufferData,aggregationPositon,data,0,nalu_size);\n    aggregationPositon+=nalu_size;\n    output.setData(data);\n    output.setLength(data.length);\n    output.setOffset(0);\n    output.setTimestamp(input.getTimestamp());\n    output.setSequenceNumber(input.getSequenceNumber());\n    output.setVideoOrientation(input.getVideoOrientation());\n    output.setFormat(input.getFormat());\n    output.setFlags(input.getFlags());\n    return INPUT_BUFFER_NOT_CONSUMED;\n  }\n  aggregationPositon=1;\n  return BUFFER_PROCESSED_FAILED;\n}"}
{"ids": "48570", "raw_code": "protected int decodeLinePrefix(PushbackInputStream inStream,OutputStream outStream) throws IOException {\n  int i;\n  int nLen, nSeq;\n  byte xtmp[];\n  int c;\n  crc.value=0;\n  while (true) {\n    c=inStream.read(tmp,0,1);\n    if (c == -1) {\n      throw new CEStreamExhausted();\n    }\n    if (tmp[0] == '*') {\n      break;\n    }\n  }\n  lineAndSeq.reset();\n  decodeAtom(inStream,lineAndSeq,2);\n  xtmp=lineAndSeq.toByteArray();\n  nLen=xtmp[0] & 0xff;\n  nSeq=xtmp[1] & 0xff;\n  if (nSeq != sequence) {\n    throw new CEFormatException(\"UCDecoder: Out of sequence line.\");\n  }\n  sequence=(sequence + 1) & 0xff;\n  return (nLen);\n}"}
{"ids": "75005", "raw_code": "protected void updateCachedAWTSizes(final Dimension min,final Dimension pref,final Dimension max){\n  assert EventQueue.isDispatchThread();\n  if (verboseSizeLayout) {\n    System.err.println(\"AWT thread: updated component sizes: \" + min + \" <= \"+ pref+ \" <= \"+ max);\n  }\n  lastValidatedAWTTime=++currentAWTTime;\n  boolean mustNotify;\nsynchronized (this) {\n    mustNotify=cachedSizesInitialized == 0;\n    if (!mustNotify) {\n      mustNotify=!(min.equals(cachedMinSize) && pref.equals(cachedPrefSize) && max.equals(cachedMaxSize));\n    }\n    if (cachedSizesInitialized == 0) {\n      cachedSizesInitialized=1;\n    }\n    cachedMinSize=min;\n    cachedPrefSize=pref;\n    cachedMaxSize=max;\n    if (INITIAL_CLIENT_AREA_WORKAROUND && initialClientArea != null) {\n      initialClientArea.width=cachedPrefSize.width;\n      initialClientArea.height=cachedPrefSize.height;\n    }\n  }\n  if (mustNotify) {\n    final int onBehalfAWTTime=lastValidatedAWTTime;\n    ThreadingHandler.getInstance().asyncExec(display,null);\n  }\n}"}
{"ids": "66258", "raw_code": "public boolean isDecimalPoint(){\n  if (m_decimalPoint == null) {\n    DecimalFormatSymbols dfs=new DecimalFormatSymbols(m_locale);\n    m_decimalPoint=new Boolean(dfs.getDecimalSeparator() == '.');\n  }\n  return m_decimalPoint.booleanValue();\n}"}
{"ids": "10905", "raw_code": "public void removeLayer(Layer layer){\n  if (layer != null && layer.isRemovable()) {\n    List<Layer> currentLayers=getLayerList();\n    currentLayers.remove(layer);\n    setLayerList(currentLayers);\n  }\n else {\n    if (layer != null) {\n      logger.warning(\"received command to remove \" + layer.getName() + \", which has been designated as *NOT* removeable\");\n      throw new com.bbn.openmap.util.HandleError(\"LayerHandler commanded to delete a layer (\" + layer.getName() + \") that is not removeable\");\n    }\n  }\n}"}
{"ids": "4587", "raw_code": "public Option[] findAllOptionTypes(final Class optionClass){\n  Check.notNull(optionClass,\"optionClass\");\n  return findAllOptionTypes(new Class[]{optionClass});\n}"}
{"ids": "4987", "raw_code": "public int via_padstack_count(){\n  return via_padstacks.size();\n}"}
{"ids": "66078", "raw_code": "public static boolean isEarlierTransaction(MCostDetail cd,int C_AcctSchema_ID,int M_CostType_ID,int M_CostElement_ID,String costingLevel){\n  MTransaction trx=new MTransaction(cd.getCtx(),cd.getM_Transaction_ID(),cd.get_TrxName());\n  MCostDetail last_cd=getLastTransaction(trx,C_AcctSchema_ID,M_CostType_ID,M_CostElement_ID,costingLevel);\n  if (last_cd == null)   return false;\n  if (cd.getSeqNo() <= last_cd.getSeqNo() && cd.getM_Transaction_ID() != last_cd.getM_Transaction_ID()) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "48532", "raw_code": "private void drawTranslatedRenderedImage(RenderedImage img,Rectangle region,int i2uTransX,int i2uTransY){\n  int tileGridXOffset=img.getTileGridXOffset();\n  int tileGridYOffset=img.getTileGridYOffset();\n  int tileWidth=img.getTileWidth();\n  int tileHeight=img.getTileHeight();\n  int minTileX=getTileIndex(region.x,tileGridXOffset,tileWidth);\n  int minTileY=getTileIndex(region.y,tileGridYOffset,tileHeight);\n  int maxTileX=getTileIndex(region.x + region.width - 1,tileGridXOffset,tileWidth);\n  int maxTileY=getTileIndex(region.y + region.height - 1,tileGridYOffset,tileHeight);\n  ColorModel colorModel=img.getColorModel();\n  Rectangle tileRect=new Rectangle();\n  for (int ty=minTileY; ty <= maxTileY; ty++) {\n    for (int tx=minTileX; tx <= maxTileX; tx++) {\n      Raster raster=img.getTile(tx,ty);\n      tileRect.x=tx * tileWidth + tileGridXOffset;\n      tileRect.y=ty * tileHeight + tileGridYOffset;\n      tileRect.width=tileWidth;\n      tileRect.height=tileHeight;\n      clipTo(tileRect,region);\n      WritableRaster wRaster=null;\n      if (raster instanceof WritableRaster) {\n        wRaster=(WritableRaster)raster;\n      }\n else {\n        wRaster=Raster.createWritableRaster(raster.getSampleModel(),raster.getDataBuffer(),null);\n      }\n      wRaster=wRaster.createWritableChild(tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,null);\n      BufferedImage bufImg=new BufferedImage(colorModel,wRaster,colorModel.isAlphaPremultiplied(),null);\n      copyImage(bufImg,tileRect.x + i2uTransX,tileRect.y + i2uTransY,0,0,tileRect.width,tileRect.height,null,null);\n    }\n  }\n}"}
{"ids": "78667", "raw_code": "public void addOutOfContextMessage(ConsensusMessage m){\n  outOfContextLock.lock();\n  if (m.getType() == MessageFactory.PROPOSE) {\n    Logger.println(\"(ExecutionManager.addOutOfContextMessage) adding \" + m);\n    outOfContextProposes.put(m.getNumber(),m);\n  }\n else {\n    List<ConsensusMessage> messages=outOfContext.get(m.getNumber());\n    if (messages == null) {\n      messages=new LinkedList<ConsensusMessage>();\n      outOfContext.put(m.getNumber(),messages);\n    }\n    Logger.println(\"(ExecutionManager.addOutOfContextMessage) adding \" + m);\n    messages.add(m);\n  }\n  outOfContextLock.unlock();\n}"}
{"ids": "70054", "raw_code": "private long calculateCapacity(long minimumCapacity){\n  long newCapacity=Math.min(Math.max(capacity,2),minimumCapacity);\n  while (newCapacity < Math.min(minimumCapacity,maxCapacity)) {\n    newCapacity<<=1;\n  }\n  return Math.min(newCapacity,maxCapacity);\n}"}
{"ids": "31057", "raw_code": "protected Object createResource() throws ResourceUnavailableException {\n  Object resource=create();\n  freed.add(resource);\n  numCreated++;\n  return (resource);\n}"}
{"ids": "14351", "raw_code": "public void upgrade() throws Exception {\n  if (!checkUpgradePreconditions()) {\n    return;\n  }\n  backupManager.createOpenDJBackup();\n  try (BufferedWriter out=new BufferedWriter(new FileWriter(upgradeMarker))){\n    out.write(currentVersion.toString());\n    out.write('\\n');\n  }\n   if (currentVersion.isOlderThan(DJ_245_VERSION)) {\n    backupFile(\"config/config.ldif\");\n    backupFile(\"config/admin-backend.ldif\");\n    backupFile(\"config/java.properties\");\n    unpackZipFile(true);\n    callOldDJUpgrade();\n  }\n else {\n    unpackZipFile(false);\n    if (currentVersion.equals(DJ_246_VERSION)) {\n      try {\n        File badSchema=new File(installRoot + File.separator + \"config\"+ File.separator+ \"schema\"+ File.separator+ \"cts-add-schema.ldif\");\n        delete(badSchema);\n      }\n catch (      RuntimeException e) {\n      }\n      File goodSchema=new File(servletCtx.getRealPath(File.separator + \"WEB-INF\" + File.separator+ \"template\"+ File.separator+ \"ldif\"+ File.separator+ \"sfha\"+ File.separator+ \"99-cts-add-schema-backport.ldif\"));\n      File moveTo=new File(installRoot + File.separator + \"config\"+ File.separator+ \"schema\"+ File.separator+ \"99-cts-add-schema-backport.ldif\");\n      copy(goodSchema.toPath(),moveTo.toPath());\n    }\n    int ret=callDJUpgradeMechanism();\n    if (ret == 0) {\n      message(\"Upgrade completed successfully\");\n      delete(upgradeMarker);\n      final String lockFile=LockFileManager.getServerLockFileName();\n      LockFileManager.releaseLock(lockFile,new StringBuilder());\n    }\n else {\n      throw new UpgradeException(\"OpenDJ upgrade failed with code:  \" + ret);\n    }\n  }\n}"}
{"ids": "84865", "raw_code": "public static final Optional<File> findSteamVRManifest(final ArrayList<File> indexedSteamFolders){\n  for (  final File f : indexedSteamFolders) {\n    final File currentFile=new File(f.getAbsolutePath() + SteamConstants.STEAM_VR_APPS_MANIFEST_FILE_LOCATION);\n    if (currentFile.exists())     return Optional.ofNullable(currentFile);\n  }\n  return Optional.empty();\n}"}
{"ids": "49644", "raw_code": "private static boolean isClose(float value,float targetValue){\n  return Math.abs(value - targetValue) < 0.001f;\n}"}
{"ids": "5626", "raw_code": "public int size(){\n  return _myTcpClients.size();\n}"}
{"ids": "65558", "raw_code": "public static MMovementCartBean addToMovementCart(Properties ctx,StockMovementBean bean,MMovementCartBean cartBean,boolean isSales,boolean ifAdd) throws OperationException, ProductNotFoundException, ProductNotOnPriceListException {\n  ArrayList<ItemBean> oldItems;\n  if (cartBean == null) {\n    cartBean=new MMovementCartBean();\n    oldItems=new ArrayList<ItemBean>();\n  }\n else {\n    oldItems=cartBean.getItems();\n  }\n  ArrayList<ItemBean> oldItemsClone=(ArrayList)oldItems.clone();\n  ArrayList itemsToBeAdded=getMMovementItems(ctx,bean);\n  oldItems=addToMMovementList(ctx,oldItemsClone,itemsToBeAdded,ifAdd);\n  Integer priceListId=POSTerminalManager.getPriceListId(ctx,isSales);\n  oldItems=setMMovementItemCosts(ctx,priceListId,oldItems,isSales);\n  cartBean.setItems(oldItems);\n  cartBean.setPricelistId(priceListId);\n  return cartBean;\n}"}
{"ids": "34040", "raw_code": "private static List<Field> filterFieldList(List<Field> fields,Class<?> filterClass){\n  List<Field> filteredFields=new LinkedList<>();\n  for (  Field f : fields) {\n    if ((filterClass == null) || filterClass.isAssignableFrom(f.getType())) {\n      filteredFields.add(f);\n    }\n  }\n  return filteredFields;\n}"}
{"ids": "85468", "raw_code": "protected SimpleJavaFileObject(URI uri,Kind kind){\n  uri.getClass();\n  kind.getClass();\n  if (uri.getPath() == null)   throw new IllegalArgumentException(\"URI must have a path: \" + uri);\n  this.uri=uri;\n  this.kind=kind;\n}"}
{"ids": "30453", "raw_code": "public int increment(int val){\n  if (val < 0) {\n    return decrement(-val);\n  }\n  lock.lock();\n  int newValue=(value+=val);\n  lock.unlock();\n  return newValue;\n}"}
{"ids": "66876", "raw_code": "protected void releaseInternal(){\n  ContextTranslator.pts_1cfa_map=null;\n  ContextTranslator.objs_1cfa_map=null;\n}"}
{"ids": "44554", "raw_code": "public static void addConstraintViolationsRDF(List<ConstraintViolation> cvs,Model result,boolean createSource){\n  for (  ConstraintViolation cv : cvs) {\n    Resource r=result.createResource(SPIN.ConstraintViolation);\n    String message=cv.getMessage();\n    if (message != null && message.length() > 0) {\n      r.addProperty(RDFS.label,message);\n    }\n    if (cv.getRoot() != null) {\n      r.addProperty(SPIN.violationRoot,cv.getRoot());\n    }\n    r.addProperty(SPIN.violationLevel,cv.getLevel());\n    for (    SimplePropertyPath path : cv.getPaths()) {\n      if (path instanceof ObjectPropertyPath) {\n        r.addProperty(SPIN.violationPath,path.getPredicate());\n      }\n else {\n        Resource p=result.createResource(SP.ReversePath);\n        p.addProperty(SP.path,path.getPredicate());\n        r.addProperty(SPIN.violationPath,p);\n      }\n    }\n    if (createSource && cv.getSource() != null) {\n      r.addProperty(SPIN.violationSource,cv.getSource());\n    }\n    if (cv.getValue() != null) {\n      r.addProperty(SPIN.violationValue,cv.getValue());\n    }\n  }\n}"}
{"ids": "63258", "raw_code": "public Page copy(long version){\n  Page newPage=create(map,version,keys,values,children,totalCount,getMemory());\n  removePage();\n  newPage.cachedCompare=cachedCompare;\n  return newPage;\n}"}
{"ids": "40271", "raw_code": "public boolean startBusytone(final String busytoneUriType){\n  if (busytoneUriType.isEmpty()) {\n    return false;\n  }\n  try {\n    Log.d(TAG,\"startBusytone(): UriType=\" + busytoneUriType);\n    if (mBusytone != null) {\n      if (mBusytone.isPlaying()) {\n        Log.d(TAG,\"startBusytone(): is already playing\");\n        return false;\n      }\n else {\n        stopBusytone();\n      }\n    }\n    Uri busytoneUri;\n    Map data=new HashMap<String,Object>();\n    data.put(\"name\",\"mBusytone\");\n    if (busytoneUriType.equals(\"_DTMF_\")) {\n      mBusytone=new myToneGenerator(myToneGenerator.BUSY);\n      mBusytone.startPlay(data);\n      return true;\n    }\n else {\n      busytoneUri=getBusytoneUri(busytoneUriType);\n      if (busytoneUri == null) {\n        Log.d(TAG,\"startBusytone(): no available media\");\n        return false;\n      }\n    }\n    mBusytone=new myMediaPlayer();\n    data.put(\"sourceUri\",busytoneUri);\n    data.put(\"setLooping\",false);\n    data.put(\"audioStream\",AudioManager.STREAM_VOICE_CALL);\n    setMediaPlayerEvents((MediaPlayer)mBusytone,\"mBusytone\");\n    mBusytone.startPlay(data);\n    return true;\n  }\n catch (  Exception e) {\n    Log.d(TAG,\"startBusytone() failed\");\n    Log.d(TAG,e.getMessage());\n    return false;\n  }\n}"}
{"ids": "54703", "raw_code": "private String moveToFolder(final String file,final String folder){\n  final File source=new File(file);\n  final File destination=new File(folder + File.separator + source.getName());\n  Log.i(TAG,file + \" stored in temp folder. Moving to \" + destination.getAbsolutePath());\n  try {\n    FileUtils.moveFile(source,destination);\n  }\n catch (  final IOException e) {\n    Log.e(TAG,\"I/O error while moving file\");\n  }\n  return destination.getAbsolutePath();\n}"}
{"ids": "15281", "raw_code": "public void putAll(Map m){\n  Set keys=m.keySet();\n  for (Iterator iter=keys.iterator(); iter.hasNext(); ) {\n    Object key=iter.next();\n    put(key,m.get(key));\n  }\n}"}
{"ids": "38033", "raw_code": "public void readOldFormat(Reader reader) throws Exception {\n  StreamTokenizer tokenizer;\n  int currentToken;\n  double firstIndex, secondIndex, weight;\n  tokenizer=new StreamTokenizer(reader);\n  initialize();\n  tokenizer.commentChar('%');\n  tokenizer.eolIsSignificant(true);\n  while (StreamTokenizer.TT_EOF != (currentToken=tokenizer.nextToken())) {\n    if (currentToken == StreamTokenizer.TT_EOL) {\n      continue;\n    }\n    if (currentToken != StreamTokenizer.TT_NUMBER) {\n      throw new Exception(\"Only numbers and comments allowed \" + \"in cost file!\");\n    }\n    firstIndex=tokenizer.nval;\n    if (!Utils.eq((int)firstIndex,firstIndex)) {\n      throw new Exception(\"First number in line has to be \" + \"index of a class!\");\n    }\n    if ((int)firstIndex >= size()) {\n      throw new Exception(\"Class index out of range!\");\n    }\n    if (StreamTokenizer.TT_EOF == (currentToken=tokenizer.nextToken())) {\n      throw new Exception(\"Premature end of file!\");\n    }\n    if (currentToken == StreamTokenizer.TT_EOL) {\n      throw new Exception(\"Premature end of line!\");\n    }\n    if (currentToken != StreamTokenizer.TT_NUMBER) {\n      throw new Exception(\"Only numbers and comments allowed \" + \"in cost file!\");\n    }\n    secondIndex=tokenizer.nval;\n    if (!Utils.eq((int)secondIndex,secondIndex)) {\n      throw new Exception(\"Second number in line has to be \" + \"index of a class!\");\n    }\n    if ((int)secondIndex >= size()) {\n      throw new Exception(\"Class index out of range!\");\n    }\n    if ((int)secondIndex == (int)firstIndex) {\n      throw new Exception(\"Diagonal of cost matrix non-zero!\");\n    }\n    if (StreamTokenizer.TT_EOF == (currentToken=tokenizer.nextToken())) {\n      throw new Exception(\"Premature end of file!\");\n    }\n    if (currentToken == StreamTokenizer.TT_EOL) {\n      throw new Exception(\"Premature end of line!\");\n    }\n    if (currentToken != StreamTokenizer.TT_NUMBER) {\n      throw new Exception(\"Only numbers and comments allowed \" + \"in cost file!\");\n    }\n    weight=tokenizer.nval;\n    if (!Utils.gr(weight,0)) {\n      throw new Exception(\"Only positive weights allowed!\");\n    }\n    setCell((int)firstIndex,(int)secondIndex,new Double(weight));\n  }\n}"}
{"ids": "83595", "raw_code": "protected String handleDate(ResultSet rs,int columnIndex,String dateFormatString) throws SQLException {\n  java.sql.Date date=rs.getDate(columnIndex);\n  String value=null;\n  if (date != null) {\n    SimpleDateFormat dateFormat=new SimpleDateFormat(dateFormatString);\n    value=dateFormat.format(date);\n  }\n  return value;\n}"}
{"ids": "3739", "raw_code": "@Override public RandomAccessStream openFileRandomAccess() throws IOException {\n  if (_isWindows && isAux())   throw new FileNotFoundException(_file.toString());\n  return new FileRandomAccessStream(new RandomAccessFile(getFile(),\"rw\"));\n}"}
{"ids": "3819", "raw_code": "public QDate(TimeZone zone,long now){\n  _timeZone=zone;\n  if (zone == _gmtTimeZone) {\n    _stdName=_gmtStdName;\n    _dstName=_gmtDstName;\n  }\n else   if (zone == _localTimeZone) {\n    _stdName=_localStdName;\n    _dstName=_localDstName;\n  }\n else {\n    _stdName=_timeZone.getDisplayName(false,TimeZone.SHORT);\n    _dstName=_timeZone.getDisplayName(true,TimeZone.SHORT);\n  }\n  _calendar=new GregorianCalendar(_timeZone);\n  if (zone == _gmtTimeZone)   setGMTTime(now);\n else   setLocalTime(now);\n}"}
{"ids": "82579", "raw_code": "public static void serialize(Serializable obj,ByteArrayOutputStream bout){\n  try {\n    ObjectOutputStream out=new ObjectOutputStream(bout);\n    out.writeObject(obj);\n    out.close();\n  }\n catch (  IOException e) {\n    throw new IllegalStateException(\"Could not serialize \" + obj,e);\n  }\n}"}
{"ids": "27162", "raw_code": "public static String upper(String s){\n  return s.toUpperCase(Locale.ENGLISH);\n}"}
{"ids": "16468", "raw_code": "private void accept(Socket socket){\n  log.info(\"Client connected from {}\",socket.getInetAddress());\n  try {\n    InetAddress serverAddress=dns.getAddress(\"gamea.clashofclans.com\");\n    try (Connection clientConnection=new Connection(socket);Connection serverConnection=new Connection(new Socket(serverAddress,CLASH_PORT))){\n      ProxySession session=ProxySession.newSession(services.getMessageFactory(),clientConnection,serverConnection,filterChain);\n      log.info(\"Client {} disconnected\",socket);\n      VillageAnalyzer.logSession(session);\n    }\n   }\n catch (  IOException e) {\n    log.info(\"Could not proxy connection from {}: {}\",socket.getInetAddress(),e.toString());\n  }\n finally {\n    try {\n      socket.close();\n    }\n catch (    IOException e) {\n    }\n  }\n}"}
{"ids": "36053", "raw_code": "public void removeProcessListener(ProcessListener l){\n  listenerList.remove(l);\n}"}
{"ids": "30461", "raw_code": "public final static boolean isValidJavaIdentifier(String s){\n  if (s == null || s.length() == 0) {\n    return false;\n  }\n  char[] c=s.toCharArray();\n  if (!Character.isJavaIdentifierStart(c[0])) {\n    return false;\n  }\n  for (int i=1; i < c.length; i++) {\n    if (!Character.isJavaIdentifierPart(c[i])) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "70699", "raw_code": "final void sendHelp(){\n  ArrayList<String> help=help();\n  if (help.isEmpty()) {\n    return;\n  }\n  XmppMsg msg=new XmppMsg();\n  msg.addStringArray(help.toArray(new String[help.size()]));\n  send(msg);\n}"}
{"ids": "40332", "raw_code": "protected void init(){\n  LOG.info(\"Initializing sound service.\");\n  long startTime=System.currentTimeMillis();\n  bughouseSoundKeys=getSoundsKeys(\"bughouse\");\n  soundKeys=getSoundsKeys(\"\");\n  initSoundPlayer();\n  initSpeech();\n  LOG.info(\"Initializing sound service complete: \" + (System.currentTimeMillis() - startTime) + \"ms\");\n}"}
{"ids": "29597", "raw_code": "private static void runConfClient(final ProcessBuilder pb) throws Exception {\n  int exitCode=-1;\n  try {\n    Process process=pb.start();\n    exitCode=process.waitFor();\n  }\n catch (  IOException e) {\n    log.error(\"IOException: {}\",e);\n    exitCode=2;\n    throw e;\n  }\ncatch (  Exception e) {\n    log.error(\"Undetermined ConfigurationClient exitCode: {}\",e);\n    throw e;\n  }\nswitch (exitCode) {\ncase SUCCESS:\n    break;\ncase ERROR_CODE_CANNOT_DOWNLOAD_CONF:\n  throw new Exception(\"configuration-client error (exit code \" + exitCode + \"), download failed\");\ncase ERROR_CODE_EXPIRED_CONF:\nthrow new Exception(\"configuration-client error (exit code \" + exitCode + \"), configuration is outdated\");\ncase ERROR_CODE_INVALID_SIGNATURE_VALUE:\nthrow new Exception(\"configuration-client error (exit code \" + exitCode + \"), configuration is incorrect\");\ncase ERROR_CODE_INTERNAL:\nthrow new Exception(\"configuration-client error (exit code \" + exitCode + \")\");\ndefault :\nthrow new Exception(\"Failed to download GlobalConf \" + \"(configucation-client exit code \" + exitCode + \"), \"+ \"make sure configuration-client is\"+ \"installed correctly\");\n}\n}"}
{"ids": "51208", "raw_code": "protected final void acceptAnnotations(final MethodVisitor mv){\n  int n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();\n  for (int i=0; i < n; ++i) {\n    TypeAnnotationNode an=visibleTypeAnnotations.get(i);\n    an.accept(mv.visitInsnAnnotation(an.typeRef,an.typePath,an.desc,true));\n  }\n  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();\n  for (int i=0; i < n; ++i) {\n    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);\n    an.accept(mv.visitInsnAnnotation(an.typeRef,an.typePath,an.desc,false));\n  }\n}"}
{"ids": "14961", "raw_code": "public boolean doCheckSiteStatus(URL url){\n  if (debug.messageEnabled()) {\n    debug.message(\"SiteStatusCheckThreadImpl.doCheckSiteStatus: check \" + url);\n  }\n  URLChecker checker=getURLChecker(url);\n  if (checker != null && (checker.getStatus() == URLStatus.STATUS_UNKNOWN)) {\nsynchronized (checker) {\n      checker.cancel();\n      checker.notify();\n    }\nsynchronized (urlCheckers) {\n      urlCheckers.remove(getThreadName(url));\n    }\n    debug.error(\"SiteStatusCheckThreadImpl.doCheckSiteStatus() \" + \"Killing thread \" + getThreadName(url));\n    return false;\n  }\n else   if ((checker != null) && (checker.getStatus() == URLStatus.STATUS_AVAILABLE)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "34901", "raw_code": "protected void fill() throws IOException {\n  ensureOpen();\n  len=in.read(buf,0,buf.length);\n  if (len == -1) {\n    throw new EOFException(\"Unexpected end of ZLIB input stream\");\n  }\n  inf.setInput(buf,0,len);\n}"}
{"ids": "34839", "raw_code": "private boolean overrides(ExecutableElement e,Class<?> clazz,String method){\n  TypeElement clazzElt=elements.getTypeElement(clazz.getCanonicalName());\n  assert clazzElt != null;\n  for (  ExecutableElement elt : ElementFilter.methodsIn(clazzElt.getEnclosedElements())) {\n    if (elt.getSimpleName().contentEquals(method) && elements.overrides(e,elt,clazzElt)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "13981", "raw_code": "public Element signXML(Document doc,String certAlias,String algorithm,String idAttrName,String id,boolean includeCert,String xpath) throws XMLSignatureException {\n  return signXMLUsingKeyPass(doc,certAlias,null,algorithm,idAttrName,id,includeCert,xpath);\n}"}
{"ids": "15350", "raw_code": "public int size(){\n  return attrs.size();\n}"}
{"ids": "69172", "raw_code": "protected Socket __openPassiveDataConnection(int command,String arg) throws IOException, FtpExceptionCanNotHaveDataConnection {\n  Socket socket;\n  if (pasv() != FTPReply.ENTERING_PASSIVE_MODE)   throw new FtpExceptionCanNotHaveDataConnection(\"pasv() failed. \" + getReplyString());\n  try {\n    __parsePassiveModeReply(getReplyStrings()[0]);\n  }\n catch (  MalformedServerReplyException e) {\n    throw new FtpExceptionCanNotHaveDataConnection(e.getMessage());\n  }\n  socket=_socketFactory_.createSocket(__passiveHost,__passivePort);\n  if (!FTPReply.isPositivePreliminary(sendCommand(command,arg))) {\n    socket.close();\n    return null;\n  }\n  if (__remoteVerificationEnabled && !verifyRemote(socket)) {\n    InetAddress host1, host2;\n    host1=socket.getInetAddress();\n    host2=getRemoteAddress();\n    socket.close();\n    throw new FtpExceptionCanNotHaveDataConnection(\"Host attempting data connection \" + host1.getHostAddress() + \" is not same as server \"+ host2.getHostAddress()+ \" So we intentionally close it for security precaution.\");\n  }\n  if (__dataTimeout >= 0)   socket.setSoTimeout(__dataTimeout);\n  return socket;\n}"}
{"ids": "81131", "raw_code": "public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {\n  Monitor mon=null;\n  if (params.isInterfaceEnabled && params.isEnabled) {\n    mon=MonitorFactory.start(labelerInt.getSummaryLabel(method));\n  }\n  try {\n    if (method.equals(EQUALS_METHOD))     return Boolean.valueOf(equals(args[0]));\n else     return method.invoke(monitoredObj,args);\n  }\n catch (  InvocationTargetException e) {\n    if (params.isEnabled) {\n      String sqlMessage=\"\";\n      String detailStackTrace=null;\n      Throwable rootCause=e.getCause();\n      if (rootCause instanceof SQLException) {\n        SQLException sqlException=(SQLException)rootCause;\n        sqlMessage=\",ErrorCode=\" + sqlException.getErrorCode() + \",SQLState=\"+ sqlException.getSQLState();\n      }\n      trackException(rootCause,method,sqlMessage);\n    }\n    throw e.getCause();\n  }\n finally {\n    if (mon != null)     mon.stop();\n  }\n}"}
{"ids": "83095", "raw_code": "public static void copyStream(final InputStream fromStream,final OutputStream toStream) throws IOException {\n  byte[] buffer=new byte[4096];\n  int bytesRead;\n  while ((bytesRead=fromStream.read(buffer)) != -1) {\n    toStream.write(buffer,0,bytesRead);\n  }\n}"}
{"ids": "39202", "raw_code": "public static int probRound(double value,Random rand){\n  if (value >= 0) {\n    double lower=Math.floor(value);\n    double prob=value - lower;\n    if (rand.nextDouble() < prob) {\n      return (int)lower + 1;\n    }\n else {\n      return (int)lower;\n    }\n  }\n else {\n    double lower=Math.floor(Math.abs(value));\n    double prob=Math.abs(value) - lower;\n    if (rand.nextDouble() < prob) {\n      return -((int)lower + 1);\n    }\n else {\n      return -(int)lower;\n    }\n  }\n}"}
{"ids": "74770", "raw_code": "private void loadStringValue(JTextField comp,final String elementName){\n  String propValue=properties.getValue(elementName);\n  if (propValue != null && !propValue.isEmpty()) {\n    comp.setText(propValue);\n  }\n}"}
{"ids": "10808", "raw_code": "public static Ed25519GroupElement toRepresentation(final Ed25519GroupElement g,final CoordinateSystem newCoordinateSystem){\n  final BigInteger x;\n  final BigInteger y;\n  final BigInteger gX=toBigInteger(g.getX().encode());\n  final BigInteger gY=toBigInteger(g.getY().encode());\n  final BigInteger gZ=toBigInteger(g.getZ().encode());\n  final BigInteger gT=null == g.getT() ? null : toBigInteger(g.getT().encode());\nswitch (g.getCoordinateSystem()) {\ncase AFFINE:\n    x=gX;\n  y=gY;\nbreak;\ncase P2:\ncase P3:\nx=gX.multiply(gZ.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);\ny=gY.multiply(gZ.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);\nbreak;\ncase P1xP1:\nx=gX.multiply(gZ.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);\nassert gT != null;\ny=gY.multiply(gT.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);\nbreak;\ncase CACHED:\nx=gX.subtract(gY).multiply(gZ.multiply(new BigInteger(\"2\")).modInverse(Ed25519Field.P)).mod(Ed25519Field.P);\ny=gX.add(gY).multiply(gZ.multiply(new BigInteger(\"2\")).modInverse(Ed25519Field.P)).mod(Ed25519Field.P);\nbreak;\ncase PRECOMPUTED:\nx=gX.subtract(gY).multiply(new BigInteger(\"2\").modInverse(Ed25519Field.P)).mod(Ed25519Field.P);\ny=gX.add(gY).multiply(new BigInteger(\"2\").modInverse(Ed25519Field.P)).mod(Ed25519Field.P);\nbreak;\ndefault :\nthrow new UnsupportedOperationException();\n}\nswitch (newCoordinateSystem) {\ncase AFFINE:\nreturn Ed25519GroupElement.affine(toFieldElement(x),toFieldElement(y),Ed25519Field.ONE);\ncase P2:\nreturn Ed25519GroupElement.p2(toFieldElement(x),toFieldElement(y),Ed25519Field.ONE);\ncase P3:\nreturn Ed25519GroupElement.p3(toFieldElement(x),toFieldElement(y),Ed25519Field.ONE,toFieldElement(x.multiply(y).mod(Ed25519Field.P)));\ncase P1xP1:\nreturn Ed25519GroupElement.p1xp1(toFieldElement(x),toFieldElement(y),Ed25519Field.ONE,Ed25519Field.ONE);\ncase CACHED:\nreturn Ed25519GroupElement.cached(toFieldElement(y.add(x).mod(Ed25519Field.P)),toFieldElement(y.subtract(x).mod(Ed25519Field.P)),Ed25519Field.ONE,toFieldElement(D.multiply(new BigInteger(\"2\")).multiply(x).multiply(y).mod(Ed25519Field.P)));\ncase PRECOMPUTED:\nreturn Ed25519GroupElement.precomputed(toFieldElement(y.add(x).mod(Ed25519Field.P)),toFieldElement(y.subtract(x).mod(Ed25519Field.P)),toFieldElement(D.multiply(new BigInteger(\"2\")).multiply(x).multiply(y).mod(Ed25519Field.P)));\ndefault :\nthrow new UnsupportedOperationException();\n}\n}"}
{"ids": "46968", "raw_code": "private void endFormals(){\n  if (hasFormals) {\n    hasFormals=false;\n    buf.append('>');\n  }\n}"}
{"ids": "63980", "raw_code": "public Builder label(char label){\n  this.label=Character.toUpperCase(label);\n  return this;\n}"}
{"ids": "26414", "raw_code": "public static boolean isLetterOrDigit(char c){\n  return Character.isLetterOrDigit(c);\n}"}
{"ids": "59581", "raw_code": "public static int putLong(byte[] bytes,int offset,long val){\n  if (littleEndian) {\n    val=Long.reverseBytes(val);\n  }\n  theUnsafe.putLong(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val);\n  return offset + Bytes.SIZEOF_LONG;\n}"}
{"ids": "42350", "raw_code": "private Instruction scheduleScalarDefsEarly(Enumeration<Operand> e,Instruction earlyPos,Instruction inst){\n  while (e.hasMoreElements()) {\n    Operand op=e.nextElement();\n    Instruction def=definingInstruction(op);\n    scheduleEarly(def);\n    if (def.isBranch())     def=dominanceSuccessor(def,inst);\n    earlyPos=maxDominatorDepth(def,earlyPos);\n  }\n  return earlyPos;\n}"}
{"ids": "41750", "raw_code": "public void makeUnique(String[] columns,String conflictPolicy){\n  uniques.add(CONSTRAINT_UNIQUE_ + TextUtils.join(\"_\",columns) + _UNIQUE__+ TextUtils.join(\",\",columns)+ __ON_CONFLICT_+ conflictPolicy+ COMMA);\n}"}
{"ids": "54028", "raw_code": "default <T>void forEachMatchingFieldNameWithBoolean(String regex,BiConsumer<String,Boolean> function){\n  forEachMatchingFieldNameWithBoolean(Pattern.compile(regex),1,function);\n}"}
{"ids": "44046", "raw_code": "public void exit(){\n  cancel();\n  final float radius=lerp(0,mOuterRadius,mTweenRadius);\n  final float remaining;\n  if (mAnimRadius != null && mAnimRadius.isRunning()) {\n    remaining=mOuterRadius - radius;\n  }\n else {\n    remaining=mOuterRadius;\n  }\n  final int radiusDuration=(int)(1000 * Math.sqrt(remaining / (WAVE_TOUCH_UP_ACCELERATION + WAVE_TOUCH_DOWN_ACCELERATION) * mDensity) + 0.5);\n  final int opacityDuration=(int)(1000 * mOpacity / WAVE_OPACITY_DECAY_VELOCITY + 0.5f);\n  exitSoftware(radiusDuration,opacityDuration);\n}"}
{"ids": "9518", "raw_code": "@Override public void handleRequestBody(SolrQueryRequest req,SolrQueryResponse rsp) throws ParseException, IOException, SyntaxError {\n  String deletionQuery=getDeletionQuery();\n  LOGGER.info(\"Handle deletion request for query {}\",deletionQuery);\n  if (olderDocumentsExists(deletionQuery,req,rsp)) {\n    UpdateRequestProcessor processor=getProcessor(req,rsp);\n    deleteOldDocuments(deletionQuery,processor,req);\n    commitDeletions(processor,req);\n  }\n}"}
{"ids": "43354", "raw_code": "public <V extends Comparable<? super V>>OptionalLong maxBy(LongFunction<V> keyExtractor){\n  ObjLongBox<V> result=collect(null,null,null);\n  return result.a == null ? OptionalLong.empty() : OptionalLong.of(result.b);\n}"}
{"ids": "40507", "raw_code": "public void queryAndCompareShards(SolrParams params) throws Exception {\n  updateMappingsFromZk(jettys,clients);\n  List<String> shards=new ArrayList<>(shardToJetty.keySet());\n  for (  String shard : shards) {\n    queryAndCompareReplicas(params,shard);\n  }\n}"}
{"ids": "82549", "raw_code": "public int indexOf(int ch){\n  return indexOf(ch,0);\n}"}
{"ids": "77521", "raw_code": "private Watcher initWatcher(SolrZkClient zkClient){\n  wrappedWatcher=new BufferStateWatcher();\n  return zkClient.wrapWatcher(wrappedWatcher);\n}"}
{"ids": "54958", "raw_code": "public Configuration(){\n  super();\n}"}
{"ids": "16447", "raw_code": "public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5,K k6,V v6,K k7,V v7){\n  Map map=of();\n  map.put(k1,v1);\n  map.put(k2,v2);\n  map.put(k3,v3);\n  map.put(k4,v4);\n  map.put(k5,v5);\n  map.put(k6,v6);\n  map.put(k7,v7);\n  return map;\n}"}
{"ids": "48917", "raw_code": "public long longAt(int index){\n  lb.position(index);\n  return lb.get();\n}"}
{"ids": "37610", "raw_code": "private String startSetToString(){\n  StringBuffer FString=new StringBuffer();\n  boolean didPrint;\n  if (m_starting == null) {\n    return getStartSet();\n  }\n  for (int i=0; i < m_starting.length; i++) {\n    didPrint=false;\n    if ((m_hasClass == false) || (m_hasClass == true && i != m_classIndex)) {\n      FString.append((m_starting[i] + 1));\n      didPrint=true;\n    }\n    if (i == (m_starting.length - 1)) {\n      FString.append(\"\");\n    }\n else {\n      if (didPrint) {\n        FString.append(\",\");\n      }\n    }\n  }\n  return FString.toString();\n}"}
{"ids": "15543", "raw_code": "public static String makeTagClassName(String componentFamily,String rendererType){\n  if (componentFamily == null) {\n    return null;\n  }\n  String tagClassName=componentFamily;\n  if (rendererType != null) {\n    if (!componentFamily.equals(rendererType)) {\n      tagClassName=tagClassName + rendererType;\n    }\n  }\n  return tagClassName + \"Tag\";\n}"}
{"ids": "14980", "raw_code": "public void registerService(String serviceName,boolean createTemplate,boolean activate) throws AMException, SSOException {\n  if (debug.messageEnabled()) {\n    debug.message(\"AMOrganizationalUnitImpl.registerService(\" + serviceName + \", \"+ createTemplate+ \", \"+ activate+ \")\");\n  }\n  dsServices.registerService(super.token,super.entryDN,serviceName);\n  Set serviceStatus=getAttribute(SERVICE_STATUS_ATTRIBUTE);\n  if (!serviceStatus.equals(Collections.EMPTY_SET)) {\n    Iterator iter=serviceStatus.iterator();\n    while (iter.hasNext()) {\n      String status=(String)iter.next();\n      if (status.equalsIgnoreCase(serviceName)) {\n        Object args[]={serviceName};\n        throw new AMException(AMSDKBundle.getString(\"464\",args,super.locale),\"464\",args);\n      }\n    }\n  }\n else {\n    serviceStatus=new HashSet();\n  }\n  serviceStatus.add(serviceName);\n  setAttribute(SERVICE_STATUS_ATTRIBUTE,serviceStatus);\n  try {\n    store();\n  }\n catch (  AMException le) {\n    try {\n      Set objectClass=getAttribute(\"objectclass\");\n      if (debug.messageEnabled()) {\n        debug.message(\"object class=\" + objectClass);\n      }\n      if (!objectClass.contains(\"iplanet-am-managed-org-unit\")) {\n        objectClass.add(\"iplanet-am-managed-org-unit\");\n        setAttribute(\"objectclass\",objectClass);\n        setAttribute(SERVICE_STATUS_ATTRIBUTE,serviceStatus);\n        store();\n      }\n else {\n        throw le;\n      }\n    }\n catch (    Exception e) {\n      if (debug.messageEnabled()) {\n        debug.message(\"error adding objectclass\",e);\n      }\n      throw le;\n    }\n  }\n  if (createTemplate) {\n    try {\n      if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.POLICY)) {\n        createTemplate(AMTemplate.POLICY_TEMPLATE,serviceName,null);\n      }\n      if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.DYNAMIC)) {\n        createTemplate(AMTemplate.DYNAMIC_TEMPLATE,serviceName,null);\n      }\n    }\n catch (    SMSException smsex) {\n      throw new AMException(AMSDKBundle.getString(\"451\",super.locale),\"451\");\n    }\n  }\n}"}
{"ids": "75825", "raw_code": "public static void assertAlmostEquals(double expected,double actual,int decimals){\n  assertAlmostEquals(null,new Double(expected),new Double(actual),decimals);\n}"}
{"ids": "51012", "raw_code": "private static int snapVertical(Collection<ConstraintWidget> widgets,ConstraintWidget widget,ConstraintAnchor anchor,int position,ArrayList<SnapCandidate> snapCandidates){\n  SnapCandidate candidate=new SnapCandidate();\n  ConstraintHandle handle=WidgetInteractionTargets.constraintHandle(anchor);\n  if (handle == null) {\n    return position;\n  }\n  handle.setDrawY(position);\n  SnapPlacement.snapAnchor(widgets,widget,anchor,candidate);\n  if (candidate.target != null) {\n    ConstraintHandle targetHandle=WidgetInteractionTargets.constraintHandle(candidate.target);\n    int ty=candidate.y;\n    if (targetHandle != null) {\n      ty=targetHandle.getDrawY();\n    }\n    position=ty + candidate.margin;\n    snapCandidates.add(candidate);\n  }\n  return position;\n}"}
{"ids": "36568", "raw_code": "private double sin(double angle){\n  while (angle >= 180.0d) {\n    angle-=180.0d;\n  }\n  double value=(angle / 180.0d * Math.PI);\n  return Math.sin(value);\n}"}
{"ids": "1266", "raw_code": "public static String last(String list,String delimiter,boolean ignoreEmpty){\n  if (StringUtil.isEmpty(list))   return \"\";\n  int len=list.length();\n  char[] del;\n  if (StringUtil.isEmpty(delimiter)) {\n    del=new char[]{','};\n  }\n else   del=delimiter.toCharArray();\n  int index;\n  int x;\n  while (true) {\n    index=-1;\n    for (int i=0; i < del.length; i++) {\n      x=list.lastIndexOf(del[i]);\n      if (x > index)       index=x;\n    }\n    if (index == -1) {\n      return list;\n    }\n else     if (index + 1 == len) {\n      if (!ignoreEmpty)       return \"\";\n      list=list.substring(0,len - 1);\n      len--;\n    }\n else {\n      return list.substring(index + 1);\n    }\n  }\n}"}
{"ids": "84972", "raw_code": "private void tryParseTypeAttribute(IDOMElement element){\n  IDOMAttr typeAttr=(IDOMAttr)UiBinderXmlModelUtilities.getTypeAttribute(element);\n  if (typeAttr == null) {\n    return;\n  }\n  IRegion valueRegion=XmlUtilities.getAttributeValueRegion(typeAttr);\n  if (valueRegion == null) {\n    return;\n  }\n  String fqType=typeAttr.getNodeValue();\n  if (fqType == null) {\n    return;\n  }\n  final IType type=JavaModelSearch.findType(javaProject,fqType);\n  if (!JavaModelSearch.isValidElement(type)) {\n    problemMarkerManager.setTypeUndefinedError(valueRegion,fqType);\n  }\n else {\n    if (UiBinderXmlModelUtilities.isStyleElement(element)) {\n      IType cssResourceType=ClientBundleUtilities.findCssResourceType(javaProject);\n      if (cssResourceType != null) {\n        try {\n          if (!JavaUtilities.isSubtype(cssResourceType,type)) {\n            problemMarkerManager.setNotCssResourceSubtypeError(valueRegion,fqType);\n          }\n        }\n catch (        JavaModelException e) {\n          GWTPluginLog.logWarning(e,\"Could not validate the <ui:style>'s type attribute.\");\n        }\n      }\n    }\n  }\n  javaTypeReferences.add(fqType);\n}"}
{"ids": "25806", "raw_code": "private void clearDictionaryCache(){\n  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();\n  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());\n  for (int i=0; i < reverseDictionaries.size(); i++) {\n    Dictionary dictionary=reverseDictionaries.get(i);\n    dictionary.clear();\n  }\n}"}
{"ids": "66409", "raw_code": "public static List<MRelationType> retrieveTypes(final PO po,final int windowId){\n  if (po.get_KeyColumns().length != 1) {\n    logger.severe(po + \" has \" + po.get_KeyColumns().length+ \" key column(s). Should have one.\");\n    PORelationException.throwWrongKeyColumnCount(po);\n  }\n  final String keyColumn=po.get_KeyColumns()[0];\n  final int colId=MColumn.getColumn_ID(po.get_TableName(),keyColumn);\n  final PreparedStatement pstmt=DB.prepareStatement(SQL,po.get_TrxName());\n  ResultSet rs=null;\n  try {\n    pstmt.setInt(1,po.get_Table_ID());\n    pstmt.setInt(2,colId);\n    rs=pstmt.executeQuery();\n    final List<MRelationType> result=evalResultSet(po,windowId,rs);\n    logger.info(\"There are \" + result.size() + \" matching types for \"+ po);\n    return result;\n  }\n catch (  SQLException e) {\n    logger.severe(e.getMessage());\n    throw new AdempiereException(e);\n  }\n finally {\n    DB.close(rs,pstmt);\n  }\n}"}
{"ids": "48918", "raw_code": "public JdpJmxPacket(byte[] data) throws JdpException {\n  JdpPacketReader reader;\n  reader=new JdpPacketReader(data);\n  Map<String,String> p=reader.getDiscoveryDataAsMap();\n  String sId=p.get(UUID_KEY);\n  this.id=(sId == null) ? null : UUID.fromString(sId);\n  this.jmxServiceUrl=p.get(JMX_SERVICE_URL_KEY);\n  this.mainClass=p.get(MAIN_CLASS_KEY);\n  this.instanceName=p.get(INSTANCE_NAME_KEY);\n  this.processId=p.get(PROCESS_ID_KEY);\n  this.rmiHostname=p.get(RMI_HOSTNAME_KEY);\n  this.broadcastInterval=p.get(BROADCAST_INTERVAL_KEY);\n}"}
{"ids": "44471", "raw_code": "private UidRange parseUidRange(String range) throws DecodingException {\n  int pos=range.indexOf(':');\n  try {\n    if (pos == -1) {\n      if (range.length() == 1 && range.charAt(0) == '*') {\n        return new UidRange(MessageUid.MAX_VALUE);\n      }\n else {\n        long value=parseUnsignedInteger(range);\n        return new UidRange(MessageUid.of(value));\n      }\n    }\n else {\n      long val1=parseUnsignedInteger(range.substring(0,pos));\n      long val2=parseUnsignedInteger(range.substring(pos + 1));\n      if (val1 == Long.MAX_VALUE && val2 == Long.MAX_VALUE) {\n        return new UidRange(MessageUid.MAX_VALUE);\n      }\n else       if (val1 <= val2) {\n        return new UidRange(MessageUid.of(val1),MessageUid.of(val2));\n      }\n else       if (val1 == Long.MAX_VALUE) {\n        return new UidRange(MessageUid.of(val2),MessageUid.MAX_VALUE);\n      }\n else {\n        return new UidRange(MessageUid.of(val2),MessageUid.of(val1));\n      }\n    }\n  }\n catch (  NumberFormatException e) {\n    throw new DecodingException(HumanReadableText.INVALID_MESSAGESET,\"Invalid message set.\",e);\n  }\n}"}
{"ids": "79918", "raw_code": "public void addFXGLListener(FXGLListener listener){\n  systemListeners.add(listener);\n}"}
{"ids": "34448", "raw_code": "public void addDefinition(String definition){\n  if (!StringUtils.isEmpty(definition)) {\n    definitions.add(definition);\n  }\n}"}
{"ids": "76131", "raw_code": "@Override public void receiveEvent(ClientStateInformation information){\n  if (information.getState() != currentState) {\n    logger.info(\"Received status update: \" + information);\n    if (information.getState() == ClientState.SEARCH) {\n      searchStartTime=System.currentTimeMillis();\n      for (      SequenceOutputVariableFactory<?> factory : sequenceOutputVariableFactories.values()) {\n        factory.setStartTime(searchStartTime);\n      }\n    }\n    OutputVariable<Long> time=new OutputVariable<Long>(\"Time_\" + currentState.getName(),System.currentTimeMillis() - currentStateStarted);\n    outputVariables.put(time.getName(),time);\n    currentState=information.getState();\n    currentStateStarted=System.currentTimeMillis();\n  }\n}"}
{"ids": "28987", "raw_code": "public void addBugCode(BugCode bugCode){\n  bugCodeList.add(bugCode);\n}"}
{"ids": "23551", "raw_code": "@Override public final void write(int b){\n  if (this.ignoreWrites)   return;\n  checkIfWritable();\n  ensureCapacity(1);\n  buffer.put((byte)b);\n}"}
{"ids": "50985", "raw_code": "public static String underlinesToCamelCase(String string){\n  StringBuilder sb=new StringBuilder(string.length());\n  int n=string.length();\n  int i=0;\n  boolean upcaseNext=true;\n  for (; i < n; i++) {\n    char c=string.charAt(i);\n    if (c == '_') {\n      upcaseNext=true;\n    }\n else {\n      if (upcaseNext) {\n        c=Character.toUpperCase(c);\n      }\n      upcaseNext=false;\n      sb.append(c);\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "53594", "raw_code": "protected BestMatchFinder(String pattern){\n  searchPattern=pattern.toLowerCase();\n}"}
{"ids": "20417", "raw_code": "public int indexOf(Object key){\n  return key == null ? indexOfNull() : indexOf(key,key.hashCode());\n}"}
{"ids": "35173", "raw_code": "public long nextActionMillis(long now,long nextRetryTimeMillis){\n  for (  FileDownloadInfo info : downloads) {\n    long individualRetryTimeMillis=getNextActionMillisFor(now,info);\n    nextRetryTimeMillis=Math.min(individualRetryTimeMillis,nextRetryTimeMillis);\n  }\n  return nextRetryTimeMillis;\n}"}
{"ids": "45541", "raw_code": "private void pop(final String desc){\n  char c=desc.charAt(0);\n  if (c == '(') {\n    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);\n  }\n else   if (c == 'J' || c == 'D') {\n    pop(2);\n  }\n else {\n    pop(1);\n  }\n}"}
{"ids": "15823", "raw_code": "public Integer countPagesContainingTemplateNames(List<String> templateNames) throws WikiApiException {\n  return countFilteredPages(templateNames,true);\n}"}
{"ids": "45281", "raw_code": "static URL fixPureQueryTargets(URL base,String target) throws MalformedURLException {\n  if (!target.startsWith(\"?\"))   return new URL(base,target);\n  String basePath=base.getPath();\n  String baseRightMost=\"\";\n  int baseRightMostIdx=basePath.lastIndexOf(\"/\");\n  if (baseRightMostIdx != -1) {\n    baseRightMost=basePath.substring(baseRightMostIdx + 1);\n  }\n  if (target.startsWith(\"?\"))   target=baseRightMost + target;\n  return new URL(base,target);\n}"}
{"ids": "48968", "raw_code": "synchronized void add(Object obj){\n  if (objList != null) {\n    objList.add(obj);\n  }\n}"}
{"ids": "36104", "raw_code": "public void sort(){\n  Collections.sort(individuals,PERFORMANCE_COMPARATOR);\n}"}
{"ids": "42324", "raw_code": "void freeInterval(SpillLocationInterval i){\n  freeIntervals.add(i);\n}"}
{"ids": "79066", "raw_code": "private void checkAndWriteDictionaryChunkToFile() throws IOException {\n  if (oneDictionaryChunkList.size() >= dictionary_one_chunk_size) {\n    writeDictionaryFile();\n    createChunkList();\n  }\n}"}
{"ids": "12176", "raw_code": "private void ctrlSelect(D nodeData){\n  int insertionIndex=getInsertionIndex(nodeData);\n  insertAndSelectNode(nodeData,insertionIndex,!nodeData.equals(selectedNodes.get(insertionIndex)));\n}"}
{"ids": "46331", "raw_code": "private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n  byte[] asn1EncPrincipal=(byte[])ois.readObject();\n  byte[] encRealm=(byte[])ois.readObject();\n  try {\n    Realm realmObject=new Realm(new DerValue(encRealm));\n    PrincipalName krb5Principal=new PrincipalName(new DerValue(asn1EncPrincipal),realmObject);\n    realm=realmObject.toString();\n    fullName=krb5Principal.toString();\n    nameType=krb5Principal.getNameType();\n  }\n catch (  Exception e) {\n    throw new IOException(e);\n  }\n}"}
{"ids": "19717", "raw_code": "private static int readSwappedInteger(final DataInputStream input) throws IOException {\n  final int value1=input.readByte();\n  final int value2=input.readByte();\n  final int value3=input.readByte();\n  final int value4=input.readByte();\n  return ((value1 & 0xff) << 0) + ((value2 & 0xff) << 8) + ((value3 & 0xff) << 16)+ ((value4 & 0xff) << 24);\n}"}
{"ids": "73635", "raw_code": "private void consumePreNestedScroll(int dx,int dy,int[] consumed){\n  if (mOverScrollEffect == OverScrollEffect.BOUNCE && mUnconsumedOverScrollOffset != 0) {\n    int destOffset=mUnconsumedOverScrollOffset - dy;\n    if (!MathUtils.sameSign(destOffset,mUnconsumedOverScrollOffset)) {\n      destOffset=0;\n    }\n else     if (Math.abs(destOffset) > Math.abs(mUnconsumedOverScrollOffset)) {\n      destOffset=mUnconsumedOverScrollOffset;\n    }\n    consumed[0]=0;\n    consumed[1]=mUnconsumedOverScrollOffset - destOffset;\n    mUnconsumedOverScrollOffset=destOffset;\n    setScrollingOffset(getUnconsumedScrollingOffset());\n  }\n}"}
{"ids": "84472", "raw_code": "public StrBuilder replace(final int startIndex,int endIndex,final String replaceStr){\n  endIndex=validateRange(startIndex,endIndex);\n  final int insertLen=(replaceStr == null ? 0 : replaceStr.length());\n  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);\n  return this;\n}"}
{"ids": "75666", "raw_code": "public void closeFile(){\n  closeFile(true);\n}"}
{"ids": "46098", "raw_code": "public boolean isValid(int value){\n  return min <= value && value <= max;\n}"}
{"ids": "56303", "raw_code": "public PluginsInfo info(){\n  return info;\n}"}
{"ids": "57759", "raw_code": "public void firePropertyChange(String propertyName,int oldValue,int newValue){\n  firePropertyChange(propertyName,Integer.valueOf(oldValue),Integer.valueOf(newValue));\n}"}
{"ids": "86714", "raw_code": "static ArrayList<Field> allFields(final Class<?> clazz){\n  final ArrayList<Field> res=new ArrayList<>();\n  Class<?> cl=clazz;\n  while (cl != null) {\n    final Field[] fields=cl.getDeclaredFields();\n    Collections.addAll(res,fields);\n    cl=cl.getSuperclass();\n  }\n  return res;\n}"}
{"ids": "80614", "raw_code": "private void updateWeatherStates(){\n  boolean changed=temperature.update();\n  changed|=rain.update();\n  changed|=fog.update();\n  changed|=thunder.update();\n  if (changed) {\n    updateZones();\n  }\n}"}
{"ids": "48520", "raw_code": "public static RenderLoops makeRenderLoops(SurfaceType src,CompositeType comp,SurfaceType dst){\n  RenderLoops loops=new RenderLoops();\n  loops.drawLineLoop=DrawLine.locate(src,comp,dst);\n  loops.fillRectLoop=FillRect.locate(src,comp,dst);\n  loops.drawRectLoop=DrawRect.locate(src,comp,dst);\n  loops.drawPolygonsLoop=DrawPolygons.locate(src,comp,dst);\n  loops.drawPathLoop=DrawPath.locate(src,comp,dst);\n  loops.fillPathLoop=FillPath.locate(src,comp,dst);\n  loops.fillSpansLoop=FillSpans.locate(src,comp,dst);\n  loops.fillParallelogramLoop=FillParallelogram.locate(src,comp,dst);\n  loops.drawParallelogramLoop=DrawParallelogram.locate(src,comp,dst);\n  loops.drawGlyphListLoop=DrawGlyphList.locate(src,comp,dst);\n  loops.drawGlyphListAALoop=DrawGlyphListAA.locate(src,comp,dst);\n  loops.drawGlyphListLCDLoop=DrawGlyphListLCD.locate(src,comp,dst);\n  return loops;\n}"}
{"ids": "9453", "raw_code": "public void edit(Object plotCanvas){\n  String _label=JOptionPane.showInputDialog((PlotCanvas)plotCanvas,\"Choose axis label\",label);\n  if (_label != null) {\n    setLegend(_label);\n  }\n}"}
{"ids": "39715", "raw_code": "protected boolean excludeFile(String file){\n  if (excluded == null)   return false;\n  Iterator<String> iter=excluded.iterator();\n  while (iter.hasNext())   if (file.endsWith(iter.next()))   return true;\n  return false;\n}"}
{"ids": "40878", "raw_code": "public Builder deleteUserType(){\n  deleteFields.add(\"userType\");\n  return this;\n}"}
{"ids": "81383", "raw_code": "public final static boolean endsWithIgnoreCase(String str,String end){\n  int strLength=str == null ? 0 : str.length();\n  int endLength=end == null ? 0 : end.length();\n  if (endLength > strLength)   return false;\n  for (int i=1; i <= endLength; i++) {\n    if (ScannerHelper.toLowerCase(end.charAt(endLength - i)) != ScannerHelper.toLowerCase(str.charAt(strLength - i)))     return false;\n  }\n  return true;\n}"}
{"ids": "44977", "raw_code": "public void write(int c) throws IOException {\n  internalOut.write(c);\n}"}
{"ids": "68600", "raw_code": "private <T extends ClientRequestResult>Collection<T> executeRequest(final Collection<Long> ids,final Class<T> clazz,final ClientRequestReportListener reportListener,final String requestQueue){\n  LOGGER.debug(\"Initiating client request.\");\n  ClientRequestImpl<T> clientRequest=new ClientRequestImpl<T>(clazz);\n  Iterator<Long> it=ids.iterator();\n  Collection<Future<Collection<T>>> results=new ArrayList<Future<Collection<T>>>();\n  int counter=0;\n  while (it.hasNext()) {\n    while (it.hasNext() && counter < maxRequestSize) {\n      clientRequest.addTagId(it.next());\n      counter++;\n    }\n    RequestValuesTask<T> task=new RequestValuesTask<T>(clientRequest,reportListener,requestQueue);\n    results.add(executor.submit(task));\n    clientRequest=new ClientRequestImpl<T>(clazz);\n    counter=0;\n  }\n  Collection<T> finalCollection=new ArrayList<T>();\n  for (  Future<Collection<T>> result : results) {\n    try {\n      finalCollection.addAll(result.get());\n    }\n catch (    InterruptedException e) {\n      LOGGER.error(\"InterruptedException caught while executing RequestValuesTask.\",e);\n      throw new RuntimeException(e);\n    }\ncatch (    ExecutionException e) {\n      LOGGER.error(\"ExecutionException caught while executing RequestValuesTask.\",e);\n      throw new RuntimeException(e);\n    }\n  }\n  LOGGER.debug(\"Client request completed.\");\n  return finalCollection;\n}"}
{"ids": "2470", "raw_code": "public static Map<String,Integer> classNamesToMapping(List<String> labels){\n  Map<String,Integer> mapping=new HashMap<String,Integer>();\n  for (int i=0; i < labels.size(); i++) {\n    mapping.put(labels.get(i),i);\n  }\n  return mapping;\n}"}
{"ids": "57106", "raw_code": "public static void putUnsignedShort(ByteBuffer bb,int v){\n  bb.putShort((short)(v & 0xffff));\n}"}
{"ids": "82582", "raw_code": "public static String readFileToString(File f) throws IOException {\n  StringWriter sw=new StringWriter();\n  IO.copyAndCloseBoth(Common.asReaderUTF8Lenient(new FileInputStream(f)),sw);\n  return sw.toString();\n}"}
{"ids": "68970", "raw_code": "private File createCaptureFile(int encodingType,String fileName){\n  if (fileName.isEmpty()) {\n    fileName=\".Pic\";\n  }\n  if (encodingType == JPEG) {\n    fileName=fileName + \".jpg\";\n  }\n else   if (encodingType == PNG) {\n    fileName=fileName + \".png\";\n  }\n else {\n    throw new IllegalArgumentException(\"Invalid Encoding Type: \" + encodingType);\n  }\n  return new File(getTempDirectoryPath(),fileName);\n}"}
{"ids": "75669", "raw_code": "@Override public void actionPerformed(ActionEvent e){\n  Object o;\n  o=e.getSource();\n  if (o == m_MenuFileOpen) {\n    loadFile();\n  }\n else   if (o == m_MenuFileSave) {\n    saveFile();\n  }\n else   if (o == m_MenuFileSaveAs) {\n    saveFileAs();\n  }\n else   if (o == m_MenuFileClose) {\n    closeFile();\n  }\n else   if (o == m_MenuFileCloseAll) {\n    closeAllFiles();\n  }\n else   if (o == m_MenuFileProperties) {\n    showProperties();\n  }\n else   if (o == m_MenuFileExit) {\n    close();\n  }\n else   if (o == m_MenuEditUndo) {\n    undo();\n  }\n else   if (o == m_MenuEditCopy) {\n    copyContent();\n  }\n else   if (o == m_MenuEditSearch) {\n    search();\n  }\n else   if (o == m_MenuEditClearSearch) {\n    clearSearch();\n  }\n else   if (o == m_MenuEditDeleteAttribute) {\n    deleteAttribute(false);\n  }\n else   if (o == m_MenuEditDeleteAttributes) {\n    deleteAttribute(true);\n  }\n else   if (o == m_MenuEditRenameAttribute) {\n    renameAttribute();\n  }\n else   if (o == m_MenuEditAttributeAsClass) {\n    attributeAsClass();\n  }\n else   if (o == m_MenuEditDeleteInstance) {\n    deleteInstance(false);\n  }\n else   if (o == m_MenuEditDeleteInstances) {\n    deleteInstance(true);\n  }\n else   if (o == m_MenuEditSortInstances) {\n    sortInstances();\n  }\n else   if (o == m_MenuViewAttributes) {\n    showAttributes();\n  }\n else   if (o == m_MenuViewValues) {\n    showValues();\n  }\n else   if (o == m_MenuViewOptimalColWidths) {\n    setOptimalColWidths();\n  }\n  updateMenu();\n}"}
{"ids": "15327", "raw_code": "public boolean validateToken(EndpointSpecification endpointSpecification,SecurityToken toBeValidatedToken) throws SoapSTSConsumerException {\n  STSClient client=getSTSClient(stsInstanceWsdlUrl,endpointSpecification.serviceQName,endpointSpecification.portQName);\n  client.setTokenType(STSConstants.STATUS);\n  try {\n    client.validateSecurityToken(toBeValidatedToken);\n    return true;\n  }\n catch (  TrustException e) {\n    return false;\n  }\ncatch (  Exception e) {\n    throw new SoapSTSConsumerException(e.getMessage(),e);\n  }\n}"}
{"ids": "4836", "raw_code": "public static String stripFunctionTags(String label){\n  if (label.indexOf(\"-\") > 0)   return label.substring(0,label.indexOf(\"-\"));\n else   return label;\n}"}
{"ids": "60054", "raw_code": "@Override public void playNewVideo(MetaData currentItemMetaData,VideoPlayerView videoPlayerView,String videoUrl){\n  if (SHOW_LOGS)   Logger.v(TAG,\">> playNewVideo, videoPlayer \" + videoPlayerView + \", mCurrentPlayer \"+ mCurrentPlayer+ \", videoPlayerView \"+ videoPlayerView);\n  mPlayerHandler.pauseQueueProcessing(TAG);\n  boolean currentPlayerIsActive=mCurrentPlayer == videoPlayerView;\n  boolean isAlreadyPlayingTheFile=mCurrentPlayer != null && videoUrl.equals(mCurrentPlayer.getVideoUrlDataSource());\n  if (SHOW_LOGS)   Logger.v(TAG,\"playNewVideo, isAlreadyPlayingTheFile \" + isAlreadyPlayingTheFile);\n  if (SHOW_LOGS)   Logger.v(TAG,\"playNewVideo, currentPlayerIsActive \" + currentPlayerIsActive);\n  if (currentPlayerIsActive) {\n    if (isInPlaybackState() && isAlreadyPlayingTheFile) {\n      if (SHOW_LOGS)       Logger.v(TAG,\"playNewVideo, videoPlayer \" + videoPlayerView + \" is already in state \"+ mCurrentPlayerState);\n    }\n else {\n      startNewPlayback(currentItemMetaData,videoPlayerView,videoUrl);\n    }\n  }\n else {\n    startNewPlayback(currentItemMetaData,videoPlayerView,videoUrl);\n  }\n  mPlayerHandler.resumeQueueProcessing(TAG);\n  if (SHOW_LOGS)   Logger.v(TAG,\"<< playNewVideo, videoPlayer \" + videoPlayerView + \", videoUrl \"+ videoUrl);\n}"}
{"ids": "84579", "raw_code": "private void addTraceAndType(String name){\n  if (tracesType.get(name) == null) {\n    traces.add(createTrace(name,TraceType.REAL));\n    tracesType.put(name,TraceType.REAL);\n  }\n else {\n    traces.add(createTrace(name,tracesType.get(name)));\n  }\n}"}
{"ids": "13362", "raw_code": "public static VolumeMount[] formatOriginalContainerVolumeMount(LogDraft logDraft){\n  List<VolumeMount> volumeMounts=new ArrayList<>();\n  int idxSuffix=1;\n  for (  LogItemDraft logItemDraft : logDraft.getLogItemDrafts()) {\n    if (logItemDraft.isAutoCollect() || logItemDraft.isAutoDelete()) {\n      VolumeMount volumeMount=new VolumeMount();\n      volumeMount.setName(\"data\" + idxSuffix);\n      volumeMount.setMountPath(LogItemDraft.getLogParentPath(logItemDraft.getLogPath()));\n      volumeMounts.add(volumeMount);\n      idxSuffix++;\n    }\n  }\n  return volumeMounts.toArray(new VolumeMount[]{});\n}"}
{"ids": "39223", "raw_code": "public static double dnorm(double x){\n  return Math.exp(-x * x / 2.) * PSI;\n}"}
{"ids": "64147", "raw_code": "public static long checksumCRC32(File file) throws IOException {\n  CRC32 crc=new CRC32();\n  checksum(file,crc);\n  return crc.getValue();\n}"}
{"ids": "65723", "raw_code": "private void cmd_annotateDifference(){\n  BigDecimal previousValue, actualValue, difference;\n  previousValue=(BigDecimal)v_previousBalance.getValue();\n  actualValue=(BigDecimal)v_ActualBalance.getValue();\n  difference=actualValue.subtract(previousValue);\n  MCashBook cashBook=new MCashBook(p_ctx,p_pos.getC_CashBook_ID(),null);\n  Timestamp today=TimeUtil.getDay(System.currentTimeMillis());\n  MCash cash=MCash.get(p_ctx,cashBook.getC_CashBook_ID(),today,null);\n  if (cash != null && cash.get_ID() != 0 && difference.compareTo(cash.getStatementDifference()) != 0) {\n    MCashLine cl=new MCashLine(cash);\n    cl.setCashType(MCashLine.CASHTYPE_Difference);\n    cl.setAmount(difference);\n    cl.setDescription(Msg.translate(p_pos.getCtx(),\"Cash Scrutiny -> Before: \") + previousValue + \" Now: \"+ actualValue);\n    cl.saveEx();\n  }\n  cash=MCash.get(p_pos.getCtx(),p_pos.getC_CashBook_ID(),today,null);\n  v_previousBalance.setValue(cash.getEndingBalance());\n  v_ActualBalance.setValue(Env.ZERO);\n  v_difference.setValue(Env.ZERO);\n}"}
{"ids": "39537", "raw_code": "public void write(OutputStream out,java.util.List<Figure> figures) throws IOException {\n  Rectangle2D.Double drawingRect=null;\n  for (  Figure f : figures) {\n    if (drawingRect == null) {\n      drawingRect=f.getBounds();\n    }\n else {\n      drawingRect.add(f.getBounds());\n    }\n  }\n  AffineTransform tx=new AffineTransform();\n  tx.translate(-Math.min(0,drawingRect.x),-Math.min(0,drawingRect.y));\n  write(out,figures,tx,new Dimension((int)(Math.abs(drawingRect.x) + drawingRect.width),(int)(Math.abs(drawingRect.y) + drawingRect.height)));\n}"}
{"ids": "27422", "raw_code": "FixedAllocator(final RWStore store,final int size){\n  m_diskAddr=0;\n  m_store=store;\n  m_size=size;\n  m_bitSize=calcBitSize(true,size,cMinAllocation,cModAllocation);\n  allocBlockRange=32 * m_bitSize;\n  final int numBlocks=254 / (m_bitSize + 1);\n  m_allocBlocks=new ArrayList<AllocBlock>(numBlocks);\n  for (int i=0; i < numBlocks; i++) {\n    m_allocBlocks.add(new AllocBlock(0,m_bitSize,this));\n  }\n  m_freeTransients=0;\n  m_freeBits=32 * m_bitSize * numBlocks;\n}"}
{"ids": "56905", "raw_code": "private void buildGetStorageResponse(MockCloseableHttpResponse response,URI uri) throws JAXBException {\n  Pattern pattern=Pattern.compile(\"/herd-app/rest/storages/(.*)\");\n  Matcher matcher=pattern.matcher(uri.getPath());\n  if (matcher.find()) {\n    Storage storage=getNewStorage(matcher.group(1));\n    response.setEntity(getHttpEntity(storage));\n  }\n}"}
{"ids": "18453", "raw_code": "public void assertEquals(String assertID,String expected,String actual){\n  framework.assertEquals(this,assertID,expected,actual);\n}"}
{"ids": "83641", "raw_code": "public boolean onPreferenceChange(Preference preference,Object newValue){\n  if (Boolean.parseBoolean(SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {\n  }\n else {\n    setAirplaneModeOn((Boolean)newValue);\n  }\n  return true;\n}"}
{"ids": "64823", "raw_code": "public static int estimateBandPassOrder(int sampleRate,int passBandStart,int passBandEnd,double passBandRippleDb,double stopBandRippleDb){\n  double df=(double)Math.abs(passBandEnd - passBandStart) / (double)sampleRate;\n  double ddp=(double)Math.log10(passBandRippleDb);\n  double dds=(double)Math.log10(stopBandRippleDb);\n  double a1=0.01201;\n  double a2=0.09664;\n  double a3=-0.51325;\n  double a4=0.00203;\n  double a5=-0.57054;\n  double a6=-0.44314;\n  double t1=a1 * ddp * ddp;\n  double t2=a2 * ddp;\n  double t3=a4 * ddp * ddp;\n  double t4=a5 * ddp;\n  double cinf=dds * (t1 + t2 + a3) + t3 + t4 + a6;\n  double ginf=-14.6f * (double)Math.log10(passBandRippleDb / stopBandRippleDb) - 16.9;\n  double n=cinf / df + ginf * df + 1.0;\n  return (int)Math.ceil(n);\n}"}
{"ids": "77894", "raw_code": "static public Object stringToValue(String s){\n  if (s.equals(\"\")) {\n    return s;\n  }\n  if (s.equalsIgnoreCase(\"true\")) {\n    return Boolean.TRUE;\n  }\n  if (s.equalsIgnoreCase(\"false\")) {\n    return Boolean.FALSE;\n  }\n  if (s.equalsIgnoreCase(\"null\")) {\n    return JSONObject.NULL;\n  }\n  char b=s.charAt(0);\n  if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {\n    if (b == '0' && s.length() > 2 && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n      try {\n        return new Integer(Integer.parseInt(s.substring(2),16));\n      }\n catch (      Exception ignore) {\n      }\n    }\n    try {\n      if (s.indexOf('.') > -1 || s.indexOf('e') > -1 || s.indexOf('E') > -1) {\n        return Double.valueOf(s);\n      }\n else {\n        Long myLong=new Long(s);\n        if (myLong.longValue() == myLong.intValue()) {\n          return new Integer(myLong.intValue());\n        }\n else {\n          return myLong;\n        }\n      }\n    }\n catch (    Exception ignore) {\n    }\n  }\n  return s;\n}"}
{"ids": "44613", "raw_code": "public static void writeSingleByte(OutputStream out,int b) throws IOException {\n  byte[] buffer=new byte[1];\n  buffer[0]=(byte)(b & 0xff);\n  out.write(buffer);\n}"}
{"ids": "35719", "raw_code": "private float[] calcBorderValues(){\n  float max=Integer.MIN_VALUE;\n  float min=Integer.MAX_VALUE;\n  for (  ChartSet set : chartView.data) {\n    for (    ChartEntry e : set.getEntries()) {\n      if (e.getValue() >= max)       max=e.getValue();\n      if (e.getValue() <= min)       min=e.getValue();\n    }\n  }\n  return new float[]{min,max};\n}"}
{"ids": "31130", "raw_code": "private void parseName(StringTokenizer st,boolean peer){\n  List vals=new ArrayList(2);\n  outer:   while (true) {\n    String cls;\n    do {\n      if (!st.hasMoreTokens()) {\n        break outer;\n      }\n      cls=st.nextToken();\n    }\n while (cls.equals(\" \"));\n    if (!peer && cls.equalsIgnoreCase(\"peer\")) {\n      parseName(st,true);\n      break;\n    }\n    if (cls.equals(\"*\")) {\n      if (peer) {\n        throw new IllegalArgumentException(\"peer class cannot be *\");\n      }\n      cls=null;\n      vals=null;\n    }\n    String nm;\n    do {\n      if (!st.hasMoreTokens()) {\n        throw new IllegalArgumentException(\"missing name after class\");\n      }\n      nm=st.nextToken();\n    }\n while (nm.equals(\" \"));\n    if (!nm.startsWith(\"\\\"\")) {\n      throw new IllegalArgumentException(\"name must be in quotes\");\n    }\n    while (!nm.endsWith(\"\\\"\")) {\n      if (!st.hasMoreTokens()) {\n        throw new IllegalArgumentException(\"name must be in quotes\");\n      }\n      nm=nm + st.nextToken();\n    }\n    if (nm.equals(\"\\\"*\\\"\")) {\n      if (peer) {\n        throw new IllegalArgumentException(\"peer name cannot be \\\"*\\\"\");\n      }\n      if (cls == null) {\n        continue;\n      }\n      nm=null;\n    }\n else     if (cls == null) {\n      throw new IllegalArgumentException(\"class cannot be * unless name is \\\"*\\\"\");\n    }\n else {\n      nm=nm.substring(1,nm.length() - 1);\n    }\n    if (vals != null) {\n      for (int i=vals.size(); i > 0; ) {\n        String onm=(String)vals.get(--i);\n        String ocls=(String)vals.get(--i);\n        if (cls.equals(ocls)) {\n          if (onm == null || (onm != null && onm.equals(nm))) {\n            continue outer;\n          }\n else           if (nm == null) {\n            vals.remove(i);\n            vals.remove(i);\n          }\n        }\n      }\n      vals.add(cls);\n      vals.add(nm);\n    }\n  }\n  String[] res=null;\n  if (vals != null) {\n    if (vals.isEmpty()) {\n      throw new IllegalArgumentException(\"target name is missing elements\");\n    }\n    res=(String[])vals.toArray(new String[vals.size()]);\n  }\n  if (peer) {\n    this.peer=res;\n  }\n else {\n    this.me=res;\n  }\n}"}
{"ids": "45873", "raw_code": "public static void removeAllChildren(Node node){\n  NodeList children=node.getChildNodes();\n  for (int i=0, length=children.getLength(); i < length; i++) {\n    node.removeChild(children.item(i));\n  }\n}"}
{"ids": "5233", "raw_code": "protected void deploy(HttpServletResponse response,String contextPath,String warURL) throws IOException {\n  String context=contextPath;\n  boolean error=false;\n  if (context == null) {\n    File file=new File(warURL);\n    String fileName=file.getName();\n    if (fileName.endsWith(\".war\")) {\n      fileName=fileName.substring(0,fileName.lastIndexOf(\".war\"));\n    }\n    context=\"/\" + fileName;\n  }\n  if (getContextHandler(context) != null) {\n    sendError(response,\"An application is already deployed at this context : \" + context);\n    error=true;\n  }\n else   if (!context.startsWith(\"/\")) {\n    sendError(response,\"The path does not start with a forward slash\");\n    error=true;\n  }\n  if (error) {\n    return;\n  }\n else {\n    File webappDest=new File(webAppDirectory,context + \".war\");\n    URI uri=null;\n    try {\n      uri=new URI(warURL);\n    }\n catch (    URISyntaxException e) {\n      sendError(response,\"Cannot parse URL \" + warURL);\n      Log.warn(e);\n      return;\n    }\n    File webappSource=new File(uri);\n    FileInputStream fileInputStream=new FileInputStream(webappSource);\n    FileOutputStream fileOutputStream=new FileOutputStream(webappDest);\n    int i=fileInputStream.read();\n    while (i != -1) {\n      fileOutputStream.write(i);\n      i=fileInputStream.read();\n    }\n    fileInputStream.close();\n    fileOutputStream.flush();\n    fileOutputStream.close();\n    WebAppContext webappcontext=new WebAppContext();\n    webappcontext.setContextPath(context);\n    webappcontext.setWar(webappDest.getPath());\n    chc.addHandler(webappcontext);\n    try {\n      webappcontext.start();\n    }\n catch (    Exception e) {\n      sendError(response,\"Unexpected error when trying to start the webapp\");\n      Log.warn(e);\n      return;\n    }\n  }\n  sendMessage(response,\"Webapp deployed at context \" + contextPath);\n}"}
{"ids": "52794", "raw_code": "public OutlierResult run(Relation<V> relation){\n  final DBIDs ids=relation.getDBIDs();\n  ArrayList<ArrayDBIDs> subspaceIndex=buildOneDimIndexes(relation);\n  Set<HiCSSubspace> subspaces=calculateSubspaces(relation,subspaceIndex,rnd.getSingleThreadedRandom());\n  if (LOG.isVerbose()) {\n    LOG.verbose(\"Number of high-contrast subspaces: \" + subspaces.size());\n  }\n  List<DoubleRelation> results=new ArrayList<>();\n  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress(\"Calculating Outlier scores for high Contrast subspaces\",subspaces.size(),LOG) : null;\n  for (  HiCSSubspace dimset : subspaces) {\n    if (LOG.isVerbose()) {\n      LOG.verbose(\"Performing outlier detection in subspace \" + dimset);\n    }\n    ProxyDatabase pdb=new ProxyDatabase(ids);\n    pdb.addRelation(new ProjectedView<>(relation,new NumericalFeatureSelection<V>(dimset)));\n    OutlierResult result=outlierAlgorithm.run(pdb);\n    results.add(result.getScores());\n    LOG.incrementProcessed(prog);\n  }\n  LOG.ensureCompleted(prog);\n  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);\n  DoubleMinMax minmax=new DoubleMinMax();\n  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {\n    double sum=0.0;\n    for (    DoubleRelation r : results) {\n      final double s=r.doubleValue(iditer);\n      if (!Double.isNaN(s)) {\n        sum+=s;\n      }\n    }\n    scores.putDouble(iditer,sum);\n    minmax.put(sum);\n  }\n  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax());\n  DoubleRelation scoreres=new MaterializedDoubleRelation(\"HiCS\",\"HiCS-outlier\",scores,relation.getDBIDs());\n  return new OutlierResult(meta,scoreres);\n}"}
{"ids": "34856", "raw_code": "private void addUnitToExternalQualMap(final Class<? extends Annotation> annoClass){\n  AnnotationMirror mirror=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(processingEnv,annoClass);\n  if (!isAliasedAnnotation(mirror)) {\n    String unitClassName=annoClass.getCanonicalName();\n    if (!externalQualsMap.containsKey(unitClassName)) {\n      externalQualsMap.put(unitClassName,annoClass);\n    }\n  }\n else {\n    Class<? extends Annotation> baseUnitClass=getBaseUnitAnnoClass(mirror);\n    if (baseUnitClass != null) {\n      String baseUnitClassName=baseUnitClass.getCanonicalName();\n      if (!externalQualsMap.containsKey(baseUnitClassName)) {\n        loadExternalUnit(baseUnitClassName);\n      }\n      aliasedAnnotation(mirror);\n    }\n else {\n    }\n  }\n  addUnitsRelations(annoClass);\n}"}
{"ids": "78107", "raw_code": "@Override protected void onProgressUpdate(Integer... values){\n  if (parent != null) {\n    if (values[0] == ON_CACHE_END) {\n      parent.onCacheEnd();\n    }\n else     if (values[0] == ON_CACHE_INTERRUPTED) {\n      Log.i(TAG,\"Flag ON_CACHE_INTERRUPTED has been set...\");\n      shouldBeStopped=true;\n      parent.onCacheInterrupted();\n    }\n else {\n      parent.onCacheProgress(taskCount,values[0]);\n    }\n  }\n}"}
{"ids": "41721", "raw_code": "public double dotProduct(DoubleVector v){\n  return x * v.x + y * v.y + z * v.z;\n}"}
{"ids": "11191", "raw_code": "public TemporalOMScalingIcon(Object id,int renderType,boolean interpolate,ImageIcon ii){\n  this(id,renderType,interpolate,ii.getImage(),4000000);\n  setMaxScale(4000000);\n  setMinScale(4000000);\n}"}
{"ids": "86829", "raw_code": "public int maxLength(){\n  if (mIsPaired) {\n    return (int)Math.max(mLeft.maxLength(),mRight.maxLength());\n  }\n else {\n    return (int)mSingle.maxLength();\n  }\n}"}
{"ids": "84119", "raw_code": "public boolean equalsIgnoreCase(StrBuilder other){\n  if (this == other) {\n    return true;\n  }\n  if (this.size != other.size) {\n    return false;\n  }\n  char thisBuf[]=this.buffer;\n  char otherBuf[]=other.buffer;\n  for (int i=size - 1; i >= 0; i--) {\n    char c1=thisBuf[i];\n    char c2=otherBuf[i];\n    if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "52365", "raw_code": "public PathParser(String pathString){\n  this.pathString=pathString.toCharArray();\n}"}
{"ids": "31538", "raw_code": "public LuaTable(Varargs varargs,int firstarg){\n  int nskip=firstarg - 1;\n  int n=Math.max(varargs.narg() - nskip,0);\n  presize(n,1);\n  set(N,valueOf(n));\n  for (int i=1; i <= n; i++)   set(i,varargs.arg(i + nskip));\n}"}
{"ids": "62512", "raw_code": "public ID3v24Frame(ByteBuffer byteBuffer,String loggingFilename) throws InvalidFrameException, InvalidDataTypeException {\n  setLoggingFilename(loggingFilename);\n  read(byteBuffer);\n}"}
{"ids": "8894", "raw_code": "public void disablePan(BluetoothAdapter adapter){\n  if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);\n  assertNotNull(mPan);\n  long start=System.currentTimeMillis();\n  mPan.setBluetoothTethering(false);\n  long stop=System.currentTimeMillis();\n  assertFalse(mPan.isTetheringOn());\n  writeOutput(String.format(\"disablePan() completed in %d ms\",(stop - start)));\n}"}
{"ids": "40421", "raw_code": "public Frame<V> init(final Frame<? extends V> src){\n  returnValue=src.returnValue;\n  System.arraycopy(src.values,0,values,0,values.length);\n  top=src.top;\n  return this;\n}"}
{"ids": "29424", "raw_code": "public boolean ready() throws IOException {\n  if (_input == null)   throw new IOException(\"Reader closed\");\n  if (_index == _input.length())   return false;\n  return true;\n}"}
{"ids": "404", "raw_code": "private LinkedList<Diff> diff_compute(String text1,String text2,boolean checklines,long deadline){\n  LinkedList<Diff> diffs=new LinkedList<Diff>();\n  if (text1.length() == 0) {\n    diffs.add(new Diff(Operation.INSERT,text2));\n    return diffs;\n  }\n  if (text2.length() == 0) {\n    diffs.add(new Diff(Operation.DELETE,text1));\n    return diffs;\n  }\n  String longtext=text1.length() > text2.length() ? text1 : text2;\n  String shorttext=text1.length() > text2.length() ? text2 : text1;\n  int i=longtext.indexOf(shorttext);\n  if (i != -1) {\n    Operation op=(text1.length() > text2.length()) ? Operation.DELETE : Operation.INSERT;\n    diffs.add(new Diff(op,longtext.substring(0,i)));\n    diffs.add(new Diff(Operation.EQUAL,shorttext));\n    diffs.add(new Diff(op,longtext.substring(i + shorttext.length())));\n    return diffs;\n  }\n  if (shorttext.length() == 1) {\n    diffs.add(new Diff(Operation.DELETE,text1));\n    diffs.add(new Diff(Operation.INSERT,text2));\n    return diffs;\n  }\n  String[] hm=diff_halfMatch(text1,text2);\n  if (hm != null) {\n    String text1_a=hm[0];\n    String text1_b=hm[1];\n    String text2_a=hm[2];\n    String text2_b=hm[3];\n    String mid_common=hm[4];\n    LinkedList<Diff> diffs_a=diff_main(text1_a,text2_a,checklines,deadline);\n    LinkedList<Diff> diffs_b=diff_main(text1_b,text2_b,checklines,deadline);\n    diffs=diffs_a;\n    diffs.add(new Diff(Operation.EQUAL,mid_common));\n    diffs.addAll(diffs_b);\n    return diffs;\n  }\n  if (checklines && text1.length() > 100 && text2.length() > 100) {\n    return diff_lineMode(text1,text2,deadline);\n  }\n  return diff_bisect(text1,text2,deadline);\n}"}
{"ids": "28480", "raw_code": "public static long sizeOfDirectory(File directory){\n  checkDirectory(directory);\n  final File[] files=directory.listFiles();\n  if (files == null) {\n    return 0L;\n  }\n  long size=0;\n  for (  final File file : files) {\n    try {\n      if (!isSymlink(file)) {\n        size+=sizeOf(file);\n        if (size < 0) {\n          break;\n        }\n      }\n    }\n catch (    IOException ioe) {\n    }\n  }\n  return size;\n}"}
{"ids": "19808", "raw_code": "public boolean isUseSSL(){\n  return useSSL;\n}"}
{"ids": "86427", "raw_code": "public void start(){\n  if ((mProxSensor == null) || mIsActive) {\n    return;\n  }\n  mIsActive=true;\n  mShouldDropEvents=true;\n  mSensorManager.registerListener(mListener,mProxSensor,SensorManager.SENSOR_DELAY_UI);\n  LogUtils.log(this,Log.VERBOSE,\"Proximity sensor registered at %d.\",System.currentTimeMillis());\n  mHandler.postDelayed(mFilterRunnable,REGISTRATION_EVENT_FILTER_TIMEOUT);\n}"}
{"ids": "82203", "raw_code": "private Vector applyCSS(HTMLElement element,HTMLComponent htmlC,CSSElement[] css,Vector nestedSelectors,Vector siblingSelectors){\n  String id=element.getAttributeById(HTMLElement.ATTR_ID);\n  String className=element.getAttributeById(HTMLElement.ATTR_CLASS);\n  Vector nextNestedSelectors=new Vector();\n  Vector nextSiblingSelectors=null;\n  if (!HTMLComponent.PROCESS_HTML_MP1_ONLY) {\n    nextSiblingSelectors=new Vector();\n  }\n  for (int e=0; e < css.length; e++) {\n    CSSElement currentSelector=css[e];\n    checkSelector(currentSelector,element,htmlC,className,id,nextNestedSelectors,nextSiblingSelectors);\n  }\n  if (nestedSelectors != null) {\n    for (Enumeration e=nestedSelectors.elements(); e.hasMoreElements(); ) {\n      CSSElement currentSelector=(CSSElement)e.nextElement();\n      checkSelector(currentSelector,element,htmlC,className,id,nextNestedSelectors,nextSiblingSelectors);\n    }\n  }\n  if ((!HTMLComponent.PROCESS_HTML_MP1_ONLY) && (siblingSelectors != null)) {\n    for (Enumeration e=siblingSelectors.elements(); e.hasMoreElements(); ) {\n      CSSElement currentSelector=(CSSElement)e.nextElement();\n      checkSelector(currentSelector,element,htmlC,className,id,nextNestedSelectors,nextSiblingSelectors);\n    }\n  }\n  if (nextNestedSelectors.size() == 0) {\n    nextNestedSelectors=null;\n  }\n  if ((!HTMLComponent.PROCESS_HTML_MP1_ONLY) && (nextSiblingSelectors.size() == 0)) {\n    nextSiblingSelectors=null;\n  }\n  applyStyleAttribute(element,htmlC);\n  Vector curSiblingSelectors=null;\n  for (int i=0; i < element.getNumChildren(); i++) {\n    HTMLElement child=(HTMLElement)element.getChildAt(i);\n    Vector v=applyCSS(child,htmlC,css,nextNestedSelectors,curSiblingSelectors);\n    if (!child.isTextElement()) {\n      curSiblingSelectors=v;\n    }\n  }\n  return nextSiblingSelectors;\n}"}
{"ids": "10219", "raw_code": "public static String[] splitc(String src,String d){\n  if ((d.length() == 0) || (src.length() == 0)) {\n    return new String[]{src};\n  }\n  return splitc(src,d.toCharArray());\n}"}
{"ids": "20846", "raw_code": "public int deflateString2ByteArray(byte[] input,int inputOffset,int inputLength,byte[] bytes){\n  if (inputLength >= MIN_SIZE_FOR_DEFLATION) {\n    deflater.setInput(input,inputOffset,inputLength);\n    deflater.finish();\n    int compressedDataLength=deflater.deflate(bytes);\n    deflater.reset();\n    return -compressedDataLength;\n  }\n else {\n    System.arraycopy(input,inputOffset,bytes,0,inputLength);\n    return inputLength;\n  }\n}"}
{"ids": "57663", "raw_code": "private void doubleCapacity(){\n  int p=head;\n  int n=elements.length;\n  int r=n - p;\n  int newCapacity=n << 1;\n  if (newCapacity < 0)   throw new IllegalStateException(\"Sorry, deque too big\");\n  Object[] a=new Object[newCapacity];\n  System.arraycopy(elements,p,a,0,r);\n  System.arraycopy(elements,0,a,r,p);\n  elements=a;\n  head=0;\n  tail=n;\n}"}
{"ids": "13815", "raw_code": "public Marker backTo(int idx) throws AMConsoleException {\n  int size=trail.size();\n  if (idx >= size) {\n    throw new AMConsoleException(\"cannot be discard items in page trail\");\n  }\n  for (int i=size - 1; i > idx; --i) {\n    trail.remove(i);\n  }\n  return (Marker)trail.get(idx);\n}"}
{"ids": "47460", "raw_code": "private static long copy(InputStream source,OutputStream sink) throws IOException {\n  long nread=0L;\n  byte[] buf=new byte[BUFFER_SIZE];\n  int n;\n  while ((n=source.read(buf)) > 0) {\n    sink.write(buf,0,n);\n    nread+=n;\n  }\n  return nread;\n}"}
{"ids": "53936", "raw_code": "public byte[] pack(){\n  if (entries.size() == 0)   return null;\n  int entryLength=owner.getType().NODES_ENTRY_LENGTH;\n  byte[] buffer=new byte[entries.size() * entryLength];\n  int max_items=buffer.length / 26;\n  int j=0;\n  for (  KBucketEntry e : entries) {\n    if (j >= max_items) {\n      break;\n    }\n    PackUtil.PackBucketEntry(e,buffer,j * entryLength,owner.getType());\n    j++;\n  }\n  return buffer;\n}"}
{"ids": "51786", "raw_code": "public static GdsTypeRule excludes(String... excludedTypes){\n  final Set<String> excludedTypesSet=new HashSet<>(Arrays.asList(excludedTypes));\n  return new GdsTypeRule(not(isIn(excludedTypesSet)));\n}"}
{"ids": "47465", "raw_code": "public final Set<String> aliases(){\n  if (aliasSet != null)   return aliasSet;\n  int n=aliases.length;\n  HashSet<String> hs=new HashSet<String>(n);\n  for (int i=0; i < n; i++)   hs.add(aliases[i]);\n  aliasSet=Collections.unmodifiableSet(hs);\n  return aliasSet;\n}"}
{"ids": "67891", "raw_code": "public synchronized void unweave(ByteString id){\n  if (woven.containsKey(id)) {\n    removed.add(woven.remove(id));\n  }\n}"}
{"ids": "50918", "raw_code": "private static Map<String,VirtualFile> findSiblings(@Nullable VirtualFile directory,Project project,Set<VirtualFile> seen){\n  if (directory == null) {\n    return Collections.emptyMap();\n  }\n else {\n    if (seen.contains(directory)) {\n      return findSiblings(null,project,seen);\n    }\n    seen.add(directory);\n    VirtualFile settings=directory.findChild(SdkConstants.FN_SETTINGS_GRADLE);\n    if (settings == null) {\n      return findSiblings(directory.getParent(),project,seen);\n    }\n else {\n      return GradleModuleImporter.getSubProjects(settings,project);\n    }\n  }\n}"}
{"ids": "17952", "raw_code": "public AuthorityKeyIdentifierStructure(X509Certificate certificate) throws CertificateParsingException {\n  super(fromCertificate(certificate));\n}"}
{"ids": "85876", "raw_code": "@Override public int hashCode(){\n  return Arrays.hashCode(new ImmutablePair[]{(ImmutablePair)first,(ImmutablePair)second});\n}"}
{"ids": "76528", "raw_code": "@SuppressLint(\"Override\") public static String replaceUnicodeDigits(String number){\n  StringBuilder normalizedDigits=new StringBuilder(number.length());\n  for (  char c : number.toCharArray()) {\n    int digit=Character.digit(c,10);\n    if (digit != -1) {\n      normalizedDigits.append(digit);\n    }\n else {\n      normalizedDigits.append(c);\n    }\n  }\n  return normalizedDigits.toString();\n}"}
{"ids": "66449", "raw_code": "public String Frie_Name(String value){\n  if (value == null || value.length() == 0)   return \"\";\n  String retValue=value;\n  String SQL=\"SELECT FRIE_Name(?) FROM DUAL\";\n  try {\n    PreparedStatement pstmt=DB.prepareStatement(SQL,null);\n    pstmt.setString(1,value);\n    ResultSet rs=pstmt.executeQuery();\n    if (rs.next())     retValue=rs.getString(1);\n    rs.close();\n    pstmt.close();\n  }\n catch (  SQLException e) {\n    log.log(Level.SEVERE,SQL,e);\n  }\n  return retValue;\n}"}
{"ids": "25912", "raw_code": "@Override public int readInt(String filePath){\n  FileChannel fileChannel=updateCache(filePath);\n  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.INT_SIZE_IN_BYTE);\n  return byteBffer.getInt();\n}"}
{"ids": "24552", "raw_code": "private synchronized void closeOutputStreamQuietly(){\n  if (!mClosed) {\n    try {\n      mOutputStream.close();\n      reportDecodedSizeIfApplicable();\n    }\n catch (    IOException e) {\n      CLog.writeToConsole(mNetworkPeerManager,Console.MessageLevel.ERROR,Console.MessageSource.NETWORK,\"Could not close the output stream\" + e);\n    }\n finally {\n      mClosed=true;\n    }\n  }\n}"}
{"ids": "3853", "raw_code": "public void bind(String address,ServiceRefAmp linkService){\n  _linkServiceMap.put(address,linkService);\n  _serviceCloseList.add(linkService);\n}"}
{"ids": "39820", "raw_code": "private static boolean checkOffset(String value,int offset,char expected){\n  return (offset < value.length()) && (value.charAt(offset) == expected);\n}"}
{"ids": "77266", "raw_code": "void addSplit(String splitPath){\n  String[] splits=splitPath.split(\"\\\\|\");\n  for (  String split : splits) {\n    split=split.trim();\n    if (split.startsWith(\"//\"))     throw new RuntimeException(\"split cannot start with '//': \" + split);\n    if (split.length() == 0)     continue;\n    addField(split,split,false,true);\n  }\n}"}
{"ids": "11455", "raw_code": "public void toLatLon(double v0,double h0){\n  final double GX=0.216507961908834992;\n  final double GY=-0.134633014879368199;\n  final double A=0.151646645621077297;\n  final double Q=-0.294355056616412800;\n  final double Q2=0.0866448993556515751;\n  final double EPSILON=.0000001;\n  double v=(double)v0;\n  double h=(double)h0;\n  double t1=(v - TRANSV) / RADIUS;\n  double t2=(h - TRANSH) / RADIUS;\n  double vhat=ROTC * t2 - ROTS * t1;\n  double hhat=ROTS * t2 + ROTC * t1;\n  double e=Math.cos(Math.sqrt(vhat * vhat + hhat * hhat));\n  double w=Math.cos(Math.sqrt(vhat * vhat + (hhat - 0.4) * (hhat - 0.4)));\n  double fx=EY * w - WY * e;\n  double fy=EX * w - WX * e;\n  double b=fx * GX + fy * GY;\n  double c=fx * fx + fy * fy - Q2;\n  double disc=b * b - A * c;\n  double x, y, z, delta;\n  if (Math.abs(disc) < EPSILON) {\n    z=b / A;\n    x=(GX * z - fx) / Q;\n    y=(fy - GY * z) / Q;\n  }\n else {\n    delta=Math.sqrt(disc);\n    z=(b + delta) / A;\n    x=(GX * z - fx) / Q;\n    y=(fy - GY * z) / Q;\n    if (vhat * (PX * x + PY * y + PZ * z) < 0) {\n      z=(b - delta) / A;\n      x=(GX * z - fx) / Q;\n      y=(fy - GY * z) / Q;\n    }\n  }\n  double lat=Math.asin(z);\n  final double[] bi={1.00567724920722457,-0.00344230425560210245,0.000713971534527667990,-0.0000777240053499279217,0.00000673180367053244284,-0.000000742595338885741395,0.0000000905058919926194134};\n  double lat2=lat * lat;\n  double earthlat=lat * (bi[0] + lat2 * (bi[1] + lat2 * (bi[2] + lat2 * (bi[3] + lat2 * (bi[4] + lat2 * (bi[5] + lat2 * (bi[6])))))));\n  earthlat=Math.toDegrees(earthlat);\n  double lon=Math.toDegrees(Math.atan2(x,y));\n  double earthlon=lon + 52.0;\n  this.resultLat=earthlat;\n  this.resultLon=-earthlon;\n}"}
{"ids": "63067", "raw_code": "public void sortArray(T[] d,Comparator<T> c){\n  this.data=d;\n  this.comp=c;\n  int len=Math.max((int)(100 * Math.log(d.length)),TEMP_SIZE);\n  len=Math.min(d.length,len);\n  @SuppressWarnings(\"unchecked\") T[] t=(T[])new Object[len];\n  this.temp=t;\n  mergeSort(0,d.length - 1);\n}"}
{"ids": "34463", "raw_code": "public void cacheUnit(UnitInterface unit){\n  allUnits.add(unit);\n}"}
{"ids": "82088", "raw_code": "public Component findByName(String name,Component rootComponent){\n  Component c=(Component)rootComponent.getClientProperty(\"%\" + name + \"%\");\n  if (c == null) {\n    Container newRoot=getRootAncestor(rootComponent);\n    if (newRoot != null && rootComponent != newRoot) {\n      return findByName(name,newRoot);\n    }\n  }\n  return c;\n}"}
{"ids": "70995", "raw_code": "protected void fetchMetadata() throws IOException {\n  remaining=period;\n  int size=in.read();\n  if (size < 1)   return;\n  size<<=4;\n  if (mbuffer.length < size) {\n    mbuffer=null;\n    mbuffer=new byte[size];\n    Log.d(LOG,\"Enlarged metadata buffer to \" + size + \" bytes\");\n  }\n  size=readFully(mbuffer,0,size);\n  for (int i=0; i < size; i++) {\n    if (mbuffer[i] == 0) {\n      size=i;\n      break;\n    }\n  }\n  String s;\n  try {\n    s=new String(mbuffer,0,size,characterEncoding);\n  }\n catch (  Exception e) {\n    Log.e(LOG,\"Cannot convert bytes to String\");\n    return;\n  }\n  Log.d(LOG,\"Metadata string: \" + s);\n  parseMetadata(s);\n}"}
{"ids": "15106", "raw_code": "public void startElement(){\n  nss.pushContext();\n  inCollectingMode=true;\n}"}
{"ids": "60348", "raw_code": "private V replaceNode(Object key,V value,Object cv){\n  int hash=hash((K)key);\n  for (Node<K,V>[] tab=table; ; ) {\n    Node<K,V> f;\n    int n, i, fh;\n    if (tab == null || (n=tab.length) == 0 || (f=tabAt(tab,i=(n - 1) & hash)) == null) {\n      break;\n    }\n else     if ((fh=f.hash) == MOVED) {\n      tab=helpTransfer(tab,f);\n    }\n else {\n      V oldVal=null;\n      boolean validated=false;\nsynchronized (f) {\n        if (tabAt(tab,i) == f) {\n          if (fh >= 0) {\n            validated=true;\n            for (Node<K,V> e=f, pred=null; ; ) {\n              if (e.hash == hash && isEqual((K)key,e.key)) {\n                V ev=e.val;\n                if (cv == null || cv == ev || (ev != null && cv.equals(ev))) {\n                  oldVal=ev;\n                  if (value != null) {\n                    e.val=value;\n                  }\n else                   if (pred != null) {\n                    pred.next=e.next;\n                  }\n else {\n                    setTabAt(tab,i,e.next);\n                  }\n                }\n                break;\n              }\n              pred=e;\n              if ((e=e.next) == null) {\n                break;\n              }\n            }\n          }\n else           if (f instanceof TreeBin) {\n            validated=true;\n            TreeBin<K,V> t=(TreeBin<K,V>)f;\n            TreeNode<K,V> r, p;\n            if ((r=t.root) != null && (p=r.findTreeNode(hash,key,null)) != null) {\n              V pv=p.val;\n              if (cv == null || cv == pv || (pv != null && cv.equals(pv))) {\n                oldVal=pv;\n                if (value != null) {\n                  p.val=value;\n                }\n else                 if (t.removeTreeNode(p)) {\n                  setTabAt(tab,i,untreeify(t.first));\n                }\n              }\n            }\n          }\n        }\n      }\n      if (validated) {\n        if (oldVal != null) {\n          if (value == null) {\n            addCount(-1L,-1);\n          }\n          return oldVal;\n        }\n        break;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "84291", "raw_code": "public final void removeHelperText(@NonNull final CharSequence helperText){\n  ensureNotNull(helperText,\"The helper text may not be null\");\n  ensureNotEmpty(helperText,\"The helper text may not be empty\");\n  helperTexts.remove(helperText);\n  verifyPasswordStrength();\n}"}
{"ids": "55862", "raw_code": "public final synchronized int maxPV(){\n  if (computerPlayer == null)   return 1;\n  return computerPlayer.getMaxPV();\n}"}
{"ids": "33850", "raw_code": "public Object remove(int index){\n  RangeCheck(index);\n  modCount++;\n  Object oldValue=elementData[index];\n  int numMoved=size - index - 1;\n  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);\n  elementData[--size]=null;\n  return oldValue;\n}"}
{"ids": "80049", "raw_code": "public String readMatchingFlags(String text){\n  clear();\n  if (text.startsWith(PM_SEPARATOR)) {\n    final StringTokenizer tok=new StringTokenizer(text,PM_SEPARATOR);\n    while (tok.hasMoreTokens()) {\n      final String flag=tok.nextToken();\n      if (flag.equals(PM_TYPE_MATCH)) {\n        typeMatching=true;\n      }\n else       if (flag.equals(PM_EXACT_MATCH)) {\n        exactMatching=true;\n      }\n else       if (flag.equals(PM_SIMILAR_MATCH)) {\n        similarMatching=true;\n      }\n else       if (flag.equals(PM_ICASE_MATCH)) {\n        caseInsensitive=true;\n      }\n else       if (flag.equals(PM_JOKER_MATCH)) {\n        jokerMatching=true;\n      }\n else {\n        break;\n      }\n      text=text.substring(flag.length() + 1);\n    }\n    if (isAnyFlagSet()) {\n      text=text.substring(1);\n    }\n  }\n  return text;\n}"}
{"ids": "2071", "raw_code": "private TinyPlanetImage createFinalTinyPlanet(){\n  mResultLock.lock();\n  try {\n    mResultBitmap.recycle();\n    mResultBitmap=null;\n    mSourceBitmap.recycle();\n    mSourceBitmap=null;\n  }\n  finally {\n    mResultLock.unlock();\n  }\n  Bitmap sourceBitmap=createPaddedSourceImage(mSourceImageUri,false);\n  int width=sourceBitmap.getWidth();\n  int height=sourceBitmap.getHeight();\n  int outputSize=width / 2;\n  Bitmap resultBitmap=Bitmap.createBitmap(outputSize,outputSize,Bitmap.Config.ARGB_8888);\n  TinyPlanetNative.process(sourceBitmap,width,height,resultBitmap,outputSize,mCurrentZoom,mCurrentAngle);\n  sourceBitmap.recycle();\n  sourceBitmap=null;\n  ByteArrayOutputStream jpeg=new ByteArrayOutputStream();\n  resultBitmap.compress(CompressFormat.JPEG,100,jpeg);\n  return new TinyPlanetImage(addExif(jpeg.toByteArray()),outputSize);\n}"}
{"ids": "40008", "raw_code": "static int createShader(String resource,int type) throws IOException {\n  return createShader(resource,type,null);\n}"}
{"ids": "44559", "raw_code": "public Model validateNodeAgainstShape(Dataset dataset,URI shapesGraphURI,Node focusNode,Node shape,Resource minSeverity,Predicate<SHConstraint> constraintFilter,Function<RDFNode,String> labelFunction,ProgressMonitor monitor){\n  Model results=JenaUtil.createMemoryModel();\n  Model oldResults=getCurrentResultsModel();\n  setCurrentResultsModel(results);\n  addResourceViolations(dataset,shapesGraphURI,focusNode,shape,SHACLUtil.getAllConstraintProperties(true),minSeverity,constraintFilter,results,labelFunction,monitor);\n  setCurrentResultsModel(oldResults);\n  return results;\n}"}
{"ids": "49271", "raw_code": "@Override public VolatileImage createBackBuffer(WComponentPeer peer){\n  Component target=(Component)peer.getTarget();\n  return new SunVolatileImage(target,target.getWidth(),target.getHeight(),Boolean.TRUE);\n}"}
{"ids": "40475", "raw_code": "public void push(final double value){\n  long bits=Double.doubleToLongBits(value);\n  if (bits == 0L || bits == 0x3ff0000000000000L) {\n    mv.visitInsn(Opcodes.DCONST_0 + (int)value);\n  }\n else {\n    mv.visitLdcInsn(value);\n  }\n}"}
{"ids": "29527", "raw_code": "public synchronized void add(int position,AbstractOption option){\n  AbstractOption search=getByName(option.getName());\n  if (search != null) {\n    LOG.warn(\"Trying to add an option with an existing name... option not added! Please consult the plugin maintainer!\");\n  }\n else {\n    List<AbstractOption> oldOptions=new ArrayList<AbstractOption>(options);\n    options.add(position,option);\n    option.setCollection(this);\n    List<AbstractOption> newOptions=getOptions();\n    fireIndexedPropertyChange(PROP_OPTIONS,position,oldOptions,newOptions);\n  }\n}"}
{"ids": "84145", "raw_code": "protected ByteArrayOutputStream parseBytes(ByteArrayOutputStream bos) throws IOException {\n  int ch;\n  for (ch=read(); ch >= 0 && ch != '<'; ch=read()) {\n    int b1=ch;\n    int b2=read();\n    int b3=read();\n    int b4=read();\n    if (b4 != '=') {\n      int chunk=((base64Decode[b1] << 18) + (base64Decode[b2] << 12) + (base64Decode[b3] << 6)+ (base64Decode[b4]));\n      bos.write(chunk >> 16);\n      bos.write(chunk >> 8);\n      bos.write(chunk);\n    }\n else     if (b3 != '=') {\n      int chunk=((base64Decode[b1] << 12) + (base64Decode[b2] << 6) + (base64Decode[b3]));\n      bos.write(chunk >> 8);\n      bos.write(chunk);\n    }\n else {\n      int chunk=((base64Decode[b1] << 6) + (base64Decode[b2]));\n      bos.write(chunk);\n    }\n  }\n  if (ch == '<')   peek=ch;\n  return bos;\n}"}
{"ids": "59549", "raw_code": "public static void startUploadActivityForResult(Activity activity,Account account,int requestCode){\n  Intent action=new Intent(activity,UploadFilesActivity.class);\n  action.putExtra(EXTRA_ACCOUNT,(account));\n  activity.startActivityForResult(action,requestCode);\n}"}
{"ids": "69465", "raw_code": "public void addGenericAttr(GenericAttr g){\n  generic.addElement(g);\n}"}
{"ids": "51744", "raw_code": "public void stopTraceSession(int traceSessionId) throws SQLException {\n  try (FbService service=attachServiceManager()){\n    service.startServiceAction(getTraceSPB(service,isc_action_svc_trace_stop,traceSessionId));\n    queueService(service);\n  }\n catch (  IOException ioe) {\n    throw new SQLException(ioe);\n  }\n}"}
{"ids": "81778", "raw_code": "String readSubstring(String source,int ofs){\n  return readSubstring(source,ofs,source.length());\n}"}
{"ids": "73134", "raw_code": "private synchronized boolean expungeStaleEntries(){\n  if (this.size == 0)   return false;\n  Object r;\n  boolean result=false;\n  while ((r=queue.poll()) != null) {\n    result=true;\n    SingleEntry e=(SingleEntry)r;\n    this.size-=e.cleanupPkTable(this.table);\n    this.nonDatedEntryCount-=e.cleanupSemiUniqueTable(this.nonDatedTable);\n  }\n  return result;\n}"}
{"ids": "83751", "raw_code": "public void removeListener(AbstractSerialTransportListener listener){\n  if (listener != null) {\n    listeners.remove(listener);\n  }\n}"}
{"ids": "2465", "raw_code": "private String restoreNBTTags(String str,ArrayList<String> nbttags){\n  int nbtidx=1;\n  for (  String capture : nbttags) {\n    str=str.replace(\"NBT\" + nbtidx++,capture);\n  }\n  return str;\n}"}
{"ids": "37460", "raw_code": "private void drawOffsets(final Graphics g){\n  if (isEnabled()) {\n    g.setColor(m_fontColorOffsets);\n  }\n else {\n    g.setColor(m_disabledColor != m_bgColorOffset ? m_disabledColor : Color.WHITE);\n  }\n  final int x=(-m_firstColumn * m_charWidth) + 10;\n  final int bytesToDraw=getMaximumVisibleBytes();\n  final String formatString=m_addressMode == AddressMode.BIT32 ? \"%08X\" : \"%016X\";\n  for (int i=0; i < bytesToDraw; i+=m_bytesPerRow) {\n    final long address=m_baseAddress + (m_firstRow * m_bytesPerRow) + i;\n    final String offsetString=String.format(formatString,address);\n    final int currentRow=i / m_bytesPerRow;\n    g.drawString(offsetString,x,m_paddingTop + (currentRow * m_rowHeight));\n  }\n}"}
{"ids": "52919", "raw_code": "@Override public void writeExternal(ObjectOutput out) throws IOException {\n  super.writeExternal(out);\n  out.writeDouble(knnDistance);\n}"}
{"ids": "2367", "raw_code": "public void touch(Date date){\n  lastSeen=(Date)date.clone();\n}"}
{"ids": "30186", "raw_code": "public static int random(int i,int j){\n  return i + (int)(Math.random() * (j - i));\n}"}
{"ids": "12666", "raw_code": "public void remove(String name){\n  featureMap.remove(name);\n}"}
{"ids": "59684", "raw_code": "private List<ColumnModel> findColumnsToAdd(){\n  List<ColumnModel> columnsToAdd=new ArrayList<ColumnModel>();\n  for (  ColumnModel columnModel : mTableModel.getColumnModels()) {\n    String columnName=columnModel.getColumnName();\n    if (!mTableModelDB.containsColumn(columnName)) {\n      columnsToAdd.add(columnModel);\n    }\n  }\n  return columnsToAdd;\n}"}
{"ids": "40998", "raw_code": "@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){\n  Uri uri=FmRadioStation.Station.CONTENT_URI;\n  String select=FmRadioStation.Station.COLUMN_STATION_TYPE + \" IN (?, ?)\";\n  String order=FmRadioStation.Station.COLUMN_STATION_TYPE + \",\" + FmRadioStation.Station.COLUMN_STATION_FREQ;\n  CursorLoader cursorLoader=new CursorLoader(this,uri,FmRadioStation.COLUMNS,select,new String[]{String.valueOf(FmRadioStation.STATION_TYPE_FAVORITE),String.valueOf(FmRadioStation.STATION_TYPE_SEARCHED)},order);\n  return cursorLoader;\n}"}
{"ids": "80051", "raw_code": "@Override public boolean equals(final Object other){\n  if (this == other) {\n    return true;\n  }\n else   if (other == null) {\n    return false;\n  }\n else   if (other instanceof ExpressionMatcher) {\n    final ExpressionMatcher o=(ExpressionMatcher)other;\n    if (typeMatching != o.typeMatching) {\n      return false;\n    }\n else     if (exactMatching != o.exactMatching) {\n      return false;\n    }\n else     if (similarMatching != o.similarMatching) {\n      return false;\n    }\n else     if (caseInsensitive != o.caseInsensitive) {\n      return false;\n    }\n else {\n      return (jokerMatching == o.jokerMatching);\n    }\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "53903", "raw_code": "public boolean hasCapabilities(List<String> capabilities){\n  String[] arr=new String[capabilities.size()];\n  capabilities.toArray(arr);\n  return hasCapabilities(arr);\n}"}
{"ids": "23989", "raw_code": "public static void assignBucketsToPartitions(Region<?,?> region){\n  PartitionedRegion pr=isPartitionedCheck(region);\n  RecoveryLock lock=null;\n  try {\n    lock=pr.getRecoveryLock();\n    lock.lock();\n    for (int i=0; i < getNumberOfBuckets(pr); i++) {\n      pr.createBucket(i,0,null);\n    }\n  }\n  finally {\n    if (lock != null) {\n      lock.unlock();\n    }\n  }\n}"}
{"ids": "17114", "raw_code": "public synchronized void addListener(Listener l){\n  listeners.add(l);\n}"}
{"ids": "84477", "raw_code": "public boolean endsWith(final String str){\n  if (str == null) {\n    return false;\n  }\n  final int len=str.length();\n  if (len == 0) {\n    return true;\n  }\n  if (len > size) {\n    return false;\n  }\n  int pos=size - len;\n  for (int i=0; i < len; i++, pos++) {\n    if (buffer[pos] != str.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "57644", "raw_code": "public boolean find(int start){\n  if (start < 0 || start > input.length()) {\n    throw new IndexOutOfBoundsException(\"start=\" + start + \"; length=\"+ input.length());\n  }\nsynchronized (this) {\n    matchFound=findImpl(address,input,start,matchOffsets);\n  }\n  return matchFound;\n}"}
{"ids": "81774", "raw_code": "public void applyPattern(String pattern){\n  this.pattern=pattern;\n  if (patternTokens != null) {\n    patternTokens.clear();\n    patternTokens=null;\n  }\n}"}
{"ids": "20459", "raw_code": "public int numberOfReplies(final Resource comment){\n  final Iterator<Resource> children=comment.listChildren();\n  int size=0;\n  while (children.hasNext()) {\n    children.next();\n    size++;\n  }\n  return size;\n}"}
{"ids": "14858", "raw_code": "public void cleanUpRemoteSessions(){\nsynchronized (remoteSessionSet) {\n    for (Iterator iter=remoteSessionSet.iterator(); iter.hasNext(); ) {\n      SessionID sessionID=(SessionID)iter.next();\n      String hostServer=null;\n      try {\n        hostServer=getCurrentHostServer(sessionID);\n      }\n catch (      Exception ex) {\n      }\n      if (!serverConfig.isLocalServer(hostServer)) {\n        iter.remove();\n      }\n    }\n  }\n}"}
{"ids": "44508", "raw_code": "public boolean columnExistsCaseSensitive(DatabaseMetaData dbMetaData,String tableName,String columnName) throws SQLException {\n  ResultSet rsTables=dbMetaData.getColumns(null,null,tableName,columnName);\n  try {\n    return rsTables.next();\n  }\n  finally {\n    closeJDBCResultSet(rsTables);\n  }\n}"}
{"ids": "45097", "raw_code": "public void actionPerformed(ActionEvent e){\n  Caret c=textArea.getCaret();\n  if (c.getDot() != c.getMark()) {\n    return;\n  }\n  RSyntaxDocument doc=(RSyntaxDocument)textArea.getDocument();\n  doc.readLock();\n  try {\n    removeHighlights();\n    int line=textArea.getCaretLineNumber();\n    Token tokenList=textArea.getTokenListForLine(line);\n    int dot=c.getDot();\n    Token t=RSyntaxUtilities.getTokenAtOffset(tokenList,dot);\n    if (t == null || !isValidType(t) || isNonWordChar(t)) {\n      dot--;\n      try {\n        if (dot >= textArea.getLineStartOffset(line)) {\n          t=RSyntaxUtilities.getTokenAtOffset(tokenList,dot);\n        }\n      }\n catch (      BadLocationException ble) {\n        ble.printStackTrace();\n      }\n    }\n    if (t != null && isValidType(t) && !isNonWordChar(t)) {\n      RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();\n      String lexeme=t.getLexeme();\n      int type=t.type;\n      for (int i=0; i < textArea.getLineCount(); i++) {\n        Token temp=textArea.getTokenListForLine(i);\n        while (temp != null && temp.isPaintable()) {\n          if (temp.is(type,lexeme)) {\n            try {\n              int end=temp.offset + temp.textCount;\n              Object tag=h.addMarkedOccurrenceHighlight(temp.offset,end,p);\n              tags.add(tag);\n            }\n catch (            BadLocationException ble) {\n              ble.printStackTrace();\n            }\n          }\n          temp=temp.getNextToken();\n        }\n      }\n    }\n  }\n  finally {\n    doc.readUnlock();\n  }\n  textArea.fireMarkedOccurrencesChanged();\n}"}
{"ids": "67828", "raw_code": "public int read() throws IOException {\n  if (!buf.hasRemaining()) {\n    return -1;\n  }\n  return buf.get() & 0xFF;\n}"}
{"ids": "45268", "raw_code": "public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {\n  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;\n  String s=new String(ch,start,length);\n  append(m_doc.createProcessingInstruction(\"xslt-next-is-raw\",\"formatter-to-dom\"));\n  append(m_doc.createTextNode(s));\n}"}
{"ids": "16985", "raw_code": "private void handleRelease(){\n  float speed=Math.max(dragHelper.getDragSpeed(),animationSpeed);\n  if (getTopMargin() > initialMargin || (dragHelper.getDragSpeed() > animationSpeed && dragHelper.getDistance() > 0) || (getDeviceType(getContext()) == DeviceType.TABLET && isMaximized() && getTopMargin() > minMargin)) {\n    animateHideView(parentHeight - getTopMargin(),speed,new DecelerateInterpolator(),true);\n  }\n else {\n    animateShowView(-(getTopMargin() - minMargin),speed,new DecelerateInterpolator());\n  }\n}"}
{"ids": "12209", "raw_code": "private String normalizeTypeValue(String type){\n  if (INSERT.equals(type))   return INSERT;\n  if (REMOVE.equals(type))   return REMOVE;\n  return null;\n}"}
{"ids": "68317", "raw_code": "@Override public LogSeqNum writeToLog(){\n  List<Constant> rec=buildRecord();\n  return logMgr.append(rec.toArray(new Constant[rec.size()]));\n}"}
{"ids": "74608", "raw_code": "public static double gaussian(){\n  double r, x, y;\n  do {\n    x=uniform(-1.0,1.0);\n    y=uniform(-1.0,1.0);\n    r=x * x + y * y;\n  }\n while (r >= 1 || r == 0);\n  return x * Math.sqrt(-2 * Math.log(r) / r);\n}"}
{"ids": "63119", "raw_code": "public void doneWithParameters(){\n  if (info.parameterCount == VAR_ARGS) {\n    int len=varArgs.size();\n    checkParameterCount(len);\n    args=new Expression[len];\n    varArgs.toArray(args);\n    varArgs=null;\n  }\n else {\n    int len=args.length;\n    if (len > 0 && args[len - 1] == null) {\n      throw DbException.get(ErrorCode.INVALID_PARAMETER_COUNT_2,info.name,\"\" + len);\n    }\n  }\n}"}
{"ids": "40925", "raw_code": "public void removeAllX509Certificates(){\n  x509Certificates.clear();\n}"}
{"ids": "58257", "raw_code": "public DTMAxisIterator cloneIterator(){\n  _isRestartable=false;\n  try {\n    final PrecedingIterator clone=(PrecedingIterator)super.clone();\n    final int[] stackCopy=new int[_stack.length];\n    System.arraycopy(_stack,0,stackCopy,0,_stack.length);\n    clone._stack=stackCopy;\n    return clone;\n  }\n catch (  CloneNotSupportedException e) {\n    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));\n  }\n}"}
{"ids": "56066", "raw_code": "private String readResponseFromServer(HttpURLConnection urlConnection) throws RequestFailureException {\n  try {\n    InputStreamReader reader=new InputStreamReader(urlConnection.getInputStream());\n    BufferedReader in=new BufferedReader(reader);\n    try {\n      StringBuilder response=new StringBuilder();\n      for (String line=in.readLine(); line != null; line=in.readLine()) {\n        response.append(line);\n      }\n      checkServerResponseCode(urlConnection);\n      return response.toString();\n    }\n  finally {\n      in.close();\n    }\n  }\n catch (  IOException e) {\n    throw new RequestFailureException(\"Failed when reading response from server: \",e);\n  }\n}"}
{"ids": "52046", "raw_code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  if (name == null) {\n    throw new NullPointerException();\n  }\n  if (nodeType == null) {\n    throw new NullPointerException();\n  }\n}"}
{"ids": "13105", "raw_code": "public int contains(ValueStoreBase vsb){\n  final Vector values=vsb.fValues;\n  final int size1=values.size();\n  if (fFieldCount <= 1) {\n    for (int i=0; i < size1; ++i) {\n      short val=vsb.getValueTypeAt(i);\n      if (!valueTypeContains(val) || !fValues.contains(values.elementAt(i))) {\n        return i;\n      }\n else       if (val == XSConstants.LIST_DT || val == XSConstants.LISTOFUNION_DT) {\n        ShortList list1=vsb.getItemValueTypeAt(i);\n        if (!itemValueTypeContains(list1)) {\n          return i;\n        }\n      }\n    }\n  }\n else {\n    final int size2=fValues.size();\n    OUTER:     for (int i=0; i < size1; i+=fFieldCount) {\n      INNER:       for (int j=0; j < size2; j+=fFieldCount) {\n        for (int k=0; k < fFieldCount; ++k) {\n          final Object value1=values.elementAt(i + k);\n          final Object value2=fValues.elementAt(j + k);\n          final short valueType1=vsb.getValueTypeAt(i + k);\n          final short valueType2=getValueTypeAt(j + k);\n          if (value1 != value2 && (valueType1 != valueType2 || value1 == null || !value1.equals(value2))) {\n            continue INNER;\n          }\n else           if (valueType1 == XSConstants.LIST_DT || valueType1 == XSConstants.LISTOFUNION_DT) {\n            ShortList list1=vsb.getItemValueTypeAt(i + k);\n            ShortList list2=getItemValueTypeAt(j + k);\n            if (list1 == null || list2 == null || !list1.equals(list2)) {\n              continue INNER;\n            }\n          }\n        }\n        continue OUTER;\n      }\n      return i;\n    }\n  }\n  return -1;\n}"}
{"ids": "15468", "raw_code": "public boolean isSupportedOption(String name){\n  boolean isSupported=false;\n  for (Iterator i=mandatoryOptions.iterator(); i.hasNext() && !isSupported; ) {\n    String opt=(String)i.next();\n    isSupported=opt.equals(name);\n  }\n  for (Iterator i=optionalOptions.iterator(); i.hasNext() && !isSupported; ) {\n    String opt=(String)i.next();\n    isSupported=opt.equals(name);\n  }\n  return isSupported;\n}"}
{"ids": "87056", "raw_code": "public StringBuilder encodeBody(StringBuilder retval){\n  return retval.append(optionTag);\n}"}
{"ids": "57935", "raw_code": "public void addLiteralResultAttribute(AVT avt){\n  if (null == m_avts)   m_avts=new ArrayList();\n  m_avts.add(avt);\n}"}
{"ids": "86355", "raw_code": "protected void moveSelectionToFirstPosition(){\n  if (selectionTable.getSelectionCount() == 0) {\n    return;\n  }\n  int index=0;\n  for (  final TableItem tableItem : selectionTable.getSelection()) {\n    final DLItem item=(DLItem)tableItem.getData();\n    selection.remove(item);\n    selection.add(index++,item);\n  }\n  redrawTables();\n  selectionTable.select(0,index - 1);\n  selectionTable.forceFocus();\n}"}
{"ids": "78144", "raw_code": "private void itemsArrayToCombinedBuffer(T[] itemsArray){\n  final int extra=2;\n  minValue_=itemsArray[0];\n  maxValue_=itemsArray[1];\n  System.arraycopy(itemsArray,extra,combinedBuffer_,0,baseBufferCount_);\n  long bits=bitPattern_;\n  if (bits > 0) {\n    int index=extra + baseBufferCount_;\n    for (int level=0; bits != 0L; level++, bits>>>=1) {\n      if ((bits & 1L) > 0L) {\n        System.arraycopy(itemsArray,index,combinedBuffer_,(2 + level) * k_,k_);\n        index+=k_;\n      }\n    }\n  }\n}"}
{"ids": "30569", "raw_code": "public SQLQuery(Class<T> type,String sqlExpression,QueryResultType queryResultType,Object... parameters){\n  this(sqlExpression,type.getName(),null,queryResultType,parameters);\n}"}
{"ids": "78390", "raw_code": "public void bob(MowzieModelRenderer box,float speed,float degree,boolean bounce,float f,float f1){\n  float bob=(float)(Math.sin(f * speed) * f1 * degree - f1 * degree);\n  if (bounce)   bob=(float)-Math.abs((Math.sin(f * speed) * f1 * degree));\n  box.rotationPointY+=bob;\n}"}
{"ids": "63207", "raw_code": "private static void rejectUnsupportedOptions(Properties p) throws SQLFeatureNotSupportedException {\n  if (p.containsKey(DataSourceFactory.JDBC_ROLE_NAME)) {\n    throw new SQLFeatureNotSupportedException(\"The \" + DataSourceFactory.JDBC_ROLE_NAME + \" property is not supported by H2\");\n  }\n  if (p.containsKey(DataSourceFactory.JDBC_DATASOURCE_NAME)) {\n    throw new SQLFeatureNotSupportedException(\"The \" + DataSourceFactory.JDBC_DATASOURCE_NAME + \" property is not supported by H2\");\n  }\n}"}
{"ids": "6275", "raw_code": "public IOUtils(){\n  super();\n}"}
{"ids": "27106", "raw_code": "private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){\n  int i;\n  if (av == null) {\nswitch (b[v] & 0xFF) {\ncase 'e':\n      return v + 5;\ncase '@':\n    return readAnnotationValues(v + 3,buf,true,null);\ncase '[':\n  return readAnnotationValues(v + 1,buf,false,null);\ndefault :\nreturn v + 3;\n}\n}\nswitch (b[v++] & 0xFF) {\ncase 'I':\ncase 'J':\ncase 'F':\ncase 'D':\nav.visit(name,readConst(readUnsignedShort(v),buf));\nv+=2;\nbreak;\ncase 'B':\nav.visit(name,(byte)readInt(items[readUnsignedShort(v)]));\nv+=2;\nbreak;\ncase 'Z':\nav.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);\nv+=2;\nbreak;\ncase 'S':\nav.visit(name,(short)readInt(items[readUnsignedShort(v)]));\nv+=2;\nbreak;\ncase 'C':\nav.visit(name,(char)readInt(items[readUnsignedShort(v)]));\nv+=2;\nbreak;\ncase 's':\nav.visit(name,readUTF8(v,buf));\nv+=2;\nbreak;\ncase 'e':\nav.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));\nv+=4;\nbreak;\ncase 'c':\nav.visit(name,Type.getType(readUTF8(v,buf)));\nv+=2;\nbreak;\ncase '@':\nv=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));\nbreak;\ncase '[':\nint size=readUnsignedShort(v);\nv+=2;\nif (size == 0) {\nreturn readAnnotationValues(v - 2,buf,false,av.visitArray(name));\n}\nswitch (this.b[v++] & 0xFF) {\ncase 'B':\nbyte[] bv=new byte[size];\nfor (i=0; i < size; i++) {\nbv[i]=(byte)readInt(items[readUnsignedShort(v)]);\nv+=3;\n}\nav.visit(name,bv);\n--v;\nbreak;\ncase 'Z':\nboolean[] zv=new boolean[size];\nfor (i=0; i < size; i++) {\nzv[i]=readInt(items[readUnsignedShort(v)]) != 0;\nv+=3;\n}\nav.visit(name,zv);\n--v;\nbreak;\ncase 'S':\nshort[] sv=new short[size];\nfor (i=0; i < size; i++) {\nsv[i]=(short)readInt(items[readUnsignedShort(v)]);\nv+=3;\n}\nav.visit(name,sv);\n--v;\nbreak;\ncase 'C':\nchar[] cv=new char[size];\nfor (i=0; i < size; i++) {\ncv[i]=(char)readInt(items[readUnsignedShort(v)]);\nv+=3;\n}\nav.visit(name,cv);\n--v;\nbreak;\ncase 'I':\nint[] iv=new int[size];\nfor (i=0; i < size; i++) {\niv[i]=readInt(items[readUnsignedShort(v)]);\nv+=3;\n}\nav.visit(name,iv);\n--v;\nbreak;\ncase 'J':\nlong[] lv=new long[size];\nfor (i=0; i < size; i++) {\nlv[i]=readLong(items[readUnsignedShort(v)]);\nv+=3;\n}\nav.visit(name,lv);\n--v;\nbreak;\ncase 'F':\nfloat[] fv=new float[size];\nfor (i=0; i < size; i++) {\nfv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));\nv+=3;\n}\nav.visit(name,fv);\n--v;\nbreak;\ncase 'D':\ndouble[] dv=new double[size];\nfor (i=0; i < size; i++) {\ndv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));\nv+=3;\n}\nav.visit(name,dv);\n--v;\nbreak;\ndefault :\nv=readAnnotationValues(v - 3,buf,false,av.visitArray(name));\n}\n}\nreturn v;\n}"}
{"ids": "60743", "raw_code": "private void decrementWorkerCount(){\n  do {\n  }\n while (!compareAndDecrementWorkerCount(ctl.get()));\n}"}
{"ids": "41953", "raw_code": "public static float buildFloat(int mant,int exp){\n  if (exp < -125 || mant == 0) {\n    return 0.0f;\n  }\n  if (exp >= 128) {\n    return (mant > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;\n  }\n  if (exp == 0) {\n    return mant;\n  }\n  if (mant >= (1 << 26)) {\n    mant++;\n  }\n  return (float)((exp > 0) ? mant * pow10[exp] : mant / pow10[-exp]);\n}"}
{"ids": "60117", "raw_code": "public void clearValues(){\n  mDataSets.clear();\n  notifyDataChanged();\n}"}
{"ids": "72287", "raw_code": "public boolean hasModeSupport(){\n  return isAvailable() && mCapabilities.intersects(mAllModes);\n}"}
{"ids": "85785", "raw_code": "public static void updateItemInDatabase(Context context,final ItemInfo item){\n  final ContentValues values=new ContentValues();\n  item.onAddToDatabase(context,values);\n  updateItemInDatabaseHelper(context,values,item,\"updateItemInDatabase\");\n}"}
{"ids": "38043", "raw_code": "@Override public String graph() throws Exception {\n  StringBuffer text=new StringBuffer();\n  text.append(\"digraph CobwebTree {\\n\");\n  m_cobwebTree.graphTree(text);\n  text.append(\"}\\n\");\n  return text.toString();\n}"}
{"ids": "38913", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=enumToVector(super.listOptions());\n  result.addElement(new Option(\"\\tThe number of attributes (default \" + defaultNumAttributes() + \").\",\"a\",1,\"-a <num>\"));\n  result.addElement(new Option(\"\\tClass Flag, if set, the cluster is listed in extra attribute.\",\"c\",0,\"-c\"));\n  result.addElement(new Option(\"\\tThe indices for boolean attributes.\",\"b\",1,\"-b <range>\"));\n  result.addElement(new Option(\"\\tThe indices for nominal attributes.\",\"m\",1,\"-m <range>\"));\n  return result.elements();\n}"}
{"ids": "17835", "raw_code": "public synchronized Reference<? extends T> remove(long timeoutMillis) throws InterruptedException {\n  if (timeoutMillis < 0) {\n    throw new IllegalArgumentException(\"timeout < 0: \" + timeoutMillis);\n  }\n  if (head != null) {\n    return poll();\n  }\n  if (timeoutMillis == 0 || (timeoutMillis > Long.MAX_VALUE / NANOS_PER_MILLI)) {\n    do {\n      wait(0);\n    }\n while (head == null);\n    return poll();\n  }\n  long nanosToWait=timeoutMillis * NANOS_PER_MILLI;\n  int timeoutNanos=0;\n  long startTime=System.nanoTime();\n  while (true) {\n    wait(timeoutMillis,timeoutNanos);\n    if (head != null) {\n      break;\n    }\n    long nanosElapsed=System.nanoTime() - startTime;\n    long nanosRemaining=nanosToWait - nanosElapsed;\n    if (nanosRemaining <= 0) {\n      break;\n    }\n    timeoutMillis=nanosRemaining / NANOS_PER_MILLI;\n    timeoutNanos=(int)(nanosRemaining - timeoutMillis * NANOS_PER_MILLI);\n  }\n  return poll();\n}"}
{"ids": "3720", "raw_code": "public PathImpl lookupImpl(String userPath,Map<String,Object> newAttributes,boolean isAllowRoot){\n  if (userPath == null) {\n    return lookupImpl(getPath(),newAttributes,isAllowRoot);\n  }\n  if (!isAllowRoot) {\n    return schemeWalk(userPath,newAttributes,userPath,0);\n  }\n  String scheme=scanScheme(userPath);\n  if (scheme == null) {\n    return schemeWalk(userPath,newAttributes,userPath,0);\n  }\n  PathImpl path;\n  SchemeMap schemeMap=_schemeMap;\n  if (isWindows()) {\n    int length=scheme.length();\n    char ch;\n    if (length == 1 && ('a' <= (ch=scheme.charAt(0)) && ch <= 'z' || 'A' <= ch && ch <= 'Z')) {\n      userPath=Character.toLowerCase(ch) + userPath.substring(1);\n      if (_isTestWindows)       return schemeWalk(userPath,newAttributes,\"/\" + userPath,0);\n      path=schemeMap.get(\"file\");\n      if (path != null)       return path.schemeWalk(userPath,newAttributes,\"/\" + userPath,0);\n else       return schemeWalk(userPath,newAttributes,\"/\" + userPath,0);\n    }\n  }\n  path=schemeMap.get(scheme);\n  if (path == null) {\n    return schemeWalk(userPath,newAttributes,userPath,0);\n  }\n else {\n    return path.schemeWalk(userPath,newAttributes,userPath,scheme.length() + 1);\n  }\n}"}
{"ids": "71845", "raw_code": "static Integer readRuleID(final SubstringReader reader) throws DecodeException {\n  int length=0;\n  reader.skipWhitespaces();\n  reader.mark();\n  try {\n    while (reader.read() != ' ') {\n      length++;\n    }\n    if (length == 0) {\n      throw DecodeException.error(ERR_ATTR_SYNTAX_RULE_ID_NO_VALUE1.get(reader.pos() - 1));\n    }\n    reader.reset();\n    final String ruleID=reader.read(length);\n    try {\n      return Integer.valueOf(ruleID);\n    }\n catch (    final NumberFormatException e) {\n      throw DecodeException.error(ERR_ATTR_SYNTAX_RULE_ID_INVALID1.get(ruleID));\n    }\n  }\n catch (  final StringIndexOutOfBoundsException e) {\n    throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get());\n  }\n}"}
{"ids": "71602", "raw_code": "public void removeIndex(IIndex index){\n  if (index != null) {\n    indices.remove(index);\n  }\n}"}
{"ids": "29266", "raw_code": "private AttributeActionSet processAttributeSection(ModeUsage modeUsage,String ns,IntSet indexSet,Attributes attributes) throws SAXException {\n  Mode mode=modeUsage.getMode(currentSection.context);\n  AttributeActionSet actions=mode.getAttributeActions(ns);\n  if (actions.getReject() && !attributeNamespaceRejected) {\n    attributeNamespaceRejected=true;\n    if (eh != null)     eh.error(new SAXParseException(localizer.message(\"reject_attribute\",ns),locator));\n  }\n  Schema[] schemas=actions.getSchemas();\n  for (int j=0; j < schemas.length; j++) {\n    if (attributeSchemas.contains(schemas[j]))     continue;\n    attributeSchemas.add(schemas[j]);\n    if (filteredAttributes == null)     filteredAttributes=filterAttributes(indexSet,attributes);\n    validateAttributes(schemas[j],filteredAttributes);\n  }\n  return actions;\n}"}
{"ids": "78493", "raw_code": "public void initialize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){\n  if (mTimeInitialized) {\n    Log.e(TAG,\"Time has already been initialized.\");\n    return;\n  }\n  mHapticFeedbackController=hapticFeedbackController;\n  mIs24HourMode=is24HourMode;\n  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;\n  mCircleView.initialize(context,mHideAmPm);\n  mCircleView.invalidate();\n  if (!mHideAmPm) {\n    mAmPmCirclesView.initialize(context,initialHoursOfDay < 12 ? AM : PM);\n    mAmPmCirclesView.invalidate();\n  }\n  Resources res=context.getResources();\n  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};\n  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};\n  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};\n  String[] hoursTexts=new String[12];\n  String[] innerHoursTexts=new String[12];\n  String[] minutesTexts=new String[12];\n  for (int i=0; i < 12; i++) {\n    hoursTexts[i]=is24HourMode ? String.format(\"%02d\",hours_24[i]) : String.format(\"%d\",hours[i]);\n    innerHoursTexts[i]=String.format(\"%d\",hours[i]);\n    minutesTexts[i]=String.format(\"%02d\",minutes[i]);\n  }\n  mHourRadialTextsView.initialize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);\n  mHourRadialTextsView.invalidate();\n  mMinuteRadialTextsView.initialize(res,minutesTexts,null,mHideAmPm,false);\n  mMinuteRadialTextsView.invalidate();\n  setValueForItem(HOUR_INDEX,initialHoursOfDay);\n  setValueForItem(MINUTE_INDEX,initialMinutes);\n  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;\n  mHourRadialSelectorView.initialize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));\n  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;\n  mMinuteRadialSelectorView.initialize(context,mHideAmPm,false,false,minuteDegrees,false);\n  mTimeInitialized=true;\n}"}
{"ids": "36151", "raw_code": "@Override public double conf(double totalWeight,double delta){\n  return inverseNormal(1 - delta / 2) / (2 * Math.sqrt(totalWeight));\n}"}
{"ids": "12784", "raw_code": "@Override public final int readUnsignedByte() throws IOException {\n  return dis.readUnsignedByte();\n}"}
{"ids": "31068", "raw_code": "public synchronized static void ensureSecurityManager(@SuppressWarnings(\"UnusedParameters\") String[] args){\n  SecurityPolicyLoader.load(SystemBoot.class,\"policy.all\");\n  System.setSecurityManager(new RMISecurityManager());\n}"}
{"ids": "7453", "raw_code": "@Override public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}"}
{"ids": "37941", "raw_code": "public String ridgeTipText(){\n  return \"The value of the Ridge parameter.\";\n}"}
{"ids": "20824", "raw_code": "public void updateEnableStateSwingItems(){\n  if (SwingUtilities.isEventDispatchThread())   super.updateEnableState();\n}"}
{"ids": "15959", "raw_code": "public void reset(){\n  System.arraycopy(IV,0,cbcV,0,IV.length);\n  Arrays.fill(cbcNextV,(byte)0);\n  cipher.reset();\n}"}
{"ids": "10485", "raw_code": "protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {\n  if (_inputStream == null) {\n    return false;\n  }\n  int amount=_inputEnd - _inputPtr;\n  if (amount > 0 && _inputPtr > 0) {\n    _currInputProcessed+=_inputPtr;\n    System.arraycopy(_inputBuffer,_inputPtr,_inputBuffer,0,amount);\n    _inputEnd=amount;\n  }\n else {\n    _inputEnd=0;\n  }\n  _inputPtr=0;\n  while (_inputEnd < minAvailable) {\n    int count=_inputStream.read(_inputBuffer,_inputEnd,_inputBuffer.length - _inputEnd);\n    if (count < 1) {\n      _closeInput();\n      if (count == 0) {\n        throw new IOException(\"InputStream.read() returned 0 characters when trying to read \" + amount + \" bytes\");\n      }\n      return false;\n    }\n    _inputEnd+=count;\n  }\n  return true;\n}"}
{"ids": "54079", "raw_code": "public DataTypeParser register(int jdbcType,String grammar){\n  Objects.requireNonNull(grammar,\"the data type grammar must be specified\");\n  DataTypePattern pattern=parser.parse(jdbcType,grammar);\n  pattern.forEachFirstToken(null);\n  return this;\n}"}
{"ids": "79509", "raw_code": "public void close() throws GenericDataSourceException {\n  if (_manualTX) {\n    if (Debug.verboseOn())     Debug.logVerbose(\"SQLProcessor:close() calling commit : _manualTX=\" + _manualTX,module);\n    commit();\n  }\n  _sql=null;\n  if (_rs != null) {\n    try {\n      _rs.close();\n      if (Debug.verboseOn())       Debug.logVerbose(\"SQLProcessor:close() result close : _manualTX=\" + _manualTX,module);\n    }\n catch (    SQLException sqle) {\n      Debug.logWarning(sqle.getMessage(),module);\n    }\n    _rs=null;\n  }\n  if (_ps != null) {\n    try {\n      _ps.close();\n      if (Debug.verboseOn())       Debug.logVerbose(\"SQLProcessor:close() preparedStatement close : _manualTX=\" + _manualTX,module);\n    }\n catch (    SQLException sqle) {\n      Debug.logWarning(sqle.getMessage(),module);\n    }\n    _ps=null;\n  }\n  if ((_connection != null) && _bDeleteConnection) {\n    try {\n      _connection.close();\n      if (Debug.verboseOn())       Debug.logVerbose(\"SQLProcessor:close() connection close : _manualTX=\" + _manualTX,module);\n    }\n catch (    SQLException sqle) {\n      Debug.logWarning(sqle.getMessage(),module);\n    }\n    _connection=null;\n  }\n}"}
{"ids": "43724", "raw_code": "private DefaultMutableTreeNode copy(TreeNode node){\n  return new DefaultMutableTreeNode(node);\n}"}
{"ids": "3370", "raw_code": "public byte[] data(){\n  ByteArrayOutputStream bos=new ByteArrayOutputStream();\n  try {\n    toData(bos);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n  return bos.toByteArray();\n}"}
{"ids": "56655", "raw_code": "@SafeVarargs public static <T>ReactiveSeq<T> of(final T... elements){\n  final ReversingArraySpliterator<T> array=new ReversingArraySpliterator<T>(elements,false,0);\n  return StreamUtils.reactiveSeq(StreamSupport.stream(array,false),Optional.ofNullable(array));\n}"}
{"ids": "25528", "raw_code": "private void decodeLtp(LongTermPrediction ltp,int maxSfb){\n  ltp.lag=br.read(11);\n  ltp.coef=ltp_coef[br.read(3)];\n  for (int sfb=0; sfb < Math.min(maxSfb,MAX_LTP_LONG_SFB); sfb++) {\n    ltp.used[sfb]=br.readBool();\n  }\n}"}
{"ids": "9039", "raw_code": "public static <T>List<T> instantiateAll(String[] classes,ClassLoader classLoader){\n  List<T> clazzes=new ArrayList<T>();\n  for (  String clazz : classes) {\n    if (StringUtils.hasLength(clazz)) {\n      try {\n        clazzes.add(ClassUtils.<T>instantiate(clazz,classLoader));\n      }\n catch (      Exception e) {\n        throw new CassandraMigrationException(\"Unable to instantiate class: \" + clazz,e);\n      }\n    }\n  }\n  return clazzes;\n}"}
{"ids": "65248", "raw_code": "static void clearInstanceCache(){\nsynchronized (INSTANCE_CACHE) {\n    INSTANCE_CACHE.clear();\n  }\n}"}
{"ids": "56965", "raw_code": "public static <E extends Enum<E> & BitmapableEnum>EnumSet<E> toEnumSet(Class<E> type,int bitmap){\n  if (type == null)   throw new NullPointerException(\"Given enum type must not be null\");\n  EnumSet<E> s=EnumSet.noneOf(type);\n  int allSetBitmap=0;\n  for (  E element : type.getEnumConstants()) {\n    if (Integer.bitCount(element.getValue()) != 1) {\n      String msg=String.format(\"The %s (%x) constant of the \" + \"enum %s is supposed to represent a bitmap entry but \" + \"has more than one bit set.\",element.toString(),element.getValue(),type.getName());\n      throw new IllegalArgumentException(msg);\n    }\n    allSetBitmap|=element.getValue();\n    if ((bitmap & element.getValue()) != 0)     s.add(element);\n  }\n  if (((~allSetBitmap) & bitmap) != 0) {\n    String msg=String.format(\"The bitmap %x for enum %s has \" + \"bits set that are presented by any enum constant\",bitmap,type.getName());\n    throw new IllegalArgumentException(msg);\n  }\n  return s;\n}"}
{"ids": "69980", "raw_code": "public synchronized void notifySessionBorrowed(){\n  if (LOGGER.isTraceEnabled())   LOGGER.logTrace(this + \": notifySessionBorrowed\");\n  currentContext=new TransactionContext(resource,xaResource);\n  allContexts.add(currentContext);\n  closed=false;\n}"}
{"ids": "63398", "raw_code": "@Override public synchronized void close() throws SQLException {\n  try {\n    debugCodeCall(\"close\");\n    if (session == null) {\n      return;\n    }\n    CloseWatcher.unregister(watcher);\n    session.cancel();\n    if (executingStatement != null) {\n      try {\n        executingStatement.cancel();\n      }\n catch (      NullPointerException e) {\n      }\n    }\nsynchronized (session) {\n      try {\n        if (!session.isClosed()) {\n          try {\n            if (session.hasPendingTransaction()) {\n              if (!session.isReconnectNeeded(true)) {\n                try {\n                  rollbackInternal();\n                }\n catch (                DbException e) {\n                  if (e.getErrorCode() != ErrorCode.CONNECTION_BROKEN_1) {\n                    throw e;\n                  }\n                }\n              }\n              session.afterWriting();\n            }\n            closePreparedCommands();\n          }\n  finally {\n            session.close();\n          }\n        }\n      }\n  finally {\n        session=null;\n      }\n    }\n  }\n catch (  Exception e) {\n    throw logAndConvert(e);\n  }\n}"}
{"ids": "20200", "raw_code": "public static WKTGeometry createEmpty(WKTType wktType){\n  WKTGeometry wktGeometry=new WKTGeometry();\n  wktGeometry.setGeometryType(wktType);\n  return wktGeometry;\n}"}
{"ids": "53943", "raw_code": "public PeerLookupTask createPeerLookup(byte[] info_hash){\n  if (!isRunning()) {\n    return null;\n  }\n  Key id=new Key(info_hash);\n  RPCServer srv=serverManager.getRandomActiveServer(false);\n  if (srv == null)   return null;\n  PeerLookupTask lookupTask=new PeerLookupTask(srv,node,id);\n  return lookupTask;\n}"}
{"ids": "10121", "raw_code": "public void addChild(Node... nodes){\n  for (  Node node : nodes) {\n    node.detachFromParent();\n    node.parentNode=this;\n    initChildNodes(node);\n    childNodes.add(node);\n  }\n  reindexChildrenOnAdd(nodes.length);\n}"}
{"ids": "30081", "raw_code": "public static void writeStringASCII(ByteBuf stream,String str) throws UnsupportedEncodingException {\n  final byte[] bytes=str.getBytes(\"US-ASCII\");\n  stream.writeInt(str.length());\n  stream.writeBytes(bytes);\n}"}
{"ids": "75366", "raw_code": "@Override public void onDetach(){\nsynchronized (mThread) {\n    mProgressBar=null;\n    mReady=false;\n    mThread.notify();\n  }\n  super.onDetach();\n}"}
{"ids": "54809", "raw_code": "public void outputSource(int module,int line,String s){\n  StringBuilder sb=new StringBuilder();\n  appendSource(sb,module,line,s,true);\n  out(sb.toString());\n}"}
{"ids": "1150", "raw_code": "public static String suppressWhiteSpace(String str){\n  int len=str.length();\n  StringBuilder sb=new StringBuilder(len);\n  char c;\n  char buffer=0;\n  for (int i=0; i < len; i++) {\n    c=str.charAt(i);\n    if (c == '\\n' || c == '\\r')     buffer='\\n';\n else     if (isWhiteSpace(c)) {\n      if (buffer == 0)       buffer=c;\n    }\n else {\n      if (buffer != 0) {\n        sb.append(buffer);\n        buffer=0;\n      }\n      sb.append(c);\n    }\n  }\n  if (buffer != 0)   sb.append(buffer);\n  return sb.toString();\n}"}
{"ids": "30695", "raw_code": "private Node<K,V> findPredecessor(Comparable<? super K> key){\n  if (key == null)   throw new NullPointerException();\n  for (; ; ) {\n    Index<K,V> q=head;\n    Index<K,V> r=q.right;\n    for (; ; ) {\n      if (r != null) {\n        Node<K,V> n=r.node;\n        K k=n.key;\n        if (n.value == null) {\n          if (!q.unlink(r))           break;\n          r=q.right;\n          continue;\n        }\n        if (key.compareTo(k) > 0) {\n          q=r;\n          r=r.right;\n          continue;\n        }\n      }\n      Index<K,V> d=q.down;\n      if (d != null) {\n        q=d;\n        r=d.right;\n      }\n else       return q.node;\n    }\n  }\n}"}
{"ids": "17426", "raw_code": "protected ConnectionStateSSLv3(SSLSessionImpl session){\n  try {\n    CipherSuite cipherSuite=session.cipherSuite;\n    boolean is_exportabe=cipherSuite.isExportable();\n    hash_size=cipherSuite.getMACLength();\n    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;\n    int iv_size=cipherSuite.ivSize;\n    block_size=cipherSuite.getBlockSize();\n    String algName=cipherSuite.getBulkEncryptionAlgorithm();\n    String hashName=cipherSuite.getHashName();\n    if (logger != null) {\n      logger.println(\"ConnectionStateSSLv3.create:\");\n      logger.println(\"  cipher suite name: \" + session.getCipherSuite());\n      logger.println(\"  encryption alg name: \" + algName);\n      logger.println(\"  hash alg name: \" + hashName);\n      logger.println(\"  hash size: \" + hash_size);\n      logger.println(\"  block size: \" + block_size);\n      logger.println(\"  IV size:\" + iv_size);\n      logger.println(\"  key size: \" + key_size);\n    }\n    byte[] clientRandom=session.clientRandom;\n    byte[] serverRandom=session.serverRandom;\n    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];\n    byte[] seed=new byte[clientRandom.length + serverRandom.length];\n    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);\n    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);\n    PRF.computePRF_SSLv3(key_block,session.master_secret,seed);\n    byte[] client_mac_secret=new byte[hash_size];\n    byte[] server_mac_secret=new byte[hash_size];\n    byte[] client_key=new byte[key_size];\n    byte[] server_key=new byte[key_size];\n    boolean is_client=!session.isServer;\n    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);\n    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);\n    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);\n    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);\n    IvParameterSpec clientIV=null;\n    IvParameterSpec serverIV=null;\n    if (is_exportabe) {\n      if (logger != null) {\n        logger.println(\"ConnectionStateSSLv3: is_exportable\");\n      }\n      MessageDigest md5=MessageDigest.getInstance(\"MD5\");\n      md5.update(client_key);\n      md5.update(clientRandom);\n      md5.update(serverRandom);\n      client_key=md5.digest();\n      md5.update(server_key);\n      md5.update(serverRandom);\n      md5.update(clientRandom);\n      server_key=md5.digest();\n      key_size=cipherSuite.expandedKeyMaterial;\n      if (block_size != 0) {\n        md5.update(clientRandom);\n        md5.update(serverRandom);\n        clientIV=new IvParameterSpec(md5.digest(),0,iv_size);\n        md5.update(serverRandom);\n        md5.update(clientRandom);\n        serverIV=new IvParameterSpec(md5.digest(),0,iv_size);\n      }\n    }\n else     if (block_size != 0) {\n      clientIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size,iv_size);\n      serverIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size + iv_size,iv_size);\n    }\n    if (logger != null) {\n      logger.println(\"is exportable: \" + is_exportabe);\n      logger.println(\"master_secret\");\n      logger.print(session.master_secret);\n      logger.println(\"client_random\");\n      logger.print(clientRandom);\n      logger.println(\"server_random\");\n      logger.print(serverRandom);\n      logger.println(\"client_mac_secret\");\n      logger.print(client_mac_secret);\n      logger.println(\"server_mac_secret\");\n      logger.print(server_mac_secret);\n      logger.println(\"client_key\");\n      logger.print(client_key,0,key_size);\n      logger.println(\"server_key\");\n      logger.print(server_key,0,key_size);\n      if (clientIV != null) {\n        logger.println(\"client_iv\");\n        logger.print(clientIV.getIV());\n        logger.println(\"server_iv\");\n        logger.print(serverIV.getIV());\n      }\n else {\n        logger.println(\"no IV.\");\n      }\n    }\n    if (algName == null) {\n      encCipher=new NullCipher();\n      decCipher=new NullCipher();\n    }\n else {\n      encCipher=Cipher.getInstance(algName);\n      decCipher=Cipher.getInstance(algName);\n      if (is_client) {\n        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);\n        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);\n      }\n else {\n        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);\n        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);\n      }\n    }\n    messageDigest=MessageDigest.getInstance(hashName);\n    if (is_client) {\n      mac_write_secret=client_mac_secret;\n      mac_read_secret=server_mac_secret;\n    }\n else {\n      mac_write_secret=server_mac_secret;\n      mac_read_secret=client_mac_secret;\n    }\n    if (hashName.equals(\"MD5\")) {\n      pad_1=SSLv3Constants.MD5pad1;\n      pad_2=SSLv3Constants.MD5pad2;\n    }\n else {\n      pad_1=SSLv3Constants.SHApad1;\n      pad_2=SSLv3Constants.SHApad2;\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException(\"Error during computation of security parameters\"));\n  }\n}"}
{"ids": "45418", "raw_code": "public static void cleanDirectory(File directory) throws IOException {\n  if (!directory.exists()) {\n    String message=directory + \" does not exist\";\n    throw new IllegalArgumentException(message);\n  }\n  if (!directory.isDirectory()) {\n    String message=directory + \" is not a directory\";\n    throw new IllegalArgumentException(message);\n  }\n  File[] files=directory.listFiles();\n  if (files == null) {\n    throw new IOException(\"Failed to list contents of \" + directory);\n  }\n  IOException exception=null;\n  for (  File file : files) {\n    try {\n      forceDelete(file);\n    }\n catch (    IOException ioe) {\n      exception=ioe;\n    }\n  }\n  if (null != exception) {\n    throw exception;\n  }\n}"}
{"ids": "43387", "raw_code": "public void notIdle(){\n  if (idleTimeoutMsec.get() > 0)   lastActionMsec.set(System.currentTimeMillis());\n}"}
{"ids": "83970", "raw_code": "public static byte[] gzip(final String input){\n  final ByteArrayOutputStream baos=new FastByteArrayOutputStream();\n  GZIPOutputStream gzos=null;\n  try {\n    gzos=new GZIPOutputStream(baos);\n    gzos.write(input.getBytes(\"UTF-8\"));\n  }\n catch (  final IOException e) {\n    MainUtil.handleError(e);\n  }\n finally {\n    if (gzos != null) {\n      try {\n        gzos.close();\n      }\n catch (      final IOException ignore) {\n      }\n    }\n  }\n  return baos.toByteArray();\n}"}
{"ids": "25122", "raw_code": "@Override public void endDocument() throws SAXException {\n  if (resource != null) {\n    resource.addAllResource(jsVector);\n    for (    Object object : resource.getResourceSet()) {\n      Resource r=(Resource)object;\n      if (r.getResource() != null) {\n        parser.setResource((Resource)r);\n        parser.run();\n        jsSet.add(parser.getResult());\n      }\n    }\n  }\n}"}
{"ids": "24930", "raw_code": "public void addMethodToDisplay(MethodIdent methodIdent){\n  methods.add(methodIdent);\n}"}
{"ids": "37969", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  result.addElement(new Option(\"\\tThe Gamma parameter.\\n\" + \"\\t(default: 0.01)\",\"G\",1,\"-G <num>\"));\n  result.addAll(Collections.list(super.listOptions()));\n  return result.elements();\n}"}
{"ids": "52261", "raw_code": "private void selectConnectingEdges(List<DisplayNode> displayNodes){\n  if (!isAllowNodeEdgeSelection()) {\n    return;\n  }\n  Component[] components=getComponents();\n  for (  Component comp : components) {\n    if (comp instanceof IDisplayEdge) {\n      IDisplayEdge graphEdge=(IDisplayEdge)comp;\n      DisplayNode node1=graphEdge.getComp1();\n      DisplayNode node2=graphEdge.getComp2();\n      if (node1 instanceof GraphNodeError) {\n        continue;\n      }\n      if (node2 instanceof GraphNodeError) {\n        continue;\n      }\n      if (node2 != null) {\n        boolean selected=displayNodes.contains(node1) && displayNodes.contains(node2);\n        graphEdge.setSelected(selected);\n      }\n    }\n  }\n}"}
{"ids": "19530", "raw_code": "public static String classNameOnly(String typeName){\n  String dotted=descriptorToDot(typeName);\n  int start=dotted.lastIndexOf(\".\");\n  if (start < 0) {\n    return dotted;\n  }\n else {\n    return dotted.substring(start + 1);\n  }\n}"}
{"ids": "16694", "raw_code": "public HyperGraph search(){\n  long startTime=System.currentTimeMillis();\n  Future future=new Future(chart);\n  stacks=new ArrayList<>();\n  stacks.add(null);\n  ComputeNodeResult result=new ComputeNodeResult(this.featureFunctions,Hypothesis.BEGIN_RULE,null,-1,1,null,this.sentence);\n  Stack firstStack=new Stack(sentence,config);\n  firstStack.add(new Hypothesis(result.getDPStates(),future.Full()));\n  stacks.add(firstStack);\n  for (int source_words=2; source_words <= sentence.length(); ++source_words) {\n    Stack targetStack=new Stack(sentence,config);\n    stacks.add(targetStack);\n    for (int phrase_length=1; phrase_length <= Math.min(source_words - 1,chart.MaxSourcePhraseLength()); phrase_length++) {\n      int from_stack=source_words - phrase_length;\n      Stack tailStack=stacks.get(from_stack);\n      LOG.debug(\"WORDS {} MAX {} (STACK {} phrase_length {})\",source_words,chart.MaxSourcePhraseLength(),from_stack,phrase_length);\n      for (      Coverage coverage : tailStack.getCoverages()) {\n        ArrayList<Hypothesis> hypotheses=tailStack.get(coverage);\n        int begin=coverage.firstZero();\n        int last_end=Math.min(coverage.firstZero() + config.reordering_limit,chart.SentenceLength());\n        int last_begin=(last_end > phrase_length) ? (last_end - phrase_length) : 0;\n        for (begin=coverage.firstZero(); begin <= last_begin; begin++) {\n          if (!coverage.compatible(begin,begin + phrase_length) || !permissible(coverage,begin,begin + phrase_length)) {\n            continue;\n          }\n          if (begin == sentence.length() - 1 && source_words != sentence.length())           continue;\n          PhraseNodes phrases=chart.getRange(begin,begin + phrase_length);\n          if (phrases == null)           continue;\n          LOG.debug(\"Applying {} target phrases over [{}, {}]\",phrases.size(),begin,begin + phrase_length);\n          float future_delta=future.Change(coverage,begin,begin + phrase_length);\n          Candidate cand=new Candidate(featureFunctions,sentence,hypotheses,phrases,future_delta,new int[]{0,0});\n          targetStack.addCandidate(cand);\n        }\n      }\n    }\n    targetStack.search();\n  }\n  LOG.info(\"Input {}: Search took {} seconds\",sentence.id(),(System.currentTimeMillis() - startTime) / 1000.0f);\n  return createGoalNode();\n}"}
{"ids": "33109", "raw_code": "public static List<LibraryLocation> gatherAllLibraries(String[] dirPaths){\n  List<LibraryLocation> libraries=new ArrayList<LibraryLocation>();\n  for (int i=0; i < dirPaths.length; i++) {\n    File extDir=new File(dirPaths[i]);\n    if (extDir.isDirectory()) {\n      String[] names=extDir.list(fgArchiveFilter);\n      if (names != null) {\n        for (int j=0; j < names.length; j++) {\n          File jar=new File(extDir,names[j]);\n          if (jar.isFile()) {\n            try {\n              IPath libPath=new Path(jar.getCanonicalPath());\n              IPath sourcePath=Path.EMPTY;\n              IPath packageRoot=Path.EMPTY;\n              URL javadocLocation=null;\n              URL indexLocation=null;\n              LibraryLocation library=new LibraryLocation(libPath,sourcePath,packageRoot,javadocLocation,indexLocation);\n              libraries.add(library);\n            }\n catch (            IOException e) {\n              Launching.log(e);\n            }\n          }\n        }\n      }\n    }\n  }\n  return libraries;\n}"}
{"ids": "2105", "raw_code": "public void requestClose(){\n  mLock.lock();\n  try {\n    if (mIsShutdown) {\n      return;\n    }\n    mTargetState=TargetState.CLOSED;\n    update();\n  }\n  finally {\n    mLock.unlock();\n  }\n}"}
{"ids": "77137", "raw_code": "private void reserveOneDoc(){\n  if (pendingNumDocs.incrementAndGet() > IndexWriter.getActualMaxDocs()) {\n    pendingNumDocs.decrementAndGet();\n    throw new IllegalArgumentException(\"number of documents in the index cannot exceed \" + IndexWriter.getActualMaxDocs());\n  }\n}"}
{"ids": "26456", "raw_code": "public static void streamContentToBrowser(HttpServletResponse response,InputStream in,int length,String contentType,String fileName) throws IOException {\n  setResponseBrowserProxyNoCache(response);\n  response.setContentLength(length);\n  if (contentType != null) {\n    response.setContentType(contentType);\n  }\n  if (fileName != null) {\n    response.setHeader(\"Content-Disposition\",\"attachment;filename=\\\"\" + fileName + \"\\\"\");\n  }\n  OutputStream out=response.getOutputStream();\n  try {\n    streamContent(out,in,length);\n  }\n catch (  IOException e) {\n    out.close();\n    throw e;\n  }\n  out.flush();\n  out.close();\n}"}
{"ids": "51875", "raw_code": "private static boolean isValidMethodName(String methodName){\n  return methodName.matches(\"^[a-zA-Z_$][a-zA-Z0-9_$]*$\");\n}"}
{"ids": "42443", "raw_code": "public static byte[] toUTF8(String s){\n  byte[] result=new byte[utfLength(s)];\n  int result_index=0;\n  for (int i=0, n=s.length(); i < n; ++i) {\n    char c=s.charAt(i);\n    if (((!WRITE_PSEUDO_UTF8) || (c >= 0x0001)) && (c <= 0x007F)) {\n      result[result_index++]=(byte)c;\n    }\n else     if (c > 0x07FF) {\n      result[result_index++]=(byte)(0xe0 | (byte)(c >> 12));\n      result[result_index++]=(byte)(0x80 | ((c & 0xfc0) >> 6));\n      result[result_index++]=(byte)(0x80 | (c & 0x3f));\n    }\n else {\n      result[result_index++]=(byte)(0xc0 | (byte)(c >> 6));\n      result[result_index++]=(byte)(0x80 | (c & 0x3f));\n    }\n  }\n  return result;\n}"}
{"ids": "48933", "raw_code": "public void pln(Object o) throws IOException {\n  p(o.toString());\n  pln();\n}"}
{"ids": "9441", "raw_code": "public static double expm1(double value){\n  if (USE_JDK_MATH) {\n    return STRICT_MATH ? StrictMath.expm1(value) : Math.expm1(value);\n  }\n  if (Math.abs(value) < EXP_LO_DISTANCE_TO_ZERO) {\n    int i=(int)(value * EXP_LO_INDEXING);\n    double delta=value - i * (1.0 / EXP_LO_INDEXING);\n    return expLoPosTab[i + EXP_LO_TAB_MID_INDEX] * (expLoNegTab[i + EXP_LO_TAB_MID_INDEX] + delta * (1 + delta * (1.0 / 2 + delta * (1.0 / 6 + delta * (1.0 / 24 + delta * (1.0 / 120))))));\n  }\n else {\n    return FastMath.exp(value) - 1;\n  }\n}"}
{"ids": "73950", "raw_code": "public void deleteConditional(Conditional c){\n  deregister(c);\n}"}
{"ids": "9054", "raw_code": "public static void parseModelToContentValues(Object model,ContentValues contentValues){\n  if (contentValues.size() > 0)   contentValues.clear();\n  Class<?> clazz=model.getClass();\n  Field[] fields=clazz.getDeclaredFields();\n  Class<?> fieldType=null;\n  Object fieldVal=null;\n  for (  Field field : fields) {\n    try {\n      if (field.isAccessible() == false)       field.setAccessible(true);\n      Column column=field.getAnnotation(Column.class);\n      fieldType=field.getType();\n      fieldVal=field.get(model);\n      if (column == null || fieldVal == null)       continue;\n      if (fieldType.equals(int.class)) {\n        contentValues.put(column.name(),field.getInt(model));\n      }\n else       if (fieldType.equals(Integer.class)) {\n        contentValues.put(column.name(),(Integer)field.get(model));\n      }\n else       if (fieldType.equals(short.class)) {\n        contentValues.put(column.name(),field.getShort(model));\n      }\n else       if (fieldType.equals(Short.class)) {\n        contentValues.put(column.name(),(Short)field.get(model));\n      }\n else       if (fieldType.equals(long.class)) {\n        contentValues.put(column.name(),field.getLong(model));\n      }\n else       if (fieldType.equals(Long.class)) {\n        contentValues.put(column.name(),(Long)field.get(model));\n      }\n else       if (fieldType.equals(float.class)) {\n        contentValues.put(column.name(),field.getFloat(model));\n      }\n else       if (fieldType.equals(Float.class)) {\n        contentValues.put(column.name(),(Float)field.get(model));\n      }\n else       if (fieldType.equals(double.class)) {\n        contentValues.put(column.name(),field.getDouble(model));\n      }\n else       if (fieldType.equals(Double.class)) {\n        contentValues.put(column.name(),(Double)field.get(model));\n      }\n else       if (fieldType.equals(boolean.class)) {\n        if (field.getBoolean(model) == true) {\n          contentValues.put(column.name(),\"1\");\n        }\n else {\n          contentValues.put(column.name(),\"0\");\n        }\n      }\n else       if (fieldType.equals(Boolean.class)) {\n        if ((Boolean)field.get(model) == true) {\n          contentValues.put(column.name(),\"1\");\n        }\n else {\n          contentValues.put(column.name(),\"0\");\n        }\n      }\n else       if (fieldType.equals(String.class)) {\n        contentValues.put(column.name(),(String)field.get(model));\n      }\n else       if (fieldType.equals(byte[].class)) {\n        contentValues.put(column.name(),(byte[])field.get(model));\n      }\n else       if (fieldType.equals(Date.class)) {\n        Date date=(Date)field.get(model);\n        contentValues.put(column.name(),DateUtils.formatDate2Str(date));\n      }\n    }\n catch (    IllegalArgumentException e) {\n      e.printStackTrace();\n    }\ncatch (    IllegalAccessException e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"ids": "41062", "raw_code": "private void addBlockToWorklist(SsaBasicBlock ssaBlock){\n  if (!executableBlocks.get(ssaBlock.getIndex())) {\n    cfgWorklist.add(ssaBlock);\n    executableBlocks.set(ssaBlock.getIndex());\n  }\n else {\n    cfgPhiWorklist.add(ssaBlock);\n  }\n}"}
{"ids": "70448", "raw_code": "private static boolean is32BitJvm(){\n  Integer bits=Integer.getInteger(\"sun.arch.data.model\");\n  return bits != null && bits == 32;\n}"}
{"ids": "64848", "raw_code": "public float angle(){\n  return (float)Math.atan2(y(),x());\n}"}
{"ids": "36295", "raw_code": "public static String formatNumber(double value,int numberOfDigits,boolean groupingCharacters){\n  if (Double.isNaN(value)) {\n    return \"?\";\n  }\n  int numberDigits=numberOfDigits;\n  if (numberDigits < 0) {\n    numberDigits=numberOfFractionDigits;\n  }\n  NUMBER_FORMAT.setMinimumFractionDigits(numberDigits);\n  NUMBER_FORMAT.setMaximumFractionDigits(numberDigits);\n  NUMBER_FORMAT.setGroupingUsed(groupingCharacters);\n  return NUMBER_FORMAT.format(value);\n}"}
{"ids": "6470", "raw_code": "private JPanel createLegendPanel(JPanel basePanel){\n  final JPanel panel;\n  if (basePanel != null) {\n    basePanel.removeAll();\n    basePanel.setLayout(new GridBagLayout());\n    panel=basePanel;\n  }\n else {\n    panel=new JPanel(new GridBagLayout());\n  }\n  panel.setBorder(BorderFactory.createTitledBorder(I18n.tr(\"Legend\")));\n  GridBagConstraints gbc=new GridBagConstraints();\n  gbc.anchor=GridBagConstraints.WEST;\n  gbc.insets=new Insets(0,4,0,6);\n  JCheckBox checkBox=new JCheckBox();\n  checkBox.setSelected(true);\n  panel.add(createIconLabel(checkBox),gbc);\n  MultiLineLabel label=new MultiLineLabel(I18n.tr(\"Folder and subfolders are included in the Library.\"),true);\n  GridBagConstraints labelGbc=new GridBagConstraints();\n  labelGbc.anchor=GridBagConstraints.WEST;\n  labelGbc.fill=GridBagConstraints.HORIZONTAL;\n  labelGbc.gridwidth=GridBagConstraints.REMAINDER;\n  labelGbc.gridx=1;\n  labelGbc.weightx=1;\n  panel.add(label,labelGbc);\n  checkBox.setSelected(false);\n  gbc.gridy=1;\n  panel.add(createIconLabel(checkBox),gbc);\n  label=new MultiLineLabel(I18n.tr(\"Folder is not included and no subfolders are included in the Library.\"),true);\n  labelGbc.gridy=1;\n  panel.add(label,labelGbc);\n  checkBox.setIcon(partiallyIncludedIcon);\n  gbc.gridy=2;\n  gbc.insets=new Insets(0,6,0,0);\n  panel.add(createIconLabel(checkBox),gbc);\n  label=new MultiLineLabel(I18n.tr(\"Folder\\'s files and some subfolders are included in the Library.\"),true);\n  labelGbc.gridy=2;\n  gbc.insets=null;\n  panel.add(label,labelGbc);\n  return panel;\n}"}
{"ids": "32151", "raw_code": "private static boolean isTrashId(IgniteUuid id){\n  if (id == null)   return false;\n  UUID gid=id.globalId();\n  return id.localId() == 0 && gid.getMostSignificantBits() == 0 && gid.getLeastSignificantBits() > 0 && gid.getLeastSignificantBits() <= TRASH_CONCURRENCY;\n}"}
{"ids": "16137", "raw_code": "private void onTimeElementEnd() throws SAXException {\n  try {\n    timeMs=XML_DATE_TIME_FORMAT.parseMillis(content.trim());\n  }\n catch (  IllegalArgumentException e) {\n    throw new SAXException(createErrorMessage(\"Unable to parse time: \" + content),e);\n  }\n}"}
{"ids": "38603", "raw_code": "public void addChangeListener(ChangeListener l){\n  m_ChangeListeners.add(l);\n}"}
{"ids": "63179", "raw_code": "public static boolean isClassPresent(String fullyQualifiedClassName){\n  try {\n    Class.forName(fullyQualifiedClassName);\n    return true;\n  }\n catch (  ClassNotFoundException e) {\n    return false;\n  }\n}"}
{"ids": "69835", "raw_code": "void unlink(Node<E> p,Node<E> trail){\n  p.setValue(null);\n  trail.next=p.next;\n  if (last == p)   last=trail;\n  if (count.getAndDecrement() == capacity)   notFull.signal();\n}"}
{"ids": "57309", "raw_code": "@TargetApi(Build.VERSION_CODES.JELLY_BEAN) private int queueInputBuffer(MediaCodec codec,ByteBuffer[] inputBuffers,int index,SpeechRecord speechRecord){\n  if (speechRecord == null || speechRecord.getRecordingState() != SpeechRecord.RECORDSTATE_RECORDING) {\n    return -1;\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n    ByteBuffer inputBuffer=inputBuffers[index];\n    inputBuffer.clear();\n    int size=inputBuffer.limit();\n    byte[] buffer=new byte[size];\n    int status=read(speechRecord,buffer);\n    if (status < 0) {\n      handleError(\"status = \" + status);\n      return -1;\n    }\n    inputBuffer.put(buffer);\n    codec.queueInputBuffer(index,0,size,0,0);\n    return size;\n  }\n  return -1;\n}"}
{"ids": "3411", "raw_code": "@Override public final void sample(){\n  long count=_count.getAndSet(0);\n  long time=_time.getAndSet(0);\n  if (count == 0)   _value=0;\n else   _value=time / (double)count;\n}"}
{"ids": "30228", "raw_code": "protected void validateProperties(final Object entity,final EntityDataModel edm) throws ODataException {\n  final Type type=edm.getType(entity.getClass());\n  if (!(type instanceof StructuredType)) {\n    return;\n  }\n  visitProperties(edm,(StructuredType)type,null);\n}"}
{"ids": "928", "raw_code": "public static String formatNumber(float number,int digitCount,boolean separateThousands,char separateChar){\n  char[] out=new char[35];\n  boolean neg=false;\n  if (number == 0) {\n    return \"0\";\n  }\n  boolean zero=false;\n  if (number < 1 && number > -1) {\n    zero=true;\n  }\n  if (number < 0) {\n    neg=true;\n    number=-number;\n  }\n  if (digitCount > POW_10.length) {\n    digitCount=POW_10.length - 1;\n  }\n  number*=POW_10[digitCount];\n  long lval=Math.round(number);\n  int ind=out.length - 1;\n  int charCount=0;\n  boolean decimalPointAdded=false;\n  while (lval != 0 || charCount < (digitCount + 1)) {\n    int digit=(int)(lval % 10);\n    lval=lval / 10;\n    out[ind--]=(char)(digit + '0');\n    charCount++;\n    if (charCount == digitCount) {\n      out[ind--]=',';\n      charCount++;\n      decimalPointAdded=true;\n    }\n else     if (separateThousands && lval != 0 && charCount > digitCount) {\n      if (decimalPointAdded) {\n        if ((charCount - digitCount) % 4 == 0) {\n          out[ind--]=separateChar;\n          charCount++;\n        }\n      }\n else {\n        if ((charCount - digitCount) % 4 == 3) {\n          out[ind--]=separateChar;\n          charCount++;\n        }\n      }\n    }\n  }\n  if (zero) {\n    out[ind--]='0';\n    charCount+=1;\n  }\n  if (neg) {\n    out[ind--]='-';\n    charCount+=1;\n  }\n  int start=out.length - charCount;\n  return String.valueOf(out,start,out.length - start);\n}"}
{"ids": "68274", "raw_code": "static AdbResponse readAdbResponse(SocketChannel chan,boolean readDiagString) throws TimeoutException, IOException {\n  AdbResponse resp=new AdbResponse();\n  byte[] reply=new byte[4];\n  read(chan,reply);\n  if (isOkay(reply)) {\n    resp.okay=true;\n  }\n else {\n    readDiagString=true;\n    resp.okay=false;\n  }\n  try {\n    while (readDiagString) {\n      byte[] lenBuf=new byte[4];\n      read(chan,lenBuf);\n      String lenStr=replyToString(lenBuf);\n      int len;\n      try {\n        len=Integer.parseInt(lenStr,16);\n      }\n catch (      NumberFormatException nfe) {\n        Log.w(\"ddms\",\"Expected digits, got '\" + lenStr + \"': \"+ lenBuf[0]+ \" \"+ lenBuf[1]+ \" \"+ lenBuf[2]+ \" \"+ lenBuf[3]);\n        Log.w(\"ddms\",\"reply was \" + replyToString(reply));\n        break;\n      }\n      byte[] msg=new byte[len];\n      read(chan,msg);\n      resp.message=replyToString(msg);\n      Log.v(\"ddms\",\"Got reply '\" + replyToString(reply) + \"', diag='\"+ resp.message+ \"'\");\n      break;\n    }\n  }\n catch (  Exception e) {\n  }\n  return resp;\n}"}
{"ids": "11647", "raw_code": "public void removeMouseMode(String id){\n  for (  MapMouseMode med : mouseModes) {\n    if (id.equals(med.getID())) {\n      removeMouseMode(med);\n      break;\n    }\n  }\n}"}
{"ids": "78244", "raw_code": "private Boolean filterExistingItems(List<PostItem> postItems,PostItem item){\n  if (postItems.contains(item)) {\n    int i=postItems.indexOf(item);\n    postItems.remove(i);\n    postItems.add(i,item);\n    return false;\n  }\n  return true;\n}"}
{"ids": "35208", "raw_code": "DateRange buildShiftedRange(DateRange rawRange,long cadence,long now){\n  if (rawRange.getStart() > now) {\n    throw new IllegalArgumentException(\"start is greater than now\");\n  }\n  final DateRange rounded=rawRange.rounded(cadence);\n  final long nowDelta=now - rounded.getEnd();\n  if (nowDelta > SHIFT_TOLERANCE) {\n    return rounded;\n  }\n  final long diff=Math.abs(Math.min(nowDelta,0)) + SHIFT_TOLERANCE;\n  return rounded.shift(-toleranceShiftPeriod(diff,cadence));\n}"}
{"ids": "8277", "raw_code": "public static void upto(Date self,Date to,Closure closure){\n  if (self.compareTo(to) <= 0) {\n    for (Date i=(Date)self.clone(); i.compareTo(to) <= 0; i=next(i)) {\n      closure.call(i);\n    }\n  }\n else   throw new GroovyRuntimeException(\"The argument (\" + to + \") to upto() cannot be earlier than the value (\"+ self+ \") it's called on.\");\n}"}
{"ids": "35327", "raw_code": "public InferenceContext(N4JSTypeSystem ts,TypeSystemHelper tsh,CancelIndicator cancelIndicator,RuleEnvironment G,InferenceVariable... inferenceVariables){\n  Objects.requireNonNull(ts);\n  Objects.requireNonNull(tsh);\n  Objects.requireNonNull(cancelIndicator);\n  Objects.requireNonNull(G);\n  this.ts=ts;\n  this.tsh=tsh;\n  this.cancelIndicator=cancelIndicator;\n  this.G=G;\n  addInferenceVariables(false,inferenceVariables);\n  this.reducer=new Reducer(this,G,ts,tsh);\n  this.currentBounds=new BoundSet(this,G,ts);\n}"}
{"ids": "2010", "raw_code": "@Override public void run() throws InterruptedException, CameraAccessException, CameraCaptureSessionClosedException, ResourceAcquisitionFailedException {\n  FrameServer.Session session=mFrameServer.tryCreateExclusiveSession();\n  if (session == null) {\n    return;\n  }\n  try {\n    AFTriggerResult afScanResult=new AFTriggerResult();\n    RequestBuilder idleBuilder=createAFIdleRequest(null);\n    session.submitRequest(Arrays.asList(idleBuilder.build()),FrameServer.RequestType.REPEATING);\n    RequestBuilder cancelBuilder=createAFCancelRequest(null);\n    session.submitRequest(Arrays.asList(cancelBuilder.build()),FrameServer.RequestType.NON_REPEATING);\n    idleBuilder=createAFIdleRequest(afScanResult);\n    session.submitRequest(Arrays.asList(idleBuilder.build()),FrameServer.RequestType.REPEATING);\n    RequestBuilder triggerBuilder=createAFTriggerRequest(afScanResult);\n    session.submitRequest(Arrays.asList(triggerBuilder.build()),FrameServer.RequestType.NON_REPEATING);\n    afScanResult.get();\n  }\n  finally {\n    session.close();\n  }\n}"}
{"ids": "52113", "raw_code": "protected List<Node> createDiscreteVariableList(DiscreteVariableAnalysis variableAnalysis){\n  List<Node> nodes=new ArrayList<>(variableAnalysis.getNumOfCols());\n  DiscreteVarInfo[] variables=variableAnalysis.getDiscreteVarInfos();\n  for (  DiscreteVarInfo variable : variables) {\n    if (variable != null) {\n      nodes.add(new DiscreteVariable(variable.getName(),variable.getCategories()));\n    }\n  }\n  return nodes;\n}"}
{"ids": "70467", "raw_code": "public synchronized void removeSeries(XYSeries series){\n  mSeries.remove(series);\n}"}
{"ids": "66573", "raw_code": "private void synchronizeTables(){\n  resetDBObjects(DBObject_Table.class);\n  s_logger.log(Level.CONFIG,\"\");\n  s_logger.log(Level.CONFIG,\"synchronizeTables\",new Object[]{m_objectTypes,m_direction});\n  m_counterDrp=new Integer(0);\n  m_counterAdd=new Integer(0);\n  m_counterUpd=new Integer(0);\n  m_totalDrp=new Integer(0);\n  m_totalAdd=new Integer(0);\n  m_totalUpd=new Integer(0);\n  for (Iterator<String> tableIterator=m_objectList.iterator(); tableIterator.hasNext(); ) {\n    String key=tableIterator.next();\n    DBObject sourceObj=m_sourceMap.get(key);\n    DBObject targetObj=m_targetMap.get(key);\n    if (targetObj != null && sourceObj == null) {\n      if (targetObj.getCustomizationLevel() == s_parameters.CUSTOMNONE) {\n        if (targetObj.drop())         m_counterDrp=new Integer(m_counterDrp.intValue() + 1);\n        m_totalDrp=new Integer(m_totalDrp.intValue() + 1);\n      }\n else {\n        s_logger.log(Level.WARNING,\"notDroppingCustomizedTable\",new Object[]{m_objectType,targetObj.getName()});\n      }\n    }\n    if (targetObj != null && sourceObj != null) {\n      if (targetObj.update(sourceObj))       m_counterUpd=new Integer(m_counterUpd.intValue() + 1);\n      m_totalUpd=new Integer(m_totalUpd.intValue() + 1);\n    }\n    if (targetObj == null && sourceObj != null) {\n      if (sourceObj.create(m_target))       m_counterAdd=new Integer(m_counterAdd.intValue() + 1);\n      m_totalAdd=new Integer(m_totalAdd.intValue() + 1);\n    }\n  }\n  logResults();\n}"}
{"ids": "21169", "raw_code": "public void remoteRestartCoordinator(String nodeId,String type) throws LocalRepositoryException {\n  final String prefix=String.format(\"restart(): type=%s on %s\",type,nodeId);\n  _log.debug(prefix);\n  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_REMOTE_SYSTOOL,nodeId,_SYSTOOL_RESTART_COORDINATOR,type};\n  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);\n  checkFailure(result,prefix);\n}"}
{"ids": "45761", "raw_code": "private static String intToString(int value,int digit){\n  StringBuilder stringBuilder=new StringBuilder(digit);\n  stringBuilder.append(Integer.toString(value));\n  while (stringBuilder.length() < digit) {\n    stringBuilder.insert(0,\"0\");\n  }\n  return stringBuilder.toString();\n}"}
{"ids": "29233", "raw_code": "void add(int n){\n  if (v == null) {\n    v=new int[INIT_SIZE];\n    v[0]=n;\n    len=1;\n    return;\n  }\n  if (len == v.length) {\n    int[] newv=new int[len * 2];\n    System.arraycopy(v,0,newv,0,len);\n    v=newv;\n  }\n  if (n > v[len - 1]) {\n    v[len++]=n;\n    return;\n  }\n  int i=0;\n  for (; i < len; i++) {\n    if (n <= v[i]) {\n      if (n == v[i])       return;\n      break;\n    }\n  }\n  for (int j=len; j >= i; j--)   v[j + 1]=v[j];\n  v[i]=n;\n  ++len;\n}"}
{"ids": "8305", "raw_code": "public void correctNullReceiver(){\n  if (args[0] != null)   return;\n  handle=handle.bindTo(NullObject.getNullObject());\n  handle=MethodHandles.dropArguments(handle,0,targetType.parameterType(0));\n  if (LOG_ENABLED)   LOG.info(\"binding null object receiver and dropping old receiver\");\n}"}
{"ids": "86819", "raw_code": "public static boolean isPairedEndDirectory(final File dir){\n  if (dir == null || !dir.exists() || !dir.isDirectory()) {\n    return false;\n  }\n  final File lDir=new File(dir,\"left\");\n  final File rDir=new File(dir,\"right\");\n  return lDir.exists() && rDir.exists() && lDir.isDirectory()&& rDir.isDirectory();\n}"}
{"ids": "31788", "raw_code": "@SuppressWarnings(\"unchecked\") private void checkClassNotFound() throws Exception {\n  initGar=false;\n  try {\n    Ignite ignite1=startGrid(1);\n    Ignite ignite2=startGrid(2);\n    Class task=extLdr.loadClass(TASK_NAME);\n    try {\n      ignite1.compute().execute(task,ignite2.cluster().localNode().id());\n      assert false;\n    }\n catch (    IgniteException e) {\n      info(\"Received expected exception: \" + e);\n    }\n  }\n  finally {\n    stopGrid(1);\n    stopGrid(2);\n  }\n}"}
{"ids": "74317", "raw_code": "public String dropEngine(Engine engine){\n  StringBuilder builder=new StringBuilder();\n  for (  String attribute : Setup.getDropEngineMessageFormat()) {\n    builder.append(getEngineAttribute(engine,attribute,!PICKUP));\n  }\n  return builder.toString();\n}"}
{"ids": "83790", "raw_code": "public Iterator<JsonElement> iterator(){\n  return elements.iterator();\n}"}
{"ids": "52297", "raw_code": "protected void popWriteContext(){\n  writeContext_=writeContextStack_.pop();\n}"}
{"ids": "44", "raw_code": "public long calculateEndTime(){\n  if (endTime == 0) {\n    return System.currentTimeMillis();\n  }\n else   if (endTime < 0) {\n    return System.currentTimeMillis() - endTime;\n  }\n  return endTime;\n}"}
{"ids": "9043", "raw_code": "protected String extractAlternateOpenQuote(String token){\n  return null;\n}"}
{"ids": "14677", "raw_code": "private boolean removeIndexEntry(ServiceType resourceType,String resourceName,String policyName) throws PolicyException {\n  ResourceIndex resourceIndex=(ResourceIndex)resourceIndices.get(resourceType.getName());\n  if (resourceIndex == null) {\n    resourceIndex=refreshResourceIndexFromDataStore(resourceType);\n  }\n  return resourceIndex.removeIndexEntry(resourceName,policyName);\n}"}
{"ids": "6855", "raw_code": "public static TextBlock parseTextBlock(ParseContext parseContext){\n  return TextBlockSectionParser.parseTextBlock(parseContext);\n}"}
{"ids": "26955", "raw_code": "public final static boolean inLongRange(char[] digitChars,int offset,int len,boolean negative){\n  String cmpStr=negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;\n  int cmpLen=cmpStr.length();\n  if (len < cmpLen)   return true;\n  if (len > cmpLen)   return false;\n  for (int i=0; i < cmpLen; ++i) {\n    if (digitChars[offset + i] > cmpStr.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "37216", "raw_code": "public static Collection<DebuggerException> mergeExceptionsSettings(final DebugTargetSettings target,final Collection<DebuggerException> exceptions,final int debuggerId) throws CouldntLoadDataException {\n  final Map<Long,DebuggerException> exceptionsMap=getExceptionsMap(exceptions);\n  for (  final DebuggerException dbgException : exceptions) {\n    final String setting=target.readSetting(DebuggerException.getSettingKey(dbgException,debuggerId));\n    if (setting != null) {\n      final DebuggerExceptionHandlingAction handlingAction=DebuggerExceptionHandlingAction.convertToHandlingAction(Integer.valueOf(setting));\n      final DebuggerException newException=new DebuggerException(dbgException.getExceptionName(),dbgException.getExceptionCode(),handlingAction);\n      exceptionsMap.put(dbgException.getExceptionCode(),newException);\n    }\n  }\n  return exceptionsMap.values();\n}"}
{"ids": "22097", "raw_code": "public void verifyAnnotation(String methodName,String annotationName) throws Exception {\n  Class clazz=Class.forName(className);\n  Method method=clazz.getDeclaredMethod(methodName);\n  Class annotationClazz=Class.forName(annotationName);\n  java.lang.annotation.Annotation annotation=method.getAnnotation(annotationClazz);\n  Assert.assertNotNull(annotation);\n}"}
{"ids": "64951", "raw_code": "public PublisherAmb<T> ambAdditionalSource(Publisher<? extends T> source){\n  if (array != null) {\n    int n=array.length;\n    @SuppressWarnings(\"unchecked\") Publisher<? extends T>[] newArray=new Publisher[n + 1];\n    System.arraycopy(array,0,newArray,0,n);\n    newArray[n]=source;\n    return new PublisherAmb<>(newArray);\n  }\n  return null;\n}"}
{"ids": "13881", "raw_code": "public void beginDisplay(DisplayEvent event) throws ModelControlException {\n  super.beginDisplay(event);\n  String siteName=(String)getPageSessionAttribute(PG_ATTR_SITE_NAME);\n  ServerSiteModel model=(ServerSiteModel)getModel();\n  ptModel.setPageTitleText(model.getEditSitePageTitle(siteName));\n  try {\n    setDisplayFieldValue(TF_URL,model.getSitePrimaryURL(siteName));\n    getFailoverURLs(siteName,model);\n    getServers(siteName,model);\n  }\n catch (  AMConsoleException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());\n  }\n}"}
{"ids": "46742", "raw_code": "public boolean add(AccessibleState state){\n  if (states == null) {\n    states=new Vector();\n  }\n  if (!states.contains(state)) {\n    states.addElement(state);\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "76477", "raw_code": "public static final String readFile(File file) throws IOException {\n  BufferedInputStream in=null;\n  try {\n    in=new BufferedInputStream(new FileInputStream(file));\n    SimpleByteBuffer buffer=new SimpleByteBuffer();\n    byte[] buf=new byte[1024];\n    int len;\n    while ((len=in.read(buf)) != -1) {\n      buffer.put(buf,len);\n    }\n    return new String(buffer.buffer,0,buffer.write);\n  }\n  finally {\n    if (null != in) {\n      in.close();\n    }\n  }\n}"}
{"ids": "86332", "raw_code": "void addDecimalPoint(){\n  this.displayMode=DISPLAY_MODE.INPUT;\n  if (this.clearOnNextDigit) {\n    setDisplayString(EMPTY_STRING);\n  }\n  final String inputString=getDisplayString();\n  if (inputString.indexOf(DOT_CHARACTER) < 0) {\n    setDisplayString(inputString + DOT_CHARACTER);\n  }\n}"}
{"ids": "61433", "raw_code": "public void close() throws java.io.IOException {\n  m_os.close();\n}"}
{"ids": "34679", "raw_code": "void show(){\n  if (mIsVisible)   return;\n  mIsVisible=true;\n  mHeightPx=Math.round(mDefaultHeightPx);\n  invalidate();\n}"}
{"ids": "21440", "raw_code": "public void recordMirrorOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){\n  try {\n    boolean opStatus=(Operation.Status.ready == status) ? true : false;\n    String evType;\n    evType=opType.getEvType(opStatus);\n    String evDesc=opType.getDescription();\n    String opStage=AuditLogManager.AUDITOP_END;\n    _logger.info(\"opType: {} detail: {}\",opType.toString(),evType.toString() + ':' + evDesc);\n    recordBourneMirrorEvent(dbClient,getId(),evType,status,evDesc);\nswitch (opType) {\ncase CREATE_FILE_MIRROR:\ncase START_FILE_MIRROR:\ncase SUSPEND_FILE_MIRROR:\ncase DETACH_FILE_MIRROR:\ncase PAUSE_FILE_MIRROR:\ncase RESUME_FILE_MIRROR:\ncase FAILOVER_FILE_MIRROR:\ncase STOP_FILE_MIRROR:\ncase FAILBACK_FILE_MIRROR:\ncase RESYNC_FILE_MIRROR:\ncase REFRESH_FILE_MIRROR:\ncase MODIFY_FILE_MIRROR_RPO:\n      auditFile(dbClient,opType,opStatus,opStage,extParam);\n    break;\ndefault :\n  _logger.error(\"unrecognized Mirror operation type\");\n}\n}\n catch (Exception e) {\n_logger.error(\"Failed to record Mirror operation {}, err: {}\",opType.toString(),e);\n}\n}"}
{"ids": "7032", "raw_code": "private void cancelTakeImage(){\n  mShootedPicturePath=null;\n  mSelectedGalleryItemsList.clear();\n  VectorApp.setSavedCameraImagePreview(null);\n  startCameraPreview();\n  updateUiConfiguration(UI_SHOW_CAMERA_PREVIEW,IMAGE_ORIGIN_CAMERA);\n}"}
{"ids": "32507", "raw_code": "protected int nextGridToRestart(){\n  if (currRestartGridId == serverCount())   currRestartGridId=0;\n  return ++currRestartGridId;\n}"}
{"ids": "13007", "raw_code": "private void removeStaleIteratorReferences(){\n  removeStaleReferences(iteratorReferenceQueue,iterators);\n}"}
{"ids": "21271", "raw_code": "boolean destroyIGroup(boolean force){\n  NaElement elem=new NaElement(\"igroup-destroy\");\n  elem.addNewChild(\"initiator-group-name\",name);\n  elem.addNewChild(\"force\",Boolean.toString(force));\n  try {\n    server.invokeElem(elem);\n  }\n catch (  Exception e) {\n    String msg=\"Failed to destroy initiator group: \" + name;\n    log.error(msg,e);\n    throw new NetAppException(msg,e);\n  }\n  return true;\n}"}
{"ids": "68671", "raw_code": "@Override public double finiteDifferenceEpsilon(){\n  return 1e-6;\n}"}
{"ids": "4693", "raw_code": "public void remove(final HttpConnection connection){\n  log.debug(\"Removing connection \" + connection.getID());\n  connectionToAdded.remove(connection);\n}"}
{"ids": "73063", "raw_code": "public void putByte(long pos,byte val){\n  unsafe.putByte(pos + addr,val);\n}"}
{"ids": "29682", "raw_code": "public void addReference(MessagePart reference){\n  references.add(reference);\n}"}
{"ids": "38110", "raw_code": "protected boolean[] datasetIntegrity(AttrTypes attrTypes,int classType,boolean attributeMissing,boolean classMissing){\n  Estimator estimator=null;\n  print(\"estimator doesn't alter original datasets\");\n  printAttributeSummary(attrTypes,classType);\n  print(\"...\");\n  int numTrain=getNumInstances();\n  getNumInstances();\n  int numClasses=2, missingLevel=100;\n  boolean[] result=new boolean[2];\n  Instances train=null;\n  boolean built=false;\n  try {\n    train=makeTestDataset(42,numTrain,1,attrTypes,numClasses,classType);\n    int attrIndex=0;\n    if (missingLevel > 0) {\n      addMissing(train,missingLevel,attributeMissing,classMissing,attrIndex);\n    }\n    estimator=Estimator.makeCopies(getEstimator(),1)[0];\n  }\n catch (  Exception ex) {\n    throw new Error(\"Error setting up for tests: \" + ex.getMessage());\n  }\n  try {\n    Instances trainCopy=new Instances(train);\n    int attrIndex=0;\n    estimator.addValues(trainCopy,attrIndex);\n    compareDatasets(train,trainCopy);\n    built=true;\n    println(\"yes\");\n    result[0]=true;\n  }\n catch (  Exception ex) {\n    println(\"no\");\n    result[0]=false;\n    if (m_Debug) {\n      println(\"\\n=== Full Report ===\");\n      print(\"Problem during\");\n      if (built) {\n        print(\" testing\");\n      }\n else {\n        print(\" training\");\n      }\n      println(\": \" + ex.getMessage() + \"\\n\");\n      println(\"Here are the datasets:\\n\");\n      println(\"=== Train Dataset ===\\n\" + train.toString() + \"\\n\");\n    }\n  }\n  return result;\n}"}
{"ids": "13185", "raw_code": "protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  if (str.charAt(0) != '-' || str.charAt(1) != '-' || str.charAt(2) != '-') {\n    throw new SchemaDateTimeException(\"Error in day parsing\");\n  }\n  date.year=YEAR;\n  date.month=MONTH;\n  date.day=parseInt(str,3,5);\n  if (DAY_SIZE < len) {\n    if (!isNextCharUTCSign(str,DAY_SIZE,len)) {\n      throw new SchemaDateTimeException(\"Error in day parsing\");\n    }\n else {\n      getTimeZone(str,date,DAY_SIZE,len);\n    }\n  }\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n  }\n  date.position=2;\n  return date;\n}"}
{"ids": "33350", "raw_code": "public static Map<String,Set<String>> parse(final URI uri,boolean decodeQueryParam){\n  Map<String,Set<String>> result=Collections.emptyMap();\n  final String query=uri.getRawQuery();\n  if (query != null && query.length() > 0) {\n    result=new HashMap<>();\n    parse(result,new Scanner(query),null,decodeQueryParam);\n  }\n  return result;\n}"}
{"ids": "20479", "raw_code": "private void updatePeriod(){\n  for (int i=0; i < mConversion.size(); i++) {\n    int dateType=mConversion.keyAt(i);\n    TimePeriodSlider slider=mTimePeriodSliders.get(dateType);\n    slider.setValue(mPeriod.get(mConversion.valueAt(i)));\n  }\n  mTime.setText(getFormattedPeriod());\n  mDuration=mPeriod.toStandardDuration();\n  doValidation();\n}"}
{"ids": "28679", "raw_code": "public long start_brk(){\n  return Long.parseLong(fields[46]);\n}"}
{"ids": "16018", "raw_code": "public static void validateParticipantIdsEqual(String expectedParticipantId,String actualParticipantId) throws CryptoException {\n  if (!expectedParticipantId.equals(actualParticipantId)) {\n    throw new CryptoException(\"Received payload from incorrect partner (\" + actualParticipantId + \"). Expected to receive payload from \"+ expectedParticipantId+ \".\");\n  }\n}"}
{"ids": "36724", "raw_code": "protected void encodeFields(mxCodec enc,Object obj,Node node){\n  Class type=obj.getClass();\n  while (type != null) {\n    Field[] fields=type.getDeclaredFields();\n    for (int i=0; i < fields.length; i++) {\n      Field f=fields[i];\n      if ((f.getModifiers() & Modifier.TRANSIENT) != Modifier.TRANSIENT) {\n        String fieldname=f.getName();\n        Object value=getFieldValue(obj,fieldname);\n        encodeValue(enc,obj,fieldname,value,node);\n      }\n    }\n    type=type.getSuperclass();\n  }\n}"}
{"ids": "11602", "raw_code": "public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){\n  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);\n}"}
{"ids": "15510", "raw_code": "private void logMissingResource(FacesContext ctx,String resourceId,Throwable t){\n  Level level;\n  if (!ctx.isProjectStage(ProjectStage.Production)) {\n    level=Level.WARNING;\n  }\n else {\n    level=((t != null) ? Level.WARNING : Level.FINE);\n  }\n  if (LOGGER.isLoggable(level)) {\n    LOGGER.log(level,\"jsf.application.resource.unable_to_serve\",new Object[]{resourceId});\n    if (t != null) {\n      LOGGER.log(level,\"\",t);\n    }\n  }\n}"}
{"ids": "52389", "raw_code": "private void appendAliasedColumn(StringBuilder sb,String colName,String tAlias){\n  if (tAlias != null) {\n    sb.append(tAlias);\n    sb.append(\".\");\n  }\n  sb.append(\"\\\"\");\n  sb.append(colName);\n  sb.append(\"\\\"\");\n}"}
{"ids": "75350", "raw_code": "private MidiEvent createScheduledEvent(byte[] msg,int offset,int count,long timestamp){\n  MidiEvent event;\n  if (count > POOL_EVENT_SIZE) {\n    event=new MidiEvent(msg,offset,count,timestamp);\n  }\n else {\n    event=(MidiEvent)removeEventfromPool();\n    if (event == null) {\n      event=new MidiEvent(POOL_EVENT_SIZE);\n    }\n    System.arraycopy(msg,offset,event.data,0,count);\n    event.count=count;\n    event.setTimestamp(timestamp);\n  }\n  return event;\n}"}
{"ids": "61813", "raw_code": "public static byte[] gzip(String input){\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  GZIPOutputStream gzos=null;\n  try {\n    gzos=new GZIPOutputStream(baos);\n    gzos.write(input.getBytes(\"UTF-8\"));\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n finally {\n    if (gzos != null)     try {\n      gzos.close();\n    }\n catch (    IOException ignore) {\n    }\n  }\n  return baos.toByteArray();\n}"}
{"ids": "84786", "raw_code": "public static double logPdf(double x,double m,double shape){\n  double a=Math.sqrt(shape / (2.0 * Math.PI * x* x* x));\n  double b=((-shape) * (x - m) * (x - m)) / (2.0 * m * m* x);\n  return Math.log(a) + b;\n}"}
{"ids": "74400", "raw_code": "public void addEdgeConnector(){\n  numEdgeConnectors++;\n  String name=\"\";\n  boolean duplicate=true;\n  while (duplicate) {\n    name=\"EC\" + numEdgeConnectors;\n    if (finder.findPositionablePointByName(name) == null) {\n      duplicate=false;\n    }\n    if (duplicate) {\n      numEdgeConnectors++;\n    }\n  }\n  PositionablePoint o=new PositionablePoint(name,PositionablePoint.EDGE_CONNECTOR,currentPoint,this);\n  pointList.add(o);\n  setDirty(true);\n}"}
{"ids": "45682", "raw_code": "@RequestMapping(value={\"\",\"/\"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value=\"page\",defaultValue=\"0\") int startPage,@RequestParam(value=\"size\",defaultValue=\"10\") int pageSize,Principal principal){\n  RestWrapper restWrapper=null;\n  try {\n    Integer counter=workflowTypeDAO.totalRecordCount();\n    List<WorkflowType> workflowTypes=new ArrayList<WorkflowType>();\n    List<com.wipro.ats.bdre.md.dao.jpa.WorkflowType> jpaWorkflowTypes=workflowTypeDAO.list(startPage,pageSize);\n    for (    com.wipro.ats.bdre.md.dao.jpa.WorkflowType wfType : jpaWorkflowTypes) {\n      WorkflowType workflowType=new WorkflowType();\n      workflowType.setWorkflowId(wfType.getWorkflowId());\n      workflowType.setWorkflowTypeName(wfType.getWorkflowTypeName());\n      workflowType.setCounter(counter);\n      workflowTypes.add(workflowType);\n    }\n    restWrapper=new RestWrapper(workflowTypes,RestWrapper.OK);\n    LOGGER.info(\"All records listed from WorkflowType by User:\" + principal.getName());\n  }\n catch (  Exception e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\n  return restWrapper;\n}"}
{"ids": "60687", "raw_code": "public void parseForClass(GenericDeclaration genericDecl,String signature){\n  setInput(genericDecl,signature);\n  if (!eof) {\n    parseClassSignature();\n  }\n else {\n    if (genericDecl instanceof Class) {\n      Class c=(Class)genericDecl;\n      this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;\n      this.superclassType=c.getSuperclass();\n      Class<?>[] interfaces=c.getInterfaces();\n      if (interfaces.length == 0) {\n        this.interfaceTypes=ListOfTypes.EMPTY;\n      }\n else {\n        this.interfaceTypes=new ListOfTypes(interfaces);\n      }\n    }\n else {\n      this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;\n      this.superclassType=Object.class;\n      this.interfaceTypes=ListOfTypes.EMPTY;\n    }\n  }\n}"}
{"ids": "57502", "raw_code": "static boolean tryExternalUnpush(ForkJoinTask<?> t){\n  ForkJoinPool p;\n  WorkQueue[] ws;\n  WorkQueue q;\n  Submitter z;\n  ForkJoinTask<?>[] a;\n  int m, s;\n  if (t != null && (z=submitters.get()) != null && (p=commonPool) != null && (ws=p.workQueues) != null && (m=ws.length - 1) >= 0 && (q=ws[m & z.seed & SQMASK]) != null && (s=q.top) != q.base && (a=q.array) != null) {\n    long j=(((a.length - 1) & (s - 1)) << ASHIFT) + ABASE;\n    if (U.getObject(a,j) == t && U.compareAndSwapInt(q,QLOCK,0,1)) {\n      if (q.array == a && q.top == s && U.compareAndSwapObject(a,j,t,null)) {\n        q.top=s - 1;\n        q.qlock=0;\n        return true;\n      }\n      q.qlock=0;\n    }\n  }\n  return false;\n}"}
{"ids": "702", "raw_code": "public static double[] quantiles(int n,double[] values){\n  values=(double[])values.clone();\n  Arrays.sort(values);\n  double[] qtls=new double[n + 1];\n  for (int i=0; i <= n; ++i) {\n    qtls[i]=values[((values.length - 1) * i) / n];\n  }\n  return qtls;\n}"}
{"ids": "51131", "raw_code": "public QueryException(String message,int errorCode,SqlStates sqlState,Throwable cause){\n  super(message,cause);\n  this.message=message;\n  this.errorCode=errorCode;\n  this.sqlState=sqlState.getSqlState();\n}"}
{"ids": "35267", "raw_code": "private CSVData(List<CSVRecord> records){\n  this.records=Objects.requireNonNull(records);\n}"}
{"ids": "21629", "raw_code": "private Workflow.Method untagVolumesMethod(URI systemURI,List<URI> volumeURIs){\n  return new Workflow.Method(\"untagVolumes\",systemURI,volumeURIs);\n}"}
{"ids": "27067", "raw_code": "private byte[] SHA256hash(byte[] tobeHashed){\n  SHA256Digest digester=new SHA256Digest();\n  byte[] retValue=new byte[digester.getDigestSize()];\n  digester.update(tobeHashed,0,tobeHashed.length);\n  digester.doFinal(retValue,0);\n  return retValue;\n}"}
{"ids": "44721", "raw_code": "@DataProvider private static Object[][] okResourceResponses(){\n  return new Object[][]{{new Response(OK)},{new Response(FOUND)},{new Response(MOVED_PERMANENTLY)},{new Response(CREATED)}};\n}"}
{"ids": "22241", "raw_code": "public synchronized void connect(){\n  if (!_zkConnection.isStarted()) {\n    _zkConnection.start();\n  }\n  if (StringUtils.isEmpty(siteId)) {\n    generateSiteId();\n  }\n}"}
{"ids": "71396", "raw_code": "static Object convertJavaTimeToJavaSql(Object x){\n  if (x instanceof LocalDate) {\n    return Date.valueOf((LocalDate)x);\n  }\n else   if (x instanceof LocalDateTime) {\n    return Timestamp.valueOf((LocalDateTime)x);\n  }\n else   if (x instanceof LocalTime) {\n    return Time.valueOf((LocalTime)x);\n  }\n  return x;\n}"}
{"ids": "50938", "raw_code": "@NotNull private static DefaultMutableTreeNode updateTreeStructure(@NotNull DefaultMutableTreeNode treeNode,@NotNull ZipFile compressedApk){\n  long compressedSize=0;\n  ApkEntry entry=ApkEntry.fromNode(treeNode);\n  assert entry != null;\n  if (treeNode.getChildCount() > 0) {\n    for (int i=0; i < treeNode.getChildCount(); i++) {\n      DefaultMutableTreeNode childNode=updateTreeStructure((DefaultMutableTreeNode)treeNode.getChildAt(i),compressedApk);\n      compressedSize+=((ApkEntry)childNode.getUserObject()).getCompressedSize();\n    }\n  }\n else {\n    ZipEntry ze=compressedApk.getEntry(ApkFileSystem.getInstance().getRelativePath(entry.getFile()));\n    if (ze == null) {\n      compressedSize=-1;\n    }\n else {\n      compressedSize=ze.getCompressedSize();\n    }\n  }\n  entry.setCompressedSize(compressedSize);\n  return treeNode;\n}"}
{"ids": "82540", "raw_code": "public long totalMemory(){\n  return totalMemoryImpl();\n}"}
{"ids": "15628", "raw_code": "public static void scan(){\n  List<ScannerRegistration> scanners=getScannersToRun();\n  if (scanners.size() > 0) {\n    URL[] urls=getSearchURLs();\n    if (urls == null) {\n      urls=fiterLibs(ScannerURLS.getURLsForSearch());\n      scan(scanners,urls);\n    }\n else {\n      scan(scanners,urls);\n    }\n  }\n}"}
{"ids": "72775", "raw_code": "public final void turnTo(double angle){\n  angle=Geometric.clampAngleDegree(angle);\n  orientation=Geometric.clampAngleDegree(angle);\n  Geometric.rotateTo(velocity,Math.toRadians(orientation));\n}"}
{"ids": "57608", "raw_code": "void fullyLock(){\n  putLock.lock();\n  takeLock.lock();\n}"}
{"ids": "24368", "raw_code": "protected int startBridgeServer(int port,boolean notifyBySubscription) throws IOException {\n  Cache cache=getCache();\n  CacheServer bridge=cache.addCacheServer();\n  bridge.setPort(port);\n  bridge.setNotifyBySubscription(notifyBySubscription);\n  bridge.start();\n  bridgeServerPort=bridge.getPort();\n  return bridge.getPort();\n}"}
{"ids": "76175", "raw_code": "protected Object toType(Calendar value){\n  return value.getTime();\n}"}
{"ids": "75689", "raw_code": "protected F restoreLastFilter(int dialogType){\n  F result;\n  List<F> list;\n  int i;\n  result=null;\n  if (dialogType == OPEN_DIALOG)   list=getOpenFileFilters();\n else   list=getSaveFileFilters();\n  if (list.size() > 0) {\n    result=getDefaultFileFilter(dialogType);\n    setFileFilter(result);\n    if (m_LastFilter != null) {\n      for (i=0; i < list.size(); i++) {\n        if (m_Comparator.compare(list.get(i),m_LastFilter) == 0) {\n          result=(F)m_LastFilter;\n          setFileFilter(m_LastFilter);\n          break;\n        }\n      }\n    }\n  }\n  return result;\n}"}
{"ids": "13914", "raw_code": "public void handleTblDataSiteActionHrefRequest(RequestInvocationEvent event) throws ModelControlException {\n  String siteName=hexToString((String)getDisplayFieldValue(TBL_DATA_SITE_ACTION_HREF));\n  setPageSessionAttribute(SiteEditViewBean.PG_ATTR_SITE_NAME,siteName);\n  SiteEditViewBean vb=(SiteEditViewBean)getViewBean(SiteEditViewBean.class);\n  unlockPageTrail();\n  passPgSessionMap(vb);\n  vb.forwardTo(getRequestContext());\n}"}
{"ids": "39198", "raw_code": "public static void normalize(double[] doubles,double sum){\n  if (Double.isNaN(sum)) {\n    throw new IllegalArgumentException(\"Can't normalize array. Sum is NaN.\");\n  }\n  if (sum == 0) {\n    throw new IllegalArgumentException(\"Can't normalize array. Sum is zero.\");\n  }\n  for (int i=0; i < doubles.length; i++) {\n    doubles[i]/=sum;\n  }\n}"}
{"ids": "65499", "raw_code": "private void expandArray(int shardId){\n  int newNumShards=Math.max((int)Math.ceil(numShards * SHARD_GROWTH_FACTOR),shardId + 1);\n  Preconditions.checkArgument(newNumShards * shardLength < Integer.MAX_VALUE,\"Exceeded the max storage capacity for ShardedBigIntArray\");\n  int[][] newArray=new int[newNumShards][];\n  System.arraycopy(readerAccessibleInfo.array,0,newArray,0,readerAccessibleInfo.array.length);\n  readerAccessibleInfo=new ReaderAccessibleInfo(newArray);\n  numShards=newNumShards;\n}"}
{"ids": "43174", "raw_code": "protected <T>T waitForPropertyValue(String documentSelfLink,Class<T> type,String propName,Object propValue,boolean shouldMatch,AtomicInteger count) throws Throwable {\n  @SuppressWarnings(\"unchecked\") List<Object> prop=propValue instanceof List ? (List<Object>)propValue : Arrays.asList(propValue);\n  return waitForPropertyValue(documentSelfLink,type,propName,prop,shouldMatch,count);\n}"}
{"ids": "57252", "raw_code": "public static String fromIPv4AddressCollection(Collection<Integer> ipAddresses){\n  if (ipAddresses == null)   return \"null\";\n  StringBuffer sb=new StringBuffer();\n  sb.append(\"[\");\n  for (  Integer ip : ipAddresses) {\n    sb.append(fromIPv4Address(ip));\n    sb.append(\",\");\n  }\n  sb.replace(sb.length() - 1,sb.length(),\"]\");\n  return sb.toString();\n}"}
{"ids": "44310", "raw_code": "public static final String makeJavaIdentifier(String identifier){\n  StringBuilder modifiedIdentifier=new StringBuilder(identifier.length());\n  if (!Character.isJavaIdentifierStart(identifier.charAt(0))) {\n    modifiedIdentifier.append('_');\n  }\n  for (int i=0; i < identifier.length(); i++) {\n    char ch=identifier.charAt(i);\n    if (Character.isJavaIdentifierPart(ch) && ch != '_') {\n      modifiedIdentifier.append(ch);\n    }\n else     if (ch == '.') {\n      modifiedIdentifier.append('_');\n    }\n else {\n      modifiedIdentifier.append(mangleChar(ch));\n    }\n  }\n  if (isJavaKeyword(modifiedIdentifier.toString())) {\n    modifiedIdentifier.append('_');\n  }\n  return modifiedIdentifier.toString();\n}"}
{"ids": "43176", "raw_code": "public static String encrypt(String input){\n  if (encryptionService == null || input == null || input.length() == 0) {\n    return input;\n  }\n  return ENCRYPTION_PREFIX + encryptionService.encrypt(input);\n}"}
{"ids": "44802", "raw_code": "public static void createFederatedNamespace(URI namespace,ZooKeeperClient zkc) throws InterruptedException, ZooKeeperClient.ZooKeeperConnectionException, KeeperException {\n  String zkSubNamespacesPath=namespace.getPath() + \"/\" + ZNODE_SUB_NAMESPACES;\n  Utils.zkCreateFullPathOptimistic(zkc,zkSubNamespacesPath,new byte[0],zkc.getDefaultACL(),CreateMode.PERSISTENT);\n}"}
{"ids": "81090", "raw_code": "public static Executor createTaskDistributor(){\n  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,\"uil-pool-d-\"));\n}"}
{"ids": "31311", "raw_code": "public String process(){\n  while (off < count) {\n    while (off < count) {\n      char ch=text[off];\n      if (!isSpecial(ch)) {\n        break;\n      }\n      off++;\n    }\n    if (!acronym()) {\n      token();\n      number();\n    }\n  }\n  return builder.toString();\n}"}
{"ids": "1336", "raw_code": "public static String bytesToBinHex(byte[] data,int nStartPos,int nNumOfBytes){\n  StringBuilder sbuf=new StringBuilder();\n  sbuf.setLength(nNumOfBytes << 1);\n  int nPos=0;\n  for (int nI=0; nI < nNumOfBytes; nI++) {\n    sbuf.setCharAt(nPos++,HEXTAB[(data[nI + nStartPos] >> 4) & 0x0f]);\n    sbuf.setCharAt(nPos++,HEXTAB[data[nI + nStartPos] & 0x0f]);\n  }\n  return sbuf.toString();\n}"}
{"ids": "15889", "raw_code": "private static int[] mult128(int[] a,int[] b){\n  int[] result=new int[8];\n  int[] a0=new int[2];\n  System.arraycopy(a,0,a0,0,Math.min(2,a.length));\n  int[] a1=new int[2];\n  if (a.length > 2) {\n    System.arraycopy(a,2,a1,0,Math.min(2,a.length - 2));\n  }\n  int[] b0=new int[2];\n  System.arraycopy(b,0,b0,0,Math.min(2,b.length));\n  int[] b1=new int[2];\n  if (b.length > 2) {\n    System.arraycopy(b,2,b1,0,Math.min(2,b.length - 2));\n  }\n  if (a1[1] == 0 && b1[1] == 0) {\n    if (a1[0] != 0 || b1[0] != 0) {\n      int[] c=mult32(a1[0],b1[0]);\n      result[5]^=c[1];\n      result[4]^=c[0];\n      result[3]^=c[1];\n      result[2]^=c[0];\n    }\n  }\n else {\n    int[] c=mult64(a1,b1);\n    result[7]^=c[3];\n    result[6]^=c[2];\n    result[5]^=c[1] ^ c[3];\n    result[4]^=c[0] ^ c[2];\n    result[3]^=c[1];\n    result[2]^=c[0];\n  }\n  a1[0]^=a0[0];\n  a1[1]^=a0[1];\n  b1[0]^=b0[0];\n  b1[1]^=b0[1];\n  if (a1[1] == 0 && b1[1] == 0) {\n    int[] d=mult32(a1[0],b1[0]);\n    result[3]^=d[1];\n    result[2]^=d[0];\n  }\n else {\n    int[] d=mult64(a1,b1);\n    result[5]^=d[3];\n    result[4]^=d[2];\n    result[3]^=d[1];\n    result[2]^=d[0];\n  }\n  if (a0[1] == 0 && b0[1] == 0) {\n    int[] e=mult32(a0[0],b0[0]);\n    result[3]^=e[1];\n    result[2]^=e[0];\n    result[1]^=e[1];\n    result[0]^=e[0];\n  }\n else {\n    int[] e=mult64(a0,b0);\n    result[5]^=e[3];\n    result[4]^=e[2];\n    result[3]^=e[1] ^ e[3];\n    result[2]^=e[0] ^ e[2];\n    result[1]^=e[1];\n    result[0]^=e[0];\n  }\n  return result;\n}"}
{"ids": "22709", "raw_code": "public static void updateLast(){\n  ClientUtils.lastUpdate=System.currentTimeMillis();\n}"}
{"ids": "53979", "raw_code": "public ReplicaSets(Collection<ReplicaSet> rsSpecs){\n  if (rsSpecs != null) {\n    rsSpecs.forEach(null);\n  }\n  Collections.sort(nonReplicaSets);\n}"}
{"ids": "44919", "raw_code": "static private String BYTE_Max(){\n  byte tempValue=Byte.MAX_VALUE;\n  return String.valueOf(tempValue);\n}"}
{"ids": "28098", "raw_code": "protected PathNode pathNode(String pattern){\n  final String seq[]=pattern.split(\"/\");\n  final PathElt elements[]=new PathElt[seq.length];\n  PathMod mod=null;\n  for (int i=0; i < seq.length; i++) {\n    final String s=seq[i];\n    boolean inverse=s.charAt(0) == '^';\nswitch (s.charAt(s.length() - 1)) {\ncase '*':\n      mod=PathMod.ZERO_OR_MORE;\n    break;\ncase '+':\n  mod=PathMod.ONE_OR_MORE;\nbreak;\ncase '?':\nmod=PathMod.ZERO_OR_ONE;\nbreak;\n}\nString c=s.substring(inverse ? 1 : 0,s.length() - (mod != null ? 1 : 0));\nelements[i]=new PathElt(constantNode(c),inverse,mod);\n}\nreturn new PathNode(new PathAlternative(new PathSequence(elements)));\n}"}
{"ids": "4247", "raw_code": "@Override public int startupNewWorker(int priority){\n  int actualWorkersStarted=startupNewWorker(priority,null,null);\n  return actualWorkersStarted;\n}"}
{"ids": "23179", "raw_code": "public void addImplInterface(String iname){\n  implInterfaces.add(iname);\n}"}
{"ids": "43258", "raw_code": "private static synchronized boolean checkFolderPermissions(StringBuilder aStringBuilder,String aDirectory){\n  File directory=new File(aDirectory);\n  if (!directory.exists()) {\n    directory.mkdirs();\n  }\n  if (!directory.canRead()) {\n    aStringBuilder.append(\"The directory [\" + directory + \"] is not readable. \"+ \"Please check your permissions rights.\\n\");\n    return false;\n  }\n  if (!directory.canWrite()) {\n    aStringBuilder.append(\"The directory [\" + directory + \"] is not writable. \"+ \"Please check your permissions rights.\\n\");\n    return false;\n  }\n  return true;\n}"}
{"ids": "4593", "raw_code": "protected QualifiedItem[] parseQualifiedItems(final String[] arguments,final VersionSpec defaultVersion,final boolean allowVersionRange,final int startIndex){\n  Check.notNull(arguments,\"arguments\");\n  final List<QualifiedItem> items=new ArrayList<QualifiedItem>(arguments.length);\n  for (int i=startIndex; i < arguments.length; i++) {\n    final String arg=arguments[i];\n    if (!StringUtil.isNullOrEmpty(arg)) {\n      try {\n        final QualifiedItem qi=new QualifiedItem(arg,VersionControlConstants.AUTHENTICATED_USER,defaultVersion,allowVersionRange);\n        items.add(qi);\n      }\n catch (      final VersionSpecParseException e) {\n        reportWrongArgument(arg,e);\n      }\ncatch (      final LabelSpecParseException e) {\n        reportWrongArgument(arg,e);\n      }\n    }\n  }\n  return items.toArray(new QualifiedItem[items.size()]);\n}"}
{"ids": "68639", "raw_code": "public EipEditor(){\n  super();\n  initializeEditingDomain();\n}"}
{"ids": "18391", "raw_code": "public boolean deleteEntry(BasicPoolEntry entry){\n  final boolean found=freeEntries.remove(entry);\n  if (found)   numEntries--;\n  return found;\n}"}
{"ids": "23048", "raw_code": "@Deprecated public void requestContactCapabilities(ContactId contact) throws RcsServiceNotRegisteredException, RcsServiceNotAvailableException, RcsGenericException {\n  if (mApi == null) {\n    throw new RcsServiceNotAvailableException();\n  }\n  try {\n    List<ContactId> listOfContacts=new ArrayList<>();\n    listOfContacts.add(contact);\n    mApi.requestContactCapabilities2(listOfContacts);\n  }\n catch (  Exception e) {\n    RcsIllegalArgumentException.assertException(e);\n    RcsServiceNotRegisteredException.assertException(e);\n    throw new RcsGenericException(e);\n  }\n}"}
{"ids": "7116", "raw_code": "public ConversationService(final String versionDate,String username,String password){\n  this(versionDate);\n  setUsernameAndPassword(username,password);\n}"}
{"ids": "39621", "raw_code": "public CustomOptional<KinesisRecord> next() throws TransientKinesisException {\n  readMoreIfNecessary();\n  if (data.isEmpty()) {\n    return CustomOptional.absent();\n  }\n else {\n    KinesisRecord record=data.removeFirst();\n    checkpoint=checkpoint.moveAfter(record);\n    return CustomOptional.of(record);\n  }\n}"}
{"ids": "43815", "raw_code": "@Override public final synchronized void addRemoveStatements(Collection<Statement> added,Collection<Statement> removed) throws IOException {\n  MapOfListMaps<Resource,String,Statement> rsAdded=new MapOfListMaps<Resource,String,Statement>();\n  MapOfListMaps<Resource,String,Statement> rsRemoved=new MapOfListMaps<Resource,String,Statement>();\n  HashSet<Resource> resources=new HashSet<Resource>();\n  for (  Statement s : added) {\n    rsAdded.add(s.getSubject(),SearchFields.getContextID(s.getContext()),s);\n    resources.add(s.getSubject());\n  }\n  for (  Statement s : removed) {\n    rsRemoved.add(s.getSubject(),SearchFields.getContextID(s.getContext()),s);\n    resources.add(s.getSubject());\n  }\n  logger.debug(\"Removing \" + removed.size() + \" statements, adding \"+ added.size()+ \" statements\");\n  BulkUpdater updater=newBulkUpdate();\n  for (  Resource resource : resources) {\n    Map<String,List<Statement>> stmtsToRemove=rsRemoved.get(resource);\n    Map<String,List<Statement>> stmtsToAdd=rsAdded.get(resource);\n    Set<String> contextsToUpdate=new HashSet<String>(stmtsToAdd.keySet());\n    contextsToUpdate.addAll(stmtsToRemove.keySet());\n    Map<String,SearchDocument> docsByContext=new HashMap<String,SearchDocument>();\n    String resourceId=SearchFields.getResourceID(resource);\n    Iterable<? extends SearchDocument> documents=getDocuments(resourceId);\n    for (    SearchDocument doc : documents) {\n      docsByContext.put(doc.getContext(),doc);\n    }\n    for (    String contextId : contextsToUpdate) {\n      String id=SearchFields.formIdString(resourceId,contextId);\n      SearchDocument document=docsByContext.get(contextId);\n      if (document == null) {\n        document=newDocument(id,resourceId,contextId);\n        List<Statement> list=stmtsToAdd.get(contextId);\n        if (list != null) {\n          for (          Statement s : list) {\n            addProperty(s,document);\n          }\n        }\n        updater.add(document);\n        if (stmtsToRemove.containsKey(contextId))         logger.info(\"Statements are marked to be removed that should not be in the store, for resource {} and context {}. Nothing done.\",resource,contextId);\n      }\n else {\n        Map<String,Set<String>> removedOfResource=null;\n{\n          List<Statement> removedStatements=stmtsToRemove.get(contextId);\n          if (removedStatements != null && !removedStatements.isEmpty()) {\n            removedOfResource=new HashMap<String,Set<String>>();\n            for (            Statement r : removedStatements) {\n              String val=SearchFields.getLiteralPropertyValueAsString(r);\n              if (val != null) {\n                String field=SearchFields.getPropertyField(r.getPredicate());\n                Set<String> removedValues=removedOfResource.get(field);\n                if (removedValues == null) {\n                  removedValues=new HashSet<String>();\n                  removedOfResource.put(field,removedValues);\n                }\n                removedValues.add(val);\n              }\n            }\n          }\n        }\n        SearchDocument newDocument=newDocument(id,resourceId,contextId);\n        boolean mutated=copyDocument(newDocument,document,removedOfResource);\n{\n          List<Statement> addedToResource=stmtsToAdd.get(contextId);\n          String val;\n          if (addedToResource != null && !addedToResource.isEmpty()) {\n            PropertyCache propertyCache=new PropertyCache(newDocument);\n            for (            Statement s : addedToResource) {\n              val=SearchFields.getLiteralPropertyValueAsString(s);\n              if (val != null) {\n                String field=SearchFields.getPropertyField(s.getPredicate());\n                if (!propertyCache.hasProperty(field,val)) {\n                  addProperty(s,newDocument);\n                  mutated=true;\n                }\n              }\n            }\n          }\n        }\n        int nrProperties=countPropertyValues(newDocument);\n        if (nrProperties > 0) {\n          if (mutated) {\n            updater.update(newDocument);\n          }\n        }\n else {\n          updater.delete(document);\n        }\n      }\n    }\n  }\n  updater.end();\n}"}
{"ids": "76189", "raw_code": "Object toType(String value,String pattern,Locale locale){\n  Calendar calendar=toCalendar(value,pattern,locale);\n  return toType(calendar);\n}"}
{"ids": "45975", "raw_code": "private SnmpPduPacket executeSubRequest(SnmpPduPacket req,Object userData){\n  int errorStatus=SnmpDefinitions.snmpRspNoError;\n  int i;\n  if (req.type == pduSetRequestPdu) {\n    i=0;\n    for (Enumeration<SnmpSubRequestHandler> e=subs.elements(); e.hasMoreElements(); i++) {\n      SnmpSubRequestHandler sub=e.nextElement();\n      sub.setUserData(userData);\n      sub.type=pduWalkRequest;\n      sub.run();\n      sub.type=pduSetRequestPdu;\n      if (sub.getErrorStatus() != SnmpDefinitions.snmpRspNoError) {\n        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {\n          SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,\"executeSubRequest\",\"an error occurs\");\n        }\n        return newErrorResponsePdu(req,errorStatus,sub.getErrorIndex() + 1);\n      }\n    }\n  }\n  i=0;\n  for (Enumeration<SnmpSubRequestHandler> e=subs.elements(); e.hasMoreElements(); i++) {\n    SnmpSubRequestHandler sub=e.nextElement();\n    sub.setUserData(userData);\n    sub.run();\n    if (sub.getErrorStatus() != SnmpDefinitions.snmpRspNoError) {\n      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {\n        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,\"executeSubRequest\",\"an error occurs\");\n      }\n      return newErrorResponsePdu(req,errorStatus,sub.getErrorIndex() + 1);\n    }\n  }\n  return null;\n}"}
{"ids": "48957", "raw_code": "Method(MethodDoc methodDoc){\n  this.methodDoc=methodDoc;\n  exceptionTypes=methodDoc.thrownExceptions();\n  Arrays.sort(exceptionTypes,new ClassDocComparator());\n  operationString=computeOperationString();\n  nameAndDescriptor=methodDoc.name() + Util.methodDescriptorOf(methodDoc);\n  methodHash=computeMethodHash();\n}"}
{"ids": "40161", "raw_code": "public DeterministicKey(ImmutableList<ChildNumber> childNumberPath,byte[] chainCode,LazyECPoint publicAsPoint,@Nullable BigInteger priv,@Nullable DeterministicKey parent){\n  super(priv,compressPoint(checkNotNull(publicAsPoint)));\n  checkArgument(chainCode.length == 32);\n  this.parent=parent;\n  this.childNumberPath=checkNotNull(childNumberPath);\n  this.chainCode=Arrays.copyOf(chainCode,chainCode.length);\n  this.depth=parent == null ? 0 : parent.depth + 1;\n  this.parentFingerprint=(parent != null) ? parent.getFingerprint() : 0;\n}"}
{"ids": "50059", "raw_code": "private static void s_uaColSumLtGe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {\n  int agg0=sumRowSumGtLeColSumLtGe(0.0,bv,bOp);\n  out.allocateDenseBlock(true);\n  Arrays.fill(out.getDenseBlock(),0,out.getNumColumns(),agg0);\n  if (agg0 != 0.0)   out.setNonZeros(out.getNumColumns());\n  if (in.isEmptyBlock(false))   return;\n  SparseBlock sblock=in.getSparseBlock();\n  for (int j=0; j < sblock.numRows(); j++)   if (!sblock.isEmpty(j)) {\n    int apos=sblock.pos(j);\n    int alen=sblock.size(j);\n    int[] aix=sblock.indexes(j);\n    double[] avals=sblock.values(j);\n    for (int i=apos; i < apos + alen; i++) {\n      int cnt=sumRowSumGtLeColSumLtGe(avals[i],bv,bOp);\n      out.quickSetValue(0,aix[i],cnt);\n    }\n  }\n}"}
{"ids": "5947", "raw_code": "public HeldLocksGrant(BigInteger grantId){\n  this.grantId=Preconditions.checkNotNull(grantId);\n  creationDateMs=System.currentTimeMillis();\n  expirationDateMs=-1;\n  lockMap=LockCollections.of();\n  lockTimeout=null;\n  versionId=null;\n}"}
{"ids": "11538", "raw_code": "public void removeFromAllListeners(MapBean mapBean){\n  if (mapBean != null) {\n    removeZoomListener((ZoomListener)mapBean);\n    mapBean.removeProjectionListener(this);\n    scaleField.setText(\"----\");\n  }\n}"}
{"ids": "56640", "raw_code": "public static <T>FutureW<T> ofSupplier(final Supplier<T> s){\n  return FutureW.of(CompletableFuture.supplyAsync(s));\n}"}
{"ids": "23973", "raw_code": "@Override public void toData(DataOutput out) throws IOException {\n  super.toData(out);\n  out.writeLong(refreshInterval);\n  DataSerializer.writeObjectArray(alertDefs,out);\n}"}
{"ids": "80911", "raw_code": "public static boolean isString(String str){\n  return null != stringHashTable.get(str);\n}"}
{"ids": "6237", "raw_code": "public void addChangingListener(OnWheelChangedListener listener){\n  changingListeners.add(listener);\n}"}
{"ids": "2615", "raw_code": "@Override public Tree<String> extractBestMaxRuleParse(int start,int end,List<String> sentence){\n  return extractBestMaxRuleParse1(start,end,0,sentence);\n}"}
{"ids": "38948", "raw_code": "private Instances voteDataset(Instances dataset) throws Exception {\n  for (int i=0; i < dataset.numInstances(); i++) {\n    Instance inst=dataset.firstInstance();\n    inst=votedReclassifyExample(inst);\n    dataset.add(inst);\n    dataset.delete(0);\n  }\n  return dataset;\n}"}
{"ids": "72132", "raw_code": "@Override public String chooseClientAlias(final String[] keyType,final Principal[] issuers,final Socket socket){\n  if (keyManager != null) {\n    return keyManager.chooseClientAlias(keyType,issuers,socket);\n  }\n  return null;\n}"}
{"ids": "82179", "raw_code": "CSSElement parseCSS(InputStreamReader r,HTMLComponent htmlC) throws IOException {\n  ExtInputStreamReader er=new ExtInputStreamReader(r);\n  return parseCSS(er,htmlC,null,null);\n}"}
{"ids": "68071", "raw_code": "protected PooledConnection create(boolean incrementCounter){\n  if (incrementCounter)   size.incrementAndGet();\n  PooledConnection con=new PooledConnection(getPoolProperties(),this);\n  return con;\n}"}
{"ids": "49277", "raw_code": "void release(){\n  if (sdBuffer != null)   sdBuffer.release();\n  if (aclBuffer != null)   aclBuffer.release();\n  if (sidList != null) {\n    for (    Long sid : sidList) {\n      LocalFree(sid);\n    }\n  }\n}"}
{"ids": "14864", "raw_code": "private void parseSessionExpirationTimeInfo(Element sess){\n  String sid=null;\n  Long expTime=null;\n  String temp=sess.getAttribute(\"sid\");\n  if (temp != null) {\n    sid=temp;\n  }\n  temp=sess.getAttribute(\"expTime\");\n  if (temp != null) {\n    expTime=new Long(temp);\n  }\n  sessionResponse.addSessionForGivenUUID(sid,expTime);\n}"}
{"ids": "3955", "raw_code": "public static long generate(String value){\n  int len=value.length();\n  long crc=0;\n  for (int i=0; i < len; i++)   crc=next(crc,value.charAt(i));\n  return crc;\n}"}
{"ids": "17095", "raw_code": "public ReplaceDialog(JTextComponent text,FindReplaceActions finderActions){\n  super(ActionUtils.getFrameFor(text),false);\n  initComponents();\n  registerKeyAction(this);\n  textComponent=text;\n  finder=finderActions;\n  textComponent.addCaretListener(this);\n  setLocationRelativeTo(text.getRootPane());\n}"}
{"ids": "9545", "raw_code": "public String dump(X509Certificate certificate) throws Asn1Exception, IOException {\n  try {\n    return dump(certificate.getEncoded());\n  }\n catch (  IOException ex) {\n    throw new Asn1Exception(res.getString(\"NoAsn1DumpObject.exception.message\"),ex);\n  }\ncatch (  CertificateEncodingException ex) {\n    throw new Asn1Exception(res.getString(\"NoAsn1DumpObject.exception.message\"),ex);\n  }\n}"}
{"ids": "7393", "raw_code": "List<String> findInPackage(Test test,String packageName){\n  List<String> localClsssOrPkgs=new ArrayList<String>();\n  packageName=packageName.replace('.','/');\n  Enumeration<URL> urls;\n  try {\n    urls=classloader.getResources(packageName);\n    if (!urls.hasMoreElements()) {\n      log.warn(\"Unable to find any resources for package '\" + packageName + \"'\");\n    }\n  }\n catch (  IOException ioe) {\n    log.warn(\"Could not read package: \" + packageName);\n    return localClsssOrPkgs;\n  }\n  return findInPackageWithUrls(test,packageName,urls);\n}"}
{"ids": "81937", "raw_code": "public CloudObject(String type,int permissions){\n  accessPermissions=permissions;\n  values.put(CloudStorage.TYPE_FIELD,type);\n}"}
{"ids": "79563", "raw_code": "private static DecoderResult createDecoderResultFromAmbiguousValues(int ecLevel,int[] codewords,int[] erasureArray,int[] ambiguousIndexes,int[][] ambiguousIndexValues) throws FormatException, ChecksumException {\n  int[] ambiguousIndexCount=new int[ambiguousIndexes.length];\n  int tries=100;\n  while (tries-- > 0) {\n    for (int i=0; i < ambiguousIndexCount.length; i++) {\n      codewords[ambiguousIndexes[i]]=ambiguousIndexValues[i][ambiguousIndexCount[i]];\n    }\n    try {\n      return decodeCodewords(codewords,ecLevel,erasureArray);\n    }\n catch (    ChecksumException ignored) {\n    }\n    if (ambiguousIndexCount.length == 0) {\n      throw ChecksumException.getChecksumInstance();\n    }\n    for (int i=0; i < ambiguousIndexCount.length; i++) {\n      if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {\n        ambiguousIndexCount[i]++;\n        break;\n      }\n else {\n        ambiguousIndexCount[i]=0;\n        if (i == ambiguousIndexCount.length - 1) {\n          throw ChecksumException.getChecksumInstance();\n        }\n      }\n    }\n  }\n  throw ChecksumException.getChecksumInstance();\n}"}
{"ids": "41719", "raw_code": "public double distance(DoubleVector v){\n  double deltaX=v.x - x, deltaY=v.y - y, deltaZ=v.z - z;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);\n}"}
{"ids": "39343", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>();\n  newVector.add(new Option(\"\\tThe JDBC URL to connect to.\\n\" + \"\\t(default: from DatabaseUtils.props file)\",\"url\",1,\"-url <JDBC URL>\"));\n  newVector.add(new Option(\"\\tThe user to connect with to the database.\\n\" + \"\\t(default: none)\",\"user\",1,\"-user <name>\"));\n  newVector.add(new Option(\"\\tThe password to connect with to the database.\\n\" + \"\\t(default: none)\",\"password\",1,\"-password <password>\"));\n  newVector.add(new Option(\"\\tSQL query of the form\\n\" + \"\\t\\tSELECT <list of columns>|* FROM <table> [WHERE]\\n\" + \"\\tto execute.\\n\"+ \"\\t(default: Select * From Results0)\",\"Q\",1,\"-Q <query>\"));\n  newVector.add(new Option(\"\\tList of column names uniquely defining a DB row\\n\" + \"\\t(separated by ', ').\\n\" + \"\\tUsed for incremental loading.\\n\"+ \"\\tIf not specified, the key will be determined automatically,\\n\"+ \"\\tif possible with the used JDBC driver.\\n\"+ \"\\tThe auto ID column created by the DatabaseSaver won't be loaded.\",\"P\",1,\"-P <list of column names>\"));\n  newVector.add(new Option(\"\\tSets incremental loading\",\"I\",0,\"-I\"));\n  newVector.addElement(new Option(\"\\tReturn sparse rather than normal instances.\",\"S\",0,\"-S\"));\n  newVector.add(new Option(\"\\tThe custom properties file to use instead of default ones,\\n\" + \"\\tcontaining the database parameters.\\n\" + \"\\t(default: none)\",\"custom-props\",1,\"-custom-props <file>\"));\n  return newVector.elements();\n}"}
{"ids": "19903", "raw_code": "@Override public void dropUser(User user,boolean ignore) throws SQLException {\n  String sql=String.format(\"drop user %s\",user.getLogin());\n  try {\n    execute(sql);\n  }\n catch (  SQLException e) {\n    if (!ignore) {\n      throw e;\n    }\n else     if (logger.isDebugEnabled()) {\n      logger.debug(\"Drop user failed: \" + sql,e);\n    }\n  }\n}"}
{"ids": "29461", "raw_code": "public double normalizedDistance(double[] point1,double[] point2) throws Exception {\n  return Math.sqrt(distance2(point1,point2)) / point1.length;\n}"}
{"ids": "86571", "raw_code": "public static <T>void onNextDropped(T t){\n  if (t != null) {\n    Consumer<Object> hook=Hooks.onNextDroppedHook;\n    if (hook == null) {\n      throw Exceptions.failWithCancel();\n    }\n    hook.accept(t);\n  }\n}"}
{"ids": "57084", "raw_code": "public static int[] randomInts(int max,int count){\n  int[] vals=new int[count];\n  for (int i=0; i < count; i++)   vals[i]=SEEDED_RANDOM.nextInt(max);\n  return vals;\n}"}
{"ids": "79143", "raw_code": "void loadStrings() throws IOException {\n  int count=mHeaderItem.stringIdsSize;\n  int stringOffsets[]=new int[count];\n  seek(mHeaderItem.stringIdsOff);\n  for (int i=0; i < count; i++) {\n    stringOffsets[i]=readInt();\n  }\n  mStrings=new String[count];\n  seek(stringOffsets[0]);\n  for (int i=0; i < count; i++) {\n    seek(stringOffsets[i]);\n    mStrings[i]=readString();\n  }\n}"}
{"ids": "2122", "raw_code": "public boolean addGpsDateTimeStampTag(long timestamp){\n  ExifTag t=buildTag(TAG_GPS_DATE_STAMP,mGPSDateStampFormat.format(timestamp));\n  if (t == null) {\n    return false;\n  }\n  setTag(t);\n  mGPSTimeStampCalendar.setTimeInMillis(timestamp);\n  t=buildTag(TAG_GPS_TIME_STAMP,new Rational[]{new Rational(mGPSTimeStampCalendar.get(Calendar.HOUR_OF_DAY),1),new Rational(mGPSTimeStampCalendar.get(Calendar.MINUTE),1),new Rational(mGPSTimeStampCalendar.get(Calendar.SECOND),1)});\n  if (t == null) {\n    return false;\n  }\n  setTag(t);\n  return true;\n}"}
{"ids": "29977", "raw_code": "public void addArea(final TimeSection AREA){\n  if (null == AREA)   return;\n  areas.add(AREA);\n  Collections.sort(areas,new TimeSectionComparator());\n  fireUpdateEvent(SECTION_EVENT);\n}"}
{"ids": "23120", "raw_code": "private void raiseIOException(String host,int port,String protocol){\n  IOExceptionEvent ioError=new IOExceptionEvent(this,host,port,protocol);\n  sipProvider.handleEvent(ioError,null);\n  setState(SIPDialog.TERMINATED_STATE);\n}"}
{"ids": "1974", "raw_code": "public static double incompleteGammaComplement(double a,double x){\n  double ans, ax, c, yc, r, t, y, z;\n  double pk, pkm1, pkm2, qk, qkm1, qkm2;\n  if (x <= 0 || a <= 0)   return 1.0;\n  if (x < 1.0 || x < a)   return 1.0 - incompleteGamma(a,x);\n  ax=a * Math.log(x) - x - lnGamma(a);\n  if (ax < -MAXLOG)   return 0.0;\n  ax=Math.exp(ax);\n  y=1.0 - a;\n  z=x + y + 1.0;\n  c=0.0;\n  pkm2=1.0;\n  qkm2=x;\n  pkm1=x + 1.0;\n  qkm1=z * x;\n  ans=pkm1 / qkm1;\n  do {\n    c+=1.0;\n    y+=1.0;\n    z+=2.0;\n    yc=y * c;\n    pk=pkm1 * z - pkm2 * yc;\n    qk=qkm1 * z - qkm2 * yc;\n    if (qk != 0) {\n      r=pk / qk;\n      t=Math.abs((ans - r) / r);\n      ans=r;\n    }\n else     t=1.0;\n    pkm2=pkm1;\n    pkm1=pk;\n    qkm2=qkm1;\n    qkm1=qk;\n    if (Math.abs(pk) > big) {\n      pkm2*=biginv;\n      pkm1*=biginv;\n      qkm2*=biginv;\n      qkm1*=biginv;\n    }\n  }\n while (t > MACHEP);\n  return ans * ax;\n}"}
{"ids": "10515", "raw_code": "@Override public Object deserializeTypedFromObject(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {\n  JsonToken t=jp.getCurrentToken();\n  if (t == JsonToken.START_OBJECT) {\n    t=jp.nextToken();\n  }\n else   if (t == JsonToken.START_ARRAY) {\n    return _deserializeTypedUsingDefaultImpl(jp,ctxt,null);\n  }\n else   if (t != JsonToken.FIELD_NAME) {\n    return _deserializeTypedUsingDefaultImpl(jp,ctxt,null);\n  }\n  TokenBuffer tb=null;\n  for (; t == JsonToken.FIELD_NAME; t=jp.nextToken()) {\n    String name=jp.getCurrentName();\n    jp.nextToken();\n    if (_typePropertyName.equals(name)) {\n      String typeId=jp.getText();\n      JsonDeserializer<Object> deser=_findDeserializer(ctxt,typeId);\n      if (tb != null) {\n        jp=JsonParserSequence.createFlattened(tb.asParser(jp),jp);\n      }\n      jp.nextToken();\n      return deser.deserialize(jp,ctxt);\n    }\n    if (tb == null) {\n      tb=new TokenBuffer(null);\n    }\n    tb.writeFieldName(name);\n    tb.copyCurrentStructure(jp);\n  }\n  return _deserializeTypedUsingDefaultImpl(jp,ctxt,tb);\n}"}
{"ids": "46503", "raw_code": "protected int layoutRow(FlowView fv,int rowIndex,int p0){\n  int p1=super.layoutRow(fv,rowIndex,p0);\n  View row=fv.getView(rowIndex);\n  Document doc=fv.getDocument();\n  Object i18nFlag=doc.getProperty(AbstractDocument.I18NProperty);\n  if ((i18nFlag != null) && i18nFlag.equals(Boolean.TRUE)) {\n    int n=row.getViewCount();\n    if (n > 1) {\n      AbstractDocument d=(AbstractDocument)fv.getDocument();\n      Element bidiRoot=d.getBidiRootElement();\n      byte[] levels=new byte[n];\n      View[] reorder=new View[n];\n      for (int i=0; i < n; i++) {\n        View v=row.getView(i);\n        int bidiIndex=bidiRoot.getElementIndex(v.getStartOffset());\n        Element bidiElem=bidiRoot.getElement(bidiIndex);\n        levels[i]=(byte)StyleConstants.getBidiLevel(bidiElem.getAttributes());\n        reorder[i]=v;\n      }\n      BidiUtils.reorderVisually(levels,reorder);\n      row.replace(0,n,reorder);\n    }\n  }\n  return p1;\n}"}
{"ids": "54922", "raw_code": "public Generator(String propFile){\n  try {\n    BufferedInputStream bi=null;\n    try {\n      bi=new BufferedInputStream(new FileInputStream(propFile));\n      props.load(bi);\n    }\n  finally {\n      if (bi != null) {\n        bi.close();\n      }\n    }\n  }\n catch (  Exception e) {\n    setDefaultProps();\n  }\n}"}
{"ids": "87136", "raw_code": "public static void clearLoggingBehaviors(){\nsynchronized (loggingBehaviors) {\n    loggingBehaviors.clear();\n  }\n}"}
{"ids": "21205", "raw_code": "protected void auditOp(URI tenantId,URI userId,OperationTypeEnum opType,boolean operationalStatus,String operationStage,Object... descparams){\n  _auditMgr.recordAuditLog(tenantId,userId,EVENT_SERVICE_TYPE,opType,System.currentTimeMillis(),operationalStatus ? AuditLogManager.AUDITLOG_SUCCESS : AuditLogManager.AUDITLOG_FAILURE,operationStage,descparams);\n}"}
{"ids": "26911", "raw_code": "@VisibleForTesting protected Process startExecutorProcess(int container){\n  return ShellUtils.runASyncProcess(getExecutorCommand(container),new File(LocalContext.workingDirectory(config)),Integer.toString(container));\n}"}
{"ids": "8902", "raw_code": "private boolean isItemAtPositionSelectable(int position){\n  return !mUnselectableItems.contains(position);\n}"}
{"ids": "72209", "raw_code": "public Builder addEngineSettings(final String engineName,final List<String> imports,final List<String> staticImports,final List<String> scripts,final Map<String,Object> config){\n  if (null == imports)   throw new IllegalArgumentException(\"imports cannot be null\");\n  if (null == staticImports)   throw new IllegalArgumentException(\"staticImports cannot be null\");\n  if (null == scripts)   throw new IllegalArgumentException(\"scripts cannot be null\");\n  final Map<String,Object> m=null == config ? Collections.emptyMap() : config;\n  settings.put(engineName,new EngineSettings(imports,staticImports,scripts,m));\n  return this;\n}"}
{"ids": "37188", "raw_code": "private void displayPopupMenu(final MouseEvent event){\n  final int selectedIndex=getSelectionIndex(event);\n  if (selectedIndex != -1) {\n    final JPopupMenu popupMenu=getPopupMenu(event.getX(),event.getY(),selectedIndex);\n    if (popupMenu != null) {\n      popupMenu.show(this,event.getX(),event.getY());\n    }\n  }\n}"}
{"ids": "80945", "raw_code": "protected void handleSelected(StructuredSelection selection){\n  IStatus status=new Status(IStatus.OK,PlatformUI.PLUGIN_ID,IStatus.OK,EMPTY_STRING,null);\n  Object[] lastSelection=currentSelection;\n  currentSelection=selection.toArray();\n  if (selection.size() == 0) {\n    status=new Status(IStatus.ERROR,PlatformUI.PLUGIN_ID,IStatus.ERROR,EMPTY_STRING,null);\n    if (lastSelection != null && getListSelectionLabelDecorator() != null) {\n      list.update(lastSelection,null);\n    }\n    currentSelection=null;\n  }\n else {\n    status=new Status(IStatus.ERROR,PlatformUI.PLUGIN_ID,IStatus.ERROR,EMPTY_STRING,null);\n    List items=selection.toList();\n    Object item=null;\n    IStatus tempStatus=null;\n    for (Iterator it=items.iterator(); it.hasNext(); ) {\n      Object o=it.next();\n      if (o instanceof ItemsListSeparator) {\n        continue;\n      }\n      item=o;\n      tempStatus=validateItem(item);\n      if (tempStatus.isOK()) {\n        status=new Status(IStatus.OK,PlatformUI.PLUGIN_ID,IStatus.OK,EMPTY_STRING,null);\n      }\n else {\n        status=tempStatus;\n        break;\n      }\n    }\n    if (lastSelection != null && getListSelectionLabelDecorator() != null) {\n      list.update(lastSelection,null);\n    }\n    if (getListSelectionLabelDecorator() != null) {\n      list.update(currentSelection,null);\n    }\n  }\n  refreshDetails();\n  updateStatus(status);\n}"}
{"ids": "402", "raw_code": "public LinkedList<Diff> diff_main(String text1,String text2,boolean checklines){\n  long deadline;\n  if (Diff_Timeout <= 0) {\n    deadline=Long.MAX_VALUE;\n  }\n else {\n    deadline=System.currentTimeMillis() + (long)(Diff_Timeout * 1000);\n  }\n  return diff_main(text1,text2,checklines,deadline);\n}"}
{"ids": "21384", "raw_code": "private void updateAltDeviceid(NetworkFCZoneInfo fabricInfo,String fabricId,String fabricWWN,String key,Map<String,NetworkLite> fabricId2Network){\n  if (fabricInfo != null && fabricInfo.getAltNetworkDeviceId() == null) {\n    if (fabricId2Network.get(key) == null) {\n      NetworkLite network=NetworkUtil.getNetworkLiteByFabricId(fabricId,fabricWWN,_dbClient);\n      if (network != null) {\n        fabricId2Network.put(key,network);\n        URI id=fabricInfo.getNetworkDeviceId();\n        for (        String strUri : network.getNetworkSystems()) {\n          if (!strUri.equals(id.toString())) {\n            id=URI.create(strUri);\n            break;\n          }\n        }\n        fabricInfo.setAltNetworkDeviceId(id);\n      }\n    }\n  }\n}"}
{"ids": "10763", "raw_code": "public static NetworkInfo fromVersion(final byte version){\n  for (  final NetworkInfo info : KNOWN_NETWORKS) {\n    if (version == info.getVersion()) {\n      return info;\n    }\n  }\n  throw new IllegalArgumentException(String.format(\"Invalid version '%d' is not a known network version\",version));\n}"}
{"ids": "4091", "raw_code": "public void write(ByteCodeWriter out) throws IOException {\n  out.writeUTF8Const(getName());\n  TempOutputStream ts=new TempOutputStream();\n  ByteCodeWriter o2=new ByteCodeWriter(ts,out.getJavaClass());\n  o2.writeShort(_exceptions.size());\n  for (int i=0; i < _exceptions.size(); i++) {\n    String exn=_exceptions.get(i);\n    o2.writeClass(exn);\n  }\n  ts.close();\n  out.writeInt(ts.getLength());\n  TempBuffer ptr=ts.getHead();\n  for (; ptr != null; ptr=ptr.next())   out.write(ptr.buffer(),0,ptr.length());\n  ts.destroy();\n}"}
{"ids": "55382", "raw_code": "public synchronized AddressbookEntry remove(String name,Set<String> categoriesToRemove){\n  name=StringUtil.toLowerCase(name);\n  AddressbookEntry currentEntry=entries.get(name);\n  if (currentEntry != null) {\n    Set<String> currentCategories=currentEntry.getCategories();\n    for (    String category : categoriesToRemove) {\n      currentCategories.remove(category);\n    }\n    AddressbookEntry changedEntry=new AddressbookEntry(name,currentCategories);\n    entries.put(name,changedEntry);\n    if (!currentEntry.equalsFully(changedEntry)) {\n      saveOnChange();\n    }\n    return changedEntry;\n  }\n  return null;\n}"}
{"ids": "45285", "raw_code": "public String shortestMatch(String input){\n  TrieNode node=root;\n  for (int i=input.length() - 1; i >= 0; i--) {\n    node=node.getChild(input.charAt(i));\n    if (node == null)     return null;\n    if (node.isTerminal())     return input.substring(i);\n  }\n  return null;\n}"}
{"ids": "1311", "raw_code": "public static RHExtension hasRHExtensions(ConfigImpl config,ExtensionDefintion ed) throws PageException, SAXException, IOException {\n  XMLConfigAdmin admin=new XMLConfigAdmin(config,null);\n  return admin._hasRHExtensions(config,ed);\n}"}
{"ids": "61823", "raw_code": "public void addQueryToHistory(String sql){\n  queryHistory.remove(sql);\n  queryHistory.addFirst(sql);\n  while (historySize >= 0 && queryHistory.size() > historySize) {\n    queryHistory.removeLast();\n  }\n}"}
{"ids": "87071", "raw_code": "public StringBuilder encodeBody(StringBuilder retval){\n  retval.append(LESS_THAN);\n  errorInfo.encode(retval);\n  retval.append(GREATER_THAN);\n  if (!parameters.isEmpty()) {\n    retval.append(SEMICOLON);\n    parameters.encode(retval);\n  }\n  return retval;\n}"}
{"ids": "86556", "raw_code": "public final <R>ParallelFlux<R> reduce(Supplier<R> initialSupplier,BiFunction<R,T,R> reducer){\n  Objects.requireNonNull(initialSupplier,\"initialSupplier\");\n  Objects.requireNonNull(reducer,\"reducer\");\n  return onAssembly(new ParallelReduce<>(this,initialSupplier,reducer));\n}"}
{"ids": "86329", "raw_code": "private void handleButtonEvent(final Event event){\nswitch (event.type) {\ncase SWT.FocusIn:\n{\n      handleFocusEvents(SWT.FocusIn);\n      break;\n    }\ncase SWT.Selection:\n{\n    changeVisibilityOfPopupWindow(!isDropped());\n    break;\n  }\n}\n}"}
{"ids": "76456", "raw_code": "private void performUpdateOperations(Context context,Request request,JsonValue afterValue,JsonValue beforeValue) throws ResourceException {\n  final String managedId=getManagedObjectId(context);\n  activityLogger.log(context,request,\"update\",getManagedObjectPath(context),beforeValue,afterValue,Status.SUCCESS);\n  managedObjectSetService.update(context,newUpdateRequest(managedId,afterValue),managedId,null,beforeValue,afterValue,new HashSet<>(Arrays.asList(propertyPtr)),new HashSet<>(Arrays.asList(propertyPtr)));\n}"}
{"ids": "26036", "raw_code": "private boolean hasNextInetSocketAddress(){\n  return nextInetSocketAddressIndex < inetSocketAddresses.size();\n}"}
{"ids": "23817", "raw_code": "public static Boolean canStringBeInlineEncoded(String skey){\n  if (skey.length() > getMaxInlineStringKey(MAX_LONGS_USED_FOR_STRING_KEY,true)) {\n    return null;\n  }\n  if (isByteEncodingOk(skey)) {\n    return Boolean.TRUE;\n  }\n else {\n    if (skey.length() > getMaxInlineStringKey(MAX_LONGS_USED_FOR_STRING_KEY,false)) {\n      return null;\n    }\n else {\n      return Boolean.FALSE;\n    }\n  }\n}"}
{"ids": "40866", "raw_code": "public Builder(Date created,Date lastModified){\n  this.created=created != null ? new Date(created.getTime()) : null;\n  this.lastModified=lastModified != null ? new Date(lastModified.getTime()) : null;\n}"}
{"ids": "84201", "raw_code": "@Override public void writeByteStream(InputStream is) throws IOException {\n  while (true) {\n    int len=SIZE - _offset - 3;\n    if (len < 16) {\n      flushBuffer();\n      len=SIZE - _offset - 3;\n    }\n    len=is.read(_buffer,_offset + 3,len);\n    if (len <= 0) {\n      _buffer[_offset++]=BC_BINARY_DIRECT;\n      return;\n    }\n    _buffer[_offset + 0]=(byte)BC_BINARY_CHUNK;\n    _buffer[_offset + 1]=(byte)(len >> 8);\n    _buffer[_offset + 2]=(byte)(len);\n    _offset+=len + 3;\n  }\n}"}
{"ids": "86345", "raw_code": "public void removeSelectionChangeListener(final SelectionChangeListener listener){\n  checkWidget();\n  if (listener == null) {\n    SWT.error(SWT.ERROR_NULL_ARGUMENT);\n  }\n  if (selectionChangeListeners == null) {\n    return;\n  }\n  selectionChangeListeners.remove(listener);\n}"}
{"ids": "74272", "raw_code": "public Track addTrack(String name,String type){\n  Track track=getTrackByName(name,type);\n  if (track == null) {\n    _IdNumber++;\n    String id=_id + \"s\" + Integer.toString(_IdNumber);\n    log.debug(\"Adding new ({}) to ({}) track name ({}) id: {}\",type,getName(),name,id);\n    track=new Track(id,name,type,this);\n    register(track);\n  }\n  resetMoves();\n  return track;\n}"}
{"ids": "4460", "raw_code": "SQLiteLoaderObserver registerLoader(final SQLiteLoader loader,final String table){\n  Logger.d(TAG,\"Add Loader Observer: %s\",table);\n  final SQLiteLoaderObserver entry=new SQLiteLoaderObserver(loader,table);\n  mActiveLoaders.add(entry);\n  return entry;\n}"}
{"ids": "81940", "raw_code": "public void unbindTree(Container ui){\n  int componentCount=ui.getComponentCount();\n  for (int iter=0; iter < componentCount; iter++) {\n    Component c=ui.getComponentAt(iter);\n    if (c instanceof Container) {\n      unbindTree((Container)c);\n      continue;\n    }\n    String bind=c.getCloudBoundProperty();\n    if (bind != null && bind.length() > 0) {\n      String attributeName=c.getCloudDestinationProperty();\n      if (attributeName != null) {\n        unbindProperty(c,bind);\n      }\n    }\n  }\n}"}
{"ids": "52315", "raw_code": "protected List<Item> toItems(List<Model> models){\n  if (models == null) {\n    return Collections.emptyList();\n  }\n  int size=models.size();\n  List<Item> items=new ArrayList<>(size);\n  for (int i=0; i < size; i++) {\n    items.add(toItem(models.get(i)));\n  }\n  return items;\n}"}
{"ids": "7305", "raw_code": "public void apply(FilterSet filterSet,FilterServiceGranularLockFactory lockFactory){\n  for (  FilterSetEntry entry : filterSet.getFilters()) {\n    add(entry.getFilterValueSet(),entry.getHandle(),lockFactory);\n  }\n}"}
{"ids": "63335", "raw_code": "public void addConstraintCommand(DefineCommand command){\n  if (command instanceof CreateIndex) {\n    constraintCommands.add(command);\n  }\n else {\n    AlterTableAddConstraint con=(AlterTableAddConstraint)command;\n    boolean alreadySet;\n    if (con.getType() == CommandInterface.ALTER_TABLE_ADD_CONSTRAINT_PRIMARY_KEY) {\n      alreadySet=setPrimaryKeyColumns(con.getIndexColumns());\n    }\n else {\n      alreadySet=false;\n    }\n    if (!alreadySet) {\n      constraintCommands.add(command);\n    }\n  }\n}"}
{"ids": "79694", "raw_code": "private static byte[] lmv2Response(final byte[] hash,final byte[] challenge,final byte[] clientData) throws AuthenticationException {\n  final HMACMD5 hmacMD5=new HMACMD5(hash);\n  hmacMD5.update(challenge);\n  hmacMD5.update(clientData);\n  final byte[] mac=hmacMD5.getOutput();\n  final byte[] lmv2Response=new byte[mac.length + clientData.length];\n  System.arraycopy(mac,0,lmv2Response,0,mac.length);\n  System.arraycopy(clientData,0,lmv2Response,mac.length,clientData.length);\n  return lmv2Response;\n}"}
{"ids": "17708", "raw_code": "static <E>E checkType(E obj,Class<? extends E> type){\n  if (obj != null && !type.isInstance(obj)) {\n    throw new ClassCastException(\"Attempt to insert element of type \" + obj.getClass() + \" into collection of type \"+ type);\n  }\n  return obj;\n}"}
{"ids": "66493", "raw_code": "public void destroy(){\n  m_filterConfig=null;\n}"}
{"ids": "69558", "raw_code": "@Override public Parcelable onSaveInstanceState(){\n  String path=mPhotoFilePath.get();\n  if (path == null)   return null;\n  Bundle bundle=new Bundle();\n  bundle.putString(\"photoFilePath\",path);\n  return bundle;\n}"}
{"ids": "44575", "raw_code": "public static boolean createFolder(String folderPath){\n  if (!TextUtils.isEmpty(folderPath)) {\n    File folder=new File(folderPath);\n    return createFolder(folder);\n  }\n  return false;\n}"}
{"ids": "285", "raw_code": "@Override public void keyReleased(KeyEvent e){\n  char[] password1=null;\n  char[] password2=null;\n  if (passwordField != null) {\n    password1=passwordField.getPassword();\n  }\n  if (repeatPasswordField != null) {\n    password2=repeatPasswordField.getPassword();\n  }\n  boolean tickLabelVisible=false;\n  if (password1 != null && password2 != null) {\n    if (Arrays.equals(password1,password2)) {\n      tickLabelVisible=true;\n    }\n  }\n  tickLabel.setVisible(tickLabelVisible);\n  clearMessages();\n  for (int i=0; i < password1.length; i++) {\n    password1[i]=0;\n  }\n  for (int i=0; i < password2.length; i++) {\n    password2[i]=0;\n  }\n}"}
{"ids": "45718", "raw_code": "private static PeriodFormatterAndValue selectFormatter(Period daysPeriod){\n  int days=daysPeriod.getDays();\n  if (days > 0) {\n    return pav(DAY_FORMATTER,days);\n  }\n  int hours=daysPeriod.getHours();\n  if (hours > 0) {\n    return pav(HOUR_FORMATTER,hours);\n  }\n  int minutes=daysPeriod.getMinutes();\n  if (minutes > 0) {\n    return pav(MINUTE_FORMATTER,minutes);\n  }\n  int seconds=daysPeriod.getSeconds();\n  if (seconds > 0) {\n    return pav(SECOND_FORMATTER,seconds);\n  }\n  return null;\n}"}
{"ids": "22665", "raw_code": "void addArg(String arg){\n  args.add(arg);\n}"}
{"ids": "82521", "raw_code": "public java.lang.StringBuffer insert(int offset,float f){\n  internal.insert(offset,f);\n  return this;\n}"}
{"ids": "84938", "raw_code": "private void updateGwt27On(IJavaProject javaProject,List<String> programArgs,int indexDisabled,int indexEnabled,boolean superDevModeEnabled){\n  if (indexEnabled > -1) {\n    programArgs.remove(indexEnabled);\n  }\n  if (indexDisabled > -1) {\n    programArgs.remove(indexDisabled);\n  }\n  if (!superDevModeEnabled) {\n    programArgs.add(0,SUPERDEVMODE_DISABLED_ARG);\n  }\n}"}
{"ids": "55214", "raw_code": "default boolean smashBlock(EntityPlayer player,World world,BlockPos pos,IBlockState state,ToolTier tier){\n  ToolTier required=getRequiredTier(state);\n  if (required != null && tier.isGreaterThanOrEqualTo(required)) {\n    float luck=tier.ordinal() * 0.25F;\n    List<ItemStack> drops=getDrops(player,world,pos,state,luck);\n    if (drops.size() > 0) {\n      if (!world.isRemote) {\n        world.setBlockToAir(pos);\n        for (        ItemStack drop : drops) {\n          spawnAsEntity(world,pos,drop);\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "21531", "raw_code": "protected String fetchNativeId(String nativeGuid){\n  String[] token=nativeGuid.split(VNXFileConstants.PLUS_SEPERATOR);\n  return token[token.length - 1];\n}"}
{"ids": "28657", "raw_code": "public long rss(){\n  return Long.parseLong(fields[23]);\n}"}
{"ids": "84041", "raw_code": "public static void init(Context context,boolean is_top){\n  cameraManager=new CameraManager(context,is_top);\n}"}
{"ids": "5670", "raw_code": "public static PlainText plain(float text){\n  return plain(Float.toString(text));\n}"}
{"ids": "58224", "raw_code": "public final void append(char value){\n  char[] chunk;\n  if (m_firstFree < m_chunkSize)   chunk=m_array[m_lastChunk];\n else {\n    int i=m_array.length;\n    if (m_lastChunk + 1 == i) {\n      char[][] newarray=new char[i + 16][];\n      System.arraycopy(m_array,0,newarray,0,i);\n      m_array=newarray;\n    }\n    chunk=m_array[++m_lastChunk];\n    if (chunk == null) {\n      if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {\n        m_innerFSB=new FastStringBuffer(this);\n      }\n      chunk=m_array[m_lastChunk]=new char[m_chunkSize];\n    }\n    m_firstFree=0;\n  }\n  chunk[m_firstFree++]=value;\n}"}
{"ids": "87099", "raw_code": "public Socket createSocket(InetAddress address,int port,InetAddress myAddress,int myPort) throws IOException {\n  if (myAddress != null) {\n    Socket sock=new Socket();\n    sock.bind(new InetSocketAddress(myAddress,0));\n    try {\n      sock.connect(new InetSocketAddress(address,port),8000);\n    }\n catch (    SocketTimeoutException e) {\n      throw new ConnectException(\"Socket timeout error (8sec)\" + address + \":\"+ port);\n    }\n    return sock;\n  }\n else {\n    Socket sock=new Socket();\n    if (myPort != 0) {\n      sock.bind(new InetSocketAddress(port));\n    }\n    try {\n      sock.connect(new InetSocketAddress(address,port),8000);\n    }\n catch (    SocketTimeoutException e) {\n      throw new ConnectException(\"Socket timeout error (8sec)\" + address + \":\"+ port);\n    }\n    return sock;\n  }\n}"}
{"ids": "21871", "raw_code": "private static void updateClusterTenant(DbClient dbClient,URI dataCenterId,URI tenantId){\n  List<NamedElement> clustersUris=listChildren(dbClient,dataCenterId,Cluster.class,\"label\",\"vcenterDataCenter\");\n  for (  NamedElement clusterUri : clustersUris) {\n    Cluster cluster=dbClient.queryObject(Cluster.class,clusterUri.getId());\n    if (cluster != null) {\n      cluster.setTenant(tenantId);\n      dbClient.persistObject(cluster);\n    }\n  }\n}"}
{"ids": "81264", "raw_code": "public static int prefixLength(char[] s1,char[] s2){\n  int len=0;\n  int max=Math.min(s1.length,s2.length);\n  for (int i=0; i < max && s1[i] == s2[i]; ++i)   ++len;\n  return len;\n}"}
{"ids": "72345", "raw_code": "private static boolean isLessThanOneWeek(Date date){\n  Calendar calendar=Calendar.getInstance();\n  calendar.add(Calendar.DAY_OF_MONTH,-6);\n  return date.after(calendar.getTime());\n}"}
{"ids": "80776", "raw_code": "private int colToLoc(int col,Vector<MappingPair> vec){\n  int loc=col;\n  for (int i=0; (i < vec.size()) && (vec.elementAt(i).col <= col); i++) {\n    loc=loc + vec.elementAt(i).inc;\n  }\n  return loc;\n}"}
{"ids": "38107", "raw_code": "protected boolean[] canHandleNClasses(AttrTypes attrTypes,int numClasses){\n  print(\"more than two class problems\");\n  printAttributeSummary(attrTypes,Attribute.NOMINAL);\n  print(\"...\");\n  ArrayList<String> accepts=new ArrayList<String>();\n  accepts.add(\"number\");\n  accepts.add(\"class\");\n  int numTrain=getNumInstances(), numTest=getNumInstances(), missingLevel=0;\n  boolean attributeMissing=false, classMissing=false;\n  int numAttr=1, attrIndex=0;\n  return runBasicTest(attrTypes,numAttr,attrIndex,Attribute.NOMINAL,missingLevel,attributeMissing,classMissing,numTrain,numTest,numClasses,accepts);\n}"}
{"ids": "67054", "raw_code": "public TypeVariable typeVariable(){\n  int id=typeVariableList.size();\n  typeVariableList.add(null);\n  TypeVariable result=new TypeVariable(id,this);\n  typeVariableList.set(id,result);\n  return result;\n}"}
{"ids": "81455", "raw_code": "public static char[] createTypeParameterSignature(char[] typeParameterName,char[][] boundSignatures){\n  int length=boundSignatures.length;\n  if (length == 0) {\n    return CharOperation.append(typeParameterName,C_COLON);\n  }\n  int boundsSize=0;\n  for (int i=0; i < length; i++) {\n    boundsSize+=boundSignatures[i].length + 1;\n  }\n  int nameLength=typeParameterName.length;\n  char[] result=new char[nameLength + boundsSize];\n  System.arraycopy(typeParameterName,0,result,0,nameLength);\n  int index=nameLength;\n  for (int i=0; i < length; i++) {\n    result[index++]=C_COLON;\n    int boundLength=boundSignatures[i].length;\n    System.arraycopy(boundSignatures[i],0,result,index,boundLength);\n    index+=boundLength;\n  }\n  return result;\n}"}
{"ids": "63424", "raw_code": "void cancelStatement(String sessionId,int statementId){\n  for (  TcpServerThread c : New.arrayList(running)) {\n    if (c != null) {\n      c.cancelStatement(sessionId,statementId);\n    }\n  }\n}"}
{"ids": "43854", "raw_code": "public static double parseDouble(String s){\n  if (POSITIVE_INFINITY.equals(s)) {\n    return Double.POSITIVE_INFINITY;\n  }\n else   if (NEGATIVE_INFINITY.equals(s)) {\n    return Double.NEGATIVE_INFINITY;\n  }\n else   if (NaN.equals(s)) {\n    return Double.NaN;\n  }\n else {\n    s=trimPlusSign(s);\n    return Double.parseDouble(s);\n  }\n}"}
{"ids": "51836", "raw_code": "public void finishZombieTasksWithError(){\n  List<PollableTask> zombiePollableTasks;\n  do {\n    logger.debug(\"Fetching 5 zombie pollable tasks to clean up\");\n    PageRequest pageable=new PageRequest(0,5);\n    zombiePollableTasks=pollableTaskRepository.findZombiePollableTasks(pageable);\n    for (    PollableTask zombiePollableTask : zombiePollableTasks) {\n      markAsFinishedWithError(zombiePollableTask);\n    }\n  }\n while (!zombiePollableTasks.isEmpty());\n}"}
{"ids": "44570", "raw_code": "public CookieEntity(URI uri,HttpCookie cookie){\n  this.uri=uri == null ? null : uri.toString();\n  this.name=cookie.getName();\n  this.value=cookie.getValue();\n  this.comment=cookie.getComment();\n  this.commentURL=cookie.getCommentURL();\n  this.discard=cookie.getDiscard();\n  this.domain=cookie.getDomain();\n  long maxAge=cookie.getMaxAge();\n  if (maxAge != -1 && maxAge > 0) {\n    this.expiry=(maxAge * 1000L) + System.currentTimeMillis();\n    if (this.expiry < 0L)     this.expiry=HeaderUtil.getMaxExpiryMillis();\n  }\n else   this.expiry=-1L;\n  this.path=cookie.getPath();\n  if (!TextUtils.isEmpty(path) && path.length() > 1 && path.endsWith(\"/\")) {\n    this.path=path.substring(0,path.length() - 1);\n  }\n  this.portList=cookie.getPortlist();\n  this.secure=cookie.getSecure();\n  this.version=cookie.getVersion();\n}"}
{"ids": "59730", "raw_code": "public void addValue(T value){\n  list.addFirst(value);\n  total+=Double.valueOf(value.toString());\n  trim();\n}"}
{"ids": "2941", "raw_code": "private void updateTrafficMask(){\n  int queueSize=trafficControllingSessions.size();\n  while (queueSize > 0) {\n    S session=trafficControllingSessions.poll();\n    if (session == null) {\n      return;\n    }\n    SessionState state=getState(session);\nswitch (state) {\ncase OPENED:\n      updateTrafficControl(session);\n    break;\ncase CLOSING:\n  break;\ncase OPENING:\ntrafficControllingSessions.add(session);\nbreak;\ndefault :\nthrow new IllegalStateException(String.valueOf(state));\n}\nqueueSize--;\n}\n}"}
{"ids": "81864", "raw_code": "public Object createSoftWeakRef(Object o){\n  return new WeakReference(o);\n}"}
{"ids": "33159", "raw_code": "public boolean hasEntries(){\n  return !fEntries.isEmpty();\n}"}
{"ids": "76170", "raw_code": "protected String convertToString(Object value) throws Throwable {\n  String result=null;\n  if (useLocaleFormat && value instanceof Number) {\n    NumberFormat format=getFormat();\n    format.setGroupingUsed(false);\n    result=format.format(value);\n  }\n else {\n    result=value.toString();\n  }\n  return result;\n}"}
{"ids": "10956", "raw_code": "public EsriShapeExport(OMGraphicList list,Projection proj,String pathToFile){\n  setGraphicList(list);\n  projection=proj;\n  filePath=pathToFile;\n  DEBUG=logger.isLoggable(Level.FINE);\n}"}
{"ids": "65463", "raw_code": "private void checkLogFolder(){\n  File folder=new File(folderPath);\n  if (!folder.exists()) {\n    folder.mkdirs();\n  }\n}"}
{"ids": "83899", "raw_code": "private synchronized void reschedule(long millis){\n  currentFut=null;\n  if (!closed) {\n    SCHEDULER.schedule(null,millis,TimeUnit.MILLISECONDS);\n  }\n else {\n    try {\n      underlying.close();\n    }\n catch (    Exception ex) {\n      LOG.log(Level.WARNING,\"failed to close resolver \" + underlying.configString(),ex);\n    }\n  }\n}"}
{"ids": "29649", "raw_code": "public static ContentVerifierProvider createDefaultContentVerifier(PublicKey key) throws OperatorCreationException {\n  if (\"RSA\" == key.getAlgorithm()) {\n    return SUN_VERIFICATION_BUILDER.build(key);\n  }\n else {\n    return BC_VERIFICATION_BUILDER.build(key);\n  }\n}"}
{"ids": "41472", "raw_code": "public static Uri fromFile(File file){\n  if (file == null) {\n    throw new NullPointerException(\"file\");\n  }\n  PathPart path=PathPart.fromDecoded(file.getAbsolutePath());\n  return new HierarchicalUri(\"file\",Part.EMPTY,path,Part.NULL,Part.NULL);\n}"}
{"ids": "42091", "raw_code": "public void addRule(final Rule rule){\n  rule.setId(ruleIdCounter++);\n  rules.add(rule);\n}"}
{"ids": "34403", "raw_code": "public static Object serializeClone(final Object obj) throws IOException, ClassNotFoundException {\n  ByteArrayOutputStream memOut=new ByteArrayOutputStream();\n  ObjectOutputStream objOut=new ObjectOutputStream(memOut);\n  objOut.writeObject(obj);\n  objOut.close();\n  ByteArrayInputStream src=new ByteArrayInputStream(memOut.toByteArray());\n  ObjectInputStream objIs=new ObjectInputStream(src);\n  return objIs.readObject();\n}"}
{"ids": "53404", "raw_code": "private static String linkForClassName(String name){\n  return name.replace('.','/') + \".html\";\n}"}
{"ids": "81006", "raw_code": "protected void handleElementDeleted(IEditorInput fileEditorInput){\n  fireElementDeleted(fileEditorInput);\n}"}
{"ids": "77879", "raw_code": "public void assertTextPresent(String expected,String actual){\n  if ((actual == null) || (!actual.contains(expected))) {\n    throw new AssertionFailedError(\"expected presence of [\" + expected + \"], but was [\"+ actual+ \"]\");\n  }\n}"}
{"ids": "43440", "raw_code": "public String codeCleanPipeline(String contents){\n  if (contents == null) {\n    return Values.EMPTYSTRING;\n  }\n  StringBuilder indexContents=new StringBuilder();\n  char[] firstReplacements={'<','>',')','(','[',']','|','=',','};\n  for (  char c : firstReplacements) {\n    contents=contents.replace(c,' ');\n  }\n  indexContents.append(\" \");\n  indexContents.append(contents);\n  char[] secondReplacements={';','{','}','/'};\n  for (  char c : secondReplacements) {\n    contents=contents.replace(c,' ');\n  }\n  indexContents.append(\" \");\n  indexContents.append(contents);\n  char[] forthReplacements={'\"','\\''};\n  for (  char c : forthReplacements) {\n    contents=contents.replace(c,' ');\n  }\n  indexContents.append(\" \");\n  indexContents.append(contents);\n  char[] replacements={'\\'','\"','.',';','=','(',')','[',']','_',';','@','#'};\n  for (  char c : replacements) {\n    contents=contents.replace(c,' ');\n  }\n  indexContents.append(\" \");\n  indexContents.append(contents);\n  char[] thirdReplacements={'-'};\n  for (  char c : thirdReplacements) {\n    contents=contents.replace(c,' ');\n  }\n  indexContents.append(\" \");\n  indexContents.append(contents);\n  return indexContents.toString();\n}"}
{"ids": "12963", "raw_code": "public static String mrpa2sampa(String voicePhoneme){\n  if (mrpa2sampa.containsKey(voicePhoneme))   return mrpa2sampa.get(voicePhoneme);\n else   return voicePhoneme;\n}"}
{"ids": "45891", "raw_code": "public static XPath2FilterContainer newInstanceIntersect(Document doc,String xpath2filter){\n  return new XPath2FilterContainer(doc,xpath2filter,XPath2FilterContainer._ATT_FILTER_VALUE_INTERSECT);\n}"}
{"ids": "40273", "raw_code": "public void removeItemChangedListener(ItemChangedListener listener){\n  itemChangedListeners.remove(listener);\n}"}
{"ids": "48672", "raw_code": "public boolean hasAmbigPrefix(){\n  return (name.startsWith(ambigPrefix));\n}"}
{"ids": "2816", "raw_code": "public OrderedThreadPoolExecutor(int maximumPoolSize){\n  this(DEFAULT_INITIAL_THREAD_POOL_SIZE,maximumPoolSize,DEFAULT_KEEP_ALIVE,TimeUnit.SECONDS,Executors.defaultThreadFactory(),null);\n}"}
{"ids": "71275", "raw_code": "private String parseMalformed(String urlString){\n  if (parts != null && !parts.isEmpty()) {\n    String ret;\n    for (    URLPart part : parts) {\nswitch (part) {\ncase PROTOCOL:\n        ret=applyPattern(REGEX_PROTOCOL,urlString);\n      break;\ncase PORT:\n    ret=applyPattern(REGEX_PORT,urlString);\n  break;\ncase QUERY:\nret=applyPattern(REGEX_QUERY,urlString);\nbreak;\ncase WHOLE:\nret=urlString;\nbreak;\ndefault :\nret=urlString;\n}\nif (!Strings.isNullOrEmpty(ret)) {\nreturn ret;\n}\n}\n}\nreturn urlString;\n}"}
{"ids": "49483", "raw_code": "private boolean relocate(){\n  boolean finished=true;\n  for (  Relocatable relocatable : this.relocatables) {\n    finished&=relocatable.relocate();\n  }\n  return finished;\n}"}
{"ids": "32190", "raw_code": "@SuppressWarnings({\"ForLoopReplaceableByForEach\",\"unchecked\"}) private Map<K,EntryProcessorResult> updateWithBatch(GridCacheOperation op,Collection<? extends K> keys,@Nullable Iterable<?> vals,@Nullable Object[] invokeArgs,@Nullable ExpiryPolicy expiryPlc,GridCacheVersion ver,@Nullable CacheEntryPredicate[] filter,boolean keepBinary,UUID subjId,String taskName) throws IgniteCheckedException {\n  List<GridCacheEntryEx> locked=lockEntries(keys);\n  try {\n    int size=locked.size();\n    Map<Object,Object> putMap=null;\n    Collection<Object> rmvKeys=null;\n    List<CacheObject> writeVals=null;\n    Map<K,EntryProcessorResult> invokeResMap=op == TRANSFORM ? U.<K,EntryProcessorResult>newHashMap(size) : null;\n    List<GridCacheEntryEx> filtered=new ArrayList<>(size);\n    CachePartialUpdateCheckedException err=null;\n    Iterator<?> valsIter=vals != null ? vals.iterator() : null;\n    boolean intercept=ctx.config().getInterceptor() != null;\n    for (int i=0; i < size; i++) {\n      GridCacheEntryEx entry=locked.get(i);\n      Object val=valsIter != null ? valsIter.next() : null;\n      if (val == null && op != DELETE)       throw new NullPointerException(\"Null value.\");\n      try {\n        try {\n          if (!ctx.isAllLocked(entry,filter)) {\n            if (log.isDebugEnabled())             log.debug(\"Entry did not pass the filter (will skip write) [entry=\" + entry + \", filter=\"+ Arrays.toString(filter)+ ']');\n            continue;\n          }\n        }\n catch (        IgniteCheckedException e) {\n          if (err == null)           err=partialUpdateException();\n          err.add(F.asList(entry.key()),e);\n          continue;\n        }\n        if (op == TRANSFORM) {\n          ctx.kernalContext().resource().inject(val,GridResourceIoc.AnnotationSet.ENTRY_PROCESSOR,ctx.name());\n          EntryProcessor<Object,Object,Object> entryProcessor=(EntryProcessor<Object,Object,Object>)val;\n          CacheObject old=entry.innerGet(null,null,true,true,true,true,true,subjId,entryProcessor,taskName,null,keepBinary);\n          Object oldVal=null;\n          CacheInvokeEntry<Object,Object> invokeEntry=new CacheInvokeEntry<>(entry.key(),old,entry.version(),keepBinary,entry);\n          CacheObject updated;\n          Object updatedVal=null;\n          CacheInvokeResult invokeRes=null;\n          try {\n            Object computed=entryProcessor.process(invokeEntry,invokeArgs);\n            updatedVal=ctx.unwrapTemporary(invokeEntry.getValue());\n            updated=ctx.toCacheObject(updatedVal);\n            if (computed != null)             invokeRes=CacheInvokeResult.fromResult(ctx.unwrapTemporary(computed));\n          }\n catch (          Exception e) {\n            invokeRes=CacheInvokeResult.fromError(e);\n            updated=old;\n          }\n          if (invokeRes != null)           invokeResMap.put((K)entry.key().value(ctx.cacheObjectContext(),false),invokeRes);\n          if (updated == null) {\n            if (intercept) {\n              IgniteBiTuple<Boolean,?> interceptorRes=ctx.config().getInterceptor().onBeforeRemove(new CacheLazyEntry(ctx,entry.key(),invokeEntry.key(),old,oldVal,keepBinary));\n              if (ctx.cancelRemove(interceptorRes))               continue;\n            }\n            if (putMap != null) {\n              err=updatePartialBatch(filtered,ver,writeVals,putMap,null,expiryPlc,keepBinary,err,subjId,taskName);\n              putMap=null;\n              writeVals=null;\n              filtered=new ArrayList<>();\n            }\n            if (rmvKeys == null)             rmvKeys=new ArrayList<>(size);\n            rmvKeys.add(entry.key().value(ctx.cacheObjectContext(),false));\n          }\n else {\n            if (intercept) {\n              Object interceptorVal=ctx.config().getInterceptor().onBeforePut(new CacheLazyEntry(ctx,entry.key(),invokeEntry.getKey(),old,oldVal,keepBinary),updatedVal);\n              if (interceptorVal == null)               continue;\n              updated=ctx.toCacheObject(ctx.unwrapTemporary(interceptorVal));\n            }\n            if (rmvKeys != null) {\n              err=updatePartialBatch(filtered,ver,null,null,rmvKeys,expiryPlc,keepBinary,err,subjId,taskName);\n              rmvKeys=null;\n              filtered=new ArrayList<>();\n            }\n            if (putMap == null) {\n              putMap=new LinkedHashMap<>(size,1.0f);\n              writeVals=new ArrayList<>(size);\n            }\n            putMap.put(CU.value(entry.key(),ctx,false),CU.value(updated,ctx,false));\n            writeVals.add(updated);\n          }\n        }\n else         if (op == UPDATE) {\n          CacheObject cacheVal=ctx.toCacheObject(val);\n          if (intercept) {\n            CacheObject old=entry.innerGet(null,null,true,ctx.loadPreviousValue(),true,true,true,subjId,null,taskName,null,keepBinary);\n            Object interceptorVal=ctx.config().getInterceptor().onBeforePut(new CacheLazyEntry(ctx,entry.key(),old,keepBinary),val);\n            if (interceptorVal == null)             continue;\n            cacheVal=ctx.toCacheObject(ctx.unwrapTemporary(interceptorVal));\n          }\n          if (putMap == null) {\n            putMap=new LinkedHashMap<>(size,1.0f);\n            writeVals=new ArrayList<>(size);\n          }\n          putMap.put(CU.value(entry.key(),ctx,false),CU.value(cacheVal,ctx,false));\n          writeVals.add(cacheVal);\n        }\n else {\n          assert op == DELETE;\n          if (intercept) {\n            CacheObject old=entry.innerGet(null,null,true,ctx.loadPreviousValue(),true,true,true,subjId,null,taskName,null,keepBinary);\n            IgniteBiTuple<Boolean,?> interceptorRes=ctx.config().getInterceptor().onBeforeRemove(new CacheLazyEntry(ctx,entry.key(),old,keepBinary));\n            if (ctx.cancelRemove(interceptorRes))             continue;\n          }\n          if (rmvKeys == null)           rmvKeys=new ArrayList<>(size);\n          rmvKeys.add(entry.key().value(ctx.cacheObjectContext(),false));\n        }\n        filtered.add(entry);\n      }\n catch (      IgniteCheckedException e) {\n        if (err == null)         err=partialUpdateException();\n        err.add(F.asList(entry.key()),e);\n      }\ncatch (      GridCacheEntryRemovedException ignore) {\n        assert false : \"Entry cannot become obsolete while holding lock.\";\n      }\n    }\n    if (putMap != null || rmvKeys != null) {\n      err=updatePartialBatch(filtered,ver,writeVals,putMap,rmvKeys,expiryPlc,keepBinary,err,subjId,taskName);\n    }\n else     assert filtered.isEmpty();\n    if (err != null)     throw err;\n    return invokeResMap;\n  }\n  finally {\n    unlockEntries(locked);\n  }\n}"}
{"ids": "56541", "raw_code": "private static Set<TypeElement> findAllMembersInjectorsRecursively(Collection<TypeElement> membersInjectors){\n  Set<TypeElement> result=new HashSet<>();\n  for (  TypeElement element : membersInjectors) {\n    result.addAll(findAllMembersInjectorsRecursively(element));\n  }\n  return result;\n}"}
{"ids": "54743", "raw_code": "public Builder addSubButton(Context context,int drawable,int[] twoColors,String string){\n  if (drawables == null)   drawables=new ArrayList<>();\n  drawables.add(ContextCompat.getDrawable(context,drawable));\n  if (colors == null)   colors=new ArrayList<>();\n  colors.add(twoColors);\n  if (strings == null)   strings=new ArrayList<>();\n  strings.add(string);\n  return this;\n}"}
{"ids": "65629", "raw_code": "private void initComponents(){\n  labelValue=new Label();\n  labelValue.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(),\"Value\")));\n  labelName=new Label();\n  labelName.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(),\"Name\")));\n  labelContact=new Label();\n  labelContact.setValue(Msg.translate(Env.getCtx(),\"Contact\"));\n  labelEMail=new Label();\n  labelEMail.setValue(Msg.getMsg(Env.getCtx(),\"EMail\"));\n  labelPostal=new Label();\n  labelPostal.setValue(Msg.getMsg(Env.getCtx(),\"Postal\"));\n  labelPhone=new Label();\n  labelPhone.setValue(Msg.translate(Env.getCtx(),\"Phone\"));\n  fieldID=0;\n  fieldValue=new Textbox();\n  fieldValue.setMaxlength(40);\n  fieldValue.setAttribute(\"zk_component_ID\",\"Lookup_Criteria_fieldValue\");\n  fieldValue.addEventListener(Events.ON_CHANGE,this);\n  fieldName=new Textbox();\n  fieldName.setMaxlength(40);\n  fieldName.setAttribute(\"zk_component_ID\",\"Lookup_Criteria_fieldName\");\n  fieldName.addEventListener(Events.ON_CHANGE,this);\n  fieldContact=new Textbox();\n  fieldContact.setMaxlength(40);\n  fieldContact.setAttribute(\"zk_component_ID\",\"Lookup_Criteria_fieldContact\");\n  fieldContact.addEventListener(Events.ON_CHANGE,this);\n  fieldEMail=new Textbox();\n  fieldEMail.setMaxlength(40);\n  fieldEMail.setAttribute(\"zk_component_ID\",\"Lookup_Criteria_fieldEMail\");\n  fieldEMail.addEventListener(Events.ON_CHANGE,this);\n  fieldPostal=new Textbox();\n  fieldPostal.setMaxlength(40);\n  fieldPostal.setAttribute(\"zk_component_ID\",\"Lookup_Criteria_fieldPostal\");\n  fieldPostal.addEventListener(Events.ON_CHANGE,this);\n  fieldPhone=new Textbox();\n  fieldPhone.setMaxlength(40);\n  fieldPhone.setAttribute(\"zk_component_ID\",\"Lookup_Criteria_fieldPhone\");\n  fieldPhone.addEventListener(Events.ON_CHANGE,this);\n  checkAND=new Checkbox();\n  checkAND.setText(Msg.getMsg(Env.getCtx(),\"SearchAND\"));\n  checkAND.setName(\"SearchAND\");\n  checkAND.setTooltiptext(Msg.getMsg(Env.getCtx(),\"SearchANDInfo\"));\n  checkAND.setSelected(true);\n  checkAND.addActionListener(this);\n  checkAND.setAttribute(\"zk_component_ID\",\"Lookup_Criteria_checkAND\");\n  checkCustomer=new Checkbox();\n  checkCustomer.addActionListener(this);\n  checkCustomer.setAttribute(\"zk_component_ID\",\"Lookup_Criteria_checkCustomer\");\n  checkCustomer.setName(\"checkCustomer\");\n  if (m_isSOTrx)   checkCustomer.setLabel(Msg.getMsg(Env.getCtx(),\"OnlyCustomers\"));\n else   checkCustomer.setLabel(Msg.getMsg(Env.getCtx(),\"OnlyVendors\"));\n  checkCustomer.setSelected(m_isSOMatch);\n}"}
{"ids": "14277", "raw_code": "public static boolean isFMInstance(){\n  if (instanceType == null) {\n    instanceType=(String)configTags.get(\"INSTANCE_TYPE\");\n  }\n  return (instanceType != null && instanceType.equalsIgnoreCase(\"FM\"));\n}"}
{"ids": "2143", "raw_code": "private boolean tryRelease(long c,WorkQueue v,long inc){\n  int sp=(int)c, ns=sp & ~UNSIGNALLED;\n  if (v != null) {\n    int vs=v.scanState;\n    long nc=(v.stackPred & SP_MASK) | (UC_MASK & (c + inc));\n    if (sp == vs && U.compareAndSwapLong(this,CTL,c,nc)) {\n      v.scanState=ns;\n      LockSupport.unpark(v.parker);\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "66338", "raw_code": "public boolean execute(String sqlStatements,Connection conn){\n  if (conn == null)   throw new IllegalStateException(\"Require connection\");\n  String[] sql=convert(sqlStatements);\n  m_exception=null;\n  if (m_conversionError != null || sql == null)   return false;\n  boolean ok=true;\n  int i=0;\n  String statement=null;\n  try {\n    if (m_stmt == null)     m_stmt=conn.createStatement();\n    for (i=0; ok && i < sql.length; i++) {\n      statement=sql[i];\n      if (statement.length() == 0) {\n        if (m_verbose)         log.finer(\"Skipping empty (\" + i + \")\");\n      }\n else {\n        if (m_verbose)         log.info(\"Executing (\" + i + \") <<\"+ statement+ \">>\");\n else         log.info(\"Executing \" + i);\n        try {\n          m_stmt.clearWarnings();\n          int no=m_stmt.executeUpdate(statement);\n          SQLWarning warn=m_stmt.getWarnings();\n          if (warn != null) {\n            if (m_verbose)             log.info(\"- \" + warn);\n else {\n              log.info(\"Executing (\" + i + \") <<\"+ statement+ \">>\");\n              log.info(\"- \" + warn);\n            }\n          }\n          if (m_verbose)           log.fine(\"- ok \" + no);\n        }\n catch (        SQLException ex) {\n          if (!statement.startsWith(\"DROP \")) {\n            ok=false;\n            m_exception=ex;\n          }\n          if (!m_verbose)           log.info(\"Executing (\" + i + \") <<\"+ statement+ \">>\");\n          log.info(\"Error executing \" + i + \"/\"+ sql.length+ \" = \"+ ex);\n        }\n      }\n    }\n  }\n catch (  SQLException e) {\n    m_exception=e;\n    if (!m_verbose)     log.info(\"Executing (\" + i + \") <<\"+ statement+ \">>\");\n    log.info(\"Error executing \" + i + \"/\"+ sql.length+ \" = \"+ e);\n    return false;\n  }\n  return ok;\n}"}
{"ids": "62016", "raw_code": "@Override public Value sample(Assignment condition){\n  double prob=getProb(condition);\n  if (sampler.nextDouble() < prob) {\n    return ValueFactory.create(true);\n  }\n else {\n    return ValueFactory.create(false);\n  }\n}"}
{"ids": "75549", "raw_code": "private void initStyle(AttributeSet attributeSet,int defStyleAttribute){\n  TypedArray typedArray=mContext.obtainStyledAttributes(attributeSet,R.styleable.MaterialSearchView,defStyleAttribute,0);\n  if (typedArray != null) {\n    if (typedArray.hasValue(R.styleable.MaterialSearchView_searchBackground)) {\n      setBackground(typedArray.getDrawable(R.styleable.MaterialSearchView_searchBackground));\n    }\n    if (typedArray.hasValue(R.styleable.MaterialSearchView_android_textColor)) {\n      setTextColor(typedArray.getColor(R.styleable.MaterialSearchView_android_textColor,ContextCompat.getColor(mContext,R.color.black)));\n    }\n    if (typedArray.hasValue(R.styleable.MaterialSearchView_android_textColorHint)) {\n      setHintTextColor(typedArray.getColor(R.styleable.MaterialSearchView_android_textColorHint,ContextCompat.getColor(mContext,R.color.gray_50)));\n    }\n    if (typedArray.hasValue(R.styleable.MaterialSearchView_android_hint)) {\n      setHint(typedArray.getString(R.styleable.MaterialSearchView_android_hint));\n    }\n    if (typedArray.hasValue(R.styleable.MaterialSearchView_searchVoiceIcon)) {\n      setVoiceIcon(typedArray.getDrawable(R.styleable.MaterialSearchView_searchVoiceIcon));\n    }\n    if (typedArray.hasValue(R.styleable.MaterialSearchView_searchCloseIcon)) {\n      setClearIcon(typedArray.getDrawable(R.styleable.MaterialSearchView_searchCloseIcon));\n    }\n    if (typedArray.hasValue(R.styleable.MaterialSearchView_searchBackIcon)) {\n      setBackIcon(typedArray.getDrawable(R.styleable.MaterialSearchView_searchBackIcon));\n    }\n    if (typedArray.hasValue(R.styleable.MaterialSearchView_searchSuggestionBackground)) {\n      setSuggestionBackground(typedArray.getResourceId(R.styleable.MaterialSearchView_searchSuggestionBackground,R.color.search_layover_bg));\n    }\n    if (typedArray.hasValue(R.styleable.MaterialSearchView_android_inputType)) {\n      setInputType(typedArray.getInteger(R.styleable.MaterialSearchView_android_inputType,InputType.TYPE_CLASS_TEXT));\n    }\n    if (typedArray.hasValue(R.styleable.MaterialSearchView_searchBarHeight)) {\n      setSearchBarHeight(typedArray.getDimensionPixelSize(R.styleable.MaterialSearchView_searchBarHeight,getAppCompatActionBarHeight()));\n    }\n else {\n      setSearchBarHeight(getAppCompatActionBarHeight());\n    }\n    ViewCompat.setFitsSystemWindows(this,typedArray.getBoolean(R.styleable.MaterialSearchView_android_fitsSystemWindows,false));\n    typedArray.recycle();\n  }\n}"}
{"ids": "14717", "raw_code": "boolean validate(Set attrVals,String i18nFileName,boolean encodePassword) throws SMSException {\n  return validate(attrVals,i18nFileName,encodePassword,Collections.EMPTY_MAP);\n}"}
{"ids": "62407", "raw_code": "protected static void appendBigDecimalNumericType(StringBuilder sb){\n  sb.append(\"NUMERIC\");\n}"}
{"ids": "17604", "raw_code": "void removeAt(final int removeIndex){\n  final Object[] items=this.items;\n  if (removeIndex == takeIndex) {\n    items[takeIndex]=null;\n    takeIndex=inc(takeIndex);\n    count--;\n    if (itrs != null)     itrs.elementDequeued();\n  }\n else {\n    final int putIndex=this.putIndex;\n    for (int i=removeIndex; ; ) {\n      int next=inc(i);\n      if (next != putIndex) {\n        items[i]=items[next];\n        i=next;\n      }\n else {\n        items[i]=null;\n        this.putIndex=i;\n        break;\n      }\n    }\n    count--;\n    if (itrs != null)     itrs.removedAt(removeIndex);\n  }\n  notFull.signal();\n}"}
{"ids": "84022", "raw_code": "public double distance(Vector other){\n  return Math.sqrt(Math.pow(other.x - x,2) + Math.pow(other.y - y,2) + Math.pow(other.z - z,2));\n}"}
{"ids": "67840", "raw_code": "private void parse(File tmd) throws IOException {\n  RandomAccessFile f=new RandomAccessFile(tmd,\"r\");\n  f.seek(0);\n  this.signatureType=f.readInt();\n  f.read(signature,0,0x100);\n  f.seek(0x140);\n  f.read(issuer,0,0x40);\n  f.seek(0x180);\n  this.version=f.readByte();\n  this.CACRLVersion=f.readByte();\n  this.signerCRLVersion=f.readByte();\n  f.seek(0x184);\n  this.systemVersion=f.readLong();\n  this.titleID=f.readLong();\n  this.titleType=f.readInt();\n  this.groupID=f.readShort();\n  f.seek(0x19A);\n  f.read(reserved,0,62);\n  f.seek(0x1D8);\n  this.accessRights=f.readInt();\n  this.titleVersion=f.readShort();\n  this.contentCount=f.readShort();\n  this.bootIndex=f.readShort();\n  f.seek(0x1E4);\n  f.read(SHA2,0,32);\n  f.seek(0x204);\n  short indexOffset;\n  short commandCount;\n  for (int i=0; i < 64; i++) {\n    f.seek(0x204 + (0x24 * i));\n    indexOffset=f.readShort();\n    commandCount=f.readShort();\n    byte[] buffer=new byte[0x20];\n    f.read(buffer,0,0x20);\n    this.contentInfos[i]=new ContentInfo(indexOffset,commandCount,buffer);\n  }\n  this.contents=new Content[contentCount];\n  int ID;\n  short index;\n  short type;\n  long size;\n  for (int i=0; i < contentCount; i++) {\n    f.seek(0xB04 + (0x30 * i));\n    ID=f.readInt();\n    index=f.readShort();\n    type=f.readShort();\n    size=f.readLong();\n    byte[] buffer=new byte[0x20];\n    f.read(buffer,0,0x20);\n    this.contents[i]=new Content(ID,index,type,size,buffer,this);\n  }\n  if (f.read(cert2,0,0x300) != 0x300) {\n    Logger.log(\"Error reading TMD cert2\");\n  }\n  if (f.read(cert1,0,0x400) != 0x400) {\n    Logger.log(\"Error reading TMD cert1\");\n  }\n  f.close();\n}"}
{"ids": "11109", "raw_code": "public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){\n  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);\n}"}
{"ids": "30091", "raw_code": "public static void takeScreenshot(final String tag){\n  if (scenario == null) {\n    throw new ScreenshotException(\"Error taking screenshot: I'm missing a valid test scenario to attach the screenshot to\");\n  }\n  SpoonScreenshotAction.perform(tag);\n  final File screenshot=SpoonScreenshotAction.getLastScreenshot();\n  if (screenshot == null) {\n    throw new ScreenshotException(\"Screenshot was not taken correctly, check for failures in screenshot library\");\n  }\n  FileInputStream screenshotStream=null;\n  try {\n    screenshotStream=new FileInputStream(screenshot);\n    final byte fileContent[]=new byte[(int)screenshot.length()];\n    final int readImageBytes=screenshotStream.read(fileContent);\n    if (readImageBytes != -1) {\n      scenario.embed(fileContent,\"image/png\");\n    }\n  }\n catch (  final IOException ioe) {\n    throw new ScreenshotException(\"Exception while reading file \" + ioe);\n  }\n finally {\n    try {\n      if (screenshotStream != null) {\n        screenshotStream.close();\n      }\n    }\n catch (    final IOException ioe) {\n      throw new ScreenshotException(\"Error while closing screenshot stream: \" + ioe);\n    }\n  }\n}"}
{"ids": "12112", "raw_code": "private void importRunnerEnvironment(ImportProject importProject,FolderEntry baseProjectFolder) throws ForbiddenException, ServerException, ConflictException, IOException {\n  importRunnerEnvironment(importProject,baseProjectFolder,null);\n}"}
{"ids": "21120", "raw_code": "@Override public void doNotify() throws Exception {\n  log.info(\"Received notification that related system properties are changed\");\n  ScheduledExecutorService svc=service;\n  if (svc != null) {\n    try {\n      svc.schedule((Callable<Object>)this,0L,TimeUnit.MICROSECONDS);\n    }\n catch (    RejectedExecutionException ex) {\n      if (svc.isShutdown()) {\n        log.info(\"Property change notification ignored because this node is no longer backup leader.\");\n      }\n else {\n        throw ex;\n      }\n    }\n  }\n else {\n    log.info(\"Property change notification ignored because this node is no longer backup leader.\");\n  }\n}"}
{"ids": "41328", "raw_code": "public boolean checkRootByBuildTags(){\n  String buildTags=android.os.Build.TAGS;\n  if (buildTags != null && buildTags.contains(SU_TAG)) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "14376", "raw_code": "public boolean isUserActive(String realm){\n  boolean active=false;\n  try {\n    AMIdentity user=IdUtils.getIdentity(ssoToken,userId);\n    boolean isUserActive=user.isActive();\n    String loginStatus=getUserAttributeValue(user,USER_SERVICE_LOGIN_STATUS,ACTIVE);\n    String lockout=getUserAttributeValue(user,USER_SERVICE_NS_LOCKOUT,STRING_FALSE);\n    if (!isUserActive || !loginStatus.equalsIgnoreCase(ACTIVE) || !lockout.equalsIgnoreCase(STRING_FALSE)) {\n      errorMsg=getLocalizedString(\"userNotActive.message\");\n      writeLog(\"accountInactive.message\",userId);\n    }\n else     if (isAccountExpired(user)) {\n      errorMsg=getLocalizedString(\"userAccountExpired.message\");\n      writeLog(\"accountExpired.message\",userId);\n    }\n else     if (isUserLockout(userId,realm)) {\n      String obj[]={userId};\n      informationMsg=getLocalizedString(\"lockoutMsg.message\");\n      writeLog(\"accountLocked.message\",userId);\n    }\n else {\n      active=true;\n    }\n  }\n catch (  SSOException e) {\n    debug.warning(\"PWResetUserValidationModelImpl.isUserActive\",e);\n    errorMsg=getErrorString(e);\n  }\ncatch (  IdRepoException e) {\n    debug.warning(\"PWResetUserValidationModelImpl.isUserActive\",e);\n    errorMsg=getErrorString(e);\n  }\n  return active;\n}"}
{"ids": "56563", "raw_code": "@Override public <U>CompletableFuture<U> foldRight(final U seed,final BiFunction<? super T,U,U> function){\n  return CompletableFuture.supplyAsync(null,exec);\n}"}
{"ids": "76076", "raw_code": "private void algorithmDouglasPeucker(List<Entry> entries,double epsilon,int start,int end){\n  if (end <= start + 1) {\n    return;\n  }\n  int maxDistIndex=0;\n  double distMax=0;\n  Entry firstEntry=entries.get(start);\n  Entry lastEntry=entries.get(end);\n  for (int i=start + 1; i < end; i++) {\n    double dist=calcAngleBetweenLines(firstEntry,lastEntry,firstEntry,entries.get(i));\n    if (dist > distMax) {\n      distMax=dist;\n      maxDistIndex=i;\n    }\n  }\n  if (distMax > epsilon) {\n    keep[maxDistIndex]=true;\n    algorithmDouglasPeucker(entries,epsilon,start,maxDistIndex);\n    algorithmDouglasPeucker(entries,epsilon,maxDistIndex,end);\n  }\n}"}
{"ids": "84610", "raw_code": "public static void sort(AbstractList array,int[] indices){\n  for (int i=0; i < indices.length; i++) {\n    indices[i]=i;\n  }\n  int temp;\n  int j, n=array.size();\n  for (j=n / 2; j > 0; j--) {\n    adjust(array,indices,j,n);\n  }\n  for (j=n - 1; j > 0; j--) {\n    temp=indices[0];\n    indices[0]=indices[j];\n    indices[j]=temp;\n    adjust(array,indices,1,j);\n  }\n}"}
{"ids": "161", "raw_code": "public static boolean saveStringToFile(String dataInput,String path){\n  String filename=path;\n  File file=new File(filename);\n  FileOutputStream fos;\n  byte[] data=dataInput.getBytes();\n  try {\n    fos=new FileOutputStream(file);\n    fos.write(data);\n    fos.flush();\n    fos.close();\n    return true;\n  }\n catch (  FileNotFoundException e) {\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n  }\n  return false;\n}"}
{"ids": "342", "raw_code": "public static String quote(String input){\n  if (input.contains(\" \")) {\n    return \"\\\"\" + input + \"\\\"\";\n  }\n else {\n    return input;\n  }\n}"}
{"ids": "10812", "raw_code": "public static void assertThrowsCompletionException(final Consumer<Void> consumer,final Class<?> exceptionClass){\n  try {\n    consumer.accept(null);\n  }\n catch (  final CompletionException completionEx) {\n    final Throwable ex=completionEx.getCause();\n    if (ex.getClass() == exceptionClass) {\n      return;\n    }\n    Assert.fail(String.format(\"unexpected exception of type %s was thrown\",ex.getClass()));\n  }\n  Assert.fail(String.format(\"expected exception of type %s was not thrown\",exceptionClass));\n}"}
{"ids": "15279", "raw_code": "public Object put(Object key,Object value){\n  Object oldValue=null;\nsynchronized (map) {\n    oldValue=map.put(key,value);\n    if (oldValue != null) {\n      removeElement(key);\n    }\n    addElement(key);\n  }\n  return oldValue;\n}"}
{"ids": "12512", "raw_code": "public double run(){\n  try {\n    AudioInputStream inInput=AudioSystem.getAudioInputStream(files[0]);\n    AudioFeature audioFeatureInput=(AudioFeature)featureExtractorInput.calculate(inInput);\n  }\n catch (  Exception e) {\n  }\n  double avgDistance=0;\n  for (int i=0; i < arrayFeatureExtractorTrainSet.size(); i++) {\n    double distance2DB=audioThreadDistance(featureExtractorInput.getMFCC(),arrayFeatureExtractorTrainSet.get(i));\n    Log.i(\"size\",\"Different distance \" + distance2DB);\n    avgDistance+=distance2DB;\n  }\n  Log.i(\"size\",\"average distance \" + (avgDistance / arrayFeatureExtractorTrainSet.size()));\n  return avgDistance / arrayFeatureExtractorTrainSet.size();\n}"}
{"ids": "68294", "raw_code": "public Predicate(Term t){\n  terms.add(t);\n}"}
{"ids": "33913", "raw_code": "private void addOperations(Set<String> methodSignatures) throws OperationParseException {\n  for (  String sig : methodSignatures) {\n    TypedOperation operation=OperationParser.parse(sig);\n    operations.add(operation);\n  }\n}"}
{"ids": "70733", "raw_code": "private void writeLog(String log){\n  File file=new File(CrashHandlerDefault.Log_Default_Path + \"/\" + formatter.format(new Date())+ \".log\");\n  try {\n    FileOutputStream fileOutputStream=new FileOutputStream(file);\n    byte[] bytes=log.getBytes();\n    fileOutputStream.write(bytes);\n    fileOutputStream.close();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "28356", "raw_code": "public Rule(String pattern,Object tokenType,String nextState){\n  this.pattern=Pattern.compile(pattern);\n  this.tokenType=tokenType;\n  this.nextState=nextState;\n}"}
{"ids": "37276", "raw_code": "private void showPopup(final MouseEvent event){\n  int[] rows=getSelectedRows();\n  if ((rows.length == 0) || (rows.length == 1)) {\n    final int row=rowAtPoint(event.getPoint());\n    final int column=columnAtPoint(event.getPoint());\n    if ((row == -1) || (column == -1)) {\n      return;\n    }\n    changeSelection(row,column,false,false);\n    rows=getSelectedRows();\n  }\n  final JPopupMenu menu=new JPopupMenu();\n  menu.add(new JMenuItem(CActionProxy.proxy(new CDeleteBookmarkAction(m_bookmarkManager,rows))));\n  menu.show(event.getComponent(),event.getX(),event.getY());\n}"}
{"ids": "48181", "raw_code": "@Override public int read(byte b[],int off,int len) throws IOException {\n  if (bb == null) {\n    throw new IOException(\"read on a closed InputStream\");\n  }\n  if (b == null) {\n    throw new NullPointerException();\n  }\n else   if (off < 0 || len < 0 || len > b.length - off) {\n    throw new IndexOutOfBoundsException();\n  }\n else   if (len == 0) {\n    return 0;\n  }\n  int length=Math.min(bb.remaining(),len);\n  if (length == 0) {\n    return -1;\n  }\n  bb.get(b,off,length);\n  return length;\n}"}
{"ids": "23043", "raw_code": "public void removeEventListener(MultimediaMessagingSessionListener listener) throws RcsServiceNotAvailableException, RcsGenericException {\n  if (mApi == null) {\n    throw new RcsServiceNotAvailableException();\n  }\n  try {\n    WeakReference<IMultimediaMessagingSessionListener> weakRef=mMultimediaMessagingSessionListeners.remove(listener);\n    if (weakRef == null) {\n      return;\n    }\n    IMultimediaMessagingSessionListener multimediaMessagingSessionListener=weakRef.get();\n    if (multimediaMessagingSessionListener != null) {\n      mApi.removeEventListener2(multimediaMessagingSessionListener);\n    }\n  }\n catch (  Exception e) {\n    RcsIllegalArgumentException.assertException(e);\n    throw new RcsGenericException(e);\n  }\n}"}
{"ids": "56166", "raw_code": "private static boolean dateByMonth(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO){\n  boolean reducedPrec=false;\n  if (fields.remove(DateTimeFieldType.year())) {\n    bld.append(Constants.ye);\n    if (fields.remove(DateTimeFieldType.monthOfYear())) {\n      if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n        appendSeparator(bld,extended);\n        bld.appendMonthOfYear(2);\n        appendSeparator(bld,extended);\n        bld.appendDayOfMonth(2);\n      }\n else {\n        bld.appendLiteral('-');\n        bld.appendMonthOfYear(2);\n        reducedPrec=true;\n      }\n    }\n else {\n      if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n        checkNotStrictISO(fields,strictISO);\n        bld.appendLiteral('-');\n        bld.appendLiteral('-');\n        bld.appendDayOfMonth(2);\n      }\n else {\n        reducedPrec=true;\n      }\n    }\n  }\n else   if (fields.remove(DateTimeFieldType.monthOfYear())) {\n    bld.appendLiteral('-');\n    bld.appendLiteral('-');\n    bld.appendMonthOfYear(2);\n    if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n      appendSeparator(bld,extended);\n      bld.appendDayOfMonth(2);\n    }\n else {\n      reducedPrec=true;\n    }\n  }\n else   if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n    bld.appendLiteral('-');\n    bld.appendLiteral('-');\n    bld.appendLiteral('-');\n    bld.appendDayOfMonth(2);\n  }\n  return reducedPrec;\n}"}
{"ids": "66398", "raw_code": "public String[] parseLine(String line,boolean withLabel,boolean trace,boolean ignoreEmpty){\n  if (trace)   log.config(\"\" + line);\n  ArrayList<String> list=new ArrayList<String>();\n  for (int i=0; i < m_rows.size(); i++) {\n    ImpFormatRow row=(ImpFormatRow)m_rows.get(i);\n    StringBuffer entry=new StringBuffer();\n    if (withLabel) {\n      entry.append(row.getColumnName());\n      entry.append(\"=\");\n      if (row.isString())       entry.append(\"'\");\n else       if (row.isDate())       entry.append(\"TO_DATE('\");\n    }\n    String info=null;\n    if (row.isConstant())     info=\"Constant\";\n else     if (m_formatType.equals(X_AD_ImpFormat.FORMATTYPE_FixedPosition)) {\n      if (row.getStartNo() > 0 && row.getEndNo() <= line.length())       info=line.substring(row.getStartNo() - 1,row.getEndNo());\n    }\n else {\n      info=parseFlexFormat(line,m_formatType,row.getStartNo());\n    }\n    if (Util.isEmpty(info,true)) {\n      if (row.getDefaultValue() != null)       info=row.getDefaultValue();\n else       info=\"\";\n    }\n    entry.append(row.parse(info));\n    if (withLabel) {\n      if (row.isString())       entry.append(\"'\");\n else       if (row.isDate())       entry.append(\"','YYYY-MM-DD HH24:MI:SS')\");\n    }\n    if (!ignoreEmpty || (ignoreEmpty && info.length() != 0))     list.add(entry.toString());\n    if (trace)     log.fine(info + \"=>\" + entry.toString()+ \" (Length=\"+ info.length()+ \")\");\n  }\n  String[] retValue=new String[list.size()];\n  list.toArray(retValue);\n  return retValue;\n}"}
{"ids": "84975", "raw_code": "public WidgetProposalComputer(String text,int offset,Element rootElement,Element parentElement,IJavaProject javaProject) throws JavaModelException, UiBinderException {\n  super(javaProject,text,offset,text.length());\n  this.rootElement=rootElement;\n  this.parentElement=parentElement;\n  packageManager.readFromElement(rootElement);\n}"}
{"ids": "67286", "raw_code": "public List<Predicate<T>> parse(final List<String> queries) throws QueryParseException {\n  List<Predicate<T>> predicates=new ArrayList<>(queries.size());\n  for (  String query : queries) {\n    predicates.add(parse(query));\n  }\n  return predicates;\n}"}
{"ids": "34404", "raw_code": "public static Object deserializeStream(final String witness) throws Exception {\n  FileInputStream fileIs=new FileInputStream(witness);\n  ObjectInputStream objIs=new ObjectInputStream(fileIs);\n  return objIs.readObject();\n}"}
{"ids": "79503", "raw_code": "public static void rollback(boolean beganTransaction,String causeMessage,Throwable causeThrowable) throws GenericTransactionException {\n  if (beganTransaction) {\n    TransactionUtil.rollback(causeThrowable);\n  }\n else {\n    TransactionUtil.setRollbackOnly(causeMessage,causeThrowable);\n  }\n}"}
{"ids": "6965", "raw_code": "public LongArray(LongArray array){\n  this.ordered=array.ordered;\n  size=array.size;\n  items=new long[size];\n  System.arraycopy(array.items,0,items,0,size);\n}"}
{"ids": "47100", "raw_code": "private static <T>T reportGet(Object r) throws InterruptedException, ExecutionException {\n  if (r == null)   throw new InterruptedException();\n  if (r instanceof AltResult) {\n    Throwable x, cause;\n    if ((x=((AltResult)r).ex) == null)     return null;\n    if (x instanceof CancellationException)     throw (CancellationException)x;\n    if ((x instanceof CompletionException) && (cause=x.getCause()) != null)     x=cause;\n    throw new ExecutionException(x);\n  }\n  @SuppressWarnings(\"unchecked\") T t=(T)r;\n  return t;\n}"}
{"ids": "792", "raw_code": "protected void garbageCollect(VisualTable labels){\n  Iterator iter=labels.tuples();\n  while (iter.hasNext()) {\n    VisualItem item=(VisualItem)iter.next();\n    if (!item.isStartVisible() && !item.isEndVisible()) {\n      labels.removeTuple(item);\n    }\n  }\n}"}
{"ids": "76298", "raw_code": "public boolean sharesVariableWith(DefUse du){\n  return varName.equals(du.varName);\n}"}
{"ids": "86923", "raw_code": "private void populateNavDrawer(){\n  mNavDrawerItems.clear();\n  mNavDrawerItems.add(NAVDRAWER_ITEM_ACTIVITY1);\n  mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR);\n  mNavDrawerItems.add(NAVDRAWER_ITEM_ACTIVITY2);\n  mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR_SPECIAL);\n  mNavDrawerItems.add(NAVDRAWER_ITEM_ACTIVITY3);\n  createNavDrawerItems();\n}"}
{"ids": "25055", "raw_code": "public ArtifactCoordinates(final String groupId,final String artifactId,final String version,final String classifier){\n  this.groupId=groupId;\n  this.artifactId=artifactId;\n  this.version=version;\n  this.classifier=classifier;\n}"}
{"ids": "79005", "raw_code": "private CarbonIterator<BatchResult> executeBlockList(List<TableBlockInfo> blockList) throws QueryExecutionException {\n  queryModel.setTableBlockInfos(blockList);\n  this.queryExecutor=QueryExecutorFactory.getQueryExecutor();\n  CarbonIterator<BatchResult> iter=null;\n  try {\n    iter=queryExecutor.execute(queryModel);\n  }\n catch (  QueryExecutionException e) {\n    LOGGER.error(e.getMessage());\n    throw e;\n  }\n  return iter;\n}"}
{"ids": "79455", "raw_code": "public static boolean isJavaScriptEnabled(HttpServletRequest request){\n  HttpSession session=request.getSession();\n  Boolean javaScriptEnabled=(Boolean)session.getAttribute(\"javaScriptEnabled\");\n  if (javaScriptEnabled != null) {\n    return javaScriptEnabled.booleanValue();\n  }\n  return false;\n}"}
{"ids": "24185", "raw_code": "protected Link createLink(final String relation,final URI href){\n  return new Link(relation,href);\n}"}
{"ids": "86438", "raw_code": "public static Spannable createSpannableFromTextWithTemplate(String text,CharSequence innerTemplate){\n  SpannableString result=new SpannableString(text);\n  if (innerTemplate instanceof Spanned) {\n    int index=text.indexOf(innerTemplate.toString());\n    if (index >= 0) {\n      copySpans(result,(Spanned)innerTemplate,index);\n    }\n  }\n  return result;\n}"}
{"ids": "42131", "raw_code": "public ObjectGraph plusGraph(List<Object> activityScopeModules){\n  if (activityScopeModules == null) {\n    throw new IllegalArgumentException(\"You can't extend the application graph with a null list of modules\");\n  }\n  return graph.plus(activityScopeModules.toArray());\n}"}
{"ids": "33164", "raw_code": "public GroupCategorySet(GroupCategory[] categories){\n  Assert.isNotNull(categories);\n  fContent=new ArrayList(categories.length);\n  for (int i=0; i < categories.length; i++) {\n    if (!fContent.contains(categories[i]))     fContent.add(categories[i]);\n  }\n}"}
{"ids": "57737", "raw_code": "private boolean inSamePackage(Class<?> c1,Class<?> c2){\n  String nameC1=c1.getName();\n  String nameC2=c2.getName();\n  int indexDotC1=nameC1.lastIndexOf('.');\n  int indexDotC2=nameC2.lastIndexOf('.');\n  if (indexDotC1 != indexDotC2) {\n    return false;\n  }\n  if (indexDotC1 == -1) {\n    return true;\n  }\n  return nameC1.regionMatches(0,nameC2,0,indexDotC1);\n}"}
{"ids": "20391", "raw_code": "private void writeConstraintsToXml(XmlSerializer out,JobStatus jobStatus) throws IOException {\n  out.startTag(null,XML_TAG_PARAMS_CONSTRAINTS);\n  if (jobStatus.hasUnmeteredConstraint()) {\n    out.attribute(null,\"unmetered\",Boolean.toString(true));\n  }\n  if (jobStatus.hasConnectivityConstraint()) {\n    out.attribute(null,\"connectivity\",Boolean.toString(true));\n  }\n  if (jobStatus.hasIdleConstraint()) {\n    out.attribute(null,\"idle\",Boolean.toString(true));\n  }\n  if (jobStatus.hasChargingConstraint()) {\n    out.attribute(null,\"charging\",Boolean.toString(true));\n  }\n  out.endTag(null,XML_TAG_PARAMS_CONSTRAINTS);\n}"}
{"ids": "61911", "raw_code": "public void fillConditionalHoles(){\n  ValueRange possibleCondPairs=new ValueRange(table.keySet());\n  if (possibleCondPairs.getNbCombinations() < 500) {\n    Set<Assignment> possibleCondAssignments=possibleCondPairs.linearise();\n    possibleCondAssignments.remove(new Assignment());\n    for (    Assignment possibleCond : possibleCondAssignments) {\n      if (!table.containsKey(possibleCond)) {\n        addRow(possibleCond,ValueFactory.none(),1.0);\n      }\n    }\n  }\n}"}
{"ids": "34739", "raw_code": "private boolean showAppMenu(View view,boolean startDragging){\n  if (!mMenuHandler.isAppMenuShowing() && mMenuHandler.showAppMenu(view,startDragging)) {\n    if (!startDragging)     RecordUserAction.record(\"MobileUsingMenuBySwButtonTap\");\n    if (mOnAppMenuShownListener != null) {\n      mOnAppMenuShownListener.run();\n    }\n    return true;\n  }\n  return false;\n}"}
{"ids": "71675", "raw_code": "protected void writeNodeText(Node node) throws IOException {\n  String text=node.getText();\n  if ((text != null) && (text.length() > 0)) {\n    if (escapeText) {\n      text=escapeElementEntities(text);\n    }\n    lastOutputNodeType=Node.TEXT_NODE;\n    writer.write(text);\n  }\n}"}
{"ids": "11147", "raw_code": "public void insertRadians(double[] latlons,int coordPairIndex,boolean replaceEndsOfInsertedAtJoin){\n  int minPntsNeededForInsertion=2;\n  boolean atEnd=false;\n  boolean isClosed=isGeometryClosed();\n  int insertionPoint=coordPairIndex * 2;\n  if (insertionPoint >= rawllpts.length) {\n    if (isClosed) {\n      insertionPoint=rawllpts.length - 2;\n    }\n else {\n      insertionPoint=rawllpts.length;\n      atEnd=true;\n    }\n  }\n else   if (insertionPoint <= 0) {\n    if (isClosed) {\n      insertionPoint=2;\n    }\n else {\n      insertionPoint=0;\n      atEnd=true;\n    }\n  }\n  int newCoordStart=0;\n  int newCoordLength=latlons.length;\n  if (replaceEndsOfInsertedAtJoin) {\n    newCoordStart=2;\n    minPntsNeededForInsertion=6;\n    if (atEnd) {\n      minPntsNeededForInsertion-=2;\n      newCoordLength-=2;\n      if (insertionPoint == 0) {\n        newCoordStart=0;\n      }\n    }\n else {\n      newCoordLength-=4;\n    }\n  }\n  if (renderType == OMGraphic.RENDERTYPE_LATLON && latlons.length >= minPntsNeededForInsertion && latlons.length % 2 == 0) {\n    double[] oldrawllpnts=rawllpts;\n    int oldCoordsRemaining=oldrawllpnts.length - insertionPoint;\n    rawllpts=new double[oldrawllpnts.length + newCoordLength];\n    System.arraycopy(oldrawllpnts,0,rawllpts,0,insertionPoint);\n    System.arraycopy(latlons,newCoordStart,rawllpts,insertionPoint,newCoordLength);\n    System.arraycopy(oldrawllpnts,insertionPoint,rawllpts,insertionPoint + newCoordLength,oldCoordsRemaining);\n    setNeedToRegenerate(true);\n  }\n}"}
{"ids": "6027", "raw_code": "public static boolean cancelPotentialWork(Object data,ImageView imageView){\n  final BitmapWorkerTask bitmapWorkerTask=getBitmapWorkerTask(imageView);\n  if (bitmapWorkerTask != null) {\n    final Object bitmapData=bitmapWorkerTask.data;\n    if (bitmapData == null || !bitmapData.equals(data)) {\n      bitmapWorkerTask.cancel(true);\n      if (BuildConfig.DEBUG) {\n        Log.d(TAG,\"cancelPotentialWork - cancelled work for \" + data);\n      }\n    }\n else {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "32446", "raw_code": "private T3<Integer,Integer,byte[]> randomKey(Random rnd){\n  return keys[rnd.nextInt(keys.length)];\n}"}
{"ids": "36011", "raw_code": "private void fillExampleTable(DataSet dataSet,ProgressListener listener,int[] attributeColumns,MemoryExampleTable exampleTable) throws DataSetException, ProcessStoppedException, ParseException {\n  Attribute[] attributes=exampleTable.getAttributes();\n  dataSet.reset();\n  int numberOfRows=dataSet.getNumberOfRows();\n  DataRowFactory factory=new DataRowFactory(dataManagementType,DataRowFactory.POINT_AS_DECIMAL_CHARACTER);\n  boolean isRunningInProcess=isOperatorRunning();\n  while (dataSet.hasNext()) {\n    if (isRunningInProcess) {\n      operator.checkForStop();\n    }\n    if (shouldStop) {\n      throw new ProcessStoppedException();\n    }\n    DataSetRow currentRow=dataSet.nextRow();\n    if (listener != null) {\n      updateProcess(listener,dataSet.getCurrentRowIndex(),numberOfRows);\n    }\n    DataRow row=factory.create(attributes.length);\n    exampleTable.addDataRow(row);\n    int attributeIndex=0;\n    for (    Attribute attribute : attributes) {\n      if (currentRow.isMissing(attributeColumns[attributeIndex])) {\n        row.set(attribute,Double.NaN);\n      }\n else {\nswitch (attribute.getValueType()) {\ncase Ontology.INTEGER:\ncase Ontology.NUMERICAL:\ncase Ontology.REAL:\n          row.set(attribute,getNumber(currentRow,attributeColumns[attributeIndex]));\n        break;\ncase Ontology.DATE_TIME:\ncase Ontology.TIME:\ncase Ontology.DATE:\n      row.set(attribute,getDate(currentRow,attributeColumns[attributeIndex]));\n    break;\ndefault :\n  row.set(attribute,getStringIndex(attribute,currentRow,attributeColumns[attributeIndex]));\n}\n}\nattributeIndex++;\n}\n}\n}"}
{"ids": "52813", "raw_code": "public boolean isSpurious(int minClSize){\n  return children.isEmpty() && members.size() < minClSize;\n}"}
{"ids": "85179", "raw_code": "public AesDecryptor(byte[] key,int off,int len){\n  this.key=new byte[len];\n  System.arraycopy(key,off,this.key,0,len);\n}"}
{"ids": "23213", "raw_code": "static String extractNumberFromUriWithoutFormatting(String uri){\n  if (uri == null) {\n    return null;\n  }\n  int index0=uri.indexOf(URI_START_DELIMITER);\n  if (index0 != -1) {\n    uri=uri.substring(index0 + URI_START_DELIMITER.length(),uri.indexOf(URI_END_DELIMITER,index0));\n  }\n  int index1=uri.indexOf(TEL_URI_HEADER);\n  if (index1 != -1) {\n    uri=uri.substring(index1 + TEL_URI_HEADER.length());\n  }\n  index1=uri.indexOf(SIP_URI_HEADER);\n  if (index1 != -1) {\n    int index2=uri.indexOf(\"@\",index1);\n    uri=uri.substring(index1 + SIP_URI_HEADER.length(),index2);\n  }\n  int index2=uri.indexOf(\";\");\n  if (index2 != -1) {\n    uri=uri.substring(0,index2);\n  }\n  index2=uri.indexOf(\"?\");\n  if (index2 != -1) {\n    uri=uri.substring(0,index2);\n  }\n  return uri;\n}"}
{"ids": "32624", "raw_code": "public RemoteMethodCallResults invokeAndWait(final String endPointName,final RemoteMethodCall remoteCall){\n  EndPoint local;\nsynchronized (m_endPointMutex) {\n    local=m_localEndPoints.get(endPointName);\n  }\n  if (local == null) {\n    return invokeAndWaitRemote(remoteCall);\n  }\n else {\n    final long number=local.takeANumber();\n    final List<RemoteMethodCallResults> results=local.invokeLocal(remoteCall,number,getLocalNode());\n    if (results.size() == 0) {\n      throw new RemoteNotFoundException(\"Not found:\" + endPointName);\n    }\n    if (results.size() > 1) {\n      throw new IllegalStateException(\"Too many implementors, got back:\" + results);\n    }\n    return results.get(0);\n  }\n}"}
{"ids": "20264", "raw_code": "private void createElement(Document doc,Element parentElement,String elementName,boolean value){\n  Element element=doc.createElement(elementName);\n  element.appendChild(doc.createTextNode(Boolean.toString(value)));\n  parentElement.appendChild(element);\n}"}
{"ids": "27474", "raw_code": "protected void annotationValueToString(final StringBuilder sb,final BOp val,final int indent){\n  sb.append(val.toString());\n}"}
{"ids": "57826", "raw_code": "public Enumeration oids(){\n  return ordering.elements();\n}"}
{"ids": "54539", "raw_code": "@Override Map<String,Object> extractFields(String line){\n  if (!initialized) {\n    init();\n    initialized=true;\n  }\n  String[] values=fixedWidthParser.parseLine(line);\n  if (hasHeader && Arrays.deepEquals(values,header)) {\n    return null;\n  }\n  Map<String,Object> map=Maps.newHashMap();\n  int i=0;\n  for (  FixedWidthField field : fields) {\n    map.put(field.getName(),getValue(field,values[i++]));\n  }\n  return map;\n}"}
{"ids": "72952", "raw_code": "protected double ScalingFunction(int iDistance){\n  return Math.exp(-Math.pow((iDistance),2.0) / (2.0 * Math.pow(CorrelationWindow,2.0)));\n}"}
{"ids": "43012", "raw_code": "protected void updateIdealPoint(){\n  for (  Solution solution : this) {\n    if (solution.getNumberOfObjectives() != numberOfObjectives) {\n      throw new FrameworkException(\"incorrect number of objectives\");\n    }\n    for (int i=0; i < numberOfObjectives; i++) {\n      idealPoint[i]=Math.min(idealPoint[i],solution.getObjective(i));\n    }\n  }\n}"}
{"ids": "77930", "raw_code": "public SearchBuilder sort(SortFieldBuilder... builders){\n  sort.addAll(Arrays.asList(builders));\n  return this;\n}"}
{"ids": "74781", "raw_code": "@Override public final BufferedImage dataToRGB(byte[] data,final int width,final int height){\n  BufferedImage image;\n  data=dataToRGBByteArray(data,width,height);\n  final DataBuffer db=new DataBufferByte(data,data.length);\n  final int[] bands={0,1,2};\n  image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);\n  final Raster raster=Raster.createInterleavedRaster(db,width,height,width * 3,3,bands,null);\n  image.setData(raster);\n  return image;\n}"}
{"ids": "38385", "raw_code": "protected void createFileChooser(){\n  m_FileChooser=new JFileChooser(new File(System.getProperty(\"user.dir\")));\n  m_FileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n}"}
{"ids": "30108", "raw_code": "private boolean isNoun(String word){\n  if (nouns == null)   return false;\n  return nouns.contains(word.toLowerCase());\n}"}
{"ids": "22670", "raw_code": "public static void writeDocument(Document document,String encoding,OutputStream out,Writer writer,boolean omitXMLDeclaration) throws IOException, XMLException {\n  if (writer == null) {\n    writer=new OutputStreamWriter(out,encoding);\n  }\n  transformer.setOutputProperty(OutputKeys.ENCODING,encoding);\n  transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,omitXMLDeclaration ? \"yes\" : \"no\");\n  Source source=new DOMSource(document);\n  Result result=new StreamResult(writer);\n  try {\n    transformer.transform(source,result);\n  }\n catch (  TransformerException e) {\n    e.printStackTrace();\n    throw new XMLException(\"writeDocument failed\",e);\n  }\n  writer.flush();\n}"}
{"ids": "80498", "raw_code": "public boolean isQuestCompleted(final String name){\n  return quests.isQuestCompleted(name);\n}"}
{"ids": "20161", "raw_code": "private void updateButtonState(boolean dataChanged){\n  btnApply.setEnabled(dataChanged);\n  btnRevert.setEnabled(dataChanged);\n}"}
{"ids": "6508", "raw_code": "private void buildMenu(){\n  setVisible(false);\n  removeAll();\n  if (recentSearches.getLength() == 0) {\n    JMenuItem noRecent=new JMenuItem(UIManager.getString(\"SearchField.noRecentsText\"));\n    noRecent.setEnabled(false);\n    add(noRecent);\n  }\n else {\n    JMenuItem recent=new JMenuItem(UIManager.getString(\"SearchField.recentsMenuTitle\"));\n    recent.setEnabled(false);\n    add(recent);\n    for (    String searchString : recentSearches.getRecentSearches()) {\n      JMenuItem mi=new JMenuItem(searchString);\n      mi.addActionListener(this);\n      add(mi);\n    }\n    addSeparator();\n    clear=new JMenuItem(UIManager.getString(\"SearchField.clearRecentsText\"));\n    clear.addActionListener(this);\n    add(clear);\n  }\n}"}
{"ids": "12092", "raw_code": "public static String convertU8ToHexString(char u8){\n  return Integer.toHexString(u8);\n}"}
{"ids": "86175", "raw_code": "public static byte[] join(byte[] arrayA,byte... arrayB){\n  if ((arrayB == null) || (arrayB.length == 0)) {\n    return arrayA;\n  }\n  if ((arrayA == null) || (arrayA.length == 0)) {\n    return arrayB;\n  }\n  byte[] array=new byte[arrayA.length + arrayB.length];\n  System.arraycopy(arrayA,0,array,0,arrayA.length);\n  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);\n  return array;\n}"}
{"ids": "32546", "raw_code": "public void removeListener(Listener listener){\n  mListeners.remove(listener);\n}"}
{"ids": "43009", "raw_code": "protected double constrictionCoefficient(double c1,double c2){\n  double rho=c1 + c2;\n  if (rho <= 4) {\n    return 1.0;\n  }\n else {\n    return 2.0 / (2.0 - rho - Math.sqrt(Math.pow(rho,2.0) - 4.0 * rho));\n  }\n}"}
{"ids": "20060", "raw_code": "public ReplicatorCapabilities(TungstenProperties props) throws Exception {\n  Set<String> keys=props.keyNames();\n  for (  String key : keys) {\n    if (key.equals(ROLES)) {\n      List<String> tags=props.getStringList(key);\n      for (      String tag : tags) {\n        if (tag.equalsIgnoreCase(ROLE_MASTER)) {\n          addRole(ReplicatorCapabilities.ROLE_MASTER);\n        }\n else         if (tag.equalsIgnoreCase(ROLE_SLAVE)) {\n          addRole(ReplicatorCapabilities.ROLE_SLAVE);\n        }\n else         if (tag.equalsIgnoreCase(ROLE_RELAY)) {\n          addRole(ReplicatorCapabilities.ROLE_RELAY);\n        }\n else {\n          throw new Exception(\"Unknown capability role: \" + tag);\n        }\n      }\n    }\n else     if (key.equals(MODEL)) {\n      String tag=props.getString(key);\n      if (tag.equalsIgnoreCase(MODEL_PUSH)) {\n        setModel(MODEL_PUSH);\n      }\n else       if (tag.equalsIgnoreCase(MODEL_PULL)) {\n        setModel(MODEL_PULL);\n      }\n else       if (tag.equalsIgnoreCase(MODEL_PEER)) {\n        setModel(MODEL_PEER);\n      }\n else       if (tag.equalsIgnoreCase(UNKNOWN)) {\n        setModel(UNKNOWN);\n      }\n else {\n        throw new Exception(\"Unknown value for model: \" + tag);\n      }\n    }\n else     if (key.equals(CAP_CONSISTENCY)) {\n      setConsistencyCheck(props.getBoolean(CAP_CONSISTENCY));\n    }\n else     if (key.equals(CAP_HEARTBEAT)) {\n      setHeartbeat(props.getBoolean(CAP_HEARTBEAT));\n    }\n else     if (key.equals(CAP_FLUSH)) {\n      setFlush(props.getBoolean(CAP_FLUSH));\n    }\n else     if (key.equals(PROVISION)) {\n      String tag=props.getString(key);\n      if (tag.equalsIgnoreCase(PROVISION_DONOR)) {\n        setProvisionDriver(PROVISION_DONOR);\n      }\n else       if (tag.equalsIgnoreCase(PROVISION_JOINER)) {\n        setProvisionDriver(PROVISION_JOINER);\n      }\n else       if (tag.equalsIgnoreCase(UNKNOWN)) {\n        setProvisionDriver(UNKNOWN);\n      }\n else {\n        throw new Exception(\"Unknown provision driver: \" + tag);\n      }\n    }\n else {\n      throw new Exception(\"Unknown capability: \" + key);\n    }\n  }\n}"}
{"ids": "84842", "raw_code": "private void fitImageToView(){\n  Drawable drawable=getDrawable();\n  if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {\n    return;\n  }\n  if (matrix == null || prevMatrix == null) {\n    return;\n  }\n  int drawableWidth=drawable.getIntrinsicWidth();\n  int drawableHeight=drawable.getIntrinsicHeight();\n  float scaleX=(float)viewWidth / drawableWidth;\n  float scaleY=(float)viewHeight / drawableHeight;\nswitch (mScaleType) {\ncase CENTER:\n    scaleX=scaleY=1;\n  break;\ncase CENTER_CROP:\nscaleX=scaleY=Math.max(scaleX,scaleY);\nbreak;\ncase CENTER_INSIDE:\nscaleX=scaleY=Math.min(1,Math.min(scaleX,scaleY));\ncase FIT_CENTER:\nscaleX=scaleY=Math.min(scaleX,scaleY);\nbreak;\ncase FIT_XY:\nbreak;\ndefault :\nthrow new UnsupportedOperationException(\"TouchImageView does not support FIT_START or FIT_END\");\n}\nfloat redundantXSpace=viewWidth - (scaleX * drawableWidth);\nfloat redundantYSpace=viewHeight - (scaleY * drawableHeight);\nmatchViewWidth=viewWidth - redundantXSpace;\nmatchViewHeight=viewHeight - redundantYSpace;\nif (!isZoomed()) {\nmatrix.setScale(scaleX,scaleY);\nmatrix.postTranslate(redundantXSpace / 2,redundantYSpace / 2);\nnormalizedScale=1;\n}\n else {\nprevMatrix.getValues(m);\nm[Matrix.MSCALE_X]=matchViewWidth / drawableWidth * normalizedScale;\nm[Matrix.MSCALE_Y]=matchViewHeight / drawableHeight * normalizedScale;\nfloat transX=m[Matrix.MTRANS_X];\nfloat transY=m[Matrix.MTRANS_Y];\nfloat prevActualWidth=prevMatchViewWidth * normalizedScale;\nfloat actualWidth=getImageWidth();\ntranslateMatrixAfterRotate(Matrix.MTRANS_X,transX,prevActualWidth,actualWidth,prevViewWidth,viewWidth,drawableWidth);\nfloat prevActualHeight=prevMatchViewHeight * normalizedScale;\nfloat actualHeight=getImageHeight();\ntranslateMatrixAfterRotate(Matrix.MTRANS_Y,transY,prevActualHeight,actualHeight,prevViewHeight,viewHeight,drawableHeight);\nmatrix.setValues(m);\n}\nfixTrans();\nsetImageMatrix(matrix);\n}"}
{"ids": "24445", "raw_code": "public synchronized void close(){\n  if (isAlive) {\n    isAlive=false;\n    taskQueue.clear();\n    interrupt();\n  }\n}"}
{"ids": "75", "raw_code": "public String removeAfter(String original,String marker){\n  int index=original.indexOf(marker);\n  if (index != -1) {\n    return original.substring(0,index);\n  }\n  return original;\n}"}
{"ids": "36879", "raw_code": "public Address __sub__(final Object rhs){\n  return new Address(m_value.subtract(getBigInteger(rhs)));\n}"}
{"ids": "649", "raw_code": "private static boolean eq(Object o1,Object o2){\n  return (o1 == null ? o2 == null : o1.equals(o2));\n}"}
{"ids": "51368", "raw_code": "public void roll(int field,int value){\n  boolean increment=value >= 0;\n  int count=increment ? value : -value;\n  for (int i=0; i < count; i++) {\n    roll(field,increment);\n  }\n}"}
{"ids": "38084", "raw_code": "public String clusterResultsToString(){\n  return m_clusteringResults.toString();\n}"}
{"ids": "56533", "raw_code": "private void generateGetModuleMethod(NewBindingKey key,NewDependencyInfo dependencyInfo){\n  TypeElement scope=scopeCalculator.calculate(key);\n  generateGetModuleMethod(scope,dependencyInfo);\n}"}
{"ids": "51627", "raw_code": "private void addCalendarEvent(String summary,Date start,boolean allDay,Date end,String location,String description,String[] attendees){\n  Intent intent=new Intent(Intent.ACTION_INSERT);\n  intent.setType(\"vnd.android.cursor.item/event\");\n  long startMilliseconds=start.getTime();\n  intent.putExtra(\"beginTime\",startMilliseconds);\n  if (allDay) {\n    intent.putExtra(\"allDay\",true);\n  }\n  long endMilliseconds;\n  if (end == null) {\n    if (allDay) {\n      endMilliseconds=startMilliseconds + 24 * 60 * 60* 1000;\n    }\n else {\n      endMilliseconds=startMilliseconds;\n    }\n  }\n else {\n    endMilliseconds=end.getTime();\n  }\n  intent.putExtra(\"endTime\",endMilliseconds);\n  intent.putExtra(\"title\",summary);\n  intent.putExtra(\"eventLocation\",location);\n  intent.putExtra(\"description\",description);\n  if (attendees != null) {\n    intent.putExtra(Intent.EXTRA_EMAIL,attendees);\n  }\n  try {\n    rawLaunchIntent(intent);\n  }\n catch (  ActivityNotFoundException anfe) {\n    Log.w(TAG,\"No calendar app available that responds to \" + Intent.ACTION_INSERT);\n    intent.setAction(Intent.ACTION_EDIT);\n    launchIntent(intent);\n  }\n}"}
{"ids": "39359", "raw_code": "private String[] separatorAndEnclosuresToArray(){\n  String[] parts=m_Enclosures.split(\",\");\n  String[] result=new String[parts.length + 1];\n  result[0]=m_FieldSeparator;\n  int index=1;\n  for (  String e : parts) {\n    if (e.length() > 1 || e.length() == 0) {\n      throw new IllegalArgumentException(\"Enclosures can only be single characters\");\n    }\n    result[index++]=e;\n  }\n  return result;\n}"}
{"ids": "56766", "raw_code": "private BusinessObjectDataNotificationRegistrationEntity createBusinessObjectDataNotificationEntity(NamespaceEntity namespaceEntity,NotificationEventTypeEntity notificationEventTypeEntity,BusinessObjectDefinitionEntity businessObjectDefinitionEntity,FileTypeEntity fileTypeEntity,StorageEntity storageEntity,BusinessObjectDataStatusEntity newBusinessObjectDataStatusEntity,BusinessObjectDataStatusEntity oldBusinessObjectDataStatusEntity,NotificationRegistrationKey key,BusinessObjectDataNotificationFilter businessObjectDataNotificationFilter,List<JobAction> jobActions,NotificationRegistrationStatusEntity notificationRegistrationStatusEntity){\n  BusinessObjectDataNotificationRegistrationEntity businessObjectDataNotificationRegistrationEntity=new BusinessObjectDataNotificationRegistrationEntity();\n  businessObjectDataNotificationRegistrationEntity.setNamespace(namespaceEntity);\n  businessObjectDataNotificationRegistrationEntity.setName(key.getNotificationName());\n  businessObjectDataNotificationRegistrationEntity.setNotificationEventType(notificationEventTypeEntity);\n  businessObjectDataNotificationRegistrationEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);\n  if (StringUtils.isNotBlank(businessObjectDataNotificationFilter.getBusinessObjectFormatUsage())) {\n    businessObjectDataNotificationRegistrationEntity.setUsage(businessObjectDataNotificationFilter.getBusinessObjectFormatUsage());\n  }\n  businessObjectDataNotificationRegistrationEntity.setFileType(fileTypeEntity);\n  businessObjectDataNotificationRegistrationEntity.setBusinessObjectFormatVersion(businessObjectDataNotificationFilter.getBusinessObjectFormatVersion());\n  businessObjectDataNotificationRegistrationEntity.setStorage(storageEntity);\n  businessObjectDataNotificationRegistrationEntity.setNewBusinessObjectDataStatus(newBusinessObjectDataStatusEntity);\n  businessObjectDataNotificationRegistrationEntity.setOldBusinessObjectDataStatus(oldBusinessObjectDataStatusEntity);\n  businessObjectDataNotificationRegistrationEntity.setNotificationRegistrationStatus(notificationRegistrationStatusEntity);\n  List<NotificationActionEntity> notificationActionEntities=new ArrayList<>();\n  businessObjectDataNotificationRegistrationEntity.setNotificationActions(notificationActionEntities);\n  for (  JobAction jobAction : jobActions) {\n    JobDefinitionEntity jobDefinitionEntity=jobDefinitionDaoHelper.getJobDefinitionEntity(jobAction.getNamespace(),jobAction.getJobName());\n    NotificationJobActionEntity notificationJobActionEntity=new NotificationJobActionEntity();\n    notificationActionEntities.add(notificationJobActionEntity);\n    notificationJobActionEntity.setJobDefinition(jobDefinitionEntity);\n    notificationJobActionEntity.setCorrelationData(jobAction.getCorrelationData());\n    notificationJobActionEntity.setNotificationRegistration(businessObjectDataNotificationRegistrationEntity);\n  }\n  return businessObjectDataNotificationRegistrationEntity;\n}"}
{"ids": "46864", "raw_code": "void bind(String jndiUrl,Hashtable<?,?> attributes,RMIServer rmiServer,boolean rebind) throws NamingException, MalformedURLException {\n  InitialContext ctx=new InitialContext(attributes);\n  if (rebind)   ctx.rebind(jndiUrl,rmiServer);\n else   ctx.bind(jndiUrl,rmiServer);\n  ctx.close();\n}"}
{"ids": "3769", "raw_code": "public final void XprintLatin1NoLf(String string) throws IOException {\n  if (_source == null) {\n    return;\n  }\n  if (string == null) {\n    string=\"null\";\n  }\n  byte[] writeBuffer=_writeBuffer;\n  int writeLength=_writeLength;\n  int length=string.length();\n  int offset=0;\n  int charsLength=CHARS_LENGTH;\n  char[] chars=_chars;\n  while (length > 0) {\n    int sublen=Math.min(charsLength,writeBuffer.length - writeLength);\n    if (sublen <= 0) {\n      _source.write(writeBuffer,0,writeLength,false);\n      _position+=writeLength;\n      _isFlushRequired=true;\n      writeLength=0;\n      sublen=Math.min(charsLength,writeBuffer.length - writeLength);\n    }\n    sublen=Math.min(length,sublen);\n    string.getChars(offset,sublen,chars,0);\n    for (int i=0; i < sublen; i++) {\n      byte value=(byte)chars[i];\n      if (value == '\\r' || value == '\\n') {\n        length=0;\n        break;\n      }\n      writeBuffer[writeLength++]=value;\n    }\n    offset+=sublen;\n    length-=sublen;\n  }\n  _writeLength=writeLength;\n}"}
{"ids": "49460", "raw_code": "private int calculateStrokeWeight(){\n  int strokeWeight=(int)(getStrokeWidth() * 2.0f);\n  LOGGER.trace(\"Calculated Action Button stroke width: {}\",strokeWidth);\n  return strokeWeight;\n}"}
{"ids": "62108", "raw_code": "private static List<MatchResult> flattenResults(List<List<MatchResult>> allResults){\n  List<MatchResult> results=new ArrayList<MatchResult>();\n  results.addAll(allResults.remove(0));\n  for (  List<MatchResult> relResults : allResults) {\n    List<MatchResult> newResults=new ArrayList<MatchResult>();\n    for (    MatchResult curResult : results) {\n      for (      MatchResult relResult : relResults) {\n        MatchResult newResult=curResult.copy();\n        newResult.addAssignment(relResult);\n        newResults.add(newResult);\n      }\n    }\n    results=newResults;\n  }\n  return results;\n}"}
{"ids": "35339", "raw_code": "@Override public void visit(Mapping m,int line,int col,int nextLine,int nextCol) throws IOException {\n  if (previousLine != line) {\n    previousColumn=0;\n  }\n  if (line != nextLine || col != nextCol) {\n    if (line < maxLine) {\n      if (previousLine == line) {\n        out.append(',');\n      }\n      writeEntry(m,col);\n      previousLine=line;\n      previousColumn=col;\n    }\n else {\n      Preconditions.checkState(m == null);\n    }\n  }\n  for (int i=line; i <= nextLine && i < maxLine; i++) {\n    if (i == nextLine) {\n      break;\n    }\n    closeLine(false);\n    openLine(false);\n  }\n}"}
{"ids": "62796", "raw_code": "public boolean onClick(int position){\n  if (mMode == MODE_MULTIPLE_SELECT) {\n    if (mSelectedItems.contains(position)) {\n      mSelectedItems.remove(position);\n      if (mSelectedItems.isEmpty()) {\n        setMode(MODE_SINGLE_SELECT);\n      }\n    }\n else {\n      mSelectedItems.add(position);\n    }\n    notifySelectionChanged(position);\n    return true;\n  }\n  return false;\n}"}
{"ids": "14880", "raw_code": "public void addSessionEventURL(String url,SessionID sid){\n  Set<SessionID> sids=sessionEventURLs.get(url);\n  if (sids == null) {\n    sids=Collections.newSetFromMap(new ConcurrentHashMap<SessionID,Boolean>());\n    Set<SessionID> previousValue=sessionEventURLs.putIfAbsent(url,sids);\n    if (previousValue != null) {\n      sids=previousValue;\n    }\n  }\n  if (sids.add(sid)) {\n    notifyPersistenceManager();\n  }\n}"}
{"ids": "37824", "raw_code": "public final void addInstWithUnknown(Instances source,int attIndex) throws Exception {\n  double[] probs;\n  double weight, newWeight;\n  int classIndex;\n  Instance instance;\n  int j;\n  probs=new double[m_perBag.length];\n  for (j=0; j < m_perBag.length; j++) {\n    if (Utils.eq(totaL,0)) {\n      probs[j]=1.0 / probs.length;\n    }\n else {\n      probs[j]=m_perBag[j] / totaL;\n    }\n  }\n  Enumeration<Instance> enu=source.enumerateInstances();\n  while (enu.hasMoreElements()) {\n    instance=enu.nextElement();\n    if (instance.isMissing(attIndex)) {\n      classIndex=(int)instance.classValue();\n      weight=instance.weight();\n      m_perClass[classIndex]=m_perClass[classIndex] + weight;\n      totaL=totaL + weight;\n      for (j=0; j < m_perBag.length; j++) {\n        newWeight=probs[j] * weight;\n        m_perClassPerBag[j][classIndex]=m_perClassPerBag[j][classIndex] + newWeight;\n        m_perBag[j]=m_perBag[j] + newWeight;\n      }\n    }\n  }\n}"}
{"ids": "3290", "raw_code": "@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){\n  setSelection(position);\n}"}
{"ids": "58223", "raw_code": "public void traverseFragment(Node pos) throws org.xml.sax.SAXException {\n  Node top=pos;\n  while (null != pos) {\n    startNode(pos);\n    Node nextNode=pos.getFirstChild();\n    while (null == nextNode) {\n      endNode(pos);\n      if (top.equals(pos))       break;\n      nextNode=pos.getNextSibling();\n      if (null == nextNode) {\n        pos=pos.getParentNode();\n        if ((null == pos) || (top.equals(pos))) {\n          if (null != pos)           endNode(pos);\n          nextNode=null;\n          break;\n        }\n      }\n    }\n    pos=nextNode;\n  }\n}"}
{"ids": "83900", "raw_code": "public void updateProcessorDuration(Duration duration){\n  processor_duration_=Optional.of(duration);\n}"}
{"ids": "33777", "raw_code": "static Object invokeOrDie(Method method,Object object,Object... params){\n  try {\n    return method.invoke(object,params);\n  }\n catch (  IllegalAccessException e) {\n    throw new RuntimeException(\"Couldn't use Java reflection to implement protocol message \" + \"reflection.\",e);\n  }\ncatch (  InvocationTargetException e) {\n    final Throwable cause=e.getCause();\n    if (cause instanceof RuntimeException) {\n      throw (RuntimeException)cause;\n    }\n else     if (cause instanceof Error) {\n      throw (Error)cause;\n    }\n else {\n      throw new RuntimeException(\"Unexpected exception thrown by generated accessor method.\",cause);\n    }\n  }\n}"}
{"ids": "34352", "raw_code": "public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {\n  elementLevel++;\n  nsSupport.pushContext();\n  if (forceDTD && !hasOutputDTD)   startDTD(localName == null ? qName : localName,\"\",\"\");\n  write('<');\n  writeName(uri,localName,qName,true);\n  writeAttributes(atts);\n  if (elementLevel == 1) {\n    forceNSDecls();\n  }\n  writeNSDecls();\n  write('>');\n  if (htmlMode && (qName.equals(\"script\") || qName.equals(\"style\"))) {\n    cdataElement=true;\n  }\n  super.startElement(uri,localName,qName,atts);\n}"}
{"ids": "39996", "raw_code": "void initProgram(){\n  glUseProgram(this.program);\n  viewMatrixUniform=glGetUniformLocation(this.program,\"viewMatrix\");\n  projMatrixUniform=glGetUniformLocation(this.program,\"projMatrix\");\n  viewportSizeUniform=glGetUniformLocation(this.program,\"viewportSize\");\n  glUseProgram(0);\n}"}
{"ids": "33079", "raw_code": "public static String[] sortCopy(String[] objects){\n  int len=objects.length;\n  String[] copy=new String[len];\n  System.arraycopy(objects,0,copy,0,len);\n  sort(copy);\n  return copy;\n}"}
{"ids": "22818", "raw_code": "public Iterator<SimEvent> iterator(){\n  return list.iterator();\n}"}
{"ids": "74678", "raw_code": "private static boolean accepts(String accept_header,String to_accept){\n  String[] acceptValues=accept_header.split(\"\\\\s*(,|;)\\\\s*\");\n  Arrays.sort(acceptValues);\n  return Arrays.binarySearch(acceptValues,to_accept) > -1 || Arrays.binarySearch(acceptValues,to_accept.replaceAll(\"/.*$\",\"/*\")) > -1 || Arrays.binarySearch(acceptValues,\"*/*\") > -1;\n}"}
{"ids": "38446", "raw_code": "public String[] tokenize(String rawString){\n  Vector<String> result=new Vector<String>();\n  StringTokenizer tk=new StringTokenizer(rawString,m_Seperator);\n  while (tk.hasMoreTokens()) {\n    result.addElement(tk.nextToken());\n  }\n  String[] newStrings=new String[result.size()];\n  for (int i=0; i < result.size(); i++) {\n    newStrings[i]=result.elementAt(i);\n  }\n  return newStrings;\n}"}
{"ids": "19829", "raw_code": "public synchronized void returnLogCursor(LogCursor logCursor){\n  logCursor.setLoaned(false);\n}"}
{"ids": "15021", "raw_code": "void unassignPolicies(String serviceName,Set policyDNs,boolean toVerify) throws AMException, SSOException {\n  if ((policyDNs == null) || (policyDNs.isEmpty())) {\n    return;\n  }\n  AMTemplate template=getTemplate(serviceName,AMTemplate.POLICY_TEMPLATE);\n  unassignPolicies(template,policyDNs,toVerify);\n}"}
{"ids": "21790", "raw_code": "public boolean releaseLock(String lockName){\n  if (lockName == null || lockName.isEmpty()) {\n    s_logger.info(\"No lock name specified.\");\n    return false;\n  }\n  try {\n    InterProcessLock lock=s_acquiredLocks.get(lockName);\n    if (lock != null) {\n      s_acquiredLocks.remove(lockName);\n      lock.release();\n      s_logger.info(\"Released lock: \" + lockName);\n    }\n else {\n      return false;\n    }\n    return true;\n  }\n catch (  Exception e) {\n    s_logger.error(\"Release of lock: {} failed with Exception: \",lockName,e);\n    return false;\n  }\n}"}
{"ids": "8740", "raw_code": "private View findInterceptingView(float pos,View v){\n  for (  KeyButtonView otherView : mButtonViews) {\n    if (otherView == v) {\n      continue;\n    }\n    if (ArrayUtils.contains(SMALL_BUTTON_IDS,otherView.getId())) {\n      continue;\n    }\n    otherView.getLocationOnScreen(sLocation);\n    float otherPos=sLocation[mVertical ? 1 : 0];\n    float otherDimension=mVertical ? v.getHeight() : v.getWidth();\n    if (pos > (otherPos + otherDimension / 4) && pos < (otherPos + otherDimension)) {\n      return otherView;\n    }\n  }\n  return null;\n}"}
{"ids": "59925", "raw_code": "public void detachDiskAsync(final String vmId,VmDiskOperation vmDiskOperation,final FutureCallback<Task> responseCallback) throws IOException {\n  String path=String.format(\"%s/%s/detach_disk\",getBasePath(),vmId);\n  createObjectAsync(path,serializeObjectAsJson(vmDiskOperation),responseCallback);\n}"}
{"ids": "22846", "raw_code": "public static void main(String[] args){\n  Log.printLine(\"Starting CloudSimExample5...\");\n  try {\n    int num_user=2;\n    Calendar calendar=Calendar.getInstance();\n    boolean trace_flag=false;\n    CloudSim.init(num_user,calendar,trace_flag);\n    @SuppressWarnings(\"unused\") Datacenter datacenter0=createDatacenter(\"Datacenter_0\");\n    @SuppressWarnings(\"unused\") Datacenter datacenter1=createDatacenter(\"Datacenter_1\");\n    DatacenterBroker broker1=createBroker(1);\n    int brokerId1=broker1.getId();\n    DatacenterBroker broker2=createBroker(2);\n    int brokerId2=broker2.getId();\n    vmlist1=new ArrayList<Vm>();\n    vmlist2=new ArrayList<Vm>();\n    int vmid=0;\n    int mips=250;\n    long size=10000;\n    int ram=512;\n    long bw=1000;\n    int pesNumber=1;\n    String vmm=\"Xen\";\n    Vm vm1=new Vm(vmid,brokerId1,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());\n    Vm vm2=new Vm(vmid,brokerId2,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());\n    vmlist1.add(vm1);\n    vmlist2.add(vm2);\n    broker1.submitVmList(vmlist1);\n    broker2.submitVmList(vmlist2);\n    cloudletList1=new ArrayList<Cloudlet>();\n    cloudletList2=new ArrayList<Cloudlet>();\n    int id=0;\n    long length=40000;\n    long fileSize=300;\n    long outputSize=300;\n    UtilizationModel utilizationModel=new UtilizationModelFull();\n    Cloudlet cloudlet1=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);\n    cloudlet1.setUserId(brokerId1);\n    Cloudlet cloudlet2=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);\n    cloudlet2.setUserId(brokerId2);\n    cloudletList1.add(cloudlet1);\n    cloudletList2.add(cloudlet2);\n    broker1.submitCloudletList(cloudletList1);\n    broker2.submitCloudletList(cloudletList2);\n    CloudSim.startSimulation();\n    List<Cloudlet> newList1=broker1.getCloudletReceivedList();\n    List<Cloudlet> newList2=broker2.getCloudletReceivedList();\n    CloudSim.stopSimulation();\n    Log.print(\"=============> User \" + brokerId1 + \"    \");\n    printCloudletList(newList1);\n    Log.print(\"=============> User \" + brokerId2 + \"    \");\n    printCloudletList(newList2);\n    Log.printLine(\"CloudSimExample5 finished!\");\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    Log.printLine(\"The simulation has been terminated due to an unexpected error\");\n  }\n}"}
{"ids": "1075", "raw_code": "public ConcurrentHashMapPro(Map<? extends K,? extends V> m){\n  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);\n  putAll(m);\n}"}
{"ids": "63064", "raw_code": "static <K>void generate(ArrayList<K> list,UniversalHash<K> hash,int level,int seed,ByteArrayOutputStream out){\n  int size=list.size();\n  if (size <= 1) {\n    out.write(size);\n    return;\n  }\n  if (level > 32) {\n    throw new IllegalStateException(\"Too many recursions; \" + \" incorrect universal hash function?\");\n  }\n  if (size <= MAX_SIZE) {\n    int maxOffset=MAX_OFFSETS[size];\n    int[] hashes=new int[size];\n    for (int i=0; i < size; i++) {\n      hashes[i]=hash.hashCode(list.get(i),level,seed);\n    }\n    int testSize=size;\n    if (size >= SPEEDUP) {\n      testSize++;\n      maxOffset/=testSize;\n    }\n    nextOffset:     for (int offset=0; offset < maxOffset; offset++) {\n      int bits=0;\n      for (int i=0; i < size; i++) {\n        int x=hashes[i];\n        int h=hash(x,level,offset,testSize);\n        if ((bits & (1 << h)) != 0) {\n          continue nextOffset;\n        }\n        bits|=1 << h;\n      }\n      if (size >= SPEEDUP) {\n        int pos=Integer.numberOfTrailingZeros(~bits);\n        writeSizeOffset(out,size,offset * (size + 1) + pos);\n      }\n else {\n        writeSizeOffset(out,size,offset);\n      }\n      return;\n    }\n  }\n  int split;\n  if (size > 57 * DIVIDE) {\n    split=size / (36 * DIVIDE);\n  }\n else {\n    split=(size - 47) / DIVIDE;\n  }\n  split=Math.max(2,split);\n  boolean isRoot=level == 0;\n  ArrayList<ArrayList<K>> lists;\n  do {\n    lists=new ArrayList<ArrayList<K>>(split);\n    for (int i=0; i < split; i++) {\n      lists.add(new ArrayList<K>(size / split));\n    }\n    for (int i=0; i < size; i++) {\n      K x=list.get(i);\n      ArrayList<K> l=lists.get(hash(x,hash,level,seed,0,split));\n      l.add(x);\n      if (isRoot && split >= SPLIT_MANY && l.size() > 36 * DIVIDE * 10) {\n        level++;\n        lists=null;\n        break;\n      }\n    }\n  }\n while (lists == null);\n  if (split >= SPLIT_MANY) {\n    out.write(SPLIT_MANY);\n  }\n  writeVarInt(out,split);\n  boolean multiThreaded=isRoot && list.size() > 1000;\n  list.clear();\n  list.trimToSize();\n  if (multiThreaded) {\n    generateMultiThreaded(lists,hash,level,seed,out);\n  }\n else {\n    for (    ArrayList<K> s2 : lists) {\n      generate(s2,hash,level + 1,seed,out);\n    }\n  }\n  if (isRoot && split >= SPLIT_MANY) {\n    out.write(level);\n  }\n}"}
{"ids": "35841", "raw_code": "private void initialiseCommands(){\n  reward=new AchievementRewards(this);\n  achievementDisplay=new AchievementDisplay(this);\n  giveCommand=new GiveCommand(this);\n  bookCommand=new BookCommand(this);\n  topCommand=new TopCommand(this);\n  statsCommand=new StatsCommand(this);\n  infoCommand=new InfoCommand(this);\n  listCommand=new ListCommand(this);\n  helpCommand=new HelpCommand(this);\n  checkCommand=new CheckCommand(this);\n  deleteCommand=new DeleteCommand(this);\n}"}
{"ids": "19468", "raw_code": "public CreateCustomMetric(Monitoring monitoringService,String projectResource){\n  this.monitoringService=monitoringService;\n  this.projectResource=projectResource;\n  this.metricType=CUSTOM_METRIC_DOMAIN + \"/\" + DEFAULT_METRIC_TYPE;\n  this.metricName=projectResource + \"/metricDescriptors/\" + metricType;\n}"}
{"ids": "40246", "raw_code": "private boolean journalRebuildRequired(){\n  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;\n  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();\n}"}
{"ids": "52653", "raw_code": "public static boolean deleteFilesInADirectory(String directoryPath){\n  if ((directoryPath == null) || directoryPath.isEmpty()) {\n    return false;\n  }\n  boolean isSuccessfulDelete=true;\n  List<File> files=getListOfFilesInADirectory(directoryPath);\n  if (files == null) {\n    return false;\n  }\n  try {\n    for (    File file : files) {\n      boolean fileDeleteSuccess=deleteFile(directoryPath,file.getName());\n      if (!fileDeleteSuccess) {\n        isSuccessfulDelete=false;\n      }\n    }\n  }\n catch (  Exception e) {\n    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));\n    isSuccessfulDelete=false;\n  }\n  return isSuccessfulDelete;\n}"}
{"ids": "10066", "raw_code": "public AnnotationFS add(AnnotationFS aOriginFs,AnnotationFS aTargetFs,JCas aJCas,int aStart,int aEnd,AnnotationFeature aFeature,Object aLabelValue) throws BratAnnotationException {\n  if (crossMultipleSentence || isSameSentence(aJCas,aOriginFs.getBegin(),aTargetFs.getEnd())) {\n    return interalAddToCas(aJCas,aStart,aEnd,aOriginFs,aTargetFs,aLabelValue,aFeature);\n  }\n else {\n    throw new ArcCrossedMultipleSentenceException(\"Arc Annotation shouldn't cross sentence boundary\");\n  }\n}"}
{"ids": "68780", "raw_code": "private String readLine(){\n  StringBuffer sb=new StringBuffer();\n  while (buf.remaining() > 0) {\n    char c=(char)buf.get();\n    if (c == '\\r') {\n      if (buf.remaining() > 0) {\n        char n=(char)buf.get(buf.position());\n        if (n == '\\n') {\n          buf.get();\n        }\n      }\n      break;\n    }\n else     if (c == '\\n') {\n      break;\n    }\n    sb.append(c);\n  }\n  return sb.toString();\n}"}
{"ids": "75691", "raw_code": "@Override public int showOpenDialog(Component parent){\n  File selFile;\n  int result;\n  m_DialogType=OPEN_DIALOG;\n  initGUI(OPEN_DIALOG);\n  result=super.showOpenDialog(parent);\n  m_DialogType=UNHANDLED_DIALOG;\n  removePropertyChangeListener(m_Listener);\n  selFile=getSelectedFile();\n  if ((result == APPROVE_OPTION) && (getFileMustExist()) && (selFile == null)) {\n    result=showOpenDialog(parent);\n  }\n else   if ((result == APPROVE_OPTION) && (getFileMustExist()) && (selFile != null)&& (selFile.isFile())&& (!selFile.exists())) {\n    int retVal=JOptionPane.showConfirmDialog(parent,\"The file '\" + selFile + \"' does not exist - please select again!\");\n    if (retVal == JOptionPane.OK_OPTION)     result=showOpenDialog(parent);\n else     result=CANCEL_OPTION;\n  }\n  if (result == APPROVE_OPTION) {\n    if (getFileFilter() instanceof ExtensionFileFilter)     m_LastFilter=(ExtensionFileFilter)getFileFilter();\n else     m_LastFilter=null;\n    if (getSelectedFile() != null)     configureCurrentHandlerHook(OPEN_DIALOG);\n  }\n  return result;\n}"}
{"ids": "41723", "raw_code": "public boolean isNearlyEqualTo(DoubleVector v,double tolerance){\n  return Math.abs(v.x - x) < tolerance && Math.abs(v.y - y) < tolerance && Math.abs(v.z - z) < tolerance;\n}"}
{"ids": "34730", "raw_code": "void createVerticalSnapAnimation(boolean visible){\n  float translationY=visible ? 0.0f : mTotalHeight;\n  float yDifference=Math.abs(translationY - getTranslationY()) / mTotalHeight;\n  long duration=(long)(MS_ANIMATION_DURATION * yDifference);\n  createAnimation(1.0f,0,translationY,duration);\n}"}
{"ids": "53873", "raw_code": "@Override public int update(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {\n  return cipher.update(input,inputOffset,inputLen,output,outputOffset);\n}"}
{"ids": "17341", "raw_code": "private String validateInputs(){\n  if (jarRadio.getSelection()) {\n    File f=new File(jarPath.getText());\n    if (!f.exists()) {\n      return \"Jar file doesn't exists\";\n    }\n    if (!f.canRead()) {\n      return \"Can't read Jar file directory\";\n    }\n  }\n else {\n    File f=new File(dirPath.getText());\n    if (!f.exists()) {\n      return \"Base Path directory doesn't exists\";\n    }\n    if (!f.canRead()) {\n      return \"Can't read Base Path directory\";\n    }\n  }\n  return null;\n}"}
{"ids": "1634", "raw_code": "public static double parseDoubleString(String st,TExecutionContext context){\n  double ret=0;\n  Matcher m=DOUBLE_PATTERN.matcher(st);\n  if (m.lookingAt()) {\n    String truncated=st.substring(0,m.end());\n    if (!truncated.equals(st)) {\n      context.reportTruncate(st,truncated);\n    }\n    try {\n      ret=Double.parseDouble(truncated);\n    }\n catch (    NumberFormatException e) {\n      context.reportBadValue(e.getMessage());\n    }\n  }\n else   context.reportBadValue(st);\n  return ret;\n}"}
{"ids": "42702", "raw_code": "public ClassPath(DexFile... classPath) throws IOException {\n  this(Lists.newArrayList(classPath),15);\n}"}
{"ids": "9476", "raw_code": "public double greatCircleAzimuth(Location location){\n  if (location == null) {\n    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,\"Location\",\"greatCircleAzimuth\",\"missingLocation\"));\n  }\n  double lat1=Math.toRadians(this.latitude);\n  double lon1=Math.toRadians(this.longitude);\n  double lat2=Math.toRadians(location.latitude);\n  double lon2=Math.toRadians(location.longitude);\n  if (lat1 == lat2 && lon1 == lon2) {\n    return 0;\n  }\n  if (lon1 == lon2) {\n    return lat1 > lat2 ? 180 : 0;\n  }\n  double y=Math.cos(lat2) * Math.sin(lon2 - lon1);\n  double x=Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  double azimuthRadians=Math.atan2(y,x);\n  return Double.isNaN(azimuthRadians) ? 0 : Math.toDegrees(azimuthRadians);\n}"}
{"ids": "38946", "raw_code": "private boolean[] defineIrrelevant(Random random){\n  boolean[] irr=new boolean[getNumAttributes()];\n  for (int i=0; i < irr.length; i++) {\n    irr[i]=false;\n  }\n  int numIrr=0;\n  for (int i=0; (numIrr < getNumIrrelevant()) && (i < getNumAttributes() * 5); i++) {\n    int maybeNext=(int)(random.nextDouble() * irr.length);\n    if (irr[maybeNext] == false) {\n      irr[maybeNext]=true;\n      numIrr++;\n    }\n  }\n  return irr;\n}"}
{"ids": "80425", "raw_code": "public void addDropItem(final String name,final double probability,final int amount){\n  dropsItems.add(new DropItem(name,probability,amount));\n}"}
{"ids": "46991", "raw_code": "protected void unparsedEntDecl(String name,String pubid,String sysid,String notation) throws SAXException {\n  mHandDtd.unparsedEntityDecl(name,pubid,sysid,notation);\n}"}
{"ids": "47008", "raw_code": "public Enumeration<Permission> elements(){\nsynchronized (this) {\n    return Collections.enumeration(permsMap.values());\n  }\n}"}
{"ids": "34907", "raw_code": "private static String formatList(String[] stringList,String listPattern,String listCompositionPattern){\n  if (listPattern == null || listCompositionPattern == null) {\n    StringBuilder result=new StringBuilder();\n    for (int i=0; i < stringList.length; ++i) {\n      if (i > 0) {\n        result.append(',');\n      }\n      result.append(stringList[i]);\n    }\n    return result.toString();\n  }\n  if (stringList.length > 3) {\n    MessageFormat format=new MessageFormat(listCompositionPattern);\n    stringList=composeList(format,stringList);\n  }\n  Object[] args=new Object[stringList.length + 1];\n  System.arraycopy(stringList,0,args,1,stringList.length);\n  args[0]=new Integer(stringList.length);\n  MessageFormat format=new MessageFormat(listPattern);\n  return format.format(args);\n}"}
{"ids": "15204", "raw_code": "public JsonArray add(Object value){\n  list.add(value);\n  return this;\n}"}
{"ids": "23156", "raw_code": "public String comment() throws ParseException {\n  StringBuffer retval=new StringBuffer();\n  if (lookAhead(0) != '(')   return null;\n  consume(1);\n  while (true) {\n    char next=getNextChar();\n    if (next == ')') {\n      break;\n    }\n else     if (next == '\\0') {\n      throw new ParseException(this.buffer + \" :unexpected EOL\",this.ptr);\n    }\n else     if (next == '\\\\') {\n      retval.append(next);\n      next=getNextChar();\n      if (next == '\\0')       throw new ParseException(this.buffer + \" : unexpected EOL\",this.ptr);\n      retval.append(next);\n    }\n else {\n      retval.append(next);\n    }\n  }\n  return retval.toString();\n}"}
{"ids": "54820", "raw_code": "public static boolean ignorableWhitespace(String value){\n  Matcher m;\n  m=whitespacePattern.matcher(value);\n  if (m.matches())   return true;\n else   return false;\n}"}
{"ids": "34446", "raw_code": "public DelphiWorkgroup(File xmlFile) throws IOException {\n  if (xmlFile == null) {\n    throw new IllegalArgumentException(\"No .groupproje file provided.\");\n  }\n else   if (!xmlFile.exists()) {\n    throw new IOException(\".grupproj XML not found:\" + xmlFile.getAbsolutePath());\n  }\n  parseFile(xmlFile);\n}"}
{"ids": "15994", "raw_code": "public BufferedBlockCipher(BlockCipher cipher){\n  this.cipher=cipher;\n  buf=new byte[cipher.getBlockSize()];\n  bufOff=0;\n  String name=cipher.getAlgorithmName();\n  int idx=name.indexOf('/') + 1;\n  pgpCFB=(idx > 0 && name.startsWith(\"PGP\",idx));\n  if (pgpCFB || cipher instanceof StreamCipher) {\n    partialBlockOkay=true;\n  }\n else {\n    partialBlockOkay=(idx > 0 && (name.startsWith(\"OpenPGP\",idx)));\n  }\n}"}
{"ids": "86736", "raw_code": "public static int readInts(final File f,final LongIndex a,final long offset,final long addend) throws IOException {\n  return readInts(f,0,(int)f.length() / 4,a,offset,addend);\n}"}
{"ids": "22237", "raw_code": "public void waitAllSitesDbStable(){\n  String prefix=\"Waiting for DB cluster become stable on all sites ...\";\n  log.info(prefix);\n  DbJmxClient geoInstance=getJmxClient(LOCALHOST);\n  List<URI> vdcIdIter=queryByType(VirtualDataCenter.class,true);\n  for (  URI vdcId : vdcIdIter) {\n    log.info(\"loop db status check on {}\",vdcId.toString());\n    VirtualDataCenter vdc=queryObject(VirtualDataCenter.class,vdcId);\n    if (!shouldCheckDbStatus(vdc)) {\n      log.error(\"ignore vdc for db status check {}\",vdcId);\n      continue;\n    }\n    if (vdc.getConnectionStatus() != ConnectionStatus.DISCONNECTED) {\n      Site activeSite=drUtil.getActiveSite(vdc.getShortId());\n      waitDbNodesStable(geoInstance,vdc.getShortId(),activeSite.getNodeCount());\n    }\n  }\n}"}
{"ids": "65524", "raw_code": "public void saveHierarchyState(Bundle container){\n  dispatchSaveInstanceState(container);\n}"}
{"ids": "40588", "raw_code": "private static void pipe(InputStream source,OutputStream dest) throws IOException {\n  byte[] buf=new byte[1024];\n  int read=0;\n  while ((read=source.read(buf)) >= 0) {\n    if (null != dest)     dest.write(buf,0,read);\n  }\n  if (null != dest)   dest.flush();\n}"}
{"ids": "43929", "raw_code": "@Override public void init(FilterConfig config) throws ServletException {\n  try {\n    expiry=Math.min(Math.max(MIN_EXPIRY,Long.parseLong(config.getInitParameter(CACHE_CONTROL))),MAX_EXPIRY);\n  }\n catch (  NumberFormatException nfe) {\n    LOGGER.warn(\"Failed to parse \" + CACHE_CONTROL + \" value.\",nfe);\n    expiry=null;\n  }\n}"}
{"ids": "14483", "raw_code": "@Override public int hashCode(){\n  int code=0;\n  if (name != null) {\n    code+=name.hashCode();\n  }\n  if (applicationName != null) {\n    code+=applicationName.hashCode();\n  }\n  if (resourceNames != null) {\n    code+=resourceNames.hashCode();\n  }\n  if (actionValues != null) {\n    code+=actionValues.hashCode();\n  }\n  if (advices != null) {\n    code+=advices.hashCode();\n  }\n  if (attributes != null) {\n    code+=attributes.hashCode();\n  }\n  return code;\n}"}
{"ids": "80545", "raw_code": "public static boolean substractTradingFee(Player player,int price){\n  BigDecimal fee=calculateFee(player,price);\n  return player.drop(\"money\",fee.intValue());\n}"}
{"ids": "62029", "raw_code": "public ComplexParameter(MathExpression expression){\n  this.expression=expression;\n}"}
{"ids": "38022", "raw_code": "@Override public Enumeration<String> enumerateMeasures(){\n  Vector<String> newVector=new Vector<String>(1);\n  newVector.addElement(\"measureOutOfBagError\");\n  return newVector.elements();\n}"}
{"ids": "9879", "raw_code": "public SampleDriver(){\n  handlers=new ArrayList<SampleHandler>();\n  handlers.add(new CertificateSampleHandler());\n  handlers.add(new GroupSampleHandler());\n  handlers.add(new SolutionUserSampleHandler());\n  handlers.add(new UserSampleHandler());\n}"}
{"ids": "85705", "raw_code": "public long[] readLongArray(final int items,final JBBPByteOrder byteOrder) throws IOException {\n  int pos=0;\n  if (items < 0) {\n    long[] buffer=new long[INITIAL_ARRAY_BUFFER_SIZE];\n    while (hasAvailableData()) {\n      final long next=readLong(byteOrder);\n      if (buffer.length == pos) {\n        final long[] newbuffer=new long[buffer.length << 1];\n        System.arraycopy(buffer,0,newbuffer,0,buffer.length);\n        buffer=newbuffer;\n      }\n      buffer[pos++]=next;\n    }\n    if (buffer.length == pos) {\n      return buffer;\n    }\n    final long[] result=new long[pos];\n    System.arraycopy(buffer,0,result,0,pos);\n    return result;\n  }\n else {\n    final long[] buffer=new long[items];\n    for (int i=0; i < items; i++) {\n      buffer[i]=readLong(byteOrder);\n    }\n    return buffer;\n  }\n}"}
{"ids": "24872", "raw_code": "private void logGraphicalBufferOccupancy(float bufferOccupancy){\n  String title=\"Buffer\";\n  int used=(int)(bufferOccupancy * WIDTH);\n  StringBuilder sb=new StringBuilder();\n  sb.append(START_END_CHAR);\n  sb.append('-');\n  sb.append(title);\n  for (int i=title.length() + 1; i < WIDTH; i++) {\n    sb.append('-');\n  }\n  sb.append(START_END_CHAR);\n  log.info(sb.toString());\n  sb=new StringBuilder();\n  sb.append(START_END_CHAR);\n  for (int i=0; i < used; i++) {\n    sb.append('/');\n  }\n  for (int j=used; j < WIDTH; j++) {\n    sb.append(' ');\n  }\n  sb.append(START_END_CHAR);\n  log.info(sb.toString());\n  sb=new StringBuilder();\n  sb.append(START_END_CHAR);\n  for (int i=0; i < WIDTH; i++) {\n    sb.append('-');\n  }\n  sb.append(START_END_CHAR);\n  log.info(sb.toString());\n}"}
{"ids": "79751", "raw_code": "public boolean isTerminated(){\n  return threadPool.isTerminated();\n}"}
{"ids": "22163", "raw_code": "public boolean isMatch(String domain,List<UserMappingAttribute> attributes,List<String> groups){\n  return _domain.equalsIgnoreCase(domain) && attributesMatch(attributes) && groupsMatch(groups);\n}"}
{"ids": "83351", "raw_code": "public static void writeSpatialGridTable(SpatialGrid grid,String fileName){\n  log.info(\"Writing spatial grid table \" + fileName + \" ...\");\n  SpatialGridTableWriter sgTableWriter=new SpatialGridTableWriter();\n  try {\n    sgTableWriter.write(grid,fileName);\n    log.info(\"... done!\");\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "976", "raw_code": "@SuppressWarnings(\"unchecked\") public OutputSocket linkedOutputSocket(String hintIdentifier){\n  final OutputSocket outSocket=outputSocketFactory.create(new IdentiferOverridingSocketHintDecorator(this,hintIdentifier));\n  controlledOutputSockets.add(outSocket);\n  return outSocket;\n}"}
{"ids": "2927", "raw_code": "public void cancel(){\n  cancelled=true;\n  Thread thread=this.thread;\n  if (thread != null) {\n    thread.interrupt();\n  }\n}"}
{"ids": "28531", "raw_code": "void _setText(byte[] text){\n  this._text=text;\n  this._props=null;\n}"}
{"ids": "54509", "raw_code": "private String prepareURL(){\n  String str=\"http://download.finance.yahoo.com/d/quotes.csv?\";\n  str+=\"s=\";\n  for (int i=0; i < symbolList.size(); i++) {\n    if (i != 0) {\n      str+=\",\";\n    }\n    str+=symbolList.get(i);\n  }\n  str+=\"&f=\";\n  for (  String format : parameterList) {\n    str+=format;\n  }\n  str+=\"&e=.csv\";\n  return str;\n}"}
{"ids": "69076", "raw_code": "public void initialize(){\n  TextureState ts=new TextureState();\n  ts.setEnabled(false);\n  setRenderState(ts);\n  for (int i=0; i < toolList.size(); ++i) {\n    ToolState state=toolList.get(i);\n    addTool(state,false);\n  }\n  zBufferState=new ZBufferState();\n  zBufferState.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);\n  zBufferState.setEnabled(true);\n  setRenderState(zBufferState);\n}"}
{"ids": "7604", "raw_code": "private static void init(){\n  encoders=new HashMap();\n  encoders.put(\"jpeg\",\"org.jfree.chart.encoders.SunJPEGEncoderAdapter\");\n  encoders.put(\"png\",\"org.jfree.chart.encoders.SunPNGEncoderAdapter\");\n}"}
{"ids": "79113", "raw_code": "public static boolean checkImageSize(final InputStream stream,final IConfiguration conf) throws IOException {\n  BufferedImage bi=ImageIO.read(stream);\n  stream.close();\n  if (bi == null) {\n    return false;\n  }\n  if (bi.getHeight() > conf.getImgHeight() || bi.getWidth() > conf.getImgWidth()) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "52075", "raw_code": "public double valueAt(double x){\n  return constant * Math.pow(1 - x * x,outsideExp);\n}"}
{"ids": "55597", "raw_code": "protected double generateWaitTime(){\n  if (state == STATE_WALKING_ELSEWHERE) {\n    if (location.equals(latestBusStop)) {\n      state=STATE_WAITING_FOR_BUS;\n    }\n  }\n  if (state == STATE_TRAVELLING_ON_BUS) {\n    state=STATE_WAITING_FOR_BUS;\n  }\n  return 0;\n}"}
{"ids": "57715", "raw_code": "@Override public Enumeration<URL> findResources(final String name) throws IOException {\n  if (name == null) {\n    return null;\n  }\n  ArrayList<URL> result=new ArrayList<URL>();\n  int n=0;\n  while (true) {\n    URLHandler handler=getHandler(n++);\n    if (handler == null) {\n      break;\n    }\n    handler.findResources(name,result);\n  }\n  return Collections.enumeration(result);\n}"}
{"ids": "25269", "raw_code": "protected void writeGraphicCtrlExt() throws IOException {\n  out.write(0x21);\n  out.write(0xf9);\n  out.write(4);\n  int transp, disp;\n  if (transparent == null) {\n    transp=0;\n    disp=0;\n  }\n else {\n    transp=1;\n    disp=2;\n  }\n  if (dispose >= 0) {\n    disp=dispose & 7;\n  }\n  disp<<=2;\n  out.write(0 | disp | 0| transp);\n  writeShort(delay);\n  out.write(transIndex);\n  out.write(0);\n}"}
{"ids": "29146", "raw_code": "public static void writeElementList(XMLOutput xmlOutput,String tagName,Iterable<String> listValues) throws IOException {\n  writeElementList(xmlOutput,tagName,listValues.iterator());\n}"}
{"ids": "72692", "raw_code": "public static Date stringToDate(String dateAsString){\n  try {\n    DateFormat df=new SimpleDateFormat(dateFormat);\n    df.setTimeZone(utc);\n    return df.parse(dateAsString);\n  }\n catch (  ParseException e) {\n    return null;\n  }\ncatch (  NullPointerException e) {\n    return null;\n  }\n}"}
{"ids": "29723", "raw_code": "public SimpleHttpRequestBuilder content(String chars,Charset charset){\n  return content(chars.getBytes(charset));\n}"}
{"ids": "53666", "raw_code": "private double adjustTransform(){\n  double xMin=Double.POSITIVE_INFINITY;\n  double xMax=Double.NEGATIVE_INFINITY;\n  double yMin=Double.POSITIVE_INFINITY;\n  double yMax=Double.NEGATIVE_INFINITY;\n  for (  Variable var : csp.getVariables()) {\n    Point2D point=getPosition(var);\n    xMin=Math.min(xMin,point.getX());\n    xMax=Math.max(xMax,point.getX());\n    yMin=Math.min(yMin,point.getY());\n    yMax=Math.max(yMax,point.getY());\n  }\n  double scale=Math.min(pane.getWidth() / (xMax - xMin + 300),pane.getHeight() / (yMax - yMin + 150));\n  pane.setTranslateX((scale * (pane.getWidth() - xMin - xMax) / 2.0));\n  pane.setTranslateY((scale * (pane.getHeight() - yMin - yMax) / 2.0));\n  pane.setScaleX(scale);\n  pane.setScaleY(scale);\n  return scale;\n}"}
{"ids": "65607", "raw_code": "public void addTableModelListener(WTableModelListener listener){\n  if (listener == null) {\n    return;\n  }\n  if (!m_listeners.contains(listener)) {\n    m_listeners.add(listener);\n  }\n  return;\n}"}
{"ids": "61188", "raw_code": "public boolean canTraverseOutsideSubtree(){\n  if (null != m_parts) {\n    int n=m_parts.size();\n    for (int i=0; i < n; i++) {\n      AVTPart part=(AVTPart)m_parts.elementAt(i);\n      if (part.canTraverseOutsideSubtree())       return true;\n    }\n  }\n  return false;\n}"}
{"ids": "47515", "raw_code": "private int[] parseYMD(String string){\n  string=string.trim();\n  try {\n    if (string.charAt(4) != '-' || string.charAt(7) != '-') {\n      throw new IllegalArgumentException(\"date must be yyyy-MM-dd\");\n    }\n    int[] ymd=new int[3];\n    ymd[0]=Integer.valueOf(string.substring(0,4));\n    ymd[1]=Integer.valueOf(string.substring(5,7));\n    ymd[2]=Integer.valueOf(string.substring(8,10));\n    return ymd;\n  }\n catch (  NumberFormatException ex) {\n    throw new IllegalArgumentException(\"date must be yyyy-MM-dd\",ex);\n  }\n}"}
{"ids": "28379", "raw_code": "public AbstractPointRenderer(){\n  shape=new Rectangle2D.Double(-2.5,-2.5,5.0,5.0);\n  color=new SingleColor(Color.BLACK);\n  valueVisible=false;\n  valueColumn=1;\n  valueLocation=Location.CENTER;\n  valueAlignmentX=0.5;\n  valueAlignmentY=0.5;\n  valueRotation=0.0;\n  valueDistance=1.0;\n  valueColor=new SingleColor(Color.BLACK);\n  valueFont=Font.decode(null);\n  errorVisible=false;\n  errorColumnTop=2;\n  errorColumnBottom=3;\n  errorColor=new SingleColor(Color.BLACK);\n  errorShape=new Line2D.Double(-2.0,0.0,2.0,0.0);\n  errorStroke=new BasicStroke(1f);\n}"}
{"ids": "870", "raw_code": "public Object put(String key,Object value){\n  Object oldValue=context.getAttribute(key,ENGINE_SCOPE);\n  context.setAttribute(key,value,ENGINE_SCOPE);\n  return oldValue;\n}"}
{"ids": "51178", "raw_code": "private void executeAnotherRequest() throws SQLException {\n  Random random=new Random();\n  int value=random.nextInt();\n  PreparedStatement preparedStatement=sharedConnection.prepareStatement(\"SELECT \" + value);\n  ResultSet rs=preparedStatement.executeQuery();\n  rs.next();\n  assertEquals(value,rs.getInt(1));\n}"}
{"ids": "65858", "raw_code": "private void statInit(){\n  labelValue.setText(Msg.getMsg(Env.getCtx(),\"Value\"));\n  fieldValue.setBackground(AdempierePLAF.getInfoBackground());\n  fieldValue.addActionListener(this);\n  labelName.setText(Msg.getMsg(Env.getCtx(),\"Name\"));\n  fieldName.setBackground(AdempierePLAF.getInfoBackground());\n  fieldName.addActionListener(this);\n  fBPartner_ID=new VLookup(\"C_BPartner_ID\",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(I_A_Asset.Table_Name,I_A_Asset.COLUMNNAME_C_BPartner_ID),DisplayType.Search));\n  lBPartner_ID.setLabelFor(fBPartner_ID);\n  fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());\n  fBPartner_ID.addActionListener(this);\n  fProduct_ID=new VLookup(\"M_Product_ID\",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(I_A_Asset.Table_Name,I_A_Asset.COLUMNNAME_M_Product_ID),DisplayType.Search));\n  lProduct_ID.setLabelFor(fProduct_ID);\n  fProduct_ID.setBackground(AdempierePLAF.getInfoBackground());\n  fProduct_ID.addActionListener(this);\n  p_criteriaGrid.add(labelValue,new ALayoutConstraint(0,0));\n  p_criteriaGrid.add(fieldValue,null);\n  p_criteriaGrid.add(lBPartner_ID,null);\n  p_criteriaGrid.add(fBPartner_ID,null);\n  p_criteriaGrid.add(labelName,new ALayoutConstraint(1,0));\n  p_criteriaGrid.add(fieldName,null);\n  p_criteriaGrid.add(lProduct_ID,null);\n  p_criteriaGrid.add(fProduct_ID,null);\n}"}
{"ids": "78733", "raw_code": "public static int hash(byte[] data,int seed){\n  return hash(ByteBuffer.wrap(data),seed);\n}"}
{"ids": "84823", "raw_code": "public int parse(char c,char[] ia,int ip,int il){\n  assert (ia[ip] == c);\n  if (Surrogate.isHigh(c)) {\n    if (il - ip < 2) {\n      error=CoderResult.UNDERFLOW;\n      return -1;\n    }\n    char d=ia[ip + 1];\n    if (Surrogate.isLow(d)) {\n      character=toUCS4(c,d);\n      isPair=true;\n      error=null;\n      return character;\n    }\n    error=CoderResult.malformedForLength(1);\n    return -1;\n  }\n  if (Surrogate.isLow(c)) {\n    error=CoderResult.malformedForLength(1);\n    return -1;\n  }\n  character=c;\n  isPair=false;\n  error=null;\n  return character;\n}"}
{"ids": "59919", "raw_code": "public void performStartOperationAsync(final String vmId,final FutureCallback<Task> responseCallback) throws IOException {\n  String path=String.format(\"%s/%s/start\",getBasePath(),vmId);\n  createObjectAsync(path,null,responseCallback);\n}"}
{"ids": "23255", "raw_code": "private RtpPacket parseRtpPacket(byte[] data){\n  RtpPacket packet=new RtpPacket();\n  packet.mLength=data.length;\n  packet.mReceivedAt=System.currentTimeMillis();\n  packet.extension=(data[0] & 0x10) > 0;\n  if ((byte)((data[1] & 0xff) & 0x80) == (byte)0x80) {\n    packet.marker=1;\n  }\n else {\n    packet.marker=0;\n  }\n  packet.payloadType=(byte)((data[1] & 0xff) & 0x7f);\n  packet.seqnum=(char)((data[2] << 8) | (data[3] & 0xff));\n  packet.timestamp=(((data[4] & 0xff) << 24) | ((data[5] & 0xff) << 16) | ((data[6] & 0xff) << 8)| (data[7] & 0xff));\n  packet.ssrc=(((data[8] & 0xff) << 24) | ((data[9] & 0xff) << 16) | ((data[10] & 0xff) << 8)| (data[11] & 0xff));\n  if (packet.extension) {\n    int dataId=11;\n    int extensionHeaderId=((data[++dataId] & 0xff) << 8) | (data[++dataId] & 0xff);\n    int length=((data[++dataId] & 0xff) << 8) | (data[++dataId] & 0xff);\n    if (extensionHeaderId == RtpExtensionHeader.RTP_EXTENSION_HEADER_ID) {\n      extractExtensionHeader(data,length,dataId,packet);\n    }\n    packet.payloadoffset=16 + length * 4;\n  }\n else {\n    packet.payloadoffset=12;\n  }\n  packet.payloadlength=packet.mLength - packet.payloadoffset;\n  packet.mData=new byte[packet.payloadlength];\n  System.arraycopy(data,packet.payloadoffset,packet.mData,0,packet.payloadlength);\n  return packet;\n}"}
{"ids": "66039", "raw_code": "public String product(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){\n  Integer M_Product_ID=(Integer)value;\n  if (M_Product_ID == null || M_Product_ID.intValue() == 0)   return \"\";\n  BigDecimal priceActual=null;\n  Timestamp DateExpense=Env.getContextAsDate(ctx,WindowNo,\"DateExpense\");\n  if (DateExpense == null)   DateExpense=new Timestamp(System.currentTimeMillis());\n  String sql=null;\n  PreparedStatement pstmt=null;\n  ResultSet rs=null;\n  try {\n    boolean noPrice=true;\n    sql=\"SELECT bomPriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceStd,\" + \"bomPriceList(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceList,\" + \"bomPriceLimit(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceLimit,\"+ \"p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID \"+ \"FROM M_Product p, M_ProductPrice pp, M_Pricelist pl, M_PriceList_Version pv \"+ \"WHERE p.M_Product_ID=pp.M_Product_ID\"+ \" AND pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID\"+ \" AND pv.M_PriceList_ID=pl.M_PriceList_ID\"+ \" AND pv.IsActive='Y'\"+ \" AND p.M_Product_ID=?\"+ \" AND pl.M_PriceList_ID=?\"+ \" ORDER BY pv.ValidFrom DESC\";\n    pstmt=DB.prepareStatement(sql,null);\n    pstmt.setInt(1,M_Product_ID.intValue());\n    pstmt.setInt(2,Env.getContextAsInt(ctx,WindowNo,\"M_PriceList_ID\"));\n    rs=pstmt.executeQuery();\n    while (rs.next() && noPrice) {\n      java.sql.Date plDate=rs.getDate(\"ValidFrom\");\n      if (plDate == null || !DateExpense.before(plDate)) {\n        noPrice=false;\n        priceActual=rs.getBigDecimal(\"PriceStd\");\n        if (priceActual == null)         priceActual=rs.getBigDecimal(\"PriceList\");\n        if (priceActual == null)         priceActual=rs.getBigDecimal(\"PriceLimit\");\n        Integer ii=new Integer(rs.getInt(\"C_Currency_ID\"));\n        if (!rs.wasNull())         mTab.setValue(\"C_Currency_ID\",ii);\n      }\n    }\n    if (noPrice) {\n      sql=\"SELECT bomPriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceStd,\" + \"bomPriceList(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceList,\" + \"bomPriceLimit(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceLimit,\"+ \"p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID \"+ \"FROM M_Product p, M_ProductPrice pp, M_Pricelist pl, M_Pricelist bpl, M_PriceList_Version pv \"+ \"WHERE p.M_Product_ID=pp.M_Product_ID\"+ \" AND pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID\"+ \" AND pv.M_PriceList_ID=bpl.M_PriceList_ID\"+ \" AND pv.IsActive='Y'\"+ \" AND bpl.M_PriceList_ID=pl.BasePriceList_ID\"+ \" AND p.M_Product_ID=?\"+ \" AND pl.M_PriceList_ID=?\"+ \" ORDER BY pv.ValidFrom DESC\";\n      DB.close(rs,pstmt);\n      pstmt=DB.prepareStatement(sql,null);\n      pstmt.setInt(1,M_Product_ID.intValue());\n      pstmt.setInt(2,Env.getContextAsInt(ctx,WindowNo,\"M_PriceList_ID\"));\n      rs=pstmt.executeQuery();\n      while (rs.next() && noPrice) {\n        java.sql.Date plDate=rs.getDate(\"ValidFrom\");\n        if (plDate == null || !DateExpense.before(plDate)) {\n          noPrice=false;\n          priceActual=rs.getBigDecimal(\"PriceStd\");\n          if (priceActual == null)           priceActual=rs.getBigDecimal(\"PriceList\");\n          if (priceActual == null)           priceActual=rs.getBigDecimal(\"PriceLimit\");\n          Integer ii=new Integer(rs.getInt(\"C_Currency_ID\"));\n          if (!rs.wasNull())           mTab.setValue(\"C_Currency_ID\",ii);\n        }\n      }\n    }\n  }\n catch (  SQLException e) {\n    log.log(Level.SEVERE,sql,e);\n    return e.getLocalizedMessage();\n  }\n finally {\n    DB.close(rs,pstmt);\n    rs=null;\n    pstmt=null;\n  }\n  if (priceActual == null)   priceActual=Env.ZERO;\n  mTab.setValue(\"ExpenseAmt\",priceActual);\n  return \"\";\n}"}
{"ids": "2365", "raw_code": "public boolean thisDeviceSpeaksTo(BluetoothDevice other) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n  if (MurmurService.USE_BACKOFF)   return true;\n  if (other == null) {\n    log.info(\"This device not speaking to peer, peer is null\");\n    return false;\n  }\n  String otherAddr=other.getAddress();\n  if (otherAddr == null) {\n    log.info(\"This device not speaking to peer :\" + other + \", peer address is null\");\n    return false;\n  }\n  String myAddr=mBluetoothSpeaker.getAddress();\n  if (myAddr.equals(whichInitiates(myAddr,otherAddr))) {\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "20493", "raw_code": "public static <K,V>List<KeyValue<K,V>> waitUntilMinKeyValueRecordsReceived(Properties consumerConfig,String topic,int expectedNumRecords,long waitTime) throws InterruptedException {\n  List<KeyValue<K,V>> accumData=new ArrayList<>();\n  long startTime=System.currentTimeMillis();\n  while (true) {\n    List<KeyValue<K,V>> readData=readKeyValues(topic,consumerConfig);\n    accumData.addAll(readData);\n    if (accumData.size() >= expectedNumRecords)     return accumData;\n    if (System.currentTimeMillis() > startTime + waitTime)     throw new AssertionError(\"Expected \" + expectedNumRecords + \" but received only \"+ accumData.size()+ \" records before timeout \"+ waitTime+ \" ms\");\n    Thread.sleep(Math.min(waitTime,100L));\n  }\n}"}
{"ids": "33448", "raw_code": "public static <T>CombinedDownloadTask<T> single(DownloadTask<T> task){\n  Objects.requireNonNull(task);\n  return new SingleCombinedTask<T>(task);\n}"}
{"ids": "37467", "raw_code": "public void addHexListener(final IHexPanelListener listener){\n  Preconditions.checkNotNull(listener,\"Error: Listener can't be null\");\n  if (!m_listeners.contains(listener)) {\n    m_listeners.add(listener);\n  }\n}"}
{"ids": "10823", "raw_code": "public static <T extends SerializableEntity>Deserializer roundtripSerializableEntityWithBinarySerializer(final T originalEntity,final AccountLookup accountLookup){\n  final BinarySerializer binarySerializer=new BinarySerializer();\n  originalEntity.serialize(binarySerializer);\n  return new BinaryDeserializer(binarySerializer.getBytes(),new DeserializationContext(accountLookup));\n}"}
{"ids": "67751", "raw_code": "@Deprecated public static String encode(final String s,final String encoding,BitSet safeOctets,boolean plusForSpace) throws UnsupportedEncodingException {\n  StringBuilder out=new StringBuilder(s.length() * 2);\n  boolean needsEncoding;\n  try {\n    needsEncoding=encode(s,encoding,safeOctets,plusForSpace,out);\n  }\n catch (  UnsupportedEncodingException e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    throw new AssertionError(e);\n  }\n  if (needsEncoding) {\n    return out.toString();\n  }\n else {\n    return s;\n  }\n}"}
{"ids": "73291", "raw_code": "public static void fireClipboardChanged(){\n  for (Iterator i=listenerList.iterator(); i.hasNext(); ) {\n    ClipboardListener listener=(ClipboardListener)i.next();\n    listener.clipboardChanged();\n  }\n}"}
{"ids": "7345", "raw_code": "public boolean isEmpty(){\n  return window.isEmpty();\n}"}
{"ids": "29175", "raw_code": "public boolean contains(T listener){\n  if (mListeners != null) {\n    return mListeners.contains(listener);\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "43298", "raw_code": "public SimpleDictionary(String... aWords){\n  words=new HashSet<String>();\n  for (  String word : aWords) {\n    words.add(word.toLowerCase());\n  }\n}"}
{"ids": "71053", "raw_code": "public long readLongLE() throws IOException {\n  inputStream.readFully(workSpace,0,8);\n  return ((long)(workSpace[7] & 0xff) << 56) | ((long)(workSpace[6] & 0xff) << 48) | ((long)(workSpace[5] & 0xff) << 40)| ((long)(workSpace[4] & 0xff) << 32)| ((long)(workSpace[3] & 0xff) << 24)| ((long)(workSpace[2] & 0xff) << 16)| ((long)(workSpace[1] & 0xff) << 8)| ((long)(workSpace[0] & 0xff));\n}"}
{"ids": "8798", "raw_code": "@LayoutlibDelegate static long elapsedRealtime(){\n  return System.currentTimeMillis() - sBootTime;\n}"}
{"ids": "3339", "raw_code": "@Override public void fillAssignedKeys(Set<String> keys){\n  keys.add(_keyColumn.name());\n}"}
{"ids": "38808", "raw_code": "@Override public void removeInstanceListener(InstanceListener dsl){\n  m_instanceListeners.remove(dsl);\n}"}
{"ids": "59753", "raw_code": "public double eccentricity(){\n  return Math.sqrt(1 - (semiMinorAxis() * semiMinorAxis()) / (semiMajorAxis() * semiMajorAxis()));\n}"}
{"ids": "35351", "raw_code": "private void simpleApply(IDocument document,String string,ConfigurableCompletionProposal proposal) throws BadLocationException {\n  proposal.setCursorPosition(string.length());\n  document.replace(proposal.getReplacementOffset(),proposal.getReplacementLength(),string);\n}"}
{"ids": "34332", "raw_code": "public String pullDump2PC(){\n  String serial=device.getSerialNumber();\n  File dest=new File(FileUtils.getTempDirectory(),serial + \".xml\");\n  String path=dest.getPath();\n  log.debug(\"pull dump file to pc's path {}\",path);\n  CommandLine commandpull=adbCommand(\"pull\",\"/data/local/tmp/local/tmp/qian.xml\",path);\n  String out=executeCommandQuietly(commandpull);\n  log.debug(\"pull dump file to pc's result {}\",out);\n  return path;\n}"}
{"ids": "49536", "raw_code": "public void init(){\n  pubPanel.setLayout(new BorderLayout());\n  topic=new JComboBox();\n  topic.setEditable(true);\n  topic.setMaximumSize(MQTTFrame.TEXT_FIELD_DIMENSION);\n  topic.setMaximumRowCount(5);\n  qosList=new JComboBox(qos);\n  qosList.setSelectedIndex(0);\n  qosList.setMaximumSize(MQTTFrame.DROP_DOWN_DIMENSION);\n  pubData=new JTextArea(3,30);\n  pubData.setBorder(new BevelBorder(BevelBorder.LOWERED));\n  pubData.setMargin(MQTTFrame.TEXT_MARGINS);\n  retained=new JCheckBox();\n  retained.setSelected(false);\n  pubLabel=new JLabel(PANEL_TITLE + \" - text display\");\n  Font f=pubLabel.getFont();\n  pubLabel.setFont(new Font(f.getName(),Font.BOLD,f.getSize() + 1));\n  JPanel topicBox=new JPanel();\n  topicBox.setLayout(new BoxLayout(topicBox,BoxLayout.X_AXIS));\n  topicBox.add(new JLabel(\" Topic:\"));\n  topicBox.add(topic);\n  topicBox.add(new JLabel(\" QoS:\"));\n  topicBox.add(qosList);\n  topicBox.add(new JLabel(\" Retained:\"));\n  topicBox.add(retained);\n  JPanel titleAndTopic=new JPanel();\n  titleAndTopic.setLayout(new GridLayout(2,1));\n  titleAndTopic.add(pubLabel);\n  titleAndTopic.add(topicBox);\n  hexDisplay=false;\n  hexButton=new JButton(\"Hex\");\n  hexButton.addActionListener(this);\n  fileButton=new JButton(\"File...\");\n  fileButton.setEnabled(true);\n  fileButton.addActionListener(this);\n  pubButton=new JButton(\"Publish\");\n  pubButton.setEnabled(false);\n  pubButton.addActionListener(this);\n  JPanel buttons=new JPanel();\n  buttons.setLayout(new GridLayout(3,1));\n  buttons.add(pubButton);\n  buttons.add(fileButton);\n  buttons.add(hexButton);\n  JPanel buttonLayout=new JPanel();\n  buttonLayout.add(buttons);\n  pubPanel.add(titleAndTopic,BorderLayout.NORTH);\n  pubPanel.add(new JScrollPane(pubData),BorderLayout.CENTER);\n  pubPanel.add(buttonLayout,BorderLayout.EAST);\n}"}
{"ids": "56806", "raw_code": "public void validateEmrClusterDefinitionKey(EmrClusterDefinitionKey key) throws IllegalArgumentException {\n  Assert.notNull(key,\"An EMR cluster definition key must be specified.\");\n  key.setNamespace(alternateKeyHelper.validateStringParameter(\"namespace\",key.getNamespace()));\n  key.setEmrClusterDefinitionName(alternateKeyHelper.validateStringParameter(\"An\",\"EMR cluster definition name\",key.getEmrClusterDefinitionName()));\n}"}
{"ids": "33469", "raw_code": "@TargetApi(VERSION_CODES.KITKAT) private void handleSmsReceived(Intent intent){\n  if (BuildConfig.DEBUG)   Log.v(\"SMSReceiver: Intercept SMS\");\n  Bundle bundle=intent.getExtras();\n  if (bundle != null) {\n    SmsMessage[] messages=null;\n    if (SmsPopupUtils.hasKitKat()) {\n      messages=Intents.getMessagesFromIntent(intent);\n    }\n else {\n      messages=SmsPopupUtils.getMessagesFromIntent(intent);\n    }\n    if (messages != null) {\n      notifyMessageReceived(new SmsMmsMessage(context,messages,System.currentTimeMillis()));\n    }\n  }\n}"}
{"ids": "34703", "raw_code": "public static long installAge(long currentTimestamp,long installTimestamp,boolean sendInstallEvent){\n  if (sendInstallEvent) {\n    return INSTALL_AGE_IMMEDIATELY_AFTER_INSTALLING;\n  }\n else {\n    return Math.max(0L,(currentTimestamp - installTimestamp) / MS_PER_DAY);\n  }\n}"}
{"ids": "21805", "raw_code": "public boolean isDistributed(){\n  return !isLocal();\n}"}
{"ids": "84983", "raw_code": "private boolean zzRefill() throws java.io.IOException {\n  if (zzStartRead > 0) {\n    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);\n    zzEndRead-=zzStartRead;\n    zzCurrentPos-=zzStartRead;\n    zzMarkedPos-=zzStartRead;\n    zzStartRead=0;\n  }\n  if (zzCurrentPos >= zzBuffer.length) {\n    char newBuffer[]=new char[zzCurrentPos * 2];\n    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);\n    zzBuffer=newBuffer;\n  }\n  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);\n  if (numRead > 0) {\n    zzEndRead+=numRead;\n    return false;\n  }\n  if (numRead == 0) {\n    int c=zzReader.read();\n    if (c == -1) {\n      return true;\n    }\n else {\n      zzBuffer[zzEndRead++]=(char)c;\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "47762", "raw_code": "public synchronized boolean isConsumer(ImageConsumer ic){\n  return theConsumers.contains(ic);\n}"}
{"ids": "78651", "raw_code": "public static boolean verifySignature(Signature initializedSignatureEngine,byte[] message,byte[] signature) throws SignatureException {\n  initializedSignatureEngine.update(message);\n  return initializedSignatureEngine.verify(signature);\n}"}
{"ids": "63224", "raw_code": "public static void writeVarInt(OutputStream out,int x) throws IOException {\n  while ((x & ~0x7f) != 0) {\n    out.write((byte)(0x80 | (x & 0x7f)));\n    x>>>=7;\n  }\n  out.write((byte)x);\n}"}
{"ids": "49086", "raw_code": "public SegmentPath complete(EndType etype){\n  SegmentPath result;\n  if (data == null || w < 6) {\n    return null;\n  }\n  if (w == data.length) {\n    result=new SegmentPath(data,etype);\n    reset(0);\n  }\n else {\n    double[] dataToAdopt=new double[w];\n    System.arraycopy(data,0,dataToAdopt,0,w);\n    result=new SegmentPath(dataToAdopt,etype);\n    reset(2);\n  }\n  return result;\n}"}
{"ids": "81065", "raw_code": "@Nullable public Bitmap cropImage(){\n  Bitmap viewBitmap=getViewBitmap();\n  if (viewBitmap == null || viewBitmap.isRecycled()) {\n    return null;\n  }\n  cancelAllAnimations();\n  setImageToWrapCropBounds(false);\n  RectF currentImageRect=RectUtils.trapToRect(mCurrentImageCorners);\n  if (currentImageRect.isEmpty()) {\n    return null;\n  }\n  float currentScale=getCurrentScale();\n  float currentAngle=getCurrentAngle();\n  if (mMaxResultImageSizeX > 0 && mMaxResultImageSizeY > 0) {\n    float cropWidth=mCropRect.width() / currentScale;\n    float cropHeight=mCropRect.height() / currentScale;\n    if (cropWidth > mMaxResultImageSizeX || cropHeight > mMaxResultImageSizeY) {\n      float scaleX=mMaxResultImageSizeX / cropWidth;\n      float scaleY=mMaxResultImageSizeY / cropHeight;\n      float resizeScale=Math.min(scaleX,scaleY);\n      Bitmap resizedBitmap=Bitmap.createScaledBitmap(viewBitmap,(int)(viewBitmap.getWidth() * resizeScale),(int)(viewBitmap.getHeight() * resizeScale),false);\n      if (viewBitmap != resizedBitmap) {\n        viewBitmap.recycle();\n      }\n      viewBitmap=resizedBitmap;\n      currentScale/=resizeScale;\n    }\n  }\n  if (currentAngle != 0) {\n    mTempMatrix.reset();\n    mTempMatrix.setRotate(currentAngle,viewBitmap.getWidth() / 2,viewBitmap.getHeight() / 2);\n    Bitmap rotatedBitmap=Bitmap.createBitmap(viewBitmap,0,0,viewBitmap.getWidth(),viewBitmap.getHeight(),mTempMatrix,true);\n    if (viewBitmap != rotatedBitmap) {\n      viewBitmap.recycle();\n    }\n    viewBitmap=rotatedBitmap;\n  }\n  int top=(int)((mCropRect.top - currentImageRect.top) / currentScale);\n  int left=(int)((mCropRect.left - currentImageRect.left) / currentScale);\n  int width=(int)(mCropRect.width() / currentScale);\n  int height=(int)(mCropRect.height() / currentScale);\n  return Bitmap.createBitmap(viewBitmap,left,top,width,height);\n}"}
{"ids": "4545", "raw_code": "@Deprecated public static Bundle parseUrl(String url){\n  url=url.replace(\"fbconnect\",\"http\");\n  try {\n    URL u=new URL(url);\n    Bundle b=decodeUrl(u.getQuery());\n    b.putAll(decodeUrl(u.getRef()));\n    return b;\n  }\n catch (  MalformedURLException e) {\n    return new Bundle();\n  }\n}"}
{"ids": "83939", "raw_code": "private static void createTmpFile(CompletableFuture<NewFile> fileCreation,Path destDir,List<TSData> files){\n  LOG.log(Level.FINE,\"starting temporary file creation...\");\n  try {\n    Collections.sort(files,Comparator.comparing(null));\n    final FileChannel fd=FileUtil.createTempFile(destDir,\"monsoon-\",\".optimize-tmp\");\n    try {\n      final DateTime begin;\n      try (ToXdrTables output=new ToXdrTables(fd,Compression.DEFAULT_OPTIMIZED)){\n        while (!files.isEmpty()) {\n          TSData tsdata=files.remove(0);\n          if (fileCreation.isCancelled())           throw new IOException(\"aborted due to canceled execution\");\n          output.addAll(tsdata);\n        }\n        begin=new DateTime(output.getHdrBegin(),DateTimeZone.UTC);\n        if (fileCreation.isCancelled())         throw new IOException(\"aborted due to canceled execution\");\n      }\n       if (fileCreation.isCancelled())       throw new IOException(\"aborted due to canceled execution\");\n      INSTALL_POOL.execute(null);\n    }\n catch (    Error|RuntimeException|IOException ex) {\n      try {\n        fd.close();\n      }\n catch (      Error|RuntimeException|IOException ex1) {\n        ex.addSuppressed(ex1);\n      }\n      throw ex;\n    }\n  }\n catch (  Error|RuntimeException|IOException ex) {\n    LOG.log(Level.WARNING,\"temporary file for optimization failure\",ex);\nsynchronized (OUTSTANDING) {\n      OUTSTANDING.remove(fileCreation);\n    }\n    fileCreation.completeExceptionally(ex);\n  }\n}"}
{"ids": "63854", "raw_code": "public void contentTag(String tag,String name,String value,String content){\n  spacing();\n  m_out.print('<');\n  m_out.print(tag);\n  m_out.print(' ');\n  m_out.print(name);\n  m_out.print('=');\n  m_out.print('\\\"');\n  escapeString(value);\n  m_out.print('\\\"');\n  m_out.print('>');\n  escapeString(content);\n  m_out.print('<');\n  m_out.print('/');\n  m_out.print(tag);\n  m_out.print('>');\n  println();\n}"}
{"ids": "24931", "raw_code": "public void addChild(Component child){\n  components.add(child);\n  child.setParent(this);\n}"}
{"ids": "12017", "raw_code": "public void addMessageListener(IMessageListener listener){\n  listeners.add(listener);\n}"}
{"ids": "21145", "raw_code": "protected void syncFlushVdcConfigToLocal() throws Exception {\n  if (vdcPropBarrier == null) {\n    vdcPropBarrier=new VdcPropertyBarrier(targetSiteInfo,VDC_OP_BARRIER_TIMEOUT);\n  }\n  vdcPropBarrier.enter();\n  try {\n    flushVdcConfigToLocal();\n  }\n  finally {\n    boolean allLeft=vdcPropBarrier.leave();\n    if (!allLeft) {\n      log.info(\"wait 1 minute, so all nodes be able to return from leave()\");\n      Thread.sleep(IPSEC_RESTART_DELAY);\n    }\n  }\n  vdcPropBarrier=null;\n}"}
{"ids": "77157", "raw_code": "public CorruptIndexException(String message,DataInput input,Throwable cause){\n  this(message,Objects.toString(input),cause);\n}"}
{"ids": "57141", "raw_code": "protected void removeFromQuarantineQueue(NodePortTuple npt){\n  while (quarantineQueue.remove(npt))   ;\n}"}
{"ids": "47583", "raw_code": "public boolean hasExpired(){\n  if (maxAge == 0)   return true;\n  if (maxAge == MAX_AGE_UNSPECIFIED)   return false;\n  long deltaSecond=(System.currentTimeMillis() - whenCreated) / 1000;\n  if (deltaSecond > maxAge)   return true;\n else   return false;\n}"}
{"ids": "85043", "raw_code": "public static String repeatCharacter(char c,int repetitions){\n  StringBuilder s=new StringBuilder(repetitions);\n  for (int i=0; i < repetitions; i++) {\n    s.append(c);\n  }\n  return s.toString();\n}"}
{"ids": "50018", "raw_code": "public static String checkAndReplaceLiterals(String instStr){\n  String tmp=instStr;\n  if (tmp.contains(COMPONENTS_DELIM)) {\n    tmp=tmp.replaceAll(COMPONENTS_DELIM,\".\");\n    LOG.warn(\"Replaced special literal character sequence \" + COMPONENTS_DELIM + \" with '.'\");\n  }\n  if (tmp.contains(ELEMENT_DELIM)) {\n    tmp=tmp.replaceAll(ELEMENT_DELIM,\".\");\n    LOG.warn(\"Replaced special literal character sequence \" + ELEMENT_DELIM + \" with '.'\");\n  }\n  if (tmp.contains(LEVELIN)) {\n    tmp=tmp.replaceAll(LEVELIN,\"(\");\n    LOG.warn(\"Replaced special literal character sequence \" + LEVELIN + \" with '('\");\n  }\n  if (tmp.contains(LEVELOUT)) {\n    tmp=tmp.replaceAll(LEVELOUT,\")\");\n    LOG.warn(\"Replaced special literal character sequence \" + LEVELOUT + \" with ')'\");\n  }\n  if (tmp.contains(PARFOR_CDATA_END)) {\n    tmp=tmp.replaceAll(PARFOR_CDATA_END,\".\");\n    LOG.warn(\"Replaced special literal character sequence \" + PARFOR_CDATA_END + \" with '.'\");\n  }\n  return tmp;\n}"}
{"ids": "81270", "raw_code": "public final static char[][] splitTypeLevelsSignature(String typeSignature){\n  char[] source=Signature.removeCapture(typeSignature.toCharArray());\n  CharOperation.replace(source,'$','.');\n  char[][] signatures=new char[10][];\n  int signaturesCount=0;\n  int paramOpening=0;\n  for (int idx=0, ln=source.length; idx < ln; idx++) {\nswitch (source[idx]) {\ncase '>':\n      paramOpening--;\n    if (paramOpening == 0) {\n      if (signaturesCount == signatures.length) {\n        System.arraycopy(signatures,0,signatures=new char[signaturesCount + 10][],0,signaturesCount);\n      }\n    }\n  break;\ncase '<':\nparamOpening++;\nbreak;\ncase '.':\nif (paramOpening == 0) {\nif (signaturesCount == signatures.length) {\nSystem.arraycopy(signatures,0,signatures=new char[signaturesCount + 10][],0,signaturesCount);\n}\nsignatures[signaturesCount]=new char[idx + 1];\nSystem.arraycopy(source,0,signatures[signaturesCount],0,idx);\nsignatures[signaturesCount][idx]=Signature.C_SEMICOLON;\nsignaturesCount++;\n}\nbreak;\ncase '/':\nsource[idx]='.';\nbreak;\n}\n}\nchar[][] typeSignatures=new char[signaturesCount + 1][];\ntypeSignatures[0]=source;\nfor (int i=1, j=signaturesCount - 1; i <= signaturesCount; i++, j--) {\ntypeSignatures[i]=signatures[j];\n}\nreturn typeSignatures;\n}"}
{"ids": "8172", "raw_code": "public static <T>T withWriter(Writer writer,@ClosureParams(FirstParam.class) Closure<T> closure) throws IOException {\n  try {\n    T result=closure.call(writer);\n    try {\n      writer.flush();\n    }\n catch (    IOException e) {\n    }\n    Writer temp=writer;\n    writer=null;\n    temp.close();\n    return result;\n  }\n  finally {\n    closeWithWarning(writer);\n  }\n}"}
{"ids": "1995", "raw_code": "public static int round(double value){\n  int roundedValue=value > 0 ? (int)(value + 0.5) : -(int)(Math.abs(value) + 0.5);\n  return roundedValue;\n}"}
{"ids": "30947", "raw_code": "private ServiceRegistrar[] buildServiceRegistrar(){\n  int k=0;\n  ServiceRegistrar[] proxys=new ServiceRegistrar[discoveredLocators.size()];\n  Iterator iter=discoveredLocators.iterator();\n  while (iter.hasNext()) {\n    LocatorReg reg=(LocatorReg)iter.next();\n    proxys[k++]=reg.proxy;\n  }\n  return proxys;\n}"}
{"ids": "5110", "raw_code": "private static char[] zzUnpackCMap(String packed){\n  char[] map=new char[0x110000];\n  int i=0;\n  int j=0;\n  while (i < 210) {\n    int count=packed.charAt(i++);\n    char value=packed.charAt(i++);\n    do     map[j++]=value;\n while (--count > 0);\n  }\n  return map;\n}"}
{"ids": "31123", "raw_code": "private static Permission[] flatten(Permission[] pa){\n  List l=new ArrayList(pa.length);\n  for (int i=0; i < pa.length; i++) {\n    Permission p=pa[i];\n    if (p instanceof GrantPermission) {\n      l.addAll(Arrays.asList(((GrantPermission)p).grants));\n    }\n else {\n      l.add(p);\n    }\n  }\n  return (Permission[])l.toArray(new Permission[l.size()]);\n}"}
{"ids": "18213", "raw_code": "protected void startDocumentInternal() throws SAXException {\n  if (m_needToCallStartDocument) {\n    super.startDocumentInternal();\n    m_saxHandler.startDocument();\n    m_needToCallStartDocument=false;\n  }\n}"}
{"ids": "41045", "raw_code": "String descriptor(boolean includeThis){\n  StringBuilder result=new StringBuilder();\n  result.append(\"(\");\n  if (includeThis) {\n    result.append(declaringType.name);\n  }\n  for (  TypeId t : parameters.types) {\n    result.append(t.name);\n  }\n  result.append(\")\");\n  result.append(returnType.name);\n  return result.toString();\n}"}
{"ids": "81464", "raw_code": "public final static boolean isPotentialZipArchive(String name){\n  int lastDot=name.lastIndexOf('.');\n  if (lastDot == -1) {\n    return false;\n  }\n  if (name.lastIndexOf(File.separatorChar) > lastDot) {\n    return false;\n  }\n  int length=name.length();\n  int extensionLength=length - lastDot - 1;\n  if (extensionLength == EXTENSION_java.length()) {\n    for (int i=extensionLength - 1; i >= 0; i--) {\n      if (Character.toLowerCase(name.charAt(length - extensionLength + i)) != EXTENSION_java.charAt(i)) {\n        break;\n      }\n      if (i == 0) {\n        return false;\n      }\n    }\n  }\n  if (extensionLength == EXTENSION_class.length()) {\n    for (int i=extensionLength - 1; i >= 0; i--) {\n      if (Character.toLowerCase(name.charAt(length - extensionLength + i)) != EXTENSION_class.charAt(i)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  return true;\n}"}
{"ids": "21097", "raw_code": "void addTerm(MapBuilderTermType type,JClass jclass,String alias){\n  MapBuilderTerm newTerm=new MapBuilderTerm();\n  newTerm.type=type;\n  newTerm.jclass=jclass;\n  newTerm.alias=alias;\n  terms.add(newTerm);\n}"}
{"ids": "61072", "raw_code": "public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException {\n  java.security.cert.Certificate cert;\n  List certs=new ArrayList();\n  while ((cert=engineGenerateCertificate(inStream)) != null) {\n    certs.add(cert);\n  }\n  return certs;\n}"}
{"ids": "44082", "raw_code": "@SuppressWarnings(\"nls\") protected void writePath(Shape s){\n  PathIterator segments=s.getPathIterator(null);\n  double[] coords=new double[6];\n  for (int i=0; !segments.isDone(); i++, segments.next()) {\n    if (i > 0) {\n      write(\" \");\n    }\n    int segmentType=segments.currentSegment(coords);\nswitch (segmentType) {\ncase PathIterator.SEG_MOVETO:\n      write(\"M\",coords[0],\",\",coords[1]);\n    break;\ncase PathIterator.SEG_LINETO:\n  write(\"L\",coords[0],\",\",coords[1]);\nbreak;\ncase PathIterator.SEG_CUBICTO:\nwrite(\"C\",coords[0],\",\",coords[1],\" \",coords[2],\",\",coords[3],\" \",coords[4],\",\",coords[5]);\nbreak;\ncase PathIterator.SEG_QUADTO:\nwrite(\"Q\",coords[0],\",\",coords[1],\" \",coords[2],\",\",coords[3]);\nbreak;\ncase PathIterator.SEG_CLOSE:\nwrite(\"Z\");\nbreak;\ndefault :\nthrow new IllegalStateException(\"Unknown path operation.\");\n}\n}\n}"}
{"ids": "85724", "raw_code": "public static void checkArgument(boolean expression,Object errorMessage){\n  if (!expression) {\n    throw new IllegalArgumentException(String.valueOf(errorMessage));\n  }\n}"}
{"ids": "60798", "raw_code": "private final boolean parkAndCheckInterrupt(){\n  LockSupport.park(this);\n  return Thread.interrupted();\n}"}
{"ids": "3621", "raw_code": "@Override public int portRemote(){\n  if (_channel != null) {\n    try {\n      SocketAddress addr=_channel.getRemoteAddress();\n      return 0;\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n      return 0;\n    }\n  }\n else   return 0;\n}"}
{"ids": "77826", "raw_code": "public void addDropTarget(DropTarget target){\n  mDropTargets.add(target);\n}"}
{"ids": "30306", "raw_code": "@Override public void startElement(final String namespaceURI,final String localName,final String qName,final Attributes atts) throws SAXException {\n  Object objectToLoad=null;\n  if (openNodes.size() == 0)   objectToLoad=rootObject;\n else   objectToLoad=createChild(qName,atts);\n  if (objectToLoad != null) {\n    if (atts.getIndex(\"type\") < 0)     ObjectGetSetter.set(objectToLoad,\"type\",qName);\n    ObjectGetSetter.setAll(objectToLoad,atts);\n  }\n  openNodes.push(new StackedObject(objectToLoad));\n}"}
{"ids": "84166", "raw_code": "public final int put(Object key,int value,boolean isReplace){\n  int prime=_prime;\n  int hash=Math.abs(System.identityHashCode(key) % prime);\n  Object[] keys=_keys;\n  while (true) {\n    Object testKey=keys[hash];\n    if (testKey == null) {\n      keys[hash]=key;\n      _values[hash]=value;\n      _size++;\n      if (keys.length <= 4 * _size)       resize(4 * keys.length);\n      return value;\n    }\n else     if (key != testKey) {\n      hash=(hash + 1) % prime;\n      continue;\n    }\n else     if (isReplace) {\n      int old=_values[hash];\n      _values[hash]=value;\n      return old;\n    }\n else {\n      return _values[hash];\n    }\n  }\n}"}
{"ids": "63769", "raw_code": "public int addAllAbsent(Collection c){\n  int numNew=c.size();\n  if (numNew == 0)   return 0;\nsynchronized (this) {\n    Object[] elements=getArray();\n    int len=elements.length;\n    Object[] temp=new Object[numNew];\n    int added=0;\n    for (Iterator itr=c.iterator(); itr.hasNext(); ) {\n      Object e=itr.next();\n      if (indexOf(e,elements,0,len) < 0 && indexOf(e,temp,0,added) < 0)       temp[added++]=e;\n    }\n    if (added != 0) {\n      Object[] newElements=new Object[len + added];\n      System.arraycopy(elements,0,newElements,0,len);\n      System.arraycopy(temp,0,newElements,len,added);\n      setArray(newElements);\n    }\n    return added;\n  }\n}"}
{"ids": "35987", "raw_code": "protected static void registerLibrary(ILibraryManager externalLibraryManager,String dataverse,String libraryName) throws Exception {\n  ClassLoader classLoader=getLibraryClassLoader(dataverse,libraryName);\n  externalLibraryManager.registerLibraryClassLoader(dataverse,libraryName,classLoader);\n}"}
{"ids": "15668", "raw_code": "public static String rawMD5(String s){\n  return binl2rstr(binl2md5(rstr2binl(s),s.length() * 8));\n}"}
{"ids": "80507", "raw_code": "public boolean isQuestCompleted(final String name){\n  final String info=getQuest(name,0);\n  if (info == null) {\n    return false;\n  }\n  return info.equals(\"done\");\n}"}
{"ids": "68232", "raw_code": "private static char[] zzUnpackCMap(String packed){\n  char[] map=new char[0x10000];\n  int i=0;\n  int j=0;\n  while (i < 90) {\n    int count=packed.charAt(i++);\n    char value=packed.charAt(i++);\n    do     map[j++]=value;\n while (--count > 0);\n  }\n  return map;\n}"}
{"ids": "8780", "raw_code": "@LayoutlibDelegate static float ceil(float value){\n  return (float)Math.ceil(value);\n}"}
{"ids": "59414", "raw_code": "private final User removeUser(String channel,String nick){\n  channel=channel.toLowerCase();\n  User user=new User(\"\",nick);\nsynchronized (_channels) {\n    Hashtable<User,User> users=_channels.get(channel);\n    if (users != null) {\n      return users.remove(user);\n    }\n  }\n  return null;\n}"}
{"ids": "17381", "raw_code": "public static void translatePos(Collection<GraphNode> moveNodes,Map<GraphNode,Point2D> positions,Translater intoRegion){\n  for (  GraphNode node : moveNodes) {\n    Point2D location=translateNode(node,positions,intoRegion);\n    if (null == location) {\n      continue;\n    }\n    positions.put(node,location);\n  }\n}"}
{"ids": "2186", "raw_code": "public void ifPresentOrElse(LongConsumer action,Runnable emptyAction){\n  if (isPresent) {\n    action.accept(value);\n  }\n else {\n    emptyAction.run();\n  }\n}"}
{"ids": "44229", "raw_code": "private String cleanupPath(String fileName){\n  if (fileName == null) {\n    return null;\n  }\n  fileName=fileName.replace(\"\\\\\",\"/\");\n  fileName=fileName.replace(\"/+\",\"/\");\n  if (fileName.startsWith(\"./\")) {\n    return fileName;\n  }\n  if (fileName.startsWith(\"/\")) {\n    return \".\" + fileName;\n  }\n  return \"./\" + fileName;\n}"}
{"ids": "49059", "raw_code": "public static Class<?> invocationHandlerReturnType(Class<?> type){\n  if (type == byte.class)   return Byte.class;\n  if (type == char.class)   return Character.class;\n  if (type == double.class)   return Double.class;\n  if (type == float.class)   return Float.class;\n  if (type == int.class)   return Integer.class;\n  if (type == long.class)   return Long.class;\n  if (type == short.class)   return Short.class;\n  if (type == boolean.class)   return Boolean.class;\n  return type;\n}"}
{"ids": "60725", "raw_code": "private Node<K,V> findNode(Comparable<? super K> key){\n  for (; ; ) {\n    Node<K,V> b=findPredecessor(key);\n    Node<K,V> n=b.next;\n    for (; ; ) {\n      if (n == null)       return null;\n      Node<K,V> f=n.next;\n      if (n != b.next)       break;\n      Object v=n.value;\n      if (v == null) {\n        n.helpDelete(b,f);\n        break;\n      }\n      if (v == n || b.value == null)       break;\n      int c=key.compareTo(n.key);\n      if (c == 0)       return n;\n      if (c < 0)       return null;\n      b=n;\n      n=f;\n    }\n  }\n}"}
{"ids": "49924", "raw_code": "private static Script scriptFromString(String scriptString,ScriptType scriptType){\n  return new Script(scriptString,scriptType);\n}"}
{"ids": "29242", "raw_code": "private void finishNestedMode() throws SAXException {\n  md=(ModeData)modeDataStack.pop();\n}"}
{"ids": "73174", "raw_code": "public void addPropertyChangeListener(final PropertyChangeListener listener){\n  propertyChangeSupport.addPropertyChangeListener(listener);\n}"}
{"ids": "27343", "raw_code": "protected int skipWhitespace(int c) throws IOException {\n  while (c == ' ' || c == '\\t') {\n    c=reader.read();\n  }\n  return c;\n}"}
{"ids": "45632", "raw_code": "public Builder noCache(){\n  this.noCache=true;\n  return this;\n}"}
{"ids": "41185", "raw_code": "@SuppressWarnings(\"PointlessArithmeticExpression\") public void computeClosestPoints(){\n  float centerX=contentRect.centerX();\n  float closestDistance=Float.MAX_VALUE;\n  for (int i=0; i < pointsCountWithinXRange * 2; i+=2) {\n    float x=getDrawX(xRangePoints[i]);\n    float distance=Math.abs(x - centerX);\n    if (distance <= closestDistance) {\n      if (distance == closestDistance) {\n        closestPointsCount++;\n      }\n else {\n        closestPointsCount=0;\n      }\n      closestDistance=distance;\n      if (closestPointsBuffer.length < (closestPointsCount * 2 + 2)) {\n        closestPointsBuffer=new float[closestPointsBuffer.length * 2];\n      }\n      closestPointsBuffer[closestPointsCount * 2 + 0]=xRangePoints[i];\n      closestPointsBuffer[closestPointsCount * 2 + 1]=xRangePoints[i + 1];\n    }\n  }\n  if (pointsCountWithinXRange > 0) {\n    closestPointsCount++;\n  }\n}"}
{"ids": "26138", "raw_code": "protected TransformedString stem(String words){\n  StringBuilder builder=new StringBuilder();\n  Map<Integer,Integer> indexMap=new HashMap<>();\n  Integer index=0;\n  String content=words.toLowerCase();\n  while (!content.isEmpty()) {\n    indexMap.put(builder.length(),index);\n    if (Character.isAlphabetic(content.charAt(0))) {\n      Matcher m=WORD_PATTERN.matcher(content);\n      m.find();\n      String match=m.group();\n      CharSequence stemmedMatch=stemmer.stem(match);\n      builder.append(stemmedMatch);\n      index+=match.length();\n      content=content.substring(match.length());\n    }\n else {\n      builder.append(content.substring(0,1));\n      content=content.substring(1);\n      index++;\n    }\n  }\n  indexMap.put(builder.length(),index);\n  return new TransformedString(words,builder.toString(),indexMap);\n}"}
{"ids": "5771", "raw_code": "@Override public void onLayoutChildren(RecyclerView.Recycler recycler,RecyclerView.State state){\n  if (state.getItemCount() == 0) {\n    detachAndScrapAttachedViews(recycler);\n    return;\n  }\n  if (state.isPreLayout()) {\n    if (getChildCount() == 0)     return;\n    final int childCount=getChildCount();\n    for (int i=0; i < childCount; i++) {\n      View child=getChildAt(i);\n      RecyclerView.LayoutParams lp=(RecyclerView.LayoutParams)child.getLayoutParams();\n      if (lp.isItemRemoved()) {\n        removedTopAndBoundPositionCount++;\n        if (firstChangedPosition == -1 || firstAttachedItemPosition + i < firstChangedPosition) {\n          firstChangedPosition=firstAttachedItemPosition + i;\n        }\n      }\n    }\n    if (removedTopAndBoundPositionCount != 0) {\n      layoutAttachedAndAppearingViews(recycler,state);\n    }\n    isBeforePreLayout=false;\n    return;\n  }\n  if (getChildCount() == 0) {\n    initializeLayoutParameters();\n    fillGrid(recycler,state,true);\n    return;\n  }\n  if (isNotifyDataSetChanged) {\n    detachAndScrapAttachedViews(recycler);\n    initializeLayoutParameters();\n    fillGrid(recycler,state,true);\n    isNotifyDataSetChanged=false;\n    return;\n  }\n  if (firstChangedPosition == -1) {\n    mCurrentPosition=firstAttachedItemPosition;\n    lastAttachedItemPosition=firstAttachedItemPosition;\n    topBorder=getPaddingTop();\n    bottomBorder=getHeight() - getPaddingBottom();\n    spanBottom=Arrays.copyOf(spanTop,mSpanCount);\n    updateSpanBottomParameters();\n    detachAndScrapAttachedViews(recycler);\n    fillGrid(recycler,state,true);\n    isBeforePreLayout=true;\n    return;\n  }\n  for (int i=firstChangedPosition; i < state.getItemCount(); i++) {\n    if (itemLayoutWidthCache.get(i,0) != 0) {\n      itemLayoutWidthCache.delete(i);\n      itemLayoutHeightCache.delete(i);\n      itemOccupiedStartSpan.delete(i);\n    }\n    if (fakeItemLayoutWidthCache.get(i,0) != 0) {\n      itemLayoutWidthCache.put(i,fakeItemLayoutWidthCache.get(i));\n      itemLayoutHeightCache.put(i,fakeItemLayoutHeightCache.get(i));\n      itemOccupiedStartSpan.put(i,fakeItemOccupiedStartSpan.get(i));\n    }\n  }\n  fakeItemLayoutWidthCache.clear();\n  fakeItemLayoutHeightCache.clear();\n  fakeItemOccupiedStartSpan.clear();\n  detachAndScrapAttachedViews(recycler);\n  if (firstChangedPosition < firstAttachedItemPosition) {\n    mCurrentPosition=firstAttachedItemPosition;\n    lastAttachedItemPosition=firstAttachedItemPosition;\n    topBorder=getPaddingTop();\n    bottomBorder=getHeight() - getPaddingBottom();\n    spanBottom=Arrays.copyOf(spanTop,mSpanCount);\n    updateSpanBottomParameters();\n    fillGrid(recycler,state,true);\n    if (spanBottomMax < bottomBorder) {\n      scrollBy(spanBottomMax - bottomBorder,recycler,state);\n    }\n    layoutDisappearingViews(recycler,state);\n  }\n else {\n    mCurrentPosition=firstAttachedItemPosition;\n    lastAttachedItemPosition=firstAttachedItemPosition;\n    topBorder=getPaddingTop();\n    bottomBorder=getHeight() - getPaddingBottom();\n    spanBottom=Arrays.copyOf(spanTop,mSpanCount);\n    updateSpanBottomParameters();\n    fillGrid(recycler,state,true);\n    if (spanBottomMax - bottomBorder < 0) {\n      scrollBy(spanBottomMax - bottomBorder,recycler,state);\n    }\n  }\n  isBeforePreLayout=true;\n  firstChangedPosition=-1;\n  removedTopAndBoundPositionCount=0;\n  disappearingViewCache.clear();\n}"}
{"ids": "29010", "raw_code": "void clear(){\n  valueNumbersUnconditionallyDereferenced.clear();\n  derefLocationSetMap.clear();\n}"}
{"ids": "61816", "raw_code": "private static String urlEncode(final String text) throws UnsupportedEncodingException {\n  return URLEncoder.encode(text,\"UTF-8\");\n}"}
{"ids": "48924", "raw_code": "public String[] list() throws RemoteException {\n  String[] names;\nsynchronized (bindings) {\n    int i=bindings.size();\n    names=new String[i];\n    Enumeration<String> enum_=bindings.keys();\n    while ((--i) >= 0)     names[i]=enum_.nextElement();\n  }\n  return names;\n}"}
{"ids": "40499", "raw_code": "public static void assertQEx(String message,SolrQueryRequest req,int code){\n  try {\n    ignoreException(\".\");\n    h.query(req);\n    fail(message);\n  }\n catch (  SolrException sex) {\n    assertEquals(code,sex.code());\n  }\ncatch (  Exception e2) {\n    throw new RuntimeException(\"Exception during query\",e2);\n  }\n finally {\n    unIgnoreException(\".\");\n  }\n}"}
{"ids": "55138", "raw_code": "public static void copyFile(String fromFile,String toFile) throws IOException {\n  copyFile(new File(fromFile),new File(toFile));\n}"}
{"ids": "11959", "raw_code": "protected synchronized void readAndVerify() throws InvalidKeyException, IOException, FileEncryptionException, IllegalBlockSizeException, BadPaddingException, FileIntegrityException {\n  if (backingRandomAccessFile.length() < headerSize()) {\n    throw new FileEncryptionException(\"Invalid file header\");\n  }\n  if (shareKey == null || shareKey.getEncoded().length == 0) {\n    throw new FileEncryptionException(\"Invalid share key in encrypting random access file!\");\n  }\n else {\n    headerAuthHMac.reset();\n    KeyParameter keyParameter=new KeyParameter(shareKey.getEncoded());\n    headerAuthHMac.init(keyParameter);\n  }\n  long oldpos=backingRandomAccessFile.getFilePointer();\n  backingRandomAccessFile.seek(0);\n  byte[] header_data=new byte[headerSize() - FileHeader.AUTH_TAG_SIZE];\n  backingRandomAccessFile.read(header_data);\n  backingRandomAccessFile.read(headerAuthTag);\n  backingRandomAccessFile.seek(oldpos);\n  headerAuthHMac.update(header_data,0,header_data.length);\n  byte[] hmacRef=new byte[AUTH_TAG_SIZE];\n  headerAuthHMac.doFinal(hmacRef,0);\n  if (!Arrays.equals(hmacRef,headerAuthTag)) {\n    throw new FileIntegrityException(\"HMac of file header is invalid!\");\n  }\n else {\n    DataInputStream istream=new DataInputStream(new ByteArrayInputStream(header_data));\n    byte[] tmpmagic=new byte[PANBOX_FILE_MAGIC.length];\n    istream.read(tmpmagic);\n    if (!Arrays.equals(tmpmagic,PANBOX_FILE_MAGIC)) {\n      throw new FileEncryptionException(\"Invalid magic number in file header\");\n    }\n    byte[] tmpversion=new byte[PANBOX_FILE_VERSION.length];\n    istream.read(tmpversion);\n    if (!Arrays.equals(tmpversion,PANBOX_FILE_VERSION)) {\n      throw new FileEncryptionException(\"Invalid version in file header. Expected version is \" + PANBOX_FILE_VERSION.toString());\n    }\n    this.shareKeyVersion=istream.readInt();\n    byte[] tmpencryptedFileKey=new byte[KeyConstants.SYMMETRIC_FILE_KEY_SIZE_BYTES];\n    istream.read(tmpencryptedFileKey);\n    filekeyCipher.init(Cipher.DECRYPT_MODE,shareKey);\n    this.decryptedFileKey=new SecretKeySpec(filekeyCipher.doFinal(tmpencryptedFileKey),getAlgorithmIdentifier());\n    if (implementsAuthentication()) {\n      byte[] tmpFileAuthBuf=new byte[AuthTagVerifier.AUTH_TAG_SIZE];\n      istream.read(tmpFileAuthBuf);\n      byte[] zeroBuf=new byte[AuthTagVerifier.AUTH_TAG_SIZE];\n      Arrays.fill(zeroBuf,(byte)0x00);\n      if (Arrays.equals(zeroBuf,tmpFileAuthBuf)) {\n        setFileAuthTag(null);\n      }\n else {\n        setFileAuthTag(tmpFileAuthBuf);\n      }\n    }\n    istream.close();\n  }\n}"}
{"ids": "74204", "raw_code": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=\"FE_FLOATING_POINT_EQUALITY\",justification=\"equality is specifically 'Unchanged' here\") public void changeLocoSpeed(DccThrottle t,Section sec,float speed){\n  if (sec == referenced && speed == desiredSpeedStep) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Already setting to desired speed step for this section\");\n    }\n    return;\n  }\n  float sectionLength=sec.getActualLength();\n  if (log.isDebugEnabled()) {\n    log.debug(\"call to change speed via section \" + sec.getDisplayName());\n  }\n  if (sec == referenced) {\n    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));\n    sectionLength=distanceRemaining;\n  }\n else {\n    referenced=sec;\n  }\n  changeLocoSpeed(t,sectionLength,speed);\n}"}
{"ids": "37494", "raw_code": "private void drawOffsets(final Graphics g){\n  final int linesToDraw=getNumberOfVisibleRows();\n  final String formatString=m_addressMode == AddressMode.BIT32 ? \"%08X\" : \"%016X\";\n  final long elementSize=getElementSize();\n  final long baseAddress=m_model.getStartAddress() == -1 ? 0 : m_model.getStartAddress();\n  for (int i=0; i < linesToDraw; i++) {\n    final int elementIndex=m_firstRow + i;\n    final long elementAddress=baseAddress + (elementIndex * elementSize);\n    final String offsetString=String.format(formatString,elementAddress);\n    if (elementAddress == m_model.getStackPointer()) {\n      highlightStackPointer(g,i);\n    }\n    if (isEnabled()) {\n      g.setColor(m_fontColorOffsets);\n    }\n else {\n      g.setColor(m_disabledColor != m_bgColorOffset ? m_disabledColor : Color.WHITE);\n    }\n    g.drawString(offsetString,PADDING_LEFT - (m_charWidth * m_firstColumn),m_paddingTop + (i * m_rowHeight));\n  }\n}"}
{"ids": "1330", "raw_code": "public static final String crypt(String salt,String original){\n  while (salt.length() < 2)   salt+=\"A\";\n  StringBuilder buffer=new StringBuilder(\" \");\n  char charZero=salt.charAt(0);\n  char charOne=salt.charAt(1);\n  buffer.setCharAt(0,charZero);\n  buffer.setCharAt(1,charOne);\n  int Eswap0=con_salt[charZero];\n  int Eswap1=con_salt[charOne] << 4;\n  byte key[]=new byte[8];\n  for (int i=0; i < key.length; i++)   key[i]=(byte)0;\n  for (int i=0; i < key.length && i < original.length(); i++) {\n    int iChar=original.charAt(i);\n    key[i]=(byte)(iChar << 1);\n  }\n  int schedule[]=des_set_key(key);\n  int out[]=body(schedule,Eswap0,Eswap1);\n  byte b[]=new byte[9];\n  intToFourBytes(out[0],b,0);\n  intToFourBytes(out[1],b,4);\n  b[8]=0;\n  for (int i=2, y=0, u=0x80; i < 13; i++) {\n    for (int j=0, c=0; j < 6; j++) {\n      c<<=1;\n      if ((b[y] & u) != 0)       c|=1;\n      u>>>=1;\n      if (u == 0) {\n        y++;\n        u=0x80;\n      }\n      buffer.setCharAt(i,(char)cov_2char[c]);\n    }\n  }\n  return (buffer.toString());\n}"}
{"ids": "35202", "raw_code": "public static boolean prefixedWith(String a,String b){\n  if (a.equals(b)) {\n    return false;\n  }\n  return a.startsWith(b);\n}"}
{"ids": "33351", "raw_code": "public static String readStream(InputStream inputStream) throws IOException {\n  if (inputStream == null) {\n    return null;\n  }\n  ByteArrayOutputStream bout=new ByteArrayOutputStream();\n  byte[] buf=new byte[8192];\n  int r;\n  while ((r=inputStream.read(buf)) != -1) {\n    bout.write(buf,0,r);\n  }\n  return bout.toString(\"UTF-8\");\n}"}
{"ids": "37748", "raw_code": "private Instances makeHeader(){\n  ArrayList<Attribute> fv=new ArrayList<Attribute>();\n  fv.add(new Attribute(\"Margin\"));\n  fv.add(new Attribute(\"Current\"));\n  fv.add(new Attribute(\"Cumulative\"));\n  return new Instances(\"MarginCurve\",fv,100);\n}"}
{"ids": "27307", "raw_code": "private static ICloseableIterator<IBindingSet> iterator(final IRunningQuery runningQuery){\n  final ICloseableIterator<IBindingSet[]> it1=runningQuery.iterator();\n  final ICloseableIterator<IBindingSet> it2=new Dechunkerator<IBindingSet>(it1);\n  final ICloseableIterator<IBindingSet> it3=new RunningQueryCloseableIterator<IBindingSet>(runningQuery,it2);\n  return it3;\n}"}
{"ids": "84585", "raw_code": "public final double doOperation() throws OperatorFailedException {\n  final int dim=parameter.getDimension();\n  final int dim1=MathUtils.nextInt(dim);\n  int dim2=dim1;\n  while (dim1 == dim2) {\n    dim2=MathUtils.nextInt(dim);\n  }\n  double scalar1=parameter.getParameterValue(dim1);\n  double scalar2=parameter.getParameterValue(dim2);\n  final double d=MathUtils.nextDouble() * delta * scalar1;\n  scalar1-=d;\n  if (parameterWeights[dim1] != parameterWeights[dim2]) {\n    scalar2+=d * (double)parameterWeights[dim1] / (double)parameterWeights[dim2];\n  }\n else {\n    scalar2+=d;\n  }\n  parameter.setParameterValue(dim1,scalar1);\n  parameter.setParameterValue(dim2,scalar2);\n  return Math.log(scalar2 / (scalar1 + d));\n}"}
{"ids": "57694", "raw_code": "@Override public final boolean isOpen(){\n  return isOpen.get();\n}"}
{"ids": "31122", "raw_code": "private static StreamTokenizer createTokenizer(String s){\n  StreamTokenizer st=new StreamTokenizer(new StringReader(s));\n  st.resetSyntax();\n  st.wordChars('a','z');\n  st.wordChars('A','Z');\n  st.wordChars('.','.');\n  st.wordChars('0','9');\n  st.wordChars('_','_');\n  st.wordChars('$','$');\n  st.wordChars(128 + 32,255);\n  st.whitespaceChars(0,' ');\n  st.lowerCaseMode(false);\n  st.ordinaryChar('/');\n  st.slashSlashComments(false);\n  st.slashStarComments(false);\n  return st;\n}"}
{"ids": "67684", "raw_code": "public static String removeChars(String str,String oldchars){\n  int pos=indexOfChars(str,oldchars);\n  if (pos == -1) {\n    return str;\n  }\n  StringBuilder buf=new StringBuilder();\n  int start=0;\n  do {\n    buf.append(str.substring(start,pos));\n    start=pos + 1;\n    pos=indexOfChars(str,oldchars,start);\n  }\n while (pos != -1);\n  if (start < str.length()) {\n    buf.append(str.substring(start));\n  }\n  return buf.toString();\n}"}
{"ids": "32695", "raw_code": "private void sortUnitsToMove(final List<Unit> units,final Route route){\n  if (units == null || units.isEmpty()) {\n    return;\n  }\n else   if (route == null) {\n    final Exception nullRouteError=(new IllegalArgumentException(\"route is not supposed to be null\"));\n    ClientLogger.logQuietly(\"Programming error, route should not be null here. Aborting sort operation and returning.\",nullRouteError);\n  }\n  final Comparator<Unit> unitComparator;\n  if (route.isUnload() && Match.someMatch(units,Matches.UnitIsLand)) {\n    unitComparator=UnitComparator.getUnloadableUnitsComparator(units,route,getUnitOwner(units));\n  }\n else {\n    unitComparator=UnitComparator.getMovableUnitsComparator(units,route);\n  }\n  Collections.sort(units,unitComparator);\n}"}
{"ids": "81356", "raw_code": "public boolean implementsInterface(ReferenceBinding anInterface,boolean searchHierarchy){\n  if (this == anInterface)   return true;\n  ReferenceBinding[] interfacesToVisit=null;\n  int nextPosition=0;\n  ReferenceBinding currentType=this;\n  do {\n    ReferenceBinding[] itsInterfaces=currentType.superInterfaces();\n    if (itsInterfaces != null && itsInterfaces != Binding.NO_SUPERINTERFACES) {\n      if (interfacesToVisit == null) {\n        interfacesToVisit=itsInterfaces;\n        nextPosition=interfacesToVisit.length;\n      }\n else {\n        int itsLength=itsInterfaces.length;\n        if (nextPosition + itsLength >= interfacesToVisit.length)         System.arraycopy(interfacesToVisit,0,interfacesToVisit=new ReferenceBinding[nextPosition + itsLength + 5],0,nextPosition);\n        nextInterface:         for (int a=0; a < itsLength; a++) {\n          ReferenceBinding next=itsInterfaces[a];\n          for (int b=0; b < nextPosition; b++)           if (next == interfacesToVisit[b])           continue nextInterface;\n          interfacesToVisit[nextPosition++]=next;\n        }\n      }\n    }\n  }\n while (searchHierarchy && (currentType=currentType.superclass()) != null);\n  for (int i=0; i < nextPosition; i++) {\n    currentType=interfacesToVisit[i];\n    if (currentType.isEquivalentTo(anInterface))     return true;\n    ReferenceBinding[] itsInterfaces=currentType.superInterfaces();\n    if (itsInterfaces != null && itsInterfaces != Binding.NO_SUPERINTERFACES) {\n      int itsLength=itsInterfaces.length;\n      if (nextPosition + itsLength >= interfacesToVisit.length)       System.arraycopy(interfacesToVisit,0,interfacesToVisit=new ReferenceBinding[nextPosition + itsLength + 5],0,nextPosition);\n      nextInterface:       for (int a=0; a < itsLength; a++) {\n        ReferenceBinding next=itsInterfaces[a];\n        for (int b=0; b < nextPosition; b++)         if (next == interfacesToVisit[b])         continue nextInterface;\n        interfacesToVisit[nextPosition++]=next;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "11366", "raw_code": "public Road(int id,String name,Intersection from,Intersection to,RoadClass roadClass,RoadLayer roadLayer){\n  this.id=id;\n  this.name=name;\n  this.roadLayer=roadLayer;\n  points=new Waypoint[2];\n  setIntersections(from,to);\n  this.roadClass=roadClass;\n  createLines();\n  modified=false;\n}"}
{"ids": "22223", "raw_code": "@Override public void process(WatchedEvent event){\n  KeeperState eventState=event.getState();\n  EventType eventType=event.getType();\n  log.info(\"Receive from Watcher, State: {}, Type: {}.\",eventState,eventType);\n  if (eventState == KeeperState.SyncConnected) {\n    connectedSignal.countDown();\n    log.info(\"Connect to {} sucessfully\",connectionString);\n  }\n}"}
{"ids": "29774", "raw_code": "private void initProperties(String filePropertiesName){\n  readFromClassPath(filePropertiesName);\n  Path curDirPath=getFileInCurrentDir(filePropertiesName);\n  if (Files.exists(curDirPath)) {\n    try (InputStream curFolder=Files.newInputStream(curDirPath)){\n      if (curFolder != null) {\n        load(curFolder);\n      }\n    }\n catch (    Exception e) {\n      throw new RuntimeException(\"Error getting properties file : \" + filePropertiesName,e);\n    }\n  }\n}"}
{"ids": "4215", "raw_code": "private void resetBounds(){\n  bottomProteinId=null;\n  topProteinId=null;\n}"}
{"ids": "17311", "raw_code": "private String property(String classId,String key,String instanceId){\n  return PREFIX_OVF_PROP + makePropertyKey(classId,key,instanceId);\n}"}
{"ids": "63038", "raw_code": "public String list(String dir) throws IOException {\n  passive();\n  send(\"LIST \" + dir);\n  readCode(150);\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  IOUtils.copyAndClose(inData,out);\n  readCode(226);\n  byte[] data=out.toByteArray();\n  return new String(data);\n}"}
{"ids": "2731", "raw_code": "public static int convertPxToSp(int pxSize){\n  return Math.round((float)pxSize * getDisplayDensity4Fonts());\n}"}
{"ids": "22026", "raw_code": "private void persistConsistencyGroups(Collection<BlockConsistencyGroup> cgsToPersist){\n  if (null != cgsToPersist && !cgsToPersist.isEmpty()) {\n    List<BlockConsistencyGroup> cgsToCreate=new ArrayList<BlockConsistencyGroup>();\n    List<BlockConsistencyGroup> cgsToUpdate=new ArrayList<BlockConsistencyGroup>();\n    for (    BlockConsistencyGroup cg : cgsToPersist) {\n      if (null == cg.getCreationTime()) {\n        cgsToCreate.add(cg);\n      }\n else {\n        cgsToUpdate.add(cg);\n      }\n    }\n    if (!cgsToCreate.isEmpty()) {\n      _dbClient.createObject(cgsToCreate);\n    }\n    if (!cgsToUpdate.isEmpty()) {\n      _dbClient.updateObject(cgsToUpdate);\n    }\n  }\n}"}
{"ids": "71955", "raw_code": "public void requestPasswordChangedTime(){\n  operations.add(PasswordPolicyStateOperationType.GET_PASSWORD_CHANGED_TIME);\n}"}
{"ids": "69719", "raw_code": "public static byte[] encodeRegionName(String regionName){\n  byte[] metadata;\n  try {\n    JSONObject jsonObject=new JSONObject();\n    jsonObject.put(JSON_FIELD_TAG,regionName);\n    String json=jsonObject.toString();\n    metadata=json.getBytes(JSON_CHARSET);\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Failed to encode metadata: \" + e.getMessage());\n    metadata=null;\n  }\n  return metadata;\n}"}
{"ids": "48407", "raw_code": "public boolean isValid(){\n  boolean valid=true;\n  if (endtime.getTime() < System.currentTimeMillis()) {\n    valid=false;\n  }\n else   if (starttime != null) {\n    if (starttime.getTime() > System.currentTimeMillis()) {\n      valid=false;\n    }\n  }\n else {\n    if (authtime.getTime() > System.currentTimeMillis()) {\n      valid=false;\n    }\n  }\n  return valid;\n}"}
{"ids": "79779", "raw_code": "public static boolean addSeparatorIfNeeded(JPopupMenu popupMenu){\n  final int menuComponentCount=popupMenu.getComponentCount();\n  if (menuComponentCount == 0) {\n    return false;\n  }\n  final Component lastMenuComponent=popupMenu.getComponent(menuComponentCount - 1);\n  if (isPopupMenuSeparator(lastMenuComponent)) {\n    return false;\n  }\n  popupMenu.addSeparator();\n  return true;\n}"}
{"ids": "31723", "raw_code": "public int groupSize(String grpName){\n  int res=0;\n  for (  HadoopCounter counter : cntrs.values()) {\n    if (grpName.equals(counter.group()))     res++;\n  }\n  return res;\n}"}
{"ids": "48443", "raw_code": "public ResourceBundleEnumeration(Set<String> set,Enumeration<String> enumeration){\n  this.set=set;\n  this.iterator=set.iterator();\n  this.enumeration=enumeration;\n}"}
{"ids": "39491", "raw_code": "public static int toRGB(ColorSpace colorSpace,float... components){\n  float[] rgb=colorSpace.toRGB(components);\n  if (rgb[0] < 0f || rgb[1] < 0f || rgb[2] < 0f || rgb[0] > 1f || rgb[1] > 1f || rgb[2] > 1f) {\n    return 0;\n  }\n  return 0xff000000 | ((int)(rgb[0] * 255f) << 16) | ((int)(rgb[1] * 255f) << 8)| (int)(rgb[2] * 255f);\n}"}
{"ids": "62266", "raw_code": "private static void skipNames(ByteBuffer tableBuffer,int count){\n  for (int i=0; i < count; ++i) {\n    ByteUtil.forward(tableBuffer,tableBuffer.getShort());\n  }\n}"}
{"ids": "34089", "raw_code": "public Object2IntOpenHashMap<int[]> supportMap(){\n  List<ItemSet> itemSets=learn();\n  Object2IntOpenHashMap<int[]> confidenceMap=new Object2IntOpenHashMap<>(itemSets.size());\n  for (  ItemSet itemSet : itemSets) {\n    confidenceMap.put(itemSet.items,itemSet.support);\n  }\n  return confidenceMap;\n}"}
{"ids": "26263", "raw_code": "public static List<String> makeFeatureIdListFromPrefixed(Map<String,Object> parameters){\n  List<String> featureIdList=FastList.newInstance();\n  if (parameters == null)   return featureIdList;\n  for (  Map.Entry<String,Object> entry : parameters.entrySet()) {\n    String parameterName=entry.getKey();\n    if (parameterName.startsWith(\"SEARCH_FEAT\")) {\n      String productFeatureId=(String)entry.getValue();\n      if (UtilValidate.isNotEmpty(productFeatureId)) {\n        featureIdList.add(productFeatureId);\n      }\n    }\n  }\n  return featureIdList;\n}"}
{"ids": "69429", "raw_code": "private void updateOverscrollAnimation(final int scrolledOffset){\n  if (mEdgeGlowLeft == null || mEdgeGlowRight == null)   return;\n  int nextScrollPosition=mCurrentX + scrolledOffset;\n  if (mFlingTracker == null || mFlingTracker.isFinished()) {\n    if (nextScrollPosition < 0) {\n      int overscroll=Math.abs(scrolledOffset);\n      mEdgeGlowLeft.onPull((float)overscroll / getRenderWidth());\n      if (!mEdgeGlowRight.isFinished()) {\n        mEdgeGlowRight.onRelease();\n      }\n    }\n else     if (nextScrollPosition > mMaxX) {\n      int overscroll=Math.abs(scrolledOffset);\n      mEdgeGlowRight.onPull((float)overscroll / getRenderWidth());\n      if (!mEdgeGlowLeft.isFinished()) {\n        mEdgeGlowLeft.onRelease();\n      }\n    }\n  }\n}"}
{"ids": "81020", "raw_code": "public void addLongSelectionListener(SelectionListener listener){\n  if (listener == null)   throw new IllegalArgumentException();\n  if (!longSelectionListeners.contains(listener))   longSelectionListeners.add(listener);\n}"}
{"ids": "67094", "raw_code": "public void validate(){\n  final List<ValidationException> exceptionList=new ArrayList<ValidationException>();\n  validate(exceptionList);\n  if (!exceptionList.isEmpty())   throw exceptionList.get(0);\n}"}
{"ids": "46409", "raw_code": "protected void installComponents(){\n  if ((rendererPane=createCellRendererPane()) != null) {\n    tree.add(rendererPane);\n  }\n}"}
{"ids": "37233", "raw_code": "public CActionDifferenceTraces(final JFrame parent,final ITraceListProvider traceProvider,final TraceList trace1,final TraceList trace2){\n  super(String.format(\"%s - %s\",trace1.getName(),trace2.getName()));\n  m_parent=parent;\n  m_traceProvider=traceProvider;\n  m_trace1=trace1;\n  m_trace2=trace2;\n}"}
{"ids": "55139", "raw_code": "public static void copyFile(File fromFile,File toFile) throws IOException {\n  FileInputStream fileInputStream=new FileInputStream(fromFile);\n  FileOutputStream fileOutputStream=new FileOutputStream(toFile);\n  int i;\n  byte bytes[]=new byte[2048];\n  while ((i=fileInputStream.read(bytes)) != -1) {\n    fileOutputStream.write(bytes,0,i);\n  }\n  fileInputStream.close();\n  fileOutputStream.close();\n}"}
{"ids": "55873", "raw_code": "public final void updateTimeControlTitle(){\n  int[] tmpInfo=ctrl.getTimeLimit();\n  StringBuilder sb=new StringBuilder();\n  int tc=tmpInfo[0];\n  int mps=tmpInfo[1];\n  int inc=tmpInfo[2];\n  if (mps > 0) {\n    sb.append(mps);\n    sb.append(\"/\");\n  }\n  sb.append(timeToString(tc));\n  if ((inc > 0) || (mps <= 0)) {\n    sb.append(\"+\");\n    sb.append(tmpInfo[2] / 1000);\n  }\n  summaryTitleText.setText(sb.toString());\n}"}
{"ids": "51182", "raw_code": "@After public void after() throws SQLException {\n  Connection connection=null;\n  Statement statement=null;\n  try {\n    connection=getNewConnection(true);\n    statement=connection.createStatement();\n    statement.executeQuery(\"DROP TABLE IF EXISTS replica_host_status\");\n  }\n  finally {\n    if (statement != null) {\n      statement.close();\n    }\n    if (connection != null) {\n      connection.close();\n    }\n  }\n}"}
{"ids": "23097", "raw_code": "private void attachHeader(SIPHeader h){\n  if (h == null)   throw new IllegalArgumentException(\"null header!\");\n  try {\n    if (h instanceof SIPHeaderList) {\n      SIPHeaderList<?> hl=(SIPHeaderList<?>)h;\n      if (hl.isEmpty()) {\n        return;\n      }\n    }\n    attachHeader(h,false,false);\n  }\n catch (  SIPDuplicateHeaderException ex) {\n  }\n}"}
{"ids": "79813", "raw_code": "public void initParam(Object obj){\n  paramObject=obj;\n  Enumeration<AbstractParamPanel> en=tablePanel.elements();\n  AbstractParamPanel panel=null;\n  while (en.hasMoreElements()) {\n    panel=en.nextElement();\n    panel.initParam(obj);\n  }\n}"}
{"ids": "63361", "raw_code": "public void updateTopic(String topic,DbContextRule rule){\n  topic=StringUtils.toLowerEnglish(topic);\n  RuleHead head=ruleMap.get(topic);\n  if (head == null) {\n    head=new RuleHead(\"db\",topic,rule);\n    ruleMap.put(topic,head);\n    statements.add(head);\n  }\n else {\n    head.setRule(rule);\n  }\n}"}
{"ids": "63812", "raw_code": "public static double log10(double x){\n  return Math.log(x) / LOG10;\n}"}
{"ids": "36504", "raw_code": "public static int isButtonOnScreen(final String buttonKey){\n  Component onScreen;\n  try {\n    onScreen=BubbleWindow.findButton(buttonKey,RapidMinerGUI.getMainFrame());\n  }\n catch (  NullPointerException e) {\n    return OBJECT_NOT_ON_SCREEN;\n  }\n  if (onScreen == null) {\n    return OBJECT_NOT_ON_SCREEN;\n  }\n  int xposition=onScreen.getLocationOnScreen().x;\n  int yposition=onScreen.getLocationOnScreen().y;\n  int otherXposition=xposition + onScreen.getWidth();\n  int otherYposition=yposition + onScreen.getHeight();\n  Window frame=RapidMinerGUI.getMainFrame();\n  if (otherXposition <= frame.getWidth() && otherYposition <= frame.getHeight() && xposition > 0 && yposition > 0) {\n    return OBJECT_SHOWING_ON_SCREEN;\n  }\n else {\n    return OBJECT_NOT_SHOWING;\n  }\n}"}
{"ids": "31902", "raw_code": "public static boolean reachable(InetAddress addr,int reachTimeout){\n  try {\n    return addr.isReachable(reachTimeout);\n  }\n catch (  IOException ignore) {\n    return false;\n  }\n}"}
{"ids": "69503", "raw_code": "protected static String timestr(long time_val,long total_time){\n  boolean neg;\n  long ms=0;\n  long sec=0;\n  long percent10;\n  String pad;\n  neg=time_val < 0;\n  if (neg)   time_val=-time_val;\n  ms=time_val % 1000;\n  sec=time_val / 1000;\n  if (sec < 10)   pad=\"   \";\n else   if (sec < 100)   pad=\"  \";\n else   if (sec < 1000)   pad=\" \";\n else   pad=\"\";\n  percent10=(time_val * 1000) / total_time;\n  return (neg ? \"-\" : \"\") + pad + sec+ \".\"+ ((ms % 1000) / 100)+ ((ms % 100) / 10)+ (ms % 10)+ \"sec\"+ \" (\"+ percent10 / 10 + \".\" + percent10 % 10 + \"%)\";\n}"}
{"ids": "84644", "raw_code": "public static Tree rotateByName(Tree tree){\n  return new SimpleTree(rotateNodeByName(tree,tree.getRoot()));\n}"}
{"ids": "6995", "raw_code": "@Subscribe public void onEvent(SearchInPosition event){\n  List<LatLng> list=MapHelper.getSearchArea(event.getSteps(),new LatLng(event.getPosition().latitude,event.getPosition().longitude));\n  snackMe(getString(R.string.toast_searching));\n  nianticManager.getGyms(event.getPosition().latitude,event.getPosition().longitude,0D);\n  nianticManager.getPokeStops(event.getPosition().latitude,event.getPosition().longitude,0D);\n  nianticManager.getLuredPokemon(event.getPosition().latitude,event.getPosition().longitude,0D);\n  for (  LatLng p : list) {\n    nianticManager.getCatchablePokemon(p.latitude,p.longitude,0D);\n  }\n}"}
{"ids": "62146", "raw_code": "public void save(OnSaveLogListener listener){\n  File dir=getLogDir();\n  if (dir == null) {\n    listener.onError(\"Can't save logs. External storage is not mounted. \" + \"Check android.permission.WRITE_EXTERNAL_STORAGE permission\");\n    return;\n  }\n  FileWriter fileWriter=null;\n  try {\n    File output=new File(dir,getLogFileName());\n    fileWriter=new FileWriter(output,true);\n    List<LogEntry> entries=bufferedLogs();\n    for (    LogEntry entry : entries) {\n      fileWriter.write(entry.prettyPrint() + \"\\n\");\n    }\n    listener.onSave(output);\n  }\n catch (  IOException e) {\n    listener.onError(e.getMessage());\n    e.printStackTrace();\n  }\n finally {\n    if (fileWriter != null) {\n      try {\n        fileWriter.close();\n      }\n catch (      IOException e) {\n        listener.onError(e.getMessage());\n        e.printStackTrace();\n      }\n    }\n  }\n}"}
{"ids": "21516", "raw_code": "protected StorageHADomain checkAdapterExistsInDB(String nativeGuid) throws IOException {\n  StorageHADomain adapter=null;\n  List<StorageHADomain> adapterInDB=CustomQueryUtility.getActiveStorageHADomainByNativeGuid(_dbClient,nativeGuid);\n  if (adapterInDB != null && !adapterInDB.isEmpty()) {\n    adapter=adapterInDB.get(0);\n  }\n  return adapter;\n}"}
{"ids": "71097", "raw_code": "protected Coordinate[] toCoordinateArray(Stack stack){\n  Coordinate[] coordinates=new Coordinate[stack.size()];\n  for (int i=0; i < stack.size(); i++) {\n    Coordinate coordinate=(Coordinate)stack.get(i);\n    coordinates[i]=coordinate;\n  }\n  return coordinates;\n}"}
{"ids": "62084", "raw_code": "private static void onEntityOpened(KeyEvent event) throws BadLocationException {\n  JEditorPane editor=(JEditorPane)event.getSource();\n  Document doc=editor.getDocument();\n  int pos=editor.getCaretPosition();\n  String tag=getCurrentTag(doc.getText(0,pos));\n  if (tag.equals(\"\")) {\n    return;\n  }\n  String remainder=doc.getText(pos,doc.getLength() - pos);\n  for (int i=0; i < remainder.length(); i++) {\n    char c=remainder.charAt(i);\n    if (c == '\\n') {\n      break;\n    }\n else     if (!Character.isWhitespace(c)) {\n      return;\n    }\n  }\n  StringBuffer buffer=new StringBuffer();\n  int newPosition=pos;\n  String indent=getIndent(doc,pos);\n  if (tag.equals(\"if\")) {\n    buffer.append(\" var=\\\"\\\" relation=\\\"=\\\" value=\\\"\\\"/>\");\n    newPosition+=6;\n  }\n else   if (tag.equals(\"set\")) {\n    buffer.append(\" var=\\\"\\\" value=\\\"\\\"/>\");\n    newPosition+=6;\n  }\n else   if (tag.equals(\"value\")) {\n    buffer.append(\" prob=\\\"\\\"></value>\");\n    newPosition+=7;\n  }\n else   if (tag.equals(\"variable\")) {\n    buffer.append(\" id=\\\"\\\">\\n\");\n    buffer.append(indent + \"\\t<value prob=\\\"1\\\"></value>\\n\");\n    buffer.append(indent + \"</variable>\\n\");\n    newPosition+=5;\n  }\n else   if (tag.equals(\"model\")) {\n    buffer.append(\" trigger=\\\"\\\">\\n\\n\");\n    buffer.append(indent + \"</model>\");\n    newPosition+=10;\n  }\n else   if (tag.equals(\"effect\")) {\n    buffer.append(\" prob=\\\"1\\\">\\n\");\n    buffer.append(indent + \"\\t<set var=\\\"\\\" value=\\\"\\\"/>\\n\");\n    buffer.append(indent + \"</effect>\\n\");\n    newPosition+=22 + indent.length();\n  }\n else {\n    return;\n  }\n  doc.insertString(pos,buffer.toString(),null);\n  editor.setCaretPosition(newPosition);\n  event.consume();\n}"}
{"ids": "27231", "raw_code": "@SuppressWarnings(\"unused\") private String checkForWellKnownNamespacePrefix(final String prefix){\n  final String namespace;\n  if (prefix.equals(\"bd\")) {\n    prefixMap.put(\"bd\",namespace=BD.NAMESPACE);\n  }\n else   if (prefix.equals(\"bds\")) {\n    prefixMap.put(\"bds\",namespace=BDS.NAMESPACE);\n  }\n else   if (prefix.equals(\"hint\")) {\n    prefixMap.put(\"hint\",namespace=QueryHints.NAMESPACE);\n  }\n else   if (prefix.equals(\"rdf\")) {\n    prefixMap.put(\"rdf\",namespace=RDF.NAMESPACE);\n  }\n else   if (prefix.equals(\"rdfs\")) {\n    prefixMap.put(\"rdfs\",namespace=RDFS.NAMESPACE);\n  }\n else   if (prefix.equals(\"xsd\")) {\n    prefixMap.put(\"xsd\",namespace=XSD.NAMESPACE);\n  }\n else   if (prefix.equals(\"foaf\")) {\n    prefixMap.put(\"foaf\",namespace=FOAFVocabularyDecl.NAMESPACE);\n  }\n else   if (prefix.equals(\"fn\")) {\n    prefixMap.put(\"fn\",namespace=FN.NAMESPACE);\n  }\n else   if (prefix.equals(\"owl\")) {\n    prefixMap.put(\"owl\",namespace=OWL.NAMESPACE);\n  }\n else   if (prefix.equals(\"sesame\")) {\n    prefixMap.put(\"sesame\",namespace=SESAME.NAMESPACE);\n  }\n else   if (prefix.equals(\"gas\")) {\n    prefixMap.put(\"gas\",namespace=GASService.Options.NAMESPACE);\n  }\n else {\n    namespace=null;\n  }\n  return namespace;\n}"}
{"ids": "86261", "raw_code": "private void prepareUserForRanking(User user){\n  User updatedUser=userRepository.findOne(user.getId(),0);\n  if (updatedUser.getImported() == null || !updatedUser.getImported()) {\n    updatedUser.setImported(true);\n    updatedUser.setPagerank(null);\n    updatedUser.setLastPageRank(null);\n    updatedUser.setCurrentRank(null);\n    updatedUser.setPreviousRank(null);\n    userRepository.save(updatedUser,0);\n  }\n}"}
{"ids": "67304", "raw_code": "private static List<Comment> orderComments(List<Comment> comments){\n  Map<String,List<Comment>> parentMap=new HashMap<>();\n  List<Comment> rootComments=new ArrayList<>();\n  for (  Comment c : comments) {\n    String parentUuid=c.parentUuid;\n    List<Comment> l=parentMap.get(parentUuid);\n    if (l == null) {\n      l=new ArrayList<>();\n      parentMap.put(parentUuid,l);\n    }\n    l.add(c);\n    if (parentUuid == null) {\n      rootComments.add(c);\n    }\n  }\n  List<Comment> result=new ArrayList<>();\n  addChildren(parentMap,rootComments,result);\n  return result;\n}"}
{"ids": "18429", "raw_code": "protected static final void logRawDiagnostic(String msg){\n  if (diagnosticsStream != null) {\n    diagnosticsStream.println(msg);\n    diagnosticsStream.flush();\n  }\n}"}
{"ids": "66538", "raw_code": "public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){\n  unauthenticatedIdentity=(String)options.get(\"unauthenticatedIdentity\");\n  handler=callbackHandler;\n  this.subject=subject;\n}"}
{"ids": "45068", "raw_code": "public Macro(File file) throws EOFException, FileNotFoundException, IOException {\n  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();\n  DocumentBuilder db=null;\n  Document doc=null;\n  try {\n    db=dbf.newDocumentBuilder();\n    InputSource is=new InputSource(new UnicodeReader(new FileInputStream(file),FILE_ENCODING));\n    is.setEncoding(FILE_ENCODING);\n    doc=db.parse(is);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    String desc=e.getMessage();\n    if (desc == null) {\n      desc=e.toString();\n    }\n    throw new IOException(\"Error parsing XML: \" + desc);\n  }\n  macroRecords=new ArrayList();\n  boolean parsedOK=initializeFromXMLFile(doc.getDocumentElement());\n  if (parsedOK == false) {\n    name=null;\n    macroRecords.clear();\n    macroRecords=null;\n    throw new IOException(\"Error parsing XML!\");\n  }\n}"}
{"ids": "69524", "raw_code": "public boolean contains(symbol sym){\n  return _all.containsKey(sym.name());\n}"}
{"ids": "60086", "raw_code": "private PieData generateDataPie(int cnt){\n  ArrayList<Entry> entries=new ArrayList<Entry>();\n  for (int i=0; i < 4; i++) {\n    entries.add(new Entry((int)(Math.random() * 70) + 30,i));\n  }\n  PieDataSet d=new PieDataSet(entries,\"\");\n  d.setSliceSpace(2f);\n  d.setColors(ColorTemplate.VORDIPLOM_COLORS);\n  PieData cd=new PieData(getQuarters(),d);\n  return cd;\n}"}
{"ids": "12777", "raw_code": "@Override public final char readChar() throws IOException {\n  dis.readFully(work,0,2);\n  return (char)((work[1] & 0xff) << 8 | (work[0] & 0xff));\n}"}
{"ids": "53053", "raw_code": "public int taskSize(){\n  return tasks.size();\n}"}
{"ids": "32603", "raw_code": "public void addMutedIp(final String ip,final Date muteTill){\n  if (isIpMuted(ip)) {\n    removeMutedIp(ip);\n  }\n  Timestamp muteTillTs=null;\n  if (muteTill != null) {\n    muteTillTs=new Timestamp(muteTill.getTime());\n  }\n  s_logger.fine(\"Muting ip:\" + ip);\n  final Connection con=Database.getConnection();\n  try {\n    final PreparedStatement ps=con.prepareStatement(\"insert into muted_ips (ip, mute_till) values (?, ?)\");\n    ps.setString(1,ip);\n    ps.setTimestamp(2,muteTillTs);\n    ps.execute();\n    ps.close();\n    con.commit();\n  }\n catch (  final SQLException sqle) {\n    if (sqle.getErrorCode() == 30000) {\n      s_logger.info(\"Tried to create duplicate muted ip:\" + ip + \" error:\"+ sqle.getMessage());\n      return;\n    }\n    s_logger.log(Level.SEVERE,\"Error inserting muted ip:\" + ip,sqle);\n    throw new IllegalStateException(sqle.getMessage());\n  }\n finally {\n    DbUtil.closeConnection(con);\n  }\n}"}
{"ids": "55020", "raw_code": "public boolean isRslUrlSigned(String url){\n  if (url == null) {\n    return false;\n  }\n  return url.endsWith(SIGNED_RSL_URL_DOT_EXTENSION);\n}"}
{"ids": "14375", "raw_code": "public void removeUserLockoutEntry(String userDN){\n  pwResetFailHash.remove(userDN);\n  userWarningCount=0;\n}"}
{"ids": "56844", "raw_code": "public void createDatabaseEntitiesForBusinessObjectDataSearchTesting(){\n  businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.PARTITION_VALUE,AbstractServiceTest.NO_SUBPARTITION_VALUES,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID);\n  businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE_2,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.PARTITION_VALUE,AbstractServiceTest.NO_SUBPARTITION_VALUES,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.INVALID);\n  businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractServiceTest.NAMESPACE_2,AbstractServiceTest.BDEF_NAME_2,AbstractServiceTest.FORMAT_USAGE_CODE_2,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.FORMAT_VERSION_2,AbstractServiceTest.PARTITION_VALUE,AbstractServiceTest.NO_SUBPARTITION_VALUES,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.INVALID);\n  businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractServiceTest.NAMESPACE_2,AbstractServiceTest.BDEF_NAME_2,AbstractServiceTest.FORMAT_USAGE_CODE_2,AbstractServiceTest.FORMAT_FILE_TYPE_CODE_2,AbstractServiceTest.FORMAT_VERSION_2,AbstractServiceTest.PARTITION_VALUE,AbstractServiceTest.NO_SUBPARTITION_VALUES,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID);\n}"}
{"ids": "30403", "raw_code": "@SkipValidation @Action(value=\"/searchNotices-reset\") public String reset(){\n  if (LOGGER.isDebugEnabled())   LOGGER.debug(\"reset : Before reset values : ownerName : \" + ownerName + \" zoneId : \"+ zoneId+ \" wardId : \"+ wardId+ \" propertyType : \"+ propertyType+ \" noticeType : \"+ noticeType+ \" noticeNumber : \"+ noticeNumber+ \" noticeFromDate : \"+ noticeFromDate+ \" noticeToDate : \"+ noticeToDate+ \" indexNumber : \"+ indexNumber+ \" houseNumber : \"+ houseNumber);\n  ownerName=\"\";\n  zoneId=-1l;\n  wardId=-1l;\n  propertyType=\"-1\";\n  noticeType=\"-1\";\n  noticeNumber=\"\";\n  noticeFromDate=null;\n  noticeToDate=null;\n  indexNumber=\"\";\n  houseNumber=\"\";\n  if (LOGGER.isDebugEnabled())   LOGGER.debug(\"Exit from reset method\");\n  return INDEX;\n}"}
{"ids": "33931", "raw_code": "public void checkOptionsValid(){\n  if (alias_ratio < 0 || alias_ratio > 1) {\n    throw new RuntimeException(\"Alias ratio must be between 0 and 1, inclusive.\");\n  }\n  if (null_ratio < 0 || null_ratio > 1) {\n    throw new RuntimeException(\"Null ratio must be between 0 and 1, inclusive.\");\n  }\n  if (maxsize <= 0) {\n    throw new RuntimeException(\"Maximum sequence size must be greater than zero but was \" + maxsize);\n  }\n  if (!literals_file.isEmpty() && literals_level == ClassLiteralsMode.NONE) {\n    throw new RuntimeException(\"Invalid parameter combination: specified a class literal file but --use-class-literals=NONE\");\n  }\n}"}
{"ids": "16961", "raw_code": "@Override public UUID sessionId(){\n  if (sessionId == null)   sessionId=UUID.randomUUID();\n  return sessionId;\n}"}
{"ids": "84518", "raw_code": "private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  final Calendar definingCalendar=Calendar.getInstance(timeZone,locale);\n  init(definingCalendar);\n}"}
{"ids": "33814", "raw_code": "@Override public MemChunkHolder<BigDataPMemAllocator> createChunk(long size,boolean autoreclaim){\n  MemChunkHolder<BigDataPMemAllocator> ret=null;\n  Long addr=m_nvmasvc.allocate(m_nid,size,true);\n  if ((null == addr || 0 == addr) && m_activegc) {\n    forceGC();\n    addr=m_nvmasvc.allocate(m_nid,size,true);\n  }\n  if (null != addr && 0 != addr) {\n    ret=new MemChunkHolder<BigDataPMemAllocator>(this,addr,size);\n    ret.setCollector(m_chunkcollector);\n    if (autoreclaim) {\n      m_chunkcollector.register(ret);\n    }\n  }\n  return ret;\n}"}
{"ids": "44493", "raw_code": "public int hashCode(){\n  int result=17;\n  if (tableName != null) {\n    result=37 * tableName.hashCode();\n  }\n  if (repositoryName != null) {\n    result=37 * repositoryName.hashCode();\n  }\n  return result;\n}"}
{"ids": "21056", "raw_code": "public static boolean isNotNullValue(String s){\n  return ((s != null) && !s.isEmpty() && !s.equals(NullColumnValueGetter.getNullStr()));\n}"}
{"ids": "40293", "raw_code": "public static String removeAll(String source,char toRemove){\n  int toRemoveIndex=source.indexOf(toRemove);\n  if (toRemoveIndex != -1) {\n    StringBuilder result=new StringBuilder(source.length());\n    int sourceIndex=0;\n    while (toRemoveIndex != -1) {\n      result.append(source.substring(sourceIndex,toRemoveIndex));\n      sourceIndex=toRemoveIndex + 1;\n      toRemoveIndex=source.indexOf(toRemove,sourceIndex);\n      if (toRemoveIndex == -1) {\n        result.append(source.substring(sourceIndex,source.length()));\n      }\n    }\n    return result.toString();\n  }\n else {\n    return source;\n  }\n}"}
{"ids": "56211", "raw_code": "public List<Entry<E>> asList(){\n  if (nonNullList == null) {\n    if (array == null || array.length() == 0) {\n      nonNullList=Collections.emptyList();\n    }\n else {\n      List<Entry<E>> list=new ArrayList<>(array.length());\n      for (int i=0; i < array.length(); i++) {\n        E e=array.get(i);\n        if (e != null) {\n          list.add(new Entry<>(i,e));\n        }\n      }\n      nonNullList=list;\n    }\n  }\n  return nonNullList;\n}"}
{"ids": "7951", "raw_code": "public static Range findCumulativeRangeBounds(CategoryDataset dataset){\n  ParamChecks.nullNotPermitted(dataset,\"dataset\");\n  boolean allItemsNull=true;\n  double minimum=0.0;\n  double maximum=0.0;\n  for (int row=0; row < dataset.getRowCount(); row++) {\n    double runningTotal=0.0;\n    for (int column=0; column <= dataset.getColumnCount() - 1; column++) {\n      Number n=dataset.getValue(row,column);\n      if (n != null) {\n        allItemsNull=false;\n        double value=n.doubleValue();\n        if (!Double.isNaN(value)) {\n          runningTotal=runningTotal + value;\n          minimum=Math.min(minimum,runningTotal);\n          maximum=Math.max(maximum,runningTotal);\n        }\n      }\n    }\n  }\n  if (!allItemsNull) {\n    return new Range(minimum,maximum);\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "55282", "raw_code": "private void addHotkeys(JRootPane pane){\n  for (  Hotkey hotkey : hotkeys) {\n    if (doesHotkeyHaveAction(hotkey) && hotkey.type == Type.REGULAR) {\n      if (pane == null) {\n        addHotkey(hotkey,main.getRootPane());\n        for (        JDialog popout : popouts.keySet()) {\n          addHotkey(hotkey,popout.getRootPane());\n        }\n      }\n else {\n        addHotkey(hotkey,pane);\n      }\n    }\n  }\n}"}
{"ids": "8006", "raw_code": "static <T>ReplayPromise<Void> allReplay(final Duration timeout,final List<Promise<T>> promises){\n  return allReplay(timeout,System.currentTimeMillis(),promises.toArray(new Promise[promises.size()]));\n}"}
{"ids": "22091", "raw_code": "public void checkAndSetupBootStrapInfo(DbClient dbClient){\n  if (onStandby) {\n    _log.info(\"Skip boot strap info initialization on standby site\");\n    return;\n  }\n  if (_vdcList != null && _vdcList.size() > 1) {\n    _log.info(\"Skip root tenant check for more than one vdcs. Current number of vdcs: {}\",_vdcList.size());\n    return;\n  }\n  int retryIntervalSecs=DBINIT_RETRY_INTERVAL;\n  boolean done=false;\n  boolean wait;\n  while (!done) {\n    wait=false;\n    InterProcessLock lock=null;\n    try {\n      lock=_coordinator.getLock(getBootstrapLockName());\n      _log.info(\"bootstrap info check - waiting for bootstrap lock\");\n      lock.acquire();\n      if (isGeoDbsvc()) {\n        insertDefaultRootTenant(dbClient);\n      }\n else {\n        insertMyVdcInfo(dbClient);\n        insertVdcVersion(dbClient);\n        insertPasswordHistory(dbClient);\n      }\n      done=true;\n    }\n catch (    Exception e) {\n      if (e instanceof IllegalStateException) {\n        throw (IllegalStateException)e;\n      }\n else {\n        _log.warn(\"Exception while checking for bootstrap info, will retry in {} secs\",retryIntervalSecs,e);\n        wait=true;\n      }\n    }\n finally {\n      if (lock != null) {\n        try {\n          lock.release();\n        }\n catch (        Exception e) {\n          _log.error(\"Fail to release lock\",e);\n        }\n      }\n    }\n    if (wait) {\n      try {\n        Thread.sleep(retryIntervalSecs * 1000);\n      }\n catch (      InterruptedException ex) {\n        _log.warn(\"Thread is interrupted during wait for retry\",ex);\n      }\n    }\n  }\n}"}
{"ids": "61224", "raw_code": "Object processEXPR(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {\n  try {\n    XPath expr=handler.createXPath(value,owner);\n    return expr;\n  }\n catch (  TransformerException te) {\n    throw new org.xml.sax.SAXException(te);\n  }\n}"}
{"ids": "49127", "raw_code": "private void checkAccess(UnixPath file,boolean checkRead,boolean checkWrite){\n  SecurityManager sm=System.getSecurityManager();\n  if (sm != null) {\n    if (checkRead)     file.checkRead();\n    if (checkWrite)     file.checkWrite();\n    sm.checkPermission(new RuntimePermission(\"accessUserInformation\"));\n  }\n}"}
{"ids": "70003", "raw_code": "private static Spanned removeImageSpanObjects(Spanned spanned){\n  SpannableStringBuilder builder=(SpannableStringBuilder)spanned;\n  Object[] spannedObjects=builder.getSpans(0,builder.length(),Object.class);\n  for (int i=0; i < spannedObjects.length; i++) {\n    if (spannedObjects[i] instanceof ImageSpan) {\n      ImageSpan imageSpan=(ImageSpan)spannedObjects[i];\n      builder.replace(spanned.getSpanStart(imageSpan),builder.getSpanEnd(imageSpan),\"\");\n    }\n  }\n  return spanned;\n}"}
{"ids": "74933", "raw_code": "public Future<String> classify(String snippet){\n  final ExecutorService service=Executors.newSingleThreadExecutor();\n  return service.submit(new ClassifyingTask(snippet));\n}"}
{"ids": "73156", "raw_code": "public void addSetter(int i){\n  for (  ScatterPlotSetter setter : setterList) {\n    if (setter.getIndex() == i) {\n      return;\n    }\n  }\n  setterList.add(new ScatterPlotSetter(i));\n}"}
{"ids": "32558", "raw_code": "@Override public synchronized void initialize(){\n  if (!mRootDirectory.exists()) {\n    if (!mRootDirectory.mkdirs()) {\n      Loger.debug(String.format(\"Unable to create cache dir %s\",mRootDirectory.getAbsolutePath()));\n    }\n    return;\n  }\n  File[] files=mRootDirectory.listFiles();\n  if (files == null) {\n    return;\n  }\n  for (  File file : files) {\n    BufferedInputStream fis=null;\n    try {\n      fis=new BufferedInputStream(new FileInputStream(file));\n      CacheHeader entry=CacheHeader.readHeader(fis);\n      entry.size=file.length();\n      putEntry(entry.key,entry);\n    }\n catch (    IOException e) {\n      file.delete();\n    }\n finally {\n      FileUtils.closeIO(fis);\n    }\n  }\n}"}
{"ids": "27435", "raw_code": "public Client(final ServerSocketChannel server) throws IOException {\n  try {\n    client=server.accept();\n    client.configureBlocking(false);\n    if (!client.finishConnect())     throw new IOException(\"Upstream client not connected\");\n    clientSelector=Selector.open();\n    clientKey=client.register(clientSelector,SelectionKey.OP_READ);\n    if (log.isInfoEnabled())     log.info(\"Accepted new connection\");\n  }\n catch (  IOException ex) {\n    close();\n    throw ex;\n  }\n}"}
{"ids": "63365", "raw_code": "public Transfer writeBytes(byte[] data) throws IOException {\n  if (data == null) {\n    writeInt(-1);\n  }\n else {\n    writeInt(data.length);\n    out.write(data);\n  }\n  return this;\n}"}
{"ids": "30200", "raw_code": "public static void stop(String[] args){\n  LOG.info(\"Stopping Spring Application container\");\n  System.exit(0);\n}"}
{"ids": "15239", "raw_code": "public boolean add(Object o){\n  if (!list.contains(o)) {\n    list.add(o);\n    return true;\n  }\n  return false;\n}"}
{"ids": "24908", "raw_code": "private XYPlot initializeLowerPlot(){\n  nonHeapMemory=new YIntervalSeriesImproved(\"non-heap memory\");\n  YIntervalSeriesCollection yIntervalSeriesCollection=new YIntervalSeriesCollection();\n  yIntervalSeriesCollection.addSeries(nonHeapMemory);\n  DeviationRenderer renderer=new DeviationRenderer(true,false);\n  renderer.setBaseShapesVisible(true);\n  renderer.setSeriesStroke(0,new BasicStroke(3.0f));\n  renderer.setSeriesOutlineStroke(0,new BasicStroke(2.0f));\n  renderer.setSeriesShape(0,new Ellipse2D.Double(-2.5,-2.5,5.0,5.0));\n  renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,DateFormat.getDateTimeInstance(),NumberFormat.getNumberInstance()));\n  final NumberAxis rangeAxis=new NumberAxis(\"Non-heap / kbytes\");\n  rangeAxis.setRangeType(RangeType.POSITIVE);\n  SystemInformationData systemData=(SystemInformationData)dataAccessService.getLastDataObject(systemTemplate);\n  if (systemData != null) {\n    double maxNonHeapUpperRange;\n    if (systemData.getMaxNonHeapMemorySize() != -1) {\n      maxNonHeapUpperRange=systemData.getMaxNonHeapMemorySize() / 1024.0d;\n    }\n else     if (systemData.getInitNonHeapMemorySize() != -1) {\n      maxNonHeapUpperRange=(systemData.getInitNonHeapMemorySize() * 2) / 1024.0d;\n    }\n else {\n      maxNonHeapUpperRange=128 * 1024 * 1024;\n    }\n    if (maxNonHeapUpperRange > 0) {\n      rangeAxis.setRange(0,maxNonHeapUpperRange);\n      rangeAxis.setAutoRangeMinimumSize(maxNonHeapUpperRange);\n    }\n  }\n  final XYPlot subplot=new XYPlot(yIntervalSeriesCollection,null,rangeAxis,renderer);\n  subplot.setAxisOffset(new RectangleInsets(5.0,5.0,5.0,5.0));\n  subplot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);\n  subplot.setRangeCrosshairVisible(true);\n  return subplot;\n}"}
{"ids": "84960", "raw_code": "public static void logError(Throwable exception,String message,Object... args){\n  message=MessageFormat.format(message,args);\n  log(IStatus.ERROR,IStatus.OK,message,exception);\n}"}
{"ids": "63108", "raw_code": "public void add(Row r){\n  list.add(r);\n  memory+=r.getMemory() + Constants.MEMORY_POINTER;\n  if (maxMemory > 0 && memory > maxMemory) {\n    writeAllRows();\n  }\n  size++;\n}"}
{"ids": "59457", "raw_code": "private MessageListView renderConversation(ConversationInfo convInfo,View parent){\n  MessageListView list=new MessageListView(parent.getContext());\n  convInfo.view=list;\n  list.setOnItemClickListener(MessageClickListener.getInstance());\n  MessageListAdapter adapter=convInfo.adapter;\n  if (adapter == null) {\n    adapter=new MessageListAdapter(convInfo.conv,parent.getContext());\n    convInfo.adapter=adapter;\n  }\n  list.setAdapter(adapter);\n  list.setSelection(adapter.getCount() - 1);\n  return list;\n}"}
{"ids": "77846", "raw_code": "public static int defineTag(int ifdId,short tagId){\n  return (tagId & 0x0000ffff) | (ifdId << 16);\n}"}
{"ids": "50456", "raw_code": "public ApplicationIdVerifier(Set<String> supportedApplicationIds){\n  this.supportedApplicationIds=Collections.unmodifiableSet(new HashSet<String>(supportedApplicationIds));\n}"}
{"ids": "43813", "raw_code": "public QueryResponse search(Resource resource,SolrQuery query) throws SolrServerException, IOException {\n  String idQuery=termQuery(SearchFields.URI_FIELD_NAME,SearchFields.getResourceID(resource));\n  query.setQuery(query.getQuery() + \" AND \" + idQuery);\n  return search(query);\n}"}
{"ids": "43715", "raw_code": "public static LocalDate toDate(String data,String modelo){\n  return LocalDate.parse(data,formatter(modelo));\n}"}
{"ids": "44418", "raw_code": "public static final Criterion all(){\n  return AllCriterion.all();\n}"}
{"ids": "79354", "raw_code": "public static void transform(InputStream srcStream,OutputStream destStream,InputStream stylesheetStream,String outputFormat) throws FOPException {\n  StreamSource src=new StreamSource(srcStream);\n  StreamSource stylesheet=stylesheetStream == null ? null : new StreamSource(stylesheetStream);\n  Fop fop=createFopInstance(destStream,outputFormat);\n  transform(src,stylesheet,fop);\n}"}
{"ids": "80877", "raw_code": "public boolean InsertSym(int type,String id,String context,String cType,int line,int col){\n  int i;\n  if (type == PROCEDUREVAR || type == PROCESSVAR || type == PARAMETER) {\n    i=FindSym(GLOBAL,id,\"\");\n    if (i < symtab.size())     return false;\n    i=FindSym(id,context);\n    if (i < symtab.size())     return false;\n  }\n else {\n    i=FindSym(type,id,context);\n    if (i < symtab.size())     return false;\n  }\n  SymTabEntry se=new SymTabEntry(type,id,context,cType,line,col);\n  symtab.addElement(se);\n  return true;\n}"}
{"ids": "33824", "raw_code": "public static Schema schemaForStructType(StructType structType){\n  List<String> fieldNames=Lists.newArrayList();\n  List<String> fieldTypes=Lists.newArrayList();\n  for (  StructField field : structType.fields()) {\n    fieldNames.add(field.name());\n    DataType fieldType=field.dataType();\n    if (fieldType.equals(DataTypes.StringType)) {\n      fieldTypes.add(\"string\");\n    }\n else     if (fieldType.equals(DataTypes.FloatType)) {\n      fieldTypes.add(\"float\");\n    }\n else     if (fieldType.equals(DataTypes.DoubleType)) {\n      fieldTypes.add(\"double\");\n    }\n else     if (fieldType.equals(DataTypes.IntegerType)) {\n      fieldTypes.add(\"int\");\n    }\n else     if (fieldType.equals(DataTypes.LongType)) {\n      fieldTypes.add(\"long\");\n    }\n else     if (fieldType.equals(DataTypes.BooleanType)) {\n      fieldTypes.add(\"boolean\");\n    }\n else {\n      throw new RuntimeException(\"Unsupported Spark SQL field type: \" + fieldType);\n    }\n  }\n  return RecordUtils.schemaFor(fieldNames,fieldTypes);\n}"}
{"ids": "77355", "raw_code": "public JettySolrRunner startJettySolrRunner(JettySolrRunner jetty) throws Exception {\n  jetty.start(false);\n  jettys.add(jetty);\n  return jetty;\n}"}
{"ids": "21562", "raw_code": "public Map<CIMObjectPath,Set<String>> findAnySLOStorageGroupsCanBeReUsed(StorageSystem forProvider,StorageSystem storage,String policyName,boolean associatedToView) throws WBEMException {\n  CloseableIterator<CIMInstance> groupInstanceItr=null;\n  CloseableIterator<CIMObjectPath> volumePathItr=null;\n  Map<CIMObjectPath,Set<String>> groupPaths=new ConcurrentHashMap<CIMObjectPath,Set<String>>();\n  try {\n    CIMObjectPath controllerConfigSvcPath=_cimPath.getControllerConfigSvcPath(storage);\n    _log.info(\"Trying to get all Storage Groups\");\n    groupInstanceItr=getAssociatorInstances(forProvider,controllerConfigSvcPath,null,SE_DEVICE_MASKING_GROUP,null,null,PS_V3_STORAGE_GROUP_PROPERTIES);\n    while (groupInstanceItr.hasNext()) {\n      CIMInstance groupInstance=groupInstanceItr.next();\n      CIMObjectPath groupPath=groupInstance.getObjectPath();\n      String groupName=CIMPropertyFactory.getPropertyValue(groupInstance,CP_ELEMENT_NAME);\n      String fastSetting=CIMPropertyFactory.getPropertyValue(groupInstance,CP_FAST_SETTING);\n      String groupAssociatedToView=CIMPropertyFactory.getPropertyValue(groupInstance,CP_ASSOCIATED_TO_VIEW);\n      Set<String> returnedNativeGuids=new HashSet<String>();\n      if (fastSetting.equals(policyName) && associatedToView == Boolean.parseBoolean(groupAssociatedToView) && groupName.startsWith(Constants.STORAGE_GROUP_PREFIX)) {\n        _log.debug(\"Looping through all volumes in storage group {}\",groupName);\n        volumePathItr=getAssociatorNames(forProvider,groupPath,null,CIM_STORAGE_VOLUME,null,null);\n        while (volumePathItr.hasNext()) {\n          returnedNativeGuids.add(getVolumeNativeGuid(volumePathItr.next()));\n        }\n        groupPaths.put(groupPath,returnedNativeGuids);\n      }\n    }\n  }\n  finally {\n    closeCIMIterator(groupInstanceItr);\n    closeCIMIterator(volumePathItr);\n  }\n  return groupPaths;\n}"}
{"ids": "45243", "raw_code": "protected void updateDamage(DocumentEvent changes,Shape a,ViewFactory f){\n  checkMetrics();\n  Component host=getContainer();\n  Element elem=getElement();\n  DocumentEvent.ElementChange ec=changes.getChange(elem);\n  Element[] added=(ec != null) ? ec.getChildrenAdded() : null;\n  Element[] removed=(ec != null) ? ec.getChildrenRemoved() : null;\n  if (((added != null) && (added.length > 0)) || ((removed != null) && (removed.length > 0))) {\n    if (added != null && longestLine != null) {\n      int currentMaxWidth=getLineWidth(longestLine);\n      for (int i=0; i < added.length; i++) {\n        int width=getLineWidth(added[i]);\n        if (width > currentMaxWidth) {\n          currentMaxWidth=width;\n          longestLine=added[i];\n        }\n      }\n    }\n    if (removed != null) {\n      for (int i=0; i < removed.length; i++) {\n        if (removed[i] == longestLine) {\n          longestLine=null;\n          break;\n        }\n      }\n    }\n    preferenceChanged(null,true,true);\n    host.repaint();\n  }\n else {\n    Element map=getElement();\n    int line=map.getElementIndex(changes.getOffset());\n    int endLine=map.getElementIndex(changes.getOffset() + changes.getLength());\n    damageLineRange(line,endLine,a,host);\n    getLongestLine();\n    if (changes.getType() == DocumentEvent.EventType.INSERT) {\n      int w=getLineWidth(longestLine);\n      Element e=map.getElement(line);\n      if (e == longestLine) {\n        preferenceChanged(null,true,false);\n      }\n else       if (getLineWidth(e) > w) {\n        longestLine=e;\n        preferenceChanged(null,true,false);\n      }\n    }\n else     if (changes.getType() == DocumentEvent.EventType.REMOVE) {\n      if (map.getElement(line) == longestLine) {\n        determineLongestLine();\n        preferenceChanged(null,true,false);\n      }\n    }\n  }\n}"}
{"ids": "3937", "raw_code": "public JClassDependency(JClass cl,String digest){\n  _className=cl.getName();\n  String newDigest=getDigest();\n  if (!newDigest.equals(digest)) {\n    if (log.isLoggable(Level.FINE))     log.fine(_className + \" digest is modified.\");\n    _isDigestModified=true;\n  }\n}"}
{"ids": "65426", "raw_code": "public void dump(Object data,Writer output){\n  List<Object> list=new ArrayList<Object>(1);\n  list.add(data);\n  dumpAll(list.iterator(),output,null);\n}"}
{"ids": "57599", "raw_code": "public void clear(){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    Object[] array=queue;\n    int n=size;\n    size=0;\n    for (int i=0; i < n; i++)     array[i]=null;\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "41104", "raw_code": "public void addInsnToHead(Insn insn){\n  SsaInsn newInsn=SsaInsn.makeFromRop(insn,this);\n  insns.add(getCountPhiInsns(),newInsn);\n  parent.onInsnAdded(newInsn);\n}"}
{"ids": "39747", "raw_code": "public static String encodeForURL(String str){\n  StringBuffer result=new StringBuffer();\n  for (int i=0; i < str.length(); i++) {\n    char ch=str.charAt(i);\n    if (ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z' || ch >= '0' && ch <= '9')     result.append(ch);\n else {\nswitch (ch) {\ncase '-':\ncase '_':\ncase '.':\ncase '!':\ncase '~':\ncase '*':\ncase '\\'':\ncase '(':\ncase ')':\n        result.append(ch);\n      break;\ndefault :\n    result.append('%');\n  result.append(hexchars[(ch & 0xf0) >> 4]);\nresult.append(hexchars[ch & 0x0f]);\nbreak;\n}\n}\n}\nreturn result.toString();\n}"}
{"ids": "78680", "raw_code": "public void selectObject(MultiTouchObject multiTouchObject,PointInfo touchPoint){\n  currTouchPoint.set(touchPoint);\n  if (multiTouchObject != null) {\n    mImages.remove(multiTouchObject);\n    mImages.add(multiTouchObject);\n    if (listener != null) {\n      listener.onImageObjectSelected(multiTouchObject);\n    }\n  }\n else {\n    if (listener != null) {\n      listener.onImageObjectDropped();\n    }\n  }\n  invalidate();\n}"}
{"ids": "44619", "raw_code": "void verify(){\n  byte[] d=digest.digest();\n  if (!MessageDigest.isEqual(d,Base64.decode(hash,Base64.DEFAULT))) {\n    throw invalidDigest(JarFile.MANIFEST_NAME,name,jarName);\n  }\n  verifiedEntries.put(name,certificates);\n}"}
{"ids": "73258", "raw_code": "public void randomizeIncomingWeights(){\n  for (  Neuron n : getNeuronList()) {\n    for (    Synapse s : n.getFanIn()) {\n      s.setLowerBound(0);\n      s.setStrength(s.getUpperBound() * Math.random());\n    }\n  }\n}"}
{"ids": "77478", "raw_code": "public void remove(QueueEvent event) throws KeeperException, InterruptedException {\n  TimerContext time=stats.time(dir + \"_remove_event\");\n  try {\n    String path=event.getId();\n    String responsePath=dir + \"/\" + response_prefix+ path.substring(path.lastIndexOf(\"-\") + 1);\n    if (zookeeper.exists(responsePath,true)) {\n      zookeeper.setData(responsePath,event.getBytes(),true);\n    }\n else {\n      LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"+ \"  Requestor may have disconnected from ZooKeeper\");\n    }\n    try {\n      zookeeper.delete(path,-1,true);\n    }\n catch (    KeeperException.NoNodeException ignored) {\n    }\n  }\n  finally {\n    time.stop();\n  }\n}"}
{"ids": "83120", "raw_code": "public List<Point> readPoints(String shapefile){\n  List<Point> list=new ArrayList<Point>();\n  for (  SimpleFeature feature : ShapeFileReader.getAllFeatures(shapefile)) {\n    Geometry geo=(Geometry)feature.getDefaultGeometry();\n    if (geo instanceof Point) {\n      Point ps=(Point)geo;\n      for (int i=0; i < ps.getNumGeometries(); i++) {\n        Point p=(Point)ps.getGeometryN(i);\n        list.add(p);\n      }\n    }\n else {\n      throw new RuntimeException(\"The shapefile does not contain Point(s)!\");\n    }\n  }\n  return list;\n}"}
{"ids": "66055", "raw_code": "public String rate(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){\n  if (value == null)   return \"\";\n  Integer Currency_ID=(Integer)mTab.getValue(\"C_Currency_ID\");\n  int C_Currency_ID=Currency_ID.intValue();\n  Integer ConversionType_ID=(Integer)mTab.getValue(\"C_ConversionType_ID\");\n  int C_ConversionType_ID=ConversionType_ID.intValue();\n  Timestamp DateAcct=(Timestamp)mTab.getValue(\"DateAcct\");\n  if (DateAcct == null)   DateAcct=new Timestamp(System.currentTimeMillis());\n  int C_AcctSchema_ID=Env.getContextAsInt(ctx,WindowNo,\"C_AcctSchema_ID\");\n  MAcctSchema as=MAcctSchema.get(ctx,C_AcctSchema_ID);\n  int AD_Client_ID=Env.getContextAsInt(ctx,WindowNo,\"AD_Client_ID\");\n  int AD_Org_ID=Env.getContextAsInt(ctx,WindowNo,\"AD_Org_ID\");\n  BigDecimal CurrencyRate=MConversionRate.getRate(C_Currency_ID,as.getC_Currency_ID(),DateAcct,C_ConversionType_ID,AD_Client_ID,AD_Org_ID);\n  log.fine(\"rate = \" + CurrencyRate);\n  if (CurrencyRate == null)   CurrencyRate=Env.ZERO;\n  mTab.setValue(\"CurrencyRate\",CurrencyRate);\n  return \"\";\n}"}
{"ids": "84549", "raw_code": "public boolean hasAlphaChangedFrom(float v){\n  return (Float.compare(alpha,v) != 0);\n}"}
{"ids": "72925", "raw_code": "public CompletableFuture<Void> destroy(){\n  CompletableFuture<Void> ret;\n  if (controllerProxy != null) {\n    ret=controllerProxy.destroy();\n    controllerProxy=null;\n  }\n else {\n    ret=new CompletableFuture<>();\n    ret.complete(null);\n  }\n  return ret;\n}"}
{"ids": "72839", "raw_code": "@Override public Request<String> logs(ProjectReference projectReference,long taskId){\n  List<DummyRunnerStatus> statuses=availableRunnerStatuses.get(projectReference.name());\n  if (statuses != null && !statuses.isEmpty()) {\n    for (    DummyRunnerStatus runnerStatus : statuses) {\n      if (taskId == runnerStatus.processId()) {\n        return new DummyRequest<>(runnerStatus.getLog());\n      }\n    }\n  }\n  return new DummyRequest<>(null);\n}"}
{"ids": "26189", "raw_code": "protected static ActionResultInfo performAction(GenericValue productPromoAction,ShoppingCart cart,Delegator delegator,LocalDispatcher dispatcher,Timestamp nowTimestamp) throws GenericEntityException, CartItemModifyException {\n  ActionResultInfo actionResultInfo=new ActionResultInfo();\n  performAction(actionResultInfo,productPromoAction,cart,delegator,dispatcher,nowTimestamp);\n  return actionResultInfo;\n}"}
{"ids": "75452", "raw_code": "private boolean containsExpression(String toSearch,String expression){\n  if (toSearch == null) {\n    return false;\n  }\n  return toSearch.equals(expression) || toSearch.indexOf(expression) >= 0;\n}"}
{"ids": "83752", "raw_code": "public void clearListeners(){\n  listeners.clear();\n}"}
{"ids": "70623", "raw_code": "private Var addProperty(VarProperty property){\n  if (property.isUnique()) {\n    testUniqueProperty((UniqueVarProperty)property);\n  }\n  properties.add(property);\n  return this;\n}"}
{"ids": "77684", "raw_code": "public boolean isOpen(){\n  return open.get();\n}"}
{"ids": "63270", "raw_code": "public void free(long pos,int length){\n  int start=getBlock(pos);\n  int blocks=getBlockCount(length);\n  set.clear(start,start + blocks);\n}"}
{"ids": "70727", "raw_code": "private void onConnectionStatusChanged(int oldStatus,int status){\n  if (sSettingsMgr.showStatusIcon) {\n    NotificationCompat.Builder builder=new NotificationCompat.Builder(this);\n    builder.setWhen(System.currentTimeMillis());\nswitch (status) {\ncase XmppManager.CONNECTED:\n      builder.setContentText(getString(R.string.main_service_connected,getConnectionStatusAction()));\n    builder.setSmallIcon(getImageStatus(STATUS_ICON_GREEN));\n  break;\ncase XmppManager.CONNECTING:\nbuilder.setContentText(getString(R.string.main_service_connecting));\nbuilder.setSmallIcon(getImageStatus(STATUS_ICON_ORANGE));\nbreak;\ncase XmppManager.DISCONNECTED:\nbuilder.setContentText(getString(R.string.main_service_disconnected));\nbuilder.setSmallIcon(getImageStatus(STATUS_ICON_RED));\nbreak;\ncase XmppManager.DISCONNECTING:\nbuilder.setContentText(getString(R.string.main_service_disconnecting));\nbuilder.setSmallIcon(getImageStatus(STATUS_ICON_ORANGE));\nbreak;\ncase XmppManager.WAITING_TO_CONNECT:\ncase XmppManager.WAITING_FOR_NETWORK:\nbuilder.setContentText(getString(R.string.main_service_waiting_to_connect) + \"\\n\" + getConnectionStatusAction());\nbuilder.setSmallIcon(getImageStatus(STATUS_ICON_BLUE));\nbreak;\ndefault :\nreturn;\n}\nbuilder.setContentIntent(sPendingIntentLaunchApplication);\nbuilder.setContentTitle(Tools.APP_NAME);\nstartForeground(NOTIFICATION_CONNECTION,builder.getNotification());\n}\n}"}
{"ids": "83436", "raw_code": "private static File findGuacamoleHome(){\n  File guacHome;\n  String desiredDir=System.getProperty(\"guacamole.home\");\n  if (desiredDir == null)   desiredDir=System.getenv(\"GUACAMOLE_HOME\");\n  if (desiredDir != null)   guacHome=new File(desiredDir);\n else   guacHome=new File(System.getProperty(\"user.home\"),\".guacamole\");\n  return guacHome;\n}"}
{"ids": "32482", "raw_code": "void waitForServerStart() throws InterruptedException {\n  started.await(getTestTimeout(),TimeUnit.MILLISECONDS);\n}"}
{"ids": "36597", "raw_code": "private static void drawLeftTab(int x,int y,int w,int h,Graphics2D g2,ColorUIResource color){\n  double rTop=RapidLookAndFeel.CORNER_TAB_RADIUS * 0.67;\n  g2.setColor(color);\n  g2.fill(createLeftTabShape(x + 1,y + 1,w - 1,h,rTop,true));\n  g2.setColor(Colors.TAB_BORDER);\n  g2.draw(createLeftTabShape(x,y,w - 1,h,rTop,false));\n}"}
{"ids": "25964", "raw_code": "private List<int[]> prepareExpectedData(){\n  List<int[]> indexList=new ArrayList<>(2);\n  int[] sortIndex={0,3,2,4,1};\n  int[] sortIndexInverted={0,2,4,1,2};\n  indexList.add(0,sortIndex);\n  indexList.add(1,sortIndexInverted);\n  return indexList;\n}"}
{"ids": "25437", "raw_code": "public byte[] readBytes(final int count){\n  int bytesToRead=count;\n  if (bytesToRead < 0)   bytesToRead=byteStream.available();\n  byte[] bytes=new byte[bytesToRead];\n  if (currentBitIndex >= 0) {\n    for (int i=0; i < bytesToRead; i++) {\n      bytes[i]=(byte)read(Byte.SIZE);\n    }\n  }\n else {\n    byteStream.read(bytes,0,bytes.length);\n  }\n  return bytes;\n}"}
{"ids": "77327", "raw_code": "public SSLTestConfig(){\n  this(false,false);\n}"}
{"ids": "77181", "raw_code": "@Override public int hashCode(){\n  return 0x45aaf665 + Arrays.hashCode(fields);\n}"}
{"ids": "40156", "raw_code": "public static String formatPath(List<ChildNumber> path){\n  return PATH_JOINER.join(Iterables.concat(Collections.singleton(\"M\"),path));\n}"}
{"ids": "32123", "raw_code": "public static Object readInvocationResult(PlatformContext ctx,BinaryRawReaderEx reader) throws IgniteCheckedException {\n  boolean success=reader.readBoolean();\n  if (success)   return reader.readObjectDetached();\n else {\n    boolean hasException=reader.readBoolean();\n    if (hasException) {\n      Object nativeErr=reader.readObjectDetached();\n      assert nativeErr != null;\n      throw ctx.createNativeException(nativeErr);\n    }\n else {\n      String errMsg=reader.readString();\n      assert errMsg != null;\n      throw new IgniteCheckedException(errMsg);\n    }\n  }\n}"}
{"ids": "41779", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return STRING_THING;\ncase 4:\n  return BYTE_THING;\ncase 9:\nreturn I32_THING;\ncase 11:\nreturn I64_THING;\ndefault :\nreturn null;\n}\n}"}
{"ids": "25729", "raw_code": "public static IFitsHeader create(String key){\n  IFitsHeader result=STANDARD_KEYS.get(key);\n  if (result == null) {\n    result=new FitsHeaderImpl(key,SOURCE.UNKNOWN,HDU.ANY,VALUE.ANY,\"\");\n  }\n  return result;\n}"}
{"ids": "9878", "raw_code": "protected String parsePayload(String payload){\n  String json=null;\n  if (payload != null) {\n    try {\n      json=(payload.indexOf(\"{\") == -1) ? new String(Files.readAllBytes(Paths.get(payload))) : payload;\n    }\n catch (    IOException e) {\n      log.fatal(\"Error in parsing payload: \" + payload,e);\n      System.exit(1);\n    }\n  }\n  return json;\n}"}
{"ids": "48349", "raw_code": "boolean addEntry(PolicyEntry pe,int index){\n  if (index < 0) {\n    policyEntries.addElement(pe);\n    parser.add(pe.getGrantEntry());\n  }\n else {\n    PolicyEntry origPe=policyEntries.elementAt(index);\n    parser.replace(origPe.getGrantEntry(),pe.getGrantEntry());\n    policyEntries.setElementAt(pe,index);\n  }\n  return true;\n}"}
{"ids": "48807", "raw_code": "public WritableRaster createCompatibleWritableRaster(int w,int h){\n  if (w <= 0 || h <= 0) {\n    throw new RasterFormatException(\"negative \" + ((w <= 0) ? \"width\" : \"height\"));\n  }\n  SampleModel sm=sampleModel.createCompatibleSampleModel(w,h);\n  return new IntegerComponentRaster(sm,new Point(0,0));\n}"}
{"ids": "85281", "raw_code": "public static void createOrClearDestinationFolder(String path){\n  File fpath=new File(path);\n  fpath.mkdirs();\n  deleteDirectoryContents(path,false);\n}"}
{"ids": "73975", "raw_code": "static synchronized JmriUserInterfaceConfigurationProvider findProvider(Profile project){\n  if (providers.get(project) == null) {\n    providers.put(project,new JmriUserInterfaceConfigurationProvider(project));\n  }\n  return providers.get(project);\n}"}
{"ids": "63315", "raw_code": "protected static long[] insert(long[] old,int oldSize,int pos,long x){\n  long[] result;\n  if (old != null && old.length > oldSize) {\n    result=old;\n  }\n else {\n    result=new long[oldSize + 1 + COPY_THRESHOLD];\n    if (pos > 0) {\n      System.arraycopy(old,0,result,0,pos);\n    }\n  }\n  if (old != null && oldSize - pos > 0) {\n    System.arraycopy(old,pos,result,pos + 1,oldSize - pos);\n  }\n  result[pos]=x;\n  return result;\n}"}
{"ids": "60984", "raw_code": "private void registerObjectRead(Object obj,int handle,boolean unshared) throws IOException {\n  if (unshared) {\n    obj=UNSHARED_OBJ;\n  }\n  int index=handle - ObjectStreamConstants.baseWireHandle;\n  int size=objectsRead.size();\n  while (index > size) {\n    objectsRead.add(null);\n    ++size;\n  }\n  if (index == size) {\n    objectsRead.add(obj);\n  }\n else {\n    objectsRead.set(index,obj);\n  }\n}"}
{"ids": "29861", "raw_code": "private boolean discardUpstreamMediaChunks(int queueLength){\n  if (mediaChunks.size() <= queueLength) {\n    return false;\n  }\n  long startTimeUs=0;\n  long endTimeUs=mediaChunks.getLast().endTimeUs;\n  BaseMediaChunk removed=null;\n  while (mediaChunks.size() > queueLength) {\n    removed=mediaChunks.removeLast();\n    startTimeUs=removed.startTimeUs;\n    loadingFinished=false;\n  }\n  sampleQueue.discardUpstreamSamples(removed.getFirstSampleIndex());\n  notifyUpstreamDiscarded(startTimeUs,endTimeUs);\n  return true;\n}"}
{"ids": "8597", "raw_code": "public void close(){\n  animation.setRate(-1);\n  animation.play();\n  animation.setOnFinished(null);\n}"}
{"ids": "66772", "raw_code": "Map<String,Set<CallLocationModel>> computeFilteredTaintSourcesMap(Set<CallLocationModel> sources){\n  if (!sources.isEmpty()) {\n    if (fFilteredTaintSourcesMap != null && !fFilteredTaintSourcesMap.isEmpty()) {\n      Map<String,Set<CallLocationModel>> result=new TreeMap<String,Set<CallLocationModel>>();\n      for (      Entry<String,Set<CallLocationModel>> entry : fFilteredTaintSourcesMap.entrySet()) {\n        Set<CallLocationModel> filteredSources=new TreeSet<CallLocationModel>();\n        for (        CallLocationModel source : entry.getValue()) {\n          if (sources.contains(source)) {\n            filteredSources.add(source);\n          }\n        }\n        if (!filteredSources.isEmpty()) {\n          String taintKind=entry.getKey();\n          result.put(taintKind,filteredSources);\n        }\n      }\n      return result;\n    }\n  }\n  return Collections.EMPTY_MAP;\n}"}
{"ids": "50136", "raw_code": "public static boolean contains(String s,Property expected){\n  if (s == null || s.length() == 0) {\n    return false;\n  }\n  int i=0;\n  while (i < s.length()) {\n    int codepoint=Character.codePointAt(s,i);\n    Emoji e=map.get(codepoint);\n    if (e == null) {\n      return false;\n    }\n    if (!e.is(expected)) {\n      return false;\n    }\n    i+=codepoint >= 0x010000 ? 2 : 1;\n  }\n  return true;\n}"}
{"ids": "30762", "raw_code": "public Class toClass(String codebase) throws IOException, ClassNotFoundException {\n  if (name.charAt(0) != ';') {\n    return ClassLoading.loadClass(codebase,name,null,integrity,null);\n  }\n  StringTokenizer st=new StringTokenizer(name,\";\");\n  String[] ifs=new String[st.countTokens()];\n  for (int i=0; i < ifs.length; i++) {\n    ifs[i]=st.nextToken();\n  }\n  return ClassLoading.loadProxyClass(codebase,ifs,null,integrity,null);\n}"}
{"ids": "69862", "raw_code": "private synchronized IMqttToken removeMqttToken(Bundle data){\n  String activityToken=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);\n  if (activityToken != null) {\n    int tokenNumber=Integer.parseInt(activityToken);\n    IMqttToken token=tokenMap.get(tokenNumber);\n    tokenMap.delete(tokenNumber);\n    return token;\n  }\n  return null;\n}"}
{"ids": "16198", "raw_code": "public static <T>Optional<T> lowestCommonAncestor(TreeDef.Parented<T> treeDef,List<T> nodes){\n  if (nodes.size() == 0) {\n    return Optional.empty();\n  }\n else {\n    Optional<T> soFar=Optional.of(nodes.get(0));\n    for (int i=1; i < nodes.size() && soFar.isPresent(); ++i) {\n      soFar=lowestCommonAncestor(treeDef,soFar.get(),nodes.get(i));\n    }\n    return soFar;\n  }\n}"}
{"ids": "59716", "raw_code": "public void copyValueNodesToMe(Entity from){\n  for (  ValueNode fromChild : from.getChildren(ValueNode.class)) {\n    ValueNode toChild=getChild(fromChild.getName(),ValueNode.class);\n    toChild.setValue(fromChild.getValue());\n  }\n}"}
{"ids": "76500", "raw_code": "public static WorldIconImage fromPixelTransparency(BufferedImage image){\n  int imageMarginTop=findFirstSolidPixelFromTop(image);\n  int imageMarginBottom=findFirstSolidPixelFromBottom(image);\n  int frameHeight=Math.max(0,image.getHeight() - imageMarginTop - imageMarginBottom);\n  return new WorldIconImage(image,0,imageMarginTop,image.getWidth(),frameHeight);\n}"}
{"ids": "21175", "raw_code": "private Map<String,String> checkVipDiff(PropertyInfoExt localProps,PropertyInfoRestRep rep){\n  String vipAddrV4=rep.getProperty(\"network_vip\");\n  String vipAddrV6=rep.getProperty(\"network_vip6\");\n  Map<String,String> diffProps=new HashMap<String,String>();\n  if (!vipAddrV4.equals(localProps.getProperty(\"network_vip\"))) {\n    diffProps.put(\"network_vip\",vipAddrV4);\n    _log.warn(\"Detected changed vip. remote vip: {}, local repo vip: {}\",vipAddrV4,localProps.getProperty(\"network_vip\"));\n  }\n  if (!vipAddrV6.equals(localProps.getProperty(\"network_vip6\"))) {\n    diffProps.put(\"network_vip6\",vipAddrV6);\n    _log.warn(\"Detected changed vip. remote vip: {}, local repo vip: {}\",vipAddrV6,localProps.getProperty(\"network_vip6\"));\n  }\n  return diffProps;\n}"}
{"ids": "28397", "raw_code": "private static double distanceSq(Color a,Color b){\n  double rMean=(a.getRed() + b.getRed()) / 256.0 / 2.0;\n  double dr=(a.getRed() - b.getRed()) / 256.0;\n  double dg=(a.getGreen() - b.getGreen()) / 256.0;\n  double db=(a.getBlue() - b.getBlue()) / 256.0;\n  double d=(2.0 + rMean) * dr * dr + 4.0 * dg * dg + (2.0 + 1.0 - rMean) * db * db;\n  return d / 9.0;\n}"}
{"ids": "14295", "raw_code": "private static ApplicationType newType(final String name) throws IllegalAccessException, InstantiationException {\n  return new ApplicationType(name,new HashMap<String,Boolean>(TYPE_ACTIONS),DumbSearchIndex.class,DumbSaveIndex.class,DumbResourceName.class);\n}"}
{"ids": "52229", "raw_code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  if (bayesIm == null) {\n    throw new NullPointerException();\n  }\n}"}
{"ids": "54794", "raw_code": "public int compare(SourceFile o1,SourceFile o2){\n  String n1=o1.getName();\n  String n2=o2.getName();\n  return n1.compareTo(n2);\n}"}
{"ids": "6867", "raw_code": "private static <T extends PsiElement>boolean processChildrenOfType(PsiElement element,Processor<T> processor,Class<T> psiClass,boolean reverseOrder){\n  PsiElement child=reverseOrder ? element.getLastChild() : element.getFirstChild();\n  while (child != null) {\n    if (psiClass.isInstance(child)) {\n      if (!processor.process((T)child)) {\n        return true;\n      }\n    }\n    if (processChildrenOfType(child,processor,psiClass,reverseOrder)) {\n      return true;\n    }\n    child=reverseOrder ? child.getPrevSibling() : child.getNextSibling();\n  }\n  return false;\n}"}
{"ids": "39112", "raw_code": "public Instances generate() throws Exception {\n  return generate(\"\");\n}"}
{"ids": "73873", "raw_code": "protected void loadChars(AbstractMRReply msg,DataInputStream istream) throws IOException {\n  int i;\n  for (i=0; i < msg.maxSize(); i++) {\n    byte char1=readByteProtected(istream);\n    if (flushReceiveChars) {\n      log.warn(\"timeout flushes receive buffer: {}\",msg.toString());\n      msg.flush();\n      i=0;\n      flushReceiveChars=false;\n    }\n    if (canReceive()) {\n      msg.setElement(i,char1);\n      if (endOfMessage(msg)) {\n        break;\n      }\n    }\n else {\n      i--;\n      log.error(\"unsolicited character received: {}\",Integer.toHexString(char1));\n    }\n  }\n}"}
{"ids": "38171", "raw_code": "public String evaluate(Associator associator,Instances data) throws Exception {\n  long startTime;\n  long endTime;\n  startTime=System.currentTimeMillis();\n  associator.buildAssociations(data);\n  endTime=System.currentTimeMillis();\n  m_Result=new StringBuffer(associator.toString());\n  m_Result.append(\"\\n=== Evaluation ===\\n\\n\");\n  m_Result.append(\"Elapsed time: \" + (((double)(endTime - startTime)) / 1000) + \"s\");\n  m_Result.append(\"\\n\");\n  return m_Result.toString();\n}"}
{"ids": "32305", "raw_code": "public static Integer intValue(String propName,Integer dflt){\n  String sysProp=getProperty(propName);\n  return (sysProp != null && !sysProp.isEmpty()) ? Integer.getInteger(sysProp) : dflt;\n}"}
{"ids": "35825", "raw_code": "public NSNumber(int i){\n  doubleValue=longValue=i;\n  type=INTEGER;\n}"}
{"ids": "21498", "raw_code": "private int compareVersionParts(String version1,String version2){\n  int compare=0;\n  Integer v1;\n  Integer v2;\n  try {\n    v1=version1 != null ? Integer.parseInt(version1) : 0;\n  }\n catch (  NumberFormatException e) {\n    v1=0;\n  }\n  try {\n    v2=version2 != null ? Integer.parseInt(version2) : 0;\n  }\n catch (  NumberFormatException e) {\n    v2=0;\n  }\n  if (v1 > v2) {\n    compare=1;\n  }\n else   if (v1 < v2) {\n    compare=-1;\n  }\n else {\n    compare=0;\n  }\n  return compare;\n}"}
{"ids": "73450", "raw_code": "public void preSaveInit(){\n  persistentData.clear();\n  for (int i=0; i < getNumPoints(); i++) {\n    persistentData.add(getPoint(i));\n  }\n}"}
{"ids": "56551", "raw_code": "public void essential(final Consumer<OnComplete> fn){\n  this.essential=fn;\n  if (done) {\n    fn.accept(buildOnComplete());\n  }\n}"}
{"ids": "16883", "raw_code": "public void addListener(IMessageListener newListener){\nsynchronized (listeners) {\n    listeners.add(newListener);\n  }\n}"}
{"ids": "35109", "raw_code": "public void addWords(String phrase){\n  if (phrase.equals(\"#\") || phrase.equals(\"\"))   return;\n  String[] words=spliterator(phrase);\n  if (words.length < 2)   return;\n  for (int i=0; i < words.length; i++) {\n    if (i == 0) {\n      Vector<String> startWords=chain.get(\"_start\");\n      startWords.add(words[i]);\n      Vector<String> suffix=chain.get(words[i]);\n      if (suffix == null) {\n        suffix=new Vector<>();\n        suffix.add(words[i + 1]);\n        chain.put(words[i],suffix);\n      }\n    }\n else     if (i == words.length - 1) {\n      Vector<String> endWords=chain.get(\"_end\");\n      endWords.add(words[i]);\n    }\n else {\n      Vector<String> suffix=chain.get(words[i]);\n      if (suffix == null) {\n        suffix=new Vector<>();\n        suffix.add(words[i + 1]);\n        chain.put(words[i],suffix);\n      }\n else {\n        suffix.add(words[i + 1]);\n        chain.put(words[i],suffix);\n      }\n    }\n  }\n}"}
{"ids": "25470", "raw_code": "@HLEUnimplemented @HLEFunction(nid=0xEC19337D,version=150) public int sceNetAdhocMatchingAbortSendData(@CheckArgument(\"checkMatchingId\") int matchingId,pspNetMacAddress macAddress){\n  return 0;\n}"}
{"ids": "60928", "raw_code": "public ShortBuffer put(short[] src,int srcOffset,int shortCount){\n  Arrays.checkOffsetAndCount(src.length,srcOffset,shortCount);\n  if (shortCount > remaining()) {\n    throw new BufferOverflowException();\n  }\n  for (int i=srcOffset; i < srcOffset + shortCount; ++i) {\n    put(src[i]);\n  }\n  return this;\n}"}
{"ids": "10937", "raw_code": "public boolean handleDirectory(File directory){\n  if (DEBUG) {\n    logger.fine(\"skipping: \" + directory.getAbsolutePath());\n  }\n  return true;\n}"}
{"ids": "67246", "raw_code": "public static void choose(int n,int[] results){\n  int k=results.length;\n  for (int i=0; i < k; i++) {\n    boolean done=false;\n    while (!done) {\n      results[i]=RANDOM.nextInt(n);\n      done=true;\n      for (int j=0; j < i; j++) {\n        if (results[j] == results[i]) {\n          done=false;\n        }\n      }\n    }\n  }\n}"}
{"ids": "37791", "raw_code": "public String printLeafModelsTipText(){\n  return \"Print leaf models (naive bayes leaves only)\";\n}"}
{"ids": "23842", "raw_code": "public Set registerClientInterestList(Object inputClientID,List keys,boolean updatesAsInvalidates){\n  Long clientID=getClientIDForMaps(inputClientID);\n  Set keysRegistered=new HashSet(keys);\nsynchronized (interestListLock) {\n    Map<Object,Set> koi=updatesAsInvalidates ? getKeysOfInterestInv() : getKeysOfInterest();\n    CopyOnWriteHashSet interestList=(CopyOnWriteHashSet)koi.get(clientID);\n    if (interestList == null) {\n      interestList=new CopyOnWriteHashSet();\n      koi.put(clientID,interestList);\n    }\n else {\n      keysRegistered.removeAll(interestList.getSnapshot());\n    }\n    interestList.addAll(keys);\n    if (this.region != null && this.isLocalProfile) {\n      sendProfileOperation(clientID,operationType.REGISTER_KEYS,keys,updatesAsInvalidates);\n    }\n  }\n  return keysRegistered;\n}"}
{"ids": "9031", "raw_code": "public static String replace(String inString,String oldPattern,String newPattern){\n  if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {\n    return inString;\n  }\n  StringBuilder sb=new StringBuilder();\n  int pos=0;\n  int index=inString.indexOf(oldPattern);\n  int patLen=oldPattern.length();\n  while (index >= 0) {\n    sb.append(inString.substring(pos,index));\n    sb.append(newPattern);\n    pos=index + patLen;\n    index=inString.indexOf(oldPattern,pos);\n  }\n  sb.append(inString.substring(pos));\n  return sb.toString();\n}"}
{"ids": "3057", "raw_code": "public static List<String> toPathParts(String encodedPath){\n  if (encodedPath == null || encodedPath.length() == 0) {\n    return null;\n  }\n  List<String> result=new ArrayList<String>();\n  int cur=0;\n  boolean notDone=true;\n  while (notDone) {\n    int slash=encodedPath.indexOf('/',cur);\n    notDone=slash != -1;\n    String sub;\n    if (notDone) {\n      sub=encodedPath.substring(cur,slash);\n    }\n else {\n      sub=encodedPath.substring(cur);\n    }\n    result.add(CharEscapers.decodeUri(sub));\n    cur=slash + 1;\n  }\n  return result;\n}"}
{"ids": "11437", "raw_code": "@SuppressWarnings(\"unchecked\") public <T extends Point2D>T inverse(double x,double y,T ret_val){\n  if (ret_val == null) {\n    ret_val=(T)new LatLonPoint.Double();\n  }\n  double px=x + ul.x;\n  double py=-y + ul.y + oy;\n  if (px > ProjMath.roundAdjust(world.x / 2.0)) {\n    px=ProjMath.roundAdjust(world.x / 2.0);\n  }\n else   if (px < ProjMath.roundAdjust(-world.x / 2.0)) {\n    px=ProjMath.roundAdjust(-world.x / 2.0);\n  }\n  if (py > ProjMath.roundAdjust(world.y / 2.0)) {\n    py=ProjMath.roundAdjust(world.y / 2.0);\n  }\n else   if (py < ProjMath.roundAdjust(-world.y / 2.0)) {\n    py=ProjMath.roundAdjust(-world.y / 2.0);\n  }\n  double lat_=normalizeLatitude(py / spps_y);\n  double lon_=wrapLongitude((px / spps_x) + centerX);\n  ret_val.setLocation(Math.toDegrees(lon_),Math.toDegrees(lat_));\n  return ret_val;\n}"}
{"ids": "46497", "raw_code": "public void install(JEditorPane c){\n  c.addCaretListener(inputAttributeUpdater);\n  c.addPropertyChangeListener(inputAttributeUpdater);\n  Caret caret=c.getCaret();\n  if (caret != null) {\n    inputAttributeUpdater.updateInputAttributes(caret.getDot(),caret.getMark(),c);\n  }\n}"}
{"ids": "65959", "raw_code": "static public MPrintFormat createFromReportView(Properties ctx,int AD_ReportView_ID,String ReportName){\n  int AD_Client_ID=Env.getAD_Client_ID(ctx);\n  s_log.info(\"AD_ReportView_ID=\" + AD_ReportView_ID + \" - AD_Client_ID=\"+ AD_Client_ID+ \" - \"+ ReportName);\n  MPrintFormat pf=new MPrintFormat(ctx,0,null);\n  pf.setAD_ReportView_ID(AD_ReportView_ID);\n  String sql=\"SELECT t.TableName,\" + \" (SELECT COUNT(*) FROM AD_PrintFormat x WHERE x.AD_ReportView_ID=rv.AD_ReportView_ID AND x.AD_Client_ID=c.AD_Client_ID) AS Count,\" + \" COALESCE (cpc.AD_PrintColor_ID, pc.AD_PrintColor_ID) AS AD_PrintColor_ID,\"+ \" COALESCE (cpf.AD_PrintFont_ID, pf.AD_PrintFont_ID) AS AD_PrintFont_ID,\"+ \" COALESCE (cpp.AD_PrintPaper_ID, pp.AD_PrintPaper_ID) AS AD_PrintPaper_ID,\"+ \" t.AD_Table_ID \"+ \"FROM AD_ReportView rv\"+ \" INNER JOIN AD_Table t ON (rv.AD_Table_ID=t.AD_Table_ID),\"+ \" AD_Client c\"+ \" LEFT OUTER JOIN AD_PrintColor cpc ON (cpc.AD_Client_ID=c.AD_Client_ID AND cpc.IsDefault='Y')\"+ \" LEFT OUTER JOIN AD_PrintFont cpf ON (cpf.AD_Client_ID=c.AD_Client_ID AND cpf.IsDefault='Y')\"+ \" LEFT OUTER JOIN AD_PrintPaper cpp ON (cpp.AD_Client_ID=c.AD_Client_ID AND cpp.IsDefault='Y'),\"+ \" AD_PrintColor pc, AD_PrintFont pf, AD_PrintPaper pp \"+ \"WHERE rv.AD_ReportView_ID=? AND c.AD_Client_ID=?\"+ \" AND pc.IsDefault='Y' AND pf.IsDefault='Y' AND pp.IsDefault='Y'\";\n  PreparedStatement pstmt=null;\n  ResultSet rs=null;\n  boolean error=true;\n  try {\n    pstmt=DB.prepareStatement(sql,null);\n    pstmt.setInt(1,AD_ReportView_ID);\n    pstmt.setInt(2,AD_Client_ID);\n    rs=pstmt.executeQuery();\n    if (rs.next()) {\n      String name=ReportName;\n      if (name == null || name.length() == 0)       name=rs.getString(1);\n      int count=rs.getInt(2);\n      if (count > 0)       name+=\"_\" + count;\n      pf.setName(name);\n      pf.setAD_PrintColor_ID(rs.getInt(3));\n      pf.setAD_PrintFont_ID(rs.getInt(4));\n      pf.setAD_PrintPaper_ID(rs.getInt(5));\n      pf.setAD_Table_ID(rs.getInt(6));\n      error=false;\n    }\n else     s_log.log(Level.SEVERE,\"Not found: AD_ReportView_ID=\" + AD_ReportView_ID);\n  }\n catch (  SQLException e) {\n    s_log.log(Level.SEVERE,sql,e);\n  }\n finally {\n    DB.close(rs,pstmt);\n    rs=null;\n    pstmt=null;\n  }\n  if (error)   return null;\n  if (!pf.save())   return null;\n  pf.setItems(createItems(ctx,pf));\n  return pf;\n}"}
{"ids": "60741", "raw_code": "private boolean compareAndIncrementWorkerCount(int expect){\n  return ctl.compareAndSet(expect,expect + 1);\n}"}
{"ids": "39261", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> result=new Vector<Option>();\n  Enumeration<Option> enm=super.listOptions();\n  while (enm.hasMoreElements())   result.add(enm.nextElement());\n  result.addElement(new Option(\"\\t\" + stopwordsTipText() + \"\\n\"+ \"\\t(default: .)\",\"stopwords\",1,\"-stopwords <file>\"));\n  return result.elements();\n}"}
{"ids": "70388", "raw_code": "private void enableOperationButtons(){\n  btnOr.setEnabled(true);\n  btnAnd.setEnabled(true);\n  btnRightParen.setEnabled(true);\n}"}
{"ids": "86339", "raw_code": "private double computeModifierUnbounded(final double x){\n  return expMultiplier * Math.exp(-x * x / expMember);\n}"}
{"ids": "37931", "raw_code": "@Override public boolean onUnit(Graphics g,int x,int y,int w,int h){\n  FontMetrics fm=g.getFontMetrics();\n  int l=(int)(m_x * w) - fm.stringWidth(m_id) / 2;\n  int t=(int)(m_y * h) - fm.getHeight() / 2;\n  if (x < l || x > l + fm.stringWidth(m_id) + 4 || y < t || y > t + fm.getHeight() + fm.getDescent()+ 4) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "67372", "raw_code": "public static Integer toInteger(String str){\n  try {\n    return Integer.valueOf(str);\n  }\n catch (  Exception ex) {\n    return null;\n  }\n}"}
{"ids": "28347", "raw_code": "private static void fillWithEmptyRows(DataTable data,int count){\n  while (data.getRowCount() < count) {\n    Double[] emptyRow=new Double[data.getColumnCount()];\n    Arrays.fill(emptyRow,0.0);\n    data.add(emptyRow);\n  }\n}"}
{"ids": "25370", "raw_code": "public FragmentedHandshakeMessage(byte[] fragmentedBytes,HandshakeType type,int fragmentOffset,int messageLength,InetSocketAddress peerAddress){\n  super(peerAddress);\n  this.type=type;\n  this.messageLength=messageLength;\n  this.fragmentedBytes=Arrays.copyOf(fragmentedBytes,fragmentedBytes.length);\n  setFragmentOffset(fragmentOffset);\n  setFragmentLength(fragmentedBytes.length);\n}"}
{"ids": "86274", "raw_code": "private static void deleteRetryCounter(WeakReference<Context> weakContext,String filename,int maxRetryAttempts){\n  Context context=null;\n  if (weakContext != null) {\n    context=weakContext.get();\n    if (context != null) {\n      SharedPreferences preferences=context.getSharedPreferences(ARTISAN_SDK,Context.MODE_PRIVATE);\n      SharedPreferences.Editor editor=preferences.edit();\n      editor.remove(\"RETRY_COUNT: \" + filename);\n      editor.apply();\n    }\n  }\n}"}
{"ids": "73344", "raw_code": "private void initializeSparseSlider(){\n  connectionDensitySlider.setMajorTickSpacing(10);\n  connectionDensitySlider.setMinorTickSpacing(2);\n  connectionDensitySlider.setPaintTicks(true);\n  Hashtable<Integer,JLabel> labelTable2=new Hashtable<Integer,JLabel>();\n  labelTable2.put(new Integer(0),new JLabel(\"0%\"));\n  labelTable2.put(new Integer(100),new JLabel(\"100%\"));\n  connectionDensitySlider.setLabelTable(labelTable2);\n  connectionDensitySlider.setPaintLabels(true);\n}"}
{"ids": "45835", "raw_code": "protected void updateTree(DocumentEvent event){\n  updatingSelection=true;\n  try {\n    TreeModel model=getTreeModel();\n    Object root=model.getRoot();\n    for (int counter=model.getChildCount(root) - 1; counter >= 0; counter--) {\n      updateTree(event,(Element)model.getChild(root,counter));\n    }\n  }\n  finally {\n    updatingSelection=false;\n  }\n}"}
{"ids": "65151", "raw_code": "private static Shape bottomEdge(BufferedImage image,GeneralPath path,int start){\n  int lastj=0;\n  Point2D p1=path.getCurrentPoint();\n  Point2D p2=null;\n  Line2D line=new Line2D.Float();\n  for (int i=start; i < image.getWidth(); i+=sample) {\n    boolean aPointExistsOnThisLine=false;\n    for (int j=image.getHeight() - 1; j >= 0; j-=sample) {\n      if ((image.getRGB(i,j) & 0xff000000) != 0) {\n        Point2D p=new Point2D.Float(i,j);\n        aPointExistsOnThisLine=true;\n        p2=detectLine(p1,p2,p,line,path);\n        lastj=j;\n        break;\n      }\n    }\n    if (aPointExistsOnThisLine == false) {\n      break;\n    }\n  }\n  return rightEdge(image,path,lastj);\n}"}
{"ids": "2006", "raw_code": "private boolean repeatingPreview(Object tag){\n  try {\n    CaptureRequest.Builder builder=mDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);\n    builder.addTarget(mPreviewSurface);\n    builder.set(CaptureRequest.CONTROL_MODE,CameraMetadata.CONTROL_MODE_AUTO);\n    addBaselineCaptureKeysToRequest(builder);\n    mCaptureSession.setRepeatingRequest(builder.build(),mCaptureCallback,mCameraHandler);\n    Log.v(TAG,String.format(\"Sent repeating Preview request, zoom = %.2f\",mZoomValue));\n    return true;\n  }\n catch (  CameraAccessException ex) {\n    Log.e(TAG,\"Could not access camera setting up preview.\",ex);\n    return false;\n  }\n}"}
{"ids": "15419", "raw_code": "private XMLElement newElement(String name,String value,ArrayList attributes) throws Exception {\n  return newElement(name,value,attributes,false);\n}"}
{"ids": "74458", "raw_code": "public void mousePressed(MouseEvent e){\n  if (log.isDebugEnabled()) {\n    log.debug(\"pressed \" + (e.getModifiers() & MouseEvent.BUTTON1_MASK) + \" \"+ e.isPopupTrigger()+ \" \"+ (e.getModifiers() & (MouseEvent.ALT_MASK + MouseEvent.META_MASK + MouseEvent.CTRL_MASK))+ (\" \" + MouseEvent.ALT_MASK + \"/\"+ MouseEvent.META_MASK+ \"/\"+ MouseEvent.CTRL_MASK));\n  }\n  if (e.isPopupTrigger() && parentFrame.isSelected()) {\n    try {\n      _menu.show(e.getComponent(),e.getX(),e.getY());\n    }\n catch (    java.awt.IllegalComponentStateException cs) {\n    }\n    e.consume();\n  }\n}"}
{"ids": "41681", "raw_code": "public void defineFillStyle(Color[] colors,int[] ratios,Transform matrix,boolean radial){\n  GradientFill fill=new GradientFill(colors,ratios,matrix,radial);\n  elements.add(fill);\n  for (int i=0; i < colors.length; i++) {\n    if (colors[i] == null) {\n      continue;\n    }\n    if (colors[i] instanceof AlphaColor) {\n      hasAlpha=true;\n    }\n  }\n}"}
{"ids": "271", "raw_code": "public boolean isOrphan(Sha256Hash block){\n  lock.lock();\n  try {\n    return orphanBlocks.containsKey(block);\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "61947", "raw_code": "protected BooleanVal(boolean b){\n  this.b=b;\n}"}
{"ids": "25507", "raw_code": "private void relocateFromHeaders(ByteBuffer f,SceModule module,int baseAddress,Elf32 elf,int elfOffset) throws IOException {\n  int i=0;\n  for (  Elf32ProgramHeader phdr : elf.getProgramHeaderList()) {\n    if (phdr.getP_type() == 0x700000A0L) {\n      int RelCount=phdr.getP_filesz() / Elf32Relocate.sizeof();\n      if (log.isDebugEnabled()) {\n        log.debug(String.format(\"PH#%d: relocating %d entries\",i,RelCount));\n      }\n      f.position(elfOffset + phdr.getP_offset());\n      relocateFromBuffer(f,module,baseAddress,elf,RelCount,true);\n      return;\n    }\n else     if (phdr.getP_type() == 0x700000A1L) {\n      if (log.isDebugEnabled()) {\n        log.debug(String.format(\"Type 0x700000A1 PH#%d: relocating A1 entries, size=0x%X\",i,phdr.getP_filesz()));\n      }\n      f.position(elfOffset + phdr.getP_offset());\n      relocateFromBufferA1(f,elf,baseAddress,i,phdr.getP_filesz());\n      return;\n    }\n    i++;\n  }\n  for (  Elf32SectionHeader shdr : elf.getSectionHeaderList()) {\n    if (mustRelocate(elf,shdr)) {\n      int RelCount=shdr.getSh_size() / Elf32Relocate.sizeof();\n      if (log.isDebugEnabled()) {\n        log.debug(shdr.getSh_namez() + \": relocating \" + RelCount+ \" entries\");\n      }\n      f.position(elfOffset + shdr.getSh_offset());\n      relocateFromBuffer(f,module,baseAddress,elf,RelCount,shdr.getSh_type() != Elf32SectionHeader.SHT_REL);\n    }\n  }\n}"}
{"ids": "21679", "raw_code": "public List<Volume> validateVolumes(StorageSystem storageSystem,List<Volume> volumes,boolean delete,boolean remediate,ValCk... checks){\n  try {\n    client=VPlexControllerUtils.getVPlexAPIClient(VPlexApiFactory.getInstance(),storageSystem,getDbClient());\n    for (    Volume volume : volumes) {\n      try {\n        log.info(String.format(\"Validating %s (%s)(%s) checks %s\",volume.getLabel(),volume.getNativeId(),volume.getId(),checks.toString()));\n        validateVolume(volume,delete,remediate,checks);\n      }\n catch (      Exception ex) {\n        log.error(\"Exception validating volume: \" + volume.getId(),ex);\n      }\n    }\n  }\n catch (  Exception ex) {\n    log.error(\"Unexpected exception validating VPLEX: \" + storageSystem.getId(),ex);\n  }\n  return remediatedVolumes;\n}"}
{"ids": "69315", "raw_code": "private void drawXAxisMarker(Canvas canvas,double value,NumberFormat numberFormat,int spacing){\n  String marker=chartByDistance ? numberFormat.format(value) : StringUtils.formatElapsedTime((long)value);\n  Rect rect=getRect(xAxisMarkerPaint,marker);\n  canvas.drawText(marker,getX(value),topBorder + effectiveHeight + spacing+ rect.height(),xAxisMarkerPaint);\n}"}
{"ids": "75509", "raw_code": "public static <E>ArrayList<E> list(E... elements){\n  ArrayList<E> list=new ArrayList<E>();\n  for (  E element : elements)   list.add(element);\n  return list;\n}"}
{"ids": "71757", "raw_code": "public static String encode(ArrayList<GeoPoint> polyline,int precision){\n  StringBuilder encodedPoints=new StringBuilder();\n  int prev_lat=0, prev_lng=0;\n  for (  GeoPoint trackpoint : polyline) {\n    int lat=trackpoint.getLatitudeE6() / precision;\n    int lng=trackpoint.getLongitudeE6() / precision;\n    encodedPoints.append(encodeSignedNumber(lat - prev_lat));\n    encodedPoints.append(encodeSignedNumber(lng - prev_lng));\n    prev_lat=lat;\n    prev_lng=lng;\n  }\n  return encodedPoints.toString();\n}"}
{"ids": "63881", "raw_code": "private static boolean isTextObscured(JComponent c,String s){\n  Graphics g=c.getGraphics();\n  FontMetrics fm=g.getFontMetrics(c.getFont());\n  int sw=fm.stringWidth(s);\n  return (sw > c.getWidth());\n}"}
{"ids": "57476", "raw_code": "public void add(Permission permission){\n  perms.put(permission,permission);\n}"}
{"ids": "66381", "raw_code": "private int encryptedColumnLength(int colLength){\n  String str=\"\";\n  for (int i=0; i < colLength; i++) {\n    str+=\"1\";\n  }\n  str=SecureEngine.encrypt(str);\n  return str.length();\n}"}
{"ids": "78476", "raw_code": "private CnATreeElement unifyLinks(CnATreeElement sourceElement,CnATreeElement destinationElement) throws CommandException {\n  for (  CnALink linkDown : sourceElement.getLinksDown()) {\n    createLink(destinationElement,linkDown.getDependency(),linkDown.getRelationId());\n  }\n  for (  CnALink linkUp : sourceElement.getLinksUp()) {\n    createLink(linkUp.getDependant(),destinationElement,linkUp.getRelationId());\n  }\n  return destinationElement;\n}"}
{"ids": "46685", "raw_code": "private boolean flushAccumulatedRegion(){\n  boolean success=true;\n  if (accumulatedX != Integer.MAX_VALUE) {\n    SubRegionShowable bsSubRegion=(SubRegionShowable)bufferStrategy;\n    boolean contentsLost=bufferStrategy.contentsLost();\n    if (!contentsLost) {\n      bsSubRegion.show(accumulatedX,accumulatedY,accumulatedMaxX,accumulatedMaxY);\n      contentsLost=bufferStrategy.contentsLost();\n    }\n    if (contentsLost) {\n      if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {\n        LOGGER.finer(\"endPaint: contents lost\");\n      }\n      bufferInfo.setInSync(false);\n      success=false;\n    }\n  }\n  resetAccumulated();\n  return success;\n}"}
{"ids": "81895", "raw_code": "public void clearPieSegments(){\n  mPieSegmentList.clear();\n}"}
{"ids": "75846", "raw_code": "public static String randomAlphanumerical(final int len){\n  final StringBuilder sb=new StringBuilder(len);\n  for (int i=0; i < len; i++) {\n    sb.append(AB.charAt(random.nextInt(AB.length())));\n  }\n  return sb.toString();\n}"}
{"ids": "50258", "raw_code": "static int svd_imax(int a,int b){\n  return Math.max(a,b);\n}"}
{"ids": "49198", "raw_code": "private boolean isMimeFormat(long format,String primaryType){\n  String nat=getNativeForFormat(format);\n  if (nat == null) {\n    return false;\n  }\n  try {\n    DataFlavor df=new DataFlavor(nat);\n    if (primaryType.equals(df.getPrimaryType())) {\n      return true;\n    }\n  }\n catch (  Exception e) {\n  }\n  return false;\n}"}
{"ids": "78632", "raw_code": "private static String convertRelevance(int relevance){\n  StringBuilder sb=new StringBuilder();\n  while (relevance > 0) {\n    sb.insert(0,REVERSE_CHAR_MAP[relevance % 10]);\n    relevance=relevance / 10;\n  }\n  return sb.toString();\n}"}
{"ids": "17502", "raw_code": "public synchronized AlphabeticIndex addLabels(Locale locale){\n  addLabels(peer,locale.toString());\n  return this;\n}"}
{"ids": "23938", "raw_code": "int extractVersionFromFilename(final File file){\n  final Matcher matcher=versionedPattern.matcher(file.getAbsolutePath());\n  matcher.find();\n  return Integer.parseInt(matcher.group(2));\n}"}
{"ids": "20597", "raw_code": "static int measureChildForCells(View child,int cellSize,int cellsRemaining,int parentHeightMeasureSpec,int parentHeightPadding){\n  final LayoutParams lp=(LayoutParams)child.getLayoutParams();\n  final int childHeightSize=MeasureSpec.getSize(parentHeightMeasureSpec) - parentHeightPadding;\n  final int childHeightMode=MeasureSpec.getMode(parentHeightMeasureSpec);\n  final int childHeightSpec=MeasureSpec.makeMeasureSpec(childHeightSize,childHeightMode);\n  int cellsUsed=0;\n  if (cellsRemaining > 0) {\n    final int childWidthSpec=MeasureSpec.makeMeasureSpec(cellSize * cellsRemaining,MeasureSpec.AT_MOST);\n    child.measure(childWidthSpec,childHeightSpec);\n    final int measuredWidth=child.getMeasuredWidth();\n    cellsUsed=measuredWidth / cellSize;\n    if (measuredWidth % cellSize != 0)     cellsUsed++;\n  }\n  final ActionMenuItemView itemView=child instanceof ActionMenuItemView ? (ActionMenuItemView)child : null;\n  final boolean expandable=!lp.isOverflowButton && itemView != null && itemView.hasText();\n  lp.expandable=expandable;\n  lp.cellsUsed=cellsUsed;\n  final int targetWidth=cellsUsed * cellSize;\n  child.measure(MeasureSpec.makeMeasureSpec(targetWidth,MeasureSpec.EXACTLY),childHeightSpec);\n  return cellsUsed;\n}"}
{"ids": "73025", "raw_code": "private boolean isSpecializedHandlerAvailable(Intent intent){\n  PackageManager pm=mActivity.getPackageManager();\n  List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);\n  if (handlers == null || handlers.size() == 0) {\n    return false;\n  }\n  for (  ResolveInfo resolveInfo : handlers) {\n    IntentFilter filter=resolveInfo.filter;\n    if (filter == null) {\n      continue;\n    }\n    if (filter.countDataAuthorities() == 0 && filter.countDataPaths() == 0) {\n      continue;\n    }\n    return true;\n  }\n  return false;\n}"}
{"ids": "3869", "raw_code": "private void convertError(CharBuffer buf,int line){\n  String srcFilename=null;\n  int destLine=0;\n  int srcLine=0;\n  int srcTailLine=Integer.MAX_VALUE;\n  for (int i=0; i < _lines.size(); i++) {\n    Line map=(Line)_lines.get(i);\n    if (map._dstLine <= line && line <= map.getLastDestinationLine()) {\n      srcFilename=map._srcFilename;\n      destLine=map._dstLine;\n      srcLine=map.getSourceLine(line);\n      break;\n    }\n  }\n  if (srcFilename != null) {\n  }\n else   if (_lines.size() > 0)   srcFilename=((Line)_lines.get(0))._srcFilename;\n else   srcFilename=\"\";\n  buf.append(srcFilename);\n  if (line >= 0) {\n    buf.append(\":\");\n    buf.append(srcLine + (line - destLine));\n  }\n}"}
{"ids": "62629", "raw_code": "public static String slurpGBURLNoExceptions(URL u){\n  try {\n    return slurpGBURL(u);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    return null;\n  }\n}"}
{"ids": "73317", "raw_code": "public void undo(){\n  if (!undoStack.isEmpty()) {\n    UndoableAction lastEvent=undoStack.pop();\n    lastEvent.undo();\n    redoStack.push(lastEvent);\n  }\n}"}
{"ids": "35150", "raw_code": "public Pair<SolrCore,SolrCore> replicateToDestination(SolrCore bestsrcCore,SolrCore destinationCore) throws Exception {\n  Pair<SolrCore,SolrCore> replicationRequestPair=null;\n  try {\n    SolrInteractionUtils.replicateIndex(destinationCore.host,destinationCore.name,bestsrcCore.host,bestsrcCore.name);\n    String fullReplication=\"http://%s:%s/solr/%s/replication?command=fetchindex&masterUrl=http://%s:%s/solr/%s\";\n    String replicator=String.format(fullReplication,destinationCore.host,SolrInteractionUtils.DEFAULT_SOLR_PORT,destinationCore.name,bestsrcCore.host,SolrInteractionUtils.DEFAULT_SOLR_PORT,bestsrcCore.name);\n    logger.info(\"Using Replication Command -> \" + replicator);\n    replicationRequestPair=new Pair<SolrCore,SolrCore>(destinationCore,bestsrcCore);\n    logger.info(\"Adding Replication Request to the Queue: \" + destinationCore.host + \":\"+ destinationCore.name+ \" --> \"+ bestsrcCore.host+ \":\"+ bestsrcCore.name);\n  }\n catch (  Exception e) {\n    logger.info(\"Encountered Exception while Trying to connect to destination host \" + destinationCore.host + \" or source host\"+ bestsrcCore.host);\n    if (!replicatorConfig.shouldSkipReplicationFailures()) {\n      throw new ReplicationFailureException(\"Replication failures while tyring to talk to nodes \" + destinationCore.host + \" or source host\"+ bestsrcCore.host);\n    }\n  }\n  return replicationRequestPair;\n}"}
{"ids": "24659", "raw_code": "public static OSType calculateOS(){\n  String osName=System.getProperty(\"os.name\");\n  osName=osName.toLowerCase(Locale.ENGLISH);\n  if (osName.startsWith(\"mac os\")) {\n    return OSType.APPLE;\n  }\n  if (osName.startsWith(\"windows\")) {\n    return OSType.WINDOWS;\n  }\n  if (osName.startsWith(\"linux\")) {\n    return OSType.LINUX;\n  }\n  if (osName.startsWith(\"sun\")) {\n    return OSType.SUN;\n  }\n  return OSType.UNKNOWN;\n}"}
{"ids": "42202", "raw_code": "private static int countDuplicates(StackTraceElement[] currentStack,StackTraceElement[] parentStack){\n  int duplicates=0;\n  int parentIndex=parentStack.length;\n  for (int i=currentStack.length; --i >= 0 && --parentIndex >= 0; ) {\n    StackTraceElement parentFrame=parentStack[parentIndex];\n    if (parentFrame.equals(currentStack[i])) {\n      duplicates++;\n    }\n else {\n      break;\n    }\n  }\n  return duplicates;\n}"}
{"ids": "41174", "raw_code": "public void recycle(){\nsynchronized (sPool) {\n    if (sPool.size() < MAX_POOL_SIZE) {\n      sPool.add(this);\n    }\n  }\n}"}
{"ids": "52383", "raw_code": "private String buildInsert(boolean disableReturning){\n  sb.setLength(0);\n  sb.append(\"insert into \");\n  appendTable(sb);\n  sb.append(\" (\\\"\");\n  sb.append(options.keyColumnName);\n  sb.append(\"\\\",\\\"\");\n  if (options.doctypeColumnName != null) {\n    sb.append(options.doctypeColumnName);\n    sb.append(\"\\\",\\\"\");\n  }\n  sb.append(options.contentColumnName);\n  sb.append(\"\\\"\");\n  if (options.timestampColumnName != null) {\n    sb.append(\",\\\"\");\n    sb.append(options.timestampColumnName);\n    sb.append(\"\\\"\");\n  }\n  if (options.creationColumnName != null) {\n    sb.append(\",\\\"\");\n    sb.append(options.creationColumnName);\n    sb.append(\"\\\"\");\n  }\n  if ((options.versionColumnName != null) && (options.versioningMethod) != CollectionDescriptor.VERSION_NONE) {\n    sb.append(\",\\\"\");\n    sb.append(options.versionColumnName);\n    sb.append(\"\\\"\");\n  }\n  sb.append(\") values (\");\n  if ((options.keySequenceName != null) && (!disableReturning)) {\nswitch (options.keyDataType) {\ncase CollectionDescriptor.INTEGER_KEY:\n      sb.append(\"\\\"\");\n    sb.append(options.keySequenceName);\n  sb.append(\"\\\".NEXTVAL\");\nbreak;\ncase CollectionDescriptor.RAW_KEY:\nsb.append(\"hextoraw(substr(to_char(\\\"\");\nsb.append(options.keySequenceName);\nsb.append(\"\\\".NEXTVAL,'0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'),3))\");\nbreak;\ncase CollectionDescriptor.STRING_KEY:\ncase CollectionDescriptor.NCHAR_KEY:\ndefault :\nsb.append(\"to_char(\\\"\");\nsb.append(options.keySequenceName);\nsb.append(\"\\\".NEXTVAL)\");\nbreak;\n}\n}\n else if ((options.keyAssignmentMethod == CollectionDescriptor.KEY_ASSIGN_GUID) && (!disableReturning)) {\nswitch (options.keyDataType) {\ncase CollectionDescriptor.INTEGER_KEY:\nsb.append(\"to_number(\");\nsb.append(\"rawtohex(SYS_GUID()),\");\nsb.append(\"'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')\");\nbreak;\ncase CollectionDescriptor.RAW_KEY:\nsb.append(\"SYS_GUID()\");\nbreak;\ncase CollectionDescriptor.STRING_KEY:\ncase CollectionDescriptor.NCHAR_KEY:\ndefault :\nsb.append(\"rawtohex(SYS_GUID())\");\nbreak;\n}\n}\n else {\naddKey(sb);\n}\nif (options.doctypeColumnName != null) {\nsb.append(\",?\");\n}\nsb.append(\",?\");\nif (options.timestampColumnName != null) {\nif (disableReturning) OracleDatabaseImpl.addToTimestamp(\",\",sb);\n else sb.append(\",sys_extract_utc(SYSTIMESTAMP)\");\n}\nif (options.creationColumnName != null) {\nif (disableReturning) OracleDatabaseImpl.addToTimestamp(\",\",sb);\n else sb.append(\",sys_extract_utc(SYSTIMESTAMP)\");\n}\nif ((options.versionColumnName != null) && (options.versioningMethod) != CollectionDescriptor.VERSION_NONE) sb.append(\",?\");\nsb.append(\")\");\nif (insertHasReturnClause(disableReturning)) {\nsb.append(\" returning \");\nint count=0;\nif (returnInsertedKey()) {\nsb.append(\"\\\"\");\nsb.append(options.keyColumnName);\nsb.append(\"\\\"\");\ncount++;\n}\nif (returnInsertedTime()) {\naddComma(sb,count);\nsb.append(\"to_char(\\\"\");\nif (options.timestampColumnName != null) sb.append(options.timestampColumnName);\n else sb.append(options.creationColumnName);\nsb.append('\"');\nOracleDatabaseImpl.addTimestampReturningFormat(sb);\ncount++;\n}\nif (returnInsertedVersion()) {\naddComma(sb,count);\nsb.append(\"\\\"\");\nsb.append(options.versionColumnName);\nsb.append(\"\\\"\");\ncount++;\n}\naddInto(sb,count);\n}\nreturn (sb.toString());\n}"}
{"ids": "29600", "raw_code": "public final boolean exists(){\n  return config != null;\n}"}
{"ids": "5084", "raw_code": "private boolean has_colinear(ArrayList<PlaPointInt> corners_list,PlaPointInt a_point){\n  int count=corners_list.size();\n  if (count < 2)   return false;\n  for (int index=0; index < count - 1; index++) {\n    PlaPointInt start=corners_list.get(index);\n    PlaPointInt end=corners_list.get(index + 1);\n    if (a_point.side_of(start,end) != PlaSide.COLLINEAR)     continue;\n    double d_start_p=start.distance_square(a_point);\n    double d_p_end=a_point.distance_square(end);\n    double d_start_end=start.distance_square(end);\n    if (d_start_end >= d_start_p) {\n      if (d_start_end >= d_p_end) {\n        return true;\n      }\n else {\n        corners_list.set(index,a_point);\n        return true;\n      }\n    }\n else {\n      if (d_start_end >= d_p_end) {\n        corners_list.set(index + 1,a_point);\n        return true;\n      }\n else {\n        corners_list.set(index,a_point);\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "50869", "raw_code": "public boolean contains(String key){\n  return myProperties.containsKey(key);\n}"}
{"ids": "48897", "raw_code": "protected SnmpCachedData updateCachedDatas(Object userData){\n  final String[] path=JvmRuntimeImpl.getLibraryPath(userData);\n  final long time=System.currentTimeMillis();\n  final int len=path.length;\n  SnmpOid indexes[]=new SnmpOid[len];\n  for (int i=0; i < len; i++) {\n    indexes[i]=new SnmpOid(i + 1);\n  }\n  return new SnmpCachedData(time,indexes,path);\n}"}
{"ids": "79887", "raw_code": "public static byte[] decodeHex(String hexString){\n  int length=hexString.length();\n  if ((length & 0x01) != 0) {\n    throw new IllegalArgumentException(\"Odd number of characters.\");\n  }\n  boolean badHex=false;\n  byte[] out=new byte[length >> 1];\n  for (int i=0, j=0; j < length; i++) {\n    int c1=hexString.charAt(j++);\n    if (c1 > 'f') {\n      badHex=true;\n      break;\n    }\n    final byte d1=DIGITS[c1];\n    if (d1 == -1) {\n      badHex=true;\n      break;\n    }\n    int c2=hexString.charAt(j++);\n    if (c2 > 'f') {\n      badHex=true;\n      break;\n    }\n    final byte d2=DIGITS[c2];\n    if (d2 == -1) {\n      badHex=true;\n      break;\n    }\n    out[i]=(byte)(d1 << 4 | d2);\n  }\n  if (badHex) {\n    throw new IllegalArgumentException(\"Invalid hexadecimal digit: \" + hexString);\n  }\n  return out;\n}"}
{"ids": "64298", "raw_code": "public static void deletePlayer(PlayerAccountData accData){\n  if (accData.getDeletionDate() != null) {\n    return;\n  }\n  accData.setDeletionDate(new Timestamp(System.currentTimeMillis() + 5 * 60 * 1000));\n  storeDeletionTime(accData);\n}"}
{"ids": "5470", "raw_code": "public int eval(INode state){\n  EightPuzzleNode node=(EightPuzzleNode)state;\n  int Pn=0;\n  for (int r=0; r <= EightPuzzleNode.MaxR; r++) {\n    for (int c=0; c <= EightPuzzleNode.MaxC; c++) {\n      if (node.isEmpty(r,c)) {\n        continue;\n      }\n      int digit=node.cell(r,c);\n      Pn+=Math.abs(diffs[digit][0] - r);\n      Pn+=Math.abs(diffs[digit][1] - c);\n    }\n  }\n  int Sn=0;\n  if (!node.isEmpty(1,1)) {\n    Sn=1;\n  }\n  for (int r=0; r <= EightPuzzleNode.MaxR; r++) {\n    for (int c=0; c <= EightPuzzleNode.MaxC; c++) {\n      int idx=r * 3 + c;\n      if (r == 1 && c == 1) {\n        continue;\n      }\n      if (node.cell(r,c) == EightPuzzleNode.EmptyMark) {\n        continue;\n      }\n      if (succ[node.cell(r,c)] != node.cell(succs[idx][0],succs[idx][1])) {\n        Sn+=2;\n      }\n    }\n  }\n  int gn=0;\n  DepthTransition t=(DepthTransition)state.storedData();\n  if (t != null) {\n    gn=t.depth;\n  }\n  return gn + Pn + 3 * Sn;\n}"}
{"ids": "68118", "raw_code": "private String parseCss(final String css){\n  final Map<String,String> map=new HashMap<String,String>();\n  final StringBuffer sb=new StringBuffer();\n  final Matcher m=PATTERN_VARIABLES_DEFINITION.matcher(css);\n  while (m.find()) {\n    final String variablesBody=m.group(1);\n    map.putAll(extractVariables(variablesBody));\n    m.appendReplacement(sb,\"\");\n  }\n  m.appendTail(sb);\n  return replaceVariables(sb.toString(),map);\n}"}
{"ids": "31707", "raw_code": "private void shutdown(){\n  if (execSvc != null)   execSvc.shutdown(5000);\n  if (msgExecSvc != null)   msgExecSvc.shutdownNow();\n  try {\n    job.dispose(true);\n  }\n catch (  IgniteCheckedException e) {\n    U.error(log,\"Failed to dispose job.\",e);\n  }\n}"}
{"ids": "69180", "raw_code": "public void startCDATA() throws org.xml.sax.SAXException {\n  m_inCData=true;\n  append(m_doc.createCDATASection(\"\"));\n}"}
{"ids": "43311", "raw_code": "public void addAll(List<Fragment> aSplits){\n  splits.addAll(aSplits);\n}"}
{"ids": "11964", "raw_code": "protected synchronized int currentchunkoffset() throws IOException {\n  long fp=backingRandomAccessFile.getFilePointer();\n  if (fp < fHeader.headerSize()) {\n    return -1;\n  }\n else {\n    fp-=fHeader.headerSize();\n    if (fp == 0) {\n      return 0;\n    }\n else {\n      return (int)((fp % CHUNK_ENC_SIZE) - CHUNK_IV_SIZE);\n    }\n  }\n}"}
{"ids": "48415", "raw_code": "private int parseIntValue(String input) throws NumberFormatException {\n  int value=0;\n  if (input.startsWith(\"+\")) {\n    String temp=input.substring(1);\n    return Integer.parseInt(temp);\n  }\n else   if (input.startsWith(\"0x\")) {\n    String temp=input.substring(2);\n    char[] chars=temp.toCharArray();\n    if (chars.length > 8) {\n      throw new NumberFormatException();\n    }\n else {\n      for (int i=0; i < chars.length; i++) {\n        int index=chars.length - i - 1;\nswitch (chars[i]) {\ncase '0':\n          value+=0;\n        break;\ncase '1':\n      value+=1 * getBase(index);\n    break;\ncase '2':\n  value+=2 * getBase(index);\nbreak;\ncase '3':\nvalue+=3 * getBase(index);\nbreak;\ncase '4':\nvalue+=4 * getBase(index);\nbreak;\ncase '5':\nvalue+=5 * getBase(index);\nbreak;\ncase '6':\nvalue+=6 * getBase(index);\nbreak;\ncase '7':\nvalue+=7 * getBase(index);\nbreak;\ncase '8':\nvalue+=8 * getBase(index);\nbreak;\ncase '9':\nvalue+=9 * getBase(index);\nbreak;\ncase 'a':\ncase 'A':\nvalue+=10 * getBase(index);\nbreak;\ncase 'b':\ncase 'B':\nvalue+=11 * getBase(index);\nbreak;\ncase 'c':\ncase 'C':\nvalue+=12 * getBase(index);\nbreak;\ncase 'd':\ncase 'D':\nvalue+=13 * getBase(index);\nbreak;\ncase 'e':\ncase 'E':\nvalue+=14 * getBase(index);\nbreak;\ncase 'f':\ncase 'F':\nvalue+=15 * getBase(index);\nbreak;\ndefault :\nthrow new NumberFormatException(\"Invalid numerical format\");\n}\n}\n}\nif (value < 0) {\nthrow new NumberFormatException(\"Data overflow.\");\n}\n}\n else {\nvalue=Integer.parseInt(input);\n}\nreturn value;\n}"}
{"ids": "24687", "raw_code": "protected int decodeLinePrefix(PushbackInputStream aStream,OutputStream bStream) throws IOException {\n  return (bytesPerLine());\n}"}
{"ids": "30839", "raw_code": "private static LookupLocator[] unmarshalLocators(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  List l=new ArrayList();\n  MarshalledInstance mi;\n  while ((mi=(MarshalledInstance)in.readObject()) != null) {\n    try {\n      l.add((LookupLocator)mi.get(false));\n    }\n catch (    Throwable e) {\n      if (e instanceof Error && ThrowableConstants.retryable(e) == ThrowableConstants.BAD_OBJECT) {\n        throw (Error)e;\n      }\n      logger.log(Level.WARNING,\"failed to recover lookup locator\",e);\n    }\n  }\n  return (LookupLocator[])l.toArray(new LookupLocator[l.size()]);\n}"}
{"ids": "35954", "raw_code": "public void accept(final AnnotationVisitor av){\n  if (av != null) {\n    if (values != null) {\n      for (int i=0; i < values.size(); i+=2) {\n        String name=(String)values.get(i);\n        Object value=values.get(i + 1);\n        accept(av,name,value);\n      }\n    }\n    av.visitEnd();\n  }\n}"}
{"ids": "83658", "raw_code": "static public String numberToString(Number n) throws JSONException {\n  if (n == null) {\n    throw new JSONException(\"Null pointer\");\n  }\n  testValidity(n);\n  String s=n.toString();\n  if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {\n    while (s.endsWith(\"0\")) {\n      s=s.substring(0,s.length() - 1);\n    }\n    if (s.endsWith(\".\")) {\n      s=s.substring(0,s.length() - 1);\n    }\n  }\n  return s;\n}"}
{"ids": "51878", "raw_code": "public int children(){\n  return children.size();\n}"}
{"ids": "22517", "raw_code": "public void createVVset(String displayName) throws Exception {\n  _log.info(\"createVVset enter\");\n  ClientResponse clientResp=null;\n  String payload=\"{\\\"name\\\": \\\"\" + displayName + \"\\\" }\";\n  _log.info(\" 3PARDriver: createVVset uri = {} payload {} \",URI_CREATE_CG.toString(),payload);\n  try {\n    clientResp=post(URI_CREATE_CG,payload);\n    if (clientResp == null) {\n      _log.error(\"3PARDriver: createVVset There is no response from 3PAR\");\n      throw new HP3PARException(\"There is no response from 3PAR\");\n    }\n else     if (clientResp.getStatus() != 201) {\n      String errResp=getResponseDetails(clientResp);\n      _log.error(\"3PARDriver: createVVset There is error response from 3PAR = {}\",errResp);\n      throw new HP3PARException(errResp);\n    }\n else {\n      _log.info(\"3PARDriver: createVVset success\");\n    }\n  }\n catch (  Exception e) {\n    throw e;\n  }\n finally {\n    if (clientResp != null) {\n      clientResp.close();\n    }\n    _log.info(\"3PARDriver: createVVset leave\");\n  }\n}"}
{"ids": "1766", "raw_code": "protected void connectionFailed(Channel failedChannel,IOException cause){\n  failureCause=IOExceptionSupport.create(cause);\n  channel=failedChannel;\n  connected.set(false);\n  handshakeFuture.setFailure(cause);\n}"}
{"ids": "884", "raw_code": "public static byte[] splitUint8To2bytes(char uint8){\n  if (uint8 < 0 || uint8 > 0xff) {\n    throw new RuntimeException(\"Out of Boundary\");\n  }\n  String hexString=Integer.toHexString(uint8);\n  byte low;\n  byte high;\n  if (hexString.length() > 1) {\n    high=(byte)Integer.parseInt(hexString.substring(0,1),16);\n    low=(byte)Integer.parseInt(hexString.substring(1,2),16);\n  }\n else {\n    high=0;\n    low=(byte)Integer.parseInt(hexString.substring(0,1),16);\n  }\n  byte[] result=new byte[]{high,low};\n  return result;\n}"}
{"ids": "18197", "raw_code": "public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute) throws SAXException {\n  if (m_elemContext.m_startTagOpen) {\n    ensurePrefixIsDeclared(uri,rawName);\n    addAttributeAlways(uri,localName,rawName,type,value,false);\n  }\n}"}
{"ids": "3011", "raw_code": "private String markdownBlockquote(String value){\n  return \"> \" + value.replace(\"\\n\",\"\\n> \");\n}"}
{"ids": "52481", "raw_code": "protected String hash(String key){\n  try {\n    MessageDigest gen=HASH_GENERATOR.get();\n    byte[] keyBytes=key.getBytes(\"UTF-8\");\n    gen.update(keyBytes,0,keyBytes.length);\n    byte[] binaryhash=gen.digest();\n    return ENCODER.encodeToString(binaryhash);\n  }\n catch (  Exception e) {\n    LOG.warn(\"Failed to get hash encoding for key: {}\",key,e);\n  }\n  return null;\n}"}
{"ids": "69684", "raw_code": "public static boolean isInputType(String typeString){\n  return INPUT_TYPES.contains(typeString);\n}"}
{"ids": "10028", "raw_code": "public static Point destination(Point point1,double distance,double bearing,String units) throws TurfException {\n  double degrees2radians=Math.PI / 180;\n  double radians2degrees=180 / Math.PI;\n  Position coordinates1=point1.getCoordinates();\n  double longitude1=degrees2radians * coordinates1.getLongitude();\n  double latitude1=degrees2radians * coordinates1.getLatitude();\n  double bearingRad=degrees2radians * bearing;\n  double radians=TurfHelpers.distanceToRadians(distance,units);\n  double latitude2=Math.asin(Math.sin(latitude1) * Math.cos(radians) + Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));\n  double longitude2=longitude1 + Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1),Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));\n  return Point.fromCoordinates(Position.fromCoordinates(radians2degrees * longitude2,radians2degrees * latitude2));\n}"}
{"ids": "10654", "raw_code": "public void clear(){\nsynchronized (mLock) {\n    mGraphics.clear();\n    mFirstGraphic=null;\n  }\n  postInvalidate();\n}"}
{"ids": "3279", "raw_code": "@SuppressWarnings(\"LeakingThisInConstructor\") public NodePanel(ShaderNodeVariable singleOut,NodePanel.NodeType type){\n  super();\n  List<ShaderNodeVariable> outputs=new ArrayList<ShaderNodeVariable>();\n  outputs.add(singleOut);\n  this.type=type;\n  init(new ArrayList<ShaderNodeVariable>(),outputs);\n  addKeyListener(this);\n  toolBar=new NodeToolBar(this);\n}"}
{"ids": "62679", "raw_code": "public static String stringifyException(Throwable e){\n  StringWriter stm=new StringWriter();\n  PrintWriter wrt=new PrintWriter(stm);\n  e.printStackTrace(wrt);\n  wrt.close();\n  return stm.toString();\n}"}
{"ids": "20131", "raw_code": "public static boolean isSolaris(){\n  return (OS.indexOf(\"sunos\") >= 0);\n}"}
{"ids": "53535", "raw_code": "public double SumInlinkHubScore(Page page){\n  List<String> inLinks=page.getInlinks();\n  double hubScore=0;\n  for (int i=0; i < inLinks.size(); i++) {\n    Page inLink=pTable.get(inLinks.get(i));\n    if (inLink != null) {\n      hubScore+=inLink.hub;\n    }\n else {\n      continue;\n    }\n  }\n  return hubScore;\n}"}
{"ids": "66576", "raw_code": "private void preserveParentLink(String brokenTableName,String brokenColumnName,String brokenDefaultValue,ArrayList<String> brokenCompareColumns,String hintTableName,String hintColumnName,ArrayList<String> hintCompareColumns){\n  String vendorName=m_target.getVendor();\n  String catalogName=m_target.getCatalog();\n  String schemaName=m_target.getSchema();\n  if (m_source.isObjectExists(brokenTableName,m_source.getTables())) {\n    boolean columnToPreserveLinkExists=false;\n    DBObject tableToPreserveLink=m_source.getObjectByName(brokenTableName,m_source.getTables());\n    HashMap<Integer,DBObjectDefinition> columns=tableToPreserveLink.getContents();\n    Vector<Integer> vc=new Vector<Integer>(columns.keySet());\n    for (Iterator<Integer> ic=vc.iterator(); ic.hasNext(); ) {\n      int kc=ic.next();\n      DBObject_Table_Column columnDetail=(DBObject_Table_Column)columns.get(kc);\n      String columnName=columnDetail.getName();\n      if (columnName.equalsIgnoreCase(brokenColumnName))       columnToPreserveLinkExists=true;\n    }\n    if (columnToPreserveLinkExists) {\n      s_logger.log(Level.FINE,\"preserveParentLinkDetail\",new Object[]{m_objectType,brokenTableName,m_direction});\n      String sqlCommand=s_dbEngine.sqlAction_preserveParentLinks(vendorName,catalogName,schemaName,brokenTableName,brokenColumnName,brokenDefaultValue,brokenCompareColumns,hintTableName,hintColumnName,hintCompareColumns);\n      if (sqlCommand != null) {\n        Savepoint sp=m_target.setSavepoint(\"preserveParentLinks\");\n        Statement stmt=m_target.setStatement();\n        Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);\n        if (sqlResult != null) {\n          logUpdateDetail(sqlResult,null);\n          m_counterUpd=new Integer(m_counterUpd.intValue() + 1);\n        }\n        m_target.releaseStatement(stmt);\n        m_totalUpd=new Integer(m_totalUpd.intValue() + 1);\n        m_target.releaseSavepoint(sp);\n      }\n    }\n  }\n}"}
{"ids": "48814", "raw_code": "public ShortBandedRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){\n  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);\n}"}
{"ids": "52311", "raw_code": "public void remapMappedTypes(){\n  clearMappedTypes();\n  mapPossibleTypes(mItems);\n}"}
{"ids": "5569", "raw_code": "public int numChildren(int row){\n  int count=0;\n  nextValidRowPositions.clear();\n  for (int i=0; i < n; i++) {\n    board[row][i]=true;\n    if (valid(row,i)) {\n      count++;\n      nextValidRowPositions.add(i);\n    }\n    board[row][i]=false;\n  }\n  return count;\n}"}
{"ids": "33038", "raw_code": "public static IJavaSearchScope createRelatedProjectsScope(IJavaProject project,int includeMask) throws CoreException {\n  IJavaProject[] projects=getRelatedProjects(project);\n  return SearchEngine.createJavaSearchScope(projects,includeMask);\n}"}
{"ids": "9891", "raw_code": "public Confirmation(){\n  this(null,null);\n}"}
{"ids": "26586", "raw_code": "public VcsRevisionNumber originalRevision(int lineNumber){\n  return getLineRevisionNumber(lineNumber);\n}"}
{"ids": "3247", "raw_code": "private void checkPausedOrCanceled(State state) throws StopRequest {\n  if (mService.getControl() == DownloaderService.CONTROL_PAUSED) {\n    int status=mService.getStatus();\nswitch (status) {\ncase DownloaderService.STATUS_PAUSED_BY_APP:\n      throw new StopRequest(mService.getStatus(),\"download paused\");\n  }\n}\n}"}
{"ids": "40007", "raw_code": "void trace(){\n  glUseProgram(computeProgram);\n  invProjMatrix.transformProject(tmpVector.set(-1,-1,0));\n  glUniform3f(ray00Uniform,tmpVector.x,tmpVector.y,tmpVector.z);\n  invProjMatrix.transformProject(tmpVector.set(-1,1,0));\n  glUniform3f(ray01Uniform,tmpVector.x,tmpVector.y,tmpVector.z);\n  invProjMatrix.transformProject(tmpVector.set(1,-1,0));\n  glUniform3f(ray10Uniform,tmpVector.x,tmpVector.y,tmpVector.z);\n  invProjMatrix.transformProject(tmpVector.set(1,1,0));\n  glUniform3f(ray11Uniform,tmpVector.x,tmpVector.y,tmpVector.z);\n  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,trianglesSsboBinding,ssbo);\n  glBindImageTexture(framebufferImageBinding,raytraceTexture,0,false,0,GL_WRITE_ONLY,GL_RGBA8);\n  int worksizeX=mathRoundPoT(width);\n  int worksizeY=mathRoundPoT(height);\n  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);\n  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);\n  glBindImageTexture(framebufferImageBinding,0,0,false,0,GL_WRITE_ONLY,GL_RGBA8);\n  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,trianglesSsboBinding,0);\n  glUseProgram(0);\n}"}
{"ids": "62132", "raw_code": "public void removeAllActionFireListeners(){\n  mActionFiredListeners.clear();\n}"}
{"ids": "17137", "raw_code": "public static String millisToString(long millis){\n  boolean negative=millis < 0;\n  millis=Math.abs(millis);\n  millis/=1000;\n  int sec=(int)(millis % 60);\n  millis/=60;\n  int min=(int)(millis % 60);\n  millis/=60;\n  int hours=(int)millis;\n  String time;\n  DecimalFormat format=(DecimalFormat)NumberFormat.getInstance(Locale.US);\n  format.applyPattern(\"00\");\n  if (millis > 0) {\n    time=(negative ? \"-\" : \"\") + hours + \":\"+ format.format(min)+ \":\"+ format.format(sec);\n  }\n else {\n    time=(negative ? \"-\" : \"\") + min + \":\"+ format.format(sec);\n  }\n  return time;\n}"}
{"ids": "42444", "raw_code": "@Inline public static void toUTF8(String s,ByteBuffer b){\n  int result_index=0;\n  for (int i=0, n=s.length(); i < n; ++i) {\n    char c=s.charAt(i);\n    if (((!WRITE_PSEUDO_UTF8) || (c >= 0x0001)) && (c <= 0x007F)) {\n      b.put((byte)c);\n    }\n else     if (c > 0x07FF) {\n      b.put((byte)(0xe0 | (byte)(c >> 12)));\n      b.put((byte)(0x80 | ((c & 0xfc0) >> 6)));\n      b.put((byte)(0x80 | (c & 0x3f)));\n    }\n else {\n      b.put((byte)(0xc0 | (byte)(c >> 6)));\n      b.put((byte)(0x80 | (c & 0x3f)));\n    }\n  }\n}"}
{"ids": "47104", "raw_code": "public CopyOnWriteArrayList(E[] toCopyIn){\n  setArray(Arrays.copyOf(toCopyIn,toCopyIn.length,Object[].class));\n}"}
{"ids": "7754", "raw_code": "@Override public StringBuffer format(long number,StringBuffer toAppendTo,FieldPosition pos){\n  return toAppendTo.append(getDirectionCode(number));\n}"}
{"ids": "36768", "raw_code": "public static void main(String[] args) throws Exception {\n  digestCommandLineArguments(args);\n  boolean inHeadlessMode=GraphicsEnvironment.isHeadless();\n  boolean inConvertMode=isinConvertMode();\n  SCXMLGraphEditor editor=startEditor(inConvertMode || inHeadlessMode);\n  if (isinConvertMode()) {\n    SCXMLEditorActions.convertNoGUI(editor);\n  }\n else   if (!inHeadlessMode) {\n    String input=getPresetInput();\n    if (!StringUtils.isEmptyString(input)) {\n      OpenAction open=new OpenAction(new File(input));\n      open.actionPerformed(new ActionEvent(editor,0,\"\"));\n    }\n  }\n}"}
{"ids": "87024", "raw_code": "protected void enableRetransmissionTimer(int tickCount){\n  if (isInviteTransaction() && (this instanceof SIPClientTransaction)) {\n    retransmissionTimerTicksLeft=tickCount;\n  }\n else {\n    retransmissionTimerTicksLeft=Math.min(tickCount,getTimerT2());\n  }\n  retransmissionTimerLastTickCount=retransmissionTimerTicksLeft;\n}"}
{"ids": "35923", "raw_code": "private void scheduleMsgForAllConsumers(JetstreamMessage msg){\n  if (LOGGER.isDebugEnabled())   LOGGER.debug(\"Spraying message - \" + msg.toString());\n  EventConsumerInfo info=null;\n  ArrayList<LinkedList<Selection>> weightedList=m_eventTopicRegistry.get(msg.getTopic());\n  if (weightedList != null) {\n    Iterator<LinkedList<Selection>> weightedItr=weightedList.iterator();\n    while (weightedItr.hasNext()) {\n      LinkedList<Selection> consumerList=weightedItr.next();\n      Iterator<Selection> itr=consumerList.iterator();\n      while (itr.hasNext()) {\n        info=(EventConsumerInfo)itr.next();\n        if (info == null)         continue;\n        dispatch(info,msg);\n      }\n    }\n  }\n else {\n    if (m_advisoryListener != null) {\n      postResendAdvisory(msg);\n      m_noConsumerAdvisories.increment();\n    }\n else {\n      m_totalMsgsDropped.increment();\n      m_dropsForNoConsumer.increment();\n    }\n  }\n}"}
{"ids": "35000", "raw_code": "@Override public Void visitDeclared(AnnotatedDeclaredType declaredType,Void aVoid){\n  if (pause) {\n    return null;\n  }\n  parents.push(declaredType);\n  super.visitDeclared(declaredType,aVoid);\n  parents.pop();\n  return null;\n}"}
{"ids": "24641", "raw_code": "public Class create(){\n  setUseCache(false);\n  return (Class)super.create(this);\n}"}
{"ids": "65229", "raw_code": "public static <T>List<T> tuple(T... objects){\n  return Collections.unmodifiableList(list(objects));\n}"}
{"ids": "14984", "raw_code": "protected static Set stringArrayToSet(String[] strs){\n  int count=strs.length;\n  Set set=((count > 0) ? new HashSet(count) : new HashSet());\n  for (int i=0; i < count; i++) {\n    set.add(strs[i]);\n  }\n  return set;\n}"}
{"ids": "54624", "raw_code": "public boolean authenticate(final OddCallback<AuthToken> callback){\nsynchronized (syncLock) {\n    if (isExpired()) {\n      return false;\n    }\n    if (!authenticating) {\n      authenticating=true;\n      timer=new Timer();\n      TimerTask task=getPollTask(callback);\n      timer.schedule(task,new Date(),interval);\n      TimerTask expiredTask=getExpiredTask(callback);\n      timer.schedule(expiredTask,expirationDate);\n    }\n    return true;\n  }\n}"}
{"ids": "7054", "raw_code": "public static void cancelNotificationsForRoomId(String accountId,String roomId){\n  Log.d(LOG_TAG,\"cancelNotificationsForRoomId \" + accountId + \" - \"+ roomId);\n  if (null != mActiveEventStreamService) {\n    mActiveEventStreamService.cancelNotifications(accountId,roomId);\n  }\n}"}
{"ids": "75832", "raw_code": "public static Optional<PlayerProfile> lookup(UUID id){\n  if (Bukkit.getPlayer(id) != null) {\n    return Optional.of(fromPlayer(Bukkit.getPlayer(id)));\n  }\n  return lookupProperties(id);\n}"}
{"ids": "50257", "raw_code": "static double svd_dmin(double a,double b){\n  return Math.min(a,b);\n}"}
{"ids": "21783", "raw_code": "private StoragePort selectStoragePort(List<StoragePort> spList){\n  Collections.shuffle(spList);\n  return spList.get(0);\n}"}
{"ids": "80753", "raw_code": "private void assimilateContext(NestingException nestingException){\n  Enumeration<ExceptionContext> enumExeptions=nestingException.getExceptionContexts();\n  if (enumExeptions.hasMoreElements()) {\n    while (enumExeptions.hasMoreElements()) {\n      addExceptionContext(enumExeptions.nextElement());\n    }\n    nestingException.clearContexts();\n  }\n}"}
{"ids": "14661", "raw_code": "public boolean equals(Object o){\n  if (o instanceof AMIdentitySubject) {\n    AMIdentitySubject subject=(AMIdentitySubject)o;\n    return (subjectValues.equals(subject.subjectValues));\n  }\n  return (false);\n}"}
{"ids": "13746", "raw_code": "public void updateKeyinfo(String realm,String entityName,Map<String,Set<String>> extValues,Map<String,Set<String>> stdValues,boolean isIDP) throws AMConsoleException {\n  String keysize=getResult(stdValues,TF_KEY_NAME);\n  String algorithm=getResult(stdValues,TF_ALGORITHM);\n  Set<String> signingCertAliases;\n  Set<String> encryptionCertAliases;\n  if (isIDP) {\n    encryptionCertAliases=extValues.get(IDP_ENCRYPT_CERT_ALIAS);\n    signingCertAliases=extValues.get(IDP_SIGN_CERT_ALIAS);\n  }\n else {\n    encryptionCertAliases=extValues.get(SP_ENCRYPT_CERT_ALIAS);\n    signingCertAliases=extValues.get(SP_SIGN_CERT_ALIAS);\n  }\n  int keysi=!StringUtils.isEmpty(keysize) ? Integer.parseInt(keysize) : 128;\n  String alg=StringUtils.isEmpty(algorithm) ? XMLCipher.AES_128 : algorithm;\n  try {\n    SAML2MetaSecurityUtils.updateProviderKeyInfo(realm,entityName,signingCertAliases,true,isIDP,alg,keysi);\n    SAML2MetaSecurityUtils.updateProviderKeyInfo(realm,entityName,encryptionCertAliases,false,isIDP,alg,keysi);\n  }\n catch (  SAML2MetaException e) {\n    debug.warning(\"SAMLv2ModelImpl.updateKeyinfo:\",e);\n    throw new AMConsoleException(getErrorString(e));\n  }\n}"}
{"ids": "75038", "raw_code": "public void updateSlider(final double p,final boolean n){\n  checkWidget();\n  double percentage=p;\n  if (step != null) {\n    percentage=Math.round(percentage / step) * step;\n  }\n  this.notify=n;\n  if (percentage < 0) {\n    percentage=0;\n  }\n else   if (percentage > 1) {\n    percentage=1;\n  }\n  final int usefulWidth=getClientArea().width - thumbWidth;\n  final int width=(int)Math.round(usefulWidth * percentage);\n  moveThumbHorizontally(width);\n  previousPosition=percentage;\n  this.notify=true;\n}"}
{"ids": "67214", "raw_code": "@Override public boolean contains(String identifier){\n  return whitelist.contains(identifier);\n}"}
{"ids": "46490", "raw_code": "public static final Action[] augmentList(Action[] list1,Action[] list2){\n  Hashtable<String,Action> h=new Hashtable<String,Action>();\n  for (  Action a : list1) {\n    String value=(String)a.getValue(Action.NAME);\n    h.put((value != null ? value : \"\"),a);\n  }\n  for (  Action a : list2) {\n    String value=(String)a.getValue(Action.NAME);\n    h.put((value != null ? value : \"\"),a);\n  }\n  Action[] actions=new Action[h.size()];\n  int index=0;\n  for (Enumeration e=h.elements(); e.hasMoreElements(); ) {\n    actions[index++]=(Action)e.nextElement();\n  }\n  return actions;\n}"}
{"ids": "63271", "raw_code": "public MVMap<K,V> openVersion(long version){\n  if (readOnly) {\n    throw DataUtils.newUnsupportedOperationException(\"This map is read-only; need to call \" + \"the method on the writable map\");\n  }\n  DataUtils.checkArgument(version >= createVersion,\"Unknown version {0}; this map was created in version is {1}\",version,createVersion);\n  Page newest=null;\n  Page r=root;\n  if (version >= r.getVersion() && (version == writeVersion || r.getVersion() >= 0 || version <= createVersion || store.getFileStore() == null)) {\n    newest=r;\n  }\n else {\n    Page last=oldRoots.peekFirst();\n    if (last == null || version < last.getVersion()) {\n      return store.openMapVersion(version,id,this);\n    }\n    Iterator<Page> it=oldRoots.iterator();\n    while (it.hasNext()) {\n      Page p=it.next();\n      if (p.getVersion() > version) {\n        break;\n      }\n      last=p;\n    }\n    newest=last;\n  }\n  MVMap<K,V> m=openReadOnly();\n  m.root=newest;\n  return m;\n}"}
{"ids": "18343", "raw_code": "public DTMDefaultBase(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean newNameTable){\n  int numblocks;\n  if (blocksize <= 64) {\n    numblocks=DEFAULT_NUMBLOCKS_SMALL;\n    m_dtmIdent=new SuballocatedIntVector(4,1);\n  }\n else {\n    numblocks=DEFAULT_NUMBLOCKS;\n    m_dtmIdent=new SuballocatedIntVector(32);\n  }\n  m_exptype=new SuballocatedIntVector(blocksize,numblocks);\n  m_firstch=new SuballocatedIntVector(blocksize,numblocks);\n  m_nextsib=new SuballocatedIntVector(blocksize,numblocks);\n  m_parent=new SuballocatedIntVector(blocksize,numblocks);\n  if (usePrevsib)   m_prevsib=new SuballocatedIntVector(blocksize,numblocks);\n  m_mgr=mgr;\n  if (mgr instanceof DTMManagerDefault)   m_mgrDefault=(DTMManagerDefault)mgr;\n  m_documentBaseURI=(null != source) ? source.getSystemId() : null;\n  m_dtmIdent.setElementAt(dtmIdentity,0);\n  m_wsfilter=whiteSpaceFilter;\n  m_xstrf=xstringfactory;\n  m_indexing=doIndexing;\n  if (doIndexing) {\n    m_expandedNameTable=new ExpandedNameTable();\n  }\n else {\n    m_expandedNameTable=m_mgrDefault.getExpandedNameTable(this);\n  }\n  if (null != whiteSpaceFilter) {\n    m_shouldStripWhitespaceStack=new BoolStack();\n    pushShouldStripWhitespace(false);\n  }\n}"}
{"ids": "61066", "raw_code": "private boolean lessThanOrEqual(byte[] a,byte[] b){\n  int len=Math.min(a.length,b.length);\n  for (int i=0; i != len; ++i) {\n    if (a[i] != b[i]) {\n      return (a[i] & 0xff) < (b[i] & 0xff);\n    }\n  }\n  return len == a.length;\n}"}
{"ids": "67987", "raw_code": "protected void clear(){\n  parts_.clear();\n}"}
{"ids": "19658", "raw_code": "public static boolean isNumber(String s){\n  try {\n    Integer.valueOf(s);\n    return true;\n  }\n catch (  Exception e) {\n    return false;\n  }\n}"}
{"ids": "47984", "raw_code": "private boolean isOuterGState(){\n  return mGStateStack.size() == 1;\n}"}
{"ids": "23479", "raw_code": "void add(SuperCardToast superCardToast){\n  mList.add(superCardToast);\n}"}
{"ids": "137", "raw_code": "static public Tasker create(){\n  return new Tasker();\n}"}
{"ids": "53961", "raw_code": "public static String concernStackString(BlockInfo blockInfo){\n  String result=\"\";\n  for (  String stackEntry : blockInfo.threadStackEntries) {\n    if (Character.isLetter(stackEntry.charAt(0))) {\n      String[] lines=stackEntry.split(BlockInfo.SEPARATOR);\n      for (      String line : lines) {\n        String keyStackString=concernStackString(line);\n        if (keyStackString != null) {\n          return keyStackString;\n        }\n      }\n      return classSimpleName(lines[0]);\n    }\n  }\n  return result;\n}"}
{"ids": "75900", "raw_code": "static String gravityToString(@EdgeGravity int gravity){\n  if ((gravity & Gravity.LEFT) == Gravity.LEFT) {\n    return \"LEFT\";\n  }\n  if ((gravity & Gravity.RIGHT) == Gravity.RIGHT) {\n    return \"RIGHT\";\n  }\n  if ((gravity & Gravity.BOTTOM) == Gravity.BOTTOM) {\n    return \"BOTTOM\";\n  }\n  return Integer.toHexString(gravity);\n}"}
{"ids": "81876", "raw_code": "public void removeAllRenderers(){\n  mRenderers.clear();\n}"}
{"ids": "69931", "raw_code": "public static int writeSpeexHeader(byte[] buf,int offset,int sampleRate,int mode,int channels,boolean vbr,int nframes,int packetlength){\n  writeString(buf,offset,\"Speex   \");\n  writeString(buf,offset + 8,\"speex-1.2rc\");\n  System.arraycopy(new byte[11],0,buf,offset + 17,11);\n  writeInt(buf,offset + 28,1);\n  writeInt(buf,offset + 32,80);\n  writeInt(buf,offset + 36,sampleRate);\n  writeInt(buf,offset + 40,mode);\n  writeInt(buf,offset + 44,4);\n  writeInt(buf,offset + 48,channels);\n  writeInt(buf,offset + 52,-1);\n  writeInt(buf,offset + 56,160 << mode);\n  writeInt(buf,offset + 60,vbr ? 1 : 0);\n  writeInt(buf,offset + 64,nframes);\n  writeInt(buf,offset + 68,0);\n  writeInt(buf,offset + 72,packetlength);\n  writeInt(buf,offset + 76,0);\n  return 80;\n}"}
{"ids": "31696", "raw_code": "private static File igniteHadoopConfig(String igniteHome){\n  Path path=Paths.get(igniteHome,\"modules\",\"hadoop\",\"config\");\n  if (!Files.exists(path))   path=Paths.get(igniteHome,\"config\",\"hadoop\");\n  if (Files.exists(path))   return path.toFile();\n else   return new File(igniteHome,\"docs\");\n}"}
{"ids": "52899", "raw_code": "protected ApproximationLine conservativeKnnDistanceApproximation(int k_max){\n  int k_0=k_max;\n  double y_1=Double.NEGATIVE_INFINITY;\n  double y_kmax=Double.NEGATIVE_INFINITY;\n  for (int i=0; i < getNumEntries(); i++) {\n    MkCoPEntry entry=getEntry(i);\n    ApproximationLine approx=entry.getConservativeKnnDistanceApproximation();\n    k_0=Math.min(approx.getK_0(),k_0);\n  }\n  for (int i=0; i < getNumEntries(); i++) {\n    MkCoPEntry entry=getEntry(i);\n    ApproximationLine approx=entry.getConservativeKnnDistanceApproximation();\n    double entry_y_1=approx.getValueAt(k_0);\n    double entry_y_kmax=approx.getValueAt(k_max);\n    if (!Double.isInfinite(entry_y_1)) {\n      y_1=Math.max(entry_y_1,y_1);\n    }\n    if (!Double.isInfinite(entry_y_kmax)) {\n      y_kmax=Math.max(entry_y_kmax,y_kmax);\n    }\n  }\n  double m=(y_kmax - y_1) / (Math.log(k_max) - Math.log(k_0));\n  double t=y_1 - m * Math.log(k_0);\n  return new ApproximationLine(k_0,m,t);\n}"}
{"ids": "4944", "raw_code": "public final boolean shares_layer(BrdItem p_other){\n  int max_first_layer=Math.max(first_layer(),p_other.first_layer());\n  int min_last_layer=Math.min(last_layer(),p_other.last_layer());\n  return max_first_layer <= min_last_layer;\n}"}
{"ids": "25402", "raw_code": "public CoapClient(URI uri){\n  this(uri.toString());\n}"}
{"ids": "72318", "raw_code": "private void zero() throws JSONException {\n  if (probe) {\n    log(0);\n  }\n  write(0,1);\n}"}
{"ids": "24448", "raw_code": "public static boolean beenDone(TimeUnit timeUnit,long amount,String tag,CountChecker numberOfTimes){\n  long timeInMillis=timeUnit.toMillis(amount);\n  return beenDone(timeInMillis,tag,numberOfTimes);\n}"}
{"ids": "60644", "raw_code": "public static String normalize(String oid){\n  return oid.startsWith(\"OID.\") ? oid.substring(4) : oid;\n}"}
{"ids": "23017", "raw_code": "public RtcpPacket parseRtcpPacket(Packet packet){\n  RtcpCompoundPacket compoundPacket=new RtcpCompoundPacket(packet);\n  Vector<RtcpPacket> subpackets=new Vector<RtcpPacket>();\n  DataInputStream in=new DataInputStream(new ByteArrayInputStream(compoundPacket.data,compoundPacket.offset,compoundPacket.length));\n  try {\n    rtcpSession.updateavgrtcpsize(compoundPacket.length);\n    int length=0;\n    for (int offset=0; offset < compoundPacket.length; offset+=length) {\n      int firstbyte=in.readUnsignedByte();\n      if ((firstbyte & 0xc0) != 128) {\n        return null;\n      }\n      int type=in.readUnsignedByte();\n      length=in.readUnsignedShort();\n      length=length + 1 << 2;\n      int padlen=0;\n      if (offset + length > compoundPacket.length) {\n        return null;\n      }\n      if (offset + length == compoundPacket.length) {\n        if ((firstbyte & 0x20) != 0) {\n          padlen=compoundPacket.data[compoundPacket.offset + compoundPacket.length - 1] & 0xff;\n          if (padlen == 0) {\n            return null;\n          }\n        }\n      }\n else       if ((firstbyte & 0x20) != 0) {\n        return null;\n      }\n      int inlength=length - padlen;\n      firstbyte&=0x1f;\n      RtcpPacket subpacket;\nswitch (type) {\ncase RtcpPacket.RTCP_SR:\n        stats.numSrPkts++;\n      if (inlength != 28 + 24 * firstbyte) {\n        stats.numMalformedRtcpPkts++;\n        return null;\n      }\n    RtcpSenderReportPacket srp=new RtcpSenderReportPacket(compoundPacket);\n  subpacket=srp;\nsrp.ssrc=in.readInt();\nsrp.ntptimestampmsw=(long)in.readInt() & 0xffffffffL;\nsrp.ntptimestamplsw=(long)in.readInt() & 0xffffffffL;\nsrp.rtptimestamp=(long)in.readInt() & 0xffffffffL;\nsrp.packetcount=(long)in.readInt() & 0xffffffffL;\nsrp.octetcount=(long)in.readInt() & 0xffffffffL;\nsrp.reports=new RtcpReport[firstbyte];\nRtpSource sourceSR=rtcpSession.getMySource();\nif (sourceSR != null) {\nsourceSR.receivedSenderReport(srp);\n}\nfor (int i=0; i < srp.reports.length; i++) {\nRtcpReport report=new RtcpReport();\nsrp.reports[i]=report;\nreport.ssrc=in.readInt();\nlong val=in.readInt();\nval&=0xffffffffL;\nreport.fractionlost=(int)(val >> 24);\nreport.packetslost=(int)(val & 0xffffffL);\nreport.lastseq=(long)in.readInt() & 0xffffffffL;\nreport.jitter=in.readInt();\nreport.lsr=(long)in.readInt() & 0xffffffffL;\nreport.dlsr=(long)in.readInt() & 0xffffffffL;\n}\nnotifyRtcpListeners(new RtcpSenderReportEvent(srp));\nbreak;\ncase RtcpPacket.RTCP_RR:\nif (inlength != 8 + 24 * firstbyte) {\nstats.numMalformedRtcpPkts++;\nreturn null;\n}\nRtcpReceiverReportPacket rrp=new RtcpReceiverReportPacket(compoundPacket);\nsubpacket=rrp;\nrrp.ssrc=in.readInt();\nrrp.reports=new RtcpReport[firstbyte];\nfor (int i=0; i < rrp.reports.length; i++) {\nRtcpReport report=new RtcpReport();\nrrp.reports[i]=report;\nreport.ssrc=in.readInt();\nlong val=in.readInt();\nval&=0xffffffffL;\nreport.fractionlost=(int)(val >> 24);\nreport.packetslost=(int)(val & 0xffffffL);\nreport.lastseq=(long)in.readInt() & 0xffffffffL;\nreport.jitter=in.readInt();\nreport.lsr=(long)in.readInt() & 0xffffffffL;\nreport.dlsr=(long)in.readInt() & 0xffffffffL;\n}\nnotifyRtcpListeners(new RtcpReceiverReportEvent(rrp));\nbreak;\ncase RtcpPacket.RTCP_SDES:\nRtcpSdesPacket sdesp=new RtcpSdesPacket(compoundPacket);\nsubpacket=sdesp;\nsdesp.sdes=new RtcpSdesBlock[firstbyte];\nint sdesoff=4;\nfor (int i=0; i < sdesp.sdes.length; i++) {\nRtcpSdesBlock chunk=new RtcpSdesBlock();\nsdesp.sdes[i]=chunk;\nchunk.ssrc=in.readInt();\nsdesoff+=5;\nVector<RtcpSdesItem> items=new Vector<RtcpSdesItem>();\nboolean gotcname=false;\nint j;\nwhile ((j=in.readUnsignedByte()) != 0) {\nif (j < 1 || j > 8) {\nstats.numMalformedRtcpPkts++;\nreturn null;\n}\nif (j == 1) {\ngotcname=true;\n}\nRtcpSdesItem item=new RtcpSdesItem();\nitems.addElement(item);\nitem.type=j;\nint sdeslen=in.readUnsignedByte();\nitem.data=new byte[sdeslen];\nin.readFully(item.data);\nsdesoff+=2 + sdeslen;\n}\nif (!gotcname) {\nstats.numMalformedRtcpPkts++;\nreturn null;\n}\nchunk.items=new RtcpSdesItem[items.size()];\nitems.copyInto(chunk.items);\nif ((sdesoff & 3) != 0) {\nif (in.skip(4 - (sdesoff & 3)) != 4 - (sdesoff & 3)) {\nreturn null;\n}\nsdesoff=sdesoff + 3 & -4;\n}\n}\nif (inlength != sdesoff) {\nstats.numMalformedRtcpPkts++;\nreturn null;\n}\nnotifyRtcpListeners(new RtcpSdesEvent(sdesp));\nbreak;\ncase RtcpPacket.RTCP_BYE:\nRtcpByePacket byep=new RtcpByePacket(compoundPacket);\nsubpacket=byep;\nbyep.ssrc=new int[firstbyte];\nfor (int i=0; i < byep.ssrc.length; i++) {\nbyep.ssrc[i]=in.readInt();\n}\nint reasonlen;\nif (inlength > 4 + 4 * firstbyte) {\nreasonlen=in.readUnsignedByte();\nbyep.reason=new byte[reasonlen];\nreasonlen++;\n}\n else {\nreasonlen=0;\nbyep.reason=new byte[0];\n}\nreasonlen=reasonlen + 3 & -4;\nif (inlength != 4 + 4 * firstbyte + reasonlen) {\nstats.numMalformedRtcpPkts++;\nreturn null;\n}\nin.readFully(byep.reason);\nint skipBye=reasonlen - byep.reason.length;\nif (in.skip(skipBye) != skipBye) {\nreturn null;\n}\nnotifyRtcpListeners(new RtcpByeEvent(byep));\nbreak;\ncase RtcpPacket.RTCP_APP:\nif (inlength < 12) {\nreturn null;\n}\nRtcpAppPacket appp=new RtcpAppPacket(compoundPacket);\nsubpacket=appp;\nappp.ssrc=in.readInt();\nappp.name=in.readInt();\nappp.subtype=firstbyte;\nappp.data=new byte[inlength - 12];\nin.readFully(appp.data);\nint skipApp=inlength - 12 - appp.data.length;\nif (in.skip(skipApp) != skipApp) {\nreturn null;\n}\nnotifyRtcpListeners(new RtcpApplicationEvent(appp));\nbreak;\ndefault :\nstats.numUnknownTypes++;\nreturn null;\n}\nsubpacket.offset=offset;\nsubpacket.length=length;\nsubpackets.addElement(subpacket);\nif (in.skipBytes(padlen) != padlen) {\nreturn null;\n}\n}\n}\n catch (Exception e) {\nreturn null;\n}\ncompoundPacket.packets=new RtcpPacket[subpackets.size()];\nsubpackets.copyInto(compoundPacket.packets);\nreturn compoundPacket;\n}"}
{"ids": "81146", "raw_code": "public void reset(){\n  initialize();\n}"}
{"ids": "978", "raw_code": "private static void addListenersForReal(final Service service,final Set<Listener> existingListeners,final Listener listener,final Executor executor){\n  if (!existingListeners.contains(listener)) {\n    existingListeners.add(listener);\n    service.addListener(listener,executor);\n  }\n}"}
{"ids": "42743", "raw_code": "public void prepend(CharSequence s){\n  text.insert(0,s);\n}"}
{"ids": "14184", "raw_code": "public static void sendResponseWithStatus(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String idpMetaAlias,String idpEntityID,String realm,AuthnRequest authnReq,String relayState,String spEntityID,String firstlevelStatusCodeValue,String secondlevelStatusCodeValue) throws SAML2Exception {\n  Response res=SAML2Utils.getErrorResponse(authnReq,firstlevelStatusCodeValue,secondlevelStatusCodeValue,null,idpEntityID);\n  StringBuffer returnedBinding=new StringBuffer();\n  String acsURL=IDPSSOUtil.getACSurl(spEntityID,realm,authnReq,request,returnedBinding);\n  String acsBinding=returnedBinding.toString();\n  sendResponse(request,response,out,acsBinding,spEntityID,idpEntityID,idpMetaAlias,realm,relayState,acsURL,res,null);\n}"}
{"ids": "13208", "raw_code": "protected void validateDTDattribute(QName element,String attValue,XMLAttributeDecl attributeDecl) throws XNIException {\nswitch (attributeDecl.simpleType.type) {\ncase XMLSimpleType.TYPE_ENTITY:\n{\n      boolean isAlistAttribute=attributeDecl.simpleType.list;\n      try {\n        if (isAlistAttribute) {\n          fValENTITIES.validate(attValue,fValidationState);\n        }\n else {\n          fValENTITY.validate(attValue,fValidationState);\n        }\n      }\n catch (      InvalidDatatypeValueException ex) {\n        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);\n      }\n      break;\n    }\ncase XMLSimpleType.TYPE_NOTATION:\ncase XMLSimpleType.TYPE_ENUMERATION:\n{\n    boolean found=false;\n    String[] enumVals=attributeDecl.simpleType.enumeration;\n    if (enumVals == null) {\n      found=false;\n    }\n else     for (int i=0; i < enumVals.length; i++) {\n      if (attValue == enumVals[i] || attValue.equals(enumVals[i])) {\n        found=true;\n        break;\n      }\n    }\n    if (!found) {\n      StringBuffer enumValueString=new StringBuffer();\n      if (enumVals != null)       for (int i=0; i < enumVals.length; i++) {\n        enumValueString.append(enumVals[i] + \" \");\n      }\n      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"MSG_ATTRIBUTE_VALUE_NOT_IN_LIST\",new Object[]{attributeDecl.name.rawname,attValue,enumValueString},XMLErrorReporter.SEVERITY_ERROR);\n    }\n    break;\n  }\ncase XMLSimpleType.TYPE_ID:\n{\n  try {\n    fValID.validate(attValue,fValidationState);\n  }\n catch (  InvalidDatatypeValueException ex) {\n    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);\n  }\n  break;\n}\ncase XMLSimpleType.TYPE_IDREF:\n{\nboolean isAlistAttribute=attributeDecl.simpleType.list;\ntry {\n  if (isAlistAttribute) {\n    fValIDRefs.validate(attValue,fValidationState);\n  }\n else {\n    fValIDRef.validate(attValue,fValidationState);\n  }\n}\n catch (InvalidDatatypeValueException ex) {\n  if (isAlistAttribute) {\n    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"IDREFSInvalid\",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR);\n  }\n else {\n    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);\n  }\n}\nbreak;\n}\ncase XMLSimpleType.TYPE_NMTOKEN:\n{\nboolean isAlistAttribute=attributeDecl.simpleType.list;\ntry {\nif (isAlistAttribute) {\n  fValNMTOKENS.validate(attValue,fValidationState);\n}\n else {\n  fValNMTOKEN.validate(attValue,fValidationState);\n}\n}\n catch (InvalidDatatypeValueException ex) {\nif (isAlistAttribute) {\n  fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"NMTOKENSInvalid\",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR);\n}\n else {\n  fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"NMTOKENInvalid\",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR);\n}\n}\nbreak;\n}\n}\n}"}
{"ids": "63502", "raw_code": "public static double mean2(Connection conn,double... values){\n  conn.getClass();\n  double sum=0;\n  for (  double x : values) {\n    sum+=x;\n  }\n  return sum / values.length;\n}"}
{"ids": "29515", "raw_code": "public static String domToString(Document domDoc){\n  return domToString(domDoc.getDocumentElement(),false);\n}"}
{"ids": "40690", "raw_code": "public static <T>T assertAndCast(Class<? extends T> clazz,Object o){\n  assertNotNull(clazz);\n  assertNotNull(o);\n  assertTrue(clazz.isInstance(o));\n  return clazz.cast(o);\n}"}
{"ids": "9046", "raw_code": "private String createMismatchMessage(String mismatch,MigrationVersion version,Object applied,Object resolved){\n  return String.format(\"Migration \" + mismatch + \" mismatch for migration %s\\n\"+ \"-> Applied to database : %s\\n\"+ \"-> Resolved locally    : %s\",version,applied,resolved);\n}"}
{"ids": "69381", "raw_code": "public static _Fields findByThriftId(int fieldId){\nswitch (fieldId) {\ncase 1:\n    return IDS;\ndefault :\n  return null;\n}\n}"}
{"ids": "20763", "raw_code": "public int compareTo(Object o){\n  Split split=(Split)o;\n  BitSet P=getFirstPart();\n  BitSet Q=split.getFirstPart();\n  int a=P.nextSetBit(0);\n  int b=Q.nextSetBit(0);\n  while (a > -1 && b > -1) {\n    if (a < b)     return -1;\n else     if (a > b)     return 1;\n    a=P.nextSetBit(a + 1);\n    b=Q.nextSetBit(b + 1);\n  }\n  if (a < b)   return -1;\n else   if (a > b)   return 1;\n  P=getSecondPart();\n  Q=split.getSecondPart();\n  a=P.nextSetBit(0);\n  b=Q.nextSetBit(0);\n  while (a > -1 && b > -1) {\n    if (a < b)     return -1;\n else     if (a > b)     return 1;\n    a=P.nextSetBit(a + 1);\n    b=Q.nextSetBit(b + 1);\n  }\n  if (a < b)   return -1;\n else   if (a > b)   return 1;\n else   return 0;\n}"}
{"ids": "64793", "raw_code": "public boolean isMatchingTalkgroup(LTRNetMessage message){\n  String talkgroup=message.getTalkgroupID();\n  if (talkgroup != null && getToID() != null && talkgroup.contentEquals(getToID())) {\n    return true;\n  }\n  return isMatchingTalkgroup(message.getTalkgroupID());\n}"}
{"ids": "12254", "raw_code": "public void put(byte[] source,int index,int length){\n  if (mBuffer.capacity() < (mLength + length)) {\n    expandBuffer(mLength + length + ADDITIONAL_BUFFER_SIZE);\n  }\n  mBuffer.put(source,index,length);\n  mLength+=length;\n}"}
{"ids": "65933", "raw_code": "public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {\n  return m_view.modelToView(pos,a,b);\n}"}
{"ids": "48591", "raw_code": "private static int applyPrecision(int decExp,char[] digits,int nDigits,int prec){\n  if (prec >= nDigits || prec < 0) {\n    return decExp;\n  }\n  if (prec == 0) {\n    if (digits[0] >= '5') {\n      digits[0]='1';\n      Arrays.fill(digits,1,nDigits,'0');\n      return decExp + 1;\n    }\n else {\n      Arrays.fill(digits,0,nDigits,'0');\n      return decExp;\n    }\n  }\n  int q=digits[prec];\n  if (q >= '5') {\n    int i=prec;\n    q=digits[--i];\n    if (q == '9') {\n      while (q == '9' && i > 0) {\n        q=digits[--i];\n      }\n      if (q == '9') {\n        digits[0]='1';\n        Arrays.fill(digits,1,nDigits,'0');\n        return decExp + 1;\n      }\n    }\n    digits[i]=(char)(q + 1);\n    Arrays.fill(digits,i + 1,nDigits,'0');\n  }\n else {\n    Arrays.fill(digits,prec,nDigits,'0');\n  }\n  return decExp;\n}"}
{"ids": "76112", "raw_code": "protected void drawCubic(Canvas c,LineDataSet dataSet,List<Entry> entries){\n  Transformer trans=mChart.getTransformer(dataSet.getAxisDependency());\n  Entry entryFrom=dataSet.getEntryForXIndex(mMinX);\n  Entry entryTo=dataSet.getEntryForXIndex(mMaxX);\n  int diff=(entryFrom == entryTo) ? 1 : 0;\n  int minx=Math.max(dataSet.getEntryPosition(entryFrom) - diff,0);\n  int maxx=Math.min(Math.max(minx + 2,dataSet.getEntryPosition(entryTo) + 1),entries.size());\n  float phaseX=mAnimator.getPhaseX();\n  float phaseY=mAnimator.getPhaseY();\n  float intensity=dataSet.getCubicIntensity();\n  cubicPath.reset();\n  int size=(int)Math.ceil((maxx - minx) * phaseX + minx);\n  if (size - minx >= 2) {\n    float prevDx=0f;\n    float prevDy=0f;\n    float curDx=0f;\n    float curDy=0f;\n    Entry prevPrev=entries.get(minx);\n    Entry prev=entries.get(minx);\n    Entry cur=entries.get(minx);\n    Entry next=entries.get(minx + 1);\n    cubicPath.moveTo(cur.getXIndex(),cur.getVal() * phaseY);\n    prevDx=(cur.getXIndex() - prev.getXIndex()) * intensity;\n    prevDy=(cur.getVal() - prev.getVal()) * intensity;\n    curDx=(next.getXIndex() - cur.getXIndex()) * intensity;\n    curDy=(next.getVal() - cur.getVal()) * intensity;\n    cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);\n    for (int j=minx + 1, count=Math.min(size,entries.size() - 1); j < count; j++) {\n      prevPrev=entries.get(j == 1 ? 0 : j - 2);\n      prev=entries.get(j - 1);\n      cur=entries.get(j);\n      next=entries.get(j + 1);\n      prevDx=(cur.getXIndex() - prevPrev.getXIndex()) * intensity;\n      prevDy=(cur.getVal() - prevPrev.getVal()) * intensity;\n      curDx=(next.getXIndex() - prev.getXIndex()) * intensity;\n      curDy=(next.getVal() - prev.getVal()) * intensity;\n      cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);\n    }\n    if (size > entries.size() - 1) {\n      prevPrev=entries.get((entries.size() >= 3) ? entries.size() - 3 : entries.size() - 2);\n      prev=entries.get(entries.size() - 2);\n      cur=entries.get(entries.size() - 1);\n      next=cur;\n      prevDx=(cur.getXIndex() - prevPrev.getXIndex()) * intensity;\n      prevDy=(cur.getVal() - prevPrev.getVal()) * intensity;\n      curDx=(next.getXIndex() - prev.getXIndex()) * intensity;\n      curDy=(next.getVal() - prev.getVal()) * intensity;\n      cubicPath.cubicTo(prev.getXIndex() + prevDx,(prev.getVal() + prevDy) * phaseY,cur.getXIndex() - curDx,(cur.getVal() - curDy) * phaseY,cur.getXIndex(),cur.getVal() * phaseY);\n    }\n  }\n  if (dataSet.isDrawFilledEnabled()) {\n    cubicFillPath.reset();\n    cubicFillPath.addPath(cubicPath);\n    drawCubicFill(mBitmapCanvas,dataSet,cubicFillPath,trans,entryFrom.getXIndex(),entryFrom.getXIndex() + size);\n  }\n  mRenderPaint.setColor(dataSet.getColor());\n  mRenderPaint.setStyle(Paint.Style.STROKE);\n  trans.pathValueToPixel(cubicPath);\n  mBitmapCanvas.drawPath(cubicPath,mRenderPaint);\n  mRenderPaint.setPathEffect(null);\n}"}
{"ids": "83934", "raw_code": "public void delete(@NonNull Key key){\n  final ReentrantReadWriteLock.WriteLock lock=guard.writeLock();\n  lock.lock();\n  try {\n    if (!readKeys.remove(key))     throw new IllegalArgumentException(\"key does not exist\");\n    Files.delete(key.getFile());\n  }\n catch (  IOException ex) {\n    LOG.log(Level.WARNING,\"unable to remove file \" + key.getFile(),ex);\n  }\n finally {\n    lock.unlock();\n  }\n}"}
{"ids": "16129", "raw_code": "public boolean onTouchEvent(MotionEvent event){\n  try {\n    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;\n    if (DEBUG)     Log.i(\"MultiTouch\",\"Got here 1 - \" + multiTouchSupported + \" \"+ mMode+ \" \"+ handleSingleTouchEvents+ \" \"+ pointerCount);\n    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;\n    if (DEBUG)     Log.i(\"MultiTouch\",\"Got here 2\");\n    int action=event.getAction();\n    int histLen=event.getHistorySize() / pointerCount;\n    for (int histIdx=0; histIdx <= histLen; histIdx++) {\n      boolean processingHist=histIdx < histLen;\n      if (!multiTouchSupported || pointerCount == 1) {\n        if (DEBUG)         Log.i(\"MultiTouch\",\"Got here 3\");\n        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();\n        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();\n        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();\n      }\n else {\n        if (DEBUG)         Log.i(\"MultiTouch\",\"Got here 4\");\n        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);\n        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(\"MultiTouch\",\"Got more pointers than MAX_TOUCH_POINTS\");\n        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {\n          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);\n          pointerIds[ptrIdx]=ptrId;\n          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));\n          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));\n          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));\n        }\n      }\n      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());\n    }\n    return true;\n  }\n catch (  Exception e) {\n    Log.e(\"MultiTouchController\",\"onTouchEvent() failed\",e);\n    return false;\n  }\n}"}
{"ids": "64465", "raw_code": "public static void storeLocation(Context context,LatLng location){\n  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);\n  SharedPreferences.Editor editor=prefs.edit();\n  editor.putLong(PREFERENCES_LAT,Double.doubleToRawLongBits(location.latitude));\n  editor.putLong(PREFERENCES_LNG,Double.doubleToRawLongBits(location.longitude));\n  editor.apply();\n}"}
{"ids": "12841", "raw_code": "public void writeToFile(String fileName) throws IOException {\n  PrintWriter outfile=new PrintWriter(new FileOutputStream(fileName));\n  outfile.println(\"// Output from Histogram class\");\n  outfile.println(\"// metaData: \");\n  outfile.println(\"bins \" + m_nbins);\n  outfile.println(\"min \" + m_min);\n  outfile.println(\"max \" + m_max);\n  outfile.println(\"totalEntries \" + m_entries);\n  outfile.println(\"underflow \" + m_underflow);\n  outfile.println(\"overflow \" + m_overflow);\n  outfile.println(\"// binData:\");\n  for (int i=0; i < m_nbins; i++) {\n    outfile.println(i + \" \" + m_binCenters[i]+ \" \"+ m_hist[i]);\n  }\n  outfile.println(\"// end.\");\n  outfile.close();\n}"}
{"ids": "3227", "raw_code": "public void outdent(){\n  final int length=indent.length();\n  if (length == 0) {\n    throw new IllegalArgumentException(\" Outdent() without matching Indent().\");\n  }\n  indent.delete(length - 2,length);\n}"}
{"ids": "61721", "raw_code": "public static String extractFromDataMatrix(String code){\n  if (code.length() < 16) {\n    return null;\n  }\n  if (code.startsWith(\"01\")) {\n    return code.substring(2,16);\n  }\n  return null;\n}"}
{"ids": "46267", "raw_code": "public void paintCurrentValue(Graphics g,Rectangle bounds,boolean hasFocus){\n  XPStyle xp=XPStyle.getXP();\n  if (xp != null) {\n    bounds.x+=2;\n    bounds.y+=2;\n    bounds.width-=4;\n    bounds.height-=4;\n  }\n else {\n    bounds.x+=1;\n    bounds.y+=1;\n    bounds.width-=2;\n    bounds.height-=2;\n  }\n  if (!comboBox.isEditable() && xp != null && xp.isSkinDefined(comboBox,Part.CP_READONLY)) {\n    ListCellRenderer renderer=comboBox.getRenderer();\n    Component c;\n    if (hasFocus && !isPopupVisible(comboBox)) {\n      c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,true,false);\n    }\n else {\n      c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,false,false);\n    }\n    c.setFont(comboBox.getFont());\n    if (comboBox.isEnabled()) {\n      c.setForeground(comboBox.getForeground());\n      c.setBackground(comboBox.getBackground());\n    }\n else {\n      c.setForeground(DefaultLookup.getColor(comboBox,this,\"ComboBox.disabledForeground\",null));\n      c.setBackground(DefaultLookup.getColor(comboBox,this,\"ComboBox.disabledBackground\",null));\n    }\n    boolean shouldValidate=false;\n    if (c instanceof JPanel) {\n      shouldValidate=true;\n    }\n    currentValuePane.paintComponent(g,c,comboBox,bounds.x,bounds.y,bounds.width,bounds.height,shouldValidate);\n  }\n else {\n    super.paintCurrentValue(g,bounds,hasFocus);\n  }\n}"}
{"ids": "12868", "raw_code": "@Override public AudioInputStream synthesiseOneSection(String festivalUtt,Voice voice) throws IOException {\n  writeRelationFiles(festivalUtt);\n  File audioFile=new File(festivalDir.getPath() + File.separator + \"mary.wav\");\n  String festivalVoiceCmd=\"(voice_\" + voice.getName() + \")\";\n  AudioInputStream sound=festivalSynthesise(audioFile,festivalVoiceCmd);\n  return sound;\n}"}
{"ids": "3741", "raw_code": "public int read(byte[] buffer,int offset,int length) throws IOException {\n  log.finest(\"random-read(0x\" + Long.toHexString(getFilePointer()) + \",\"+ length+ \")\");\n  return _file.read(buffer,offset,length);\n}"}
{"ids": "33004", "raw_code": "public static Pattern createPattern(String[] patterns,boolean isCaseSensitive,boolean isRegexSearch) throws PatternSyntaxException {\n  StringBuffer pattern=new StringBuffer();\n  for (int i=0; i < patterns.length; i++) {\n    if (i > 0) {\n      pattern.append('|');\n    }\n    if (isRegexSearch) {\n      pattern.append(patterns[i]);\n    }\n else {\n      asRegEx(patterns[i],pattern);\n    }\n  }\n  return createPattern(pattern.toString(),isCaseSensitive,true);\n}"}
{"ids": "11749", "raw_code": "public void addArc(float latPoint,float lonPoint,int w,int h,float s,float e,LinkProperties properties) throws IOException {\n  LinkArc.write(latPoint,lonPoint,0,0,w,h,s,e,properties,link.dos);\n}"}
{"ids": "32336", "raw_code": "public void onUndeploy(ClassLoader ldr){\n  for (  Class<?> cls : descByCls.keySet()) {\n    if (ldr.equals(cls.getClassLoader()))     descByCls.remove(cls);\n  }\n  U.clearClassCache(ldr);\n}"}
{"ids": "5246", "raw_code": "@Override public boolean containsClass(String className) throws IOException {\n  boolean containsClass=false;\n  String resourceName=\"WEB-INF/classes/\" + className.replace('.','/') + \".class\";\n  if (getResource(resourceName) != null) {\n    containsClass=true;\n  }\n  for (  String resource : getResources(\"WEB-INF/lib/\")) {\n    JarArchive jar=new DefaultJarArchive(getResource(resource));\n    if (jar.containsClass(className)) {\n      containsClass=true;\n    }\n  }\n  return containsClass;\n}"}
{"ids": "63658", "raw_code": "public Tuple[] clearInternal(){\n  Tuple[] t=new Tuple[getTupleCount()];\n  Iterator iter=tuples();\n  for (int i=0; iter.hasNext(); ++i) {\n    t[i]=(Tuple)iter.next();\n  }\n  m_tuples.clear();\n  return t;\n}"}
{"ids": "38839", "raw_code": "public synchronized void removeTextListener(TextListener cl){\n  m_textListeners.remove(cl);\n}"}
{"ids": "60721", "raw_code": "private void ensureCapacity(int desiredLongCount){\n  if (desiredLongCount <= bits.length) {\n    return;\n  }\n  int newLength=Math.max(desiredLongCount,bits.length * 2);\n  long[] newBits=new long[newLength];\n  System.arraycopy(bits,0,newBits,0,longCount);\n  this.bits=newBits;\n}"}
{"ids": "53532", "raw_code": "public boolean matches(String query,String text){\n  return text.contains(query);\n}"}
{"ids": "71229", "raw_code": "private void findCollapsesFromExistingVertices(List collapsedVertexIndexes){\n  for (int i=0; i < edge.size() - 2; i++) {\n    Coordinate p0=edge.getCoordinate(i);\n    Coordinate p1=edge.getCoordinate(i + 1);\n    Coordinate p2=edge.getCoordinate(i + 2);\n    if (p0.equals2D(p2)) {\n      collapsedVertexIndexes.add(new Integer(i + 1));\n    }\n  }\n}"}
{"ids": "11494", "raw_code": "public void close() throws IOException {\n  if (Debug.debugging(\"binaryfile\")) {\n    Debug.output(\"FileInputReader.close()\");\n  }\n  try {\n    if (inputFile != null)     inputFile.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  inputFile=null;\n}"}
{"ids": "21708", "raw_code": "public static boolean checkPoolPropertiesChanged(Set<String> existingValue,Set<String> newValue){\n  boolean propertyChanged=false;\n  if (existingValue == null && (newValue != null && !newValue.isEmpty())) {\n    propertyChanged=true;\n  }\n else   if (newValue == null && (existingValue != null && !existingValue.isEmpty())) {\n    propertyChanged=true;\n  }\n else   if (existingValue != null && newValue != null) {\n    if (existingValue.size() != newValue.size() || !(existingValue.containsAll(newValue))) {\n      propertyChanged=true;\n    }\n  }\n  return propertyChanged;\n}"}
{"ids": "8166", "raw_code": "public static OutputStream leftShift(OutputStream self,InputStream in) throws IOException {\n  byte[] buf=new byte[1024];\n  while (true) {\n    int count=in.read(buf,0,buf.length);\n    if (count == -1)     break;\n    if (count == 0) {\n      Thread.yield();\n      continue;\n    }\n    self.write(buf,0,count);\n  }\n  self.flush();\n  return self;\n}"}
{"ids": "75160", "raw_code": "public static boolean gitLocalConfig(final AtomicReference<String> path) throws IOException {\n  return gitLocalConfig(Environment.getCurrentDirectory(),path);\n}"}
{"ids": "43782", "raw_code": "public void verify(){\n  super.verify();\n  assertEquals(\"Sets should be equal\",confirmed,collection);\n  assertEquals(\"Sets should have equal hashCodes\",confirmed.hashCode(),collection.hashCode());\n  Collection set=makeConfirmedCollection();\n  Iterator iterator=collection.iterator();\n  while (iterator.hasNext()) {\n    assertTrue(\"Set.iterator should only return unique elements\",set.add(iterator.next()));\n  }\n}"}
{"ids": "6909", "raw_code": "public static CGPoint ccpRotateByAngle(CGPoint v,CGPoint pivot,float angle){\n  CGPoint r=ccpSub(v,pivot);\n  float t=r.x;\n  float cosa=(float)Math.cos(angle);\n  float sina=(float)Math.sin(angle);\n  r.x=t * cosa - r.y * sina;\n  r.y=t * sina + r.y * cosa;\n  r=ccpAdd(r,pivot);\n  return r;\n}"}
{"ids": "55451", "raw_code": "private void openContextMenu(MouseEvent e){\n  if (e.isPopupTrigger()) {\n    Collection<String> streams=new HashSet<>();\n    int[] selectedRows=table.getSelectedRows();\n    for (    int selectedRow : selectedRows) {\n      Follower selected=followers.get(selectedRow);\n      streams.add(StringUtil.toLowerCase(selected.name));\n    }\n    if (!streams.isEmpty()) {\n      StreamsContextMenu m=new StreamsContextMenu(streams,contextMenuListener);\n      m.show(table,e.getX(),e.getY());\n    }\n  }\n}"}
{"ids": "21627", "raw_code": "public static Workflow.Method expandVolumesMethod(URI storage,URI pool,URI volume,Long size){\n  return new Workflow.Method(\"expandVolume\",storage,pool,volume,size);\n}"}
{"ids": "63489", "raw_code": "void closeSilently(Socket socket){\n  try {\n    socket.close();\n  }\n catch (  Exception e) {\n  }\n}"}
{"ids": "51374", "raw_code": "public static boolean equals(byte[] array1,byte[] array2){\n  if (array1 == array2)   return true;\n  if (array1 == null || array2 == null || array1.length != array2.length)   return false;\n  for (int i=0; i < array1.length; i++) {\n    if (array1[i] != array2[i])     return false;\n  }\n  return true;\n}"}
{"ids": "5303", "raw_code": "private static String createIdFromJndiLocationIfNotNull(String jndiLocation){\n  String id=null;\n  if (jndiLocation != null) {\n    id=createIdFromJndiLocation(jndiLocation);\n  }\n  return id;\n}"}
{"ids": "84417", "raw_code": "protected Set<Node> closure(DependencyKind... depKinds){\n  boolean progress=true;\n  Set<Node> closure=new HashSet<Node>();\n  closure.add(this);\n  while (progress) {\n    progress=false;\n    for (    Node n1 : new HashSet<Node>(closure)) {\n      progress=closure.addAll(n1.getDependencies(depKinds));\n    }\n  }\n  return closure;\n}"}
{"ids": "33862", "raw_code": "public Vector(Collection c){\n  elementCount=c.size();\n  elementData=new Object[(int)Math.min((elementCount * 110L) / 100,Integer.MAX_VALUE)];\n  c.toArray(elementData);\n}"}
{"ids": "57453", "raw_code": "public static <A extends Annotation>A createAnnotation(Class<? extends Annotation> annotationType,AnnotationMember[] elements){\n  AnnotationFactory factory=new AnnotationFactory(annotationType,elements);\n  return (A)Proxy.newProxyInstance(annotationType.getClassLoader(),new Class[]{annotationType},factory);\n}"}
{"ids": "43296", "raw_code": "public LinkingMorphemes(String... aMorphemes){\n  morphemes=new ArrayList<String>();\n  for (  String string : aMorphemes) {\n    morphemes.add(string);\n  }\n}"}
{"ids": "9529", "raw_code": "@Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){\n  if (timeSeries.size() <= 0) {\n    functionValueMap.add(this,Double.NaN);\n    return;\n  }\n  timeSeries.sort();\n  double firstValue=timeSeries.getValue(0);\n  double lastValue=timeSeries.getValue(timeSeries.size() - 1);\n  functionValueMap.add(this,Math.abs(firstValue - lastValue));\n}"}
{"ids": "15626", "raw_code": "public static URL[] findResourceBases(String baseResource,ClassLoader loader){\n  ArrayList<URL> list=new ArrayList<URL>();\n  try {\n    Enumeration<URL> urls=loader.getResources(baseResource);\n    while (urls.hasMoreElements()) {\n      URL url=urls.nextElement();\n      list.add(findResourceBase(url,baseResource));\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n  return list.toArray(new URL[list.size()]);\n}"}
{"ids": "48823", "raw_code": "public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){\n  if (x < this.minX) {\n    throw new RasterFormatException(\"x lies outside raster\");\n  }\n  if (y < this.minY) {\n    throw new RasterFormatException(\"y lies outside raster\");\n  }\n  if ((x + width < x) || (x + width > this.width + this.minX)) {\n    throw new RasterFormatException(\"(x + width) is outside raster\");\n  }\n  if ((y + height < y) || (y + height > this.height + this.minY)) {\n    throw new RasterFormatException(\"(y + height) is outside raster\");\n  }\n  SampleModel sm;\n  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);\n else   sm=sampleModel;\n  int deltaX=x0 - x;\n  int deltaY=y0 - y;\n  return new ByteBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);\n}"}
{"ids": "86357", "raw_code": "protected void moveUpItem(){\n  if (selectionTable.getSelectionCount() == 0) {\n    return;\n  }\n  for (  final int index : selectionTable.getSelectionIndices()) {\n    if (index == 0) {\n      selectionTable.forceFocus();\n      return;\n    }\n  }\n  final int[] newSelection=new int[selectionTable.getSelectionCount()];\n  int newSelectionIndex=0;\n  for (  final TableItem tableItem : selectionTable.getSelection()) {\n    final int position=selection.indexOf(tableItem.getData());\n    swap(position,position - 1);\n    newSelection[newSelectionIndex++]=position - 1;\n  }\n  redrawTables();\n  selectionTable.select(newSelection);\n  selectionTable.forceFocus();\n}"}
{"ids": "39468", "raw_code": "protected void maybeFireBoundsInvalidated(Rectangle invalidatedArea){\n  Drawing d=getDrawing();\n  Rectangle2D.Double canvasBounds=new Rectangle2D.Double(0,0,0,0);\n  if (d.get(CANVAS_WIDTH) != null) {\n    canvasBounds.width+=d.get(CANVAS_WIDTH);\n  }\n  if (d.get(CANVAS_HEIGHT) != null) {\n    canvasBounds.height+=d.get(CANVAS_HEIGHT);\n  }\n  if (!canvasBounds.contains(invalidatedArea)) {\n    fireBoundsInvalidated(invalidatedArea);\n  }\n}"}
{"ids": "17126", "raw_code": "public DatagramPacket responseReceive() throws IOException {\n  byte[] buf=new byte[1024];\n  DatagramPacket dp=new DatagramPacket(buf,buf.length);\n  datagramSocket.receive(dp);\n  return dp;\n}"}
{"ids": "78", "raw_code": "public void suspend(String id){\n  TraceState ts=traceState.get();\n  if (log.isLoggable(Level.FINEST)) {\n    log.finest(\"Suspend trace state = \" + ts + \" id = \"+ id);\n  }\n  if (ts != null) {\n    setExpire(ts);\n    try {\n      suspendedStateLock.lock();\n      if (suspendedState.containsKey(id) && log.isLoggable(Level.FINEST)) {\n        log.finest(\"WARNING: Overwriting previous suspended trace state = \" + suspendedState.get(id) + \" id = \"+ id);\n      }\n      suspendedState.put(id,ts);\n      traceState.remove();\n    }\n  finally {\n      suspendedStateLock.unlock();\n    }\n  }\n}"}
{"ids": "23963", "raw_code": "public static int hashCode(final Object obj){\n  return (obj == null ? 0 : obj.hashCode());\n}"}
{"ids": "80080", "raw_code": "public static int maxLevel(){\n  return LEVELS - 1;\n}"}
{"ids": "82270", "raw_code": "public void propertyChange(PropertyChangeEvent evt){\n  repaint();\n}"}
{"ids": "35927", "raw_code": "public static boolean removeBeanOrFolder(String path){\n  return removePath(path.split(PATH_SEPARATOR),s_directory,0) > 0;\n}"}
{"ids": "52996", "raw_code": "private void updateSelection(Mode mode,Projection2D proj,SVGPoint p1,SVGPoint p2){\n  DBIDSelection selContext=context.getSelection();\n  HashSetModifiableDBIDs selection;\n  if (selContext == null || mode == Mode.REPLACE) {\n    selection=DBIDUtil.newHashSet();\n  }\n else {\n    selection=DBIDUtil.newHashSet(selContext.getSelectedIds());\n  }\n  for (DBIDIter iditer=rel.iterDBIDs(); iditer.valid(); iditer.advance()) {\n    double[] vec=proj.fastProjectDataToRenderSpace(rel.get(iditer));\n    if (vec[0] >= Math.min(p1.getX(),p2.getX()) && vec[0] <= Math.max(p1.getX(),p2.getX()) && vec[1] >= Math.min(p1.getY(),p2.getY()) && vec[1] <= Math.max(p1.getY(),p2.getY())) {\n      if (mode == Mode.INVERT) {\n        if (!selection.contains(iditer)) {\n          selection.add(iditer);\n        }\n else {\n          selection.remove(iditer);\n        }\n      }\n else {\n        selection.add(iditer);\n      }\n    }\n  }\n  context.setSelection(new DBIDSelection(selection));\n}"}
{"ids": "355", "raw_code": "public EclipseIniLauncher(File installationRoot) throws FileNotFoundException, IOException {\n  FileMisc.assertMacApp(installationRoot);\n  Objects.requireNonNull(installationRoot);\n  eclipseIni=EclipseIni.parseFrom(new File(installationRoot,FileMisc.macContentsEclipse() + \"eclipse.ini\"));\n}"}
{"ids": "13777", "raw_code": "public boolean canAddMember(String realmName,String idType,String containerIDType) throws AMConsoleException {\n  boolean can=false;\n  try {\n    IdType type=IdUtils.getType(idType);\n    Set canAdd=type.canAddMembers();\n    IdType ctype=IdUtils.getType(containerIDType);\n    can=canAdd.contains(ctype);\n  }\n catch (  IdRepoException e) {\n    debug.warning(\"EntitiesModelImpl.canAddMember\",e);\n    throw new AMConsoleException(getErrorString(e));\n  }\n  return can;\n}"}
{"ids": "61455", "raw_code": "private static Node locateAttrParent(Element elem,Node attr){\n  Node parent=null;\n  Attr check=elem.getAttributeNode(attr.getNodeName());\n  if (check == attr)   parent=elem;\n  if (null == parent) {\n    for (Node node=elem.getFirstChild(); null != node; node=node.getNextSibling()) {\n      if (Node.ELEMENT_NODE == node.getNodeType()) {\n        parent=locateAttrParent((Element)node,attr);\n        if (null != parent)         break;\n      }\n    }\n  }\n  return parent;\n}"}
{"ids": "82808", "raw_code": "private void defineInternalFrames(UIDefaults d){\n  d.put(\"InternalFrameTitlePane.contentMargins\",new InsetsUIResource(0,0,0,0));\n  d.put(\"InternalFrameTitlePane.maxFrameIconSize\",new DimensionUIResource(18,18));\n  d.put(\"InternalFrame.contentMargins\",new InsetsUIResource(1,6,6,6));\n  d.put(\"InternalFrame:InternalFrameTitlePane.contentMargins\",new InsetsUIResource(3,0,3,0));\n  d.put(\"InternalFrame:InternalFrameTitlePane.titleAlignment\",\"CENTER\");\n  d.put(\"InternalFrame:InternalFrameTitlePane:\\\"InternalFrameTitlePane.menuButton\\\".contentMargins\",new InsetsUIResource(0,0,0,0));\n  d.put(\"InternalFrame:InternalFrameTitlePane:\\\"InternalFrameTitlePane.iconifyButton\\\".contentMargins\",new InsetsUIResource(9,9,9,9));\n  d.put(\"InternalFrame:InternalFrameTitlePane:\\\"InternalFrameTitlePane.maximizeButton\\\".contentMargins\",new InsetsUIResource(9,9,9,9));\n  d.put(\"InternalFrame:InternalFrameTitlePane:\\\"InternalFrameTitlePane.closeButton\\\".contentMargins\",new InsetsUIResource(9,9,9,9));\n  if (PlatformUtils.isMac()) {\n    d.put(\"frameBaseActive\",new Color(0xa8a8a8));\n  }\n else {\n    d.put(\"frameBaseActive\",new Color(0x96adc4));\n  }\n  d.put(\"frameBaseInactive\",new Color(0xe0e0e0));\n  d.put(\"frameBorderBase\",new Color(0x545454));\n  d.put(\"frameInnerHighlightInactive\",new Color(0x55ffffff,true));\n  d.put(\"frameInnerHighlightActive\",new Color(0x55ffffff,true));\n  d.put(\"seaGlassTitlePaneButtonEnabledBorder\",new Color(0x99000000,true));\n  d.put(\"seaGlassTitlePaneButtonEnabledCorner\",new Color(0x26000000,true));\n  d.put(\"seaGlassTitlePaneButtonEnabledInterior\",new Color(0x99ffffff,true));\n  d.put(\"seaGlassTitlePaneButtonHoverBorder\",new Color(0xe5101010,true));\n  d.put(\"seaGlassTitlePaneButtonHoverCorner\",new Color(0x267a7a7a,true));\n  d.put(\"seaGlassTitlePaneButtonHoverInterior\",new Color(0xffffff));\n  d.put(\"seaGlassTitlePaneButtonPressedBorder\",new Color(0xe50e0e0e,true));\n  d.put(\"seaGlassTitlePaneButtonPressedCorner\",new Color(0x876e6e6e,true));\n  d.put(\"seaGlassTitlePaneButtonPressedInterior\",new Color(0xe6e6e6));\n  String p=\"InternalFrame\";\n  String c=PAINTER_PREFIX + \"FrameAndRootPainter\";\n  d.put(p + \".titleFont\",new DerivedFont(\"defaultFont\",1.0f,true,null));\n  d.put(p + \".States\",\"Enabled,WindowFocused\");\n  d.put(p + \":InternalFrameTitlePane.WindowFocused\",new TitlePaneWindowFocusedState());\n  d.put(p + \".WindowFocused\",new InternalFrameWindowFocusedState());\n  d.put(p + \"[Enabled].backgroundPainter\",new LazyPainter(c,FrameAndRootPainter.Which.BACKGROUND_ENABLED));\n  d.put(p + \"[Enabled+WindowFocused].backgroundPainter\",new LazyPainter(c,FrameAndRootPainter.Which.BACKGROUND_ENABLED_WINDOWFOCUSED));\n  p=\"InternalFrameTitlePane\";\n  d.put(p + \".buttonSpacing\",0);\n  p=\"InternalFrame:InternalFrameTitlePane\";\n  d.put(p + \"[Enabled].textForeground\",d.get(\"seaGlassDisabledText\"));\n  d.put(p + \"[WindowFocused].textForeground\",Color.BLACK);\n}"}
{"ids": "23273", "raw_code": "public void readSecurityHeader(SipResponse response) throws PayloadException {\n  WWWAuthenticateHeader wwwHeader=(WWWAuthenticateHeader)response.getHeader(WWWAuthenticateHeader.NAME);\n  AuthenticationInfoHeader infoHeader=(AuthenticationInfoHeader)response.getHeader(AuthenticationInfoHeader.NAME);\n  if (wwwHeader != null) {\n    mDigest.setRealm(wwwHeader.getRealm());\n    mDigest.setOpaque(wwwHeader.getOpaque());\n    mDigest.setQop(wwwHeader.getQop());\n    mDigest.setNextnonce(wwwHeader.getNonce());\n  }\n else   if (infoHeader != null) {\n    if (infoHeader.getNextNonce() != null) {\n      mDigest.setNextnonce(infoHeader.getNextNonce());\n    }\n  }\n}"}
{"ids": "73478", "raw_code": "private void layoutPanel(){\n  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));\n  setLayout(new BorderLayout());\n  add(new LabelledItem(\"Distribution: \",cbDistribution),BorderLayout.NORTH);\n  add(cardPanel,BorderLayout.CENTER);\n  cbItemListener.itemStateChanged(new ItemEvent(cbDistribution,ItemEvent.SELECTED,cardPanel,ItemEvent.ITEM_STATE_CHANGED));\n  repaint();\n  revalidate();\n}"}
{"ids": "53313", "raw_code": "@Override public int compareTo(DoubleDoublePair other){\n  int fdiff=Double.compare(this.first,other.first);\n  if (fdiff != 0) {\n    return fdiff;\n  }\n  return Double.compare(this.second,other.second);\n}"}
{"ids": "8025", "raw_code": "private static boolean fileExists(String filePath){\n  File file=new File(filePath);\n  return file.exists();\n}"}
{"ids": "50947", "raw_code": "public static String classVersionToJdk(int version){\n  return \"1.\" + Integer.toString(version - 44);\n}"}
{"ids": "80199", "raw_code": "private BitSet createBitSet(final String binaryString){\n  final BitSet bset=new BitSet(binaryString.length());\n  boolean bitTrue=false;\n  for (int i=0; i < binaryString.length(); i++) {\n    if (binaryString.charAt(i) == '1') {\n      bitTrue=true;\n    }\n else {\n      bitTrue=false;\n    }\n    bset.set(i,bitTrue);\n  }\n  return bset;\n}"}
{"ids": "70049", "raw_code": "public void flush(){\n  buffer.force();\n}"}
{"ids": "74653", "raw_code": "public void remove(Product product){\n  try {\n    solrDao.remove(product.getId());\n  }\n catch (  IOException|SolrServerException ex) {\n    LOGGER.error(\"Cannot remove product \" + product.getIdentifier() + \"from index\",ex);\n  }\n}"}
{"ids": "81585", "raw_code": "public void startBackgroundFetchService(){\n  LocalNotification n=new LocalNotification();\n  n.setId(BACKGROUND_FETCH_NOTIFICATION_ID);\n  cancelLocalNotification(BACKGROUND_FETCH_NOTIFICATION_ID);\n  scheduleLocalNotification(n,System.currentTimeMillis() + getPreferredBackgroundFetchInterval() * 1000,0);\n}"}
{"ids": "26165", "raw_code": "protected void showModels(boolean show,EpoxyModel<?>... models){\n  showModels(Arrays.asList(models),show);\n}"}
{"ids": "48117", "raw_code": "static void check(PublicKey key,X509CRL crl) throws CertPathValidatorException {\n  X509CRLImpl x509CRLImpl=null;\n  try {\n    x509CRLImpl=X509CRLImpl.toImpl(crl);\n  }\n catch (  CRLException ce) {\n    throw new CertPathValidatorException(ce);\n  }\n  AlgorithmId algorithmId=x509CRLImpl.getSigAlgId();\n  check(key,algorithmId);\n}"}
{"ids": "4927", "raw_code": "public void reset(){\n  node_list.clear();\n}"}
{"ids": "63037", "raw_code": "public String nameList(String dir) throws IOException {\n  passive();\n  send(\"NLST \" + dir);\n  readCode(150);\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  IOUtils.copyAndClose(inData,out);\n  readCode(226);\n  byte[] data=out.toByteArray();\n  return new String(data);\n}"}
{"ids": "22572", "raw_code": "public VNXeCommandResult addLunsToLunGroup(String lunGroupId,List<String> luns){\n  LunGroupModifyParam param=new LunGroupModifyParam();\n  List<LunAddParam> lunAdds=new ArrayList<LunAddParam>();\n  for (  String lunId : luns) {\n    VNXeBase lun=new VNXeBase(lunId);\n    LunAddParam lunAdd=new LunAddParam();\n    lunAdd.setLun(lun);\n    lunAdds.add(lunAdd);\n  }\n  param.setLunAdd(lunAdds);\n  LunGroupRequests req=new LunGroupRequests(_khClient);\n  return req.modifyLunGroupSync(lunGroupId,param);\n}"}
{"ids": "7234", "raw_code": "public static ConstantExpression constant(Object value,Class constantType){\n  return new ConstantExpression(value,constantType.getName());\n}"}
{"ids": "55849", "raw_code": "public static final String toFEN(Position pos){\n  StringBuilder ret=new StringBuilder();\n  for (int r=7; r >= 0; r--) {\n    int numEmpty=0;\n    for (int c=0; c < 8; c++) {\n      int p=pos.getPiece(Position.getSquare(c,r));\n      if (p == Piece.EMPTY) {\n        numEmpty++;\n      }\n else {\n        if (numEmpty > 0) {\n          ret.append(numEmpty);\n          numEmpty=0;\n        }\nswitch (p) {\ncase Piece.WKING:\n          ret.append('K');\n        break;\ncase Piece.WQUEEN:\n      ret.append('Q');\n    break;\ncase Piece.WROOK:\n  ret.append('R');\nbreak;\ncase Piece.WBISHOP:\nret.append('B');\nbreak;\ncase Piece.WKNIGHT:\nret.append('N');\nbreak;\ncase Piece.WPAWN:\nret.append('P');\nbreak;\ncase Piece.BKING:\nret.append('k');\nbreak;\ncase Piece.BQUEEN:\nret.append('q');\nbreak;\ncase Piece.BROOK:\nret.append('r');\nbreak;\ncase Piece.BBISHOP:\nret.append('b');\nbreak;\ncase Piece.BKNIGHT:\nret.append('n');\nbreak;\ncase Piece.BPAWN:\nret.append('p');\nbreak;\ndefault :\nthrow new RuntimeException();\n}\n}\n}\nif (numEmpty > 0) {\nret.append(numEmpty);\n}\nif (r > 0) {\nret.append('/');\n}\n}\nret.append(pos.whiteMove ? \" w \" : \" b \");\nboolean anyCastle=false;\nif (pos.h1Castle()) {\nret.append('K');\nanyCastle=true;\n}\nif (pos.a1Castle()) {\nret.append('Q');\nanyCastle=true;\n}\nif (pos.h8Castle()) {\nret.append('k');\nanyCastle=true;\n}\nif (pos.a8Castle()) {\nret.append('q');\nanyCastle=true;\n}\nif (!anyCastle) {\nret.append('-');\n}\n{\nret.append(' ');\nif (pos.getEpSquare() >= 0) {\nint x=Position.getX(pos.getEpSquare());\nint y=Position.getY(pos.getEpSquare());\nret.append((char)(x + 'a'));\nret.append((char)(y + '1'));\n}\n else {\nret.append('-');\n}\n}\nret.append(' ');\nret.append(pos.halfMoveClock);\nret.append(' ');\nret.append(pos.fullMoveCounter);\nreturn ret.toString();\n}"}
{"ids": "34353", "raw_code": "public void endElement(String uri,String localName,String qName) throws SAXException {\n  if (!(htmlMode && (uri.equals(\"http://www.w3.org/1999/xhtml\") || uri.equals(\"\")) && (qName.equals(\"area\") || qName.equals(\"base\") || qName.equals(\"basefont\")|| qName.equals(\"br\")|| qName.equals(\"col\")|| qName.equals(\"frame\")|| qName.equals(\"hr\")|| qName.equals(\"img\")|| qName.equals(\"input\")|| qName.equals(\"isindex\")|| qName.equals(\"link\")|| qName.equals(\"meta\")|| qName.equals(\"param\")))) {\n    write(\"</\");\n    writeName(uri,localName,qName,true);\n    write('>');\n  }\n  if (elementLevel == 1) {\n    write('\\n');\n  }\n  cdataElement=false;\n  super.endElement(uri,localName,qName);\n  nsSupport.popContext();\n  elementLevel--;\n}"}
{"ids": "49664", "raw_code": "static void findAllVisibleChilds(final ViewGroup viewGroup,final List<View> ordoredChilds){\n  for (int childViewIndex=0; childViewIndex < viewGroup.getChildCount(); childViewIndex++) {\n    final View childView=viewGroup.getChildAt(childViewIndex);\n    if (childView instanceof ViewGroup) {\n      findAllVisibleChilds((ViewGroup)childView,ordoredChilds);\n      continue;\n    }\n    if (childView.getVisibility() == View.VISIBLE) {\n      ordoredChilds.add(childView);\n    }\n  }\n}"}
{"ids": "3931", "raw_code": "public boolean logModified(Logger log){\n  if (isModified()) {\n    log.info(_className + \" digest is modified\");\n    return true;\n  }\n else   return false;\n}"}
{"ids": "18139", "raw_code": "public final void push(Node value){\n  int ff=m_firstFree;\n  if ((ff + 1) >= m_mapSize) {\n    if (null == m_map) {\n      m_map=new Node[m_blocksize];\n      m_mapSize=m_blocksize;\n    }\n else {\n      m_mapSize+=m_blocksize;\n      Node newMap[]=new Node[m_mapSize];\n      System.arraycopy(m_map,0,newMap,0,ff + 1);\n      m_map=newMap;\n    }\n  }\n  m_map[ff]=value;\n  ff++;\n  m_firstFree=ff;\n}"}
{"ids": "35606", "raw_code": "public String serialize(Object obj) throws ApiException {\n  try {\n    if (obj != null)     return mapper.writeValueAsString(obj);\n else     return null;\n  }\n catch (  Exception e) {\n    throw new ApiException(400,e.getMessage());\n  }\n}"}
{"ids": "73336", "raw_code": "private void initializeSparseSlider(){\n  sparsitySlider.setMajorTickSpacing(10);\n  sparsitySlider.setMinorTickSpacing(2);\n  sparsitySlider.setPaintTicks(true);\n  Hashtable<Integer,JLabel> labelTable2=new Hashtable<Integer,JLabel>();\n  labelTable2.put(new Integer(0),new JLabel(\"0%\"));\n  labelTable2.put(new Integer(100),new JLabel(\"100%\"));\n  sparsitySlider.setLabelTable(labelTable2);\n  sparsitySlider.setPaintLabels(true);\n}"}
{"ids": "7788", "raw_code": "@Override protected void autoAdjustRange(){\n  Plot plot=getPlot();\n  if (plot == null) {\n    return;\n  }\n  if (plot instanceof ValueAxisPlot) {\n    ValueAxisPlot vap=(ValueAxisPlot)plot;\n    Range r=vap.getDataRange(this);\n    if (r == null) {\n      r=getDefaultAutoRange();\n    }\n    double upper=r.getUpperBound();\n    double lower=Math.max(r.getLowerBound(),this.smallestValue);\n    double range=upper - lower;\n    double fixedAutoRange=getFixedAutoRange();\n    if (fixedAutoRange > 0.0) {\n      lower=Math.max(upper - fixedAutoRange,this.smallestValue);\n    }\n else {\n      double minRange=getAutoRangeMinimumSize();\n      if (range < minRange) {\n        double expand=(minRange - range) / 2;\n        upper=upper + expand;\n        lower=lower - expand;\n      }\n      double logUpper=calculateLog(upper);\n      double logLower=calculateLog(lower);\n      double logRange=logUpper - logLower;\n      logUpper=logUpper + getUpperMargin() * logRange;\n      logLower=logLower - getLowerMargin() * logRange;\n      upper=calculateValueNoINF(logUpper);\n      lower=calculateValueNoINF(logLower);\n    }\n    setRange(new Range(lower,upper),false,false);\n  }\n}"}
{"ids": "48557", "raw_code": "public synchronized void add(long value){\n  long res=get() + value;\n  lb.put(0,res);\n}"}
{"ids": "5819", "raw_code": "public void addIVCombination(int attackIV,int defenseIV,int staminaIV){\n  int sumIV=attackIV + defenseIV + staminaIV;\n  int percentPerfect=Math.round(sumIV / 45f * 100);\n  if ((percentPerfect < lowPercent) || (percentPerfect == lowPercent) && (attackIV < lowAttack)) {\n    lowPercent=percentPerfect;\n    lowAttack=attackIV;\n    lowDefense=defenseIV;\n    lowStamina=staminaIV;\n  }\n  if ((percentPerfect > highPercent) || (percentPerfect == highPercent) && (attackIV > highAttack)) {\n    highPercent=percentPerfect;\n    highAttack=attackIV;\n    highDefense=defenseIV;\n    highStamina=staminaIV;\n  }\n  iVCombinations.add(new IVCombination(attackIV,defenseIV,staminaIV));\n}"}
{"ids": "61742", "raw_code": "String[] qualify(String cppName){\n  if (cppName == null || cppName.length() == 0) {\n    return new String[0];\n  }\n  ArrayList<String> names=new ArrayList<String>();\n  String ns=namespace != null ? namespace : \"\";\n  while (ns != null) {\n    String name=ns.length() > 0 ? ns + \"::\" + cppName : cppName;\n    TemplateMap map=templateMap;\n    while (map != null) {\n      if (name.equals(map.getName())) {\n        String args=\"<\", separator=\"\";\n        for (        String s : map.values()) {\n          args+=separator + s;\n          separator=\",\";\n        }\n        names.add(name + args + (args.endsWith(\">\") ? \" >\" : \">\"));\n        break;\n      }\n      map=map.parent;\n    }\n    names.add(name);\n    ns=InfoMap.normalize(ns,false,true);\n    int i=ns.lastIndexOf(\"::\");\n    ns=i >= 0 ? ns.substring(0,i) : ns.length() > 0 ? \"\" : null;\n  }\n  for (  String s : usingList) {\n    String prefix=InfoMap.normalize(cppName,false,true);\n    int i=s.lastIndexOf(\"::\") + 2;\n    ns=s.substring(0,i);\n    String suffix=s.substring(i);\n    if (suffix.length() == 0 || prefix.equals(suffix)) {\n      names.add(ns + cppName);\n    }\n  }\n  return names.toArray(new String[names.size()]);\n}"}
{"ids": "55989", "raw_code": "@Nullable public Bitmap generateIconForUrl(String url,boolean includePrivateRegistries){\n  if (TextUtils.isEmpty(url))   return null;\n  String text=getIconTextForUrl(url,includePrivateRegistries);\n  if (TextUtils.isEmpty(text))   return null;\n  return generateIconForText(text);\n}"}
{"ids": "43323", "raw_code": "public boolean containsPrefix(final CharSequence prefix){\n  return containsPrefix(prefix,0,prefix.length());\n}"}
{"ids": "4962", "raw_code": "public int compareTo(Object p_other){\n  if (p_other == null)   return 1;\n  if (p_other instanceof BrdComponent) {\n    return name.compareToIgnoreCase(((BrdComponent)p_other).name);\n  }\n  return 1;\n}"}
{"ids": "27186", "raw_code": "public void fatal(String message) throws SAXException {\n  SAXParseException spe=new SAXParseException(message,this);\n  if (errorHandler != null) {\n    errorHandler.fatalError(spe);\n  }\n  throw spe;\n}"}
{"ids": "16525", "raw_code": "protected final void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){\n  PropertyChangeSupport aChangeSupport=this.changeSupport;\n  if (aChangeSupport == null) {\n    return;\n  }\n  aChangeSupport.firePropertyChange(propertyName,oldValue,newValue);\n}"}
{"ids": "13600", "raw_code": "private Iterator<BindingSet> joinBindingSetEntry(Map.Entry<String,BindingSet> entry){\n  List<Collection<BindingSet>> matches=new ArrayList<>();\n  if (type == HashJoinType.CONSTANT_JOIN_VAR) {\n    if (bindingJoinVarHash.containsKey(entry.getKey())) {\n      matches.add(bindingJoinVarHash.get(entry.getKey()));\n    }\n  }\n else {\n    List<String> valOrders=getValueOrders(entry.getKey());\n    for (    String s : valOrders) {\n      if (bindingJoinVarHash.containsKey(s)) {\n        matches.add(bindingJoinVarHash.get(s));\n      }\n    }\n  }\n  if (matches.size() == 0) {\n    return Collections.emptyIterator();\n  }\n else {\n    return new BindingSetCollectionsJoinIterator(entry.getValue(),matches);\n  }\n}"}
{"ids": "7375", "raw_code": "public boolean reserve(Object object){\n  reservedIdsLock.lock();\n  if (reservedObjects.contains(object)) {\n    reservedIdsLock.unlock();\n    return false;\n  }\n  reservedObjects.add(object);\n  reservedIdsLock.unlock();\n  return true;\n}"}
{"ids": "74852", "raw_code": "private boolean saveStoredJPEGImage(String file_name,final BufferedImage image,final boolean file_name_is_path){\n  if (!file_name_is_path) {\n    file_name=temp_dir + key + file_name;\n  }\n  final String s=file_name.toLowerCase();\n  if (!s.endsWith(\".jpg\") && !s.endsWith(\".jpeg\")) {\n    file_name+=\".jpg\";\n  }\n  try {\n    DefaultImageHelper.write(image,\"jpg\",file_name);\n    tempFileNames.put(file_name,\"#\");\n  }\n catch (  final Exception e) {\n    LogWriter.writeLog(\"Exception \" + e + \" writing image \"+ image+ \" as \"+ file_name);\n  }\n  return false;\n}"}
{"ids": "43539", "raw_code": "public static ScheduledExecutorService createScheduler(){\n  final ScheduledExecutorService scheduler=Executors.newScheduledThreadPool(1,new DaemonThreadFactory(DEFAULT_SCHEDULER_NAME));\n  SCHEDULERS.add(scheduler);\n  return scheduler;\n}"}
{"ids": "19734", "raw_code": "protected static void fail(){\n  System.exit(1);\n}"}
{"ids": "34815", "raw_code": "private void printArguments(List<Expression> args,Object arg){\n  printer.print(\"(\");\n  if (args != null) {\n    for (Iterator<Expression> i=args.iterator(); i.hasNext(); ) {\n      Expression e=i.next();\n      e.accept(this,arg);\n      if (i.hasNext()) {\n        printer.print(\", \");\n      }\n    }\n  }\n  printer.print(\")\");\n}"}
{"ids": "64815", "raw_code": "private void calculateDelta(double[] b){\n  double numerator=0.0;\n  double denominator=0.0;\n  double sign=1.0;\n  for (int k=0; k < b.length; k++) {\n    if (k < mExtremalIndices.size()) {\n      int extremalIndex=mExtremalIndices.get(k);\n      numerator+=(b[k] * mGrid.getDesiredResponse()[extremalIndex]);\n      denominator+=b[k] * sign / mGrid.getWeight()[extremalIndex];\n      sign=-sign;\n    }\n else {\n      mLog.error(\"Something went wrong -- the length of b exceeds the set of extremal indices\");\n    }\n  }\n  mDelta=numerator / denominator;\n}"}
{"ids": "42884", "raw_code": "private void addFallbackSelector(Properties settings,ProtocolDispatchSelector ps){\n  String proxy=settings.getProperty(\"default\");\n  if (proxy != null) {\n    ps.setFallbackSelector(ProxyUtil.parseProxySettings(proxy));\n  }\n}"}
{"ids": "84215", "raw_code": "private void readData() throws IOException {\n  while (!isClosed) {\n    int code=is.read();\nswitch (code) {\ncase ' ':\ncase '\\t':\ncase '\\n':\ncase '\\r':\n      break;\ncase 'C':\n{\n      int channel=(is.read() << 8) + is.read();\n      inputReady[channel]=true;\n      return;\n    }\ncase 'E':\n{\n    int channel=(is.read() << 8) + is.read();\n    int status=(is.read() << 8) + is.read();\n    inputReady[channel]=true;\n    return;\n  }\ncase -1:\nclose();\nreturn;\ndefault :\nclose();\nreturn;\n}\n}\nreturn;\n}"}
{"ids": "23573", "raw_code": "@Override protected boolean validateConnection(Connection conn){\n  try {\n    return (!conn.isClosed());\n  }\n catch (  SQLException e) {\n    return false;\n  }\n}"}
{"ids": "9554", "raw_code": "public PacProxySelector(String pacUrl){\n  if (pacUrl == null) {\n    throw new NullPointerException();\n  }\n  this.pacUrl=pacUrl;\n}"}
{"ids": "24863", "raw_code": "public void deleteAlertingDefinition(AlertingDefinition alertingDefinition) throws IOException {\n  String id=alertingDefinition.getId();\n  AlertingDefinition local=existingAlertingDefinitions.remove(id);\n  if (local != null) {\n    Files.deleteIfExists(pathResolver.getAlertingDefinitionFilePath(local));\n    eventPublisher.publishEvent(new AbstractAlertingDefinitionEvent.AlertingDefinitionDeletedEvent(this,local));\n  }\n}"}
{"ids": "78811", "raw_code": "public void addFile(File file){\n  fileList.addFirst(file);\n}"}
{"ids": "9969", "raw_code": "private void pullEvent(){\n  final int newScrollValue;\n  final int itemDimension;\n  final float initialMotionValue, lastMotionValue;\nswitch (getPullToRefreshScrollDirection()) {\ncase HORIZONTAL:\n    initialMotionValue=mInitialMotionX;\n  lastMotionValue=mLastMotionX;\nbreak;\ncase VERTICAL:\ndefault :\ninitialMotionValue=mInitialMotionY;\nlastMotionValue=mLastMotionY;\nbreak;\n}\nswitch (mCurrentMode) {\ncase PULL_FROM_END:\nnewScrollValue=Math.round(Math.max(initialMotionValue - lastMotionValue,0) / FRICTION);\nitemDimension=getFooterSize();\nbreak;\ncase PULL_FROM_START:\ndefault :\nnewScrollValue=Math.round(Math.min(initialMotionValue - lastMotionValue,0) / FRICTION);\nitemDimension=getHeaderSize();\nbreak;\n}\nsetHeaderScroll(newScrollValue);\nif (newScrollValue != 0 && !isRefreshing()) {\nfloat scale=Math.abs(newScrollValue) / (float)itemDimension;\nswitch (mCurrentMode) {\ncase PULL_FROM_END:\nmFooterLayout.onPull(scale);\nbreak;\ncase PULL_FROM_START:\ndefault :\nmHeaderLayout.onPull(scale);\nbreak;\n}\nif (mState != State.PULL_TO_REFRESH && itemDimension >= Math.abs(newScrollValue)) {\nsetState(State.PULL_TO_REFRESH);\n}\n else if (mState != State.RELEASE_TO_REFRESH && itemDimension < Math.abs(newScrollValue)) {\nsetState(State.RELEASE_TO_REFRESH);\n}\n}\n}"}
{"ids": "33629", "raw_code": "public boolean requiresConnection(){\n  return true;\n}"}
{"ids": "69775", "raw_code": "public static double tile2lat(int y,int z){\n  double n=Math.PI - (2.0 * Math.PI * y) / Math.pow(2.0,z);\n  return Math.toDegrees(Math.atan(Math.sinh(n)));\n}"}
{"ids": "83893", "raw_code": "@Override public synchronized TimeSeriesCollection updateCollection(){\n  return super.updateCollection();\n}"}
{"ids": "3487", "raw_code": "public char skip(int n){\n  _pos+=n;\n  if (_length <= _pos) {\n    _pos=_string.length();\n    return DONE;\n  }\n else   return _string.charAt(_pos);\n}"}
{"ids": "6614", "raw_code": "private boolean shouldInform(LocalClientInfo info){\n  long now=System.currentTimeMillis();\n  if (now < _nextAllowedTime)   return false;\n  Long allowed=BUG_TIMES.get(info.getParsedBug());\n  return allowed == null || now >= allowed.longValue();\n}"}
{"ids": "8688", "raw_code": "public void post(Runnable runnable){\nsynchronized (mQueue) {\n    mQueue.add(runnable);\n    if (mQueue.size() == 1) {\n      scheduleNextLocked();\n    }\n  }\n}"}
{"ids": "3389", "raw_code": "public static void clear(){\n  _clearCount++;\n  _stateCount=0;\n  _state=\"\";\n  _featureMap.clear();\n}"}
{"ids": "66780", "raw_code": "public static String toStringPretty(JsonObject jsonObj,int level){\n  StringBuffer buf=new StringBuffer();\n  buf.append(\"{\");\n  buf.append(fieldsToStringPretty(jsonObj,level + 1));\n  buf.append(\"}\");\n  return buf.toString();\n}"}
{"ids": "78256", "raw_code": "public boolean isLaunchedFromJar(){\n  return (lstJarFile.size() > 0);\n}"}
{"ids": "24495", "raw_code": "public LogStream print(double d){\n  if (ps != null) {\n    indent();\n    lineBuffer.append(d);\n  }\n  return this;\n}"}
{"ids": "8515", "raw_code": "public static void deleteDirectoryRecursively(Context context,File f,Boolean onlyContent) throws IOException {\n  if (f.isDirectory()) {\n    for (    File c : f.listFiles()) {\n      deleteDirectoryRecursively(context,c,false);\n    }\n  }\n  if (!onlyContent) {\n    if (!f.delete()) {\n      throw new IOException(\"Failed to delete file: \" + f);\n    }\n    context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,Uri.parse(\"file://\" + f.getAbsolutePath())));\n  }\n}"}
{"ids": "80786", "raw_code": "public static String nodeSubTypeToString(int subType){\n  String val=\"?\";\nswitch (subType) {\ncase NodeRepresentation.AND_TYPE:\n    val=\"AND_TYPE\";\n  break;\ncase NodeRepresentation.OR_TYPE:\nval=\"OR_TYPE\";\nbreak;\ncase NodeRepresentation.IMPLIES_TYPE:\nval=\"IMPLIES_TYPE\";\nbreak;\ncase NodeRepresentation.FORALL_TYPE:\nval=\"FORALL_TYPE\";\nbreak;\ncase NodeRepresentation.EXISTS_TYPE:\nval=\"EXISTS_TYPE\";\nbreak;\ncase NodeRepresentation.SQSUB_TYPE:\nval=\"SQSUB_TYPE\";\nbreak;\ncase NodeRepresentation.OTHER_TYPE:\nval=\"OTHER_TYPE\";\nbreak;\n}\nreturn val;\n}"}
{"ids": "48540", "raw_code": "public static void disposeGraphicsConfig(long pConfigInfo){\n  OGLRenderQueue rq=getInstance();\n  rq.lock();\n  try {\n    OGLContext.setScratchSurface(pConfigInfo);\n    RenderBuffer buf=rq.getBuffer();\n    rq.ensureCapacityAndAlignment(12,4);\n    buf.putInt(DISPOSE_CONFIG);\n    buf.putLong(pConfigInfo);\n    rq.flushNow();\n  }\n  finally {\n    rq.unlock();\n  }\n}"}
{"ids": "71545", "raw_code": "private void addTerm(String term){\n  Integer index=termToIndex.get(term);\n  if (index == null) {\nsynchronized (this) {\n      index=termToIndex.get(term);\n      if (index == null) {\n        index=Integer.valueOf(termIndexCounter.getAndIncrement());\n        termToIndex.put(term,index);\n      }\n    }\n  }\n}"}
{"ids": "4380", "raw_code": "@Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){\n  Calendar cal=getCalendar();\n  boolean past=dateTimeUnit.getMonth() >= (getBaseMonth() + 1);\n  List<Period> periods=Lists.newArrayList();\n  dateTimeUnit=cal.minusYears(dateTimeUnit,past ? 5 : 6);\n  dateTimeUnit.setMonth(getBaseMonth() + 1);\n  dateTimeUnit.setDay(1);\n  Calendar calendar=getCalendar();\n  for (int i=0; i < 11; i++) {\n    periods.add(createPeriod(dateTimeUnit,cal));\n    dateTimeUnit=calendar.plusYears(dateTimeUnit,1);\n  }\n  return periods;\n}"}
{"ids": "30015", "raw_code": "public final boolean isDragging(){\n  return dragging;\n}"}
{"ids": "56893", "raw_code": "@Override public void escape(char[] buffer,int start,int length,boolean isAttributeValue,Writer outputWriter) throws IOException {\n  for (int i=start; i < start + length; i++) {\n    char ch=buffer[i];\n    if (ch == '&') {\n      outputWriter.write(\"&amp;\");\n      continue;\n    }\n    if (ch == '<') {\n      outputWriter.write(\"&lt;\");\n      continue;\n    }\n    if (ch == '>') {\n      outputWriter.write(\"&gt;\");\n      continue;\n    }\n    if (ch == '\"' && isAttributeValue) {\n      outputWriter.write(\"&quot;\");\n      continue;\n    }\n    if (ch == '\\'' && isAttributeValue) {\n      outputWriter.write(\"&apos;\");\n      continue;\n    }\n    if (isXml11RestrictedCharacter(ch)) {\n      outputWriter.write(\"&#x\");\n      outputWriter.write(Integer.toHexString(ch));\n      outputWriter.write(\";\");\n      continue;\n    }\n    outputWriter.write(ch);\n  }\n}"}
{"ids": "2874", "raw_code": "void encrypt(ByteBuffer src) throws SSLException {\n  if (!handshakeComplete) {\n    throw new IllegalStateException();\n  }\n  if (!src.hasRemaining()) {\n    if (outNetBuffer == null) {\n      outNetBuffer=emptyBuffer;\n    }\n    return;\n  }\n  createOutNetBuffer(src.remaining());\n  while (src.hasRemaining()) {\n    SSLEngineResult result=sslEngine.wrap(src,outNetBuffer.buf());\n    if (result.getStatus() == SSLEngineResult.Status.OK) {\n      if (result.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_TASK) {\n        doTasks();\n      }\n    }\n else     if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) {\n      outNetBuffer.capacity(outNetBuffer.capacity() << 1);\n      outNetBuffer.limit(outNetBuffer.capacity());\n    }\n else {\n      throw new SSLException(\"SSLEngine error during encrypt: \" + result.getStatus() + \" src: \"+ src+ \"outNetBuffer: \"+ outNetBuffer);\n    }\n  }\n  outNetBuffer.flip();\n}"}
{"ids": "11373", "raw_code": "public boolean codeMatches(String queryCode){\n  int length=id.length();\n  if (Debug.debugging(\"symbology.detail\")) {\n    Debug.output(\"Checking \" + queryCode + \" against |\"+ id+ \"| starting at \"+ startIndex+ \" for \"+ length);\n  }\n  return queryCode.regionMatches(true,startIndex,id,0,length);\n}"}
{"ids": "56119", "raw_code": "private static int parseNotificationId(String id){\n  try {\n    return Integer.parseInt(id);\n  }\n catch (  NumberFormatException nfe) {\n    Log.w(TAG,\"Exception while parsing download id:\" + id);\n    return -1;\n  }\n}"}
{"ids": "56713", "raw_code": "private <T>Property<T> prepare(String key,Property<T> property,T initialValue){\n  final ChangeListener<T> change=null;\n  property.setValue(initialValue);\n  property.addListener(change);\n  change.changed(property,null,initialValue);\n  return property;\n}"}
{"ids": "39327", "raw_code": "protected void readTillEOL() throws IOException {\n  while (m_Tokenizer.nextToken() != StreamTokenizer.TT_EOL) {\n  }\n  m_Tokenizer.pushBack();\n}"}
{"ids": "49601", "raw_code": "@Override public void clearAnswer(){\n  DateTime ldt=new DateTime();\n  mTimePicker.setCurrentHour(ldt.getHourOfDay());\n  mTimePicker.setCurrentMinute(ldt.getMinuteOfHour());\n}"}
{"ids": "25850", "raw_code": "public String readLine() throws IOException {\n  return keepCarriageReturns ? readUntilNewline() : reader.readLine();\n}"}
{"ids": "36177", "raw_code": "@Override public void doWork() throws OperatorException {\n  super.doWork();\n  runVectorOutput.deliver(runVector);\n}"}
{"ids": "27952", "raw_code": "protected int generateBinomial(int n,double p){\n  final double C1_3=0.33333333333333333;\n  final double C5_8=0.62500000000000000;\n  final double C1_6=0.16666666666666667;\n  final int DMAX_KM=20;\n  int bh, i, K, Km, nK;\n  double f, rm, U, V, X, T, E;\n  if (n != n_last || p != p_last) {\n    n_last=n;\n    p_last=p;\n    par=Math.min(p,1.0 - p);\n    q=1.0 - par;\n    np=n * par;\n    if (np <= 0.0)     return -1;\n    rm=np + par;\n    m=(int)rm;\n    if (np < 10) {\n      p0=Math.exp(n * Math.log(q));\n      bh=(int)(np + 10.0 * Math.sqrt(np * q));\n      b=Math.min(n,bh);\n    }\n else {\n      rc=(n + 1.0) * (pq=par / q);\n      ss=np * q;\n      i=(int)(2.195 * Math.sqrt(ss) - 4.6 * q);\n      xm=m + 0.5;\n      xl=(double)(m - i);\n      xr=(double)(m + i + 1L);\n      f=(rm - xl) / (rm - xl * par);\n      ll=f * (1.0 + 0.5 * f);\n      f=(xr - rm) / (xr * q);\n      lr=f * (1.0 + 0.5 * f);\n      c=0.134 + 20.5 / (15.3 + (double)m);\n      p1=i + 0.5;\n      p2=p1 * (1.0 + c + c);\n      p3=p2 + c / ll;\n      p4=p3 + c / lr;\n    }\n  }\n  if (np < 10) {\n    double pk;\n    K=0;\n    pk=p0;\n    U=randomGenerator.raw();\n    while (U > pk) {\n      ++K;\n      if (K > b) {\n        U=randomGenerator.raw();\n        K=0;\n        pk=p0;\n      }\n else {\n        U-=pk;\n        pk=(double)(((n - K + 1) * par * pk) / (K * q));\n      }\n    }\n    return ((p > 0.5) ? (n - K) : K);\n  }\n  for (; ; ) {\n    V=randomGenerator.raw();\n    if ((U=randomGenerator.raw() * p4) <= p1) {\n      K=(int)(xm - U + p1 * V);\n      return (p > 0.5) ? (n - K) : K;\n    }\n    if (U <= p2) {\n      X=xl + (U - p1) / c;\n      if ((V=V * c + 1.0 - Math.abs(xm - X) / p1) >= 1.0)       continue;\n      K=(int)X;\n    }\n else     if (U <= p3) {\n      if ((X=xl + Math.log(V) / ll) < 0.0)       continue;\n      K=(int)X;\n      V*=(U - p2) * ll;\n    }\n else {\n      if ((K=(int)(xr - Math.log(V) / lr)) > n)       continue;\n      V*=(U - p3) * lr;\n    }\n    if ((Km=Math.abs(K - m)) <= DMAX_KM || Km + Km + 2L >= ss) {\n      f=1.0;\n      if (m < K) {\n        for (i=m; i < K; ) {\n          if ((f*=(rc / ++i - pq)) < V)           break;\n        }\n      }\n else {\n        for (i=K; i < m; ) {\n          if ((V*=(rc / ++i - pq)) > f)           break;\n        }\n      }\n      if (V <= f)       break;\n    }\n else {\n      V=Math.log(V);\n      T=-Km * Km / (ss + ss);\n      E=(Km / ss) * ((Km * (Km * C1_3 + C5_8) + C1_6) / ss + 0.5);\n      if (V <= T - E)       break;\n      if (V <= T + E) {\n        if (n != n_prev || par != p_prev) {\n          n_prev=n;\n          p_prev=par;\n          nm=n - m + 1;\n          ch=xm * Math.log((m + 1.0) / (pq * nm)) + Arithmetic.stirlingCorrection(m + 1) + Arithmetic.stirlingCorrection(nm);\n        }\n        nK=n - K + 1;\n        if (V <= ch + (n + 1.0) * Math.log((double)nm / (double)nK) + (K + 0.5) * Math.log(nK * pq / (K + 1.0)) - Arithmetic.stirlingCorrection(K + 1) - Arithmetic.stirlingCorrection(nK))         break;\n      }\n    }\n  }\n  return (p > 0.5) ? (n - K) : K;\n}"}
{"ids": "83438", "raw_code": "public SimpleUserContext(AuthenticationProvider authProvider,String username,Map<String,GuacamoleConfiguration> configs){\n  Collection<String> connectionIdentifiers=new ArrayList<String>(configs.size());\n  Collection<String> connectionGroupIdentifiers=Collections.singleton(ROOT_IDENTIFIER);\n  Collection<Connection> connections=new ArrayList<Connection>(configs.size());\n  for (  Map.Entry<String,GuacamoleConfiguration> configEntry : configs.entrySet()) {\n    String identifier=configEntry.getKey();\n    GuacamoleConfiguration config=configEntry.getValue();\n    Connection connection=new SimpleConnection(identifier,identifier,config);\n    connection.setParentIdentifier(ROOT_IDENTIFIER);\n    connections.add(connection);\n    connectionIdentifiers.add(identifier);\n  }\n  this.rootGroup=new SimpleConnectionGroup(ROOT_IDENTIFIER,ROOT_IDENTIFIER,connectionIdentifiers,Collections.<String>emptyList());\n  this.self=new SimpleUser(username,connectionIdentifiers,connectionGroupIdentifiers);\n  this.userDirectory=new SimpleUserDirectory(self);\n  this.connectionDirectory=new SimpleConnectionDirectory(connections);\n  this.connectionGroupDirectory=new SimpleConnectionGroupDirectory(Collections.singleton(this.rootGroup));\n  this.authProvider=authProvider;\n}"}
{"ids": "79764", "raw_code": "public void reset(){\n  visitedGet.clear();\n  visitedPost.clear();\n  for (  SpiderParser parser : parsers) {\n    parser.removeSpiderParserListener(this);\n  }\n}"}
{"ids": "77298", "raw_code": "public NamedList<Object> toNamedList(){\n  final SimpleOrderedMap<Object> result=new SimpleOrderedMap<>();\n  for (Iterator<String> it=getParameterNamesIterator(); it.hasNext(); ) {\n    final String name=it.next();\n    final String[] values=getParams(name);\n    if (values.length == 1) {\n      result.add(name,values[0]);\n    }\n else {\n      result.add(name,values);\n    }\n  }\n  return result;\n}"}
{"ids": "2512", "raw_code": "private boolean isRepresentingTab(String text){\n  if (text == null)   return false;\n  if (isInsertingSpacesForTab()) {\n    if (text.length() == 0 || text.length() > getVisualTabLengthPreference())     return false;\n    for (int i=0; i < text.length(); i++) {\n      if (text.charAt(i) != ' ')       return false;\n    }\n    return true;\n  }\n else   return text.length() == 1 && text.charAt(0) == '\\t';\n}"}
{"ids": "82980", "raw_code": "public MonitorThread(String name){\n  super(name);\n}"}
{"ids": "34860", "raw_code": "@Override public UnitsRelations init(ProcessingEnvironment env){\n  elements=env.getElementUtils();\n  m=UnitsRelationsTools.buildAnnoMirrorWithDefaultPrefix(env,m.class);\n  km=UnitsRelationsTools.buildAnnoMirrorWithSpecificPrefix(env,m.class,Prefix.kilo);\n  mm=UnitsRelationsTools.buildAnnoMirrorWithSpecificPrefix(env,m.class,Prefix.milli);\n  m2=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,m2.class);\n  km2=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,km2.class);\n  mm2=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,mm2.class);\n  s=UnitsRelationsTools.buildAnnoMirrorWithDefaultPrefix(env,s.class);\n  h=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,h.class);\n  mPERs=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,mPERs.class);\n  kmPERh=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,kmPERh.class);\n  mPERs2=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,mPERs2.class);\n  return this;\n}"}
{"ids": "56257", "raw_code": "public static String[] toStringArray(Collection<String> collection){\n  if (collection == null) {\n    return null;\n  }\n  return collection.toArray(new String[collection.size()]);\n}"}
{"ids": "70978", "raw_code": "public ArrayList<ChartSet> prepareAnimation(ChartView chartView,ArrayList<float[][]> start,ArrayList<float[][]> end){\n  final int nSets=start.size();\n  final int nEntries=start.get(0).length;\n  mChartView=chartView;\n  mCurrentDuration=new long[nEntries];\n  if (mOrder == null) {\n    mOrder=new int[nEntries];\n    for (int i=0; i < mOrder.length; i++)     mOrder[i]=i;\n  }\n  float noOverlapDuration=mGlobalDuration / nEntries;\n  mDuration=(int)(noOverlapDuration + (mGlobalDuration - noOverlapDuration) * mOverlapingFactor);\n  Path path;\n  mPathMeasures=new PathMeasure[nSets][nEntries];\n  for (int i=0; i < nSets; i++) {\n    for (int j=0; j < nEntries; j++) {\n      path=new Path();\n      path.moveTo(start.get(i)[j][0],start.get(i)[j][1]);\n      path.lineTo(end.get(i)[j][0],end.get(i)[j][1]);\n      mPathMeasures[i][j]=new PathMeasure(path,false);\n    }\n  }\n  mInitTime=new long[nEntries];\n  mGlobalInitTime=System.currentTimeMillis();\n  long noOverlapInitTime;\n  for (int i=0; i < nEntries; i++) {\n    noOverlapInitTime=mGlobalInitTime + (i * (mGlobalDuration / nEntries));\n    mInitTime[mOrder[i]]=(noOverlapInitTime - ((long)(mOverlapingFactor * (noOverlapInitTime - mGlobalInitTime))));\n  }\n  mPlaying=true;\n  return getUpdate(mChartView.getData());\n}"}
{"ids": "22596", "raw_code": "public String formatDeleteNfsExportCmd(String dataMover,String path){\n  StringBuilder cmd=new StringBuilder();\n  cmd.append(\" \");\n  cmd.append(dataMover);\n  cmd.append(\" -unexport \");\n  cmd.append(\" \");\n  cmd.append(path);\n  return cmd.toString();\n}"}
{"ids": "72232", "raw_code": "public final String matchCategories(Set<String> categories){\n  if (categories == null) {\n    return null;\n  }\n  Iterator<String> it=categories.iterator();\n  if (mCategories == null) {\n    return it.hasNext() ? it.next() : null;\n  }\n  while (it.hasNext()) {\n    final String category=it.next();\n    if (!mCategories.contains(category)) {\n      return category;\n    }\n  }\n  return null;\n}"}
{"ids": "44074", "raw_code": "@Override public void run(){\n  try {\n    ClassReader reader=new ClassReader(new FileInputStream(this.classFile));\n    AsmClassVisitor visitor=new AsmClassVisitor(this.dataProvider,this.config);\n    reader.accept(visitor,ClassReader.SKIP_DEBUG);\n  }\n catch (  Exception e) {\n    LOGGER.log(Level.SEVERE,e.getMessage(),e);\n  }\n}"}
{"ids": "74335", "raw_code": "private void addLocationAndTrackPropertyChange(){\n  for (  Location loc : locationManager.getList()) {\n    loc.addPropertyChangeListener(this);\n    for (    Track track : loc.getTrackList()) {\n      track.addPropertyChangeListener(this);\n      Schedule schedule=track.getSchedule();\n      if (schedule != null) {\n        schedule.addPropertyChangeListener(this);\n      }\n    }\n  }\n}"}
{"ids": "2983", "raw_code": "private void handleJsonSignIn(RequestAndResponse requestAndResponse) throws IOException, ServletException {\n  requestAndResponse.setResponseContentTypeJson();\n  String userName;\n  String password;\n  String csrft;\n  try {\n    final JsonNodeHelper json=getJsonNode(requestAndResponse);\n    userName=json.getString(\"username\");\n    password=json.getString(\"password\");\n    csrft=json.getString(\"csrft\");\n  }\n catch (  final IOException e) {\n    returnJson400(requestAndResponse,servletText.errorJson());\n    return;\n  }\n  if (userName != null) {\n    userName=userName.toLowerCase();\n  }\n  if (isTheCsrftWrong(requestAndResponse,csrft)) {\n    returnJson400(requestAndResponse,servletText.errorWrongCsrft());\n    return;\n  }\n  if (userName == null || userName.isEmpty()) {\n    returnJson400(requestAndResponse,servletText.errorUsernameMustNotBeBlank());\n    return;\n  }\n  if (password == null || password.isEmpty()) {\n    returnJson400(requestAndResponse,servletText.errorPasswordMustNotBeBlank());\n    return;\n  }\n  if (!AccountAttributeValidator.isUserNameValid(userName)) {\n    returnJson400(requestAndResponse,servletText.errorUserNameIsNotValid());\n    return;\n  }\n  if (!AccountAttributeValidator.isPasswordValid(password)) {\n    returnJson400(requestAndResponse,servletText.errorPasswordIsNotValid());\n    return;\n  }\n  try {\n    final User user=dbLogic.getUserByUserName(userName);\n    if (user == null) {\n      returnJson400(requestAndResponse,servletText.errorNoAccountFound());\n      return;\n    }\n    if (user.getIsAccountClosed()) {\n      returnJson400(requestAndResponse,servletText.errorAccountIsClosed());\n      return;\n    }\n    final String realPassword=user.getPassword();\n    if (realPassword == null || !realPassword.equals(DigestUtils.sha1Hex(password))) {\n      returnJson400(requestAndResponse,servletText.errorPasswordIsIncorrect());\n      return;\n    }\n    mapSessionToUser(requestAndResponse,user.getId());\n    dbLogic.commit();\n    returnJson200(requestAndResponse);\n  }\n catch (  final PersistenceException e) {\n    logger.log(Level.INFO,\"Exception\",e);\n    returnJson500(requestAndResponse,servletText.errorInternalDatabase());\n  }\n}"}
{"ids": "63893", "raw_code": "private void _schedule(Activity a,long startTime){\n  if (a.isScheduled()) {\n    try {\n      notifyAll();\n    }\n catch (    Exception e) {\n    }\n    return;\n  }\n  a.setStartTime(startTime);\nsynchronized (this) {\n    m_activities.add(a);\n    a.setScheduled(true);\n    if (startTime < m_nextTime) {\n      m_nextTime=startTime;\n      notify();\n    }\n  }\n}"}
{"ids": "83629", "raw_code": "void unregisterCallback(BluetoothCallback callback){\nsynchronized (mCallbacks) {\n    mCallbacks.remove(callback);\n  }\n}"}
{"ids": "69358", "raw_code": "@VisibleForTesting static String escapeSqlString(String string){\n  return string.replaceAll(\"'\",\"''\");\n}"}
{"ids": "31040", "raw_code": "public static String[] toArray(String arg){\n  if (arg == null) {\n    return new String[0];\n  }\n  StringTokenizer tok=new StringTokenizer(arg,\" ,\");\n  String[] array=new String[tok.countTokens()];\n  int i=0;\n  while (tok.hasMoreTokens()) {\n    array[i]=tok.nextToken();\n    i++;\n  }\n  return (array);\n}"}
{"ids": "37082", "raw_code": "private void renderLeafNode(final CNodeNode treeNode){\n  final NaviNode graphNode=treeNode.getNode();\n  if (graphNode.isSelected() && graphNode.isVisible()) {\n    setForeground(SELECTED_FONT_COLOR);\n  }\n else   if (!graphNode.isVisible()) {\n    setForeground(INVISIBLE_FONT_COLOR);\n  }\n  setToolTipText(buildToolTip(graphNode));\n}"}
{"ids": "35480", "raw_code": "public static final void writeValueXml(Object v,String name,XmlSerializer out) throws XmlPullParserException, IOException {\n  String typeStr;\n  if (v == null) {\n    out.startTag(null,\"null\");\n    if (name != null) {\n      out.attribute(null,\"name\",name);\n    }\n    out.endTag(null,\"null\");\n    return;\n  }\n else   if (v instanceof String) {\n    out.startTag(null,\"string\");\n    if (name != null) {\n      out.attribute(null,\"name\",name);\n    }\n    out.text(v.toString());\n    out.endTag(null,\"string\");\n    return;\n  }\n else   if (v instanceof Integer) {\n    typeStr=\"int\";\n  }\n else   if (v instanceof Long) {\n    typeStr=\"long\";\n  }\n else   if (v instanceof Float) {\n    typeStr=\"float\";\n  }\n else   if (v instanceof Double) {\n    typeStr=\"double\";\n  }\n else   if (v instanceof Boolean) {\n    typeStr=\"boolean\";\n  }\n else   if (v instanceof byte[]) {\n    writeByteArrayXml((byte[])v,name,out);\n    return;\n  }\n else   if (v instanceof int[]) {\n    writeIntArrayXml((int[])v,name,out);\n    return;\n  }\n else   if (v instanceof Map) {\n    writeMapXml((Map)v,name,out);\n    return;\n  }\n else   if (v instanceof List) {\n    writeListXml((List)v,name,out);\n    return;\n  }\n else   if (v instanceof Set) {\n    writeSetXml((Set)v,name,out);\n    return;\n  }\n else   if (v instanceof CharSequence) {\n    out.startTag(null,\"string\");\n    if (name != null) {\n      out.attribute(null,\"name\",name);\n    }\n    out.text(v.toString());\n    out.endTag(null,\"string\");\n    return;\n  }\n else {\n    throw new RuntimeException(\"writeValueXml: unable to write value \" + v);\n  }\n  out.startTag(null,typeStr);\n  if (name != null) {\n    out.attribute(null,\"name\",name);\n  }\n  out.attribute(null,\"value\",v.toString());\n  out.endTag(null,typeStr);\n}"}
{"ids": "9484", "raw_code": "public Sector union(double latitude,double longitude){\n  if (this.minLatitude < this.maxLatitude && this.minLongitude < this.maxLongitude) {\n    this.maxLatitude=Math.max(this.maxLatitude,latitude);\n    this.minLatitude=Math.min(this.minLatitude,latitude);\n    this.maxLongitude=Math.max(this.maxLongitude,longitude);\n    this.minLongitude=Math.min(this.minLongitude,longitude);\n  }\n else   if (!Double.isNaN(this.minLatitude) && !Double.isNaN(this.minLongitude)) {\n    this.maxLatitude=Math.max(this.minLatitude,latitude);\n    this.maxLongitude=Math.max(this.minLongitude,longitude);\n    this.minLatitude=Math.min(this.minLatitude,latitude);\n    this.minLongitude=Math.min(this.minLongitude,longitude);\n  }\n else {\n    this.minLatitude=latitude;\n    this.minLongitude=longitude;\n    this.maxLatitude=Double.NaN;\n    this.maxLongitude=Double.NaN;\n  }\n  return this;\n}"}
{"ids": "9737", "raw_code": "public DAuthorityKeyIdentifier(JDialog parent,PublicKey authorityPublicKey,X500Name authorityCertName,BigInteger authorityCertSerialNumber){\n  super(parent);\n  setTitle(res.getString(\"DAuthorityKeyIdentifier.Title\"));\n  this.authorityPublicKey=authorityPublicKey;\n  initComponents();\n  prepopulateWithAuthorityCertDetails(authorityCertName,authorityCertSerialNumber);\n}"}
{"ids": "28529", "raw_code": "static void writeUTF(OutputStream out,String str) throws IOException {\n  for (int i=0, len=str.length(); i < len; i++) {\n    int c=str.charAt(i);\n    if ((c >= 0x0001) && (c <= 0x007F)) {\n      out.write(c);\n    }\n else {\n      if (c > 0x07FF) {\n        out.write(0xE0 | ((c >> 12) & 0x0F));\n        out.write(0x80 | ((c >> 6) & 0x3F));\n        out.write(0x80 | ((c >> 0) & 0x3F));\n      }\n else {\n        out.write(0xC0 | ((c >> 6) & 0x1F));\n        out.write(0x80 | ((c >> 0) & 0x3F));\n      }\n    }\n  }\n}"}
{"ids": "41076", "raw_code": "private void handleNormalUnassociated(){\n  int szSsaRegs=ssaMeth.getRegCount();\n  for (int ssaReg=0; ssaReg < szSsaRegs; ssaReg++) {\n    if (ssaRegsMapped.get(ssaReg)) {\n      continue;\n    }\n    RegisterSpec ssaSpec=getDefinitionSpecForSsaReg(ssaReg);\n    if (ssaSpec == null)     continue;\n    int category=ssaSpec.getCategory();\n    int ropReg=findNextUnreservedRopReg(paramRangeEnd,category);\n    while (!canMapReg(ssaSpec,ropReg)) {\n      ropReg=findNextUnreservedRopReg(ropReg + 1,category);\n    }\n    addMapping(ssaSpec,ropReg);\n  }\n}"}
{"ids": "52630", "raw_code": "public void addSeriesRenderer(int index,SimpleSeriesRenderer renderer){\n  mRenderers.add(index,renderer);\n}"}
{"ids": "75579", "raw_code": "public void createUnderlying(){\n  if (Platform.isFxApplicationThread()) {\n    options.createUnderlying();\n    this.marker=new com.lynden.gmapsfx.javascript.object.Marker(options.convert());\n  }\n}"}
{"ids": "39874", "raw_code": "private void onActionUp(MotionEvent event){\n  if (isDown) {\n    this.startX=0F;\n    this.startY=0F;\n    this.isDown=false;\n  }\n}"}
{"ids": "7534", "raw_code": "private Rectangle2D createAlignedRectangle2D(Size2D dimensions,Rectangle2D frame,HorizontalAlignment hAlign,VerticalAlignment vAlign){\n  double x=Double.NaN;\n  double y=Double.NaN;\n  if (hAlign == HorizontalAlignment.LEFT) {\n    x=frame.getX();\n  }\n else   if (hAlign == HorizontalAlignment.CENTER) {\n    x=frame.getCenterX() - (dimensions.width / 2.0);\n  }\n else   if (hAlign == HorizontalAlignment.RIGHT) {\n    x=frame.getMaxX() - dimensions.width;\n  }\n  if (vAlign == VerticalAlignment.TOP) {\n    y=frame.getY();\n  }\n else   if (vAlign == VerticalAlignment.CENTER) {\n    y=frame.getCenterY() - (dimensions.height / 2.0);\n  }\n else   if (vAlign == VerticalAlignment.BOTTOM) {\n    y=frame.getMaxY() - dimensions.height;\n  }\n  return new Rectangle2D.Double(x,y,dimensions.width,dimensions.height);\n}"}
{"ids": "44361", "raw_code": "public MailAddress(InternetAddress address) throws AddressException {\n  this(address.getAddress());\n}"}
{"ids": "37733", "raw_code": "public double[][] confusionMatrix(){\n  double[][] newMatrix=new double[m_ConfusionMatrix.length][0];\n  for (int i=0; i < m_ConfusionMatrix.length; i++) {\n    newMatrix[i]=new double[m_ConfusionMatrix[i].length];\n    System.arraycopy(m_ConfusionMatrix[i],0,newMatrix[i],0,m_ConfusionMatrix[i].length);\n  }\n  return newMatrix;\n}"}
{"ids": "32789", "raw_code": "public void print(int x){\n  out.print(x);\n  out.flush();\n}"}
{"ids": "40786", "raw_code": "public static void beginStartingService(Context context,Intent intent){\nsynchronized (mStartingServiceSync) {\n    if (mStartingService == null) {\n      PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);\n      mStartingService=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,\"StartingAlertService\");\n      mStartingService.setReferenceCounted(false);\n    }\n    mStartingService.acquire();\n    context.startService(intent);\n  }\n}"}
{"ids": "60511", "raw_code": "public ScannerException(ErrorMessages message,int line){\n  this(null,ErrorMessages.get(message),message,line,-1);\n}"}
{"ids": "58362", "raw_code": "private void informUponSimilarName(final StringBuffer messageBuffer,final String name,final String candidate){\n  if (name.equals(candidate)) {\n    return;\n  }\n  if (name.regionMatches(true,0,candidate,0,PKG_LEN + 5)) {\n    messageBuffer.append(\" Did you mean '\");\n    messageBuffer.append(candidate);\n    messageBuffer.append(\"'?\");\n  }\n}"}
{"ids": "18332", "raw_code": "public synchronized void co_exit(int thisCoroutine){\n  m_activeIDs.clear(thisCoroutine);\n  m_nextCoroutine=NOBODY;\n  notify();\n}"}
{"ids": "41473", "raw_code": "private int findSchemeSeparator(){\n  return cachedSsi == NOT_CALCULATED ? cachedSsi=uriString.indexOf(':') : cachedSsi;\n}"}
{"ids": "51937", "raw_code": "public void refresh(){\n  label.setText(String.valueOf(MathHelper.round(val,2)));\n  if (val == min)   minus.setEnabled(false);\n else   minus.setEnabled(true);\n  if (val == max)   plus.setEnabled(false);\n else   plus.setEnabled(true);\n  if (cb != null)   cb.callback(val);\n  plus.repaint();\n  minus.repaint();\n  if (progress != null) {\n    progress.setValue(val / max);\n  }\n}"}
{"ids": "34080", "raw_code": "public void removeCallback(Callback callback){\n  mCallbacks.remove(callback);\n}"}
{"ids": "14811", "raw_code": "private boolean expectVlvResponse(){\n  Boolean expected=Boolean.FALSE;\n  try {\n    expected=(Boolean)get(EXPECT_VLV_RESPONSE);\n  }\n catch (  Exception e) {\n  }\n  return expected == null ? false : expected.booleanValue();\n}"}
{"ids": "506", "raw_code": "public void layoutContainer(final Container parent){\n  checkLayout(getModel());\n  final Insets insets=parent.getInsets();\n  final Dimension size=parent.getSize();\n  final int width=size.width - (insets.left + insets.right);\n  final int height=size.height - (insets.top + insets.bottom);\n  final Rectangle bounds=new Rectangle(insets.left,insets.top,width,height);\n  layout1(getModel(),bounds);\n  layout2(getModel(),bounds);\n}"}
{"ids": "85867", "raw_code": "@Override public Invocation.Builder accept(String... mediaTypes){\n  clientRequestContext.setAcceptResponseTypesStr(Arrays.asList(mediaTypes));\n  return this;\n}"}
{"ids": "21215", "raw_code": "public StreamConsumer(InputStream stream){\n  in=new BufferedInputStream(stream);\n  thread.start();\n}"}
{"ids": "4321", "raw_code": "public static String subString(String string,int beginIndex,int length){\n  if (string == null) {\n    return null;\n  }\n  final int endIndex=beginIndex + length;\n  if (beginIndex >= string.length()) {\n    return EMPTY;\n  }\n  if (endIndex > string.length()) {\n    return string.substring(beginIndex,string.length());\n  }\n  return string.substring(beginIndex,endIndex);\n}"}
{"ids": "45876", "raw_code": "private static SocketImpl createSocketImpl(){\n  try {\n    return socketImplCtor.newInstance();\n  }\n catch (  InstantiationException x) {\n    throw new AssertionError(x);\n  }\ncatch (  IllegalAccessException x) {\n    throw new AssertionError(x);\n  }\ncatch (  InvocationTargetException x) {\n    throw new AssertionError(x);\n  }\n}"}
{"ids": "16548", "raw_code": "@Override public String encode(){\n  return name.substring(0,1);\n}"}
{"ids": "900", "raw_code": "private void updateBaseMatrix(Drawable d){\n  ImageView imageView=getImageView();\n  if (null == imageView || null == d) {\n    return;\n  }\n  final float viewWidth=getImageViewWidth(imageView);\n  final float viewHeight=getImageViewHeight(imageView);\n  final int drawableWidth=d.getIntrinsicWidth();\n  final int drawableHeight=d.getIntrinsicHeight();\n  mBaseMatrix.reset();\n  final float widthScale=viewWidth / drawableWidth;\n  final float heightScale=viewHeight / drawableHeight;\n  if (mScaleType == ScaleType.CENTER) {\n    mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F);\n  }\n else   if (mScaleType == ScaleType.CENTER_CROP) {\n    float scale=Math.max(widthScale,heightScale);\n    mBaseMatrix.postScale(scale,scale);\n    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);\n  }\n else   if (mScaleType == ScaleType.CENTER_INSIDE) {\n    float scale=Math.min(1.0f,Math.min(widthScale,heightScale));\n    mBaseMatrix.postScale(scale,scale);\n    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);\n  }\n else {\n    RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight);\n    RectF mTempDst=new RectF(0,0,viewWidth,viewHeight);\n    if ((int)mBaseRotation % 180 != 0) {\n      mTempSrc=new RectF(0,0,drawableHeight,drawableWidth);\n    }\nswitch (mScaleType) {\ncase FIT_CENTER:\n      mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER);\n    break;\ncase FIT_START:\n  mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START);\nbreak;\ncase FIT_END:\nmBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END);\nbreak;\ncase FIT_XY:\nmBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL);\nbreak;\ndefault :\nbreak;\n}\n}\nresetMatrix();\n}"}
{"ids": "26867", "raw_code": "void cancelAll(){\nsynchronized (currentRequests) {\n    for (    DownloadRequest request : currentRequests) {\n      request.cancel();\n    }\n  }\n  currentRequests.clear();\n}"}
{"ids": "65493", "raw_code": "protected void addDocs(String index,String type,int number) throws JsonProcessingException {\n  ObjectMapper mapper=new ObjectMapper();\n  for (int i=0; i < number; i++) {\n    index(index,type,\"doc_\" + i,mapper.writeValueAsString(TestDocument.createSimpleDoc(i)));\n  }\n  flush();\n}"}
{"ids": "86549", "raw_code": "public final ParallelFlux<T> doOnError(Consumer<? super Throwable> onError){\n  Objects.requireNonNull(onError,\"onError\");\n  return doOnSignal(this,null,null,onError,null,null,null,null,null);\n}"}
{"ids": "61625", "raw_code": "public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n  if (subSignature.equals(\"void arraycopy(java.lang.Object,int,java.lang.Object,int,int)\")) {\n    java_lang_System_arraycopy(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"void setIn0(java.io.InputStream)\")) {\n    java_lang_System_setIn0(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"void setOut0(java.io.PrintStream)\")) {\n    java_lang_System_setOut0(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"void setErr0(java.io.PrintStream)\")) {\n    java_lang_System_setErr0(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"java.util.Properties initProperties(java.util.Properties)\")) {\n    java_lang_System_initProperties(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"java.lang.String mapLibraryName(java.lang.String)\")) {\n    java_lang_System_mapLibraryName(method,thisVar,returnVar,params);\n    return;\n  }\n else   if (subSignature.equals(\"java.lang.Class getCallerClass()\")) {\n    java_lang_System_getCallerClass(method,thisVar,returnVar,params);\n    return;\n  }\n else {\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}"}
{"ids": "6407", "raw_code": "protected void loadValue(String sValue){\n  try {\n    value=Long.parseLong(sValue.trim());\n  }\n catch (  NumberFormatException nfe) {\n    revertToDefault();\n  }\n}"}
{"ids": "73486", "raw_code": "public void checkBounds(){\n  tfLowBound.setEnabled(tsClipping.isSelected());\n  tfUpBound.setEnabled(tsClipping.isSelected());\n}"}
{"ids": "83839", "raw_code": "public void remove(int index){\n  mCategories.remove(index);\n  mTitles.remove(index);\n  mValues.remove(index);\n}"}
{"ids": "78788", "raw_code": "public static boolean deleteFilesAndDirsRecursive(final File directory){\n  if (directory == null || !directory.isDirectory()) {\n    Log.e(FileUtils.class,\"deleteFilesAndDirsRecursive(): Null parameter given or not a Directory\");\n    return false;\n  }\n  return deleteFilesAndDirs(directory);\n}"}
{"ids": "79933", "raw_code": "void render(GraphicsContext g,Point2D viewportOrigin){\n  g.setGlobalAlpha(life);\n  g.setGlobalBlendMode(blendMode);\n  if (image != null) {\n    g.save();\n    g.translate(x - viewportOrigin.getX(),y - viewportOrigin.getY());\n    g.scale(radiusX * 2 / image.getWidth(),radiusY * 2 / image.getHeight());\n    g.drawImage(image,0,0);\n    g.restore();\n  }\n else {\n    g.setFill(color);\n    g.fillOval(x - viewportOrigin.getX(),y - viewportOrigin.getY(),radiusX * 2,radiusY * 2);\n  }\n}"}
{"ids": "63262", "raw_code": "public int position(){\n  return buff.position();\n}"}
{"ids": "56281", "raw_code": "@Override public void write(String str,int off,int len) throws IOException {\n  final int off_plus_len=off + len;\n  for (int i=off; i < off_plus_len; ) {\n    char c=str.charAt(i++);\n    if (c < 0x80) {\n      _bytes[_index]=(byte)c;\n      if (++_index >= _bytes.length) {\n        flushBuffer();\n      }\n    }\n else {\n      write(c);\n    }\n  }\n}"}
{"ids": "86893", "raw_code": "public void writeToNBT(final NBTTagCompound nbt){\n  final NBTTagList modulesNbt=new NBTTagList();\n  for (  final Module module : modules) {\n    final NBTTagCompound moduleNbt=new NBTTagCompound();\n    if (module != null) {\n      module.writeToNBT(moduleNbt);\n    }\n    modulesNbt.appendTag(moduleNbt);\n  }\n  nbt.setTag(TAG_MODULES,modulesNbt);\n  lock.ifPresent(null);\n  lock.ifPresent(null);\n}"}
{"ids": "32138", "raw_code": "void sendBufferIfNotEmpty() throws IOException {\n  if (buf != null && buf.position() > 0)   sendBuffer();\n}"}
{"ids": "41459", "raw_code": "public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){\n  if (key.equals(getString(R.string.pref_key_notification))) {\n    setNotification(sharedPreferences.getBoolean(key,true));\n  }\n else   if (key.equals(getString(R.string.pref_key_gmail_signature))) {\n    setGmailSignaturePrefDescription(sharedPreferences.getBoolean(key,false));\n  }\n else   if (key.equals(getString(R.string.pref_key_sms_signature))) {\n    setSmsSignaturePrefDescription(sharedPreferences.getBoolean(key,false));\n  }\n}"}
{"ids": "75132", "raw_code": "public void initPortParameters(SerialPort port){\n  initialized=false;\n  if (port != null) {\n    cbPort.setSelectedItem(port.getName());\n    cbBaudrate.setSelectedItem(String.valueOf(port.getBaudRate()));\n    cbParity.setSelectedIndex(port.getParity());\n    cbDataBits.setSelectedIndex(port.getDataBits() - 5);\n    cbStopBits.setSelectedIndex(port.getStopBits() - 1);\n    int prt=port.getFlowControlMode();\n    cbProtocolRx.setSelectedIndex((prt & SerialPort.FLOWCONTROL_RTSCTS_IN) != 0 ? 1 : (prt & SerialPort.FLOWCONTROL_XONXOFF_IN) != 0 ? 2 : 0);\n    cbProtocolTx.setSelectedIndex((prt & SerialPort.FLOWCONTROL_RTSCTS_OUT) != 0 ? 1 : (prt & SerialPort.FLOWCONTROL_XONXOFF_OUT) != 0 ? 2 : 0);\n    btnDSR.setSelected(port.isDSR());\n    btnCTS.setSelected(port.isCTS());\n    btnCD.setSelected(port.isCD());\n    btnDTR.setSelected(port.isDTR());\n    btnRTS.setSelected(port.isRTS());\n  }\n  initialized=true;\n}"}
{"ids": "32214", "raw_code": "public void addPreloadEntry(GridCacheEntryInfo info){\n  if (preloadEntries == null)   preloadEntries=new ArrayList<>();\n  preloadEntries.add(info);\n}"}
{"ids": "80517", "raw_code": "private void putOffUniform(final Player player){\n  if (UNIFORM.isPartOf(player.getOutfit())) {\n    player.returnToOriginalOutfit();\n  }\n}"}
{"ids": "25984", "raw_code": "public static void moveFile(final File srcFile,final File destFile) throws IOException {\n  if (srcFile == null) {\n    throw new NullPointerException(\"Source must not be null\");\n  }\n  if (destFile == null) {\n    throw new NullPointerException(\"Destination must not be null\");\n  }\n  if (!srcFile.exists()) {\n    throw new FileNotFoundException(\"Source '\" + srcFile + \"' does not exist\");\n  }\n  if (srcFile.isDirectory()) {\n    throw new IOException(\"Source '\" + srcFile + \"' is a directory\");\n  }\n  if (destFile.exists()) {\n    throw new IOException(\"Destination '\" + destFile + \"' already exists\");\n  }\n  if (destFile.isDirectory()) {\n    throw new IOException(\"Destination '\" + destFile + \"' is a directory\");\n  }\n  final boolean rename=srcFile.renameTo(destFile);\n  if (!rename) {\n    copyFile(srcFile,destFile);\n    if (!srcFile.delete()) {\n      ParseFileUtils.deleteQuietly(destFile);\n      throw new IOException(\"Failed to delete original file '\" + srcFile + \"' after copy to '\"+ destFile+ \"'\");\n    }\n  }\n}"}
{"ids": "45849", "raw_code": "public synchronized ScanManagerConfig readFromFile() throws IOException {\n  final File f=new File(file);\n  if (!f.exists())   throw new IOException(\"No such file: \" + file);\n  if (!f.canRead())   throw new IOException(\"Can't read file: \" + file);\n  try {\n    return read(f);\n  }\n catch (  JAXBException x) {\n    final IOException io=new IOException(\"Failed to read SessionConfigBean from \" + file + \": \"+ x,x);\n    throw io;\n  }\n}"}
{"ids": "48239", "raw_code": "public void delete(String name) throws IOException {\n  if (name.equalsIgnoreCase(ISSUER)) {\n    names=null;\n  }\n else {\n    throw new IOException(\"Attribute name not recognized by \" + \"CertAttrSet:CertificateIssuer\");\n  }\n  encodeThis();\n}"}
{"ids": "3865", "raw_code": "public CompileClassNotFound(Exception cause){\n  super(cause.getMessage());\n  _cause=cause;\n}"}
{"ids": "83195", "raw_code": "public SymGraph(Motif motif){\n  this.motif=motif;\n  colorsToRecheck=new HashSet<Integer>();\n  topMotifnodeToColor=new int[motif.getNrMotifNodes()];\n  colorToBottomMotifnode=new HashMap<Integer,List<Integer>>();\n  colorToTopMotifnode=new HashMap<Integer,List<Integer>>();\n  ArrayList<Integer> list1=new ArrayList<Integer>();\n  ArrayList<Integer> list2=new ArrayList<Integer>();\n  for (int i=0; i < topMotifnodeToColor.length; i++) {\n    list1.add(i);\n    list2.add(i);\n  }\n  colorToBottomMotifnode.put(0,list2);\n  colorToTopMotifnode.put(0,list1);\n}"}
{"ids": "4401", "raw_code": "public static boolean anyDimensionHasItems(Collection<DimensionalObject> dimensions){\n  if (dimensions == null || dimensions.isEmpty()) {\n    return false;\n  }\n  for (  DimensionalObject dim : dimensions) {\n    if (dim.hasItems()) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "6695", "raw_code": "private void openCurrentAndMaybeNext(final boolean openNext){\n  LOG.info(\"openCurrentAndMaybeNext() waiting for synchronized(this)\");\nsynchronized (this) {\n    LOG.info(\"openCurrentAndMaybeNext() DONE waiting for synchronized(this)\\n\");\n    closeCursor();\n    if (mPlayListLen == 0 || mPlayList == null) {\n      return;\n    }\n    stop(false);\n    mPlayPos=Math.min(mPlayPos,mPlayList.length - 1);\n    updateCursor(mPlayList[mPlayPos]);\n    while (true) {\n      if (mCursor != null && !mCursor.isClosed() && openFile(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI + \"/\" + mCursor.getLong(IDCOLIDX))) {\n        break;\n      }\n      closeCursor();\n      if (mOpenFailedCounter++ < 10 && mPlayListLen > 1) {\n        final int pos=getNextPosition(false);\n        if (scheduleShutdownAndNotifyPlayStateChange(pos))         return;\n        mPlayPos=pos;\n        stop(false);\n        mPlayPos=pos;\n        updateCursor(mPlayList[mPlayPos]);\n      }\n else {\n        mOpenFailedCounter=0;\n        LOG.warn(\"Failed to open file for playback\");\n        scheduleDelayedShutdown();\n        if (mIsSupposedToBePlaying) {\n          mIsSupposedToBePlaying=false;\n          notifyChange(PLAYSTATE_CHANGED);\n        }\n        return;\n      }\n    }\n    if (openNext) {\n      setNextTrack();\n    }\n  }\n}"}
{"ids": "17375", "raw_code": "private void createOverviewPage(){\n  RemapOverview overview=new RemapOverview(migrationTask,getContainer());\n  int index=addPage(overview.getControl());\n  setPageText(index,\"Overview\");\n  taskListeners.add(overview);\n}"}
{"ids": "14131", "raw_code": "public SOAPConnection openSOAPConnection() throws SOAPException {\n  return soapConnectionFactory.createConnection();\n}"}
{"ids": "12202", "raw_code": "public static <U,V>String printMap(final Map<U,V> map,final Converter<U> keyConverter,final Converter<V> valueConverter){\n  final StringBuilder sb=new StringBuilder(\"{ \");\n  String separator=\"\";\n  for (  final Entry<U,V> entry : map.entrySet()) {\n    sb.append(separator);\n    sb.append(keyConverter.convert(entry.getKey()));\n    sb.append(\"=>\");\n    sb.append(valueConverter.convert(entry.getValue()));\n    separator=\", \";\n  }\n  sb.append(\" }\");\n  return sb.toString();\n}"}
{"ids": "11574", "raw_code": "public void findAndInit(Object someObj){\n  if (someObj instanceof com.bbn.openmap.MapBean) {\n    Debug.message(\"overview\",\"OverviewMapHandler found a MapBean object\");\n    setSourceMap((MapBean)someObj);\n  }\n}"}
{"ids": "53156", "raw_code": "public static double cdf(double x,double mu,double shape){\n  if (!(x > 0.)) {\n    return 0.;\n  }\n  final double v0=x / mu;\n  final double v1=Math.sqrt(shape / x);\n  if (v1 == 0.) {\n    return v0 > 0. ? 1 : 0.;\n  }\n  double c1=NormalDistribution.standardNormalCDF(v1 * (v0 - 1.));\n  double c2=NormalDistribution.standardNormalCDF(-v1 * (v0 + 1.));\n  return (c2 > 0.) ? c1 + Math.exp(2 * shape / mu) * c2 : c1;\n}"}
{"ids": "15444", "raw_code": "public void handleRequest(RequestContext rc) throws CLIException {\n  super.handleRequest(rc);\n  ldapLogin();\n  SSOToken adminSSOToken=getAdminSSOToken();\n  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);\n  String interfaceName=getStringOptionValue(ARGUMENT_INTERFACE_NAME);\n  String pluginName=getStringOptionValue(ARGUMENT_PLUGIN_NAME);\n  String i18nKey=getStringOptionValue(ARGUMENT_I18N_KEY);\n  String i18nName=getStringOptionValue(ARGUMENT_I18N_NAME);\n  String className=getStringOptionValue(ARGUMENT_CLASS_NAME);\n  ServiceManager sm=null;\n  try {\n    sm=new ServiceManager(adminSSOToken);\n  }\n catch (  SMSException smse) {\n    throw new CLIException(smse,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n  }\ncatch (  SSOException ssoe) {\n    throw new CLIException(ssoe,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n  }\n  IOutput outputWriter=getOutputWriter();\n  try {\n    String[] params={serviceName,interfaceName,pluginName,i18nKey,i18nName,className};\n    writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_ADD_PLUGIN_SCHEMA\",params);\n    Document pluginDoc=createPluginSchemaXML(serviceName,interfaceName,pluginName,i18nKey,i18nName,className);\n    if (pluginDoc != null) {\n      sm.addPluginSchema(pluginDoc);\n      String[] params2={serviceName,pluginName};\n      writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_ADD_PLUGIN_SCHEMA\",params2);\n      outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"add-plugin-schema-succeed\"),(Object[])params));\n    }\n else {\n      String[] args={serviceName,pluginName,\"Null XML Document\"};\n      debugError(\"AddPluginSchema.handleRequest:: Null XML Document\");\n      writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_ADD_PLUGIN_SCHEMA\",args);\n      throw new CLIException(\"Null XML Document\",ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n    }\n  }\n catch (  SSOException ssoe) {\n    String[] args={serviceName,pluginName,ssoe.getMessage()};\n    debugError(\"AddPluginSchema.handleRequest\",ssoe);\n    writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_ADD_PLUGIN_SCHEMA\",args);\n    outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"add-plugin-schema-failed\"),(Object[])args));\n    throw new CLIException(ssoe,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n  }\ncatch (  SMSException smse) {\n    String[] args={serviceName,pluginName,smse.getMessage()};\n    debugError(\"AddPluginSchema.handleRequest\",smse);\n    writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_ADD_PLUGIN_SCHEMA\",args);\n    outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"add-plugin-schema-failed\"),(Object[])args));\n    throw new CLIException(smse,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);\n  }\n}"}
{"ids": "46993", "raw_code": "protected void bflash() throws SAXException {\n  if (mBuffIdx >= 0) {\n    mHandCont.characters(mBuff,0,(mBuffIdx + 1));\n    mBuffIdx=-1;\n  }\n}"}
{"ids": "46750", "raw_code": "protected Mac(MacSpi macSpi,Provider provider,String algorithm){\n  this.spi=macSpi;\n  this.provider=provider;\n  this.algorithm=algorithm;\n  serviceIterator=null;\n  lock=null;\n}"}
{"ids": "76698", "raw_code": "public static String pathToString(String dim,String[] path){\n  String[] fullPath=new String[1 + path.length];\n  fullPath[0]=dim;\n  System.arraycopy(path,0,fullPath,1,path.length);\n  return pathToString(fullPath,fullPath.length);\n}"}
{"ids": "72271", "raw_code": "public static boolean isValidIfd(int ifdId){\n  return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS;\n}"}
{"ids": "9833", "raw_code": "public static CdcSession createCdcSessionViaDomainAuth(String serverName,String userName,String userPassword){\n  if (serverName == null || serverName.length() == 0) {\n    throw new IllegalArgumentException(\"Server name is not specified\");\n  }\n  if (userName == null || userName.length() == 0) {\n    throw new IllegalArgumentException(\"User name is not specified\");\n  }\n  return new CdcSession(serverName,userName,userPassword);\n}"}
{"ids": "72357", "raw_code": "protected static Dfp expInternal(final Dfp a){\n  Dfp y=a.getOne();\n  Dfp x=a.getOne();\n  Dfp fact=a.getOne();\n  Dfp py=new Dfp(y);\n  for (int i=1; i < 90; i++) {\n    x=x.multiply(a);\n    fact=fact.divide(i);\n    y=y.add(x.multiply(fact));\n    if (y.equals(py)) {\n      break;\n    }\n    py=new Dfp(y);\n  }\n  return y;\n}"}
{"ids": "51449", "raw_code": "public URLConnection openConnection() throws IOException {\n  return streamHandler.openConnection(this);\n}"}
{"ids": "35623", "raw_code": "public static ArrayList<String[]> linesToArray(ArrayList<String> inLine){\n  ArrayList<String[]> framesEnTab=new ArrayList<>();\n  for (int i=0; i < inLine.size(); i++) {\n    framesEnTab.add(lineToArray(inLine.get(i)));\n  }\n  return framesEnTab;\n}"}
{"ids": "34459", "raw_code": "@Override public int LA(int i){\n  int la=super.LA(i);\n  return Character.toLowerCase(la);\n}"}
{"ids": "4966", "raw_code": "public void deselect_all(){\n  Arrays.fill(sel_array,false);\n}"}
{"ids": "70119", "raw_code": "@Override public boolean canTransferCriticals(int loc){\n  return false;\n}"}
{"ids": "37491", "raw_code": "private void calculateSizes(final Graphics g){\n  m_rowHeight=getRowHeight(g);\n  m_charHeight=getCharHeight(g);\n  m_charWidth=getCharacterWidth(g);\n}"}
{"ids": "56195", "raw_code": "public static Iterable<GatewayMetaState.IndexMetaWriteInfo> resolveStatesToBeWritten(ImmutableSet<String> previouslyWrittenIndices,Set<String> potentiallyUnwrittenIndices,MetaData previousMetaData,MetaData newMetaData){\n  List<GatewayMetaState.IndexMetaWriteInfo> indicesToWrite=new ArrayList<>();\n  for (  String index : potentiallyUnwrittenIndices) {\n    IndexMetaData newIndexMetaData=newMetaData.index(index);\n    IndexMetaData previousIndexMetaData=previousMetaData == null ? null : previousMetaData.index(index);\n    String writeReason=null;\n    if (previouslyWrittenIndices.contains(index) == false || previousIndexMetaData == null) {\n      writeReason=\"freshly created\";\n    }\n else     if (previousIndexMetaData.getVersion() != newIndexMetaData.getVersion()) {\n      writeReason=\"version changed from [\" + previousIndexMetaData.getVersion() + \"] to [\"+ newIndexMetaData.getVersion()+ \"]\";\n    }\n    if (writeReason != null) {\n      indicesToWrite.add(new GatewayMetaState.IndexMetaWriteInfo(newIndexMetaData,previousIndexMetaData,writeReason));\n    }\n  }\n  return indicesToWrite;\n}"}
{"ids": "39047", "raw_code": "protected double applyFunction(double value){\nswitch (m_operator) {\ncase 'l':\n    return Math.log(value);\ncase 'b':\n  return Math.abs(value);\ncase 'c':\nreturn Math.cos(value);\ncase 'e':\nreturn Math.exp(value);\ncase 's':\nreturn Math.sqrt(value);\ncase 'f':\nreturn Math.floor(value);\ncase 'h':\nreturn Math.ceil(value);\ncase 'r':\nreturn Math.rint(value);\ncase 't':\nreturn Math.tan(value);\ncase 'n':\nreturn Math.sin(value);\n}\nreturn Double.NaN;\n}"}
{"ids": "1239", "raw_code": "private Object _deserializeStruct(Element elStruct) throws ConverterException {\n  String type=elStruct.getAttribute(\"type\");\n  Struct struct=new StructImpl();\n  NodeList list=elStruct.getChildNodes();\n  int len=list.getLength();\n  for (int i=0; i < len; i++) {\n    Node node=list.item(i);\n    if (node instanceof Element) {\n      Element var=(Element)node;\n      Element value=getChildElement((Element)node);\n      if (value != null) {\n        struct.setEL(var.getAttribute(\"name\"),_deserialize(value));\n      }\n    }\n  }\n  if (struct.size() == 0 && type != null && type.length() > 0) {\n    return \"\";\n  }\n  return struct;\n}"}
{"ids": "30723", "raw_code": "public RemoteEvent dequeue(){\n  Uuid uuid=_readyEvents.poll();\n  if (uuid == null)   return null;\n  SingleProducer producer=getProducer(uuid);\n  return producer.popNextReadyEvent();\n}"}
{"ids": "47345", "raw_code": "public InvalidPropertiesFormatException(String message){\n  super(message);\n}"}
{"ids": "15467", "raw_code": "public SubCommand(IDefinition definition,ResourceBundle rb,String name,List mandatoryOptions,List optionalOptions,List optionAliases,String implClassName,boolean webSupport,String deprecationWarning) throws CLIException {\n  this.definition=definition;\n  this.name=name;\n  this.rb=rb;\n  this.implClassName=implClassName;\n  this.webSupport=webSupport;\n  this.deprecationWarning=deprecationWarning;\n  Set shortOptions=new HashSet();\n  parseOptions(mandatoryOptions,this.mandatoryOptions,shortOptions);\n  parseOptions(optionalOptions,this.optionalOptions,shortOptions);\n  parseAliases(optionAliases);\n}"}
{"ids": "69232", "raw_code": "public static boolean canAddClassInPackageOf(Class<?> cls){\n  final Package beanPackage=cls.getPackage();\n  if (beanPackage != null) {\n    if (beanPackage.isSealed()) {\n      return false;\n    }\n    String pname=beanPackage.getName();\n    if (pname.startsWith(\"java.\") || pname.startsWith(\"javax.security.\")) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "134", "raw_code": "public static JsonToken deserialize(final String jwt) throws Exception {\n  JsonTokenParser parser=new JsonTokenParser(verifierProviders,new AbelanaTokenAudienceChecker(BackendConstants.TOKEN_ISSUER));\n  return parser.deserialize(jwt);\n}"}
{"ids": "67196", "raw_code": "public void swapSuggestions(final List<? extends SearchSuggestion> newSearchSuggestions){\n  Collections.reverse(newSearchSuggestions);\n  swapSuggestions(newSearchSuggestions,true);\n}"}
{"ids": "34602", "raw_code": "boolean shouldAnimateSearchProviderIcon(SelectionType selectionType,boolean isShowing){\n  if (isShowing || ContextualSearchFieldTrial.areExtraSearchBarAnimationsDisabled()) {\n    return false;\n  }\n  if (selectionType == SelectionType.TAP) {\n    long currentTimeMillis=System.currentTimeMillis();\n    long lastAnimatedTimeMillis=mPreferenceManager.getContextualSearchLastAnimationTime();\n    if (Math.abs(currentTimeMillis - lastAnimatedTimeMillis) > ONE_DAY_IN_MILLIS) {\n      mPreferenceManager.setContextualSearchLastAnimationTime(currentTimeMillis);\n      return true;\n    }\n else {\n      return false;\n    }\n  }\n else   if (selectionType == SelectionType.LONG_PRESS) {\n    return getPromoOpenCount() == 0;\n  }\n  return false;\n}"}
{"ids": "60245", "raw_code": "public void waitFor(){\n  checkStarted();\n  try {\n    if (myInputProcessor != null && myProcess != null) {\n      myInputProcessor.process(myProcess.getOutputStream());\n    }\n  }\n  finally {\n    waitForProcess();\n  }\n}"}
{"ids": "23274", "raw_code": "public static String extractUriFromAddress(String addr){\n  String uri=addr;\n  int index=addr.indexOf(\"<\");\n  if (index != -1) {\n    uri=addr.substring(index + 1,addr.indexOf(\">\",index));\n  }\n  return uri;\n}"}
{"ids": "46130", "raw_code": "PBKDF2KeyImpl(PBEKeySpec keySpec,String prfAlgo) throws InvalidKeySpecException {\n  char[] passwd=keySpec.getPassword();\n  if (passwd == null) {\n    this.passwd=new char[0];\n  }\n else {\n    this.passwd=passwd.clone();\n  }\n  byte[] passwdBytes=getPasswordBytes(this.passwd);\n  this.salt=keySpec.getSalt();\n  if (salt == null) {\n    throw new InvalidKeySpecException(\"Salt not found\");\n  }\n  this.iterCount=keySpec.getIterationCount();\n  if (iterCount == 0) {\n    throw new InvalidKeySpecException(\"Iteration count not found\");\n  }\n else   if (iterCount < 0) {\n    throw new InvalidKeySpecException(\"Iteration count is negative\");\n  }\n  int keyLength=keySpec.getKeyLength();\n  if (keyLength == 0) {\n    throw new InvalidKeySpecException(\"Key length not found\");\n  }\n else   if (keyLength < 0) {\n    throw new InvalidKeySpecException(\"Key length is negative\");\n  }\n  try {\n    this.prf=Mac.getInstance(prfAlgo,SunJCE.getInstance());\n  }\n catch (  NoSuchAlgorithmException nsae) {\n    InvalidKeySpecException ike=new InvalidKeySpecException();\n    ike.initCause(nsae);\n    throw ike;\n  }\n  this.key=deriveKey(prf,passwdBytes,salt,iterCount,keyLength);\n}"}
{"ids": "37004", "raw_code": "private static void showDirectoryCreationError(final String directory){\n  final String message=\"E00001: \" + \"Could not create the settings directory\";\n  final String description=CUtilityFunctions.createDescription(String.format(\"BinNavi could not create the settings directory '%s'.\",directory),new String[]{\"Your user account does not have sufficient rights to create this directory\"},new String[]{\"Changes to the global settings will not be saved\",\"The error log file can not be stored\"});\n  NaviErrorDialog.show(null,message,description);\n}"}
{"ids": "48394", "raw_code": "static byte[] pad(byte[] data){\n  int len;\n  if (data.length < 8)   len=data.length;\n else   len=data.length % 8;\n  if (len == 0)   return data;\n else {\n    byte[] padding=new byte[8 - len + data.length];\n    for (int i=padding.length - 1; i > data.length - 1; i--) {\n      padding[i]=0;\n    }\n    System.arraycopy(data,0,padding,0,data.length);\n    return padding;\n  }\n}"}
{"ids": "76910", "raw_code": "public void serialize(DataOutput out) throws IOException {\n  out.writeUTF(id);\n  out.writeUTF(version);\n  out.writeInt(sourceFiles.size());\n  for (  Entry<String,List<RevisionFile>> e : sourceFiles.entrySet()) {\n    out.writeUTF(e.getKey());\n    List<RevisionFile> files=e.getValue();\n    out.writeInt(files.size());\n    for (    RevisionFile file : files) {\n      out.writeUTF(file.fileName);\n      out.writeLong(file.size);\n    }\n  }\n}"}
{"ids": "63679", "raw_code": "public NamedColumnProjection(String[] names,boolean include){\n  m_names=new HashSet();\n  for (int i=0; i < names.length; ++i)   m_names.add(names[i]);\n  m_include=include;\n}"}
{"ids": "52040", "raw_code": "public static TimeSeriesData serializableInstance(){\n  List<String> varNames=new ArrayList<>();\n  varNames.add(\"X\");\n  varNames.add(\"Y\");\n  return new TimeSeriesData(new TetradMatrix(2,2),varNames);\n}"}
{"ids": "72190", "raw_code": "@Override public void writeVertices(final OutputStream outputStream,final Iterator<Vertex> vertexIterator,final Direction direction) throws IOException {\n  final BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(outputStream));\n  try (final ByteArrayOutputStream baos=new ByteArrayOutputStream()){\n    if (wrapAdjacencyList)     writer.write(\"{\\\"\" + GraphSONTokens.VERTICES + \"\\\":[\");\n    while (vertexIterator.hasNext()) {\n      writeVertex(baos,vertexIterator.next(),direction);\n      writer.write(new String(baos.toByteArray()));\n      if (wrapAdjacencyList) {\n        if (vertexIterator.hasNext())         writer.write(\",\");\n      }\n else {\n        writer.newLine();\n      }\n      baos.reset();\n    }\n    if (wrapAdjacencyList)     writer.write(\"]}\");\n  }\n   writer.flush();\n}"}
{"ids": "68535", "raw_code": "Collection<? extends ClientRequestResult> handleRetrieveConfigurationsRequest(final ClientRequest configurationRequest,final Session session,final Destination replyDestination){\n  if (configurationRequest.getRequestParameter() != null) {\n    return configurationLoader.getConfigurationReports(configurationRequest.getRequestParameter());\n  }\n else {\n    return configurationLoader.getConfigurationReports();\n  }\n}"}
{"ids": "60384", "raw_code": "public static boolean containsClass(@NotNull File file,String className){\n  String entryPath=className.replace('.','/') + \".class\";\n  return containsEntry(file,entryPath);\n}"}
{"ids": "36583", "raw_code": "private double sin(double angle){\n  while (angle >= 180.0f) {\n    angle-=180.0;\n  }\n  double value=angle / 180.0f * Math.PI;\n  return Math.sin(value);\n}"}
{"ids": "29381", "raw_code": "public void remove(T graphic){\nsynchronized (mLock) {\n    mGraphics.remove(graphic);\n  }\n  postInvalidate();\n}"}
{"ids": "80948", "raw_code": "public synchronized void accessed(Object object){\n  historyList.remove(object);\n  historyList.add(object);\n}"}
{"ids": "3100", "raw_code": "public static boolean isEmpty(String string){\n  return string == null || string.length() <= 0;\n}"}
{"ids": "53275", "raw_code": "@Override @SuppressWarnings(\"unchecked\") protected void heapifyUpComparable(int pos,Object elem){\n  final Comparable<Object> cur=(Comparable<Object>)elem;\n  while (pos > 0) {\n    final int parent=(pos - 1) >>> 1;\n    Object par=queue[parent];\n    if (cur.compareTo(par) >= 0) {\n      break;\n    }\n    queue[pos]=par;\n    index.put(par,pos);\n    pos=parent;\n  }\n  queue[pos]=cur;\n  index.put(cur,pos);\n}"}
{"ids": "49987", "raw_code": "private void updateReleaseLocks() throws CacheException {\n  if (numLocks.addAndGet(-1) < 0) {\n    throw new CacheException(\"Redundant release of GPU object\");\n  }\n  if (evictionPolicy == EvictionPolicy.LRU) {\n    timestamp.set(System.nanoTime());\n  }\n else   if (evictionPolicy == EvictionPolicy.LFU) {\n    timestamp.addAndGet(1);\n  }\n else   if (evictionPolicy == EvictionPolicy.MIN_EVICT) {\n  }\n else {\n    throw new CacheException(\"The eviction policy is not supported:\" + evictionPolicy.name());\n  }\n}"}
{"ids": "1400", "raw_code": "public static Short toShort(char c){\n  return Short.valueOf(toShortValue(c));\n}"}
{"ids": "76893", "raw_code": "protected GeoPoint[] findCrossings(final PlanetModel planetModel,final Plane q,final Membership[] bounds,final Membership[] moreBounds){\n  final double lineVectorX=y * q.z - z * q.y;\n  final double lineVectorY=z * q.x - x * q.z;\n  final double lineVectorZ=x * q.y - y * q.x;\n  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {\n    return NO_POINTS;\n  }\n  double x0;\n  double y0;\n  double z0;\n  final double denomYZ=this.y * q.z - this.z * q.y;\n  final double denomXZ=this.x * q.z - this.z * q.x;\n  final double denomXY=this.x * q.y - this.y * q.x;\n  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {\n    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {\n      return NO_POINTS;\n    }\n    final double denom=1.0 / denomYZ;\n    x0=0.0;\n    y0=(-this.D * q.z - this.z * -q.D) * denom;\n    z0=(this.y * -q.D + this.D * q.y) * denom;\n  }\n else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {\n    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {\n      return NO_POINTS;\n    }\n    final double denom=1.0 / denomXZ;\n    x0=(-this.D * q.z - this.z * -q.D) * denom;\n    y0=0.0;\n    z0=(this.x * -q.D + this.D * q.x) * denom;\n  }\n else {\n    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {\n      return NO_POINTS;\n    }\n    final double denom=1.0 / denomXY;\n    x0=(-this.D * q.y - this.y * -q.D) * denom;\n    y0=(this.x * -q.D + this.D * q.x) * denom;\n    z0=0.0;\n  }\n  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;\n  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);\n  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;\n  final double BsquaredMinus=B * B - 4.0 * A * C;\n  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {\n    return NO_POINTS;\n  }\n else   if (BsquaredMinus > 0.0) {\n    final double inverse2A=1.0 / (2.0 * A);\n    final double sqrtTerm=Math.sqrt(BsquaredMinus);\n    final double t1=(-B + sqrtTerm) * inverse2A;\n    final double t2=(-B - sqrtTerm) * inverse2A;\n    final double point1X=lineVectorX * t1 + x0;\n    final double point1Y=lineVectorY * t1 + y0;\n    final double point1Z=lineVectorZ * t1 + z0;\n    final double point2X=lineVectorX * t2 + x0;\n    final double point2Y=lineVectorY * t2 + y0;\n    final double point2Z=lineVectorZ * t2 + z0;\n    boolean point1Valid=true;\n    boolean point2Valid=true;\n    for (    final Membership bound : bounds) {\n      if (!bound.isWithin(point1X,point1Y,point1Z)) {\n        point1Valid=false;\n        break;\n      }\n    }\n    if (point1Valid) {\n      for (      final Membership bound : moreBounds) {\n        if (!bound.isWithin(point1X,point1Y,point1Z)) {\n          point1Valid=false;\n          break;\n        }\n      }\n    }\n    for (    final Membership bound : bounds) {\n      if (!bound.isWithin(point2X,point2Y,point2Z)) {\n        point2Valid=false;\n        break;\n      }\n    }\n    if (point2Valid) {\n      for (      final Membership bound : moreBounds) {\n        if (!bound.isWithin(point2X,point2Y,point2Z)) {\n          point2Valid=false;\n          break;\n        }\n      }\n    }\n    if (point1Valid && point2Valid) {\n      return new GeoPoint[]{new GeoPoint(point1X,point1Y,point1Z),new GeoPoint(point2X,point2Y,point2Z)};\n    }\n    if (point1Valid) {\n      return new GeoPoint[]{new GeoPoint(point1X,point1Y,point1Z)};\n    }\n    if (point2Valid) {\n      return new GeoPoint[]{new GeoPoint(point2X,point2Y,point2Z)};\n    }\n    return NO_POINTS;\n  }\n else {\n    return NO_POINTS;\n  }\n}"}
{"ids": "77214", "raw_code": "public static void encodeDimension(float value,byte dest[],int offset){\n  NumericUtils.intToSortableBytes(NumericUtils.floatToSortableInt(value),dest,offset);\n}"}
{"ids": "24777", "raw_code": "public long minflt(){\n  return Long.parseLong(fields[9]);\n}"}
{"ids": "19670", "raw_code": "public void endFilterInterval(){\n  endMillis=System.currentTimeMillis();\n  totalFilterMillis+=(endMillis - intervalStartMillis);\n  state=TaskState.other;\n}"}
{"ids": "66466", "raw_code": "public String process(String to_process){\n  if (to_process == null || to_process.length() == 0)   return \"\";\n  String tmp=\"\";\n  StringTokenizer st=new StringTokenizer(to_process,\" \",true);\n  StringBuffer newValue=new StringBuffer(to_process.length() + 50);\n  while (st.hasMoreTokens()) {\n    tmp=st.nextToken();\n    if (hasAttribute(tmp))     newValue.append((String)get(tmp));\n else     newValue.append(tmp);\n  }\n  return newValue.toString();\n}"}
{"ids": "70670", "raw_code": "public static final void writeListXml(List val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {\n  if (val == null) {\n    out.startTag(null,\"null\");\n    out.endTag(null,\"null\");\n    return;\n  }\n  out.startTag(null,\"list\");\n  if (name != null) {\n    out.attribute(null,\"name\",name);\n  }\n  int n=val.size();\n  int i=0;\n  while (i < n) {\n    writeValueXml(val.get(i),null,out);\n    i++;\n  }\n  out.endTag(null,\"list\");\n}"}
{"ids": "14957", "raw_code": "private void changePassword(String userType,String oldPassword,String newPassword) throws Exception {\n  String fileEncPassword=getUserPassword(userType);\n  String userDN=getUserDN(userType);\n  if ((fileEncPassword == null) || (fileEncPassword.length() == 0) || (userDN == null)|| (userDN.length() == 0)) {\n    debug.error(\"Null password or user DN for user type: \" + userType + \" from file: \"+ configFile);\n    throw new XMLException(i18n.getString(\"dscfg-corrupted-serverconfig\"));\n  }\n  if (!oldPassword.equals(AccessController.doPrivileged(new DecodeAction(fileEncPassword)))) {\n    throw new Exception(i18n.getString(\"dscfg-old-passwd-donot-match\"));\n  }\n  if (isAMSDKConfigured) {\n    try {\n      new AuthContext(new AuthPrincipal(userDN),newPassword.toCharArray());\n      if (debug.messageEnabled()) {\n        debug.message(\"DN: \" + userDN + \" new password is already updated in the directory\");\n      }\n    }\n catch (    LoginException lee) {\n      try {\n        AuthContext ac=new AuthContext(new AuthPrincipal(userDN),oldPassword.toCharArray());\n        PersistentObject user=UMSObject.getObject(ac.getSSOToken(),new Guid(userDN));\n        if (debug.messageEnabled()) {\n          debug.message(\"For DN: \" + userDN + \" changing password in directory\");\n        }\n        user.setAttribute(new Attr(\"userPassword\",newPassword));\n        user.save();\n      }\n catch (      LoginException le) {\n        if (debug.warningEnabled()) {\n          debug.warning(\"For DN: \" + userDN + \" new and old passwords donot match with directory\");\n        }\n        throw new Exception(i18n.getString(\"dscfg-invalid-password\") + \"\\n\" + le.getMessage());\n      }\n    }\n  }\n  setUserPassword(userType,newPassword);\n}"}
{"ids": "81366", "raw_code": "public int hashCode(Object key){\n  return (key.hashCode() & 0x7FFFFFFF) % this.keyTable.length;\n}"}
{"ids": "86183", "raw_code": "public AtomicArrayBase(E[] array){\n  this.array=Arrays.copyOf(array,array.length,Object[].class);\n}"}
{"ids": "74150", "raw_code": "public void apply(){\n  setSpeedMap();\n  setNXdata();\n}"}
{"ids": "46918", "raw_code": "public void push(final String value){\n  if (value == null) {\n    mv.visitInsn(Opcodes.ACONST_NULL);\n  }\n else {\n    mv.visitLdcInsn(value);\n  }\n}"}
{"ids": "37143", "raw_code": "public void init(){\n  m_projectTree.setSelectionPath(new TreePath(m_projectTree.getRootNode()));\n}"}
{"ids": "3627", "raw_code": "public int read() throws IOException {\n  return is.read();\n}"}
{"ids": "65884", "raw_code": "private void displayCalendar(){\n  KeyNamePair pp=(KeyNamePair)fieldResource.getSelectedItem();\n  if (pp == null)   return;\n  int S_Resource_ID=pp.getKey();\n  m_mAssignment.setS_Resource_ID(S_Resource_ID);\n  Timestamp date=fieldDate.getTimestamp();\n  int index=timePane.getSelectedIndex();\n  log.config(\"Index=\" + index + \", ID=\"+ S_Resource_ID+ \" - \"+ date);\n  m_loading=true;\n  if (index == 0)   daySchedule.recreate(S_Resource_ID,date);\n else   if (index == 1)   weekSchedule.recreate(S_Resource_ID,date);\n else   monthSchedule.recreate(S_Resource_ID,date);\n  m_loading=false;\n  repaint();\n}"}
{"ids": "82009", "raw_code": "public static void assertException(RuntimeException exception,Runnable expression,String errorMessage){\n  if (verbose) {\n    log(\"assertException(\" + exception + \", \"+ expression+ \", \"+ errorMessage+ \")\");\n  }\n  try {\n    expression.run();\n  }\n catch (  RuntimeException failure) {\n    if (exception.getClass() != failure.getClass()) {\n      TestUtils.fail(errorMessage);\n    }\n    return;\n  }\n  TestUtils.fail(errorMessage);\n}"}
{"ids": "13680", "raw_code": "public boolean isParityCorrect(byte[][] shards,int firstByte,int byteCount){\n  checkBuffersAndSizes(shards,firstByte,byteCount);\n  byte[][] toCheck=new byte[parityShardCount][];\n  System.arraycopy(shards,dataShardCount,toCheck,0,parityShardCount);\n  return codingLoop.checkSomeShards(parityRows,shards,dataShardCount,toCheck,parityShardCount,firstByte,byteCount,null);\n}"}
{"ids": "35679", "raw_code": "protected void onSendSuccess(RecordBuffer<R> buffer){\n  sendSuccess.incrementAndGet();\n  logger.trace(\"{}:{} Send SUCCESS\",name(),buffer);\n  try {\n    checkpointer.saveCheckpoint(buffer);\n  }\n catch (  Exception e) {\n    logger.error(\"{}:{} Error in onSendSuccess\",name(),buffer,e);\n  }\n}"}
{"ids": "60525", "raw_code": "public void write(String s,int off,int len){\n  if (text != null) {\n    text.append(s.substring(off,off + len));\n    if ((col+=len) > wrap)     println();\n  }\n else {\n    super.write(s,off,len);\n    flush();\n  }\n}"}
{"ids": "21426", "raw_code": "public Zoneset showActiveZoneset(Integer vsanId) throws NetworkDeviceControllerException {\n  List<Zoneset> zonesets=showZoneset(vsanId,true,null,false,false);\n  return zonesets.isEmpty() ? null : zonesets.get(0);\n}"}
{"ids": "9190", "raw_code": "private final short validatePermSplitFactor(String splitFactor) throws AdeFlowException {\n  short permSplitFactor=Short.parseShort(splitFactor);\n  if (permSplitFactor <= 0 || ((m_outerFramingFlow.getDuration() / permSplitFactor) < MILLISECONDS_IN_ONE_MINUTE)) {\n    throw new AdeFlowException(\"Permanent Split Factor cannot be negative or 0.\");\n  }\n  return permSplitFactor;\n}"}
{"ids": "7202", "raw_code": "public static Calendar toCalendar(String datestring,String format){\n  Date d=parse(datestring,format);\n  Calendar cal=Calendar.getInstance();\n  cal.setTimeInMillis(d.getTime());\n  return cal;\n}"}
{"ids": "80573", "raw_code": "private static void translateCompatibilityToPaths(RPAction action){\n  if (action.has(EquipActionConsts.BASE_OBJECT)) {\n    List<String> path=Arrays.asList(action.get(EquipActionConsts.BASE_OBJECT),action.get(EquipActionConsts.BASE_SLOT),action.get(EquipActionConsts.BASE_ITEM));\n    action.put(EquipActionConsts.SOURCE_PATH,path);\n  }\n else {\n    List<String> path=Arrays.asList(action.get(EquipActionConsts.BASE_ITEM));\n    action.put(EquipActionConsts.SOURCE_PATH,path);\n  }\n}"}
{"ids": "65178", "raw_code": "public Builder addMenuItem(@NonNull String label,@NonNull PendingIntent pendingIntent){\n  if (mMenuItems == null)   mMenuItems=new ArrayList<>();\n  Bundle bundle=new Bundle();\n  bundle.putString(KEY_MENU_ITEM_TITLE,label);\n  bundle.putParcelable(KEY_PENDING_INTENT,pendingIntent);\n  mMenuItems.add(bundle);\n  return this;\n}"}
{"ids": "53397", "raw_code": "public SparseFloatVector(TIntFloatMap values,int dimensionality) throws IllegalArgumentException {\n  if (values.size() > dimensionality) {\n    throw new IllegalArgumentException(\"values.size() > dimensionality!\");\n  }\n  this.indexes=new int[values.size()];\n  this.values=new float[values.size()];\n{\n    TIntFloatIterator iter=values.iterator();\n    for (int i=0; iter.hasNext(); i++) {\n      iter.advance();\n      this.indexes[i]=iter.key();\n    }\n    Arrays.sort(this.indexes);\n  }\n{\n    for (int i=0; i < values.size(); i++) {\n      this.values[i]=values.get(this.indexes[i]);\n    }\n  }\n  this.dimensionality=dimensionality;\n  final int maxdim=getMaxDim();\n  if (maxdim > dimensionality) {\n    throw new IllegalArgumentException(\"Given dimensionality \" + dimensionality + \" is too small w.r.t. the given values (occurring maximum: \"+ maxdim+ \").\");\n  }\n}"}
{"ids": "45921", "raw_code": "public byte[] canonSerializeToByteArray(Node node) throws Exception {\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  canon.setWriter(baos);\n  canon.notReset();\n  canon.canonicalizeSubtree(node);\n  return baos.toByteArray();\n}"}
{"ids": "950", "raw_code": "public DefinedMethod addDescription(String description){\n  this.description=Optional.of(description);\n  return this;\n}"}
{"ids": "25694", "raw_code": "public int addFlattenedColumn(Object o,int[] dims) throws FitsException {\n  return addFlattenedColumn(o,dims,false);\n}"}
{"ids": "55864", "raw_code": "public final void writeToStream(DataOutputStream dos) throws IOException {\n  dos.writeUTF(event);\n  dos.writeUTF(site);\n  dos.writeUTF(date);\n  dos.writeUTF(round);\n  dos.writeUTF(white);\n  dos.writeUTF(black);\n  dos.writeUTF(TextIO.toFEN(startPos));\n  dos.writeUTF(timeControl);\n  dos.writeUTF(whiteTimeControl);\n  dos.writeUTF(blackTimeControl);\n  int nTags=tagPairs.size();\n  dos.writeInt(nTags);\n  for (int i=0; i < nTags; i++) {\n    dos.writeUTF(tagPairs.get(i).tagName);\n    dos.writeUTF(tagPairs.get(i).tagValue);\n  }\n  Node.writeToStream(dos,rootNode);\n  ArrayList<Integer> pathFromRoot=currentNode.getPathFromRoot();\n  int pathLen=pathFromRoot.size();\n  dos.writeInt(pathLen);\n  for (int i=0; i < pathLen; i++)   dos.writeInt(pathFromRoot.get(i));\n}"}
{"ids": "48773", "raw_code": "public void registerSource(ProgressSource pi){\nsynchronized (progressSourceList) {\n    if (progressSourceList.contains(pi))     return;\n    progressSourceList.add(pi);\n  }\n  if (progressListenerList.size() > 0) {\n    ArrayList<ProgressListener> listeners=new ArrayList<ProgressListener>();\nsynchronized (progressListenerList) {\n      for (Iterator<ProgressListener> iter=progressListenerList.iterator(); iter.hasNext(); ) {\n        listeners.add(iter.next());\n      }\n    }\n    for (Iterator<ProgressListener> iter=listeners.iterator(); iter.hasNext(); ) {\n      ProgressListener pl=iter.next();\n      ProgressEvent pe=new ProgressEvent(pi,pi.getURL(),pi.getMethod(),pi.getContentType(),pi.getState(),pi.getProgress(),pi.getExpected());\n      pl.progressStart(pe);\n    }\n  }\n}"}
{"ids": "17113", "raw_code": "private static Map<String,String> extractKeyValuePairs(String props,ObjectName mbean){\n  Map<String,String> map=new LinkedHashMap<String,String>();\n  int eq=props.indexOf(\"=\");\n  while (eq != -1) {\n    String key=props.substring(0,eq);\n    String value=mbean.getKeyProperty(key);\n    map.put(key,value);\n    props=props.substring(key.length() + 1 + value.length());\n    if (props.startsWith(\",\")) {\n      props=props.substring(1);\n    }\n    eq=props.indexOf(\"=\");\n  }\n  return map;\n}"}
{"ids": "66232", "raw_code": "protected void paintContentBorderLeftEdge(Graphics g,int tabPlacement,int selectedIndex,int x,int y,int w,int h){\n  Rectangle selRect=selectedIndex < 0 ? null : getTabBounds(selectedIndex,calcRect);\n  g.setColor(selectHighlight);\n  if (tabPlacement != LEFT || selectedIndex < 0 || (selRect.x + selRect.width + 1 < x) || (selRect.y < y || selRect.y > y + h)) {\n    g.drawLine(x,y,x,y + h - 2);\n  }\n else {\n    g.drawLine(x,y,x,selRect.y + 1);\n    if (selRect.y + selRect.height < y + h - 2)     g.drawLine(x,selRect.y + selRect.height + 1,x,y + h - 2);\n  }\n}"}
{"ids": "86543", "raw_code": "public final Flux<T> sample(Duration timespan){\n  return sampleMillis(timespan.toMillis());\n}"}
{"ids": "53345", "raw_code": "@Override public boolean hasValuesDescription(){\n  return restrictionClass != null && restrictionClass != Object.class;\n}"}
{"ids": "78837", "raw_code": "public SmbFile(String url) throws MalformedURLException {\n  this(new URL(null,url,Handler.SMB_HANDLER));\n}"}
{"ids": "34130", "raw_code": "public static boolean isAudio(String mimeType){\n  if (mimeType != null) {\n    if (mimeType.startsWith(\"audio/\"))     return true;\n else     return false;\n  }\n else   return false;\n}"}
{"ids": "77834", "raw_code": "private void restoreWidget(Key key,byte[] buffer,int dataSize) throws IOException {\n  if (VERBOSE)   Log.v(TAG,\"unpacking widget \" + key.id);\n  if (DEBUG)   Log.d(TAG,\"read (\" + buffer.length + \"): \"+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));\n  Widget widget=unpackProto(new Widget(),buffer,dataSize);\n  if (DEBUG)   Log.d(TAG,\"unpacked \" + widget.provider);\n  if (widget.icon.data != null) {\n    Bitmap icon=BitmapFactory.decodeByteArray(widget.icon.data,0,widget.icon.data.length);\n    if (icon == null) {\n      Log.w(TAG,\"failed to unpack widget icon for \" + key.name);\n    }\n else {\n      IconCache.preloadIcon(mContext,ComponentName.unflattenFromString(widget.provider),icon,widget.icon.dpi);\n    }\n  }\n}"}
{"ids": "27344", "raw_code": "protected int assertLineTerminates(int c) throws IOException, RDFParseException {\n  c=reader.read();\n  c=skipWhitespace(c);\n  if (c != -1 && c != '\\r' && c != '\\n') {\n    reportFatalError(\"Content after '.' is not allowed\");\n  }\n  return c;\n}"}
{"ids": "68031", "raw_code": "static private XMLEvent constructEvent(int eventType,WbXmlStreamReader stream) throws XMLStreamException {\n  log.log(Level.FINE,\"constructEvent()\");\n  XMLEvent event;\nswitch (eventType) {\ncase XMLStreamConstants.START_DOCUMENT:\n    event=new WbXmlStartDocumentEvent(stream);\n  break;\ncase XMLStreamConstants.END_DOCUMENT:\nevent=new WbXmlEndDocumentEvent(stream);\nbreak;\ncase XMLStreamConstants.START_ELEMENT:\nevent=new WbXmlStartElementEvent(stream);\nbreak;\ncase XMLStreamConstants.END_ELEMENT:\nevent=new WbXmlEndElementEvent(stream);\nbreak;\ncase XMLStreamConstants.CHARACTERS:\ncase XMLStreamConstants.CDATA:\nevent=new WbXmlCharactersEvent(stream);\nbreak;\ndefault :\nthrow new UnsupportedOperationException(String.format(\"The %i event is not supported yet\",eventType));\n}\nlog.log(Level.FINE,\"constructEvent(): {0}\",event);\nreturn event;\n}"}
{"ids": "4304", "raw_code": "private void verifyGridState(){\n  Integer rowLength=null;\n  int rowPos=0;\n  for (  List<Object> row : grid) {\n    if (rowLength != null && rowLength != row.size()) {\n      throw new IllegalStateException(\"Grid rows do not have the same number of cells, previous: \" + rowLength + \", this: \"+ row.size()+ \", at row: \"+ rowPos);\n    }\n    rowPos++;\n    rowLength=row.size();\n  }\n}"}
{"ids": "63190", "raw_code": "public static String readStringAndClose(Reader in,int length) throws IOException {\n  try {\n    if (length <= 0) {\n      length=Integer.MAX_VALUE;\n    }\n    int block=Math.min(Constants.IO_BUFFER_SIZE,length);\n    StringWriter out=new StringWriter(block);\n    copyAndCloseInput(in,out,length);\n    return out.toString();\n  }\n  finally {\n    in.close();\n  }\n}"}
{"ids": "47979", "raw_code": "protected void beginPath(){\n  prepDrawing();\n  mPSStream.println(NEWPATH_STR);\n  mPenX=0;\n  mPenY=0;\n}"}
{"ids": "54646", "raw_code": "private void sendTcpRequest(Socket socket,String request) throws ApiException {\n  try {\n    LogUtils.LOGD(TAG,\"Sending request via TCP: \" + request);\n    BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n    writer.write(request);\n    writer.flush();\n  }\n catch (  Exception e) {\n    LogUtils.LOGW(TAG,\"Failed to send TCP request.\",e);\n    disconnect();\n    throw new ApiException(ApiException.IO_EXCEPTION_WHILE_SENDING_REQUEST,e);\n  }\n}"}
{"ids": "9214", "raw_code": "public static String cleanString(String src){\n  if (src == null) {\n    return null;\n  }\n  boolean foundBad=false;\n  final CharacterIterator it=new StringCharacterIterator(src);\n  for (char c=it.first(); c != CharacterIterator.DONE; c=it.next()) {\n    if (c < ASCII_PRINTABLE_LOW || c >= ASCII_PRINTABLE_HI) {\n      foundBad=true;\n      break;\n    }\n  }\n  if (!foundBad) {\n    return src;\n  }\n  final StringBuilder res=new StringBuilder();\n  for (char c=it.first(); c != CharacterIterator.DONE; c=it.next()) {\n    if (c < ASCII_PRINTABLE_LOW || c >= ASCII_PRINTABLE_HI) {\n      res.append(ASCII_SPACE);\n    }\n else {\n      res.append(c);\n    }\n  }\n  return res.toString();\n}"}
{"ids": "52092", "raw_code": "public static ManualLagGraph serializableInstance(){\n  return new ManualLagGraph(ManualLagGraphParams.serializableInstance());\n}"}
{"ids": "45088", "raw_code": "public void updateActions(){\n  String text;\n  Action a=RTextArea.getAction(RTextArea.UNDO_ACTION);\n  if (canUndo()) {\n    a.setEnabled(true);\n    text=getUndoPresentationName();\n    a.putValue(Action.NAME,text);\n    a.putValue(Action.SHORT_DESCRIPTION,text);\n  }\n else {\n    if (a.isEnabled()) {\n      a.setEnabled(false);\n      text=cantUndoText;\n      a.putValue(Action.NAME,text);\n      a.putValue(Action.SHORT_DESCRIPTION,text);\n    }\n  }\n  a=RTextArea.getAction(RTextArea.REDO_ACTION);\n  if (canRedo()) {\n    a.setEnabled(true);\n    text=getRedoPresentationName();\n    a.putValue(Action.NAME,text);\n    a.putValue(Action.SHORT_DESCRIPTION,text);\n  }\n else {\n    if (a.isEnabled()) {\n      a.setEnabled(false);\n      text=cantRedoText;\n      a.putValue(Action.NAME,text);\n      a.putValue(Action.SHORT_DESCRIPTION,text);\n    }\n  }\n}"}
{"ids": "71538", "raw_code": "private static List<SizePair> generateValidPreviewSizeList(Camera camera){\n  Camera.Parameters parameters=camera.getParameters();\n  List<android.hardware.Camera.Size> supportedPreviewSizes=parameters.getSupportedPreviewSizes();\n  List<android.hardware.Camera.Size> supportedPictureSizes=parameters.getSupportedPictureSizes();\n  List<SizePair> validPreviewSizes=new ArrayList<>();\n  for (  android.hardware.Camera.Size previewSize : supportedPreviewSizes) {\n    float previewAspectRatio=(float)previewSize.width / (float)previewSize.height;\n    for (    android.hardware.Camera.Size pictureSize : supportedPictureSizes) {\n      float pictureAspectRatio=(float)pictureSize.width / (float)pictureSize.height;\n      if (Math.abs(previewAspectRatio - pictureAspectRatio) < ASPECT_RATIO_TOLERANCE) {\n        validPreviewSizes.add(new SizePair(previewSize,pictureSize));\n        break;\n      }\n    }\n  }\n  if (validPreviewSizes.size() == 0) {\n    Log.w(TAG,\"No preview sizes have a corresponding same-aspect-ratio picture size\");\n    for (    android.hardware.Camera.Size previewSize : supportedPreviewSizes) {\n      validPreviewSizes.add(new SizePair(previewSize,null));\n    }\n  }\n  return validPreviewSizes;\n}"}
{"ids": "6231", "raw_code": "public void addScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.add(listener);\n}"}
{"ids": "10477", "raw_code": "public static boolean hasDependency(MavenProject project,String groupId){\n  Set<Artifact> artifacts=project.getArtifacts();\n  if (artifacts != null) {\n    for (    Artifact artifact : artifacts) {\n      String scope=artifact.getScope();\n      if (Objects.equal(\"test\",scope)) {\n        continue;\n      }\n      if (Objects.equal(groupId,artifact.getGroupId())) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "12623", "raw_code": "public ContourGenerator(URL url,float modelMean,float modelStddev) throws IOException {\n  this.modelMean=modelMean;\n  this.modelStddev=modelStddev;\n  List termsList=new ArrayList();\n  String line;\n  BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream()));\n  line=reader.readLine();\n  while (line != null) {\n    if (!line.startsWith(\"***\")) {\n      parseAndAdd(termsList,line);\n    }\n    line=reader.readLine();\n  }\n  terms=(F0ModelTerm[])termsList.toArray(terms);\n  reader.close();\n}"}
{"ids": "62092", "raw_code": "public void addComment(String comment){\n  if (frame != null) {\n    chatTab.addComment(comment);\n  }\n  if (tabbedPane.getSelectedIndex() == 2) {\n    editorTab.displayComment(comment);\n  }\n}"}
{"ids": "76667", "raw_code": "public static byte[] hexStringToBytes(String hexString){\n  if (hexString == null || hexString.equals(\"\")) {\n    return null;\n  }\n  hexString=hexString.toUpperCase();\n  int length=hexString.length() / 2;\n  char[] hexChars=hexString.toCharArray();\n  byte[] d=new byte[length];\n  for (int i=0; i < length; i++) {\n    int pos=i * 2;\n    d[i]=(byte)(charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));\n  }\n  return d;\n}"}
{"ids": "16092", "raw_code": "private void decompose(List<Object> elementPairs,List<Object> printerList,List<Object> parserList){\n  int size=elementPairs.size();\n  for (int i=0; i < size; i+=2) {\n    Object element=elementPairs.get(i);\n    if (element instanceof DateTimePrinter) {\n      if (element instanceof Composite) {\n        addArrayToList(printerList,((Composite)element).iPrinters);\n      }\n else {\n        printerList.add(element);\n      }\n    }\n    element=elementPairs.get(i + 1);\n    if (element instanceof DateTimeParser) {\n      if (element instanceof Composite) {\n        addArrayToList(parserList,((Composite)element).iParsers);\n      }\n else {\n        parserList.add(element);\n      }\n    }\n  }\n}"}
{"ids": "47342", "raw_code": "private String processIntegerToken(String token){\n  String result=token.replaceAll(\"\" + groupSeparator,\"\");\n  boolean isNegative=false;\n  int preLen=negativePrefix.length();\n  if ((preLen > 0) && result.startsWith(negativePrefix)) {\n    isNegative=true;\n    result=result.substring(preLen);\n  }\n  int sufLen=negativeSuffix.length();\n  if ((sufLen > 0) && result.endsWith(negativeSuffix)) {\n    isNegative=true;\n    result=result.substring(result.length() - sufLen,result.length());\n  }\n  if (isNegative)   result=\"-\" + result;\n  return result;\n}"}
{"ids": "11138", "raw_code": "public void writeGraphics(String graphicsSaveFile) throws IOException {\n  FileOutputStream ostream=new FileOutputStream(graphicsSaveFile);\n  ObjectOutputStream objectstream=new ObjectOutputStream(ostream);\n  writeGraphics(objectstream);\n  objectstream.close();\n}"}
{"ids": "61985", "raw_code": "@Override public void addInputNode(BNode inputNode){\n  super.addInputNode(inputNode);\n}"}
{"ids": "16949", "raw_code": "public void removeDependency(TaskDependency dep){\n  Node srcNode=myNodeMap.get(dep.getDependee());\n  Node dstNode=myNodeMap.get(dep.getDependant());\n  if (srcNode == null && dstNode == null) {\n    return;\n  }\n  assert (srcNode != null && dstNode != null) : \"Inconsistent dependency graph state: for dep=\" + dep + \" one of the ends is missing\";\n  DependencyEdge diedEdge=findExplicitDependency(dep,srcNode,dstNode);\n  if (diedEdge == null) {\n    return;\n  }\n  removeEdge(diedEdge);\n  for (  DependencyEdge edge : Lists.newArrayList(srcNode.getOutgoing())) {\n    if (edge instanceof ImplicitInheritedDependency) {\n      if (((ImplicitInheritedDependency)edge).myExplicitDep == diedEdge) {\n        removeEdge(edge);\n      }\n    }\n  }\n  fireGraphChanged();\n}"}
{"ids": "28448", "raw_code": "public static boolean isExtension(String filename,Collection<String> extensions){\n  if (filename == null) {\n    return false;\n  }\n  if (extensions == null || extensions.isEmpty()) {\n    return indexOfExtension(filename) == -1;\n  }\n  String fileExt=getExtension(filename);\n  for (  String extension : extensions) {\n    if (fileExt.equals(extension)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "22592", "raw_code": "public VNXeCommandJob modifyConsistencyGroupAsync(String id,LunGroupModifyParam param){\n  StringBuilder urlBld=new StringBuilder(URL_MODIFY1);\n  urlBld.append(id);\n  urlBld.append(URL_MODIFY2);\n  _url=urlBld.toString();\n  return postRequestAsync(param);\n}"}
{"ids": "84158", "raw_code": "public Object readRemote() throws IOException {\n  String type=readType();\n  String url=readString();\n  return resolveRemote(type,url);\n}"}
{"ids": "7989", "raw_code": "private static JFreeChart createChart(){\n  XYSeries series1=new XYSeries(\"Series 1\");\n  series1.add(1.0,1.0);\n  series1.add(2.0,2.0);\n  series1.add(3.0,3.0);\n  XYDataset dataset=new XYSeriesCollection(series1);\n  return ChartFactory.createTimeSeriesChart(\"XY Line Chart\",\"Domain\",\"Range\",dataset,true,true,true);\n}"}
{"ids": "18193", "raw_code": "private void DTDprolog() throws SAXException, IOException {\n  final java.io.Writer writer=m_writer;\n  if (m_needToOutputDocTypeDecl) {\n    outputDocTypeDecl(m_elemContext.m_elementName,false);\n    m_needToOutputDocTypeDecl=false;\n  }\n  if (m_inDoctype) {\n    writer.write(\" [\");\n    writer.write(m_lineSep,0,m_lineSepLen);\n    m_inDoctype=false;\n  }\n}"}
{"ids": "83022", "raw_code": "public CacheSet querySequential(Predicate... selectors){\n  checkNotNull(selectors);\n  Collection<Object> resultCollection=new ArrayList<>(items);\n  Collection<Object> filterCollection=new LinkedList<>();\n  Collection<Object> tempCollection;\n  int i=0;\n  while ((i < selectors.length) && (resultCollection.size() > 0)) {\n    CollectionUtils.select(resultCollection,selectors[i],filterCollection);\n    tempCollection=resultCollection;\n    resultCollection=filterCollection;\n    filterCollection=tempCollection;\n    filterCollection.clear();\n    i++;\n  }\n  return new CacheSet(resultCollection);\n}"}
{"ids": "56645", "raw_code": "public static <A>SetTValue<A> fromStream(final AnyMValue<Stream<A>> monads){\n  return of(monads.map(null));\n}"}
{"ids": "6958", "raw_code": "public static CCBitmapFontConfiguration FNTConfigLoadFile(String fntFile){\n  CCBitmapFontConfiguration ret=null;\n  if (configurations == null)   configurations=new HashMap<String,CCBitmapFontConfiguration>();\n  ret=configurations.get(fntFile);\n  if (ret == null) {\n    ret=CCBitmapFontConfiguration.configuration(fntFile);\n    configurations.put(fntFile,ret);\n  }\n  return ret;\n}"}
{"ids": "68218", "raw_code": "public void addCriteria(Criteria otherCriteria){\n  if (otherCriteria instanceof AdvancedCriteria || otherCriteria instanceof Criterion) {\n    throw new IllegalArgumentException(\"Cannot add a Criterion or AdvancedCriteria to simple Criteria. \" + \"Use Criteria.asAdvancedCriteria() to convert to AdvancedCriteria\");\n  }\n  Map otherMap=otherCriteria.getValues();\n  Set otherKeys=otherMap.keySet();\n  for (Iterator i=otherKeys.iterator(); i.hasNext(); ) {\n    String field=(String)i.next();\n    Object value=otherMap.get(field);\n    JSOHelper.setAttribute(jsObj,field,value);\n  }\n}"}
{"ids": "9727", "raw_code": "public DNetscapeSslServerName(JDialog parent,byte[] value) throws IOException {\n  super(parent);\n  setTitle(res.getString(\"DNetscapeSslServerName.Title\"));\n  initComponents();\n  prepopulateWithValue(value);\n}"}
{"ids": "7287", "raw_code": "public static EventBean[] resizeArray(EventBean[] oldArray,int newSize){\n  if (oldArray == null) {\n    return null;\n  }\n  if (oldArray.length == newSize) {\n    return oldArray;\n  }\n  EventBean[] newArray=new EventBean[newSize];\n  int preserveLength=Math.min(oldArray.length,newSize);\n  if (preserveLength > 0) {\n    System.arraycopy(oldArray,0,newArray,0,preserveLength);\n  }\n  return newArray;\n}"}
{"ids": "16188", "raw_code": "public static SpannableString spanText(CharSequence text,Object... spans){\n  SpannableString spannableString=new SpannableString(text);\n  for (  Object span : spans) {\n    spannableString.setSpan(span,0,text.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n  }\n  return spannableString;\n}"}
{"ids": "59660", "raw_code": "@SuppressWarnings(\"unchecked\") protected <T>List<T> query(Class<T> modelClass,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy,String limit,List<AssociationsInfo> foreignKeyAssociations){\n  List<T> dataList=new ArrayList<T>();\n  Cursor cursor=null;\n  try {\n    List<Field> supportedFields=getSupportedFields(modelClass.getName());\n    String tableName=getTableName(modelClass);\n    String[] customizedColumns=getCustomizedColumns(columns,foreignKeyAssociations);\n    cursor=mDatabase.query(tableName,customizedColumns,selection,selectionArgs,groupBy,having,orderBy,limit);\n    if (cursor.moveToFirst()) {\n      SparseArray<QueryInfoCache> queryInfoCacheSparseArray=new SparseArray<QueryInfoCache>();\n      do {\n        T modelInstance=(T)createInstanceFromClass(modelClass);\n        giveBaseObjIdValue((DataSupport)modelInstance,cursor.getLong(cursor.getColumnIndexOrThrow(\"id\")));\n        setValueToModel(modelInstance,supportedFields,foreignKeyAssociations,cursor,queryInfoCacheSparseArray);\n        if (foreignKeyAssociations != null) {\n          setAssociatedModel((DataSupport)modelInstance);\n        }\n        dataList.add(modelInstance);\n      }\n while (cursor.moveToNext());\n      queryInfoCacheSparseArray.clear();\n    }\n    return dataList;\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    throw new DataSupportException(e.getMessage());\n  }\n finally {\n    if (cursor != null) {\n      cursor.close();\n    }\n  }\n}"}
{"ids": "30259", "raw_code": "private MLTResult buildQueryForField(String fieldName,PriorityQueue<MLTTerm> q,BooleanQuery query,boolean contentStreamQuery){\n  List<MLTTerm> interestingTerms=new ArrayList<MLTTerm>();\n  int qterms=0;\n  int maxTerms=maxQueryTermsPerField;\n  if (maxTerms <= 0) {\n    maxTerms=Integer.MAX_VALUE;\n  }\n  BooleanQuery tmpQuery=new BooleanQuery();\n  double sumQuaredBoost=0.0f;\n  MLTTerm cur;\n  while ((cur=q.pop()) != null) {\n    Query tq=null;\n    final Term term=new Term(cur.getFieldName(),cur.getWord());\n    if (isPayloadField(cur.getFieldName())) {\n      tq=new PayloadTermQuery(term,new AveragePayloadFunction(),true);\n    }\n else {\n      tq=new TermQuery(term);\n    }\n    if (boost) {\n      float boost=cur.getScore();\n      tq.setBoost(boost);\n      sumQuaredBoost+=boost * boost;\n    }\n else {\n      sumQuaredBoost+=1.0;\n    }\n    try {\n      tmpQuery.add(tq,BooleanClause.Occur.SHOULD);\n      interestingTerms.add(cur);\n      qterms++;\n    }\n catch (    BooleanQuery.TooManyClauses ignore) {\n      break;\n    }\n    if (qterms >= maxTerms) {\n      break;\n    }\n  }\n  double vectorLength=Math.sqrt(sumQuaredBoost);\n  if (vectorLength <= 0.0) {\n    return new MLTResult(interestingTerms,query);\n  }\n  buildBoostedNormalizedQuery(fieldName,tmpQuery,query,vectorLength,contentStreamQuery);\n  return new MLTResult(interestingTerms,query);\n}"}
{"ids": "54115", "raw_code": "@SuppressWarnings(\"unchecked\") protected void sequentially(Consumer<Marker>... functions){\n  if (functions == null || functions.length == 0)   return;\n  Collection<ParsingException> errors=new ArrayList<>();\n  Marker marker=tokens.mark();\n  for (  Consumer<Marker> function : functions) {\n    try {\n      function.accept(marker);\n      return;\n    }\n catch (    ParsingException e) {\n      errors.add(e);\n      tokens.rewind(marker);\n    }\n  }\n  parsingFailed(marker.position(),errors,\"Unable to parse statement\");\n}"}
{"ids": "23941", "raw_code": "public PidFile(final File file) throws FileNotFoundException {\n  if (!file.exists() || !file.isFile()) {\n    throw new FileNotFoundException(\"Unable to find PID file '\" + file + \"'\");\n  }\n  this.pidFile=file;\n}"}
{"ids": "7172", "raw_code": "public void addChildNode(ExecNode childNode){\n  childNodes.add(childNode);\n}"}
{"ids": "9256", "raw_code": "static private double quickSelect(IDoubleVector x,int k,int start,int end){\n  if (k < start || k > end) {\n    throw new AdeCoreIllegalArgumentException(\"requested selection is outside of range\");\n  }\n  final int pivotIndex=((int)Math.random() * (end - start + 1)) + start;\n  final int pivotPosition=partition(x,start,end,pivotIndex);\n  if (pivotPosition == k) {\n    return x.get(k);\n  }\n else   if (pivotPosition < k) {\n    return quickSelect(x,k,pivotPosition + 1,end);\n  }\n else {\n    return quickSelect(x,k,start,pivotPosition - 1);\n  }\n}"}
{"ids": "52200", "raw_code": "public BayesImEditorObs(BayesImWrapperObs bayesImWrapperObs){\n  this(bayesImWrapperObs,bayesImWrapperObs.getBayesIm());\n}"}
{"ids": "79095", "raw_code": "private List<String> convertByteArrayListToStringValueList(List<byte[]> dictionaryByteArrayList){\n  List<String> valueList=new ArrayList<>(dictionaryByteArrayList.size());\n  for (  byte[] value : dictionaryByteArrayList) {\n    valueList.add(new String(value,Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));\n  }\n  return valueList;\n}"}
{"ids": "20155", "raw_code": "public FileTreeNode(File parent,String name) throws SecurityException, FileNotFoundException {\n  this(parent.toPath(),name);\n}"}
{"ids": "52123", "raw_code": "private List<Node> possibleParents(Node x,List<Node> adjx,IKnowledge knowledge){\n  List<Node> possibleParents=new LinkedList<>();\n  String _x=x.getName();\n  for (  Node z : adjx) {\n    String _z=z.getName();\n    if (possibleParentOf(_z,_x,knowledge)) {\n      possibleParents.add(z);\n    }\n  }\n  return possibleParents;\n}"}
{"ids": "29528", "raw_code": "public synchronized void remove(AbstractOption option){\n  if (options.contains(option)) {\n    int position=indexOf(option);\n    List<AbstractOption> oldOptions=new ArrayList<AbstractOption>(options);\n    options.remove(option);\n    List<AbstractOption> newOptions=getOptions();\n    option.setCollection(null);\n    fireIndexedPropertyChange(PROP_OPTIONS,position,oldOptions,newOptions);\n  }\n}"}
{"ids": "6223", "raw_code": "private float[] calculatePointerPosition(float angle){\n  float x=(float)(mColorWheelRadius * Math.cos(angle));\n  float y=(float)(mColorWheelRadius * Math.sin(angle));\n  return new float[]{x,y};\n}"}
{"ids": "19963", "raw_code": "public ResourceNode locate(String sessionID,String path,ResourceNode startNode) throws DirectoryNotFoundException {\n  if (path == null) {\n    return getCurrentNode(sessionID);\n  }\n else   if (path.startsWith(PROTOCOL)) {\n    path=path.substring(PROTOCOL.length());\n  }\n else   if (path.startsWith(ROOT_ELEMENT) && path.length() > ROOT_ELEMENT.length()) {\n    startNode=getRootNode();\n    path=path.substring(ROOT_ELEMENT.length());\n  }\n  if (path.equals(CURRENT_ELEMENT))   return getCurrentNode(sessionID);\n else   if (path.equals(ROOT_ELEMENT))   return getRootNode();\n  ResourceNode foundNode=null;\n  ResourceNode nodeToSearch=startNode;\n  String pathElements[]=path.split(PATH_SEPARATOR);\n  if (pathElements.length == 0) {\n    return getRootNode();\n  }\n  for (  String element : pathElements) {\n    if (element.length() == 0)     continue;\n    if (element.equals(PARENT_ELEMENT)) {\n      if ((foundNode=nodeToSearch.getParent()) != null) {\n        nodeToSearch=nodeToSearch.getParent();\n      }\n else {\n        throw new DirectoryNotFoundException(String.format(\"element '%s' not found\",path));\n      }\n    }\n else {\n      Map<String,ResourceNode> children=nodeToSearch.getChildren();\n      if (element.equals(ANY_ELEMENT)) {\n        if (nodeToSearch.getType() == ResourceType.CLUSTER) {\n          foundNode=children.get(memberName);\n        }\n else         if (children.size() > 0) {\n          foundNode=getFirst(children);\n        }\n else {\n          throw new DirectoryNotFoundException(String.format(\"the element '%s' of path '%s' resolves to more than one element\",element,path));\n        }\n      }\n else {\n        foundNode=children.get(element);\n      }\n      if (foundNode == null) {\n        throw new DirectoryNotFoundException(String.format(\"element '%s' not found in path '%s' while searching for entry '%s'\",element,formatPath(getAbsolutePath(getRootNode(),nodeToSearch,true),true),path));\n      }\n      nodeToSearch=foundNode;\n    }\n  }\n  return foundNode;\n}"}
{"ids": "76132", "raw_code": "private void handleProcessError(JobDefinition job,Process process) throws IOException {\n  StringBuffer sb=new StringBuffer();\n  BufferedReader in=new BufferedReader(new InputStreamReader(process.getInputStream()));\n  int data=0;\n  while (data != -1 && !isInterrupted()) {\n    data=in.read();\n    if (data != -1) {\n      sb.append((char)data);\n    }\n  }\n  logger.warn(\"Job ended with erroneous exit code: \" + job.cut + \"\\nProcess console output:\\n\"+ sb.toString());\n}"}
{"ids": "2413", "raw_code": "private void checkClassAndSync(Class<? extends IPacket> clazz){\n  if (!registeredClasses.contains(clazz)) {\n    throw new RuntimeException(\"NetworkHelper got unknown Packet type \" + clazz + \" to send, critical error\");\n  }\n  while (isCurrentlySendingSemaphor) {\n    Thread.yield();\n  }\n  isCurrentlySendingSemaphor=true;\n}"}
{"ids": "81002", "raw_code": "private static int calculateDisplayedWidth(String string){\n  final int tabWidth=DEFAULT_TAB_WIDTH;\n  int column=0;\n  for (int i=0; i < string.length(); i++) {\n    if ('\\t' == string.charAt(i)) {\n      column+=tabWidth - (column % tabWidth);\n    }\n else {\n      column++;\n    }\n  }\n  return column;\n}"}
{"ids": "71897", "raw_code": "private static GeneralizedTime finishDecodingFraction(final String value,final int startPos,final int year,final int month,final int day,final int hour,final int minute,final int second,final int multiplier){\n  final int length=value.length();\n  final StringBuilder fractionBuffer=new StringBuilder((2 + length) - startPos);\n  fractionBuffer.append(\"0.\");\n  TimeZone timeZone=null;\n  outerLoop:   for (int i=startPos; i < length; i++) {\n    final char c=value.charAt(i);\nswitch (c) {\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\n      fractionBuffer.append(c);\n    break;\ncase 'Z':\ncase 'z':\n  if (i != (value.length() - 1)) {\n    final LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_FRACTION_CHAR.get(value,String.valueOf(c));\n    throw new LocalizedIllegalArgumentException(message);\n  }\ntimeZone=TIME_ZONE_UTC_OBJ;\nbreak outerLoop;\ncase '+':\ncase '-':\ntimeZone=getTimeZoneForOffset(value,i);\nbreak outerLoop;\ndefault :\nfinal LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_FRACTION_CHAR.get(value,String.valueOf(c));\nthrow new LocalizedIllegalArgumentException(message);\n}\n}\nif (fractionBuffer.length() == 2) {\nfinal LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_EMPTY_FRACTION.get(value);\nthrow new LocalizedIllegalArgumentException(message);\n}\nif (timeZone == null) {\nfinal LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_NO_TIME_ZONE_INFO.get(value);\nthrow new LocalizedIllegalArgumentException(message);\n}\nfinal Double fractionValue=Double.parseDouble(fractionBuffer.toString());\nfinal int additionalMilliseconds=(int)Math.round(fractionValue * multiplier);\ntry {\nfinal GregorianCalendar calendar=new GregorianCalendar();\ncalendar.setLenient(false);\ncalendar.setTimeZone(timeZone);\ncalendar.set(year,month,day,hour,minute,second);\ncalendar.set(Calendar.MILLISECOND,additionalMilliseconds);\nreturn new GeneralizedTime(calendar,null,Long.MIN_VALUE,value);\n}\n catch (final Exception e) {\nfinal LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME.get(value,String.valueOf(e));\nthrow new LocalizedIllegalArgumentException(message,e);\n}\n}"}
{"ids": "64176", "raw_code": "@Override public int read(){\n  if (idx >= charSequence.length()) {\n    return -1;\n  }\n else {\n    return charSequence.charAt(idx++);\n  }\n}"}
{"ids": "74581", "raw_code": "public static void println(char x){\n  out.println(x);\n}"}
{"ids": "56148", "raw_code": "private boolean shouldPositionAvatarOnRight(){\n  final boolean isRtl=Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1 ? getLayoutDirection() == LAYOUT_DIRECTION_RTL : false;\n  final boolean assignedPosition=mAvatarPosition == AVATAR_POSITION_END;\n  return isRtl ? !assignedPosition : assignedPosition;\n}"}
{"ids": "45733", "raw_code": "public static void fail(String message){\n  throw new IllegalStateException(message == null ? \"\" : message);\n}"}
{"ids": "1737", "raw_code": "public void memsetBuffer(ByteBuffer buffer){\n  memsetBuffer(buffer,buffer.limit());\n}"}
{"ids": "50264", "raw_code": "static double fabs(double a){\n  return Math.abs(a);\n}"}
{"ids": "84456", "raw_code": "public final CharSequenceTranslator with(final CharSequenceTranslator... translators){\n  final CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];\n  newArray[0]=this;\n  System.arraycopy(translators,0,newArray,1,translators.length);\n  return new AggregateTranslator(newArray);\n}"}
{"ids": "266", "raw_code": "@Override public boolean equals(Object other){\n  if (!(other instanceof Sha256Hash))   return false;\n  return Arrays.equals(bytes,((Sha256Hash)other).bytes);\n}"}
{"ids": "40652", "raw_code": "public Config(SolrResourceLoader loader,String name) throws ParserConfigurationException, IOException, SAXException {\n  this(loader,name,null,null);\n}"}
{"ids": "26170", "raw_code": "private static HashMap<String,Field> buildFieldCache(Class<?> cls){\n  final HashMap<String,Field> cache=new HashMap<>();\n  final List<Field> fields=getAllFields(cls);\n  for (  Field fld : fields) {\n    String name=null;\n    final Reference refAnn=fld.getAnnotation(Reference.class);\n    if (refAnn != null)     name=selectColumnName(refAnn,fld);\n    if (name == null) {\n      final Column colAnn=fld.getAnnotation(Column.class);\n      if (colAnn != null)       name=selectColumnName(colAnn,fld);\n    }\n    if (name == null)     continue;\n    cache.put(name,fld);\n  }\n  return cache;\n}"}
{"ids": "34242", "raw_code": "public static long convertDuration(final String fromUnit,final String toUnit,long value){\n  TimeUnit fromTimeUnit=toTimeUnit(fromUnit);\n  TimeUnit toTimeUnit=toTimeUnit(toUnit);\n  if (fromTimeUnit != null && toTimeUnit != null) {\n    return toTimeUnit.convert(value,fromTimeUnit);\n  }\n else {\n    throw new DSSException(\"Cannot convert duration with args (\" + fromUnit + \", \"+ toUnit+ \", \"+ value+ \")\");\n  }\n}"}
{"ids": "8343", "raw_code": "public static File searchForGroovyScriptFile(String input){\n  String scriptFileName=input.trim();\n  File scriptFile=new File(scriptFileName);\n  String[] standardExtensions={\".groovy\",\".gvy\",\".gy\",\".gsh\"};\n  int i=0;\n  while (i < standardExtensions.length && !scriptFile.exists()) {\n    scriptFile=new File(scriptFileName + standardExtensions[i]);\n    i++;\n  }\n  if (!scriptFile.exists()) {\n    scriptFile=new File(scriptFileName);\n  }\n  return scriptFile;\n}"}
{"ids": "18165", "raw_code": "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {\n  if (xctxt.isSecureProcessing())   throw new javax.xml.transform.TransformerException(XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,new Object[]{toString()}));\n  XObject result;\n  Vector argVec=new Vector();\n  int nArgs=m_argVec.size();\n  for (int i=0; i < nArgs; i++) {\n    Expression arg=(Expression)m_argVec.elementAt(i);\n    XObject xobj=arg.execute(xctxt);\n    xobj.allowDetachToRelease(false);\n    argVec.addElement(xobj);\n  }\n  ExtensionsProvider extProvider=(ExtensionsProvider)xctxt.getOwnerObject();\n  Object val=extProvider.extFunction(this,argVec);\n  if (null != val) {\n    result=XObject.create(val,xctxt);\n  }\n else {\n    result=new XNull();\n  }\n  return result;\n}"}
{"ids": "32896", "raw_code": "public Picture(File file){\n  try {\n    image=ImageIO.read(file);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    throw new RuntimeException(\"Could not open file: \" + file);\n  }\n  if (image == null) {\n    throw new RuntimeException(\"Invalid image file: \" + file);\n  }\n  width=image.getWidth(null);\n  height=image.getHeight(null);\n  filename=file.getName();\n}"}
{"ids": "56236", "raw_code": "static AnnotationStrategy strategyFor(Annotation annotation){\n  checkNotNull(annotation,\"annotation\");\n  Class<? extends Annotation> annotationType=annotation.annotationType();\n  ensureRetainedAtRuntime(annotationType);\n  ensureIsBindingAnnotation(annotationType);\n  if (annotationType.getDeclaredMethods().length == 0) {\n    return new AnnotationTypeStrategy(annotationType,annotation);\n  }\n  return new AnnotationInstanceStrategy(annotation);\n}"}
{"ids": "22110", "raw_code": "private void addVolumeToBlockConsistencyGroup(URI cgUri,Volume volume){\n  volume.addConsistencyGroup(cgUri.toString());\n  _dbClient.persistObject(volume);\n}"}
{"ids": "69258", "raw_code": "public static boolean lazyGaussianElimination(final int var2Eq[][],final long[] c,final int[] variable,final long[] solution){\n  return lazyGaussianElimination(null,var2Eq,c,variable,solution);\n}"}
{"ids": "61335", "raw_code": "private static int analyze(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {\n  int stepType;\n  int stepCount=0;\n  int analysisResult=0x00000000;\n  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {\n    stepCount++;\n    boolean predAnalysis=analyzePredicate(compiler,stepOpCodePos,stepType);\n    if (predAnalysis)     analysisResult|=BIT_PREDICATE;\nswitch (stepType) {\ncase OpCodes.OP_VARIABLE:\ncase OpCodes.OP_EXTFUNCTION:\ncase OpCodes.OP_FUNCTION:\ncase OpCodes.OP_GROUP:\n      analysisResult|=BIT_FILTER;\n    break;\ncase OpCodes.FROM_ROOT:\n  analysisResult|=BIT_ROOT;\nbreak;\ncase OpCodes.FROM_ANCESTORS:\nanalysisResult|=BIT_ANCESTOR;\nbreak;\ncase OpCodes.FROM_ANCESTORS_OR_SELF:\nanalysisResult|=BIT_ANCESTOR_OR_SELF;\nbreak;\ncase OpCodes.FROM_ATTRIBUTES:\nanalysisResult|=BIT_ATTRIBUTE;\nbreak;\ncase OpCodes.FROM_NAMESPACE:\nanalysisResult|=BIT_NAMESPACE;\nbreak;\ncase OpCodes.FROM_CHILDREN:\nanalysisResult|=BIT_CHILD;\nbreak;\ncase OpCodes.FROM_DESCENDANTS:\nanalysisResult|=BIT_DESCENDANT;\nbreak;\ncase OpCodes.FROM_DESCENDANTS_OR_SELF:\nif (2 == stepCount && BIT_ROOT == analysisResult) {\nanalysisResult|=BIT_ANY_DESCENDANT_FROM_ROOT;\n}\nanalysisResult|=BIT_DESCENDANT_OR_SELF;\nbreak;\ncase OpCodes.FROM_FOLLOWING:\nanalysisResult|=BIT_FOLLOWING;\nbreak;\ncase OpCodes.FROM_FOLLOWING_SIBLINGS:\nanalysisResult|=BIT_FOLLOWING_SIBLING;\nbreak;\ncase OpCodes.FROM_PRECEDING:\nanalysisResult|=BIT_PRECEDING;\nbreak;\ncase OpCodes.FROM_PRECEDING_SIBLINGS:\nanalysisResult|=BIT_PRECEDING_SIBLING;\nbreak;\ncase OpCodes.FROM_PARENT:\nanalysisResult|=BIT_PARENT;\nbreak;\ncase OpCodes.FROM_SELF:\nanalysisResult|=BIT_SELF;\nbreak;\ncase OpCodes.MATCH_ATTRIBUTE:\nanalysisResult|=(BIT_MATCH_PATTERN | BIT_ATTRIBUTE);\nbreak;\ncase OpCodes.MATCH_ANY_ANCESTOR:\nanalysisResult|=(BIT_MATCH_PATTERN | BIT_ANCESTOR);\nbreak;\ncase OpCodes.MATCH_IMMEDIATE_ANCESTOR:\nanalysisResult|=(BIT_MATCH_PATTERN | BIT_PARENT);\nbreak;\ndefault :\nthrow new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));\n}\nif (OpCodes.NODETYPE_NODE == compiler.getOp(stepOpCodePos + 3)) {\nanalysisResult|=BIT_NODETEST_ANY;\n}\nstepOpCodePos=compiler.getNextStepPos(stepOpCodePos);\nif (stepOpCodePos < 0) break;\n}\nanalysisResult|=(stepCount & BITS_COUNT);\nreturn analysisResult;\n}"}
{"ids": "79038", "raw_code": "public void compressMyOwnWay(int[] indexes){\n  List<Integer> list=new ArrayList<Integer>(CarbonCommonConstants.CONSTANT_SIZE_TEN);\n  List<Integer> map=new ArrayList<Integer>(CarbonCommonConstants.CONSTANT_SIZE_TEN);\n  int k=0;\n  int i=1;\n  for (; i < indexes.length; i++) {\n    if (indexes[i] - indexes[i - 1] == 1) {\n      k++;\n    }\n else {\n      if (k > 0) {\n        map.add((list.size()));\n        list.add(indexes[i - k - 1]);\n        list.add(indexes[i - 1]);\n      }\n else {\n        list.add(indexes[i - 1]);\n      }\n      k=0;\n    }\n  }\n  if (k > 0) {\n    map.add((list.size()));\n    list.add(indexes[i - k - 1]);\n    list.add(indexes[i - 1]);\n  }\n else {\n    list.add(indexes[i - 1]);\n  }\n  dataAfterComp=convertToArray(list);\n  if (indexes.length == dataAfterComp.length) {\n    indexMap=new int[0];\n  }\n else {\n    indexMap=convertToArray(map);\n  }\n  if (dataAfterComp.length == 2 && indexMap.length == 1) {\n    alreadySorted=true;\n  }\n}"}
{"ids": "42518", "raw_code": "private void prependDecrement(BasicBlock bb,IR ir){\n  if (DEBUG)   VM.sysWrite(\"Adding Increment to \" + bb + \"\\n\");\n  RegisterOperand use=cbsReg.copyRO();\n  RegisterOperand def=use.copyU2D();\n  Instruction inc=Binary.create(INT_ADD,def,use,IRTools.IC(-1));\n  bb.prependInstruction(inc);\n}"}
{"ids": "53905", "raw_code": "public void addListener(ConnectableDeviceListener listener){\n  if (!listeners.contains(listener)) {\n    listeners.add(listener);\n  }\n}"}
{"ids": "80106", "raw_code": "private static final String toHexString(final byte[] bs){\n  String hex=\"0123456789ABCDEF\";\n  StringBuilder res=new StringBuilder();\n  for (  byte b : bs) {\n    res.append(hex.charAt(((b >>> 4) & 0xF)));\n    res.append(hex.charAt((b & 0xF)));\n  }\n  return res.toString();\n}"}
{"ids": "26016", "raw_code": "public synchronized void flush() throws IOException {\n  checkNotClosed();\n  trimToSize();\n  journalWriter.flush();\n}"}
{"ids": "5055", "raw_code": "public double distance_to_the_left(PlaLineInt p_line){\n  double result=Integer.MAX_VALUE;\n  for (int index=0; index < border_line_count(); ++index) {\n    PlaPointFloat curr_corner=corner_approx(index);\n    PlaSide line_side=p_line.side_of(curr_corner,1);\n    if (line_side == PlaSide.COLLINEAR) {\n      line_side=p_line.side_of(corner(index));\n    }\n    if (line_side == PlaSide.ON_THE_RIGHT)     return -1;\n    result=Math.min(result,p_line.distance_signed(curr_corner));\n  }\n  return result;\n}"}
{"ids": "20039", "raw_code": "public boolean displayTopicFromNames(String[] names){\n  if (names.length == 0)   return displayTopic(DEFAULT);\n else {\n    StringBuffer helpName=new StringBuffer();\n    for (    String name : names) {\n      if (helpName.length() > 0)       helpName.append(\"_\");\n      helpName.append(name);\n    }\n    return displayTopic(helpName.toString());\n  }\n}"}
{"ids": "75906", "raw_code": "public boolean acceptIdentical(String filePath,String fileName){\n  if (fileNameGlob == null)   return false;\n  if (fileName != null && fileName.equalsIgnoreCase(fileNameGlob))   return true;\n  if (filePath != null) {\n    int lastUnixPos=filePath.lastIndexOf('/');\n    int lastWindowsPos=filePath.lastIndexOf('\\\\');\n    int index=Math.max(lastUnixPos,lastWindowsPos);\n    String filename=filePath.substring(index + 1);\n    return filename != null && filename.equalsIgnoreCase(fileNameGlob);\n  }\n  return false;\n}"}
{"ids": "25898", "raw_code": "private void validateNumCoresBlockSort(){\n  String numCoresStr=carbonProperties.getProperty(CarbonCommonConstants.NUM_CORES_BLOCK_SORT,CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);\n  try {\n    int numCores=Integer.parseInt(numCoresStr);\n    if (numCores < CarbonCommonConstants.NUM_CORES_BLOCK_SORT_MIN_VAL || numCores > CarbonCommonConstants.NUM_CORES_BLOCK_SORT_MAX_VAL) {\n      LOGGER.info(\"The num cores value \\\"\" + numCoresStr + \"\\\" for block sort is invalid. Using the default value \\\"\"+ CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);\n      carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES_BLOCK_SORT,CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);\n    }\n  }\n catch (  NumberFormatException e) {\n    LOGGER.info(\"The num cores value \\\"\" + numCoresStr + \"\\\" for block sort is invalid. Using the default value \\\"\"+ CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);\n    carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES_BLOCK_SORT,CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);\n  }\n}"}
{"ids": "86209", "raw_code": "public static MemoryMatchFragment newInstance(){\n  return new MemoryMatchFragment();\n}"}
{"ids": "1290", "raw_code": "static void createFileFromResource(String resource,Resource file) throws IOException {\n  createFileFromResource(resource,file,null);\n}"}
{"ids": "451", "raw_code": "public int endObject(){\n  if (vtable == null || !nested)   throw new AssertionError(\"FlatBuffers: endObject called without startObject\");\n  addInt(0);\n  int vtableloc=offset();\n  for (int i=vtable_in_use - 1; i >= 0; i--) {\n    short off=(short)(vtable[i] != 0 ? vtableloc - vtable[i] : 0);\n    addShort(off);\n  }\n  final int standard_fields=2;\n  addShort((short)(vtableloc - object_start));\n  addShort((short)((vtable_in_use + standard_fields) * SIZEOF_SHORT));\n  int existing_vtable=0;\n  outer_loop:   for (int i=0; i < num_vtables; i++) {\n    int vt1=bb.capacity() - vtables[i];\n    int vt2=space;\n    short len=bb.getShort(vt1);\n    if (len == bb.getShort(vt2)) {\n      for (int j=SIZEOF_SHORT; j < len; j+=SIZEOF_SHORT) {\n        if (bb.getShort(vt1 + j) != bb.getShort(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable=vtables[i];\n      break outer_loop;\n    }\n  }\n  if (existing_vtable != 0) {\n    space=bb.capacity() - vtableloc;\n    bb.putInt(space,existing_vtable - vtableloc);\n  }\n else {\n    if (num_vtables == vtables.length)     vtables=Arrays.copyOf(vtables,num_vtables * 2);\n    vtables[num_vtables++]=offset();\n    bb.putInt(bb.capacity() - vtableloc,offset() - vtableloc);\n  }\n  nested=false;\n  return vtableloc;\n}"}
{"ids": "1548", "raw_code": "public static void perspectiveM(double[] m,int offset,double fovy,double aspect,double zNear,double zFar){\n  double f=1.0 / Math.tan(fovy * (Math.PI / 360.0));\n  double rangeReciprocal=1.0 / (zNear - zFar);\n  m[offset + 0]=f / aspect;\n  m[offset + 1]=0.0;\n  m[offset + 2]=0.0;\n  m[offset + 3]=0.0;\n  m[offset + 4]=0.0;\n  m[offset + 5]=f;\n  m[offset + 6]=0.0;\n  m[offset + 7]=0.0;\n  m[offset + 8]=0.0;\n  m[offset + 9]=0.0;\n  m[offset + 10]=(zFar + zNear) * rangeReciprocal;\n  m[offset + 11]=-1.0;\n  m[offset + 12]=0.0;\n  m[offset + 13]=0.0;\n  m[offset + 14]=2.0 * zFar * zNear* rangeReciprocal;\n  m[offset + 15]=0.0;\n}"}
{"ids": "36280", "raw_code": "protected double compute(String value){\n  if (value != null) {\n    try {\n      return Double.parseDouble(value);\n    }\n catch (    NumberFormatException e) {\n      if (POSITIVE_INFINITY_STRING.equals(value)) {\n        return Double.POSITIVE_INFINITY;\n      }\n else       if (NEGATIVE_INFINITY_STRING.equals(value)) {\n        return Double.NEGATIVE_INFINITY;\n      }\n      return Double.NaN;\n    }\n  }\n  return Double.NaN;\n}"}
{"ids": "33555", "raw_code": "protected int readBlock(){\n  blockSize=read();\n  int n=0;\n  if (blockSize > 0) {\n    try {\n      int count=0;\n      while (n < blockSize) {\n        count=in.read(block,n,blockSize - n);\n        if (count == -1)         break;\n        n+=count;\n      }\n    }\n catch (    IOException e) {\n    }\n    if (n < blockSize) {\n      status=STATUS_FORMAT_ERROR;\n    }\n  }\n  return n;\n}"}
{"ids": "36020", "raw_code": "boolean isDuplicateRoleColumn(int column){\n  return duplicateRoleColumn.contains(column);\n}"}
{"ids": "50459", "raw_code": "public TimestampSpeechletRequestVerifier(long tolerance,TimeUnit unit){\n  if (tolerance < 0) {\n    throw new IllegalArgumentException(\"A negative tolerance is not supported\");\n  }\n  toleranceInMilliseconds=unit.toMillis(tolerance);\n}"}
{"ids": "1785", "raw_code": "public void shutdown(){\n  CountDownLatch wait_l;\nsynchronized (this) {\n    wait_l=waitShutdown;\n  }\n  Shutdown_ind=true;\n  try {\n    if (wait_l != null) {\n      if (wait_l.await(3000,TimeUnit.MILLISECONDS))       LOG.info(\"echo service shutdown complete\");\n else       LOG.warn(\"timeout waiting for echo service shutdown\");\n    }\n else {\n      LOG.info(\"echo service shutdown: service does not appear to be active\");\n    }\n  }\n catch (  InterruptedException int_exc) {\n    LOG.warn(\"interrupted while waiting for echo service shutdown\");\n  }\n}"}
{"ids": "46544", "raw_code": "void paintStrokes(Rectangle r,Graphics g,int axis,int[] lengthPattern,Color[] colorPattern){\n  boolean xAxis=(axis == View.X_AXIS);\n  int start=0;\n  int end=(xAxis ? r.width : r.height);\n  while (start < end) {\n    for (int i=0; i < lengthPattern.length; i++) {\n      if (start >= end) {\n        break;\n      }\n      int length=lengthPattern[i];\n      Color c=colorPattern[i];\n      if (c != null) {\n        int x=r.x + (xAxis ? start : 0);\n        int y=r.y + (xAxis ? 0 : start);\n        int width=xAxis ? length : r.width;\n        int height=xAxis ? r.height : length;\n        g.setColor(c);\n        g.fillRect(x,y,width,height);\n      }\n      start+=length;\n    }\n  }\n}"}
{"ids": "53008", "raw_code": "private void deleteChildren(Element container){\n  while (container.hasChildNodes()) {\n    container.removeChild(container.getLastChild());\n  }\n}"}
{"ids": "41442", "raw_code": "public String fillParamWithEventAttrib(String paramData,Event event){\n  if (!database.isOpen()) {\n    throw new IllegalStateException(TAG + \" is already closed.\");\n  }\n  StringBuilder retVal=new StringBuilder();\n  int cursor=0;\n  while (cursor < paramData.length()) {\n    int openBracketIdx=paramData.indexOf('<',cursor);\n    int closeBracketIdx=paramData.indexOf('>',cursor);\n    if (openBracketIdx == -1 || closeBracketIdx == -1 || openBracketIdx + 1 >= closeBracketIdx) {\n      retVal.append(paramData.substring(cursor));\n      break;\n    }\n    String attr=paramData.substring(openBracketIdx + 1,closeBracketIdx);\n    String param=paramData.substring(openBracketIdx,closeBracketIdx + 1);\n    String paramAttr;\n    try {\n      paramAttr=event.getAttribute(attr);\n    }\n catch (    IllegalArgumentException e) {\n      paramAttr=param;\n    }\n    retVal.append(paramData.substring(cursor,openBracketIdx));\n    retVal.append(paramAttr);\n    cursor=closeBracketIdx + 1;\n  }\n  Log.d(\"fillParamWithEventAttrib\",paramData + \" -> \" + retVal.toString());\n  return retVal.toString();\n}"}
{"ids": "9433", "raw_code": "public static double twoPow(int power){\n  if (power <= -MAX_DOUBLE_EXPONENT) {\n    if (power >= MIN_DOUBLE_EXPONENT) {\n      return Double.longBitsToDouble(0x0008000000000000L >> (-(power + MAX_DOUBLE_EXPONENT)));\n    }\n else {\n      return 0.0;\n    }\n  }\n else   if (power > MAX_DOUBLE_EXPONENT) {\n    return Double.POSITIVE_INFINITY;\n  }\n else {\n    return Double.longBitsToDouble(((long)(power + MAX_DOUBLE_EXPONENT)) << 52);\n  }\n}"}
{"ids": "75488", "raw_code": "@SuppressWarnings(\"raw\") public static Type resolveTypeVariable(TypeVariable name,Class declaringClass,Class topClass){\n  Type type=resolveTypeVariable(name,declaringClass,new HashMap<>(),topClass);\n  if (type == null) {\n    type=Object.class;\n  }\n  return type;\n}"}
{"ids": "72889", "raw_code": "private ResourceImpl aggregate(ResourceImpl resourceA,ResourceImpl resourceB) throws NotFoundException {\n  final String typeId=resourceA.getType();\n  final ResourceType resourceType=getResourceType(typeId);\n  return resourceType.aggregate(resourceA,resourceB);\n}"}
{"ids": "52660", "raw_code": "public static boolean renameFile(String filePath,String oldFilename,String newFilename){\n  if ((filePath == null) || filePath.isEmpty() || (oldFilename == null)|| oldFilename.isEmpty()|| (newFilename == null)|| newFilename.isEmpty()) {\n    return false;\n  }\n  File oldFile=new File(filePath + File.separator + oldFilename);\n  File newFile=new File(filePath + File.separator + newFilename);\n  boolean isSuccessfulRename;\n  try {\n    isSuccessfulRename=oldFile.renameTo(newFile);\n  }\n catch (  Exception e) {\n    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));\n    isSuccessfulRename=false;\n  }\n  return isSuccessfulRename;\n}"}
{"ids": "59949", "raw_code": "@RpcMethod public void startImageScan(String dataStore,Long scanRate,Long timeout,AsyncMethodCallback<Host.AsyncClient.start_image_scan_call> handler) throws RpcException {\n  ensureClient();\n  StartImageScanRequest request=new StartImageScanRequest(dataStore);\n  if (null != scanRate) {\n    request.setScan_rate(scanRate);\n  }\n  if (null != timeout) {\n    request.setTimeout(timeout);\n  }\n  try {\n    logger.info(\"start_image_scan target {}, request {}\",getHostIp(),request);\n    clientProxy.setTimeout(START_IMAGE_SCAN_TIMEOUT_MS);\n    clientProxy.start_image_scan(request,handler);\n  }\n catch (  TException e) {\n    throw new RpcException(e.getMessage());\n  }\n}"}
{"ids": "76708", "raw_code": "public static String format(int n,String col){\n  String res=padd + n;\n  return res.substring(res.length() - col.length());\n}"}
{"ids": "32954", "raw_code": "public GitConflictException(String message){\n  super(message);\n}"}
{"ids": "40023", "raw_code": "private void trace(){\n  glUseProgram(photonTraceProgram);\n  long thisTime=System.nanoTime();\n  float elapsedSeconds=(thisTime - firstTime) / 1E9f;\n  glUniform1f(timeUniform,elapsedSeconds);\n  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,ssbo);\n  glBindBufferBase(GL_UNIFORM_BUFFER,imagesUboBinding,imageHandlesUbo);\n  int invocationsPerDimension=photonsPerFrame;\n  int worksizeX=mathRoundPoT(invocationsPerDimension);\n  int worksizeY=mathRoundPoT(invocationsPerDimension);\n  if (variableGroupSize) {\n    ARBComputeVariableGroupSize.glDispatchComputeGroupSizeARB(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1,workGroupSizeX,workGroupSizeY,1);\n  }\n else {\n    glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);\n  }\n  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);\n  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,0);\n  glBindBufferBase(GL_UNIFORM_BUFFER,imagesUboBinding,0);\n  glUseProgram(0);\n}"}
{"ids": "66468", "raw_code": "public caption addElement(String element){\n  addElementToRegistry(Integer.toString(element.hashCode()),element);\n  return (this);\n}"}
{"ids": "74122", "raw_code": "protected void doResetCurrentPosition(){\n  this.currentPosition=this.position;\n}"}
{"ids": "51423", "raw_code": "public FloatBuffer put(float[] src,int srcOffset,int floatCount){\n  JTranscArrays.checkOffsetAndCount(src.length,srcOffset,floatCount);\n  if (floatCount > remaining()) {\n    throw new BufferOverflowException();\n  }\n  for (int i=srcOffset; i < srcOffset + floatCount; ++i) {\n    put(src[i]);\n  }\n  return this;\n}"}
{"ids": "74602", "raw_code": "public String readLine(){\n  String line;\n  try {\n    line=scanner.nextLine();\n  }\n catch (  NoSuchElementException e) {\n    line=null;\n  }\n  return line;\n}"}
{"ids": "80136", "raw_code": "private boolean messageChanged(String oldMessage,String newMessage){\n  return ((newMessage == null) && (oldMessage != null)) || ((newMessage != null) && !newMessage.equals(oldMessage));\n}"}
{"ids": "71065", "raw_code": "private MultiLineString readMultiLine(OraGeom oraGeom){\n  int nElem=oraGeom.numElements();\n  List geoms=new ArrayList();\n  for (int i=0; i < nElem; i++) {\n    int etype=oraGeom.eType(i);\n    if (etype != OraGeom.ETYPE.LINE)     break;\n    geoms.add(readLine(oraGeom,i));\n  }\n  MultiLineString lines=geometryFactory.createMultiLineString(GeometryFactory.toLineStringArray(geoms));\n  return lines;\n}"}
{"ids": "77184", "raw_code": "public Explanation idfExplain(CollectionStatistics collectionStats,TermStatistics termStats[]){\n  final long docCount=collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n  float idf=0.0f;\n  List<Explanation> details=new ArrayList<>();\n  for (  final TermStatistics stat : termStats) {\n    final long df=stat.docFreq();\n    final float termIdf=idf(df,docCount);\n    details.add(Explanation.match(termIdf,\"idf(docFreq=\" + df + \", docCount=\"+ docCount+ \")\"));\n    idf+=termIdf;\n  }\n  return Explanation.match(idf,\"idf(), sum of:\",details);\n}"}
{"ids": "29954", "raw_code": "public void removeArea(final Section AREA){\n  if (null == AREA)   return;\n  areas.remove(AREA);\n  Collections.sort(areas,new SectionComparator());\n  fireUpdateEvent(SECTION_EVENT);\n}"}
{"ids": "83544", "raw_code": "@SuppressWarnings(\"unchecked\") public void connect(final BluetoothDevice device,final ILogSession session){\n  if (mManagedDevices.contains(device))   return;\n  mManagedDevices.add(device);\n  BleManager<BleManagerCallbacks> manager=mBleManagers.get(device);\n  if (manager != null) {\n    if (session != null)     manager.setLogger(session);\n    manager.connect(device);\n  }\n else {\n    mBleManagers.put(device,manager=initializeManager());\n    manager.setGattCallbacks(BleMulticonnectProfileService.this);\n    manager.setLogger(session);\n    manager.connect(device);\n  }\n}"}
{"ids": "55679", "raw_code": "public ScannerException(ErrorMessages message){\n  this(null,ErrorMessages.get(message),message,-1,-1);\n}"}
{"ids": "43530", "raw_code": "private static void formatTimeZone(Calendar cal,StringBuilder buf){\n  TimeZone tz=cal.getTimeZone();\n  if (tz == null)   return;\n  int offset;\n  if (tz.inDaylightTime(cal.getTime())) {\n    offset=tz.getRawOffset() + (tz.useDaylightTime() ? 3600000 : 0);\n  }\n else {\n    offset=tz.getRawOffset();\n  }\n  if (offset == 0) {\n    buf.append('Z');\n    return;\n  }\n  if (offset >= 0)   buf.append('+');\n else {\n    buf.append('-');\n    offset*=-1;\n  }\n  offset/=60 * 1000;\n  formatTwoDigits(offset / 60,buf);\n  buf.append(':');\n  formatTwoDigits(offset % 60,buf);\n}"}
{"ids": "17620", "raw_code": "private E unlinkLast(){\n  Node<E> l=last;\n  if (l == null)   return null;\n  Node<E> p=l.prev;\n  E item=l.item;\n  l.item=null;\n  l.prev=l;\n  last=p;\n  if (p == null)   first=null;\n else   p.next=null;\n  --count;\n  notFull.signal();\n  return item;\n}"}
{"ids": "27899", "raw_code": "public MutableString(final MutableString s){\n  makeCompactMutableString(s.length());\n  System.arraycopy(s.array,0,array,0,array.length);\n}"}
{"ids": "55453", "raw_code": "private void request(){\n  if (isVisible() && stream != null && !stream.isEmpty()) {\n    loading=true;\n    if (type == Type.FOLLOWERS) {\n      api.getFollowers(stream);\n    }\n else     if (type == Type.SUBSCRIBERS) {\n      api.getSubscribers(stream);\n    }\n  }\n}"}
{"ids": "35594", "raw_code": "public List<Statement> mungedStyle(){\n  List<Statement> st=built();\n  if (includeBasicEntityForSubject) {\n    st.remove(entityDataAboutDecl);\n    st.remove(entityDataVersionDecl);\n    st.remove(entityDataDateModifiedDecl);\n    statement(st,uris.entity() + entity,SchemaDotOrg.VERSION,version);\n    statement(st,uris.entity() + entity,SchemaDotOrg.DATE_MODIFIED,dateModified);\n  }\n  st.remove(statementTypeDecl);\n  for (  ExtraInfo e : extraInfo) {\n    e.munge(st);\n  }\n  return st;\n}"}
{"ids": "2912", "raw_code": "private void writeRequest(final NextFilter nextFilter,final SocksProxyRequest request,int step){\n  try {\n    IoBuffer buf=null;\n    if (step == SocksProxyConstants.SOCKS5_GREETING_STEP) {\n      buf=encodeInitialGreetingPacket(request);\n    }\n else     if (step == SocksProxyConstants.SOCKS5_AUTH_STEP) {\n      buf=encodeAuthenticationPacket(request);\n      if (buf == null) {\n        step=SocksProxyConstants.SOCKS5_REQUEST_STEP;\n      }\n    }\n    if (step == SocksProxyConstants.SOCKS5_REQUEST_STEP) {\n      buf=encodeProxyRequestPacket(request);\n    }\n    buf.flip();\n    writeData(nextFilter,buf);\n  }\n catch (  Exception ex) {\n    closeSession(\"Unable to send Socks request: \",ex);\n  }\n}"}
{"ids": "75080", "raw_code": "public synchronized void putAsInt(Object key,int value){\n  put(key,new Integer(value));\n}"}
{"ids": "44258", "raw_code": "public void close() throws IOException {\n  if (writer != null) {\n    writer.close();\n  }\n else {\n    cb=null;\n    closed=true;\n  }\n}"}
{"ids": "9921", "raw_code": "private CertPath buildCertPath(X509Certificate endCert) throws CertificatePathBuildingException {\n  CertPathBuilder cpb=null;\n  try {\n    cpb=CertPathBuilder.getInstance(\"PKIX\");\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new CertificatePathBuildingException(\"Error building CertPathBuilder:\" + e.getMessage(),e);\n  }\n  PKIXBuilderParameters params=CreatePKIXBuilderParameters(endCert);\n  CertPathBuilderResult cpbResult;\n  try {\n    cpbResult=cpb.build(params);\n  }\n catch (  CertPathBuilderException e) {\n    throw new CertificatePathBuildingException(e.getMessage(),e.getCause());\n  }\ncatch (  InvalidAlgorithmParameterException e) {\n    throw new CertificatePathBuildingException(e.getMessage(),e);\n  }\n  CertPath cp=cpbResult.getCertPath();\n  return cp;\n}"}
{"ids": "14764", "raw_code": "public void addConfiguration(InputStream in) throws SMSException, SSOException {\n  ServiceManager sm=new ServiceManager(token);\n  Document doc=SMSSchema.getXMLDocument(in);\n  NodeList nodes=doc.getElementsByTagName(SMSUtils.SERVICE);\n  for (int i=0; (nodes != null) && (i < nodes.getLength()); i++) {\n    Node serviceNode=nodes.item(i);\n    String sName=XMLUtils.getNodeAttributeValue(serviceNode,SMSUtils.NAME);\n    String sVersion=XMLUtils.getNodeAttributeValue(serviceNode,SMSUtils.VERSION);\n    Node configNode;\n    if (sName.equals(serviceName) && (sVersion.equals(version)) && ((configNode=XMLUtils.getChildNode(serviceNode,SMSUtils.CONFIGURATION)) != null)) {\n      CreateServiceConfig.createService(sm,sName,sVersion,configNode,null);\n    }\n  }\n}"}
{"ids": "59606", "raw_code": "public static int stringToDictId(String str){\n  try {\n    byte[] bytes=str.getBytes(\"ISO-8859-1\");\n    return BytesUtil.readUnsigned(bytes,0,bytes.length);\n  }\n catch (  UnsupportedEncodingException e) {\n    return 0;\n  }\n}"}
{"ids": "49581", "raw_code": "public void start() throws IOException, MqttException {\n  final String methodName=\"start\";\n  try {\n    log.fine(CLASS_NAME,methodName,\"252\",new Object[]{host,new Integer(port),new Long(conTimeout * 1000)});\n    SocketAddress sockaddr=new InetSocketAddress(host,port);\n    socket=factory.createSocket();\n    socket.connect(sockaddr,conTimeout * 1000);\n  }\n catch (  ConnectException ex) {\n    log.fine(CLASS_NAME,methodName,\"250\",null,ex);\n    throw new MqttException(MqttException.REASON_CODE_SERVER_CONNECT_ERROR,ex);\n  }\n}"}
{"ids": "82059", "raw_code": "public void callSeriallyAndWait(Runnable r){\n  if (isEdt()) {\n    throw new RuntimeException(\"This method MUST NOT be invoked on the EDT\");\n  }\n  RunnableWrapper c=new RunnableWrapper(r,0);\n  callSerially(c);\n  flushEdt();\nsynchronized (lock) {\n    while (!c.isDone()) {\n      try {\n        lock.wait(50);\n      }\n catch (      InterruptedException err) {\n      }\n    }\n  }\n}"}
{"ids": "13621", "raw_code": "public List<Contact> find(){\n  List<Long> ids=new ArrayList<>();\n  if (innerQueries != null) {\n    for (    Query query : innerQueries) {\n      ids.addAll(query.findInner());\n    }\n  }\n else {\n    if (mimeWhere.isEmpty()) {\n      return find(null);\n    }\n    for (    Map.Entry<String,Where> entry : mimeWhere.entrySet()) {\n      ids=findIds(ids,entry.getKey(),entry.getValue());\n    }\n  }\n  return find(ids);\n}"}
{"ids": "45707", "raw_code": "public void persistBeanData(Object bean,boolean printOnly){\n  persistBeanTryCatch(bean);\n  callPersistEmittedKeyValue(printOnly);\n}"}
{"ids": "76738", "raw_code": "private void refill() throws IOException {\n  offset+=usableLength;\n  int leftover=length - usableLength;\n  System.arraycopy(buffer,usableLength,buffer,0,leftover);\n  int requested=buffer.length - leftover;\n  int returned=read(input,buffer,leftover,requested);\n  length=returned < 0 ? leftover : returned + leftover;\n  if (returned < requested)   usableLength=length;\n else {\n    usableLength=findSafeEnd();\n    if (usableLength < 0)     usableLength=length;\n  }\n  wrapper.setText(buffer,0,Math.max(0,usableLength));\n  iterator.setText(wrapper);\n}"}
{"ids": "69538", "raw_code": "protected void fireInsertUpdate(DocumentEvent evt){\n  if (tokenMarker != null) {\n    DocumentEvent.ElementChange ch=evt.getChange(getDefaultRootElement());\n    if (ch != null) {\n      tokenMarker.insertLines(ch.getIndex() + 1,ch.getChildrenAdded().length - ch.getChildrenRemoved().length);\n    }\n  }\n  super.fireInsertUpdate(evt);\n}"}
{"ids": "56322", "raw_code": "int pending(){\n  return pending.get();\n}"}
{"ids": "65199", "raw_code": "private boolean isIncluded(final HttpServletRequest request){\n  String uri=(String)request.getAttribute(\"javax.servlet.include.request_uri\");\n  boolean includeRequest=!(uri == null);\n  if (includeRequest && log.isDebugEnabled()) {\n    log.debug(\"{} resulted in an include request. This is unusable, because\" + \"the response will be assembled into the overrall response. Not gzipping.\",request.getRequestURL());\n  }\n  return includeRequest;\n}"}
{"ids": "7456", "raw_code": "public void drawDomainMarker(Graphics2D g2,ContourPlot plot,ValueAxis domainAxis,Marker marker,Rectangle2D dataArea){\n  if (marker instanceof ValueMarker) {\n    ValueMarker vm=(ValueMarker)marker;\n    double value=vm.getValue();\n    Range range=domainAxis.getRange();\n    if (!range.contains(value)) {\n      return;\n    }\n    double x=domainAxis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);\n    Line2D line=new Line2D.Double(x,dataArea.getMinY(),x,dataArea.getMaxY());\n    Paint paint=marker.getOutlinePaint();\n    Stroke stroke=marker.getOutlineStroke();\n    g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);\n    g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);\n    g2.draw(line);\n  }\n}"}
{"ids": "51616", "raw_code": "private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){\n  StringBuilder tmp=new StringBuilder(count);\n  int submode=initialSubmode;\n  int idx=0;\n  while (true) {\n    char ch=msg.charAt(startpos + idx);\nswitch (submode) {\ncase SUBMODE_ALPHA:\n      if (isAlphaUpper(ch)) {\n        if (ch == ' ') {\n          tmp.append((char)26);\n        }\n else {\n          tmp.append((char)(ch - 65));\n        }\n      }\n else {\n        if (isAlphaLower(ch)) {\n          submode=SUBMODE_LOWER;\n          tmp.append((char)27);\n          continue;\n        }\n else         if (isMixed(ch)) {\n          submode=SUBMODE_MIXED;\n          tmp.append((char)28);\n          continue;\n        }\n else {\n          tmp.append((char)29);\n          tmp.append((char)PUNCTUATION[ch]);\n          break;\n        }\n      }\n    break;\ncase SUBMODE_LOWER:\n  if (isAlphaLower(ch)) {\n    if (ch == ' ') {\n      tmp.append((char)26);\n    }\n else {\n      tmp.append((char)(ch - 97));\n    }\n  }\n else {\n    if (isAlphaUpper(ch)) {\n      tmp.append((char)27);\n      tmp.append((char)(ch - 65));\n      break;\n    }\n else     if (isMixed(ch)) {\n      submode=SUBMODE_MIXED;\n      tmp.append((char)28);\n      continue;\n    }\n else {\n      tmp.append((char)29);\n      tmp.append((char)PUNCTUATION[ch]);\n      break;\n    }\n  }\nbreak;\ncase SUBMODE_MIXED:\nif (isMixed(ch)) {\ntmp.append((char)MIXED[ch]);\n}\n else {\nif (isAlphaUpper(ch)) {\n  submode=SUBMODE_ALPHA;\n  tmp.append((char)28);\n  continue;\n}\n else if (isAlphaLower(ch)) {\n  submode=SUBMODE_LOWER;\n  tmp.append((char)27);\n  continue;\n}\n else {\n  if (startpos + idx + 1 < count) {\n    char next=msg.charAt(startpos + idx + 1);\n    if (isPunctuation(next)) {\n      submode=SUBMODE_PUNCTUATION;\n      tmp.append((char)25);\n      continue;\n    }\n  }\n  tmp.append((char)29);\n  tmp.append((char)PUNCTUATION[ch]);\n}\n}\nbreak;\ndefault :\nif (isPunctuation(ch)) {\ntmp.append((char)PUNCTUATION[ch]);\n}\n else {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)29);\ncontinue;\n}\n}\nidx++;\nif (idx >= count) {\nbreak;\n}\n}\nchar h=0;\nint len=tmp.length();\nfor (int i=0; i < len; i++) {\nboolean odd=(i % 2) != 0;\nif (odd) {\nh=(char)((h * 30) + tmp.charAt(i));\nsb.append(h);\n}\n else {\nh=tmp.charAt(i);\n}\n}\nif ((len % 2) != 0) {\nsb.append((char)((h * 30) + 29));\n}\nreturn submode;\n}"}
{"ids": "14947", "raw_code": "public void remove(String attrName,String delValue){\n  int index=indexOf(attrName);\n  if (index != -1) {\n    Attr attr=(Attr)_attrs.get(index);\n    attr.removeValue(delValue);\n    if (attr.size() == 0) {\n      _attrs.remove(index);\n    }\n  }\n}"}
{"ids": "9052", "raw_code": "private AppliedMigration createAppliedSchemaMigration(){\n  return new AppliedMigration(0,0,MigrationVersion.fromVersion(Integer.toString(0)),\"<< Schema Creation >>\",MigrationType.SCHEMA,\"x\",null,new Date(),\"sa\",0,true);\n}"}
{"ids": "48332", "raw_code": "public static String makeSigAlg(String digAlg,String encAlg){\n  digAlg=digAlg.replace(\"-\",\"\");\n  if (encAlg.equalsIgnoreCase(\"EC\"))   encAlg=\"ECDSA\";\n  return digAlg + \"with\" + encAlg;\n}"}
{"ids": "12192", "raw_code": "public static int indexOf(byte[] src,byte[] target,int fromIdx){\n  final int to=src.length - target.length + 1;\n  for (int i=fromIdx; i < to; i++) {\n    if (src[i] == target[0]) {\n      boolean equals=true;\n      for (int j=1, k=i + 1; j < target.length && equals; j++, k++) {\n        if (src[k] != target[j]) {\n          equals=false;\n        }\n      }\n      if (equals) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}"}
{"ids": "3734", "raw_code": "@Override public int read(byte[] buf,int offset,int length) throws IOException {\n  try {\n    if (_channel == null) {\n      return -1;\n    }\n    int remaining=_readBuffer.remaining();\n    if (remaining > 0) {\n      _readBuffer.get(buf,offset,remaining);\n      return remaining;\n    }\n    _readBuffer.clear();\n    int channelRead=_channel.read(_readBuffer);\n    _readBuffer.flip();\n    if (channelRead < 0)     return -1;\n    _readBuffer.get(buf,offset,channelRead);\n    return channelRead;\n  }\n catch (  InterruptedIOException e) {\n    if (_throwReadInterrupts)     throw e;\n    log.log(Level.FINEST,e.toString(),e);\n  }\ncatch (  IOException e) {\n    if (_throwReadInterrupts)     throw e;\n    log.log(Level.FINER,e.toString(),e);\n  }\n  return -1;\n}"}
{"ids": "55822", "raw_code": "String readUTF(byte data[],int off,int len){\n  int offset=off;\n  StringBuffer buf=new StringBuffer();\n  for (int end=offset + len; offset < end; ) {\n    int ch=data[offset++] & 0xFF;\nswitch (ch >> 4) {\ncase 0:\ncase 1:\ncase 2:\ncase 3:\ncase 4:\ncase 5:\ncase 6:\ncase 7:\n      break;\ncase 12:\ncase 13:\n    if (offset >= len) {\n      return null;\n    }\n  ch=((ch & 0x1F) << 6) | (data[offset++] & 0x3F);\nbreak;\ncase 14:\nif (offset + 2 >= len) {\nreturn null;\n}\nch=((ch & 0x0f) << 12) | ((data[offset++] & 0x3F) << 6) | (data[offset++] & 0x3F);\nbreak;\ndefault :\nif (offset + 1 >= len) {\nreturn null;\n}\nch=((ch & 0x3F) << 4) | (data[offset++] & 0x0f);\nbreak;\n}\nbuf.append((char)ch);\n}\nreturn buf.toString();\n}"}
{"ids": "43972", "raw_code": "public TurtleWriter(OutputStream out){\n  this(new OutputStreamWriter(out,Charset.forName(\"UTF-8\")));\n}"}
{"ids": "6065", "raw_code": "private char lookahead(){\n  return curCharIndex < pattern.length() - 1 ? pattern.charAt(curCharIndex + 1) : EOF;\n}"}
{"ids": "63170", "raw_code": "public static boolean isNumber(String s){\n  if (s.length() == 0) {\n    return false;\n  }\n  for (  char c : s.toCharArray()) {\n    if (!Character.isDigit(c)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "29734", "raw_code": "private State(CircuitState circuitState,Duration timeoutDuration,EventCounter counter){\n  this.circuitState=circuitState;\n  this.counter=counter;\n  if (timeoutDuration.isZero() || timeoutDuration.isNegative()) {\n    timedOutTimeNanos=0L;\n  }\n else {\n    timedOutTimeNanos=ticker.read() + timeoutDuration.toNanos();\n  }\n}"}
{"ids": "11578", "raw_code": "public void cleanup(ButtonGroup bg){\n  if (bg != null) {\n    bg.remove(layerName);\n  }\n  cleanup();\n}"}
{"ids": "44232", "raw_code": "public static Map<MetaKey,String> union(final Map<MetaKey,String> providedMetaData,final Map<MetaKey,String> extractedMetaData){\n  final int size1=providedMetaData != null ? providedMetaData.size() : 0;\n  final int size2=extractedMetaData != null ? extractedMetaData.size() : 0;\n  if (size1 + size2 == 0) {\n    return Collections.emptyMap();\n  }\n  final Map<MetaKey,String> result=new HashMap<>(size1 + size2);\n  if (extractedMetaData != null) {\n    result.putAll(extractedMetaData);\n  }\n  if (providedMetaData != null) {\n    result.putAll(providedMetaData);\n  }\n  return Collections.unmodifiableMap(result);\n}"}
{"ids": "25974", "raw_code": "public static void formatDouble(double source,int decimals,int precision,StringBuffer target){\n  int scale=(Math.abs(source) >= 1.0) ? decimals : precision;\n  if (tooManyDigitsUsed(source,scale) || tooCloseToRound(source,scale)) {\n    formatDoublePrecise(source,decimals,precision,target);\n  }\n else {\n    formatDoubleFast(source,decimals,precision,target);\n  }\n}"}
{"ids": "13861", "raw_code": "protected View createChild(String name){\n  View view=null;\n  if (name.equals(TF_PARENTID) || name.equals(TF_CLIENT_TYPE)) {\n    view=new CCTextField(this,name,\"\");\n  }\n else   if (name.equals(SEC_MH_COMMON)) {\n    view=new CCSecondaryMasthead(this,name);\n  }\n else   if (name.equals(PGTITLE)) {\n    view=new CCPageTitle(this,ptModel,name);\n  }\n else   if (ptModel.isChildSupported(name)) {\n    view=ptModel.createChild(this,name);\n  }\n else   if (name.equals(PROPERTY_ATTRIBUTE)) {\n    view=new AMPropertySheet(this,propertySheetModel,name);\n  }\n else   if (propertySheetModel.isChildSupported(name)) {\n    view=propertySheetModel.createChild(this,name,getModel());\n  }\n else {\n    view=super.createChild(name);\n  }\n  return view;\n}"}
{"ids": "37489", "raw_code": "public synchronized void draw(final Graphics2D gfx,final float x,final float y){\n  if (!isEmpty()) {\n    m_textLayout.draw(gfx,x,y);\n    for (    final CHighlighting highlighting : new ArrayList<CHighlighting>(m_highlighting)) {\n      final double bpX=(x + highlighting.getStart()) - 2.;\n      final double bpY=(y - m_charHeight) + 4;\n      final double bpW=highlighting.getEnd() + 4;\n      final double bpH=m_charHeight - 1;\n      drawHighlighting(gfx,bpX,bpY,bpW,bpH,highlighting.getColor());\n    }\n  }\n}"}
{"ids": "47910", "raw_code": "public boolean isAbstract(){\n  return Modifier.isAbstract(flags);\n}"}
{"ids": "85376", "raw_code": "public static File relativeFile(File f){\n  if (f.isAbsolute()) {\n    f=relativeFile(new File(\".\"),f);\n  }\n  return f;\n}"}
{"ids": "42786", "raw_code": "public XMLParser(final String namespace,final String[] schemas) throws XMLException {\n  try {\n    JAXBContext jc=JAXBContext.newInstance(namespace);\n    marshaller=jc.createMarshaller();\n    marshaller.setSchema(XMLSchemaUtils.createSchema(schemas));\n    unmarshaller=jc.createUnmarshaller();\n    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schemas));\n  }\n catch (  JAXBException e) {\n    throw new XMLException(\"Cannot instantiate marshaller/unmarshaller for \" + namespace,e);\n  }\n}"}
{"ids": "14635", "raw_code": "public String[] splitResourceName(String serviceTypeName,String resourceName) throws NameNotFoundException, SSOException, PolicyException {\n  ServiceType st=getServiceType(serviceTypeName);\n  Set prefixes=getManagedResourceNames(serviceTypeName);\n  String[] retVal=new String[2];\n  if (prefixes.isEmpty()) {\n    retVal[0]=\"\";\n    retVal[1]=resourceName;\n    return retVal;\n  }\n  Iterator iter=prefixes.iterator();\n  String tmp=null;\n  ResourceMatch matchResult=null;\n  boolean foundSuperMatch=false;\n  boolean foundExactMatch=false;\n  while (iter.hasNext()) {\n    tmp=(String)iter.next();\n    matchResult=st.compare(resourceName,tmp);\n    if (matchResult.equals(ResourceMatch.SUPER_RESOURCE_MATCH)) {\n      foundSuperMatch=true;\n      break;\n    }\n    if (matchResult.equals(ResourceMatch.EXACT_MATCH)) {\n      foundExactMatch=true;\n      break;\n    }\n  }\n  if (foundSuperMatch) {\n    retVal[0]=tmp;\n    retVal[1]=st.getSubResource(resourceName,tmp);\n    return retVal;\n  }\n  if (foundExactMatch) {\n    retVal[0]=tmp;\n    retVal[1]=\"\";\n    return retVal;\n  }\n  retVal[0]=\"\";\n  retVal[1]=resourceName;\n  return retVal;\n}"}
{"ids": "52950", "raw_code": "void materialize(){\n  if (cachefill < 0) {\n    return;\n  }\n  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;\n  for (int i=0; i < cachefill; i++) {\n    min=Math.min(min,cachec[i]);\n    max=Math.max(max,cachec[i]);\n  }\n  LinearScale scale=new LinearScale(min,max);\n  min=scale.getMin();\n  max=scale.getMax();\n  this.base=min;\n  this.max=max;\n  this.binsize=(max - min) / this.destsize;\n  this.data=new long[this.destsize << 1];\n  size=destsize;\n  final int end=cachefill;\n  cachefill=-1;\n  for (int i=0; i < end; i++) {\n    increment(cachec[i],cachev[i]);\n  }\n  cachec=null;\n  cachev=null;\n}"}
{"ids": "72450", "raw_code": "public ArrayFieldVector(Field<T> field,T[] v1,T[] v2) throws MathIllegalArgumentException, NullArgumentException {\n  MathUtils.checkNotNull(v1);\n  MathUtils.checkNotNull(v2);\n  if (v1.length + v2.length == 0) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n  }\n  data=MathArrays.buildArray(field,v1.length + v2.length);\n  System.arraycopy(v1,0,data,0,v1.length);\n  System.arraycopy(v2,0,data,v1.length,v2.length);\n  this.field=field;\n}"}
{"ids": "14875", "raw_code": "private void verifyTargetSessionIsLocalOrStateless(SessionRequest req,SessionID sid) throws SessionException, SessionRequestException, ForwardSessionRequestException {\n  if (statelessSessionManager.containsJwt(sid)) {\n    return;\n  }\n  String hostServerID=foreignSessionHandler.getCurrentHostServer(sid);\n  if (!serverConfig.isLocalServer(hostServerID)) {\n    try {\n      throw new ForwardSessionRequestException(forward(SESSION_SERVICE_URL_SERVICE.getSessionServiceURL(hostServerID),req));\n    }\n catch (    SessionException se) {\n      if (!sessionService.checkServerUp(hostServerID)) {\n        String retryHostServerID=foreignSessionHandler.getCurrentHostServer(sid);\n        if (retryHostServerID.equals(hostServerID)) {\n          throw se;\n        }\n else {\n          if (!serverConfig.isLocalServer(retryHostServerID)) {\n            throw new ForwardSessionRequestException(forward(SESSION_SERVICE_URL_SERVICE.getSessionServiceURL(hostServerID),req));\n          }\n        }\n      }\n else {\n        throw se;\n      }\n    }\n  }\n  if (!sessionService.checkSessionLocal(sid)) {\n    throw new SessionRequestException(sid,SessionBundle.getString(\"sessionNotObtained\"));\n  }\n}"}
{"ids": "7190", "raw_code": "public static boolean isJavaBuiltinDataType(Class clazz){\n  if (clazz == null) {\n    return true;\n  }\n  Class clazzBoxed=getBoxedType(clazz);\n  if (isNumeric(clazzBoxed)) {\n    return true;\n  }\n  if (isBoolean(clazzBoxed)) {\n    return true;\n  }\n  if (clazzBoxed.equals(String.class)) {\n    return true;\n  }\n  if ((clazzBoxed.equals(char.class)) || (clazzBoxed.equals(Character.class))) {\n    return true;\n  }\n  if (clazzBoxed.equals(void.class)) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "21316", "raw_code": "protected boolean isControlChar(char ch){\n  return Character.isISOControl(ch) && !Character.isWhitespace(ch);\n}"}
{"ids": "48208", "raw_code": "public void encode(OutputStream out) throws IOException {\n  DerOutputStream tmp=new DerOutputStream();\n  if (extensionValue == null) {\n    extensionId=PKIXExtensions.PolicyConstraints_Id;\n    critical=false;\n    encodeThis();\n  }\n  super.encode(tmp);\n  out.write(tmp.toByteArray());\n}"}
{"ids": "59654", "raw_code": "<T>List<T> onFindAll(Class<T> modelClass,boolean isEager,long... ids){\n  List<T> dataList;\n  if (isAffectAllLines(ids)) {\n    dataList=query(modelClass,null,null,null,null,null,\"id\",null,getForeignKeyAssociations(modelClass.getName(),isEager));\n  }\n else {\n    dataList=query(modelClass,null,getWhereOfIdsWithOr(ids),null,null,null,\"id\",null,getForeignKeyAssociations(modelClass.getName(),isEager));\n  }\n  return dataList;\n}"}
{"ids": "28813", "raw_code": "public boolean isCached(String requestUrl,int maxWidth,int maxHeight){\n  return isCached(requestUrl,maxWidth,maxHeight,ScaleType.CENTER_INSIDE);\n}"}
{"ids": "46482", "raw_code": "public Style addStyle(String nm,Style parent){\n  StyleContext styles=(StyleContext)getAttributeContext();\n  return styles.addStyle(nm,parent);\n}"}
{"ids": "60312", "raw_code": "public static TextWithMnemonic parseText(final String textWithMnemonic){\n  if (textWithMnemonic == null) {\n    throw new IllegalArgumentException(\"textWithMnemonic cannot be null\");\n  }\n  int index=-1;\n  final StringBuffer plainText=new StringBuffer();\n  for (int i=0; i < textWithMnemonic.length(); i++) {\n    char ch=textWithMnemonic.charAt(i);\n    if (ch == '&') {\n      i++;\n      if (i >= textWithMnemonic.length()) {\n        break;\n      }\n      ch=textWithMnemonic.charAt(i);\n      if (ch != '&') {\n        index=plainText.length();\n      }\n    }\n    plainText.append(ch);\n  }\n  return new TextWithMnemonic(plainText.toString(),index);\n}"}
{"ids": "56818", "raw_code": "public void checkPermissions(NamespaceEntity namespaceEntity,String... requestedIamRoleNames){\n  checkPermissions(namespaceEntity,Arrays.asList(requestedIamRoleNames));\n}"}
{"ids": "34984", "raw_code": "private static AnnotatedTypeMirror asOuterSuper(Types types,AnnotatedTypeFactory atypeFactory,AnnotatedTypeMirror type,AnnotatedTypeMirror superType){\n  if (type.getKind() == TypeKind.DECLARED) {\n    AnnotatedDeclaredType dt=(AnnotatedDeclaredType)type;\n    AnnotatedDeclaredType enclosingType=dt;\n    TypeMirror superTypeMirror=types.erasure(superType.getUnderlyingType());\n    while (enclosingType != null) {\n      TypeMirror enclosingTypeMirror=types.erasure(enclosingType.getUnderlyingType());\n      if (types.isSubtype(enclosingTypeMirror,superTypeMirror)) {\n        dt=enclosingType;\n        break;\n      }\n      enclosingType=enclosingType.getEnclosingType();\n    }\n    if (enclosingType == null) {\n      return superType;\n    }\n    return asSuper(atypeFactory,dt,superType);\n  }\n  return asSuper(atypeFactory,type,superType);\n}"}
{"ids": "40607", "raw_code": "public void reload(SolrCore core,SolrIndexSearcher searcher) throws IOException {\n  LOG.info(\"reload()\");\n  if (dictionary == null && storeDir != null) {\n    FileInputStream is=new FileInputStream(new File(storeDir,factory.storeFileName()));\n    try {\n      if (lookup.load(is)) {\n        return;\n      }\n    }\n  finally {\n      IOUtils.closeWhileHandlingException(is);\n    }\n    LOG.debug(\"load failed, need to build Lookup again\");\n  }\n  build(core,searcher);\n}"}
{"ids": "77443", "raw_code": "public static String asString(String jsonPath,Map<String,Object> json){\n  return pathAs(String.class,jsonPath,json);\n}"}
{"ids": "3890", "raw_code": "@Override public ServerHeartbeat serverDyn(String address,int port,boolean isSSL,String clusterId,String displayName){\n  Objects.requireNonNull(address);\n  Objects.requireNonNull(clusterId);\n  ClusterHeartbeat cluster=createCluster(clusterId);\n  ServerHeartbeat server=cluster.createServer(address,port,isSSL);\n  if (displayName != null) {\n    server.setDisplayName(displayName);\n  }\n  cluster.addDynamicServer(server);\n  return server;\n}"}
{"ids": "81869", "raw_code": "public void paintComponentBackground(Object nativeGraphics,int x,int y,int width,int height,Style s){\n  if (width <= 0 || height <= 0) {\n    return;\n  }\n  Image bgImageOrig=s.getBgImage();\n  if (bgImageOrig == null) {\n    if (s.getBackgroundType() >= Style.BACKGROUND_GRADIENT_LINEAR_VERTICAL) {\n      drawGradientBackground(s,nativeGraphics,x,y,width,height);\n      return;\n    }\n    setColor(nativeGraphics,s.getBgColor());\n    fillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\n  }\n else {\n    int iW=bgImageOrig.getWidth();\n    int iH=bgImageOrig.getHeight();\n    Object bgImage=bgImageOrig.getImage();\nswitch (s.getBackgroundType()) {\ncase Style.BACKGROUND_NONE:\n      if (s.getBgTransparency() != 0) {\n        setColor(nativeGraphics,s.getBgColor());\n        fillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\n      }\n    return;\ncase Style.BACKGROUND_IMAGE_SCALED:\n  if (isScaledImageDrawingSupported()) {\n    drawImage(nativeGraphics,bgImage,x,y,width,height);\n  }\n else {\n    if (iW != width || iH != height) {\n      bgImageOrig=bgImageOrig.scaled(width,height);\n      s.setBgImage(bgImageOrig,true);\n      bgImage=bgImageOrig.getImage();\n    }\n    drawImage(nativeGraphics,bgImage,x,y);\n  }\nreturn;\ncase Style.BACKGROUND_IMAGE_SCALED_FILL:\nfloat r=Math.max(((float)width) / ((float)iW),((float)height) / ((float)iH));\nint bwidth=(int)(((float)iW) * r);\nint bheight=(int)(((float)iH) * r);\nif (isScaledImageDrawingSupported()) {\ndrawImage(nativeGraphics,bgImage,x + (width - bwidth) / 2,y + (height - bheight) / 2,bwidth,bheight);\n}\n else {\nif (iW != bwidth || iH != bheight) {\nbgImageOrig=bgImageOrig.scaled(bwidth,bheight);\ns.setBgImage(bgImageOrig,true);\nbgImage=bgImageOrig.getImage();\n}\ndrawImage(nativeGraphics,bgImage,x + (width - bwidth) / 2,y + (height - bheight) / 2);\n}\nreturn;\ncase Style.BACKGROUND_IMAGE_SCALED_FIT:\nif (s.getBgTransparency() != 0) {\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\n}\nfloat r2=Math.min(((float)width) / ((float)iW),((float)height) / ((float)iH));\nint awidth=(int)(((float)iW) * r2);\nint aheight=(int)(((float)iH) * r2);\nif (isScaledImageDrawingSupported()) {\ndrawImage(nativeGraphics,bgImage,x + (width - awidth) / 2,y + (height - aheight) / 2,awidth,aheight);\n}\n else {\nif (iW != awidth || iH != aheight) {\nbgImageOrig=bgImageOrig.scaled(awidth,aheight);\ns.setBgImage(bgImageOrig,true);\nbgImage=bgImageOrig.getImage();\n}\ndrawImage(nativeGraphics,bgImage,x + (width - awidth) / 2,y + (height - aheight) / 2,awidth,aheight);\n}\nreturn;\ncase Style.BACKGROUND_IMAGE_TILE_BOTH:\ntileImage(nativeGraphics,bgImage,x,y,width,height);\nreturn;\ncase Style.BACKGROUND_IMAGE_TILE_HORIZONTAL_ALIGN_TOP:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ntileImage(nativeGraphics,bgImage,x,y,width,iH);\nreturn;\ncase Style.BACKGROUND_IMAGE_TILE_HORIZONTAL_ALIGN_CENTER:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ntileImage(nativeGraphics,bgImage,x,y + (height / 2 - iH / 2),width,iH);\nreturn;\ncase Style.BACKGROUND_IMAGE_TILE_HORIZONTAL_ALIGN_BOTTOM:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ntileImage(nativeGraphics,bgImage,x,y + (height - iH),width,iH);\nreturn;\ncase Style.BACKGROUND_IMAGE_TILE_VERTICAL_ALIGN_LEFT:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\nfor (int yPos=0; yPos <= height; yPos+=iH) {\ndrawImage(nativeGraphics,bgImage,x,y + yPos);\n}\nreturn;\ncase Style.BACKGROUND_IMAGE_TILE_VERTICAL_ALIGN_CENTER:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\nfor (int yPos=0; yPos <= height; yPos+=iH) {\ndrawImage(nativeGraphics,bgImage,x + (width / 2 - iW / 2),y + yPos);\n}\nreturn;\ncase Style.BACKGROUND_IMAGE_TILE_VERTICAL_ALIGN_RIGHT:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\nfor (int yPos=0; yPos <= height; yPos+=iH) {\ndrawImage(nativeGraphics,bgImage,x + width - iW,y + yPos);\n}\nreturn;\ncase Style.BACKGROUND_IMAGE_ALIGNED_TOP:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ndrawImage(nativeGraphics,bgImage,x + (width / 2 - iW / 2),y);\nreturn;\ncase Style.BACKGROUND_IMAGE_ALIGNED_BOTTOM:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ndrawImage(nativeGraphics,bgImage,x + (width / 2 - iW / 2),y + (height - iH));\nreturn;\ncase Style.BACKGROUND_IMAGE_ALIGNED_LEFT:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ndrawImage(nativeGraphics,bgImage,x,y + (height / 2 - iH / 2));\nreturn;\ncase Style.BACKGROUND_IMAGE_ALIGNED_RIGHT:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ndrawImage(nativeGraphics,bgImage,x + width - iW,y + (height / 2 - iH / 2));\nreturn;\ncase Style.BACKGROUND_IMAGE_ALIGNED_CENTER:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ndrawImage(nativeGraphics,bgImage,x + (width / 2 - iW / 2),y + (height / 2 - iH / 2));\nreturn;\ncase Style.BACKGROUND_IMAGE_ALIGNED_TOP_LEFT:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ndrawImage(nativeGraphics,bgImage,x,y);\nreturn;\ncase Style.BACKGROUND_IMAGE_ALIGNED_TOP_RIGHT:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ndrawImage(nativeGraphics,bgImage,x + width - iW,y);\nreturn;\ncase Style.BACKGROUND_IMAGE_ALIGNED_BOTTOM_LEFT:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ndrawImage(nativeGraphics,bgImage,x,y + (height - iH));\nreturn;\ncase Style.BACKGROUND_IMAGE_ALIGNED_BOTTOM_RIGHT:\nsetColor(nativeGraphics,s.getBgColor());\nfillRect(nativeGraphics,x,y,width,height,s.getBgTransparency());\ndrawImage(nativeGraphics,bgImage,x + width - iW,y + (height - iH));\nreturn;\ncase Style.BACKGROUND_GRADIENT_LINEAR_HORIZONTAL:\ncase Style.BACKGROUND_GRADIENT_LINEAR_VERTICAL:\ncase Style.BACKGROUND_GRADIENT_RADIAL:\ndrawGradientBackground(s,nativeGraphics,x,y,width,height);\nreturn;\n}\n}\n}"}
{"ids": "77752", "raw_code": "public void removeAll(){\n  mParts.clear();\n}"}
{"ids": "8540", "raw_code": "public static boolean executableExists(String executable){\n  File directFile=new File(executable);\n  if (directFile.exists() && directFile.canExecute()) {\n    return true;\n  }\n  for (  String pathString : getSystemPath()) {\n    Path path=Paths.get(pathString);\n    if (Files.exists(path.resolve(executable)) && Files.isExecutable(path.resolve(executable))) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "35370", "raw_code": "private List<File> combine(List<File> listA,List<File> listB){\n  LinkedHashSet<File> combinedProjects=Sets.newLinkedHashSet(listA);\n  combinedProjects.addAll(listB);\n  return new ArrayList<>(combinedProjects);\n}"}
{"ids": "50873", "raw_code": "public long generateNewPingId(){\n  PreferenceStore prefs=getPreferenceStore();\n  Random rnd=new Random();\n  long id=rnd.nextLong();\nsynchronized (DdmsPreferenceStore.class) {\n    prefs.setValue(PING_ID,id);\n    try {\n      prefs.save();\n    }\n catch (    IOException e) {\n    }\n  }\n  return id;\n}"}
{"ids": "12011", "raw_code": "public boolean isValid(){\n  return System.currentTimeMillis() < creationTime + lifetime + (lifetime / 4);\n}"}
{"ids": "32986", "raw_code": "public static Model readFrom(VirtualFile file) throws ServerException, ForbiddenException, IOException {\n  requireNonNull(file,\"Required not null virtual file\");\n  return fetchModel(XMLTree.from(file.getContent()));\n}"}
{"ids": "78689", "raw_code": "public boolean isValueExistForKey(String key){\n  boolean isValueExists;\n  try {\n    String string=getString(key,\"\");\n    isValueExists=!string.equalsIgnoreCase(\"\");\n  }\n catch (  ClassCastException e) {\n    try {\n      int anInt=getInt(key,0);\n      isValueExists=anInt != 0;\n    }\n catch (    ClassCastException e1) {\n      try {\n        long aLong=getLong(key,0);\n        isValueExists=aLong != 0;\n      }\n catch (      ClassCastException e2) {\n        try {\n          float aFloat=getFloat(key,0f);\n          isValueExists=aFloat != 0;\n        }\n catch (        ClassCastException e3) {\n          try {\n            boolean aBoolean=getBoolean(key,false);\n            isValueExists=!aBoolean;\n          }\n catch (          Exception e4) {\n            isValueExists=false;\n            e.printStackTrace();\n          }\n        }\n      }\n    }\n  }\ncatch (  Exception e) {\n    isValueExists=false;\n  }\n  return isValueExists;\n}"}
{"ids": "83317", "raw_code": "public static void writeBoxplot(TDoubleObjectHashMap<double[]> table,String file) throws IOException {\n  int maxSize=0;\n  TDoubleObjectIterator<double[]> it=table.iterator();\n  for (int i=0; i < table.size(); i++) {\n    it.advance();\n    maxSize=Math.max(maxSize,it.value().length);\n  }\n  double keys[]=table.keys();\n  Arrays.sort(keys);\n  BufferedWriter writer=new BufferedWriter(new FileWriter(file));\n  for (int k=0; k < keys.length; k++) {\n    writer.write(String.valueOf(keys[k]));\n    if (k + 1 < keys.length)     writer.write(TAB);\n  }\n  writer.newLine();\n  for (int i=0; i < maxSize; i++) {\n    for (int k=0; k < keys.length; k++) {\n      double[] list=table.get(keys[k]);\n      if (i < list.length) {\n        writer.write(String.valueOf(list[i]));\n      }\n else {\n        writer.write(NA);\n      }\n      if (k + 1 < keys.length)       writer.write(TAB);\n    }\n    writer.newLine();\n  }\n  writer.close();\n}"}
{"ids": "54171", "raw_code": "@Theory public void logEntriesHaveSameOrderAsIndexes(Object[] dataPoint){\n  int index1=(int)dataPoint[0];\n  int index2=(int)dataPoint[1];\n  LogEntry first=logEntries[index1];\n  LogEntry second=logEntries[index2];\n  LOG.debug(\"testing comparator for log entries: {} and {}\",index1,index2);\n  int result=tested.compare(first,second);\n  int expected=Integer.compare(index1,index2);\n  assertThatHaveSameSignum(expected,result);\n}"}
{"ids": "85379", "raw_code": "public static void copyAll(File root,File dest) throws IOException {\n  if (root.isDirectory()) {\n    for (    File child : root.listFiles()) {\n      File childDest=new File(dest,child.getName());\n      if (child.isDirectory()) {\n        if (!childDest.exists() && !mkdirs(childDest))         throw new IOException(\"Failed to create dir \" + childDest.getPath());\n        copyAll(child,childDest);\n      }\n else {\n        Files.copy(child.toPath(),childDest.toPath(),StandardCopyOption.COPY_ATTRIBUTES);\n      }\n    }\n  }\n else {\n    File childDest=new File(dest,root.getName());\n    if (!dest.exists() && !mkdirs(dest))     throw new IOException(\"Failed to create dir \" + dest.getPath());\n    Files.copy(root.toPath(),childDest.toPath(),StandardCopyOption.COPY_ATTRIBUTES);\n  }\n}"}
{"ids": "11529", "raw_code": "public void paintLine(Point2D pt1,Point2D pt2){\n  if (pt1 != null && pt2 != null) {\n    OMLine cLine=new OMLine(pt1.getY(),pt1.getX(),pt2.getY(),pt2.getX(),OMGraphic.LINETYPE_GREATCIRCLE);\n    Projection proj=theMap.getProjection();\n    cLine.generate(proj);\n    distanceList.add(cLine);\n  }\n}"}
{"ids": "21723", "raw_code": "public static boolean hasExportMaskForStorageAndVArray(DbClient dbClient,ExportGroup exportGroup,URI storageURI){\n  Set<String> storagePortURIsAssociatedWithVArrayAndStorageArray=ExportMaskUtils.getStoragePortUrisAssociatedWithVarrayAndStorageArray(storageURI,exportGroup.getVirtualArray(),dbClient);\n  StringSet maskUriSet=exportGroup.getExportMasks();\n  if (maskUriSet != null) {\n    for (    String maskUriString : maskUriSet) {\n      ExportMask mask=dbClient.queryObject(ExportMask.class,URI.create(maskUriString));\n      URI maskStorageURI=mask.getStorageDevice();\n      if (maskStorageURI.equals(storageURI)) {\n        for (        String storagePort : mask.getStoragePorts()) {\n          if (storagePortURIsAssociatedWithVArrayAndStorageArray.contains(storagePort))           return true;\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "2024", "raw_code": "private void preload(int first,boolean increasing){\n  final int start;\n  final int end;\n  if (increasing) {\n    start=Math.max(first,mLastEnd);\n    end=Math.min(first + mLoadAheadItems,mItemSource.getCount());\n  }\n else {\n    start=Math.max(0,first - mLoadAheadItems);\n    end=Math.min(first,mLastStart);\n  }\n  Log.v(TAG,\"preload first=\" + first + \" increasing=\"+ increasing+ \" start=\"+ start+ \" end=\"+ end);\n  mLastEnd=end;\n  mLastStart=start;\n  if (start == 0 && end == 0) {\n    return;\n  }\n  final List<T> items=mItemSource.getItemsInRange(start,end);\n  if (!increasing) {\n    Collections.reverse(items);\n  }\n  registerLoadTokens(mItemLoader.preloadItems(items));\n}"}
{"ids": "19677", "raw_code": "private void initRMIParameters() throws Exception {\n  if (rmiHostMaster == null || rmiPortMaster == null) {\n    File confDir=ReplicatorRuntimeConf.locateReplicatorConfDir();\n    File propsFile=new File(confDir,ReplicationServiceManager.CONFIG_SERVICES);\n    println(String.format(\"Not all RMI parameters provided, using configuration: %s\",propsFile));\n    TungstenProperties serviceProps=PropertiesManager.loadProperties(propsFile);\n    if (rmiPortMaster == null)     rmiPortMaster=serviceProps.getString(ReplicatorConf.RMI_PORT,ReplicatorConf.RMI_DEFAULT_PORT,false);\n    if (rmiHostMaster == null)     rmiHostMaster=ReplicationServiceManager.getHostName(serviceProps);\n  }\n}"}
{"ids": "14339", "raw_code": "public String encodeKey(final String key){\n  if (StringUtils.isEmpty(key)) {\n    throw new IllegalArgumentException(\"Key cannot be empty\");\n  }\n  try {\n    return Hex.encodeHexString(key.getBytes(\"UTF-8\"));\n  }\n catch (  UnsupportedEncodingException uee) {\n    throw new IllegalStateException(uee);\n  }\n}"}
{"ids": "74654", "raw_code": "public static boolean restore(){\n  File restoreConfig=new File(RESTORATION_PROPERTIES);\n  if (restoreConfig.exists() && restoreConfig.isFile()) {\n    logger.info(\"Performing restoration DHuS system...\");\n    try (FileInputStream stream=new FileInputStream(restoreConfig)){\n      Properties properties=new Properties();\n      properties.load(stream);\n      restoreDatabase(properties);\n      restoreSolrIndex(properties);\n    }\n catch (    UnsupportedOperationException e) {\n      logger.error(\"Incomplete DHuS restoration file.\",e);\n      System.setProperty(\"Archive.check\",\"true\");\n    }\ncatch (    Exception e) {\n      logger.fatal(\"Restoration failure.\",e);\n      return false;\n    }\n finally {\n      restoreConfig.delete();\n    }\n  }\n  return true;\n}"}
{"ids": "68021", "raw_code": "@Override public void writeComment(String data) throws XMLStreamException {\n  log.log(Level.FINE,\"writeComment({0})\",data);\n}"}
{"ids": "15679", "raw_code": "public static File fromDataURI(String dataURI,String fileName){\n  return File.createIfSupported(fromDataURI(dataURI),fileName);\n}"}
{"ids": "33424", "raw_code": "protected List extractDiscoveryInformation(XRDS xrds,XriIdentifier identifier,Resolver xriResolver) throws DiscoveryException {\n  ArrayList endpoints=new ArrayList();\n  XRD xrd=xrds.getFinalXRD();\n  extractDiscoveryInformationOpenID(xriResolver,endpoints,xrd,identifier,DiscoveryInformation.OPENID2_OP,false);\n  extractDiscoveryInformationOpenID(xriResolver,endpoints,xrd,identifier,DiscoveryInformation.OPENID2,true);\n  extractDiscoveryInformationOpenID(xriResolver,endpoints,xrd,identifier,DiscoveryInformation.OPENID11,true);\n  extractDiscoveryInformationOpenID(xriResolver,endpoints,xrd,identifier,DiscoveryInformation.OPENID10,true);\n  if (endpoints.size() == 0)   _log.info(\"No OpenID service types found in the XRDS.\");\n  return endpoints;\n}"}
{"ids": "20821", "raw_code": "public static void clearRecentFiles(){\n  String str=ProgramProperties.get(RECENTFILES,\"\");\n  if (str.length() != 0) {\n    ProgramProperties.put(RECENTFILES,\"\");\n    notifyListChange(RECENTFILES);\n  }\n}"}
{"ids": "78720", "raw_code": "public static boolean areEquivalent(final TypeReference a,final TypeReference b){\n  return areEquivalent(a,b,true);\n}"}
{"ids": "49201", "raw_code": "private boolean initXSettingsIfNeeded(final String propName){\n  if (!loadedXSettings && (propName.startsWith(\"gnome.\") || propName.equals(SunToolkit.DESKTOPFONTHINTS) || propName.startsWith(dndPrefix))) {\n    loadedXSettings=true;\n    if (!GraphicsEnvironment.isHeadless()) {\n      loadXSettings();\n      if (desktopProperties.get(SunToolkit.DESKTOPFONTHINTS) == null) {\n        if (XWM.isKDE2()) {\n          Object hint=fcManager.getFontConfigAAHint();\n          if (hint != null) {\n            desktopProperties.put(UNIXToolkit.FONTCONFIGAAHINT,hint);\n          }\n        }\n        desktopProperties.put(SunToolkit.DESKTOPFONTHINTS,SunToolkit.getDesktopFontHints());\n      }\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "36489", "raw_code": "private void updateSortingIcons(){\n  for (  SortingType type : SortingType.values()) {\n    SortingDirection direction=model.getSortingDirection(type);\n    ImageIcon icon;\nswitch (direction) {\ncase DESCENDING:\n      icon=ICON_ARROW_DOWN;\n    break;\ncase ASCENDING:\n  icon=ICON_ARROW_UP;\nbreak;\ncase UNDEFINED:\nicon=null;\nbreak;\ndefault :\nicon=null;\n}\nswitch (type) {\ncase NAME:\nsortingLabelAttName.setIcon(icon);\nbreak;\ncase TYPE:\nsortingLabelAttType.setIcon(icon);\nbreak;\ncase MISSING:\nsortingLabelAttMissings.setIcon(icon);\nbreak;\ndefault :\nsortingLabelAttName.setIcon(null);\nsortingLabelAttType.setIcon(null);\nsortingLabelAttMissings.setIcon(null);\n}\n}\n}"}
{"ids": "77833", "raw_code": "private void restoreIcon(Key key,byte[] buffer,int dataSize) throws IOException {\n  if (VERBOSE)   Log.v(TAG,\"unpacking icon \" + key.id);\n  if (DEBUG)   Log.d(TAG,\"read (\" + buffer.length + \"): \"+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));\n  Resource res=unpackProto(new Resource(),buffer,dataSize);\n  if (DEBUG) {\n    Log.d(TAG,\"unpacked \" + res.dpi + \" dpi icon\");\n  }\n  Bitmap icon=BitmapFactory.decodeByteArray(res.data,0,res.data.length);\n  if (icon == null) {\n    Log.w(TAG,\"failed to unpack icon for \" + key.name);\n  }\n  if (VERBOSE)   Log.v(TAG,\"saving restored icon as: \" + key.name);\n  IconCache.preloadIcon(mContext,ComponentName.unflattenFromString(key.name),icon,res.dpi);\n}"}
{"ids": "20447", "raw_code": "public static void readBytes(InputStream is,byte[] b,int offset,int len){\n  if (len == 0)   return;\n  try {\n    int read=0;\n    while (read < len) {\n      int n=is.read(b,offset + read,len - read);\n      if (n < 1)       throw new PngjInputException(\"error reading bytes, \" + n + \" !=\"+ len);\n      read+=n;\n    }\n  }\n catch (  IOException e) {\n    throw new PngjInputException(\"error reading\",e);\n  }\n}"}
{"ids": "81369", "raw_code": "public CharacterMatch(char[] chars){\n  Assert.isNotNull(chars);\n  Assert.isTrue(chars.length > 0);\n  fChars=chars;\n  Arrays.sort(chars);\n}"}
{"ids": "38307", "raw_code": "public void addActionListener(ActionListener newA){\n  m_Listeners.add(newA);\n}"}
{"ids": "22627", "raw_code": "public boolean removeContainerAndCancelIfNecessary(ImageContainer container){\n  mContainers.remove(container);\n  if (mContainers.size() == 0) {\n    mRequest.cancel();\n    return true;\n  }\n  return false;\n}"}
{"ids": "61090", "raw_code": "public static byte[] encode(byte[] data,int off,int length){\n  ByteArrayOutputStream bOut=new ByteArrayOutputStream();\n  try {\n    encoder.encode(data,off,length,bOut);\n  }\n catch (  Exception e) {\n    throw new EncoderException(\"exception encoding Hex string: \" + e.getMessage(),e);\n  }\n  return bOut.toByteArray();\n}"}
{"ids": "83423", "raw_code": "public double distanceToLineSegment(LatLong A,LatLong B){\n  double Ax=(A.lng - lng) * Math.cos(0.5 * radians * (A.lat + lat));\n  double Ay=(A.lat - lat);\n  double Bx=(B.lng - lng) * Math.cos(0.5 * radians * (B.lat + lat));\n  double By=(B.lat - lat);\n  if (Ay == By) {\n    if ((Ax < 0 && Bx < 0) || (Ax > 0 && Bx > 0))     return Math.sqrt(Math.min(Ax * Ax + Ay * Ay,Bx * Bx + By * By)) * EarthRadius * radians;\n    if (Ax == Bx)     return Math.sqrt(Ax * Ax + Ay * Ay) * EarthRadius * radians;\n  }\n else {\n    double Ix=((By - Ay) * (Ax * By - Ay * Bx)) / ((Ax - Bx) * (Ax - Bx) + (Ay - By) * (Ay - By));\n    if ((Ix < Ax && Ix < Bx) || (Ix > Ax && Ix > Bx)) {\n      return Math.sqrt(Math.min(Ax * Ax + Ay * Ay,Bx * Bx + By * By)) * EarthRadius * radians;\n    }\n  }\n  return Math.abs((Bx - Ax) * Ay - Ax * (By - Ay)) / Math.sqrt((Bx - Ax) * (Bx - Ax) + (By - Ay) * (By - Ay)) * EarthRadius * radians;\n}"}
{"ids": "76495", "raw_code": "@NotNull public List<PlayerNbt> createMultiplayerPlayerNbts(){\n  List<PlayerNbt> result=new ArrayList<PlayerNbt>();\n  for (  File playerdataFile : getPlayerdataFiles()) {\n    if (playerdataFile.isFile()) {\n      result.add(createPlayerdataPlayerNbt(getPlayerUUIDFromPlayerdataFile(playerdataFile)));\n    }\n  }\n  if (!result.isEmpty()) {\n    Log.i(\"using players from the playerdata directory\");\n    return result;\n  }\n  for (  File playersFile : getPlayersFiles()) {\n    if (playersFile.isFile()) {\n      result.add(createPlayersPlayerNbt(getPlayerNameFromPlayersFile(playersFile)));\n    }\n  }\n  if (!result.isEmpty()) {\n    Log.i(\"using players from the players directory\");\n    return result;\n  }\n  Log.i(\"no multiplayer players found\");\n  return result;\n}"}
{"ids": "6635", "raw_code": "private void show(SetupWindow window){\n  window.handleWindowOpeningEvent();\n  _setupWindowHolder.show(window.getKey());\n  _currentWindow=window;\n}"}
{"ids": "82512", "raw_code": "public java.lang.StringBuffer append(java.lang.String str){\n  internal.append(str);\n  return this;\n}"}
{"ids": "62120", "raw_code": "private static String replaceStars(String init){\n  StringBuilder builder=new StringBuilder();\n  char[] chars=init.toCharArray();\n  for (int i=0; i < chars.length; i++) {\n    if (chars[i] == '*' && i == 0 && chars.length > 1 && chars[i + 1] == ' ') {\n      builder.append(\"(?:.+ |)\");\n      i++;\n    }\n else     if (chars[i] == '*' && i < (chars.length - 1) && i > 0 && chars[i + 1] == ' ' && chars[i - 1] == ' ') {\n      builder.deleteCharAt(builder.length() - 1);\n      builder.append(\"(?:.+|)\");\n    }\n else     if (chars[i] == '*' && i == (chars.length - 1) && i > 0 && chars[i - 1] == ' ') {\n      builder.deleteCharAt(builder.length() - 1);\n      builder.append(\"(?: .+|)\");\n    }\n else     if (chars[i] == '*') {\n      builder.append(\"(?:.*)\");\n    }\n else {\n      builder.append(chars[i]);\n    }\n  }\n  return builder.toString();\n}"}
{"ids": "29099", "raw_code": "public void startOptionGroup(String description){\n  optionGroups.put(optionList.size(),description);\n}"}
{"ids": "15879", "raw_code": "private byte[] encrypt(byte[] m,NTRUEncryptionPublicKeyParameters pubKey){\n  IntegerPolynomial pub=pubKey.h;\n  int N=params.N;\n  int q=params.q;\n  int maxLenBytes=params.maxMsgLenBytes;\n  int db=params.db;\n  int bufferLenBits=params.bufferLenBits;\n  int dm0=params.dm0;\n  int pkLen=params.pkLen;\n  int minCallsMask=params.minCallsMask;\n  boolean hashSeed=params.hashSeed;\n  byte[] oid=params.oid;\n  int l=m.length;\n  if (maxLenBytes > 255) {\n    throw new IllegalArgumentException(\"llen values bigger than 1 are not supported\");\n  }\n  if (l > maxLenBytes) {\n    throw new DataLengthException(\"Message too long: \" + l + \">\"+ maxLenBytes);\n  }\n  while (true) {\n    byte[] b=new byte[db / 8];\n    random.nextBytes(b);\n    byte[] p0=new byte[maxLenBytes + 1 - l];\n    byte[] M=new byte[bufferLenBits / 8];\n    System.arraycopy(b,0,M,0,b.length);\n    M[b.length]=(byte)l;\n    System.arraycopy(m,0,M,b.length + 1,m.length);\n    System.arraycopy(p0,0,M,b.length + 1 + m.length,p0.length);\n    IntegerPolynomial mTrin=IntegerPolynomial.fromBinary3Sves(M,N);\n    byte[] bh=pub.toBinary(q);\n    byte[] hTrunc=copyOf(bh,pkLen / 8);\n    byte[] sData=buildSData(oid,m,l,b,hTrunc);\n    Polynomial r=generateBlindingPoly(sData,M);\n    IntegerPolynomial R=r.mult(pub,q);\n    IntegerPolynomial R4=(IntegerPolynomial)R.clone();\n    R4.modPositive(4);\n    byte[] oR4=R4.toBinary(4);\n    IntegerPolynomial mask=MGF(oR4,N,minCallsMask,hashSeed);\n    mTrin.add(mask);\n    mTrin.mod3();\n    if (mTrin.count(-1) < dm0) {\n      continue;\n    }\n    if (mTrin.count(0) < dm0) {\n      continue;\n    }\n    if (mTrin.count(1) < dm0) {\n      continue;\n    }\n    R.add(mTrin,q);\n    R.ensurePositive(q);\n    return R.toBinary(q);\n  }\n}"}
{"ids": "9186", "raw_code": "public final void expectAtLeastOneResult(ResultSet rs) throws AdeInternalException, SQLException {\n  if (!rs.next()) {\n    throw new AdeInternalException(\"Expecting at least one row from \" + m_sql);\n  }\n}"}
{"ids": "1556", "raw_code": "public Sequence(){\n  this(INITIAL_VALUE);\n}"}
{"ids": "26111", "raw_code": "public static Optional<MongoCredential> createCredentials(String username,String password,String database){\n  if (!Strings.isNullOrEmpty(username) && !Strings.isNullOrEmpty(password) && !Strings.isNullOrEmpty(database)) {\n    return Optional.of(MongoCredential.createMongoCRCredential(username,database,password.toCharArray()));\n  }\n else {\n    return Optional.absent();\n  }\n}"}
{"ids": "24188", "raw_code": "@Override public void stop(){\n  if (executorService != null) {\n    executorService.shutdown();\n  }\n  restTemplate=null;\n}"}
{"ids": "85858", "raw_code": "public void writeExif(InputStream jpegStream,String exifOutFileName) throws FileNotFoundException, IOException {\n  if (jpegStream == null || exifOutFileName == null) {\n    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);\n  }\n  OutputStream s=null;\n  try {\n    s=getExifWriterStream(exifOutFileName);\n    doExifStreamIO(jpegStream,s);\n    s.flush();\n  }\n catch (  IOException e) {\n    closeSilently(s);\n    throw e;\n  }\n  s.close();\n}"}
{"ids": "45852", "raw_code": "public ResultRecord(DirectoryScannerConfig scan,Action[] actions,File f){\n  directoryScanner=scan.getName();\n  this.actions=actions;\n  date=new Date();\n  filename=f.getAbsolutePath();\n}"}
{"ids": "48955", "raw_code": "private MethodDoc findImplMethod(MethodDoc interfaceMethod){\n  String name=interfaceMethod.name();\n  String desc=Util.methodDescriptorOf(interfaceMethod);\n  for (  MethodDoc implMethod : implClass.methods()) {\n    if (name.equals(implMethod.name()) && desc.equals(Util.methodDescriptorOf(implMethod))) {\n      return implMethod;\n    }\n  }\n  return null;\n}"}
{"ids": "34990", "raw_code": "protected static List<String> extractBootClassPath(final List<String> args){\n  return extractOptWithPattern(BOOT_CLASS_PATH_REGEX,false,args);\n}"}
{"ids": "84606", "raw_code": "public ContourPath(ContourAttrib attr,int levelIndex,double[] x,double[] y){\n  xArr=x;\n  yArr=y;\n  this.levelIndex=levelIndex;\n  attributes=attr;\n  int np=xArr.length;\n  if (Math.abs(x[0] - x[np - 1]) < kSmallX && Math.abs(y[0] - y[np - 1]) < kSmallY) {\n    closed=true;\n    x[np - 1]=x[0];\n    y[np - 1]=y[0];\n  }\n else   closed=false;\n}"}
{"ids": "63391", "raw_code": "@Override public void removeConnectionEventListener(ConnectionEventListener listener){\n  debugCode(\"removeConnectionEventListener(listener);\");\n  listeners.remove(listener);\n}"}
{"ids": "6534", "raw_code": "public boolean isDownloadable(){\n  List<String> topics=getExactTopics();\n  for (  String xt : topics)   if (xt.startsWith(\"urn:btih\"))   return true;\n  if (getDefaultURLs().length > 0) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "33638", "raw_code": "public boolean isSatisfiedBy(Date date){\n  Calendar testDateCal=Calendar.getInstance(getTimeZone());\n  testDateCal.setTime(date);\n  testDateCal.set(Calendar.MILLISECOND,0);\n  Date originalDate=testDateCal.getTime();\n  testDateCal.add(Calendar.SECOND,-1);\n  Date timeAfter=getTimeAfter(testDateCal.getTime());\n  return ((timeAfter != null) && (timeAfter.equals(originalDate)));\n}"}
{"ids": "64516", "raw_code": "public static Vector<String> scanForDirLogs(final String currentPath){\n  if (Cfg.DEBUG) {\n    Check.requires(currentPath != null,\"null argument\");\n  }\n  File fc;\n  final Vector<String> vector=new Vector<String>();\n  try {\n    fc=new File(currentPath);\n    if (fc.isDirectory()) {\n      final String[] fileLogs=fc.list();\n      for (      final String dir : fileLogs) {\n        final File fdir=new File(currentPath + dir);\n        if (fdir.isDirectory()) {\n          vector.addElement(dir + \"/\");\n          if (Cfg.DEBUG) {\n            Check.log(TAG + \" scanForDirLogs adding: \" + dir);\n          }\n        }\n      }\n    }\n  }\n catch (  final Exception e) {\n    if (Cfg.EXCEPTION) {\n      Check.log(e);\n    }\n    if (Cfg.DEBUG) {\n      Check.log(TAG + \" Error: scanForDirLogs: \" + e);\n    }\n  }\n  if (Cfg.DEBUG) {\n    Check.log(TAG + \" scanForDirLogs #: \" + vector.size());\n  }\n  return vector;\n}"}
{"ids": "24551", "raw_code": "private static ArrayList<String> flattenRows(Cursor cursor,int limit){\n  Util.throwIfNot(limit >= 0);\n  ArrayList<String> flatList=new ArrayList<>();\n  final int numColumns=cursor.getColumnCount();\n  for (int row=0; row < limit && cursor.moveToNext(); row++) {\n    for (int column=0; column < numColumns; column++) {\nswitch (cursor.getType(column)) {\ncase Cursor.FIELD_TYPE_NULL:\n        flatList.add(null);\n      break;\ncase Cursor.FIELD_TYPE_INTEGER:\n    flatList.add(String.valueOf(cursor.getLong(column)));\n  break;\ncase Cursor.FIELD_TYPE_FLOAT:\nflatList.add(String.valueOf(cursor.getDouble(column)));\nbreak;\ncase Cursor.FIELD_TYPE_BLOB:\nflatList.add(blobToString(cursor.getBlob(column)));\nbreak;\ncase Cursor.FIELD_TYPE_STRING:\ndefault :\nflatList.add(cursor.getString(column));\nbreak;\n}\n}\n}\nif (!cursor.isAfterLast()) {\nfor (int column=0; column < numColumns; column++) {\nflatList.add(\"{truncated}\");\n}\n}\nreturn flatList;\n}"}
{"ids": "3859", "raw_code": "private Process executeCompiler(ArrayList<String> argList,ArrayList<String> envList,boolean chdir) throws IOException {\n  String[] args;\n  if (chdir) {\n    CharBuffer cb=new CharBuffer();\n    cb.append(\"cd \");\n    cb.append(_compiler.getSourceDirName());\n    cb.append(\";\");\n    for (int i=0; i < argList.size(); i++) {\n      cb.append(\" \");\n      cb.append(argList.get(i));\n    }\n    args=new String[3];\n    args[0]=\"/bin/sh\";\n    args[1]=\"-c\";\n    args[2]=cb.toString();\n  }\n else {\n    args=new String[argList.size()];\n    argList.toArray(args);\n  }\n  String[] envp=new String[envList.size()];\n  envList.toArray(envp);\n  if (log.isLoggable(Level.FINE)) {\n    CharBuffer cb=CharBuffer.allocate();\n    for (int i=0; i < args.length; i++) {\n      if (i != 0)       cb.append(\" \");\n      cb.append(args[i]);\n    }\n    log.fine(cb.close());\n  }\n  Runtime runtime=Runtime.getRuntime();\n  try {\n    return runtime.exec(args);\n  }\n catch (  Exception e) {\n    throw new JavaCompileException(L.l(\"Can't execute the compiler `{0}'.  This usually means that the compiler is not in the operating system's PATH or the compiler is incorrectly specified in the configuration.  You may need to add the full path to <java compiler='{0}'/>.\\n\\n{1}\",args[0],String.valueOf(e)));\n  }\n}"}
{"ids": "24418", "raw_code": "public void collapseAllParents(){\n  if (mDataList != null && !mDataList.isEmpty()) {\n    ArrayList<Object> expandableListItems=getParents(true);\n    if (expandableListItems != null && !expandableListItems.isEmpty()) {\n      final int expandedItemSize=expandableListItems.size();\n      if (expandedItemSize > 0) {\n        for (int i=0; i < expandedItemSize; i++) {\n          Object o=expandableListItems.get(i);\n          int indexOf=mDataList.indexOf(o);\n          if (indexOf >= 0)           collapseListItem(indexOf,(BaseExpandableObservable)o,false);\n        }\n      }\n    }\n  }\n}"}
{"ids": "85226", "raw_code": "@Deprecated protected PdfFormXObject drawPushButtonAppearance(float width,float height,String text,PdfFont font,int fontSize){\n  return drawPushButtonAppearance(width,height,text,font,(float)fontSize);\n}"}
{"ids": "13536", "raw_code": "public NBTTagCompound loadFile(File saveDirectory,String filename){\n  return loadFile(new File(saveDirectory,filename + \".dat\"));\n}"}
{"ids": "42867", "raw_code": "public boolean dnsDomainIs(String host,String domain){\n  return host.endsWith(domain);\n}"}
{"ids": "83699", "raw_code": "@SuppressWarnings(\"unused\") public SelectionBuilder reset(){\n  mTable=null;\n  if (mProjectionMap != null) {\n    mProjectionMap.clear();\n  }\n  if (mSelection != null) {\n    mSelection.setLength(0);\n  }\n  if (mSelectionArgs != null) {\n    mSelectionArgs.clear();\n  }\n  return this;\n}"}
{"ids": "48089", "raw_code": "private final synchronized Enumeration<PolicyEntry> elements(){\n  return policyEntries.elements();\n}"}
{"ids": "45751", "raw_code": "public String format(Calendar calendar,Calendar smscCalendar){\n  if (calendar == null || smscCalendar == null) {\n    return null;\n  }\n  long diffTimeInMillis=calendar.getTimeInMillis() - smscCalendar.getTimeInMillis();\n  if (diffTimeInMillis < 0) {\n    throw new IllegalArgumentException(\"The requested relative time has already past.\");\n  }\n  Calendar offsetEpoch=Calendar.getInstance(utcTimeZone);\n  offsetEpoch.setTimeInMillis(diffTimeInMillis);\n  int years=offsetEpoch.get(Calendar.YEAR) - 1970;\n  int months=offsetEpoch.get(Calendar.MONTH);\n  int days=offsetEpoch.get(Calendar.DAY_OF_MONTH) - 1;\n  int hours=offsetEpoch.get(Calendar.HOUR_OF_DAY);\n  int minutes=offsetEpoch.get(Calendar.MINUTE);\n  int seconds=offsetEpoch.get(Calendar.SECOND);\n  if (years >= 100) {\n    throw new IllegalArgumentException(\"The requested relative time is more then a century (\" + years + \" years).\");\n  }\n  return format(years,months,days,hours,minutes,seconds);\n}"}
{"ids": "37897", "raw_code": "private void calculateEntropy(double scale,KStarWrapper params){\n  int i, j, k;\n  double actent=0.0, randent=0.0;\n  double pstar, tprob, avgprob=0.0, minprob=1.0;\n  double actClassProb, randClassProb;\n  double[][] pseudoClassProbs=new double[NUM_RAND_COLS + 1][m_NumClasses];\n  for (j=0; j <= NUM_RAND_COLS; j++) {\n    for (i=0; i < m_NumClasses; i++) {\n      pseudoClassProbs[j][i]=0.0;\n    }\n  }\n  for (i=0; i < m_NumInstances; i++) {\n    if (m_Distances[i] < 0) {\n      continue;\n    }\n else {\n      pstar=PStar(m_Distances[i],scale);\n      tprob=pstar / m_ActualCount;\n      avgprob+=tprob;\n      if (pstar < minprob) {\n        minprob=pstar;\n      }\n      for (k=0; k <= NUM_RAND_COLS; k++) {\n        pseudoClassProbs[k][m_RandClassCols[k][i]]+=tprob;\n      }\n    }\n  }\n  for (j=m_NumClasses - 1; j >= 0; j--) {\n    actClassProb=pseudoClassProbs[NUM_RAND_COLS][j] / avgprob;\n    if (actClassProb > 0) {\n      actent-=actClassProb * Math.log(actClassProb) / LOG2;\n    }\n  }\n  for (k=0; k < NUM_RAND_COLS; k++) {\n    for (i=m_NumClasses - 1; i >= 0; i--) {\n      randClassProb=pseudoClassProbs[k][i] / avgprob;\n      if (randClassProb > 0) {\n        randent-=randClassProb * Math.log(randClassProb) / LOG2;\n      }\n    }\n  }\n  randent/=NUM_RAND_COLS;\n  params.actEntropy=actent;\n  params.randEntropy=randent;\n  params.avgProb=avgprob;\n  params.minProb=minprob;\n}"}
{"ids": "58299", "raw_code": "public static void initCause(Throwable throwable,Throwable cause){\n  if (INIT_CAUSE_METHOD != null) {\n    try {\n      INIT_CAUSE_METHOD.invoke(throwable,new Object[]{cause});\n    }\n catch (    Exception e) {\n    }\n  }\n}"}
{"ids": "37481", "raw_code": "public static boolean canRun(final File file){\n  return manager.getEngineByExtension(FileUtils.getFileExtension(file)) != null;\n}"}
{"ids": "36720", "raw_code": "public void parseElement(String tagName,Map<String,Object> attrs){\n  if (canvas == null && tagName.equalsIgnoreCase(\"GRAPH\")) {\n    scale=mxUtils.getDouble(attrs,\"scale\",1);\n    canvas=createCanvas(attrs);\n    if (canvas != null) {\n      canvas.setScale(scale);\n    }\n  }\n else   if (canvas != null) {\n    boolean drawLabel=false;\n    if (tagName.equalsIgnoreCase(\"VERTEX\") || tagName.equalsIgnoreCase(\"GROUP\")) {\n      drawVertex(attrs);\n      drawLabel=true;\n    }\n else     if (tagName.equalsIgnoreCase(\"EDGE\")) {\n      drawEdge(attrs);\n      drawLabel=true;\n    }\n    if (drawLabel) {\n      drawLabel(tagName.equalsIgnoreCase(\"EDGE\"),attrs);\n    }\n  }\n}"}
{"ids": "34764", "raw_code": "private void startPrecaching(){\n  Log.v(TAG,\"Start precaching\");\n  prepareNativeLibraries();\n  sIsPrecaching=true;\n  acquirePrecachingWakeLock();\n  mPrecacheLauncher.start();\n}"}
{"ids": "38242", "raw_code": "@Override public Enumeration<Option> listOptions(){\n  Vector<Option> newVector=new Vector<Option>(1);\n  newVector.addElement(new Option(\"\\tSets the range of attribute indices (default last).\",\"R\",1,\"-R <col>\"));\n  newVector.addElement(new Option(\"\\tInvert the range specified by -R.\",\"V\",1,\"-V <col>\"));\n  return newVector.elements();\n}"}
{"ids": "16675", "raw_code": "public WordAlignmentState(final Rule rule,final int start){\n  trgPoints=new LinkedList<>();\n  srcLength=rule.getFrench().length;\n  numNT=rule.getArity();\n  srcStart=start;\n  final Map<Integer,List<Integer>> alignmentMap=rule.getAlignmentMap();\n  final int[] nonTerminalSourcePositions=rule.getNonTerminalSourcePositions();\n  final int[] trg=rule.getEnglish();\n  for (int trgIndex=0; trgIndex < trg.length; trgIndex++) {\n    final AlignedSourceTokens trgPoint=new AlignedSourceTokens();\n    if (trg[trgIndex] >= 0) {\n      if (alignmentMap.containsKey(trgIndex)) {\n        for (        int srcIdx : alignmentMap.get(trgIndex)) {\n          trgPoint.add(srcStart + srcIdx);\n        }\n      }\n else {\n        trgPoint.setNull();\n      }\n    }\n else {\n      trgPoint.setNonTerminal();\n      final int absoluteNonTerminalSourcePosition=srcStart + nonTerminalSourcePositions[Math.abs(trg[trgIndex]) - 1];\n      trgPoint.add(absoluteNonTerminalSourcePosition);\n    }\n    trgPoints.add(trgPoint);\n  }\n}"}
{"ids": "11758", "raw_code": "protected void configureImageReaderLoaders(){\n  imageReaderLoaders=new Vector<ImageReaderLoader>();\n  ImageReaderLoader idl=(ImageReaderLoader)ComponentFactory.create(\"com.bbn.openmap.dataAccess.image.geotiff.GeoTIFFImageReaderLoader\");\n  if (idl != null) {\n    imageReaderLoaders.add(idl);\n  }\n else {\n    logger.warning(\"ImageTileLayer needs JAI installed in order to use GeoTIFF Image Reader.\");\n  }\n  idl=(ImageReaderLoader)ComponentFactory.create(\"com.bbn.openmap.dataAccess.image.WorldFileImageReaderLoader\");\n  if (idl != null) {\n    imageReaderLoaders.add(idl);\n  }\n else {\n    logger.warning(\"ImageTileLayer needs JAI installed in order to use World File Image Reader.\");\n  }\n}"}
{"ids": "49344", "raw_code": "protected void handleSpecialSubstitution(String replace,String replaceWith,int startPos,String description){\n  if (replace.equals(\"<ignore>\")) {\n    if (replaceWith.charAt(0) == '(') {\n      error(\"Ignore group can't be enclosed in (\",startPos,description);\n    }\n    ignoreChars=CharSet.parseString(replaceWith);\n  }\n}"}
{"ids": "36121", "raw_code": "@Override public void countExample(Example example){\n  double plabel;\n  double label=example.getValue(labelAttribute);\n  if (!predictedAttribute.isNominal()) {\n    plabel=example.getValue(predictedAttribute);\n  }\n else {\n    String labelS=example.getValueAsString(labelAttribute);\n    plabel=example.getConfidence(labelS);\n    label=1.0d;\n  }\n  double weight=1.0d;\n  if (weightAttribute != null) {\n    weight=example.getValue(weightAttribute);\n  }\n  double diff=weight * Math.abs(label - plabel);\n  deviationSum+=diff;\n  double relDiff=Math.abs(weight * label - (trueLabelSum / exampleCounter));\n  relativeSum+=relDiff;\n}"}
{"ids": "53925", "raw_code": "public static void unzip(String zipFile,String location) throws IOException {\n  final int BUFFER_SIZE=10240;\n  int size;\n  byte[] buffer=new byte[BUFFER_SIZE];\n  try {\n    if (!location.endsWith(\"/\")) {\n      location+=\"/\";\n    }\n    File f=new File(location);\n    if (!f.isDirectory()) {\n      f.mkdirs();\n    }\n    ZipInputStream zin=new ZipInputStream(new BufferedInputStream(new FileInputStream(zipFile),BUFFER_SIZE));\n    try {\n      ZipEntry ze=null;\n      while ((ze=zin.getNextEntry()) != null) {\n        String path=location + ze.getName();\n        File unzipFile=new File(path);\n        if (ze.isDirectory()) {\n          if (!unzipFile.isDirectory()) {\n            unzipFile.mkdirs();\n          }\n        }\n else {\n          File parentDir=unzipFile.getParentFile();\n          if (null != parentDir) {\n            if (!parentDir.isDirectory()) {\n              parentDir.mkdirs();\n            }\n          }\n          FileOutputStream out=new FileOutputStream(unzipFile,false);\n          BufferedOutputStream fout=new BufferedOutputStream(out,BUFFER_SIZE);\n          try {\n            while ((size=zin.read(buffer,0,BUFFER_SIZE)) != -1) {\n              fout.write(buffer,0,size);\n            }\n            zin.closeEntry();\n          }\n  finally {\n            fout.flush();\n            fout.close();\n          }\n        }\n      }\n    }\n  finally {\n      zin.close();\n    }\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"Unzip exception\",e);\n  }\n}"}
{"ids": "35018", "raw_code": "private void addDeclAnnotations(Map<String,Set<AnnotationMirror>> declAnnos,Element elt){\n  if (fromStubFile != null) {\n    Set<AnnotationMirror> annos=declAnnos.get(ElementUtils.getVerboseName(elt));\n    if (annos == null) {\n      annos=AnnotationUtils.createAnnotationSet();\n      putOrAddToMap(declAnnos,ElementUtils.getVerboseName(elt),annos);\n    }\n    annos.add(fromStubFile);\n  }\n}"}
{"ids": "62898", "raw_code": "private void inspectConditionsWithBooleans(LinkedList<PsiElement> objBranchConditions){\n  for (  PsiElement objExpression : objBranchConditions) {\n    if (!(objExpression instanceof ConstantReference)) {\n      continue;\n    }\n    if (ExpressionSemanticUtil.isBoolean((ConstantReference)objExpression)) {\n      holder.registerProblem(objExpression,strProblemDescriptionBooleans,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);\n    }\n  }\n}"}
{"ids": "56197", "raw_code": "public static XContentType xContentType(CharSequence content){\n  int length=content.length() < GUESS_HEADER_LENGTH ? content.length() : GUESS_HEADER_LENGTH;\n  if (length == 0) {\n    return null;\n  }\n  char first=content.charAt(0);\n  if (first == '{') {\n    return XContentType.JSON;\n  }\n  if (length > 2 && first == SmileConstants.HEADER_BYTE_1 && content.charAt(1) == SmileConstants.HEADER_BYTE_2 && content.charAt(2) == SmileConstants.HEADER_BYTE_3) {\n    return XContentType.SMILE;\n  }\n  if (length > 2 && first == '-' && content.charAt(1) == '-' && content.charAt(2) == '-') {\n    return XContentType.YAML;\n  }\n  for (int i=0; i < length; i++) {\n    char c=content.charAt(i);\n    if (c == '{') {\n      return XContentType.JSON;\n    }\n    if (Character.isWhitespace(c) == false) {\n      break;\n    }\n  }\n  return null;\n}"}
{"ids": "16477", "raw_code": "@RequestMapping(value=\"/{bookmarkId}\",method=RequestMethod.DELETE) public ResponseEntity<Bookmark> deleteBookmark(@PathVariable(value=\"username\") String username,@PathVariable(value=\"bookmarkId\") int bookmarkId) throws BookmarkNotFoundException {\n  Optional<Bookmark> optional=bookmarksRepository.findByIdAndUserUsername(bookmarkId,username);\n  if (optional.isPresent()) {\n    bookmarksRepository.delete(optional.get());\n    return new ResponseEntity<>(optional.get(),HttpStatus.OK);\n  }\n else {\n    throw new BookmarkNotFoundException(\"Bookmark not found. id = \" + bookmarkId);\n  }\n}"}
{"ids": "1143", "raw_code": "public static Object loadInstance(Class clazz,Object defaultValue){\n  try {\n    return clazz.newInstance();\n  }\n catch (  Throwable t) {\n    return defaultValue;\n  }\n}"}
{"ids": "49895", "raw_code": "public static String toJSONString(Object value){\n  final StringWriter writer=new StringWriter();\n  try {\n    writeJSONString(value,writer);\n    return writer.toString();\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "56671", "raw_code": "public static final <A>CollectionX<A> toLazyCollection(final Stream<A> stream){\n  return SeqUtils.toLazyCollection(stream.iterator());\n}"}
{"ids": "16568", "raw_code": "static Unit valueOf(String name,boolean horizontal){\n  if (name.length() == 0) {\n    Unit defaultUnit=Sizes.getDefaultUnit();\n    if (defaultUnit != null) {\n      return defaultUnit;\n    }\n    return horizontal ? DIALOG_UNITS_X : DIALOG_UNITS_Y;\n  }\n else   if (name.equals(\"px\")) {\n    return PIXEL;\n  }\n else   if (name.equals(\"dlu\")) {\n    return horizontal ? DIALOG_UNITS_X : DIALOG_UNITS_Y;\n  }\n else   if (name.equals(\"pt\")) {\n    return POINT;\n  }\n else   if (name.equals(\"in\")) {\n    return INCH;\n  }\n else   if (name.equals(\"mm\")) {\n    return MILLIMETER;\n  }\n else   if (name.equals(\"cm\")) {\n    return CENTIMETER;\n  }\n else {\n    throw new IllegalArgumentException(\"Invalid unit name '\" + name + \"'. Must be one of: \"+ \"px, dlu, pt, mm, cm, in\");\n  }\n}"}
{"ids": "57975", "raw_code": "public void checkNumberArgs(int argNum) throws WrongNumberArgsException {\n  if ((argNum < 1) || (argNum > 2))   reportWrongNumberArgs();\n}"}
